'            FreeBasic header file, auto-generated by
'                       ### girtobac ###
' LGPLv2.1 (C) 2013-2022 by Thomas{ doT ]Freiherr[ At ]gmx[ DoT }net
' Auto-translated from file /usr/share/gir-1.0/Gst-1.0.gir
#INCLUDE ONCE "_GirToBac-0.0.bi"
' Repository version 1.2
#INCLUDE ONCE "GLib-2.0.bi"
#INCLUDE ONCE "GModule-2.0.bi"
#INCLUDE ONCE "GObject-2.0.bi"
TYPE AS gpointer GstClockID
TYPE AS guint64 GstClockTime
TYPE AS gint64 GstClockTimeDiff
TYPE AS guint64 GstElementFactoryListType
#DEFINE GST_ALLOCATOR_SYSMEM @!"SystemMemory"
TYPE AS _GstAllocationParams GstAllocationParams
TYPE AS _GstAllocator GstAllocator
TYPE AS _GstAllocatorClass GstAllocatorClass
TYPE AS LONG GstAllocatorFlags
ENUM
  GST_ALLOCATOR_FLAG_CUSTOM_ALLOC = 16
  GST_ALLOCATOR_FLAG_LAST = 1048576
END ENUM
TYPE AS _GstAllocatorPrivate GstAllocatorPrivate
TYPE AS _GstAtomicQueue GstAtomicQueue
#DEFINE GST_BUFFER_COPY_ALL 15
#DEFINE GST_BUFFER_COPY_METADATA 7
#DEFINE GST_BUFFER_OFFSET_NONE 18446744073709551615
TYPE AS _GstBin GstBin
TYPE AS _GstBinClass GstBinClass
TYPE AS LONG GstBinFlags
ENUM
  GST_BIN_FLAG_NO_RESYNC = 16384
  GST_BIN_FLAG_STREAMS_AWARE = 32768
  GST_BIN_FLAG_LAST = 524288
END ENUM
TYPE AS _GstBinPrivate GstBinPrivate
TYPE AS _GstBitmask GstBitmask
TYPE AS _GstBuffer GstBuffer
TYPE AS LONG GstBufferCopyFlags
ENUM
  GST_BUFFER_COPY_NONE = 0
  GST_BUFFER_COPY_FLAGS = 1
  GST_BUFFER_COPY_TIMESTAMPS = 2
  GST_BUFFER_COPY_META = 4
  GST_BUFFER_COPY_MEMORY = 8
  GST_BUFFER_COPY_MERGE = 16
  GST_BUFFER_COPY_DEEP = 32
END ENUM
TYPE AS LONG GstBufferFlags
ENUM
  GST_BUFFER_FLAG_LIVE = 16
  GST_BUFFER_FLAG_DECODE_ONLY = 32
  GST_BUFFER_FLAG_DISCONT = 64
  GST_BUFFER_FLAG_RESYNC = 128
  GST_BUFFER_FLAG_CORRUPTED = 256
  GST_BUFFER_FLAG_MARKER = 512
  GST_BUFFER_FLAG_HEADER = 1024
  GST_BUFFER_FLAG_GAP = 2048
  GST_BUFFER_FLAG_DROPPABLE = 4096
  GST_BUFFER_FLAG_DELTA_UNIT = 8192
  GST_BUFFER_FLAG_TAG_MEMORY = 16384
  GST_BUFFER_FLAG_SYNC_AFTER = 32768
  GST_BUFFER_FLAG_NON_DROPPABLE = 65536
  GST_BUFFER_FLAG_LAST = 1048576
END ENUM
TYPE AS _GstBufferList GstBufferList
TYPE AS _GstBufferPool GstBufferPool
TYPE AS LONG GstBufferPoolAcquireFlags
ENUM
  GST_BUFFER_POOL_ACQUIRE_FLAG_NONE = 0
  GST_BUFFER_POOL_ACQUIRE_FLAG_KEY_UNIT = 1
  GST_BUFFER_POOL_ACQUIRE_FLAG_DONTWAIT = 2
  GST_BUFFER_POOL_ACQUIRE_FLAG_DISCONT = 4
  GST_BUFFER_POOL_ACQUIRE_FLAG_LAST = 65536
END ENUM
TYPE AS _GstBufferPoolAcquireParams GstBufferPoolAcquireParams
TYPE AS _GstBufferPoolClass GstBufferPoolClass
TYPE AS _GstBufferPoolPrivate GstBufferPoolPrivate
TYPE AS LONG GstBufferingMode
ENUM
  GST_BUFFERING_STREAM = 0
  GST_BUFFERING_DOWNLOAD = 1
  GST_BUFFERING_TIMESHIFT = 2
  GST_BUFFERING_LIVE = 3
END ENUM
TYPE AS _GstBus GstBus
TYPE AS _GstBusClass GstBusClass
TYPE AS LONG GstBusFlags
ENUM
  GST_BUS_FLUSHING = 16
  GST_BUS_FLAG_LAST = 32
END ENUM
TYPE AS _GstBusPrivate GstBusPrivate
TYPE AS LONG GstBusSyncReply
ENUM
  GST_BUS_DROP = 0
  GST_BUS_PASS = 1
  GST_BUS_ASYNC = 2
END ENUM
#DEFINE GST_CAN_INLINE 1
#DEFINE GST_CAPS_FEATURE_MEMORY_SYSTEM_MEMORY @!"memory:SystemMemory"
#DEFINE GST_CLOCK_TIME_NONE 18446744073709551615
TYPE AS _GstCaps GstCaps
TYPE AS _GstCapsFeatures GstCapsFeatures
TYPE AS LONG GstCapsFlags
ENUM
  GST_CAPS_FLAG_ANY = 16
END ENUM
TYPE AS LONG GstCapsIntersectMode
ENUM
  GST_CAPS_INTERSECT_ZIG_ZAG = 0
  GST_CAPS_INTERSECT_FIRST = 1
END ENUM
TYPE AS _GstChildProxy GstChildProxy
TYPE AS _GstChildProxyInterface GstChildProxyInterface
TYPE AS _GstClock GstClock
TYPE AS _GstClockClass GstClockClass
TYPE AS _GstClockEntry GstClockEntry
TYPE AS LONG GstClockEntryType
ENUM
  GST_CLOCK_ENTRY_SINGLE = 0
  GST_CLOCK_ENTRY_PERIODIC = 1
END ENUM
TYPE AS LONG GstClockFlags
ENUM
  GST_CLOCK_FLAG_CAN_DO_SINGLE_SYNC = 16
  GST_CLOCK_FLAG_CAN_DO_SINGLE_ASYNC = 32
  GST_CLOCK_FLAG_CAN_DO_PERIODIC_SYNC = 64
  GST_CLOCK_FLAG_CAN_DO_PERIODIC_ASYNC = 128
  GST_CLOCK_FLAG_CAN_SET_RESOLUTION = 256
  GST_CLOCK_FLAG_CAN_SET_MASTER = 512
  GST_CLOCK_FLAG_NEEDS_STARTUP_SYNC = 1024
  GST_CLOCK_FLAG_LAST = 4096
END ENUM
TYPE AS _GstClockPrivate GstClockPrivate
TYPE AS LONG GstClockReturn
ENUM
  GST_CLOCK_OK = 0
  GST_CLOCK_EARLY = 1
  GST_CLOCK_UNSCHEDULED = 2
  GST_CLOCK_BUSY = 3
  GST_CLOCK_BADTIME = 4
  GST_CLOCK_ERROR = 5
  GST_CLOCK_UNSUPPORTED = 6
  GST_CLOCK_DONE = 7
END ENUM
TYPE AS LONG GstClockType
ENUM
  GST_CLOCK_TYPE_REALTIME = 0
  GST_CLOCK_TYPE_MONOTONIC = 1
  GST_CLOCK_TYPE_OTHER = 2
END ENUM
TYPE AS _GstContext GstContext
TYPE AS _GstControlBinding GstControlBinding
TYPE AS _GstControlBindingClass GstControlBindingClass
TYPE AS _GstControlBindingPrivate GstControlBindingPrivate
TYPE AS _GstControlSource GstControlSource
TYPE AS _GstControlSourceClass GstControlSourceClass
TYPE AS LONG GstCoreError
ENUM
  GST_CORE_ERROR_FAILED = 1
  GST_CORE_ERROR_TOO_LAZY = 2
  GST_CORE_ERROR_NOT_IMPLEMENTED = 3
  GST_CORE_ERROR_STATE_CHANGE = 4
  GST_CORE_ERROR_PAD = 5
  GST_CORE_ERROR_THREAD = 6
  GST_CORE_ERROR_NEGOTIATION = 7
  GST_CORE_ERROR_EVENT = 8
  GST_CORE_ERROR_SEEK = 9
  GST_CORE_ERROR_CAPS = 10
  GST_CORE_ERROR_TAG = 11
  GST_CORE_ERROR_MISSING_PLUGIN = 12
  GST_CORE_ERROR_CLOCK = 13
  GST_CORE_ERROR_DISABLED = 14
  GST_CORE_ERROR_NUM_ERRORS = 15
END ENUM
#DEFINE GST_DEBUG_BG_MASK 240
#DEFINE GST_DEBUG_FG_MASK 15
#DEFINE GST_DEBUG_FORMAT_MASK 65280
TYPE AS _GstDateTime GstDateTime
TYPE AS _GstDebugCategory GstDebugCategory
TYPE AS LONG GstDebugColorFlags
ENUM
  GST_DEBUG_FG_BLACK = 0
  GST_DEBUG_FG_RED = 1
  GST_DEBUG_FG_GREEN = 2
  GST_DEBUG_FG_YELLOW = 3
  GST_DEBUG_FG_BLUE = 4
  GST_DEBUG_FG_MAGENTA = 5
  GST_DEBUG_FG_CYAN = 6
  GST_DEBUG_FG_WHITE = 7
  GST_DEBUG_BG_BLACK = 0
  GST_DEBUG_BG_RED = 16
  GST_DEBUG_BG_GREEN = 32
  GST_DEBUG_BG_YELLOW = 48
  GST_DEBUG_BG_BLUE = 64
  GST_DEBUG_BG_MAGENTA = 80
  GST_DEBUG_BG_CYAN = 96
  GST_DEBUG_BG_WHITE = 112
  GST_DEBUG_BOLD = 256
  GST_DEBUG_UNDERLINE = 512
END ENUM
TYPE AS LONG GstDebugColorMode
ENUM
  GST_DEBUG_COLOR_MODE_OFF = 0
  GST_DEBUG_COLOR_MODE_ON = 1
  GST_DEBUG_COLOR_MODE_UNIX = 2
END ENUM
TYPE AS LONG GstDebugGraphDetails
ENUM
  GST_DEBUG_GRAPH_SHOW_MEDIA_TYPE = 1
  GST_DEBUG_GRAPH_SHOW_CAPS_DETAILS = 2
  GST_DEBUG_GRAPH_SHOW_NON_DEFAULT_PARAMS = 4
  GST_DEBUG_GRAPH_SHOW_STATES = 8
  GST_DEBUG_GRAPH_SHOW_FULL_PARAMS = 16
  GST_DEBUG_GRAPH_SHOW_ALL = 15
  GST_DEBUG_GRAPH_SHOW_VERBOSE = 4294967295
END ENUM
TYPE AS LONG GstDebugLevel
ENUM
  GST_LEVEL_NONE = 0
  GST_LEVEL_ERROR = 1
  GST_LEVEL_WARNING = 2
  GST_LEVEL_FIXME = 3
  GST_LEVEL_INFO = 4
  GST_LEVEL_DEBUG = 5
  GST_LEVEL_LOG = 6
  GST_LEVEL_TRACE = 7
  GST_LEVEL_MEMDUMP = 9
  GST_LEVEL_COUNT = 10
END ENUM
TYPE AS _GstDebugMessage GstDebugMessage
TYPE AS _GstDevice GstDevice
TYPE AS _GstDeviceClass GstDeviceClass
TYPE AS _GstDeviceMonitor GstDeviceMonitor
TYPE AS _GstDeviceMonitorClass GstDeviceMonitorClass
TYPE AS _GstDeviceMonitorPrivate GstDeviceMonitorPrivate
TYPE AS _GstDevicePrivate GstDevicePrivate
TYPE AS _GstDeviceProvider GstDeviceProvider
TYPE AS _GstDeviceProviderClass GstDeviceProviderClass
TYPE AS _GstDeviceProviderFactory GstDeviceProviderFactory
TYPE AS _GstDeviceProviderFactoryClass GstDeviceProviderFactoryClass
TYPE AS _GstDeviceProviderPrivate GstDeviceProviderPrivate
TYPE AS _GstDoubleRange GstDoubleRange
TYPE AS _GstDynamicTypeFactory GstDynamicTypeFactory
TYPE AS _GstDynamicTypeFactoryClass GstDynamicTypeFactoryClass
#DEFINE GST_ELEMENT_FACTORY_KLASS_DECODER @!"Decoder"
#DEFINE GST_ELEMENT_FACTORY_KLASS_DECRYPTOR @!"Decryptor"
#DEFINE GST_ELEMENT_FACTORY_KLASS_DEMUXER @!"Demuxer"
#DEFINE GST_ELEMENT_FACTORY_KLASS_DEPAYLOADER @!"Depayloader"
#DEFINE GST_ELEMENT_FACTORY_KLASS_ENCODER @!"Encoder"
#DEFINE GST_ELEMENT_FACTORY_KLASS_ENCRYPTOR @!"Encryptor"
#DEFINE GST_ELEMENT_FACTORY_KLASS_FORMATTER @!"Formatter"
#DEFINE GST_ELEMENT_FACTORY_KLASS_HARDWARE @!"Hardware"
#DEFINE GST_ELEMENT_FACTORY_KLASS_MEDIA_AUDIO @!"Audio"
#DEFINE GST_ELEMENT_FACTORY_KLASS_MEDIA_IMAGE @!"Image"
#DEFINE GST_ELEMENT_FACTORY_KLASS_MEDIA_METADATA @!"Metadata"
#DEFINE GST_ELEMENT_FACTORY_KLASS_MEDIA_SUBTITLE @!"Subtitle"
#DEFINE GST_ELEMENT_FACTORY_KLASS_MEDIA_VIDEO @!"Video"
#DEFINE GST_ELEMENT_FACTORY_KLASS_MUXER @!"Muxer"
#DEFINE GST_ELEMENT_FACTORY_KLASS_PARSER @!"Parser"
#DEFINE GST_ELEMENT_FACTORY_KLASS_PAYLOADER @!"Payloader"
#DEFINE GST_ELEMENT_FACTORY_KLASS_SINK @!"Sink"
#DEFINE GST_ELEMENT_FACTORY_KLASS_SRC @!"Source"
#DEFINE GST_ELEMENT_FACTORY_TYPE_ANY 562949953421311
#DEFINE GST_ELEMENT_FACTORY_TYPE_AUDIOVIDEO_SINKS 3940649673949188
#DEFINE GST_ELEMENT_FACTORY_TYPE_AUDIO_ENCODER 1125899906842626
#DEFINE GST_ELEMENT_FACTORY_TYPE_DECODABLE 1377
#DEFINE GST_ELEMENT_FACTORY_TYPE_DECODER 1
#DEFINE GST_ELEMENT_FACTORY_TYPE_DECRYPTOR 1024
#DEFINE GST_ELEMENT_FACTORY_TYPE_DEMUXER 32
#DEFINE GST_ELEMENT_FACTORY_TYPE_DEPAYLOADER 256
#DEFINE GST_ELEMENT_FACTORY_TYPE_ENCODER 2
#DEFINE GST_ELEMENT_FACTORY_TYPE_ENCRYPTOR 2048
#DEFINE GST_ELEMENT_FACTORY_TYPE_FORMATTER 512
#DEFINE GST_ELEMENT_FACTORY_TYPE_MAX_ELEMENTS 281474976710656
#DEFINE GST_ELEMENT_FACTORY_TYPE_MEDIA_ANY 18446462598732840960
#DEFINE GST_ELEMENT_FACTORY_TYPE_MEDIA_AUDIO 1125899906842624
#DEFINE GST_ELEMENT_FACTORY_TYPE_MEDIA_IMAGE 2251799813685248
#DEFINE GST_ELEMENT_FACTORY_TYPE_MEDIA_METADATA 9007199254740992
#DEFINE GST_ELEMENT_FACTORY_TYPE_MEDIA_SUBTITLE 4503599627370496
#DEFINE GST_ELEMENT_FACTORY_TYPE_MEDIA_VIDEO 562949953421312
#DEFINE GST_ELEMENT_FACTORY_TYPE_MUXER 16
#DEFINE GST_ELEMENT_FACTORY_TYPE_PARSER 64
#DEFINE GST_ELEMENT_FACTORY_TYPE_PAYLOADER 128
#DEFINE GST_ELEMENT_FACTORY_TYPE_SINK 4
#DEFINE GST_ELEMENT_FACTORY_TYPE_SRC 8
#DEFINE GST_ELEMENT_FACTORY_TYPE_VIDEO_ENCODER 2814749767106562
#DEFINE GST_ELEMENT_METADATA_AUTHOR @!"author"
#DEFINE GST_ELEMENT_METADATA_DESCRIPTION @!"description"
#DEFINE GST_ELEMENT_METADATA_DOC_URI @!"doc-uri"
#DEFINE GST_ELEMENT_METADATA_ICON_NAME @!"icon-name"
#DEFINE GST_ELEMENT_METADATA_KLASS @!"klass"
#DEFINE GST_ELEMENT_METADATA_LONGNAME @!"long-name"
#DEFINE GST_ERROR_SYSTEM @!"system error: %s"
#DEFINE GST_EVENT_NUM_SHIFT 8
#DEFINE GST_EVENT_TYPE_BOTH 3
TYPE AS _GstElement GstElement
TYPE AS _GstElementClass GstElementClass
TYPE AS _GstElementFactory GstElementFactory
TYPE AS _GstElementFactoryClass GstElementFactoryClass
TYPE AS LONG GstElementFlags
ENUM
  GST_ELEMENT_FLAG_LOCKED_STATE = 16
  GST_ELEMENT_FLAG_SINK = 32
  GST_ELEMENT_FLAG_SOURCE = 64
  GST_ELEMENT_FLAG_PROVIDE_CLOCK = 128
  GST_ELEMENT_FLAG_REQUIRE_CLOCK = 256
  GST_ELEMENT_FLAG_INDEXABLE = 512
  GST_ELEMENT_FLAG_LAST = 16384
END ENUM
TYPE AS _GstEvent GstEvent
TYPE AS LONG GstEventType
ENUM
  GST_EVENT_UNKNOWN = 0
  GST_EVENT_FLUSH_START = 2563
  GST_EVENT_FLUSH_STOP = 5127
  GST_EVENT_STREAM_START = 10254
  GST_EVENT_CAPS = 12814
  GST_EVENT_SEGMENT = 17934
  GST_EVENT_STREAM_COLLECTION = 19230
  GST_EVENT_TAG = 20510
  GST_EVENT_BUFFERSIZE = 23054
  GST_EVENT_SINK_MESSAGE = 25630
  GST_EVENT_STREAM_GROUP_DONE = 26894
  GST_EVENT_EOS = 28174
  GST_EVENT_TOC = 30750
  GST_EVENT_PROTECTION = 33310
  GST_EVENT_SEGMENT_DONE = 38406
  GST_EVENT_GAP = 40966
  GST_EVENT_QOS = 48641
  GST_EVENT_SEEK = 51201
  GST_EVENT_NAVIGATION = 53761
  GST_EVENT_LATENCY = 56321
  GST_EVENT_STEP = 58881
  GST_EVENT_RECONFIGURE = 61441
  GST_EVENT_TOC_SELECT = 64001
  GST_EVENT_SELECT_STREAMS = 66561
  GST_EVENT_CUSTOM_UPSTREAM = 69121
  GST_EVENT_CUSTOM_DOWNSTREAM = 71686
  GST_EVENT_CUSTOM_DOWNSTREAM_OOB = 74242
  GST_EVENT_CUSTOM_DOWNSTREAM_STICKY = 76830
  GST_EVENT_CUSTOM_BOTH = 79367
  GST_EVENT_CUSTOM_BOTH_OOB = 81923
END ENUM
TYPE AS LONG GstEventTypeFlags
ENUM
  GST_EVENT_TYPE_UPSTREAM = 1
  GST_EVENT_TYPE_DOWNSTREAM = 2
  GST_EVENT_TYPE_SERIALIZED = 4
  GST_EVENT_TYPE_STICKY = 8
  GST_EVENT_TYPE_STICKY_MULTI = 16
END ENUM
#DEFINE GST_FLAG_SET_MASK_EXACT 4294967295
#DEFINE GST_FORMAT_PERCENT_MAX 1000000
#DEFINE GST_FORMAT_PERCENT_SCALE 10000
#DEFINE GST_FOURCC_FORMAT @!"c%c%c%c"
TYPE AS _GstFlagSet GstFlagSet
TYPE AS LONG GstFlowReturn
ENUM
  GST_FLOW_CUSTOM_SUCCESS_2 = 102
  GST_FLOW_CUSTOM_SUCCESS_1 = 101
  GST_FLOW_CUSTOM_SUCCESS = 100
  GST_FLOW_OK = 0
  GST_FLOW_NOT_LINKED = -1
  GST_FLOW_FLUSHING = -2
  GST_FLOW_EOS = -3
  GST_FLOW_NOT_NEGOTIATED = -4
  GST_FLOW_ERROR = -5
  GST_FLOW_NOT_SUPPORTED = -6
  GST_FLOW_CUSTOM_ERROR = -100
  GST_FLOW_CUSTOM_ERROR_1 = -101
  GST_FLOW_CUSTOM_ERROR_2 = -102
END ENUM
TYPE AS LONG GstFormat
ENUM
  GST_FORMAT_UNDEFINED = 0
  GST_FORMAT_DEFAULT = 1
  GST_FORMAT_BYTES = 2
  GST_FORMAT_TIME = 3
  GST_FORMAT_BUFFERS = 4
  GST_FORMAT_PERCENT = 5
END ENUM
TYPE AS _GstFormatDefinition GstFormatDefinition
TYPE AS _GstFraction GstFraction
TYPE AS _GstFractionRange GstFractionRange
#DEFINE GST_GROUP_ID_INVALID 0
TYPE AS _GstGhostPad GstGhostPad
TYPE AS _GstGhostPadClass GstGhostPadClass
TYPE AS _GstGhostPadPrivate GstGhostPadPrivate
TYPE AS _GstInt64Range GstInt64Range
TYPE AS _GstIntRange GstIntRange
TYPE AS _GstIterator GstIterator
TYPE AS LONG GstIteratorItem
ENUM
  GST_ITERATOR_ITEM_SKIP = 0
  GST_ITERATOR_ITEM_PASS = 1
  GST_ITERATOR_ITEM_END = 2
END ENUM
TYPE AS LONG GstIteratorResult
ENUM
  GST_ITERATOR_DONE = 0
  GST_ITERATOR_OK = 1
  GST_ITERATOR_RESYNC = 2
  GST_ITERATOR_ERROR = 3
END ENUM
#DEFINE GST_LICENSE_UNKNOWN @!"unknown"
#DEFINE GST_LOCK_FLAG_READWRITE 3
TYPE AS LONG GstLibraryError
ENUM
  GST_LIBRARY_ERROR_FAILED = 1
  GST_LIBRARY_ERROR_TOO_LAZY = 2
  GST_LIBRARY_ERROR_INIT = 3
  GST_LIBRARY_ERROR_SHUTDOWN = 4
  GST_LIBRARY_ERROR_SETTINGS = 5
  GST_LIBRARY_ERROR_ENCODE = 6
  GST_LIBRARY_ERROR_NUM_ERRORS = 7
END ENUM
TYPE AS LONG GstLockFlags
ENUM
  GST_LOCK_FLAG_READ = 1
  GST_LOCK_FLAG_WRITE = 2
  GST_LOCK_FLAG_EXCLUSIVE = 4
  GST_LOCK_FLAG_LAST = 256
END ENUM
#DEFINE GST_MAP_READWRITE 3
#DEFINE GST_META_TAG_MEMORY_STR @!"memory"
#DEFINE GST_MSECOND 1000000
TYPE AS LONG GstMapFlags
ENUM
  GST_MAP_READ = 1
  GST_MAP_WRITE = 2
  GST_MAP_FLAG_LAST = 65536
END ENUM
TYPE AS _GstMapInfo GstMapInfo
TYPE AS _GstMemory GstMemory
TYPE AS LONG GstMemoryFlags
ENUM
  GST_MEMORY_FLAG_READONLY = 2
  GST_MEMORY_FLAG_NO_SHARE = 16
  GST_MEMORY_FLAG_ZERO_PREFIXED = 32
  GST_MEMORY_FLAG_ZERO_PADDED = 64
  GST_MEMORY_FLAG_PHYSICALLY_CONTIGUOUS = 128
  GST_MEMORY_FLAG_NOT_MAPPABLE = 256
  GST_MEMORY_FLAG_LAST = 1048576
END ENUM
TYPE AS _GstMessage GstMessage
TYPE AS LONG GstMessageType
ENUM
  GST_MESSAGE_UNKNOWN = 0
  GST_MESSAGE_EOS = 1
  GST_MESSAGE_ERROR = 2
  GST_MESSAGE_WARNING = 4
  GST_MESSAGE_INFO = 8
  GST_MESSAGE_TAG = 16
  GST_MESSAGE_BUFFERING = 32
  GST_MESSAGE_STATE_CHANGED = 64
  GST_MESSAGE_STATE_DIRTY = 128
  GST_MESSAGE_STEP_DONE = 256
  GST_MESSAGE_CLOCK_PROVIDE = 512
  GST_MESSAGE_CLOCK_LOST = 1024
  GST_MESSAGE_NEW_CLOCK = 2048
  GST_MESSAGE_STRUCTURE_CHANGE = 4096
  GST_MESSAGE_STREAM_STATUS = 8192
  GST_MESSAGE_APPLICATION = 16384
  GST_MESSAGE_ELEMENT = 32768
  GST_MESSAGE_SEGMENT_START = 65536
  GST_MESSAGE_SEGMENT_DONE = 131072
  GST_MESSAGE_DURATION_CHANGED = 262144
  GST_MESSAGE_LATENCY = 524288
  GST_MESSAGE_ASYNC_START = 1048576
  GST_MESSAGE_ASYNC_DONE = 2097152
  GST_MESSAGE_REQUEST_STATE = 4194304
  GST_MESSAGE_STEP_START = 8388608
  GST_MESSAGE_QOS = 16777216
  GST_MESSAGE_PROGRESS = 33554432
  GST_MESSAGE_TOC = 67108864
  GST_MESSAGE_RESET_TIME = 134217728
  GST_MESSAGE_STREAM_START = 268435456
  GST_MESSAGE_NEED_CONTEXT = 536870912
  GST_MESSAGE_HAVE_CONTEXT = 1073741824
  GST_MESSAGE_EXTENDED = 2147483648
  GST_MESSAGE_DEVICE_ADDED = 2147483649
  GST_MESSAGE_DEVICE_REMOVED = 2147483650
  GST_MESSAGE_PROPERTY_NOTIFY = 2147483651
  GST_MESSAGE_STREAM_COLLECTION = 2147483652
  GST_MESSAGE_STREAMS_SELECTED = 2147483653
  GST_MESSAGE_REDIRECT = 2147483654
  GST_MESSAGE_DEVICE_CHANGED = 2147483655
  GST_MESSAGE_ANY = 4294967295
END ENUM
TYPE AS _GstMeta GstMeta
TYPE AS LONG GstMetaFlags
ENUM
  GST_META_FLAG_NONE = 0
  GST_META_FLAG_READONLY = 1
  GST_META_FLAG_POOLED = 2
  GST_META_FLAG_LOCKED = 4
  GST_META_FLAG_LAST = 65536
END ENUM
TYPE AS _GstMetaInfo GstMetaInfo
TYPE AS _GstMetaTransformCopy GstMetaTransformCopy
TYPE AS _GstMiniObject GstMiniObject
TYPE AS LONG GstMiniObjectFlags
ENUM
  GST_MINI_OBJECT_FLAG_LOCKABLE = 1
  GST_MINI_OBJECT_FLAG_LOCK_READONLY = 2
  GST_MINI_OBJECT_FLAG_MAY_BE_LEAKED = 4
  GST_MINI_OBJECT_FLAG_LAST = 16
END ENUM
#DEFINE GST_NSECOND 1
TYPE AS _GstObject GstObject
TYPE AS _GstObjectClass GstObjectClass
TYPE AS LONG GstObjectFlags
ENUM
  GST_OBJECT_FLAG_MAY_BE_LEAKED = 1
  GST_OBJECT_FLAG_LAST = 16
END ENUM
#DEFINE GST_PARAM_CONTROLLABLE 512
#DEFINE GST_PARAM_MUTABLE_PAUSED 2048
#DEFINE GST_PARAM_MUTABLE_PLAYING 4096
#DEFINE GST_PARAM_MUTABLE_READY 1024
#DEFINE GST_PARAM_USER_SHIFT 65536
#DEFINE GST_PROTECTION_SYSTEM_ID_CAPS_FIELD @!"protection-system"
#DEFINE GST_PROTECTION_UNSPECIFIED_SYSTEM_ID @!"unspecified-system-id"
#DEFINE GST_PTR_FORMAT @!"paA"
TYPE AS _GstPad GstPad
TYPE AS _GstPadClass GstPadClass
TYPE AS LONG GstPadDirection
ENUM
  GST_PAD_UNKNOWN = 0
  GST_PAD_SRC = 1
  GST_PAD_SINK = 2
END ENUM
TYPE AS LONG GstPadFlags
ENUM
  GST_PAD_FLAG_BLOCKED = 16
  GST_PAD_FLAG_FLUSHING = 32
  GST_PAD_FLAG_EOS = 64
  GST_PAD_FLAG_BLOCKING = 128
  GST_PAD_FLAG_NEED_PARENT = 256
  GST_PAD_FLAG_NEED_RECONFIGURE = 512
  GST_PAD_FLAG_PENDING_EVENTS = 1024
  GST_PAD_FLAG_FIXED_CAPS = 2048
  GST_PAD_FLAG_PROXY_CAPS = 4096
  GST_PAD_FLAG_PROXY_ALLOCATION = 8192
  GST_PAD_FLAG_PROXY_SCHEDULING = 16384
  GST_PAD_FLAG_ACCEPT_INTERSECT = 32768
  GST_PAD_FLAG_ACCEPT_TEMPLATE = 65536
  GST_PAD_FLAG_LAST = 1048576
END ENUM
TYPE AS LONG GstPadLinkCheck
ENUM
  GST_PAD_LINK_CHECK_NOTHING = 0
  GST_PAD_LINK_CHECK_HIERARCHY = 1
  GST_PAD_LINK_CHECK_TEMPLATE_CAPS = 2
  GST_PAD_LINK_CHECK_CAPS = 4
  GST_PAD_LINK_CHECK_NO_RECONFIGURE = 8
  GST_PAD_LINK_CHECK_DEFAULT = 5
END ENUM
TYPE AS LONG GstPadLinkReturn
ENUM
  GST_PAD_LINK_OK = 0
  GST_PAD_LINK_WRONG_HIERARCHY = -1
  GST_PAD_LINK_WAS_LINKED = -2
  GST_PAD_LINK_WRONG_DIRECTION = -3
  GST_PAD_LINK_NOFORMAT = -4
  GST_PAD_LINK_NOSCHED = -5
  GST_PAD_LINK_REFUSED = -6
END ENUM
TYPE AS LONG GstPadMode
ENUM
  GST_PAD_MODE_NONE = 0
  GST_PAD_MODE_PUSH = 1
  GST_PAD_MODE_PULL = 2
END ENUM
TYPE AS LONG GstPadPresence
ENUM
  GST_PAD_ALWAYS = 0
  GST_PAD_SOMETIMES = 1
  GST_PAD_REQUEST = 2
END ENUM
TYPE AS _GstPadPrivate GstPadPrivate
TYPE AS _GstPadProbeInfo GstPadProbeInfo
TYPE AS LONG GstPadProbeReturn
ENUM
  GST_PAD_PROBE_DROP = 0
  GST_PAD_PROBE_OK = 1
  GST_PAD_PROBE_REMOVE = 2
  GST_PAD_PROBE_PASS = 3
  GST_PAD_PROBE_HANDLED = 4
END ENUM
TYPE AS LONG GstPadProbeType
ENUM
  GST_PAD_PROBE_TYPE_INVALID = 0
  GST_PAD_PROBE_TYPE_IDLE = 1
  GST_PAD_PROBE_TYPE_BLOCK = 2
  GST_PAD_PROBE_TYPE_BUFFER = 16
  GST_PAD_PROBE_TYPE_BUFFER_LIST = 32
  GST_PAD_PROBE_TYPE_EVENT_DOWNSTREAM = 64
  GST_PAD_PROBE_TYPE_EVENT_UPSTREAM = 128
  GST_PAD_PROBE_TYPE_EVENT_FLUSH = 256
  GST_PAD_PROBE_TYPE_QUERY_DOWNSTREAM = 512
  GST_PAD_PROBE_TYPE_QUERY_UPSTREAM = 1024
  GST_PAD_PROBE_TYPE_PUSH = 4096
  GST_PAD_PROBE_TYPE_PULL = 8192
  GST_PAD_PROBE_TYPE_BLOCKING = 3
  GST_PAD_PROBE_TYPE_DATA_DOWNSTREAM = 112
  GST_PAD_PROBE_TYPE_DATA_UPSTREAM = 128
  GST_PAD_PROBE_TYPE_DATA_BOTH = 240
  GST_PAD_PROBE_TYPE_BLOCK_DOWNSTREAM = 114
  GST_PAD_PROBE_TYPE_BLOCK_UPSTREAM = 130
  GST_PAD_PROBE_TYPE_EVENT_BOTH = 192
  GST_PAD_PROBE_TYPE_QUERY_BOTH = 1536
  GST_PAD_PROBE_TYPE_ALL_BOTH = 1776
  GST_PAD_PROBE_TYPE_SCHEDULING = 12288
END ENUM
TYPE AS _GstPadTemplate GstPadTemplate
TYPE AS _GstPadTemplateClass GstPadTemplateClass
TYPE AS LONG GstPadTemplateFlags
ENUM
  GST_PAD_TEMPLATE_FLAG_LAST = 256
END ENUM
TYPE AS _GstParamArray GstParamArray
TYPE AS _GstParamFraction GstParamFraction
TYPE AS _GstParamSpecArray GstParamSpecArray
TYPE AS _GstParamSpecFraction GstParamSpecFraction
TYPE AS _GstParentBufferMeta GstParentBufferMeta
TYPE AS _GstParseContext GstParseContext
TYPE AS LONG GstParseError
ENUM
  GST_PARSE_ERROR_SYNTAX = 0
  GST_PARSE_ERROR_NO_SUCH_ELEMENT = 1
  GST_PARSE_ERROR_NO_SUCH_PROPERTY = 2
  GST_PARSE_ERROR_LINK = 3
  GST_PARSE_ERROR_COULD_NOT_SET_PROPERTY = 4
  GST_PARSE_ERROR_EMPTY_BIN = 5
  GST_PARSE_ERROR_EMPTY = 6
  GST_PARSE_ERROR_DELAYED_LINK = 7
END ENUM
TYPE AS LONG GstParseFlags
ENUM
  GST_PARSE_FLAG_NONE = 0
  GST_PARSE_FLAG_FATAL_ERRORS = 1
  GST_PARSE_FLAG_NO_SINGLE_ELEMENT_BINS = 2
  GST_PARSE_FLAG_PLACE_IN_BIN = 4
END ENUM
TYPE AS _GstPipeline GstPipeline
TYPE AS _GstPipelineClass GstPipelineClass
TYPE AS LONG GstPipelineFlags
ENUM
  GST_PIPELINE_FLAG_FIXED_CLOCK = 524288
  GST_PIPELINE_FLAG_LAST = 8388608
END ENUM
TYPE AS _GstPipelinePrivate GstPipelinePrivate
TYPE AS _GstPlugin GstPlugin
TYPE AS _GstPluginClass GstPluginClass
TYPE AS LONG GstPluginDependencyFlags
ENUM
  GST_PLUGIN_DEPENDENCY_FLAG_NONE = 0
  GST_PLUGIN_DEPENDENCY_FLAG_RECURSE = 1
  GST_PLUGIN_DEPENDENCY_FLAG_PATHS_ARE_DEFAULT_ONLY = 2
  GST_PLUGIN_DEPENDENCY_FLAG_FILE_NAME_IS_SUFFIX = 4
  GST_PLUGIN_DEPENDENCY_FLAG_FILE_NAME_IS_PREFIX = 8
  GST_PLUGIN_DEPENDENCY_FLAG_PATHS_ARE_RELATIVE_TO_EXE = 16
END ENUM
TYPE AS _GstPluginDesc GstPluginDesc
TYPE AS LONG GstPluginError
ENUM
  GST_PLUGIN_ERROR_MODULE = 0
  GST_PLUGIN_ERROR_DEPENDENCIES = 1
  GST_PLUGIN_ERROR_NAME_MISMATCH = 2
END ENUM
TYPE AS _GstPluginFeature GstPluginFeature
TYPE AS _GstPluginFeatureClass GstPluginFeatureClass
TYPE AS LONG GstPluginFlags
ENUM
  GST_PLUGIN_FLAG_CACHED = 16
  GST_PLUGIN_FLAG_BLACKLISTED = 32
END ENUM
TYPE AS _GstPoll GstPoll
TYPE AS _GstPollFD GstPollFD
TYPE AS _GstPreset GstPreset
TYPE AS _GstPresetInterface GstPresetInterface
TYPE AS LONG GstProgressType
ENUM
  GST_PROGRESS_TYPE_START = 0
  GST_PROGRESS_TYPE_CONTINUE = 1
  GST_PROGRESS_TYPE_COMPLETE = 2
  GST_PROGRESS_TYPE_CANCELED = 3
  GST_PROGRESS_TYPE_ERROR = 4
END ENUM
TYPE AS _GstPromise GstPromise
TYPE AS LONG GstPromiseResult
ENUM
  GST_PROMISE_RESULT_PENDING = 0
  GST_PROMISE_RESULT_INTERRUPTED = 1
  GST_PROMISE_RESULT_REPLIED = 2
  GST_PROMISE_RESULT_EXPIRED = 3
END ENUM
TYPE AS _GstProtectionMeta GstProtectionMeta
TYPE AS _GstProxyPad GstProxyPad
TYPE AS _GstProxyPadClass GstProxyPadClass
TYPE AS _GstProxyPadPrivate GstProxyPadPrivate
TYPE AS LONG GstQOSType
ENUM
  GST_QOS_TYPE_OVERFLOW = 0
  GST_QOS_TYPE_UNDERFLOW = 1
  GST_QOS_TYPE_THROTTLE = 2
END ENUM
#DEFINE GST_QUERY_NUM_SHIFT 8
#DEFINE GST_QUERY_TYPE_BOTH 3
TYPE AS _GstQuery GstQuery
TYPE AS LONG GstQueryType
ENUM
  GST_QUERY_UNKNOWN = 0
  GST_QUERY_POSITION = 2563
  GST_QUERY_DURATION = 5123
  GST_QUERY_LATENCY = 7683
  GST_QUERY_JITTER = 10243
  GST_QUERY_RATE = 12803
  GST_QUERY_SEEKING = 15363
  GST_QUERY_SEGMENT = 17923
  GST_QUERY_CONVERT = 20483
  GST_QUERY_FORMATS = 23043
  GST_QUERY_BUFFERING = 28163
  GST_QUERY_CUSTOM = 30723
  GST_QUERY_URI = 33283
  GST_QUERY_ALLOCATION = 35846
  GST_QUERY_SCHEDULING = 38401
  GST_QUERY_ACCEPT_CAPS = 40963
  GST_QUERY_CAPS = 43523
  GST_QUERY_DRAIN = 46086
  GST_QUERY_CONTEXT = 48643
  GST_QUERY_BITRATE = 51202
END ENUM
TYPE AS LONG GstQueryTypeFlags
ENUM
  GST_QUERY_TYPE_UPSTREAM = 1
  GST_QUERY_TYPE_DOWNSTREAM = 2
  GST_QUERY_TYPE_SERIALIZED = 4
END ENUM
TYPE AS LONG GstRank
ENUM
  GST_RANK_NONE = 0
  GST_RANK_MARGINAL = 64
  GST_RANK_SECONDARY = 128
  GST_RANK_PRIMARY = 256
END ENUM
TYPE AS _GstReferenceTimestampMeta GstReferenceTimestampMeta
TYPE AS _GstRegistry GstRegistry
TYPE AS _GstRegistryClass GstRegistryClass
TYPE AS _GstRegistryPrivate GstRegistryPrivate
TYPE AS LONG GstResourceError
ENUM
  GST_RESOURCE_ERROR_FAILED = 1
  GST_RESOURCE_ERROR_TOO_LAZY = 2
  GST_RESOURCE_ERROR_NOT_FOUND = 3
  GST_RESOURCE_ERROR_BUSY = 4
  GST_RESOURCE_ERROR_OPEN_READ = 5
  GST_RESOURCE_ERROR_OPEN_WRITE = 6
  GST_RESOURCE_ERROR_OPEN_READ_WRITE = 7
  GST_RESOURCE_ERROR_CLOSE = 8
  GST_RESOURCE_ERROR_READ = 9
  GST_RESOURCE_ERROR_WRITE = 10
  GST_RESOURCE_ERROR_SEEK = 11
  GST_RESOURCE_ERROR_SYNC = 12
  GST_RESOURCE_ERROR_SETTINGS = 13
  GST_RESOURCE_ERROR_NO_SPACE_LEFT = 14
  GST_RESOURCE_ERROR_NOT_AUTHORIZED = 15
  GST_RESOURCE_ERROR_NUM_ERRORS = 16
END ENUM
#DEFINE GST_SECOND 1000000000
#DEFINE GST_SEGMENT_FORMAT @!"paB"
#DEFINE GST_SEQNUM_INVALID 0
#DEFINE GST_STIME_FORMAT @!"c%"
TYPE AS _GstSample GstSample
TYPE AS LONG GstSchedulingFlags
ENUM
  GST_SCHEDULING_FLAG_SEEKABLE = 1
  GST_SCHEDULING_FLAG_SEQUENTIAL = 2
  GST_SCHEDULING_FLAG_BANDWIDTH_LIMITED = 4
END ENUM
TYPE AS LONG GstSearchMode
ENUM
  GST_SEARCH_MODE_EXACT = 0
  GST_SEARCH_MODE_BEFORE = 1
  GST_SEARCH_MODE_AFTER = 2
END ENUM
TYPE AS LONG GstSeekFlags
ENUM
  GST_SEEK_FLAG_NONE = 0
  GST_SEEK_FLAG_FLUSH = 1
  GST_SEEK_FLAG_ACCURATE = 2
  GST_SEEK_FLAG_KEY_UNIT = 4
  GST_SEEK_FLAG_SEGMENT = 8
  GST_SEEK_FLAG_TRICKMODE = 16
  GST_SEEK_FLAG_SKIP = 16
  GST_SEEK_FLAG_SNAP_BEFORE = 32
  GST_SEEK_FLAG_SNAP_AFTER = 64
  GST_SEEK_FLAG_SNAP_NEAREST = 96
  GST_SEEK_FLAG_TRICKMODE_KEY_UNITS = 128
  GST_SEEK_FLAG_TRICKMODE_NO_AUDIO = 256
END ENUM
TYPE AS LONG GstSeekType
ENUM
  GST_SEEK_TYPE_NONE = 0
  GST_SEEK_TYPE_SET = 1
  GST_SEEK_TYPE_END = 2
END ENUM
TYPE AS _GstSegment GstSegment
TYPE AS LONG GstSegmentFlags
ENUM
  GST_SEGMENT_FLAG_NONE = 0
  GST_SEGMENT_FLAG_RESET = 1
  GST_SEGMENT_FLAG_TRICKMODE = 16
  GST_SEGMENT_FLAG_SKIP = 16
  GST_SEGMENT_FLAG_SEGMENT = 8
  GST_SEGMENT_FLAG_TRICKMODE_KEY_UNITS = 128
  GST_SEGMENT_FLAG_TRICKMODE_NO_AUDIO = 256
END ENUM
TYPE AS LONG GstStackTraceFlags
ENUM
  GST_STACK_TRACE_SHOW_FULL = 1
END ENUM
TYPE AS LONG GstState
ENUM
  GST_STATE_VOID_PENDING = 0
  GST_STATE_NULL = 1
  GST_STATE_READY = 2
  GST_STATE_PAUSED = 3
  GST_STATE_PLAYING = 4
END ENUM
TYPE AS LONG GstStateChange
ENUM
  GST_STATE_CHANGE_NULL_TO_READY = 10
  GST_STATE_CHANGE_READY_TO_PAUSED = 19
  GST_STATE_CHANGE_PAUSED_TO_PLAYING = 28
  GST_STATE_CHANGE_PLAYING_TO_PAUSED = 35
  GST_STATE_CHANGE_PAUSED_TO_READY = 26
  GST_STATE_CHANGE_READY_TO_NULL = 17
  GST_STATE_CHANGE_NULL_TO_NULL = 9
  GST_STATE_CHANGE_READY_TO_READY = 18
  GST_STATE_CHANGE_PAUSED_TO_PAUSED = 27
  GST_STATE_CHANGE_PLAYING_TO_PLAYING = 36
END ENUM
TYPE AS LONG GstStateChangeReturn
ENUM
  GST_STATE_CHANGE_FAILURE = 0
  GST_STATE_CHANGE_SUCCESS = 1
  GST_STATE_CHANGE_ASYNC = 2
  GST_STATE_CHANGE_NO_PREROLL = 3
END ENUM
TYPE AS _GstStaticCaps GstStaticCaps
TYPE AS _GstStaticPadTemplate GstStaticPadTemplate
TYPE AS _GstStream GstStream
TYPE AS _GstStreamClass GstStreamClass
TYPE AS _GstStreamCollection GstStreamCollection
TYPE AS _GstStreamCollectionClass GstStreamCollectionClass
TYPE AS _GstStreamCollectionPrivate GstStreamCollectionPrivate
TYPE AS LONG GstStreamError
ENUM
  GST_STREAM_ERROR_FAILED = 1
  GST_STREAM_ERROR_TOO_LAZY = 2
  GST_STREAM_ERROR_NOT_IMPLEMENTED = 3
  GST_STREAM_ERROR_TYPE_NOT_FOUND = 4
  GST_STREAM_ERROR_WRONG_TYPE = 5
  GST_STREAM_ERROR_CODEC_NOT_FOUND = 6
  GST_STREAM_ERROR_DECODE = 7
  GST_STREAM_ERROR_ENCODE = 8
  GST_STREAM_ERROR_DEMUX = 9
  GST_STREAM_ERROR_MUX = 10
  GST_STREAM_ERROR_FORMAT = 11
  GST_STREAM_ERROR_DECRYPT = 12
  GST_STREAM_ERROR_DECRYPT_NOKEY = 13
  GST_STREAM_ERROR_NUM_ERRORS = 14
END ENUM
TYPE AS LONG GstStreamFlags
ENUM
  GST_STREAM_FLAG_NONE = 0
  GST_STREAM_FLAG_SPARSE = 1
  GST_STREAM_FLAG_SELECT = 2
  GST_STREAM_FLAG_UNSELECT = 4
END ENUM
TYPE AS _GstStreamPrivate GstStreamPrivate
TYPE AS LONG GstStreamStatusType
ENUM
  GST_STREAM_STATUS_TYPE_CREATE = 0
  GST_STREAM_STATUS_TYPE_ENTER = 1
  GST_STREAM_STATUS_TYPE_LEAVE = 2
  GST_STREAM_STATUS_TYPE_DESTROY = 3
  GST_STREAM_STATUS_TYPE_START = 8
  GST_STREAM_STATUS_TYPE_PAUSE = 9
  GST_STREAM_STATUS_TYPE_STOP = 10
END ENUM
TYPE AS LONG GstStreamType
ENUM
  GST_STREAM_TYPE_UNKNOWN = 1
  GST_STREAM_TYPE_AUDIO = 2
  GST_STREAM_TYPE_VIDEO = 4
  GST_STREAM_TYPE_CONTAINER = 8
  GST_STREAM_TYPE_TEXT = 16
END ENUM
TYPE AS _GstStructure GstStructure
TYPE AS LONG GstStructureChangeType
ENUM
  GST_STRUCTURE_CHANGE_TYPE_PAD_LINK = 0
  GST_STRUCTURE_CHANGE_TYPE_PAD_UNLINK = 1
END ENUM
TYPE AS _GstSystemClock GstSystemClock
TYPE AS _GstSystemClockClass GstSystemClockClass
TYPE AS _GstSystemClockPrivate GstSystemClockPrivate
#DEFINE GST_TAG_ALBUM @!"album"
#DEFINE GST_TAG_ALBUM_ARTIST @!"album-artist"
#DEFINE GST_TAG_ALBUM_ARTIST_SORTNAME @!"album-artist-sortname"
#DEFINE GST_TAG_ALBUM_GAIN @!"replaygain-album-gain"
#DEFINE GST_TAG_ALBUM_PEAK @!"replaygain-album-peak"
#DEFINE GST_TAG_ALBUM_SORTNAME @!"album-sortname"
#DEFINE GST_TAG_ALBUM_VOLUME_COUNT @!"album-disc-count"
#DEFINE GST_TAG_ALBUM_VOLUME_NUMBER @!"album-disc-number"
#DEFINE GST_TAG_APPLICATION_DATA @!"application-data"
#DEFINE GST_TAG_APPLICATION_NAME @!"application-name"
#DEFINE GST_TAG_ARTIST @!"artist"
#DEFINE GST_TAG_ARTIST_SORTNAME @!"artist-sortname"
#DEFINE GST_TAG_ATTACHMENT @!"attachment"
#DEFINE GST_TAG_AUDIO_CODEC @!"audio-codec"
#DEFINE GST_TAG_BEATS_PER_MINUTE @!"beats-per-minute"
#DEFINE GST_TAG_BITRATE @!"bitrate"
#DEFINE GST_TAG_CODEC @!"codec"
#DEFINE GST_TAG_COMMENT @!"comment"
#DEFINE GST_TAG_COMPOSER @!"composer"
#DEFINE GST_TAG_COMPOSER_SORTNAME @!"composer-sortname"
#DEFINE GST_TAG_CONDUCTOR @!"conductor"
#DEFINE GST_TAG_CONTACT @!"contact"
#DEFINE GST_TAG_CONTAINER_FORMAT @!"container-format"
#DEFINE GST_TAG_COPYRIGHT @!"copyright"
#DEFINE GST_TAG_COPYRIGHT_URI @!"copyright-uri"
#DEFINE GST_TAG_DATE @!"date"
#DEFINE GST_TAG_DATE_TIME @!"datetime"
#DEFINE GST_TAG_DESCRIPTION @!"description"
#DEFINE GST_TAG_DEVICE_MANUFACTURER @!"device-manufacturer"
#DEFINE GST_TAG_DEVICE_MODEL @!"device-model"
#DEFINE GST_TAG_DURATION @!"duration"
#DEFINE GST_TAG_ENCODED_BY @!"encoded-by"
#DEFINE GST_TAG_ENCODER @!"encoder"
#DEFINE GST_TAG_ENCODER_VERSION @!"encoder-version"
#DEFINE GST_TAG_EXTENDED_COMMENT @!"extended-comment"
#DEFINE GST_TAG_GENRE @!"genre"
#DEFINE GST_TAG_GEO_LOCATION_CAPTURE_DIRECTION @!"geo-location-capture-direction"
#DEFINE GST_TAG_GEO_LOCATION_CITY @!"geo-location-city"
#DEFINE GST_TAG_GEO_LOCATION_COUNTRY @!"geo-location-country"
#DEFINE GST_TAG_GEO_LOCATION_ELEVATION @!"geo-location-elevation"
#DEFINE GST_TAG_GEO_LOCATION_HORIZONTAL_ERROR @!"geo-location-horizontal-error"
#DEFINE GST_TAG_GEO_LOCATION_LATITUDE @!"geo-location-latitude"
#DEFINE GST_TAG_GEO_LOCATION_LONGITUDE @!"geo-location-longitude"
#DEFINE GST_TAG_GEO_LOCATION_MOVEMENT_DIRECTION @!"geo-location-movement-direction"
#DEFINE GST_TAG_GEO_LOCATION_MOVEMENT_SPEED @!"geo-location-movement-speed"
#DEFINE GST_TAG_GEO_LOCATION_NAME @!"geo-location-name"
#DEFINE GST_TAG_GEO_LOCATION_SUBLOCATION @!"geo-location-sublocation"
#DEFINE GST_TAG_GROUPING @!"grouping"
#DEFINE GST_TAG_HOMEPAGE @!"homepage"
#DEFINE GST_TAG_IMAGE @!"image"
#DEFINE GST_TAG_IMAGE_ORIENTATION @!"image-orientation"
#DEFINE GST_TAG_INTERPRETED_BY @!"interpreted-by"
#DEFINE GST_TAG_ISRC @!"isrc"
#DEFINE GST_TAG_KEYWORDS @!"keywords"
#DEFINE GST_TAG_LANGUAGE_CODE @!"language-code"
#DEFINE GST_TAG_LANGUAGE_NAME @!"language-name"
#DEFINE GST_TAG_LICENSE @!"license"
#DEFINE GST_TAG_LICENSE_URI @!"license-uri"
#DEFINE GST_TAG_LOCATION @!"location"
#DEFINE GST_TAG_LYRICS @!"lyrics"
#DEFINE GST_TAG_MAXIMUM_BITRATE @!"maximum-bitrate"
#DEFINE GST_TAG_MIDI_BASE_NOTE @!"midi-base-note"
#DEFINE GST_TAG_MINIMUM_BITRATE @!"minimum-bitrate"
#DEFINE GST_TAG_NOMINAL_BITRATE @!"nominal-bitrate"
#DEFINE GST_TAG_ORGANIZATION @!"organization"
#DEFINE GST_TAG_PERFORMER @!"performer"
#DEFINE GST_TAG_PREVIEW_IMAGE @!"preview-image"
#DEFINE GST_TAG_PRIVATE_DATA @!"private-data"
#DEFINE GST_TAG_PUBLISHER @!"publisher"
#DEFINE GST_TAG_REFERENCE_LEVEL @!"replaygain-reference-level"
#DEFINE GST_TAG_SERIAL @!"serial"
#DEFINE GST_TAG_SHOW_EPISODE_NUMBER @!"show-episode-number"
#DEFINE GST_TAG_SHOW_NAME @!"show-name"
#DEFINE GST_TAG_SHOW_SEASON_NUMBER @!"show-season-number"
#DEFINE GST_TAG_SHOW_SORTNAME @!"show-sortname"
#DEFINE GST_TAG_SUBTITLE_CODEC @!"subtitle-codec"
#DEFINE GST_TAG_TITLE @!"title"
#DEFINE GST_TAG_TITLE_SORTNAME @!"title-sortname"
#DEFINE GST_TAG_TRACK_COUNT @!"track-count"
#DEFINE GST_TAG_TRACK_GAIN @!"replaygain-track-gain"
#DEFINE GST_TAG_TRACK_NUMBER @!"track-number"
#DEFINE GST_TAG_TRACK_PEAK @!"replaygain-track-peak"
#DEFINE GST_TAG_USER_RATING @!"user-rating"
#DEFINE GST_TAG_VERSION @!"version"
#DEFINE GST_TAG_VIDEO_CODEC @!"video-codec"
#DEFINE GST_TIME_FORMAT @!"u:%02u:%02u.%09u"
#DEFINE GST_TOC_REPEAT_COUNT_INFINITE -1
TYPE AS LONG GstTagFlag
ENUM
  GST_TAG_FLAG_UNDEFINED = 0
  GST_TAG_FLAG_META = 1
  GST_TAG_FLAG_ENCODED = 2
  GST_TAG_FLAG_DECODED = 3
  GST_TAG_FLAG_COUNT = 4
END ENUM
TYPE AS _GstTagList GstTagList
TYPE AS LONG GstTagMergeMode
ENUM
  GST_TAG_MERGE_UNDEFINED = 0
  GST_TAG_MERGE_REPLACE_ALL = 1
  GST_TAG_MERGE_REPLACE = 2
  GST_TAG_MERGE_APPEND = 3
  GST_TAG_MERGE_PREPEND = 4
  GST_TAG_MERGE_KEEP = 5
  GST_TAG_MERGE_KEEP_ALL = 6
  GST_TAG_MERGE_COUNT = 7
END ENUM
TYPE AS LONG GstTagScope
ENUM
  GST_TAG_SCOPE_STREAM = 0
  GST_TAG_SCOPE_GLOBAL = 1
END ENUM
TYPE AS _GstTagSetter GstTagSetter
TYPE AS _GstTagSetterInterface GstTagSetterInterface
TYPE AS _GstTask GstTask
TYPE AS _GstTaskClass GstTaskClass
TYPE AS _GstTaskPool GstTaskPool
TYPE AS _GstTaskPoolClass GstTaskPoolClass
TYPE AS _GstTaskPrivate GstTaskPrivate
TYPE AS LONG GstTaskState
ENUM
  GST_TASK_STARTED = 0
  GST_TASK_STOPPED = 1
  GST_TASK_PAUSED = 2
END ENUM
TYPE AS _GstTimedValue GstTimedValue
TYPE AS _GstToc GstToc
TYPE AS _GstTocEntry GstTocEntry
TYPE AS LONG GstTocEntryType
ENUM
  GST_TOC_ENTRY_TYPE_ANGLE = -3
  GST_TOC_ENTRY_TYPE_VERSION = -2
  GST_TOC_ENTRY_TYPE_EDITION = -1
  GST_TOC_ENTRY_TYPE_INVALID = 0
  GST_TOC_ENTRY_TYPE_TITLE = 1
  GST_TOC_ENTRY_TYPE_TRACK = 2
  GST_TOC_ENTRY_TYPE_CHAPTER = 3
END ENUM
TYPE AS LONG GstTocLoopType
ENUM
  GST_TOC_LOOP_NONE = 0
  GST_TOC_LOOP_FORWARD = 1
  GST_TOC_LOOP_REVERSE = 2
  GST_TOC_LOOP_PING_PONG = 3
END ENUM
TYPE AS LONG GstTocScope
ENUM
  GST_TOC_SCOPE_GLOBAL = 1
  GST_TOC_SCOPE_CURRENT = 2
END ENUM
TYPE AS _GstTocSetter GstTocSetter
TYPE AS _GstTocSetterInterface GstTocSetterInterface
TYPE AS _GstTracer GstTracer
TYPE AS _GstTracerClass GstTracerClass
TYPE AS _GstTracerFactory GstTracerFactory
TYPE AS _GstTracerFactoryClass GstTracerFactoryClass
TYPE AS _GstTracerPrivate GstTracerPrivate
TYPE AS _GstTracerRecord GstTracerRecord
TYPE AS _GstTracerRecordClass GstTracerRecordClass
TYPE AS LONG GstTracerValueFlags
ENUM
  GST_TRACER_VALUE_FLAGS_NONE = 0
  GST_TRACER_VALUE_FLAGS_OPTIONAL = 1
  GST_TRACER_VALUE_FLAGS_AGGREGATED = 2
END ENUM
TYPE AS LONG GstTracerValueScope
ENUM
  GST_TRACER_VALUE_SCOPE_PROCESS = 0
  GST_TRACER_VALUE_SCOPE_THREAD = 1
  GST_TRACER_VALUE_SCOPE_ELEMENT = 2
  GST_TRACER_VALUE_SCOPE_PAD = 3
END ENUM
TYPE AS _GstTypeFind GstTypeFind
TYPE AS _GstTypeFindFactory GstTypeFindFactory
TYPE AS _GstTypeFindFactoryClass GstTypeFindFactoryClass
TYPE AS LONG GstTypeFindProbability
ENUM
  GST_TYPE_FIND_NONE = 0
  GST_TYPE_FIND_MINIMUM = 1
  GST_TYPE_FIND_POSSIBLE = 50
  GST_TYPE_FIND_LIKELY = 80
  GST_TYPE_FIND_NEARLY_CERTAIN = 99
  GST_TYPE_FIND_MAXIMUM = 100
END ENUM
TYPE AS LONG GstURIError
ENUM
  GST_URI_ERROR_UNSUPPORTED_PROTOCOL = 0
  GST_URI_ERROR_BAD_URI = 1
  GST_URI_ERROR_BAD_STATE = 2
  GST_URI_ERROR_BAD_REFERENCE = 3
END ENUM
TYPE AS _GstURIHandler GstURIHandler
TYPE AS _GstURIHandlerInterface GstURIHandlerInterface
TYPE AS LONG GstURIType
ENUM
  GST_URI_UNKNOWN = 0
  GST_URI_SINK = 1
  GST_URI_SRC = 2
END ENUM
#DEFINE GST_URI_NO_PORT 0
#DEFINE GST_USECOND 1000
TYPE AS _GstUri GstUri
#DEFINE GST_VALUE_EQUAL 0
#DEFINE GST_VALUE_GREATER_THAN 1
#DEFINE GST_VALUE_LESS_THAN -1
#DEFINE GST_VALUE_UNORDERED 2
#DEFINE GST_VERSION_MAJOR 1
#DEFINE GST_VERSION_MICRO 2
#DEFINE GST_VERSION_MINOR 16
#DEFINE GST_VERSION_NANO 0
TYPE AS _GstValueArray GstValueArray
TYPE AS _GstValueList GstValueList
TYPE AS _GstValueTable GstValueTable
EXTERN "C" LIB "gstreamer-1.0"
' P_X

' P_3

TYPE _GstAllocationParams
  AS GstMemoryFlags flags
  AS gsize align
  AS gsize prefix
  AS gsize padding
  AS gpointer _gst_reserved(3)
END TYPE
DECLARE FUNCTION gst_allocation_params_copy(BYVAL AS const GstAllocationParams PTR) AS GstAllocationParams PTR
DECLARE SUB gst_allocation_params_free(BYVAL AS GstAllocationParams PTR)
DECLARE SUB gst_allocation_params_init(BYVAL AS GstAllocationParams PTR)
TYPE _GstAllocator
  AS GstObject object
  AS const gchar PTR mem_type
  AS GstMemoryMapFunction mem_map
  AS GstMemoryUnmapFunction mem_unmap
  AS GstMemoryCopyFunction mem_copy
  AS GstMemoryShareFunction mem_share
  AS GstMemoryIsSpanFunction mem_is_span
  AS GstMemoryMapFullFunction mem_map_full
  AS GstMemoryUnmapFullFunction mem_unmap_full
  AS gpointer _gst_reserved(1)
  AS GstAllocatorPrivate PTR priv
END TYPE
DECLARE FUNCTION gst_allocator_get_type() AS GType
#DEFINE GST_TYPE_ALLOCATOR (gst_allocator_get_type())
#DEFINE GST_ALLOCATOR(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GST_TYPE_ALLOCATOR, GstAllocator))
#DEFINE GST_ALLOCATOR_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GST_TYPE_ALLOCATOR, GstAllocatorClass))
#DEFINE GST_IS_ALLOCATOR(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GST_TYPE_ALLOCATOR))
#DEFINE GST_IS_CLASS_ALLOCATOR(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GST_TYPE_ALLOCATOR))
#DEFINE GST_ALLOCATOR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GST_TYPE_ALLOCATOR, GstAllocatorClass))
DECLARE FUNCTION gst_allocator_find(BYVAL AS const gchar PTR) AS GstAllocator PTR
DECLARE SUB gst_allocator_register(BYVAL AS const gchar PTR, BYVAL AS GstAllocator PTR)
DECLARE FUNCTION gst_allocator_alloc(BYVAL AS GstAllocator PTR, BYVAL AS gsize, BYVAL AS GstAllocationParams PTR) AS GstMemory PTR
DECLARE SUB gst_allocator_free(BYVAL AS GstAllocator PTR, BYVAL AS GstMemory PTR)
DECLARE SUB gst_allocator_set_default(BYVAL AS GstAllocator PTR)
TYPE _GstAllocatorClass
  AS GstObjectClass object_class
  alloc AS FUNCTION CDECL(BYVAL AS GstAllocator PTR, BYVAL AS gsize, BYVAL AS GstAllocationParams PTR) AS GstMemory PTR
  free AS SUB CDECL(BYVAL AS GstAllocator PTR, BYVAL AS GstMemory PTR)
  AS gpointer _gst_reserved(3)
END TYPE
DECLARE FUNCTION gst_atomic_queue_new(BYVAL AS guint) AS GstAtomicQueue PTR
DECLARE FUNCTION gst_atomic_queue_length(BYVAL AS GstAtomicQueue PTR) AS guint
DECLARE FUNCTION gst_atomic_queue_peek(BYVAL AS GstAtomicQueue PTR) AS gpointer
DECLARE FUNCTION gst_atomic_queue_pop(BYVAL AS GstAtomicQueue PTR) AS gpointer
DECLARE SUB gst_atomic_queue_push(BYVAL AS GstAtomicQueue PTR, BYVAL AS gpointer)
DECLARE SUB gst_atomic_queue_ref(BYVAL AS GstAtomicQueue PTR)
DECLARE SUB gst_atomic_queue_unref(BYVAL AS GstAtomicQueue PTR)
TYPE _GstBin
  AS GstElement element
  AS gint numchildren
  AS GList PTR children
  AS guint32 children_cookie
  AS GstBus PTR child_bus
  AS GList PTR messages
  AS gboolean polling
  AS gboolean state_dirty
  AS gboolean clock_dirty
  AS GstClock PTR provided_clock
  AS GstElement PTR clock_provider
  AS GstBinPrivate PTR priv
  AS gpointer _gst_reserved(3)
END TYPE
DECLARE FUNCTION gst_bin_get_type() AS GType
#DEFINE GST_TYPE_BIN (gst_bin_get_type())
#DEFINE GST_BIN(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GST_TYPE_BIN, GstBin))
#DEFINE GST_BIN_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GST_TYPE_BIN, GstBinClass))
#DEFINE GST_IS_BIN(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GST_TYPE_BIN))
#DEFINE GST_IS_CLASS_BIN(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GST_TYPE_BIN))
#DEFINE GST_BIN_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GST_TYPE_BIN, GstBinClass))
DECLARE FUNCTION gst_bin_new(BYVAL AS const gchar PTR) AS GstElement PTR
DECLARE FUNCTION gst_bin_add(BYVAL AS GstBin PTR, BYVAL AS GstElement PTR) AS gboolean
DECLARE SUB gst_bin_add_many(BYVAL AS GstBin PTR, BYVAL AS GstElement PTR, ...)
DECLARE FUNCTION gst_bin_find_unlinked_pad(BYVAL AS GstBin PTR, BYVAL AS GstPadDirection) AS GstPad PTR
DECLARE FUNCTION gst_bin_get_by_interface(BYVAL AS GstBin PTR, BYVAL AS GType) AS GstElement PTR
DECLARE FUNCTION gst_bin_get_by_name(BYVAL AS GstBin PTR, BYVAL AS const gchar PTR) AS GstElement PTR
DECLARE FUNCTION gst_bin_get_by_name_recurse_up(BYVAL AS GstBin PTR, BYVAL AS const gchar PTR) AS GstElement PTR
DECLARE FUNCTION gst_bin_get_suppressed_flags(BYVAL AS GstBin PTR) AS GstElementFlags
DECLARE FUNCTION gst_bin_iterate_all_by_interface(BYVAL AS GstBin PTR, BYVAL AS GType) AS GstIterator PTR
DECLARE FUNCTION gst_bin_iterate_elements(BYVAL AS GstBin PTR) AS GstIterator PTR
DECLARE FUNCTION gst_bin_iterate_recurse(BYVAL AS GstBin PTR) AS GstIterator PTR
DECLARE FUNCTION gst_bin_iterate_sinks(BYVAL AS GstBin PTR) AS GstIterator PTR
DECLARE FUNCTION gst_bin_iterate_sorted(BYVAL AS GstBin PTR) AS GstIterator PTR
DECLARE FUNCTION gst_bin_iterate_sources(BYVAL AS GstBin PTR) AS GstIterator PTR
DECLARE FUNCTION gst_bin_recalculate_latency(BYVAL AS GstBin PTR) AS gboolean
DECLARE FUNCTION gst_bin_remove(BYVAL AS GstBin PTR, BYVAL AS GstElement PTR) AS gboolean
DECLARE SUB gst_bin_remove_many(BYVAL AS GstBin PTR, BYVAL AS GstElement PTR, ...)
DECLARE SUB gst_bin_set_suppressed_flags(BYVAL AS GstBin PTR, BYVAL AS GstElementFlags)
DECLARE FUNCTION gst_bin_sync_children_states(BYVAL AS GstBin PTR) AS gboolean
TYPE _GstBinClass
  AS GstElementClass parent_class
  AS GThreadPool PTR pool
  element_added AS SUB CDECL(BYVAL AS GstBin PTR, BYVAL AS GstElement PTR)
  element_removed AS SUB CDECL(BYVAL AS GstBin PTR, BYVAL AS GstElement PTR)
  add_element AS FUNCTION CDECL(BYVAL AS GstBin PTR, BYVAL AS GstElement PTR) AS gboolean
  remove_element AS FUNCTION CDECL(BYVAL AS GstBin PTR, BYVAL AS GstElement PTR) AS gboolean
  handle_message AS SUB CDECL(BYVAL AS GstBin PTR, BYVAL AS GstMessage PTR)
  do_latency AS FUNCTION CDECL(BYVAL AS GstBin PTR) AS gboolean
  deep_element_added AS SUB CDECL(BYVAL AS GstBin PTR, BYVAL AS GstBin PTR, BYVAL AS GstElement PTR)
  deep_element_removed AS SUB CDECL(BYVAL AS GstBin PTR, BYVAL AS GstBin PTR, BYVAL AS GstElement PTR)
  AS gpointer _gst_reserved(1)
END TYPE
DECLARE FUNCTION gst_bitmask_get_type() AS GType
#DEFINE GST_TYPE_BITMASK (gst_bitmask_get_type())
#DEFINE GST_BITMASK(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GST_TYPE_BITMASK, GstBitmask))
#DEFINE GST_BITMASK_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GST_TYPE_BITMASK, Gst))
#DEFINE GST_IS_BITMASK(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GST_TYPE_BITMASK))
#DEFINE GST_IS_CLASS_BITMASK(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GST_TYPE_BITMASK))
#DEFINE GST_BITMASK_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GST_TYPE_BITMASK, Gst))
TYPE _GstBuffer
  AS GstMiniObject mini_object
  AS GstBufferPool PTR pool
  AS GstClockTime pts
  AS GstClockTime dts
  AS GstClockTime duration
  AS guint64 offset
  AS guint64 offset_end
END TYPE
DECLARE FUNCTION gst_buffer_new() AS GstBuffer PTR
DECLARE FUNCTION gst_buffer_new_allocate(BYVAL AS GstAllocator PTR, BYVAL AS gsize, BYVAL AS GstAllocationParams PTR) AS GstBuffer PTR
DECLARE FUNCTION gst_buffer_new_wrapped(BYVAL AS gpointer, BYVAL AS gsize) AS GstBuffer PTR
DECLARE FUNCTION gst_buffer_new_wrapped_bytes(BYVAL AS GBytes PTR) AS GstBuffer PTR
DECLARE FUNCTION gst_buffer_new_wrapped_full(BYVAL AS GstMemoryFlags, BYVAL AS gpointer, BYVAL AS gsize, BYVAL AS gsize, BYVAL AS gsize, BYVAL AS gpointer, BYVAL AS GDestroyNotify) AS GstBuffer PTR
DECLARE FUNCTION gst_buffer_add_meta(BYVAL AS GstBuffer PTR, BYVAL AS const GstMetaInfo PTR, BYVAL AS gpointer) AS GstMeta PTR
DECLARE FUNCTION gst_buffer_add_parent_buffer_meta(BYVAL AS GstBuffer PTR, BYVAL AS GstBuffer PTR) AS GstParentBufferMeta PTR
DECLARE FUNCTION gst_buffer_add_protection_meta(BYVAL AS GstBuffer PTR, BYVAL AS GstStructure PTR) AS GstProtectionMeta PTR
DECLARE FUNCTION gst_buffer_add_reference_timestamp_meta(BYVAL AS GstBuffer PTR, BYVAL AS GstCaps PTR, BYVAL AS GstClockTime, BYVAL AS GstClockTime) AS GstReferenceTimestampMeta PTR
DECLARE FUNCTION gst_buffer_append(BYVAL AS GstBuffer PTR, BYVAL AS GstBuffer PTR) AS GstBuffer PTR
DECLARE SUB gst_buffer_append_memory(BYVAL AS GstBuffer PTR, BYVAL AS GstMemory PTR)
DECLARE FUNCTION gst_buffer_append_region(BYVAL AS GstBuffer PTR, BYVAL AS GstBuffer PTR, BYVAL AS gssize, BYVAL AS gssize) AS GstBuffer PTR
DECLARE FUNCTION gst_buffer_copy_deep(BYVAL AS const GstBuffer PTR) AS GstBuffer PTR
DECLARE FUNCTION gst_buffer_copy_into(BYVAL AS GstBuffer PTR, BYVAL AS GstBuffer PTR, BYVAL AS GstBufferCopyFlags, BYVAL AS gsize, BYVAL AS gsize) AS gboolean
DECLARE FUNCTION gst_buffer_copy_region(BYVAL AS GstBuffer PTR, BYVAL AS GstBufferCopyFlags, BYVAL AS gsize, BYVAL AS gsize) AS GstBuffer PTR
DECLARE FUNCTION gst_buffer_extract(BYVAL AS GstBuffer PTR, BYVAL AS gsize, BYVAL AS gpointer, BYVAL AS gsize) AS gsize
DECLARE SUB gst_buffer_extract_dup(BYVAL AS GstBuffer PTR, BYVAL AS gsize, BYVAL AS gsize, BYVAL AS gpointer PTR, BYVAL AS gsize PTR)
DECLARE FUNCTION gst_buffer_fill(BYVAL AS GstBuffer PTR, BYVAL AS gsize, BYVAL AS gconstpointer, BYVAL AS gsize) AS gsize
DECLARE FUNCTION gst_buffer_find_memory(BYVAL AS GstBuffer PTR, BYVAL AS gsize, BYVAL AS gsize, BYVAL AS guint PTR, BYVAL AS guint PTR, BYVAL AS gsize PTR) AS gboolean
DECLARE FUNCTION gst_buffer_foreach_meta(BYVAL AS GstBuffer PTR, BYVAL AS GstBufferForeachMetaFunc, BYVAL AS gpointer) AS gboolean
DECLARE FUNCTION gst_buffer_get_all_memory(BYVAL AS GstBuffer PTR) AS GstMemory PTR
DECLARE FUNCTION gst_buffer_get_flags(BYVAL AS GstBuffer PTR) AS GstBufferFlags
DECLARE FUNCTION gst_buffer_get_memory(BYVAL AS GstBuffer PTR, BYVAL AS guint) AS GstMemory PTR
DECLARE FUNCTION gst_buffer_get_memory_range(BYVAL AS GstBuffer PTR, BYVAL AS guint, BYVAL AS gint) AS GstMemory PTR
DECLARE FUNCTION gst_buffer_get_meta(BYVAL AS GstBuffer PTR, BYVAL AS GType) AS GstMeta PTR
DECLARE FUNCTION gst_buffer_get_n_meta(BYVAL AS GstBuffer PTR, BYVAL AS GType) AS guint
DECLARE FUNCTION gst_buffer_get_reference_timestamp_meta(BYVAL AS GstBuffer PTR, BYVAL AS GstCaps PTR) AS GstReferenceTimestampMeta PTR
DECLARE FUNCTION gst_buffer_get_size(BYVAL AS GstBuffer PTR) AS gsize
DECLARE FUNCTION gst_buffer_get_sizes(BYVAL AS GstBuffer PTR, BYVAL AS gsize PTR, BYVAL AS gsize PTR) AS gsize
DECLARE FUNCTION gst_buffer_get_sizes_range(BYVAL AS GstBuffer PTR, BYVAL AS guint, BYVAL AS gint, BYVAL AS gsize PTR, BYVAL AS gsize PTR) AS gsize
DECLARE FUNCTION gst_buffer_has_flags(BYVAL AS GstBuffer PTR, BYVAL AS GstBufferFlags) AS gboolean
DECLARE SUB gst_buffer_insert_memory(BYVAL AS GstBuffer PTR, BYVAL AS gint, BYVAL AS GstMemory PTR)
DECLARE FUNCTION gst_buffer_is_all_memory_writable(BYVAL AS GstBuffer PTR) AS gboolean
DECLARE FUNCTION gst_buffer_is_memory_range_writable(BYVAL AS GstBuffer PTR, BYVAL AS guint, BYVAL AS gint) AS gboolean
DECLARE FUNCTION gst_buffer_iterate_meta(BYVAL AS GstBuffer PTR, BYVAL AS gpointer PTR) AS GstMeta PTR
DECLARE FUNCTION gst_buffer_iterate_meta_filtered(BYVAL AS GstBuffer PTR, BYVAL AS gpointer PTR, BYVAL AS GType) AS GstMeta PTR
DECLARE FUNCTION gst_buffer_map(BYVAL AS GstBuffer PTR, BYVAL AS GstMapInfo PTR, BYVAL AS GstMapFlags) AS gboolean
DECLARE FUNCTION gst_buffer_map_range(BYVAL AS GstBuffer PTR, BYVAL AS guint, BYVAL AS gint, BYVAL AS GstMapInfo PTR, BYVAL AS GstMapFlags) AS gboolean
DECLARE FUNCTION gst_buffer_memcmp(BYVAL AS GstBuffer PTR, BYVAL AS gsize, BYVAL AS gconstpointer, BYVAL AS gsize) AS gint
DECLARE FUNCTION gst_buffer_memset(BYVAL AS GstBuffer PTR, BYVAL AS gsize, BYVAL AS guint8, BYVAL AS gsize) AS gsize
DECLARE FUNCTION gst_buffer_n_memory(BYVAL AS GstBuffer PTR) AS guint
DECLARE FUNCTION gst_buffer_peek_memory(BYVAL AS GstBuffer PTR, BYVAL AS guint) AS GstMemory PTR
DECLARE SUB gst_buffer_prepend_memory(BYVAL AS GstBuffer PTR, BYVAL AS GstMemory PTR)
DECLARE SUB gst_buffer_remove_all_memory(BYVAL AS GstBuffer PTR)
DECLARE SUB gst_buffer_remove_memory(BYVAL AS GstBuffer PTR, BYVAL AS guint)
DECLARE SUB gst_buffer_remove_memory_range(BYVAL AS GstBuffer PTR, BYVAL AS guint, BYVAL AS gint)
DECLARE FUNCTION gst_buffer_remove_meta(BYVAL AS GstBuffer PTR, BYVAL AS GstMeta PTR) AS gboolean
DECLARE SUB gst_buffer_replace_all_memory(BYVAL AS GstBuffer PTR, BYVAL AS GstMemory PTR)
DECLARE SUB gst_buffer_replace_memory(BYVAL AS GstBuffer PTR, BYVAL AS guint, BYVAL AS GstMemory PTR)
DECLARE SUB gst_buffer_replace_memory_range(BYVAL AS GstBuffer PTR, BYVAL AS guint, BYVAL AS gint, BYVAL AS GstMemory PTR)
DECLARE SUB gst_buffer_resize(BYVAL AS GstBuffer PTR, BYVAL AS gssize, BYVAL AS gssize)
DECLARE FUNCTION gst_buffer_resize_range(BYVAL AS GstBuffer PTR, BYVAL AS guint, BYVAL AS gint, BYVAL AS gssize, BYVAL AS gssize) AS gboolean
DECLARE FUNCTION gst_buffer_set_flags(BYVAL AS GstBuffer PTR, BYVAL AS GstBufferFlags) AS gboolean
DECLARE SUB gst_buffer_set_size(BYVAL AS GstBuffer PTR, BYVAL AS gssize)
DECLARE SUB gst_buffer_unmap(BYVAL AS GstBuffer PTR, BYVAL AS GstMapInfo PTR)
DECLARE FUNCTION gst_buffer_unset_flags(BYVAL AS GstBuffer PTR, BYVAL AS GstBufferFlags) AS gboolean
DECLARE FUNCTION gst_buffer_get_max_memory() AS guint
TYPE GstBufferForeachMetaFunc AS FUNCTION CDECL(BYVAL AS GstBuffer PTR, BYVAL AS GstMeta PTR PTR, BYVAL AS gpointer) AS gboolean
DECLARE FUNCTION gst_buffer_list_new() AS GstBufferList PTR
DECLARE FUNCTION gst_buffer_list_new_sized(BYVAL AS guint) AS GstBufferList PTR
DECLARE FUNCTION gst_buffer_list_calculate_size(BYVAL AS GstBufferList PTR) AS gsize
DECLARE FUNCTION gst_buffer_list_copy_deep(BYVAL AS const GstBufferList PTR) AS GstBufferList PTR
DECLARE FUNCTION gst_buffer_list_foreach(BYVAL AS GstBufferList PTR, BYVAL AS GstBufferListFunc, BYVAL AS gpointer) AS gboolean
DECLARE FUNCTION gst_buffer_list_get(BYVAL AS GstBufferList PTR, BYVAL AS guint) AS GstBuffer PTR
DECLARE FUNCTION gst_buffer_list_get_writable(BYVAL AS GstBufferList PTR, BYVAL AS guint) AS GstBuffer PTR
DECLARE SUB gst_buffer_list_insert(BYVAL AS GstBufferList PTR, BYVAL AS gint, BYVAL AS GstBuffer PTR)
DECLARE FUNCTION gst_buffer_list_length(BYVAL AS GstBufferList PTR) AS guint
DECLARE SUB gst_buffer_list_remove(BYVAL AS GstBufferList PTR, BYVAL AS guint, BYVAL AS guint)
TYPE GstBufferListFunc AS FUNCTION CDECL(BYVAL AS GstBuffer PTR PTR, BYVAL AS guint, BYVAL AS gpointer) AS gboolean
TYPE _GstBufferPool
  AS GstObject object
  AS gint flushing
  AS GstBufferPoolPrivate PTR priv
  AS gpointer _gst_reserved(3)
END TYPE
DECLARE FUNCTION gst_buffer_pool_get_type() AS GType
#DEFINE GST_TYPE_BUFFER_POOL (gst_buffer_pool_get_type())
#DEFINE GST_BUFFER_POOL(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GST_TYPE_BUFFER_POOL, GstBufferPool))
#DEFINE GST_BUFFER_POOL_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GST_TYPE_BUFFER_POOL, GstBufferPoolClass))
#DEFINE GST_IS_BUFFER_POOL(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GST_TYPE_BUFFER_POOL))
#DEFINE GST_IS_CLASS_BUFFER_POOL(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GST_TYPE_BUFFER_POOL))
#DEFINE GST_BUFFER_POOL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GST_TYPE_BUFFER_POOL, GstBufferPoolClass))
DECLARE FUNCTION gst_buffer_pool_new() AS GstBufferPool PTR
DECLARE SUB gst_buffer_pool_config_add_option(BYVAL AS GstStructure PTR, BYVAL AS const gchar PTR)
DECLARE FUNCTION gst_buffer_pool_config_get_allocator(BYVAL AS GstStructure PTR, BYVAL AS GstAllocator PTR PTR, BYVAL AS GstAllocationParams PTR) AS gboolean
DECLARE FUNCTION gst_buffer_pool_config_get_option(BYVAL AS GstStructure PTR, BYVAL AS guint) AS const gchar PTR
DECLARE FUNCTION gst_buffer_pool_config_get_params(BYVAL AS GstStructure PTR, BYVAL AS GstCaps PTR PTR, BYVAL AS guint PTR, BYVAL AS guint PTR, BYVAL AS guint PTR) AS gboolean
DECLARE FUNCTION gst_buffer_pool_config_has_option(BYVAL AS GstStructure PTR, BYVAL AS const gchar PTR) AS gboolean
DECLARE FUNCTION gst_buffer_pool_config_n_options(BYVAL AS GstStructure PTR) AS guint
DECLARE SUB gst_buffer_pool_config_set_allocator(BYVAL AS GstStructure PTR, BYVAL AS GstAllocator PTR, BYVAL AS const GstAllocationParams PTR)
DECLARE SUB gst_buffer_pool_config_set_params(BYVAL AS GstStructure PTR, BYVAL AS GstCaps PTR, BYVAL AS guint, BYVAL AS guint, BYVAL AS guint)
DECLARE FUNCTION gst_buffer_pool_config_validate_params(BYVAL AS GstStructure PTR, BYVAL AS GstCaps PTR, BYVAL AS guint, BYVAL AS guint, BYVAL AS guint) AS gboolean
DECLARE FUNCTION gst_buffer_pool_acquire_buffer(BYVAL AS GstBufferPool PTR, BYVAL AS GstBuffer PTR PTR, BYVAL AS GstBufferPoolAcquireParams PTR) AS GstFlowReturn
DECLARE FUNCTION gst_buffer_pool_get_config(BYVAL AS GstBufferPool PTR) AS GstStructure PTR
DECLARE FUNCTION gst_buffer_pool_get_options(BYVAL AS GstBufferPool PTR) AS const gchar PTR PTR
DECLARE FUNCTION gst_buffer_pool_has_option(BYVAL AS GstBufferPool PTR, BYVAL AS const gchar PTR) AS gboolean
DECLARE FUNCTION gst_buffer_pool_is_active(BYVAL AS GstBufferPool PTR) AS gboolean
DECLARE SUB gst_buffer_pool_release_buffer(BYVAL AS GstBufferPool PTR, BYVAL AS GstBuffer PTR)
DECLARE FUNCTION gst_buffer_pool_set_active(BYVAL AS GstBufferPool PTR, BYVAL AS gboolean) AS gboolean
DECLARE FUNCTION gst_buffer_pool_set_config(BYVAL AS GstBufferPool PTR, BYVAL AS GstStructure PTR) AS gboolean
DECLARE SUB gst_buffer_pool_set_flushing(BYVAL AS GstBufferPool PTR, BYVAL AS gboolean)
TYPE _GstBufferPoolAcquireParams
  AS GstFormat format
  AS gint64 start
  AS gint64 stop
  AS GstBufferPoolAcquireFlags flags
  AS gpointer _gst_reserved(3)
END TYPE
TYPE _GstBufferPoolClass
  AS GstObjectClass object_class
  get_options AS FUNCTION CDECL(BYVAL AS GstBufferPool PTR) AS const gchar PTR PTR
  set_config AS FUNCTION CDECL(BYVAL AS GstBufferPool PTR, BYVAL AS GstStructure PTR) AS gboolean
  start AS FUNCTION CDECL(BYVAL AS GstBufferPool PTR) AS gboolean
  stop AS FUNCTION CDECL(BYVAL AS GstBufferPool PTR) AS gboolean
  acquire_buffer AS FUNCTION CDECL(BYVAL AS GstBufferPool PTR, BYVAL AS GstBuffer PTR PTR, BYVAL AS GstBufferPoolAcquireParams PTR) AS GstFlowReturn
  alloc_buffer AS FUNCTION CDECL(BYVAL AS GstBufferPool PTR, BYVAL AS GstBuffer PTR PTR, BYVAL AS GstBufferPoolAcquireParams PTR) AS GstFlowReturn
  reset_buffer AS SUB CDECL(BYVAL AS GstBufferPool PTR, BYVAL AS GstBuffer PTR)
  release_buffer AS SUB CDECL(BYVAL AS GstBufferPool PTR, BYVAL AS GstBuffer PTR)
  free_buffer AS SUB CDECL(BYVAL AS GstBufferPool PTR, BYVAL AS GstBuffer PTR)
  flush_start AS SUB CDECL(BYVAL AS GstBufferPool PTR)
  flush_stop AS SUB CDECL(BYVAL AS GstBufferPool PTR)
  AS gpointer _gst_reserved(1)
END TYPE
TYPE _GstBus
  AS GstObject object
  AS GstBusPrivate PTR priv
  AS gpointer _gst_reserved(3)
END TYPE
DECLARE FUNCTION gst_buffering_mode_get_type() AS GType
#DEFINE GST_TYPE_BUFFERING_MODE (gst_buffering_mode_get_type())
DECLARE FUNCTION gst_bus_get_type() AS GType
#DEFINE GST_TYPE_BUS (gst_bus_get_type())
#DEFINE GST_BUS(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GST_TYPE_BUS, GstBus))
#DEFINE GST_BUS_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GST_TYPE_BUS, GstBusClass))
#DEFINE GST_IS_BUS(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GST_TYPE_BUS))
#DEFINE GST_IS_CLASS_BUS(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GST_TYPE_BUS))
#DEFINE GST_BUS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GST_TYPE_BUS, GstBusClass))
DECLARE FUNCTION gst_bus_new() AS GstBus PTR
DECLARE SUB gst_bus_add_signal_watch(BYVAL AS GstBus PTR)
DECLARE SUB gst_bus_add_signal_watch_full(BYVAL AS GstBus PTR, BYVAL AS gint)
DECLARE FUNCTION gst_bus_add_watch(BYVAL AS GstBus PTR, BYVAL AS GstBusFunc, BYVAL AS gpointer) AS guint
DECLARE FUNCTION gst_bus_add_watch_full(BYVAL AS GstBus PTR, BYVAL AS gint, BYVAL AS GstBusFunc, BYVAL AS gpointer, BYVAL AS GDestroyNotify) AS guint
DECLARE FUNCTION gst_bus_async_signal_func(BYVAL AS GstBus PTR, BYVAL AS GstMessage PTR, BYVAL AS gpointer) AS gboolean
DECLARE FUNCTION gst_bus_create_watch(BYVAL AS GstBus PTR) AS GSource PTR
DECLARE SUB gst_bus_disable_sync_message_emission(BYVAL AS GstBus PTR)
DECLARE SUB gst_bus_enable_sync_message_emission(BYVAL AS GstBus PTR)
DECLARE SUB gst_bus_get_pollfd(BYVAL AS GstBus PTR, BYVAL AS GPollFD PTR)
DECLARE FUNCTION gst_bus_have_pending(BYVAL AS GstBus PTR) AS gboolean
DECLARE FUNCTION gst_bus_peek(BYVAL AS GstBus PTR) AS GstMessage PTR
DECLARE FUNCTION gst_bus_poll(BYVAL AS GstBus PTR, BYVAL AS GstMessageType, BYVAL AS GstClockTime) AS GstMessage PTR
DECLARE FUNCTION gst_bus_pop(BYVAL AS GstBus PTR) AS GstMessage PTR
DECLARE FUNCTION gst_bus_pop_filtered(BYVAL AS GstBus PTR, BYVAL AS GstMessageType) AS GstMessage PTR
DECLARE FUNCTION gst_bus_post(BYVAL AS GstBus PTR, BYVAL AS GstMessage PTR) AS gboolean
DECLARE SUB gst_bus_remove_signal_watch(BYVAL AS GstBus PTR)
DECLARE FUNCTION gst_bus_remove_watch(BYVAL AS GstBus PTR) AS gboolean
DECLARE SUB gst_bus_set_flushing(BYVAL AS GstBus PTR, BYVAL AS gboolean)
DECLARE SUB gst_bus_set_sync_handler(BYVAL AS GstBus PTR, BYVAL AS GstBusSyncHandler, BYVAL AS gpointer, BYVAL AS GDestroyNotify)
DECLARE FUNCTION gst_bus_sync_signal_handler(BYVAL AS GstBus PTR, BYVAL AS GstMessage PTR, BYVAL AS gpointer) AS GstBusSyncReply
DECLARE FUNCTION gst_bus_timed_pop(BYVAL AS GstBus PTR, BYVAL AS GstClockTime) AS GstMessage PTR
DECLARE FUNCTION gst_bus_timed_pop_filtered(BYVAL AS GstBus PTR, BYVAL AS GstClockTime, BYVAL AS GstMessageType) AS GstMessage PTR
TYPE _GstBusClass
  AS GstObjectClass parent_class
  message AS SUB CDECL(BYVAL AS GstBus PTR, BYVAL AS GstMessage PTR)
  sync_message AS SUB CDECL(BYVAL AS GstBus PTR, BYVAL AS GstMessage PTR)
  AS gpointer _gst_reserved(3)
END TYPE
TYPE GstBusFunc AS FUNCTION CDECL(BYVAL AS GstBus PTR, BYVAL AS GstMessage PTR, BYVAL AS gpointer) AS gboolean
TYPE GstBusSyncHandler AS FUNCTION CDECL(BYVAL AS GstBus PTR, BYVAL AS GstMessage PTR, BYVAL AS gpointer) AS GstBusSyncReply
TYPE _GstCaps
  AS GstMiniObject mini_object
END TYPE
DECLARE FUNCTION gst_bus_sync_reply_get_type() AS GType
#DEFINE GST_TYPE_BUS_SYNC_REPLY (gst_bus_sync_reply_get_type())
DECLARE FUNCTION gst_caps_new_any() AS GstCaps PTR
DECLARE FUNCTION gst_caps_new_empty() AS GstCaps PTR
DECLARE FUNCTION gst_caps_new_empty_simple(BYVAL AS const char PTR) AS GstCaps PTR
DECLARE FUNCTION gst_caps_new_full(BYVAL AS GstStructure PTR, ...) AS GstCaps PTR
DECLARE FUNCTION gst_caps_new_full_valist(BYVAL AS GstStructure PTR, BYVAL AS va_list) AS GstCaps PTR
DECLARE FUNCTION gst_caps_new_simple(BYVAL AS const char PTR, BYVAL AS const char PTR, ...) AS GstCaps PTR
DECLARE SUB gst_caps_append(BYVAL AS GstCaps PTR, BYVAL AS GstCaps PTR)
DECLARE SUB gst_caps_append_structure(BYVAL AS GstCaps PTR, BYVAL AS GstStructure PTR)
DECLARE SUB gst_caps_append_structure_full(BYVAL AS GstCaps PTR, BYVAL AS GstStructure PTR, BYVAL AS GstCapsFeatures PTR)
DECLARE FUNCTION gst_caps_can_intersect(BYVAL AS const GstCaps PTR, BYVAL AS const GstCaps PTR) AS gboolean
DECLARE FUNCTION gst_caps_copy(BYVAL AS const GstCaps PTR) AS GstCaps PTR
DECLARE FUNCTION gst_caps_copy_nth(BYVAL AS const GstCaps PTR, BYVAL AS guint) AS GstCaps PTR
DECLARE SUB gst_caps_filter_and_map_in_place(BYVAL AS GstCaps PTR, BYVAL AS GstCapsFilterMapFunc, BYVAL AS gpointer)
DECLARE FUNCTION gst_caps_fixate(BYVAL AS GstCaps PTR) AS GstCaps PTR
DECLARE FUNCTION gst_caps_foreach(BYVAL AS const GstCaps PTR, BYVAL AS GstCapsForeachFunc, BYVAL AS gpointer) AS gboolean
DECLARE FUNCTION gst_caps_get_features(BYVAL AS const GstCaps PTR, BYVAL AS guint) AS GstCapsFeatures PTR
DECLARE FUNCTION gst_caps_get_size(BYVAL AS const GstCaps PTR) AS guint
DECLARE FUNCTION gst_caps_get_structure(BYVAL AS const GstCaps PTR, BYVAL AS guint) AS GstStructure PTR
DECLARE FUNCTION gst_caps_intersect(BYVAL AS GstCaps PTR, BYVAL AS GstCaps PTR) AS GstCaps PTR
DECLARE FUNCTION gst_caps_intersect_full(BYVAL AS GstCaps PTR, BYVAL AS GstCaps PTR, BYVAL AS GstCapsIntersectMode) AS GstCaps PTR
DECLARE FUNCTION gst_caps_is_always_compatible(BYVAL AS const GstCaps PTR, BYVAL AS const GstCaps PTR) AS gboolean
DECLARE FUNCTION gst_caps_is_any(BYVAL AS const GstCaps PTR) AS gboolean
DECLARE FUNCTION gst_caps_is_empty(BYVAL AS const GstCaps PTR) AS gboolean
DECLARE FUNCTION gst_caps_is_equal(BYVAL AS const GstCaps PTR, BYVAL AS const GstCaps PTR) AS gboolean
DECLARE FUNCTION gst_caps_is_equal_fixed(BYVAL AS const GstCaps PTR, BYVAL AS const GstCaps PTR) AS gboolean
DECLARE FUNCTION gst_caps_is_fixed(BYVAL AS const GstCaps PTR) AS gboolean
DECLARE FUNCTION gst_caps_is_strictly_equal(BYVAL AS const GstCaps PTR, BYVAL AS const GstCaps PTR) AS gboolean
DECLARE FUNCTION gst_caps_is_subset(BYVAL AS const GstCaps PTR, BYVAL AS const GstCaps PTR) AS gboolean
DECLARE FUNCTION gst_caps_is_subset_structure(BYVAL AS const GstCaps PTR, BYVAL AS const GstStructure PTR) AS gboolean
DECLARE FUNCTION gst_caps_is_subset_structure_full(BYVAL AS const GstCaps PTR, BYVAL AS const GstStructure PTR, BYVAL AS const GstCapsFeatures PTR) AS gboolean
DECLARE FUNCTION gst_caps_map_in_place(BYVAL AS GstCaps PTR, BYVAL AS GstCapsMapFunc, BYVAL AS gpointer) AS gboolean
DECLARE FUNCTION gst_caps_merge(BYVAL AS GstCaps PTR, BYVAL AS GstCaps PTR) AS GstCaps PTR
DECLARE FUNCTION gst_caps_merge_structure(BYVAL AS GstCaps PTR, BYVAL AS GstStructure PTR) AS GstCaps PTR
DECLARE FUNCTION gst_caps_merge_structure_full(BYVAL AS GstCaps PTR, BYVAL AS GstStructure PTR, BYVAL AS GstCapsFeatures PTR) AS GstCaps PTR
DECLARE FUNCTION gst_caps_normalize(BYVAL AS GstCaps PTR) AS GstCaps PTR
DECLARE SUB gst_caps_remove_structure(BYVAL AS GstCaps PTR, BYVAL AS guint)
DECLARE SUB gst_caps_set_features(BYVAL AS GstCaps PTR, BYVAL AS guint, BYVAL AS GstCapsFeatures PTR)
DECLARE SUB gst_caps_set_features_simple(BYVAL AS GstCaps PTR, BYVAL AS GstCapsFeatures PTR)
DECLARE SUB gst_caps_set_simple(BYVAL AS GstCaps PTR, BYVAL AS const char PTR, ...)
DECLARE SUB gst_caps_set_simple_valist(BYVAL AS GstCaps PTR, BYVAL AS const char PTR, BYVAL AS va_list)
DECLARE SUB gst_caps_set_value(BYVAL AS GstCaps PTR, BYVAL AS const char PTR, BYVAL AS const GValue PTR)
DECLARE FUNCTION gst_caps_simplify(BYVAL AS GstCaps PTR) AS GstCaps PTR
DECLARE FUNCTION gst_caps_steal_structure(BYVAL AS GstCaps PTR, BYVAL AS guint) AS GstStructure PTR
DECLARE FUNCTION gst_caps_subtract(BYVAL AS GstCaps PTR, BYVAL AS GstCaps PTR) AS GstCaps PTR
DECLARE FUNCTION gst_caps_to_string(BYVAL AS const GstCaps PTR) AS gchar PTR
DECLARE FUNCTION gst_caps_truncate(BYVAL AS GstCaps PTR) AS GstCaps PTR
DECLARE FUNCTION gst_caps_from_string(BYVAL AS const gchar PTR) AS GstCaps PTR
DECLARE FUNCTION gst_caps_features_new(BYVAL AS const gchar PTR, ...) AS GstCapsFeatures PTR
DECLARE FUNCTION gst_caps_features_new_any() AS GstCapsFeatures PTR
DECLARE FUNCTION gst_caps_features_new_empty() AS GstCapsFeatures PTR
DECLARE FUNCTION gst_caps_features_new_id(BYVAL AS GQuark, ...) AS GstCapsFeatures PTR
DECLARE FUNCTION gst_caps_features_new_id_valist(BYVAL AS GQuark, BYVAL AS va_list) AS GstCapsFeatures PTR
DECLARE FUNCTION gst_caps_features_new_valist(BYVAL AS const gchar PTR, BYVAL AS va_list) AS GstCapsFeatures PTR
DECLARE SUB gst_caps_features_add(BYVAL AS GstCapsFeatures PTR, BYVAL AS const gchar PTR)
DECLARE SUB gst_caps_features_add_id(BYVAL AS GstCapsFeatures PTR, BYVAL AS GQuark)
DECLARE FUNCTION gst_caps_features_contains(BYVAL AS const GstCapsFeatures PTR, BYVAL AS const gchar PTR) AS gboolean
DECLARE FUNCTION gst_caps_features_contains_id(BYVAL AS const GstCapsFeatures PTR, BYVAL AS GQuark) AS gboolean
DECLARE FUNCTION gst_caps_features_copy(BYVAL AS const GstCapsFeatures PTR) AS GstCapsFeatures PTR
DECLARE SUB gst_caps_features_free(BYVAL AS GstCapsFeatures PTR)
DECLARE FUNCTION gst_caps_features_get_nth(BYVAL AS const GstCapsFeatures PTR, BYVAL AS guint) AS const gchar PTR
DECLARE FUNCTION gst_caps_features_get_nth_id(BYVAL AS const GstCapsFeatures PTR, BYVAL AS guint) AS GQuark
DECLARE FUNCTION gst_caps_features_get_size(BYVAL AS const GstCapsFeatures PTR) AS guint
DECLARE FUNCTION gst_caps_features_is_any(BYVAL AS const GstCapsFeatures PTR) AS gboolean
DECLARE FUNCTION gst_caps_features_is_equal(BYVAL AS const GstCapsFeatures PTR, BYVAL AS const GstCapsFeatures PTR) AS gboolean
DECLARE SUB gst_caps_features_remove(BYVAL AS GstCapsFeatures PTR, BYVAL AS const gchar PTR)
DECLARE SUB gst_caps_features_remove_id(BYVAL AS GstCapsFeatures PTR, BYVAL AS GQuark)
DECLARE FUNCTION gst_caps_features_set_parent_refcount(BYVAL AS GstCapsFeatures PTR, BYVAL AS gint PTR) AS gboolean
DECLARE FUNCTION gst_caps_features_to_string(BYVAL AS const GstCapsFeatures PTR) AS gchar PTR
DECLARE FUNCTION gst_caps_features_from_string(BYVAL AS const gchar PTR) AS GstCapsFeatures PTR
TYPE GstCapsFilterMapFunc AS FUNCTION CDECL(BYVAL AS GstCapsFeatures PTR, BYVAL AS GstStructure PTR, BYVAL AS gpointer) AS gboolean
TYPE GstCapsForeachFunc AS FUNCTION CDECL(BYVAL AS GstCapsFeatures PTR, BYVAL AS GstStructure PTR, BYVAL AS gpointer) AS gboolean
TYPE GstCapsMapFunc AS FUNCTION CDECL(BYVAL AS GstCapsFeatures PTR, BYVAL AS GstStructure PTR, BYVAL AS gpointer) AS gboolean
DECLARE FUNCTION gst_caps_intersect_mode_get_type() AS GType
#DEFINE GST_TYPE_CAPS_INTERSECT_MODE (gst_caps_intersect_mode_get_type())
DECLARE FUNCTION gst_child_proxy_get_type() AS GType
#DEFINE GST_TYPE_CHILD_PROXY (gst_child_proxy_get_type())
#DEFINE GST_CHILD_PROXY(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GST_TYPE_CHILD_PROXY, GstChildProxy))
#DEFINE GST_CHILD_PROXY_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GST_TYPE_CHILD_PROXY, GstChildProxyInterface))
#DEFINE GST_IS_CHILD_PROXY(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GST_TYPE_CHILD_PROXY))
#DEFINE GST_CHILD_PROXY_GET_IFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE((obj), GST_TYPE_CHILD_PROXY, GstChildProxyInterface))
DECLARE SUB gst_child_proxy_child_added(BYVAL AS GstChildProxy PTR, BYVAL AS GObject PTR, BYVAL AS const gchar PTR)
DECLARE SUB gst_child_proxy_child_removed(BYVAL AS GstChildProxy PTR, BYVAL AS GObject PTR, BYVAL AS const gchar PTR)
DECLARE SUB gst_child_proxy_get(BYVAL AS GstChildProxy PTR, BYVAL AS const gchar PTR, ...)
DECLARE FUNCTION gst_child_proxy_get_child_by_index(BYVAL AS GstChildProxy PTR, BYVAL AS guint) AS GObject PTR
DECLARE FUNCTION gst_child_proxy_get_child_by_name(BYVAL AS GstChildProxy PTR, BYVAL AS const gchar PTR) AS GObject PTR
DECLARE FUNCTION gst_child_proxy_get_children_count(BYVAL AS GstChildProxy PTR) AS guint
DECLARE SUB gst_child_proxy_get_property(BYVAL AS GstChildProxy PTR, BYVAL AS const gchar PTR, BYVAL AS GValue PTR)
DECLARE SUB gst_child_proxy_get_valist(BYVAL AS GstChildProxy PTR, BYVAL AS const gchar PTR, BYVAL AS va_list)
DECLARE FUNCTION gst_child_proxy_lookup(BYVAL AS GstChildProxy PTR, BYVAL AS const gchar PTR, BYVAL AS GObject PTR PTR, BYVAL AS GParamSpec PTR PTR) AS gboolean
DECLARE SUB gst_child_proxy_set(BYVAL AS GstChildProxy PTR, BYVAL AS const gchar PTR, ...)
DECLARE SUB gst_child_proxy_set_property(BYVAL AS GstChildProxy PTR, BYVAL AS const gchar PTR, BYVAL AS const GValue PTR)
DECLARE SUB gst_child_proxy_set_valist(BYVAL AS GstChildProxy PTR, BYVAL AS const gchar PTR, BYVAL AS va_list)
TYPE _GstChildProxyInterface
  AS GTypeInterface parent
  get_child_by_name AS FUNCTION CDECL(BYVAL AS GstChildProxy PTR, BYVAL AS const gchar PTR) AS GObject PTR
  get_child_by_index AS FUNCTION CDECL(BYVAL AS GstChildProxy PTR, BYVAL AS guint) AS GObject PTR
  get_children_count AS FUNCTION CDECL(BYVAL AS GstChildProxy PTR) AS guint
  child_added AS SUB CDECL(BYVAL AS GstChildProxy PTR, BYVAL AS GObject PTR, BYVAL AS const gchar PTR)
  child_removed AS SUB CDECL(BYVAL AS GstChildProxy PTR, BYVAL AS GObject PTR, BYVAL AS const gchar PTR)
  AS gpointer _gst_reserved(3)
END TYPE
TYPE _GstClock
  AS GstObject object
  AS GstClockPrivate PTR priv
  AS gpointer _gst_reserved(3)
END TYPE
DECLARE FUNCTION gst_clock_get_type() AS GType
#DEFINE GST_TYPE_CLOCK (gst_clock_get_type())
#DEFINE GST_CLOCK(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GST_TYPE_CLOCK, GstClock))
#DEFINE GST_CLOCK_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GST_TYPE_CLOCK, GstClockClass))
#DEFINE GST_IS_CLOCK(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GST_TYPE_CLOCK))
#DEFINE GST_IS_CLASS_CLOCK(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GST_TYPE_CLOCK))
#DEFINE GST_CLOCK_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GST_TYPE_CLOCK, GstClockClass))
DECLARE FUNCTION gst_clock_id_compare_func(BYVAL AS gconstpointer, BYVAL AS gconstpointer) AS gint
DECLARE FUNCTION gst_clock_id_get_clock(BYVAL AS GstClockID) AS GstClock PTR
DECLARE FUNCTION gst_clock_id_get_time(BYVAL AS GstClockID) AS GstClockTime
DECLARE FUNCTION gst_clock_id_ref(BYVAL AS GstClockID) AS GstClockID
DECLARE SUB gst_clock_id_unref(BYVAL AS GstClockID)
DECLARE SUB gst_clock_id_unschedule(BYVAL AS GstClockID)
DECLARE FUNCTION gst_clock_id_uses_clock(BYVAL AS GstClockID, BYVAL AS GstClock PTR) AS gboolean
DECLARE FUNCTION gst_clock_id_wait(BYVAL AS GstClockID, BYVAL AS GstClockTimeDiff PTR) AS GstClockReturn
DECLARE FUNCTION gst_clock_id_wait_async(BYVAL AS GstClockID, BYVAL AS GstClockCallback, BYVAL AS gpointer, BYVAL AS GDestroyNotify) AS GstClockReturn
DECLARE FUNCTION gst_clock_add_observation(BYVAL AS GstClock PTR, BYVAL AS GstClockTime, BYVAL AS GstClockTime, BYVAL AS gdouble PTR) AS gboolean
DECLARE FUNCTION gst_clock_add_observation_unapplied(BYVAL AS GstClock PTR, BYVAL AS GstClockTime, BYVAL AS GstClockTime, BYVAL AS gdouble PTR, BYVAL AS GstClockTime PTR, BYVAL AS GstClockTime PTR, BYVAL AS GstClockTime PTR, BYVAL AS GstClockTime PTR) AS gboolean
DECLARE FUNCTION gst_clock_adjust_unlocked(BYVAL AS GstClock PTR, BYVAL AS GstClockTime) AS GstClockTime
DECLARE FUNCTION gst_clock_adjust_with_calibration(BYVAL AS GstClock PTR, BYVAL AS GstClockTime, BYVAL AS GstClockTime, BYVAL AS GstClockTime, BYVAL AS GstClockTime, BYVAL AS GstClockTime) AS GstClockTime
DECLARE SUB gst_clock_get_calibration(BYVAL AS GstClock PTR, BYVAL AS GstClockTime PTR, BYVAL AS GstClockTime PTR, BYVAL AS GstClockTime PTR, BYVAL AS GstClockTime PTR)
DECLARE FUNCTION gst_clock_get_internal_time(BYVAL AS GstClock PTR) AS GstClockTime
DECLARE FUNCTION gst_clock_get_master(BYVAL AS GstClock PTR) AS GstClock PTR
DECLARE FUNCTION gst_clock_get_resolution(BYVAL AS GstClock PTR) AS GstClockTime
DECLARE FUNCTION gst_clock_get_time(BYVAL AS GstClock PTR) AS GstClockTime
DECLARE FUNCTION gst_clock_get_timeout(BYVAL AS GstClock PTR) AS GstClockTime
DECLARE FUNCTION gst_clock_is_synced(BYVAL AS GstClock PTR) AS gboolean
DECLARE FUNCTION gst_clock_new_periodic_id(BYVAL AS GstClock PTR, BYVAL AS GstClockTime, BYVAL AS GstClockTime) AS GstClockID
DECLARE FUNCTION gst_clock_new_single_shot_id(BYVAL AS GstClock PTR, BYVAL AS GstClockTime) AS GstClockID
DECLARE FUNCTION gst_clock_periodic_id_reinit(BYVAL AS GstClock PTR, BYVAL AS GstClockID, BYVAL AS GstClockTime, BYVAL AS GstClockTime) AS gboolean
DECLARE SUB gst_clock_set_calibration(BYVAL AS GstClock PTR, BYVAL AS GstClockTime, BYVAL AS GstClockTime, BYVAL AS GstClockTime, BYVAL AS GstClockTime)
DECLARE FUNCTION gst_clock_set_master(BYVAL AS GstClock PTR, BYVAL AS GstClock PTR) AS gboolean
DECLARE FUNCTION gst_clock_set_resolution(BYVAL AS GstClock PTR, BYVAL AS GstClockTime) AS GstClockTime
DECLARE SUB gst_clock_set_synced(BYVAL AS GstClock PTR, BYVAL AS gboolean)
DECLARE SUB gst_clock_set_timeout(BYVAL AS GstClock PTR, BYVAL AS GstClockTime)
DECLARE FUNCTION gst_clock_single_shot_id_reinit(BYVAL AS GstClock PTR, BYVAL AS GstClockID, BYVAL AS GstClockTime) AS gboolean
DECLARE FUNCTION gst_clock_unadjust_unlocked(BYVAL AS GstClock PTR, BYVAL AS GstClockTime) AS GstClockTime
DECLARE FUNCTION gst_clock_unadjust_with_calibration(BYVAL AS GstClock PTR, BYVAL AS GstClockTime, BYVAL AS GstClockTime, BYVAL AS GstClockTime, BYVAL AS GstClockTime, BYVAL AS GstClockTime) AS GstClockTime
DECLARE FUNCTION gst_clock_wait_for_sync(BYVAL AS GstClock PTR, BYVAL AS GstClockTime) AS gboolean
TYPE GstClockCallback AS FUNCTION CDECL(BYVAL AS GstClock PTR, BYVAL AS GstClockTime, BYVAL AS GstClockID, BYVAL AS gpointer) AS gboolean
TYPE _GstClockClass
  AS GstObjectClass parent_class
  change_resolution AS FUNCTION CDECL(BYVAL AS GstClock PTR, BYVAL AS GstClockTime, BYVAL AS GstClockTime) AS GstClockTime
  get_resolution AS FUNCTION CDECL(BYVAL AS GstClock PTR) AS GstClockTime
  get_internal_time AS FUNCTION CDECL(BYVAL AS GstClock PTR) AS GstClockTime
  wait AS FUNCTION CDECL(BYVAL AS GstClock PTR, BYVAL AS GstClockEntry PTR, BYVAL AS GstClockTimeDiff PTR) AS GstClockReturn
  wait_async AS FUNCTION CDECL(BYVAL AS GstClock PTR, BYVAL AS GstClockEntry PTR) AS GstClockReturn
  unschedule AS SUB CDECL(BYVAL AS GstClock PTR, BYVAL AS GstClockEntry PTR)
  AS gpointer _gst_reserved(3)
END TYPE
TYPE _GstClockEntry
  AS gint refcount
  AS GstClock PTR clock
  AS GstClockEntryType type
  AS GstClockTime time
  AS GstClockTime interval
  AS GstClockReturn status
  AS GstClockCallback func
  AS gpointer user_data
  AS GDestroyNotify destroy_data
  AS gboolean unscheduled
  AS gboolean woken_up
  AS gpointer _gst_reserved(3)
END TYPE
DECLARE FUNCTION gst_clock_entry_type_get_type() AS GType
#DEFINE GST_TYPE_CLOCK_ENTRY_TYPE (gst_clock_entry_type_get_type())
DECLARE FUNCTION gst_clock_return_get_type() AS GType
#DEFINE GST_TYPE_CLOCK_RETURN (gst_clock_return_get_type())
DECLARE FUNCTION gst_clock_type_get_type() AS GType
#DEFINE GST_TYPE_CLOCK_TYPE (gst_clock_type_get_type())
DECLARE FUNCTION gst_context_new(BYVAL AS const gchar PTR, BYVAL AS gboolean) AS GstContext PTR
DECLARE FUNCTION gst_context_get_context_type(BYVAL AS const GstContext PTR) AS const gchar PTR
DECLARE FUNCTION gst_context_get_structure(BYVAL AS const GstContext PTR) AS const GstStructure PTR
DECLARE FUNCTION gst_context_has_context_type(BYVAL AS const GstContext PTR, BYVAL AS const gchar PTR) AS gboolean
DECLARE FUNCTION gst_context_is_persistent(BYVAL AS const GstContext PTR) AS gboolean
DECLARE FUNCTION gst_context_writable_structure(BYVAL AS GstContext PTR) AS GstStructure PTR
TYPE _GstControlBinding
  AS GstObject parent
  AS gchar PTR name
  AS GParamSpec PTR pspec
  AS GstObject PTR object
  AS gboolean disabled
END TYPE
DECLARE FUNCTION gst_control_binding_get_type() AS GType
#DEFINE GST_TYPE_CONTROL_BINDING (gst_control_binding_get_type())
#DEFINE GST_CONTROL_BINDING(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GST_TYPE_CONTROL_BINDING, GstControlBinding))
#DEFINE GST_CONTROL_BINDING_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GST_TYPE_CONTROL_BINDING, GstControlBindingClass))
#DEFINE GST_IS_CONTROL_BINDING(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GST_TYPE_CONTROL_BINDING))
#DEFINE GST_IS_CLASS_CONTROL_BINDING(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GST_TYPE_CONTROL_BINDING))
#DEFINE GST_CONTROL_BINDING_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GST_TYPE_CONTROL_BINDING, GstControlBindingClass))
DECLARE FUNCTION gst_control_binding_get_g_value_array(BYVAL AS GstControlBinding PTR, BYVAL AS GstClockTime, BYVAL AS GstClockTime, BYVAL AS guint, BYVAL AS GValue PTR) AS gboolean
DECLARE FUNCTION gst_control_binding_get_value(BYVAL AS GstControlBinding PTR, BYVAL AS GstClockTime) AS GValue PTR
DECLARE FUNCTION gst_control_binding_get_value_array(BYVAL AS GstControlBinding PTR, BYVAL AS GstClockTime, BYVAL AS GstClockTime, BYVAL AS guint, BYVAL AS gpointer) AS gboolean
DECLARE FUNCTION gst_control_binding_is_disabled(BYVAL AS GstControlBinding PTR) AS gboolean
DECLARE SUB gst_control_binding_set_disabled(BYVAL AS GstControlBinding PTR, BYVAL AS gboolean)
DECLARE FUNCTION gst_control_binding_sync_values(BYVAL AS GstControlBinding PTR, BYVAL AS GstObject PTR, BYVAL AS GstClockTime, BYVAL AS GstClockTime) AS gboolean
TYPE _GstControlBindingClass
  AS GstObjectClass parent_class
  sync_values AS FUNCTION CDECL(BYVAL AS GstControlBinding PTR, BYVAL AS GstObject PTR, BYVAL AS GstClockTime, BYVAL AS GstClockTime) AS gboolean
  get_value AS FUNCTION CDECL(BYVAL AS GstControlBinding PTR, BYVAL AS GstClockTime) AS GValue PTR
  get_value_array AS FUNCTION CDECL(BYVAL AS GstControlBinding PTR, BYVAL AS GstClockTime, BYVAL AS GstClockTime, BYVAL AS guint, BYVAL AS gpointer) AS gboolean
  get_g_value_array AS FUNCTION CDECL(BYVAL AS GstControlBinding PTR, BYVAL AS GstClockTime, BYVAL AS GstClockTime, BYVAL AS guint, BYVAL AS GValue PTR) AS gboolean
  AS gpointer _gst_reserved(3)
END TYPE
TYPE GstControlBindingConvert AS SUB CDECL(BYVAL AS GstControlBinding PTR, BYVAL AS gdouble, BYVAL AS GValue PTR)
TYPE _GstControlSource
  AS GstObject parent
  AS GstControlSourceGetValue get_value
  AS GstControlSourceGetValueArray get_value_array
  AS gpointer _gst_reserved(3)
END TYPE
DECLARE FUNCTION gst_control_source_get_type() AS GType
#DEFINE GST_TYPE_CONTROL_SOURCE (gst_control_source_get_type())
#DEFINE GST_CONTROL_SOURCE(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GST_TYPE_CONTROL_SOURCE, GstControlSource))
#DEFINE GST_CONTROL_SOURCE_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GST_TYPE_CONTROL_SOURCE, GstControlSourceClass))
#DEFINE GST_IS_CONTROL_SOURCE(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GST_TYPE_CONTROL_SOURCE))
#DEFINE GST_IS_CLASS_CONTROL_SOURCE(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GST_TYPE_CONTROL_SOURCE))
#DEFINE GST_CONTROL_SOURCE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GST_TYPE_CONTROL_SOURCE, GstControlSourceClass))
DECLARE FUNCTION gst_control_source_get_value(BYVAL AS GstControlSource PTR, BYVAL AS GstClockTime, BYVAL AS gdouble PTR) AS gboolean
DECLARE FUNCTION gst_control_source_get_value_array(BYVAL AS GstControlSource PTR, BYVAL AS GstClockTime, BYVAL AS GstClockTime, BYVAL AS guint, BYVAL AS gdouble PTR) AS gboolean
TYPE _GstControlSourceClass
  AS GstObjectClass parent_class
  AS gpointer _gst_reserved(3)
END TYPE
TYPE GstControlSourceGetValue AS FUNCTION CDECL(BYVAL AS GstControlSource PTR, BYVAL AS GstClockTime, BYVAL AS gdouble PTR) AS gboolean
TYPE GstControlSourceGetValueArray AS FUNCTION CDECL(BYVAL AS GstControlSource PTR, BYVAL AS GstClockTime, BYVAL AS GstClockTime, BYVAL AS guint, BYVAL AS gdouble PTR) AS gboolean
DECLARE FUNCTION gst_core_error_get_type() AS GType
#DEFINE GST_TYPE_CORE_ERROR (gst_core_error_get_type())
DECLARE FUNCTION gst_date_time_new(BYVAL AS gfloat, BYVAL AS gint, BYVAL AS gint, BYVAL AS gint, BYVAL AS gint, BYVAL AS gint, BYVAL AS gdouble) AS GstDateTime PTR
DECLARE FUNCTION gst_date_time_new_from_g_date_time(BYVAL AS GDateTime PTR) AS GstDateTime PTR
DECLARE FUNCTION gst_date_time_new_from_iso8601_string(BYVAL AS const gchar PTR) AS GstDateTime PTR
DECLARE FUNCTION gst_date_time_new_from_unix_epoch_local_time(BYVAL AS gint64) AS GstDateTime PTR
DECLARE FUNCTION gst_date_time_new_from_unix_epoch_utc(BYVAL AS gint64) AS GstDateTime PTR
DECLARE FUNCTION gst_date_time_new_local_time(BYVAL AS gint, BYVAL AS gint, BYVAL AS gint, BYVAL AS gint, BYVAL AS gint, BYVAL AS gdouble) AS GstDateTime PTR
DECLARE FUNCTION gst_date_time_new_now_local_time() AS GstDateTime PTR
DECLARE FUNCTION gst_date_time_new_now_utc() AS GstDateTime PTR
DECLARE FUNCTION gst_date_time_new_y(BYVAL AS gint) AS GstDateTime PTR
DECLARE FUNCTION gst_date_time_new_ym(BYVAL AS gint, BYVAL AS gint) AS GstDateTime PTR
DECLARE FUNCTION gst_date_time_new_ymd(BYVAL AS gint, BYVAL AS gint, BYVAL AS gint) AS GstDateTime PTR
DECLARE FUNCTION gst_date_time_get_day(BYVAL AS const GstDateTime PTR) AS gint
DECLARE FUNCTION gst_date_time_get_hour(BYVAL AS const GstDateTime PTR) AS gint
DECLARE FUNCTION gst_date_time_get_microsecond(BYVAL AS const GstDateTime PTR) AS gint
DECLARE FUNCTION gst_date_time_get_minute(BYVAL AS const GstDateTime PTR) AS gint
DECLARE FUNCTION gst_date_time_get_month(BYVAL AS const GstDateTime PTR) AS gint
DECLARE FUNCTION gst_date_time_get_second(BYVAL AS const GstDateTime PTR) AS gint
DECLARE FUNCTION gst_date_time_get_time_zone_offset(BYVAL AS const GstDateTime PTR) AS gfloat
DECLARE FUNCTION gst_date_time_get_year(BYVAL AS const GstDateTime PTR) AS gint
DECLARE FUNCTION gst_date_time_has_day(BYVAL AS const GstDateTime PTR) AS gboolean
DECLARE FUNCTION gst_date_time_has_month(BYVAL AS const GstDateTime PTR) AS gboolean
DECLARE FUNCTION gst_date_time_has_second(BYVAL AS const GstDateTime PTR) AS gboolean
DECLARE FUNCTION gst_date_time_has_time(BYVAL AS const GstDateTime PTR) AS gboolean
DECLARE FUNCTION gst_date_time_has_year(BYVAL AS const GstDateTime PTR) AS gboolean
DECLARE FUNCTION gst_date_time_ref(BYVAL AS GstDateTime PTR) AS GstDateTime PTR
DECLARE FUNCTION gst_date_time_to_g_date_time(BYVAL AS GstDateTime PTR) AS GDateTime PTR
DECLARE FUNCTION gst_date_time_to_iso8601_string(BYVAL AS GstDateTime PTR) AS gchar PTR
DECLARE SUB gst_date_time_unref(BYVAL AS GstDateTime PTR)
TYPE _GstDebugCategory
  AS gint threshold
  AS guint color
  AS const gchar PTR name
  AS const gchar PTR description
END TYPE
DECLARE SUB gst_debug_category_free(BYVAL AS GstDebugCategory PTR)
DECLARE FUNCTION gst_debug_category_get_color(BYVAL AS GstDebugCategory PTR) AS guint
DECLARE FUNCTION gst_debug_category_get_description(BYVAL AS GstDebugCategory PTR) AS const gchar PTR
DECLARE FUNCTION gst_debug_category_get_name(BYVAL AS GstDebugCategory PTR) AS const gchar PTR
DECLARE FUNCTION gst_debug_category_get_threshold(BYVAL AS GstDebugCategory PTR) AS GstDebugLevel
DECLARE SUB gst_debug_category_reset_threshold(BYVAL AS GstDebugCategory PTR)
DECLARE SUB gst_debug_category_set_threshold(BYVAL AS GstDebugCategory PTR, BYVAL AS GstDebugLevel)
TYPE GstDebugFuncPtr AS SUB CDECL()
DECLARE FUNCTION gst_debug_color_mode_get_type() AS GType
#DEFINE GST_TYPE_DEBUG_COLOR_MODE (gst_debug_color_mode_get_type())
DECLARE FUNCTION gst_debug_level_get_type() AS GType
#DEFINE GST_TYPE_DEBUG_LEVEL (gst_debug_level_get_type())
DECLARE FUNCTION gst_debug_message_get(BYVAL AS GstDebugMessage PTR) AS const gchar PTR
TYPE _GstDevice
  AS GstObject parent
  AS GstDevicePrivate PTR priv
  AS gpointer _gst_reserved(3)
END TYPE
DECLARE FUNCTION gst_device_get_type() AS GType
#DEFINE GST_TYPE_DEVICE (gst_device_get_type())
#DEFINE GST_DEVICE(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GST_TYPE_DEVICE, GstDevice))
#DEFINE GST_DEVICE_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GST_TYPE_DEVICE, GstDeviceClass))
#DEFINE GST_IS_DEVICE(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GST_TYPE_DEVICE))
#DEFINE GST_IS_CLASS_DEVICE(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GST_TYPE_DEVICE))
#DEFINE GST_DEVICE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GST_TYPE_DEVICE, GstDeviceClass))
DECLARE FUNCTION gst_device_create_element(BYVAL AS GstDevice PTR, BYVAL AS const gchar PTR) AS GstElement PTR
DECLARE FUNCTION gst_device_get_caps(BYVAL AS GstDevice PTR) AS GstCaps PTR
DECLARE FUNCTION gst_device_get_device_class(BYVAL AS GstDevice PTR) AS gchar PTR
DECLARE FUNCTION gst_device_get_display_name(BYVAL AS GstDevice PTR) AS gchar PTR
DECLARE FUNCTION gst_device_get_properties(BYVAL AS GstDevice PTR) AS GstStructure PTR
DECLARE FUNCTION gst_device_has_classes(BYVAL AS GstDevice PTR, BYVAL AS const gchar PTR) AS gboolean
DECLARE FUNCTION gst_device_has_classesv(BYVAL AS GstDevice PTR, BYVAL AS gchar PTR PTR) AS gboolean
DECLARE FUNCTION gst_device_reconfigure_element(BYVAL AS GstDevice PTR, BYVAL AS GstElement PTR) AS gboolean
TYPE _GstDeviceClass
  AS GstObjectClass parent_class
  create_element AS FUNCTION CDECL(BYVAL AS GstDevice PTR, BYVAL AS const gchar PTR) AS GstElement PTR
  reconfigure_element AS FUNCTION CDECL(BYVAL AS GstDevice PTR, BYVAL AS GstElement PTR) AS gboolean
  AS gpointer _gst_reserved(3)
END TYPE
TYPE _GstDeviceMonitor
  AS GstObject parent
  AS GstDeviceMonitorPrivate PTR priv
  AS gpointer _gst_reserved(3)
END TYPE
DECLARE FUNCTION gst_device_monitor_get_type() AS GType
#DEFINE GST_TYPE_DEVICE_MONITOR (gst_device_monitor_get_type())
#DEFINE GST_DEVICE_MONITOR(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GST_TYPE_DEVICE_MONITOR, GstDeviceMonitor))
#DEFINE GST_DEVICE_MONITOR_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GST_TYPE_DEVICE_MONITOR, GstDeviceMonitorClass))
#DEFINE GST_IS_DEVICE_MONITOR(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GST_TYPE_DEVICE_MONITOR))
#DEFINE GST_IS_CLASS_DEVICE_MONITOR(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GST_TYPE_DEVICE_MONITOR))
#DEFINE GST_DEVICE_MONITOR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GST_TYPE_DEVICE_MONITOR, GstDeviceMonitorClass))
DECLARE FUNCTION gst_device_monitor_new() AS GstDeviceMonitor PTR
DECLARE FUNCTION gst_device_monitor_add_filter(BYVAL AS GstDeviceMonitor PTR, BYVAL AS const gchar PTR, BYVAL AS GstCaps PTR) AS guint
DECLARE FUNCTION gst_device_monitor_get_bus(BYVAL AS GstDeviceMonitor PTR) AS GstBus PTR
DECLARE FUNCTION gst_device_monitor_get_devices(BYVAL AS GstDeviceMonitor PTR) AS GList PTR
DECLARE FUNCTION gst_device_monitor_get_providers(BYVAL AS GstDeviceMonitor PTR) AS gchar PTR PTR
DECLARE FUNCTION gst_device_monitor_get_show_all_devices(BYVAL AS GstDeviceMonitor PTR) AS gboolean
DECLARE FUNCTION gst_device_monitor_remove_filter(BYVAL AS GstDeviceMonitor PTR, BYVAL AS guint) AS gboolean
DECLARE SUB gst_device_monitor_set_show_all_devices(BYVAL AS GstDeviceMonitor PTR, BYVAL AS gboolean)
DECLARE FUNCTION gst_device_monitor_start(BYVAL AS GstDeviceMonitor PTR) AS gboolean
DECLARE SUB gst_device_monitor_stop(BYVAL AS GstDeviceMonitor PTR)
TYPE _GstDeviceMonitorClass
  AS GstObjectClass parent_class
  AS gpointer _gst_reserved(3)
END TYPE
TYPE _GstDeviceProvider
  AS GstObject parent
  AS GList PTR devices
  AS GstDeviceProviderPrivate PTR priv
  AS gpointer _gst_reserved(3)
END TYPE
DECLARE FUNCTION gst_device_provider_get_type() AS GType
#DEFINE GST_TYPE_DEVICE_PROVIDER (gst_device_provider_get_type())
#DEFINE GST_DEVICE_PROVIDER(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GST_TYPE_DEVICE_PROVIDER, GstDeviceProvider))
#DEFINE GST_DEVICE_PROVIDER_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GST_TYPE_DEVICE_PROVIDER, GstDeviceProviderClass))
#DEFINE GST_IS_DEVICE_PROVIDER(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GST_TYPE_DEVICE_PROVIDER))
#DEFINE GST_IS_CLASS_DEVICE_PROVIDER(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GST_TYPE_DEVICE_PROVIDER))
#DEFINE GST_DEVICE_PROVIDER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GST_TYPE_DEVICE_PROVIDER, GstDeviceProviderClass))
DECLARE FUNCTION gst_device_provider_register(BYVAL AS GstPlugin PTR, BYVAL AS const gchar PTR, BYVAL AS guint, BYVAL AS GType) AS gboolean
DECLARE FUNCTION gst_device_provider_can_monitor(BYVAL AS GstDeviceProvider PTR) AS gboolean
DECLARE SUB gst_device_provider_device_add(BYVAL AS GstDeviceProvider PTR, BYVAL AS GstDevice PTR)
DECLARE SUB gst_device_provider_device_changed(BYVAL AS GstDeviceProvider PTR, BYVAL AS GstDevice PTR, BYVAL AS GstDevice PTR)
DECLARE SUB gst_device_provider_device_remove(BYVAL AS GstDeviceProvider PTR, BYVAL AS GstDevice PTR)
DECLARE FUNCTION gst_device_provider_get_bus(BYVAL AS GstDeviceProvider PTR) AS GstBus PTR
DECLARE FUNCTION gst_device_provider_get_devices(BYVAL AS GstDeviceProvider PTR) AS GList PTR
DECLARE FUNCTION gst_device_provider_get_factory(BYVAL AS GstDeviceProvider PTR) AS GstDeviceProviderFactory PTR
DECLARE FUNCTION gst_device_provider_get_hidden_providers(BYVAL AS GstDeviceProvider PTR) AS gchar PTR PTR
DECLARE FUNCTION gst_device_provider_get_metadata(BYVAL AS GstDeviceProvider PTR, BYVAL AS const gchar PTR) AS const gchar PTR
DECLARE SUB gst_device_provider_hide_provider(BYVAL AS GstDeviceProvider PTR, BYVAL AS const gchar PTR)
DECLARE FUNCTION gst_device_provider_start(BYVAL AS GstDeviceProvider PTR) AS gboolean
DECLARE SUB gst_device_provider_stop(BYVAL AS GstDeviceProvider PTR)
DECLARE SUB gst_device_provider_unhide_provider(BYVAL AS GstDeviceProvider PTR, BYVAL AS const gchar PTR)
TYPE _GstDeviceProviderClass
  AS GstObjectClass parent_class
  AS GstDeviceProviderFactory PTR factory
  probe AS FUNCTION CDECL(BYVAL AS GstDeviceProvider PTR) AS GList PTR
  start AS FUNCTION CDECL(BYVAL AS GstDeviceProvider PTR) AS gboolean
  stop AS SUB CDECL(BYVAL AS GstDeviceProvider PTR)
  AS gpointer metadata
  AS gpointer _gst_reserved(3)
END TYPE
DECLARE SUB gst_device_provider_class_add_metadata(BYVAL AS GstDeviceProviderClass PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR)
DECLARE SUB gst_device_provider_class_add_static_metadata(BYVAL AS GstDeviceProviderClass PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR)
DECLARE FUNCTION gst_device_provider_class_get_metadata(BYVAL AS GstDeviceProviderClass PTR, BYVAL AS const gchar PTR) AS const gchar PTR
DECLARE SUB gst_device_provider_class_set_metadata(BYVAL AS GstDeviceProviderClass PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR)
DECLARE SUB gst_device_provider_class_set_static_metadata(BYVAL AS GstDeviceProviderClass PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR)
DECLARE FUNCTION gst_device_provider_factory_get_type() AS GType
#DEFINE GST_TYPE_DEVICE_PROVIDER_FACTORY (gst_device_provider_factory_get_type())
#DEFINE GST_DEVICE_PROVIDER_FACTORY(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GST_TYPE_DEVICE_PROVIDER_FACTORY, GstDeviceProviderFactory))
#DEFINE GST_DEVICE_PROVIDER_FACTORY_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GST_TYPE_DEVICE_PROVIDER_FACTORY, GstDeviceProviderFactoryClass))
#DEFINE GST_IS_DEVICE_PROVIDER_FACTORY(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GST_TYPE_DEVICE_PROVIDER_FACTORY))
#DEFINE GST_IS_CLASS_DEVICE_PROVIDER_FACTORY(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GST_TYPE_DEVICE_PROVIDER_FACTORY))
#DEFINE GST_DEVICE_PROVIDER_FACTORY_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GST_TYPE_DEVICE_PROVIDER_FACTORY, GstDeviceProviderFactoryClass))
DECLARE FUNCTION gst_device_provider_factory_find(BYVAL AS const gchar PTR) AS GstDeviceProviderFactory PTR
DECLARE FUNCTION gst_device_provider_factory_get_by_name(BYVAL AS const gchar PTR) AS GstDeviceProvider PTR
DECLARE FUNCTION gst_device_provider_factory_list_get_device_providers(BYVAL AS GstRank) AS GList PTR
DECLARE FUNCTION gst_device_provider_factory_get(BYVAL AS GstDeviceProviderFactory PTR) AS GstDeviceProvider PTR
DECLARE FUNCTION gst_device_provider_factory_get_device_provider_type(BYVAL AS GstDeviceProviderFactory PTR) AS GType
DECLARE FUNCTION gst_device_provider_factory_get_metadata(BYVAL AS GstDeviceProviderFactory PTR, BYVAL AS const gchar PTR) AS const gchar PTR
DECLARE FUNCTION gst_device_provider_factory_get_metadata_keys(BYVAL AS GstDeviceProviderFactory PTR) AS gchar PTR PTR
DECLARE FUNCTION gst_device_provider_factory_has_classes(BYVAL AS GstDeviceProviderFactory PTR, BYVAL AS const gchar PTR) AS gboolean
DECLARE FUNCTION gst_device_provider_factory_has_classesv(BYVAL AS GstDeviceProviderFactory PTR, BYVAL AS gchar PTR PTR) AS gboolean
DECLARE FUNCTION gst_double_range_get_type() AS GType
#DEFINE GST_TYPE_DOUBLE_RANGE (gst_double_range_get_type())
#DEFINE GST_DOUBLE_RANGE(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GST_TYPE_DOUBLE_RANGE, GstDoubleRange))
#DEFINE GST_DOUBLE_RANGE_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GST_TYPE_DOUBLE_RANGE, Gst))
#DEFINE GST_IS_DOUBLE_RANGE(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GST_TYPE_DOUBLE_RANGE))
#DEFINE GST_IS_CLASS_DOUBLE_RANGE(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GST_TYPE_DOUBLE_RANGE))
#DEFINE GST_DOUBLE_RANGE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GST_TYPE_DOUBLE_RANGE, Gst))
DECLARE FUNCTION gst_dynamic_type_factory_get_type() AS GType
#DEFINE GST_TYPE_DYNAMIC_TYPE_FACTORY (gst_dynamic_type_factory_get_type())
#DEFINE GST_DYNAMIC_TYPE_FACTORY(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GST_TYPE_DYNAMIC_TYPE_FACTORY, GstDynamicTypeFactory))
#DEFINE GST_DYNAMIC_TYPE_FACTORY_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GST_TYPE_DYNAMIC_TYPE_FACTORY, GstDynamicTypeFactoryClass))
#DEFINE GST_IS_DYNAMIC_TYPE_FACTORY(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GST_TYPE_DYNAMIC_TYPE_FACTORY))
#DEFINE GST_IS_CLASS_DYNAMIC_TYPE_FACTORY(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GST_TYPE_DYNAMIC_TYPE_FACTORY))
#DEFINE GST_DYNAMIC_TYPE_FACTORY_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GST_TYPE_DYNAMIC_TYPE_FACTORY, GstDynamicTypeFactoryClass))
DECLARE FUNCTION gst_dynamic_type_factory_load(BYVAL AS const gchar PTR) AS GType
TYPE _GstElement
  AS GstObject object
  AS GRecMutex state_lock
  AS GCond state_cond
  AS guint32 state_cookie
  AS GstState target_state
  AS GstState current_state
  AS GstState next_state
  AS GstState pending_state
  AS GstStateChangeReturn last_return
  AS GstBus PTR bus
  AS GstClock PTR clock
  AS GstClockTimeDiff base_time
  AS GstClockTime start_time
  AS guint16 numpads
  AS GList PTR pads
  AS guint16 numsrcpads
  AS GList PTR srcpads
  AS guint16 numsinkpads
  AS GList PTR sinkpads
  AS guint32 pads_cookie
  AS GList PTR contexts
  AS gpointer _gst_reserved(2)
END TYPE
DECLARE FUNCTION gst_element_get_type() AS GType
#DEFINE GST_TYPE_ELEMENT (gst_element_get_type())
#DEFINE GST_ELEMENT(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GST_TYPE_ELEMENT, GstElement))
#DEFINE GST_ELEMENT_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GST_TYPE_ELEMENT, GstElementClass))
#DEFINE GST_IS_ELEMENT(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GST_TYPE_ELEMENT))
#DEFINE GST_IS_CLASS_ELEMENT(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GST_TYPE_ELEMENT))
#DEFINE GST_ELEMENT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GST_TYPE_ELEMENT, GstElementClass))
DECLARE FUNCTION gst_element_make_from_uri(BYVAL AS const GstURIType, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR) AS GstElement PTR
DECLARE FUNCTION gst_element_register(BYVAL AS GstPlugin PTR, BYVAL AS const gchar PTR, BYVAL AS guint, BYVAL AS GType) AS gboolean
DECLARE FUNCTION gst_element_state_change_return_get_name(BYVAL AS GstStateChangeReturn) AS const gchar PTR
DECLARE FUNCTION gst_element_state_get_name(BYVAL AS GstState) AS const gchar PTR
DECLARE SUB gst_element_abort_state(BYVAL AS GstElement PTR)
DECLARE FUNCTION gst_element_add_pad(BYVAL AS GstElement PTR, BYVAL AS GstPad PTR) AS gboolean
DECLARE FUNCTION gst_element_add_property_deep_notify_watch(BYVAL AS GstElement PTR, BYVAL AS const gchar PTR, BYVAL AS gboolean) AS gulong
DECLARE FUNCTION gst_element_add_property_notify_watch(BYVAL AS GstElement PTR, BYVAL AS const gchar PTR, BYVAL AS gboolean) AS gulong
DECLARE SUB gst_element_call_async(BYVAL AS GstElement PTR, BYVAL AS GstElementCallAsyncFunc, BYVAL AS gpointer, BYVAL AS GDestroyNotify)
DECLARE FUNCTION gst_element_change_state(BYVAL AS GstElement PTR, BYVAL AS GstStateChange) AS GstStateChangeReturn
DECLARE FUNCTION gst_element_continue_state(BYVAL AS GstElement PTR, BYVAL AS GstStateChangeReturn) AS GstStateChangeReturn
DECLARE SUB gst_element_create_all_pads(BYVAL AS GstElement PTR)
DECLARE FUNCTION gst_element_foreach_pad(BYVAL AS GstElement PTR, BYVAL AS GstElementForeachPadFunc, BYVAL AS gpointer) AS gboolean
DECLARE FUNCTION gst_element_foreach_sink_pad(BYVAL AS GstElement PTR, BYVAL AS GstElementForeachPadFunc, BYVAL AS gpointer) AS gboolean
DECLARE FUNCTION gst_element_foreach_src_pad(BYVAL AS GstElement PTR, BYVAL AS GstElementForeachPadFunc, BYVAL AS gpointer) AS gboolean
DECLARE FUNCTION gst_element_get_base_time(BYVAL AS GstElement PTR) AS GstClockTime
DECLARE FUNCTION gst_element_get_bus(BYVAL AS GstElement PTR) AS GstBus PTR
DECLARE FUNCTION gst_element_get_clock(BYVAL AS GstElement PTR) AS GstClock PTR
DECLARE FUNCTION gst_element_get_compatible_pad(BYVAL AS GstElement PTR, BYVAL AS GstPad PTR, BYVAL AS GstCaps PTR) AS GstPad PTR
DECLARE FUNCTION gst_element_get_compatible_pad_template(BYVAL AS GstElement PTR, BYVAL AS GstPadTemplate PTR) AS GstPadTemplate PTR
DECLARE FUNCTION gst_element_get_context(BYVAL AS GstElement PTR, BYVAL AS const gchar PTR) AS GstContext PTR
DECLARE FUNCTION gst_element_get_context_unlocked(BYVAL AS GstElement PTR, BYVAL AS const gchar PTR) AS GstContext PTR
DECLARE FUNCTION gst_element_get_contexts(BYVAL AS GstElement PTR) AS GList PTR
DECLARE FUNCTION gst_element_get_factory(BYVAL AS GstElement PTR) AS GstElementFactory PTR
DECLARE FUNCTION gst_element_get_metadata(BYVAL AS GstElement PTR, BYVAL AS const gchar PTR) AS const gchar PTR
DECLARE FUNCTION gst_element_get_pad_template(BYVAL AS GstElement PTR, BYVAL AS const gchar PTR) AS GstPadTemplate PTR
DECLARE FUNCTION gst_element_get_pad_template_list(BYVAL AS GstElement PTR) AS GList PTR
DECLARE FUNCTION gst_element_get_request_pad(BYVAL AS GstElement PTR, BYVAL AS const gchar PTR) AS GstPad PTR
DECLARE FUNCTION gst_element_get_start_time(BYVAL AS GstElement PTR) AS GstClockTime
DECLARE FUNCTION gst_element_get_state(BYVAL AS GstElement PTR, BYVAL AS GstState PTR, BYVAL AS GstState PTR, BYVAL AS GstClockTime) AS GstStateChangeReturn
DECLARE FUNCTION gst_element_get_static_pad(BYVAL AS GstElement PTR, BYVAL AS const gchar PTR) AS GstPad PTR
DECLARE FUNCTION gst_element_is_locked_state(BYVAL AS GstElement PTR) AS gboolean
DECLARE FUNCTION gst_element_iterate_pads(BYVAL AS GstElement PTR) AS GstIterator PTR
DECLARE FUNCTION gst_element_iterate_sink_pads(BYVAL AS GstElement PTR) AS GstIterator PTR
DECLARE FUNCTION gst_element_iterate_src_pads(BYVAL AS GstElement PTR) AS GstIterator PTR
DECLARE FUNCTION gst_element_link(BYVAL AS GstElement PTR, BYVAL AS GstElement PTR) AS gboolean
DECLARE FUNCTION gst_element_link_filtered(BYVAL AS GstElement PTR, BYVAL AS GstElement PTR, BYVAL AS GstCaps PTR) AS gboolean
DECLARE FUNCTION gst_element_link_many(BYVAL AS GstElement PTR, BYVAL AS GstElement PTR, ...) AS gboolean
DECLARE FUNCTION gst_element_link_pads(BYVAL AS GstElement PTR, BYVAL AS const gchar PTR, BYVAL AS GstElement PTR, BYVAL AS const gchar PTR) AS gboolean
DECLARE FUNCTION gst_element_link_pads_filtered(BYVAL AS GstElement PTR, BYVAL AS const gchar PTR, BYVAL AS GstElement PTR, BYVAL AS const gchar PTR, BYVAL AS GstCaps PTR) AS gboolean
DECLARE FUNCTION gst_element_link_pads_full(BYVAL AS GstElement PTR, BYVAL AS const gchar PTR, BYVAL AS GstElement PTR, BYVAL AS const gchar PTR, BYVAL AS GstPadLinkCheck) AS gboolean
DECLARE SUB gst_element_lost_state(BYVAL AS GstElement PTR)
DECLARE SUB gst_element_message_full(BYVAL AS GstElement PTR, BYVAL AS GstMessageType, BYVAL AS GQuark, BYVAL AS gint, BYVAL AS gchar PTR, BYVAL AS gchar PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS gint)
DECLARE SUB gst_element_message_full_with_details(BYVAL AS GstElement PTR, BYVAL AS GstMessageType, BYVAL AS GQuark, BYVAL AS gint, BYVAL AS gchar PTR, BYVAL AS gchar PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS gint, BYVAL AS GstStructure PTR)
DECLARE SUB gst_element_no_more_pads(BYVAL AS GstElement PTR)
DECLARE FUNCTION gst_element_post_message(BYVAL AS GstElement PTR, BYVAL AS GstMessage PTR) AS gboolean
DECLARE FUNCTION gst_element_provide_clock(BYVAL AS GstElement PTR) AS GstClock PTR
DECLARE FUNCTION gst_element_query(BYVAL AS GstElement PTR, BYVAL AS GstQuery PTR) AS gboolean
DECLARE FUNCTION gst_element_query_convert(BYVAL AS GstElement PTR, BYVAL AS GstFormat, BYVAL AS gint64, BYVAL AS GstFormat, BYVAL AS gint64 PTR) AS gboolean
DECLARE FUNCTION gst_element_query_duration(BYVAL AS GstElement PTR, BYVAL AS GstFormat, BYVAL AS gint64 PTR) AS gboolean
DECLARE FUNCTION gst_element_query_position(BYVAL AS GstElement PTR, BYVAL AS GstFormat, BYVAL AS gint64 PTR) AS gboolean
DECLARE SUB gst_element_release_request_pad(BYVAL AS GstElement PTR, BYVAL AS GstPad PTR)
DECLARE FUNCTION gst_element_remove_pad(BYVAL AS GstElement PTR, BYVAL AS GstPad PTR) AS gboolean
DECLARE SUB gst_element_remove_property_notify_watch(BYVAL AS GstElement PTR, BYVAL AS gulong)
DECLARE FUNCTION gst_element_request_pad(BYVAL AS GstElement PTR, BYVAL AS GstPadTemplate PTR, BYVAL AS const gchar PTR, BYVAL AS const GstCaps PTR) AS GstPad PTR
DECLARE FUNCTION gst_element_seek(BYVAL AS GstElement PTR, BYVAL AS gdouble, BYVAL AS GstFormat, BYVAL AS GstSeekFlags, BYVAL AS GstSeekType, BYVAL AS gint64, BYVAL AS GstSeekType, BYVAL AS gint64) AS gboolean
DECLARE FUNCTION gst_element_seek_simple(BYVAL AS GstElement PTR, BYVAL AS GstFormat, BYVAL AS GstSeekFlags, BYVAL AS gint64) AS gboolean
DECLARE FUNCTION gst_element_send_event(BYVAL AS GstElement PTR, BYVAL AS GstEvent PTR) AS gboolean
DECLARE SUB gst_element_set_base_time(BYVAL AS GstElement PTR, BYVAL AS GstClockTime)
DECLARE SUB gst_element_set_bus(BYVAL AS GstElement PTR, BYVAL AS GstBus PTR)
DECLARE FUNCTION gst_element_set_clock(BYVAL AS GstElement PTR, BYVAL AS GstClock PTR) AS gboolean
DECLARE SUB gst_element_set_context(BYVAL AS GstElement PTR, BYVAL AS GstContext PTR)
DECLARE FUNCTION gst_element_set_locked_state(BYVAL AS GstElement PTR, BYVAL AS gboolean) AS gboolean
DECLARE SUB gst_element_set_start_time(BYVAL AS GstElement PTR, BYVAL AS GstClockTime)
DECLARE FUNCTION gst_element_set_state(BYVAL AS GstElement PTR, BYVAL AS GstState) AS GstStateChangeReturn
DECLARE FUNCTION gst_element_sync_state_with_parent(BYVAL AS GstElement PTR) AS gboolean
DECLARE SUB gst_element_unlink(BYVAL AS GstElement PTR, BYVAL AS GstElement PTR)
DECLARE SUB gst_element_unlink_many(BYVAL AS GstElement PTR, BYVAL AS GstElement PTR, ...)
DECLARE SUB gst_element_unlink_pads(BYVAL AS GstElement PTR, BYVAL AS const gchar PTR, BYVAL AS GstElement PTR, BYVAL AS const gchar PTR)
TYPE GstElementCallAsyncFunc AS SUB CDECL(BYVAL AS GstElement PTR, BYVAL AS gpointer)
TYPE _GstElementClass
  AS GstObjectClass parent_class
  AS gpointer metadata
  AS GstElementFactory PTR elementfactory
  AS GList PTR padtemplates
  AS gint numpadtemplates
  AS guint32 pad_templ_cookie
  pad_added AS SUB CDECL(BYVAL AS GstElement PTR, BYVAL AS GstPad PTR)
  pad_removed AS SUB CDECL(BYVAL AS GstElement PTR, BYVAL AS GstPad PTR)
  no_more_pads AS SUB CDECL(BYVAL AS GstElement PTR)
  request_new_pad AS FUNCTION CDECL(BYVAL AS GstElement PTR, BYVAL AS GstPadTemplate PTR, BYVAL AS const gchar PTR, BYVAL AS const GstCaps PTR) AS GstPad PTR
  release_pad AS SUB CDECL(BYVAL AS GstElement PTR, BYVAL AS GstPad PTR)
  get_state AS FUNCTION CDECL(BYVAL AS GstElement PTR, BYVAL AS GstState PTR, BYVAL AS GstState PTR, BYVAL AS GstClockTime) AS GstStateChangeReturn
  set_state AS FUNCTION CDECL(BYVAL AS GstElement PTR, BYVAL AS GstState) AS GstStateChangeReturn
  change_state AS FUNCTION CDECL(BYVAL AS GstElement PTR, BYVAL AS GstStateChange) AS GstStateChangeReturn
  state_changed AS SUB CDECL(BYVAL AS GstElement PTR, BYVAL AS GstState, BYVAL AS GstState, BYVAL AS GstState)
  set_bus AS SUB CDECL(BYVAL AS GstElement PTR, BYVAL AS GstBus PTR)
  provide_clock AS FUNCTION CDECL(BYVAL AS GstElement PTR) AS GstClock PTR
  set_clock AS FUNCTION CDECL(BYVAL AS GstElement PTR, BYVAL AS GstClock PTR) AS gboolean
  send_event AS FUNCTION CDECL(BYVAL AS GstElement PTR, BYVAL AS GstEvent PTR) AS gboolean
  query AS FUNCTION CDECL(BYVAL AS GstElement PTR, BYVAL AS GstQuery PTR) AS gboolean
  post_message AS FUNCTION CDECL(BYVAL AS GstElement PTR, BYVAL AS GstMessage PTR) AS gboolean
  set_context AS SUB CDECL(BYVAL AS GstElement PTR, BYVAL AS GstContext PTR)
  AS gpointer _gst_reserved(17)
END TYPE
DECLARE SUB gst_element_class_add_metadata(BYVAL AS GstElementClass PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR)
DECLARE SUB gst_element_class_add_pad_template(BYVAL AS GstElementClass PTR, BYVAL AS GstPadTemplate PTR)
DECLARE SUB gst_element_class_add_static_metadata(BYVAL AS GstElementClass PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR)
DECLARE SUB gst_element_class_add_static_pad_template(BYVAL AS GstElementClass PTR, BYVAL AS GstStaticPadTemplate PTR)
DECLARE SUB gst_element_class_add_static_pad_template_with_gtype(BYVAL AS GstElementClass PTR, BYVAL AS GstStaticPadTemplate PTR, BYVAL AS GType)
DECLARE FUNCTION gst_element_class_get_metadata(BYVAL AS GstElementClass PTR, BYVAL AS const gchar PTR) AS const gchar PTR
DECLARE FUNCTION gst_element_class_get_pad_template(BYVAL AS GstElementClass PTR, BYVAL AS const gchar PTR) AS GstPadTemplate PTR
DECLARE FUNCTION gst_element_class_get_pad_template_list(BYVAL AS GstElementClass PTR) AS GList PTR
DECLARE SUB gst_element_class_set_metadata(BYVAL AS GstElementClass PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR)
DECLARE SUB gst_element_class_set_static_metadata(BYVAL AS GstElementClass PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR)
DECLARE FUNCTION gst_element_factory_get_type() AS GType
#DEFINE GST_TYPE_ELEMENT_FACTORY (gst_element_factory_get_type())
#DEFINE GST_ELEMENT_FACTORY(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GST_TYPE_ELEMENT_FACTORY, GstElementFactory))
#DEFINE GST_ELEMENT_FACTORY_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GST_TYPE_ELEMENT_FACTORY, GstElementFactoryClass))
#DEFINE GST_IS_ELEMENT_FACTORY(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GST_TYPE_ELEMENT_FACTORY))
#DEFINE GST_IS_CLASS_ELEMENT_FACTORY(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GST_TYPE_ELEMENT_FACTORY))
#DEFINE GST_ELEMENT_FACTORY_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GST_TYPE_ELEMENT_FACTORY, GstElementFactoryClass))
DECLARE FUNCTION gst_element_factory_find(BYVAL AS const gchar PTR) AS GstElementFactory PTR
DECLARE FUNCTION gst_element_factory_list_filter(BYVAL AS GList PTR, BYVAL AS const GstCaps PTR, BYVAL AS GstPadDirection, BYVAL AS gboolean) AS GList PTR
DECLARE FUNCTION gst_element_factory_list_get_elements(BYVAL AS GstElementFactoryListType, BYVAL AS GstRank) AS GList PTR
DECLARE FUNCTION gst_element_factory_make(BYVAL AS const gchar PTR, BYVAL AS const gchar PTR) AS GstElement PTR
DECLARE FUNCTION gst_element_factory_can_sink_all_caps(BYVAL AS GstElementFactory PTR, BYVAL AS const GstCaps PTR) AS gboolean
DECLARE FUNCTION gst_element_factory_can_sink_any_caps(BYVAL AS GstElementFactory PTR, BYVAL AS const GstCaps PTR) AS gboolean
DECLARE FUNCTION gst_element_factory_can_src_all_caps(BYVAL AS GstElementFactory PTR, BYVAL AS const GstCaps PTR) AS gboolean
DECLARE FUNCTION gst_element_factory_can_src_any_caps(BYVAL AS GstElementFactory PTR, BYVAL AS const GstCaps PTR) AS gboolean
DECLARE FUNCTION gst_element_factory_create(BYVAL AS GstElementFactory PTR, BYVAL AS const gchar PTR) AS GstElement PTR
DECLARE FUNCTION gst_element_factory_get_element_type(BYVAL AS GstElementFactory PTR) AS GType
DECLARE FUNCTION gst_element_factory_get_metadata(BYVAL AS GstElementFactory PTR, BYVAL AS const gchar PTR) AS const gchar PTR
DECLARE FUNCTION gst_element_factory_get_metadata_keys(BYVAL AS GstElementFactory PTR) AS gchar PTR PTR
DECLARE FUNCTION gst_element_factory_get_num_pad_templates(BYVAL AS GstElementFactory PTR) AS guint
DECLARE FUNCTION gst_element_factory_get_static_pad_templates(BYVAL AS GstElementFactory PTR) AS const GList PTR
DECLARE FUNCTION gst_element_factory_get_uri_protocols(BYVAL AS GstElementFactory PTR) AS const gchar* const PTR
DECLARE FUNCTION gst_element_factory_get_uri_type(BYVAL AS GstElementFactory PTR) AS GstURIType
DECLARE FUNCTION gst_element_factory_has_interface(BYVAL AS GstElementFactory PTR, BYVAL AS const gchar PTR) AS gboolean
DECLARE FUNCTION gst_element_factory_list_is_type(BYVAL AS GstElementFactory PTR, BYVAL AS GstElementFactoryListType) AS gboolean
TYPE GstElementForeachPadFunc AS FUNCTION CDECL(BYVAL AS GstElement PTR, BYVAL AS GstPad PTR, BYVAL AS gpointer) AS gboolean
TYPE _GstEvent
  AS GstMiniObject mini_object
  AS GstEventType type
  AS guint64 timestamp
  AS guint32 seqnum
END TYPE
DECLARE FUNCTION gst_event_new_buffer_size(BYVAL AS GstFormat, BYVAL AS gint64, BYVAL AS gint64, BYVAL AS gboolean) AS GstEvent PTR
DECLARE FUNCTION gst_event_new_caps(BYVAL AS GstCaps PTR) AS GstEvent PTR
DECLARE FUNCTION gst_event_new_custom(BYVAL AS GstEventType, BYVAL AS GstStructure PTR) AS GstEvent PTR
DECLARE FUNCTION gst_event_new_eos() AS GstEvent PTR
DECLARE FUNCTION gst_event_new_flush_start() AS GstEvent PTR
DECLARE FUNCTION gst_event_new_flush_stop(BYVAL AS gboolean) AS GstEvent PTR
DECLARE FUNCTION gst_event_new_gap(BYVAL AS GstClockTime, BYVAL AS GstClockTime) AS GstEvent PTR
DECLARE FUNCTION gst_event_new_latency(BYVAL AS GstClockTime) AS GstEvent PTR
DECLARE FUNCTION gst_event_new_navigation(BYVAL AS GstStructure PTR) AS GstEvent PTR
DECLARE FUNCTION gst_event_new_protection(BYVAL AS const gchar PTR, BYVAL AS GstBuffer PTR, BYVAL AS const gchar PTR) AS GstEvent PTR
DECLARE FUNCTION gst_event_new_qos(BYVAL AS GstQOSType, BYVAL AS gdouble, BYVAL AS GstClockTimeDiff, BYVAL AS GstClockTime) AS GstEvent PTR
DECLARE FUNCTION gst_event_new_reconfigure() AS GstEvent PTR
DECLARE FUNCTION gst_event_new_seek(BYVAL AS gdouble, BYVAL AS GstFormat, BYVAL AS GstSeekFlags, BYVAL AS GstSeekType, BYVAL AS gint64, BYVAL AS GstSeekType, BYVAL AS gint64) AS GstEvent PTR
DECLARE FUNCTION gst_event_new_segment(BYVAL AS const GstSegment PTR) AS GstEvent PTR
DECLARE FUNCTION gst_event_new_segment_done(BYVAL AS GstFormat, BYVAL AS gint64) AS GstEvent PTR
DECLARE FUNCTION gst_event_new_select_streams(BYVAL AS GList PTR) AS GstEvent PTR
DECLARE FUNCTION gst_event_new_sink_message(BYVAL AS const gchar PTR, BYVAL AS GstMessage PTR) AS GstEvent PTR
DECLARE FUNCTION gst_event_new_step(BYVAL AS GstFormat, BYVAL AS guint64, BYVAL AS gdouble, BYVAL AS gboolean, BYVAL AS gboolean) AS GstEvent PTR
DECLARE FUNCTION gst_event_new_stream_collection(BYVAL AS GstStreamCollection PTR) AS GstEvent PTR
DECLARE FUNCTION gst_event_new_stream_group_done(BYVAL AS guint) AS GstEvent PTR
DECLARE FUNCTION gst_event_new_stream_start(BYVAL AS const gchar PTR) AS GstEvent PTR
DECLARE FUNCTION gst_event_new_tag(BYVAL AS GstTagList PTR) AS GstEvent PTR
DECLARE FUNCTION gst_event_new_toc(BYVAL AS GstToc PTR, BYVAL AS gboolean) AS GstEvent PTR
DECLARE FUNCTION gst_event_new_toc_select(BYVAL AS const gchar PTR) AS GstEvent PTR
DECLARE SUB gst_event_copy_segment(BYVAL AS GstEvent PTR, BYVAL AS GstSegment PTR)
DECLARE FUNCTION gst_event_get_running_time_offset(BYVAL AS GstEvent PTR) AS gint64
DECLARE FUNCTION gst_event_get_seqnum(BYVAL AS GstEvent PTR) AS guint32
DECLARE FUNCTION gst_event_get_structure(BYVAL AS GstEvent PTR) AS const GstStructure PTR
DECLARE FUNCTION gst_event_has_name(BYVAL AS GstEvent PTR, BYVAL AS const gchar PTR) AS gboolean
DECLARE SUB gst_event_parse_buffer_size(BYVAL AS GstEvent PTR, BYVAL AS GstFormat PTR, BYVAL AS gint64 PTR, BYVAL AS gint64 PTR, BYVAL AS gboolean PTR)
DECLARE SUB gst_event_parse_caps(BYVAL AS GstEvent PTR, BYVAL AS GstCaps PTR PTR)
DECLARE SUB gst_event_parse_flush_stop(BYVAL AS GstEvent PTR, BYVAL AS gboolean PTR)
DECLARE SUB gst_event_parse_gap(BYVAL AS GstEvent PTR, BYVAL AS GstClockTime PTR, BYVAL AS GstClockTime PTR)
DECLARE FUNCTION gst_event_parse_group_id(BYVAL AS GstEvent PTR, BYVAL AS guint PTR) AS gboolean
DECLARE SUB gst_event_parse_latency(BYVAL AS GstEvent PTR, BYVAL AS GstClockTime PTR)
DECLARE SUB gst_event_parse_protection(BYVAL AS GstEvent PTR, BYVAL AS const gchar PTR PTR, BYVAL AS GstBuffer PTR PTR, BYVAL AS const gchar PTR PTR)
DECLARE SUB gst_event_parse_qos(BYVAL AS GstEvent PTR, BYVAL AS GstQOSType PTR, BYVAL AS gdouble PTR, BYVAL AS GstClockTimeDiff PTR, BYVAL AS GstClockTime PTR)
DECLARE SUB gst_event_parse_seek(BYVAL AS GstEvent PTR, BYVAL AS gdouble PTR, BYVAL AS GstFormat PTR, BYVAL AS GstSeekFlags PTR, BYVAL AS GstSeekType PTR, BYVAL AS gint64 PTR, BYVAL AS GstSeekType PTR, BYVAL AS gint64 PTR)
DECLARE SUB gst_event_parse_seek_trickmode_interval(BYVAL AS GstEvent PTR, BYVAL AS GstClockTime PTR)
DECLARE SUB gst_event_parse_segment(BYVAL AS GstEvent PTR, BYVAL AS const GstSegment PTR PTR)
DECLARE SUB gst_event_parse_segment_done(BYVAL AS GstEvent PTR, BYVAL AS GstFormat PTR, BYVAL AS gint64 PTR)
DECLARE SUB gst_event_parse_select_streams(BYVAL AS GstEvent PTR, BYVAL AS GList PTR PTR)
DECLARE SUB gst_event_parse_sink_message(BYVAL AS GstEvent PTR, BYVAL AS GstMessage PTR PTR)
DECLARE SUB gst_event_parse_step(BYVAL AS GstEvent PTR, BYVAL AS GstFormat PTR, BYVAL AS guint64 PTR, BYVAL AS gdouble PTR, BYVAL AS gboolean PTR, BYVAL AS gboolean PTR)
DECLARE SUB gst_event_parse_stream(BYVAL AS GstEvent PTR, BYVAL AS GstStream PTR PTR)
DECLARE SUB gst_event_parse_stream_collection(BYVAL AS GstEvent PTR, BYVAL AS GstStreamCollection PTR PTR)
DECLARE SUB gst_event_parse_stream_flags(BYVAL AS GstEvent PTR, BYVAL AS GstStreamFlags PTR)
DECLARE SUB gst_event_parse_stream_group_done(BYVAL AS GstEvent PTR, BYVAL AS guint PTR)
DECLARE SUB gst_event_parse_stream_start(BYVAL AS GstEvent PTR, BYVAL AS const gchar PTR PTR)
DECLARE SUB gst_event_parse_tag(BYVAL AS GstEvent PTR, BYVAL AS GstTagList PTR PTR)
DECLARE SUB gst_event_parse_toc(BYVAL AS GstEvent PTR, BYVAL AS GstToc PTR PTR, BYVAL AS gboolean PTR)
DECLARE SUB gst_event_parse_toc_select(BYVAL AS GstEvent PTR, BYVAL AS gchar PTR PTR)
DECLARE SUB gst_event_set_group_id(BYVAL AS GstEvent PTR, BYVAL AS guint)
DECLARE SUB gst_event_set_running_time_offset(BYVAL AS GstEvent PTR, BYVAL AS gint64)
DECLARE SUB gst_event_set_seek_trickmode_interval(BYVAL AS GstEvent PTR, BYVAL AS GstClockTime)
DECLARE SUB gst_event_set_seqnum(BYVAL AS GstEvent PTR, BYVAL AS guint32)
DECLARE SUB gst_event_set_stream(BYVAL AS GstEvent PTR, BYVAL AS GstStream PTR)
DECLARE SUB gst_event_set_stream_flags(BYVAL AS GstEvent PTR, BYVAL AS GstStreamFlags)
DECLARE FUNCTION gst_event_writable_structure(BYVAL AS GstEvent PTR) AS GstStructure PTR
DECLARE FUNCTION gst_event_type_get_type() AS GType
#DEFINE GST_TYPE_EVENT_TYPE (gst_event_type_get_type())
DECLARE FUNCTION gst_flagset_get_type() AS GType
#DEFINE GST_TYPE_FLAGSET (gst_flagset_get_type())
#DEFINE GST_FLAGSET(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GST_TYPE_FLAGSET, GstFlagSet))
#DEFINE GST_FLAGSET_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GST_TYPE_FLAGSET, Gst))
#DEFINE GST_IS_FLAGSET(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GST_TYPE_FLAGSET))
#DEFINE GST_IS_CLASS_FLAGSET(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GST_TYPE_FLAGSET))
#DEFINE GST_FLAGSET_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GST_TYPE_FLAGSET, Gst))
DECLARE FUNCTION gst_flagset_register(BYVAL AS GType) AS GType
TYPE _GstFormatDefinition
  AS GstFormat value
  AS const gchar PTR nick
  AS const gchar PTR description
  AS GQuark quark
END TYPE
DECLARE FUNCTION gst_flow_return_get_type() AS GType
#DEFINE GST_TYPE_FLOW_RETURN (gst_flow_return_get_type())
DECLARE FUNCTION gst_format_get_type() AS GType
#DEFINE GST_TYPE_FORMAT (gst_format_get_type())
DECLARE FUNCTION gst_fraction_get_type() AS GType
#DEFINE GST_TYPE_FRACTION (gst_fraction_get_type())
#DEFINE GST_FRACTION(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GST_TYPE_FRACTION, GstFraction))
#DEFINE GST_FRACTION_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GST_TYPE_FRACTION, Gst))
#DEFINE GST_IS_FRACTION(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GST_TYPE_FRACTION))
#DEFINE GST_IS_CLASS_FRACTION(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GST_TYPE_FRACTION))
#DEFINE GST_FRACTION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GST_TYPE_FRACTION, Gst))
DECLARE FUNCTION gst_fraction_range_get_type() AS GType
#DEFINE GST_TYPE_FRACTION_RANGE (gst_fraction_range_get_type())
#DEFINE GST_FRACTION_RANGE(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GST_TYPE_FRACTION_RANGE, GstFractionRange))
#DEFINE GST_FRACTION_RANGE_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GST_TYPE_FRACTION_RANGE, Gst))
#DEFINE GST_IS_FRACTION_RANGE(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GST_TYPE_FRACTION_RANGE))
#DEFINE GST_IS_CLASS_FRACTION_RANGE(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GST_TYPE_FRACTION_RANGE))
#DEFINE GST_FRACTION_RANGE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GST_TYPE_FRACTION_RANGE, Gst))
TYPE _GstGhostPad
  AS GstProxyPad pad
  AS GstGhostPadPrivate PTR priv
END TYPE
DECLARE FUNCTION gst_ghost_pad_get_type() AS GType
#DEFINE GST_TYPE_GHOST_PAD (gst_ghost_pad_get_type())
#DEFINE GST_GHOST_PAD(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GST_TYPE_GHOST_PAD, GstGhostPad))
#DEFINE GST_GHOST_PAD_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GST_TYPE_GHOST_PAD, GstGhostPadClass))
#DEFINE GST_IS_GHOST_PAD(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GST_TYPE_GHOST_PAD))
#DEFINE GST_IS_CLASS_GHOST_PAD(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GST_TYPE_GHOST_PAD))
#DEFINE GST_GHOST_PAD_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GST_TYPE_GHOST_PAD, GstGhostPadClass))
DECLARE FUNCTION gst_ghost_pad_new(BYVAL AS const gchar PTR, BYVAL AS GstPad PTR) AS GstPad PTR
DECLARE FUNCTION gst_ghost_pad_new_from_template(BYVAL AS const gchar PTR, BYVAL AS GstPad PTR, BYVAL AS GstPadTemplate PTR) AS GstPad PTR
DECLARE FUNCTION gst_ghost_pad_new_no_target(BYVAL AS const gchar PTR, BYVAL AS GstPadDirection) AS GstPad PTR
DECLARE FUNCTION gst_ghost_pad_new_no_target_from_template(BYVAL AS const gchar PTR, BYVAL AS GstPadTemplate PTR) AS GstPad PTR
DECLARE FUNCTION gst_ghost_pad_activate_mode_default(BYVAL AS GstPad PTR, BYVAL AS GstObject PTR, BYVAL AS GstPadMode, BYVAL AS gboolean) AS gboolean
DECLARE FUNCTION gst_ghost_pad_internal_activate_mode_default(BYVAL AS GstPad PTR, BYVAL AS GstObject PTR, BYVAL AS GstPadMode, BYVAL AS gboolean) AS gboolean
DECLARE FUNCTION gst_ghost_pad_construct(BYVAL AS GstGhostPad PTR) AS gboolean
DECLARE FUNCTION gst_ghost_pad_get_target(BYVAL AS GstGhostPad PTR) AS GstPad PTR
DECLARE FUNCTION gst_ghost_pad_set_target(BYVAL AS GstGhostPad PTR, BYVAL AS GstPad PTR) AS gboolean
TYPE _GstGhostPadClass
  AS GstProxyPadClass parent_class
  AS gpointer _gst_reserved(3)
END TYPE
DECLARE FUNCTION gst_int64_range_get_type() AS GType
#DEFINE GST_TYPE_INT64_RANGE (gst_int64_range_get_type())
#DEFINE GST_INT64_RANGE(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GST_TYPE_INT64_RANGE, GstInt64Range))
#DEFINE GST_INT64_RANGE_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GST_TYPE_INT64_RANGE, Gst))
#DEFINE GST_IS_INT64_RANGE(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GST_TYPE_INT64_RANGE))
#DEFINE GST_IS_CLASS_INT64_RANGE(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GST_TYPE_INT64_RANGE))
#DEFINE GST_INT64_RANGE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GST_TYPE_INT64_RANGE, Gst))
DECLARE FUNCTION gst_int_range_get_type() AS GType
#DEFINE GST_TYPE_INT_RANGE (gst_int_range_get_type())
#DEFINE GST_INT_RANGE(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GST_TYPE_INT_RANGE, GstIntRange))
#DEFINE GST_INT_RANGE_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GST_TYPE_INT_RANGE, Gst))
#DEFINE GST_IS_INT_RANGE(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GST_TYPE_INT_RANGE))
#DEFINE GST_IS_CLASS_INT_RANGE(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GST_TYPE_INT_RANGE))
#DEFINE GST_INT_RANGE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GST_TYPE_INT_RANGE, Gst))
TYPE _GstIterator
  AS GstIteratorCopyFunction copy
  AS GstIteratorNextFunction next
  AS GstIteratorItemFunction item
  AS GstIteratorResyncFunction resync
  AS GstIteratorFreeFunction free
  AS GstIterator PTR pushed
  AS GType type
  AS GMutex PTR lock
  AS guint32 cookie
  AS guint32 PTR master_cookie
  AS guint size
  AS gpointer _gst_reserved(3)
END TYPE
DECLARE FUNCTION gst_iterator_new(BYVAL AS guint, BYVAL AS GType, BYVAL AS GMutex PTR, BYVAL AS guint32 PTR, BYVAL AS GstIteratorCopyFunction, BYVAL AS GstIteratorNextFunction, BYVAL AS GstIteratorItemFunction, BYVAL AS GstIteratorResyncFunction, BYVAL AS GstIteratorFreeFunction) AS GstIterator PTR
DECLARE FUNCTION gst_iterator_new_list(BYVAL AS GType, BYVAL AS GMutex PTR, BYVAL AS guint32 PTR, BYVAL AS GList PTR PTR, BYVAL AS GObject PTR, BYVAL AS GstIteratorItemFunction) AS GstIterator PTR
DECLARE FUNCTION gst_iterator_new_single(BYVAL AS GType, BYVAL AS const GValue PTR) AS GstIterator PTR
DECLARE FUNCTION gst_iterator_copy(BYVAL AS const GstIterator PTR) AS GstIterator PTR
DECLARE FUNCTION gst_iterator_filter(BYVAL AS GstIterator PTR, BYVAL AS GCompareFunc, BYVAL AS const GValue PTR) AS GstIterator PTR
DECLARE FUNCTION gst_iterator_find_custom(BYVAL AS GstIterator PTR, BYVAL AS GCompareFunc, BYVAL AS GValue PTR, BYVAL AS gpointer) AS gboolean
DECLARE FUNCTION gst_iterator_fold(BYVAL AS GstIterator PTR, BYVAL AS GstIteratorFoldFunction, BYVAL AS GValue PTR, BYVAL AS gpointer) AS GstIteratorResult
DECLARE FUNCTION gst_iterator_foreach(BYVAL AS GstIterator PTR, BYVAL AS GstIteratorForeachFunction, BYVAL AS gpointer) AS GstIteratorResult
DECLARE SUB gst_iterator_free(BYVAL AS GstIterator PTR)
DECLARE FUNCTION gst_iterator_next(BYVAL AS GstIterator PTR, BYVAL AS GValue PTR) AS GstIteratorResult
DECLARE SUB gst_iterator_push(BYVAL AS GstIterator PTR, BYVAL AS GstIterator PTR)
DECLARE SUB gst_iterator_resync(BYVAL AS GstIterator PTR)
TYPE GstIteratorCopyFunction AS SUB CDECL(BYVAL AS const GstIterator PTR, BYVAL AS GstIterator PTR)
TYPE GstIteratorFoldFunction AS FUNCTION CDECL(BYVAL AS const GValue PTR, BYVAL AS GValue PTR, BYVAL AS gpointer) AS gboolean
TYPE GstIteratorForeachFunction AS SUB CDECL(BYVAL AS const GValue PTR, BYVAL AS gpointer)
TYPE GstIteratorFreeFunction AS SUB CDECL(BYVAL AS GstIterator PTR)
TYPE GstIteratorItemFunction AS FUNCTION CDECL(BYVAL AS GstIterator PTR, BYVAL AS const GValue PTR) AS GstIteratorItem
TYPE GstIteratorNextFunction AS FUNCTION CDECL(BYVAL AS GstIterator PTR, BYVAL AS GValue PTR) AS GstIteratorResult
TYPE GstIteratorResyncFunction AS SUB CDECL(BYVAL AS GstIterator PTR)
TYPE GstLogFunction AS SUB CDECL(BYVAL AS GstDebugCategory PTR, BYVAL AS GstDebugLevel, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS gint, BYVAL AS GObject PTR, BYVAL AS GstDebugMessage PTR, BYVAL AS gpointer)
TYPE _GstMapInfo
  AS GstMemory PTR memory
  AS GstMapFlags flags
  AS guint8 data(2)
  AS gsize size
  AS gsize maxsize
  AS gpointer user_data(3)
  AS gpointer _gst_reserved(3)
END TYPE
DECLARE FUNCTION gst_iterator_item_get_type() AS GType
#DEFINE GST_TYPE_ITERATOR_ITEM (gst_iterator_item_get_type())
DECLARE FUNCTION gst_iterator_result_get_type() AS GType
#DEFINE GST_TYPE_ITERATOR_RESULT (gst_iterator_result_get_type())
DECLARE FUNCTION gst_library_error_get_type() AS GType
#DEFINE GST_TYPE_LIBRARY_ERROR (gst_library_error_get_type())
TYPE _GstMemory
  AS GstMiniObject mini_object
  AS GstAllocator PTR allocator
  AS GstMemory PTR parent
  AS gsize maxsize
  AS gsize align
  AS gsize offset
  AS gsize size
END TYPE
DECLARE FUNCTION gst_memory_new_wrapped(BYVAL AS GstMemoryFlags, BYVAL AS gpointer, BYVAL AS gsize, BYVAL AS gsize, BYVAL AS gsize, BYVAL AS gpointer, BYVAL AS GDestroyNotify) AS GstMemory PTR
DECLARE FUNCTION gst_memory_copy(BYVAL AS GstMemory PTR, BYVAL AS gssize, BYVAL AS gssize) AS GstMemory PTR
DECLARE FUNCTION gst_memory_get_sizes(BYVAL AS GstMemory PTR, BYVAL AS gsize PTR, BYVAL AS gsize PTR) AS gsize
DECLARE SUB gst_memory_init(BYVAL AS GstMemory PTR, BYVAL AS GstMemoryFlags, BYVAL AS GstAllocator PTR, BYVAL AS GstMemory PTR, BYVAL AS gsize, BYVAL AS gsize, BYVAL AS gsize, BYVAL AS gsize)
DECLARE FUNCTION gst_memory_is_span(BYVAL AS GstMemory PTR, BYVAL AS GstMemory PTR, BYVAL AS gsize PTR) AS gboolean
DECLARE FUNCTION gst_memory_is_type(BYVAL AS GstMemory PTR, BYVAL AS const gchar PTR) AS gboolean
DECLARE FUNCTION gst_memory_make_mapped(BYVAL AS GstMemory PTR, BYVAL AS GstMapInfo PTR, BYVAL AS GstMapFlags) AS GstMemory PTR
DECLARE FUNCTION gst_memory_map(BYVAL AS GstMemory PTR, BYVAL AS GstMapInfo PTR, BYVAL AS GstMapFlags) AS gboolean
DECLARE SUB gst_memory_resize(BYVAL AS GstMemory PTR, BYVAL AS gssize, BYVAL AS gsize)
DECLARE FUNCTION gst_memory_share(BYVAL AS GstMemory PTR, BYVAL AS gssize, BYVAL AS gssize) AS GstMemory PTR
DECLARE SUB gst_memory_unmap(BYVAL AS GstMemory PTR, BYVAL AS GstMapInfo PTR)
TYPE GstMemoryCopyFunction AS FUNCTION CDECL(BYVAL AS GstMemory PTR, BYVAL AS gssize, BYVAL AS gssize) AS GstMemory PTR
TYPE GstMemoryIsSpanFunction AS FUNCTION CDECL(BYVAL AS GstMemory PTR, BYVAL AS GstMemory PTR, BYVAL AS gsize PTR) AS gboolean
TYPE GstMemoryMapFullFunction AS FUNCTION CDECL(BYVAL AS GstMemory PTR, BYVAL AS GstMapInfo PTR, BYVAL AS gsize) AS gpointer
TYPE GstMemoryMapFunction AS FUNCTION CDECL(BYVAL AS GstMemory PTR, BYVAL AS gsize, BYVAL AS GstMapFlags) AS gpointer
TYPE GstMemoryShareFunction AS FUNCTION CDECL(BYVAL AS GstMemory PTR, BYVAL AS gssize, BYVAL AS gssize) AS GstMemory PTR
TYPE GstMemoryUnmapFullFunction AS SUB CDECL(BYVAL AS GstMemory PTR, BYVAL AS GstMapInfo PTR)
TYPE GstMemoryUnmapFunction AS SUB CDECL(BYVAL AS GstMemory PTR)
TYPE _GstMessage
  AS GstMiniObject mini_object
  AS GstMessageType type
  AS guint64 timestamp
  AS GstObject PTR src
  AS guint32 seqnum
  AS GMutex lock
  AS GCond cond
END TYPE
DECLARE FUNCTION gst_message_new_application(BYVAL AS GstObject PTR, BYVAL AS GstStructure PTR) AS GstMessage PTR
DECLARE FUNCTION gst_message_new_async_done(BYVAL AS GstObject PTR, BYVAL AS GstClockTime) AS GstMessage PTR
DECLARE FUNCTION gst_message_new_async_start(BYVAL AS GstObject PTR) AS GstMessage PTR
DECLARE FUNCTION gst_message_new_buffering(BYVAL AS GstObject PTR, BYVAL AS gint) AS GstMessage PTR
DECLARE FUNCTION gst_message_new_clock_lost(BYVAL AS GstObject PTR, BYVAL AS GstClock PTR) AS GstMessage PTR
DECLARE FUNCTION gst_message_new_clock_provide(BYVAL AS GstObject PTR, BYVAL AS GstClock PTR, BYVAL AS gboolean) AS GstMessage PTR
DECLARE FUNCTION gst_message_new_custom(BYVAL AS GstMessageType, BYVAL AS GstObject PTR, BYVAL AS GstStructure PTR) AS GstMessage PTR
DECLARE FUNCTION gst_message_new_device_added(BYVAL AS GstObject PTR, BYVAL AS GstDevice PTR) AS GstMessage PTR
DECLARE FUNCTION gst_message_new_device_changed(BYVAL AS GstObject PTR, BYVAL AS GstDevice PTR, BYVAL AS GstDevice PTR) AS GstMessage PTR
DECLARE FUNCTION gst_message_new_device_removed(BYVAL AS GstObject PTR, BYVAL AS GstDevice PTR) AS GstMessage PTR
DECLARE FUNCTION gst_message_new_duration_changed(BYVAL AS GstObject PTR) AS GstMessage PTR
DECLARE FUNCTION gst_message_new_element(BYVAL AS GstObject PTR, BYVAL AS GstStructure PTR) AS GstMessage PTR
DECLARE FUNCTION gst_message_new_eos(BYVAL AS GstObject PTR) AS GstMessage PTR
DECLARE FUNCTION gst_message_new_error(BYVAL AS GstObject PTR, BYVAL AS GError PTR, BYVAL AS const gchar PTR) AS GstMessage PTR
DECLARE FUNCTION gst_message_new_error_with_details(BYVAL AS GstObject PTR, BYVAL AS GError PTR, BYVAL AS const gchar PTR, BYVAL AS GstStructure PTR) AS GstMessage PTR
DECLARE FUNCTION gst_message_new_have_context(BYVAL AS GstObject PTR, BYVAL AS GstContext PTR) AS GstMessage PTR
DECLARE FUNCTION gst_message_new_info(BYVAL AS GstObject PTR, BYVAL AS GError PTR, BYVAL AS const gchar PTR) AS GstMessage PTR
DECLARE FUNCTION gst_message_new_info_with_details(BYVAL AS GstObject PTR, BYVAL AS GError PTR, BYVAL AS const gchar PTR, BYVAL AS GstStructure PTR) AS GstMessage PTR
DECLARE FUNCTION gst_message_new_latency(BYVAL AS GstObject PTR) AS GstMessage PTR
DECLARE FUNCTION gst_message_new_need_context(BYVAL AS GstObject PTR, BYVAL AS const gchar PTR) AS GstMessage PTR
DECLARE FUNCTION gst_message_new_new_clock(BYVAL AS GstObject PTR, BYVAL AS GstClock PTR) AS GstMessage PTR
DECLARE FUNCTION gst_message_new_progress(BYVAL AS GstObject PTR, BYVAL AS GstProgressType, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR) AS GstMessage PTR
DECLARE FUNCTION gst_message_new_property_notify(BYVAL AS GstObject PTR, BYVAL AS const gchar PTR, BYVAL AS GValue PTR) AS GstMessage PTR
DECLARE FUNCTION gst_message_new_qos(BYVAL AS GstObject PTR, BYVAL AS gboolean, BYVAL AS guint64, BYVAL AS guint64, BYVAL AS guint64, BYVAL AS guint64) AS GstMessage PTR
DECLARE FUNCTION gst_message_new_redirect(BYVAL AS GstObject PTR, BYVAL AS const gchar PTR, BYVAL AS GstTagList PTR, BYVAL AS const GstStructure PTR) AS GstMessage PTR
DECLARE FUNCTION gst_message_new_request_state(BYVAL AS GstObject PTR, BYVAL AS GstState) AS GstMessage PTR
DECLARE FUNCTION gst_message_new_reset_time(BYVAL AS GstObject PTR, BYVAL AS GstClockTime) AS GstMessage PTR
DECLARE FUNCTION gst_message_new_segment_done(BYVAL AS GstObject PTR, BYVAL AS GstFormat, BYVAL AS gint64) AS GstMessage PTR
DECLARE FUNCTION gst_message_new_segment_start(BYVAL AS GstObject PTR, BYVAL AS GstFormat, BYVAL AS gint64) AS GstMessage PTR
DECLARE FUNCTION gst_message_new_state_changed(BYVAL AS GstObject PTR, BYVAL AS GstState, BYVAL AS GstState, BYVAL AS GstState) AS GstMessage PTR
DECLARE FUNCTION gst_message_new_state_dirty(BYVAL AS GstObject PTR) AS GstMessage PTR
DECLARE FUNCTION gst_message_new_step_done(BYVAL AS GstObject PTR, BYVAL AS GstFormat, BYVAL AS guint64, BYVAL AS gdouble, BYVAL AS gboolean, BYVAL AS gboolean, BYVAL AS guint64, BYVAL AS gboolean) AS GstMessage PTR
DECLARE FUNCTION gst_message_new_step_start(BYVAL AS GstObject PTR, BYVAL AS gboolean, BYVAL AS GstFormat, BYVAL AS guint64, BYVAL AS gdouble, BYVAL AS gboolean, BYVAL AS gboolean) AS GstMessage PTR
DECLARE FUNCTION gst_message_new_stream_collection(BYVAL AS GstObject PTR, BYVAL AS GstStreamCollection PTR) AS GstMessage PTR
DECLARE FUNCTION gst_message_new_stream_start(BYVAL AS GstObject PTR) AS GstMessage PTR
DECLARE FUNCTION gst_message_new_stream_status(BYVAL AS GstObject PTR, BYVAL AS GstStreamStatusType, BYVAL AS GstElement PTR) AS GstMessage PTR
DECLARE FUNCTION gst_message_new_streams_selected(BYVAL AS GstObject PTR, BYVAL AS GstStreamCollection PTR) AS GstMessage PTR
DECLARE FUNCTION gst_message_new_structure_change(BYVAL AS GstObject PTR, BYVAL AS GstStructureChangeType, BYVAL AS GstElement PTR, BYVAL AS gboolean) AS GstMessage PTR
DECLARE FUNCTION gst_message_new_tag(BYVAL AS GstObject PTR, BYVAL AS GstTagList PTR) AS GstMessage PTR
DECLARE FUNCTION gst_message_new_toc(BYVAL AS GstObject PTR, BYVAL AS GstToc PTR, BYVAL AS gboolean) AS GstMessage PTR
DECLARE FUNCTION gst_message_new_warning(BYVAL AS GstObject PTR, BYVAL AS GError PTR, BYVAL AS const gchar PTR) AS GstMessage PTR
DECLARE FUNCTION gst_message_new_warning_with_details(BYVAL AS GstObject PTR, BYVAL AS GError PTR, BYVAL AS const gchar PTR, BYVAL AS GstStructure PTR) AS GstMessage PTR
DECLARE SUB gst_message_add_redirect_entry(BYVAL AS GstMessage PTR, BYVAL AS const gchar PTR, BYVAL AS GstTagList PTR, BYVAL AS const GstStructure PTR)
DECLARE FUNCTION gst_message_get_num_redirect_entries(BYVAL AS GstMessage PTR) AS gsize
DECLARE FUNCTION gst_message_get_seqnum(BYVAL AS GstMessage PTR) AS guint32
DECLARE FUNCTION gst_message_get_stream_status_object(BYVAL AS GstMessage PTR) AS const GValue PTR
DECLARE FUNCTION gst_message_get_structure(BYVAL AS GstMessage PTR) AS const GstStructure PTR
DECLARE FUNCTION gst_message_has_name(BYVAL AS GstMessage PTR, BYVAL AS const gchar PTR) AS gboolean
DECLARE SUB gst_message_parse_async_done(BYVAL AS GstMessage PTR, BYVAL AS GstClockTime PTR)
DECLARE SUB gst_message_parse_buffering(BYVAL AS GstMessage PTR, BYVAL AS gint PTR)
DECLARE SUB gst_message_parse_buffering_stats(BYVAL AS GstMessage PTR, BYVAL AS GstBufferingMode PTR, BYVAL AS gint PTR, BYVAL AS gint PTR, BYVAL AS gint64 PTR)
DECLARE SUB gst_message_parse_clock_lost(BYVAL AS GstMessage PTR, BYVAL AS GstClock PTR PTR)
DECLARE SUB gst_message_parse_clock_provide(BYVAL AS GstMessage PTR, BYVAL AS GstClock PTR PTR, BYVAL AS gboolean PTR)
DECLARE FUNCTION gst_message_parse_context_type(BYVAL AS GstMessage PTR, BYVAL AS const gchar PTR PTR) AS gboolean
DECLARE SUB gst_message_parse_device_added(BYVAL AS GstMessage PTR, BYVAL AS GstDevice PTR PTR)
DECLARE SUB gst_message_parse_device_changed(BYVAL AS GstMessage PTR, BYVAL AS GstDevice PTR PTR, BYVAL AS GstDevice PTR PTR)
DECLARE SUB gst_message_parse_device_removed(BYVAL AS GstMessage PTR, BYVAL AS GstDevice PTR PTR)
DECLARE SUB gst_message_parse_error(BYVAL AS GstMessage PTR, BYVAL AS GError PTR PTR, BYVAL AS gchar PTR PTR)
DECLARE SUB gst_message_parse_error_details(BYVAL AS GstMessage PTR, BYVAL AS const GstStructure PTR PTR)
DECLARE FUNCTION gst_message_parse_group_id(BYVAL AS GstMessage PTR, BYVAL AS guint PTR) AS gboolean
DECLARE SUB gst_message_parse_have_context(BYVAL AS GstMessage PTR, BYVAL AS GstContext PTR PTR)
DECLARE SUB gst_message_parse_info(BYVAL AS GstMessage PTR, BYVAL AS GError PTR PTR, BYVAL AS gchar PTR PTR)
DECLARE SUB gst_message_parse_info_details(BYVAL AS GstMessage PTR, BYVAL AS const GstStructure PTR PTR)
DECLARE SUB gst_message_parse_new_clock(BYVAL AS GstMessage PTR, BYVAL AS GstClock PTR PTR)
DECLARE SUB gst_message_parse_progress(BYVAL AS GstMessage PTR, BYVAL AS GstProgressType PTR, BYVAL AS gchar PTR PTR, BYVAL AS gchar PTR PTR)
DECLARE SUB gst_message_parse_property_notify(BYVAL AS GstMessage PTR, BYVAL AS GstObject PTR PTR, BYVAL AS const gchar PTR PTR, BYVAL AS const GValue PTR PTR)
DECLARE SUB gst_message_parse_qos(BYVAL AS GstMessage PTR, BYVAL AS gboolean PTR, BYVAL AS guint64 PTR, BYVAL AS guint64 PTR, BYVAL AS guint64 PTR, BYVAL AS guint64 PTR)
DECLARE SUB gst_message_parse_qos_stats(BYVAL AS GstMessage PTR, BYVAL AS GstFormat PTR, BYVAL AS guint64 PTR, BYVAL AS guint64 PTR)
DECLARE SUB gst_message_parse_qos_values(BYVAL AS GstMessage PTR, BYVAL AS gint64 PTR, BYVAL AS gdouble PTR, BYVAL AS gint PTR)
DECLARE SUB gst_message_parse_redirect_entry(BYVAL AS GstMessage PTR, BYVAL AS gsize, BYVAL AS const gchar PTR PTR, BYVAL AS GstTagList PTR PTR, BYVAL AS const GstStructure PTR PTR)
DECLARE SUB gst_message_parse_request_state(BYVAL AS GstMessage PTR, BYVAL AS GstState PTR)
DECLARE SUB gst_message_parse_reset_time(BYVAL AS GstMessage PTR, BYVAL AS GstClockTime PTR)
DECLARE SUB gst_message_parse_segment_done(BYVAL AS GstMessage PTR, BYVAL AS GstFormat PTR, BYVAL AS gint64 PTR)
DECLARE SUB gst_message_parse_segment_start(BYVAL AS GstMessage PTR, BYVAL AS GstFormat PTR, BYVAL AS gint64 PTR)
DECLARE SUB gst_message_parse_state_changed(BYVAL AS GstMessage PTR, BYVAL AS GstState PTR, BYVAL AS GstState PTR, BYVAL AS GstState PTR)
DECLARE SUB gst_message_parse_step_done(BYVAL AS GstMessage PTR, BYVAL AS GstFormat PTR, BYVAL AS guint64 PTR, BYVAL AS gdouble PTR, BYVAL AS gboolean PTR, BYVAL AS gboolean PTR, BYVAL AS guint64 PTR, BYVAL AS gboolean PTR)
DECLARE SUB gst_message_parse_step_start(BYVAL AS GstMessage PTR, BYVAL AS gboolean PTR, BYVAL AS GstFormat PTR, BYVAL AS guint64 PTR, BYVAL AS gdouble PTR, BYVAL AS gboolean PTR, BYVAL AS gboolean PTR)
DECLARE SUB gst_message_parse_stream_collection(BYVAL AS GstMessage PTR, BYVAL AS GstStreamCollection PTR PTR)
DECLARE SUB gst_message_parse_stream_status(BYVAL AS GstMessage PTR, BYVAL AS GstStreamStatusType PTR, BYVAL AS GstElement PTR PTR)
DECLARE SUB gst_message_parse_streams_selected(BYVAL AS GstMessage PTR, BYVAL AS GstStreamCollection PTR PTR)
DECLARE SUB gst_message_parse_structure_change(BYVAL AS GstMessage PTR, BYVAL AS GstStructureChangeType PTR, BYVAL AS GstElement PTR PTR, BYVAL AS gboolean PTR)
DECLARE SUB gst_message_parse_tag(BYVAL AS GstMessage PTR, BYVAL AS GstTagList PTR PTR)
DECLARE SUB gst_message_parse_toc(BYVAL AS GstMessage PTR, BYVAL AS GstToc PTR PTR, BYVAL AS gboolean PTR)
DECLARE SUB gst_message_parse_warning(BYVAL AS GstMessage PTR, BYVAL AS GError PTR PTR, BYVAL AS gchar PTR PTR)
DECLARE SUB gst_message_parse_warning_details(BYVAL AS GstMessage PTR, BYVAL AS const GstStructure PTR PTR)
DECLARE SUB gst_message_set_buffering_stats(BYVAL AS GstMessage PTR, BYVAL AS GstBufferingMode, BYVAL AS gint, BYVAL AS gint, BYVAL AS gint64)
DECLARE SUB gst_message_set_group_id(BYVAL AS GstMessage PTR, BYVAL AS guint)
DECLARE SUB gst_message_set_qos_stats(BYVAL AS GstMessage PTR, BYVAL AS GstFormat, BYVAL AS guint64, BYVAL AS guint64)
DECLARE SUB gst_message_set_qos_values(BYVAL AS GstMessage PTR, BYVAL AS gint64, BYVAL AS gdouble, BYVAL AS gint)
DECLARE SUB gst_message_set_seqnum(BYVAL AS GstMessage PTR, BYVAL AS guint32)
DECLARE SUB gst_message_set_stream_status_object(BYVAL AS GstMessage PTR, BYVAL AS const GValue PTR)
DECLARE SUB gst_message_streams_selected_add(BYVAL AS GstMessage PTR, BYVAL AS GstStream PTR)
DECLARE FUNCTION gst_message_streams_selected_get_size(BYVAL AS GstMessage PTR) AS guint
DECLARE FUNCTION gst_message_streams_selected_get_stream(BYVAL AS GstMessage PTR, BYVAL AS guint) AS GstStream PTR
DECLARE FUNCTION gst_message_writable_structure(BYVAL AS GstMessage PTR) AS GstStructure PTR
TYPE _GstMeta
  AS GstMetaFlags flags
  AS const GstMetaInfo PTR info
END TYPE
DECLARE FUNCTION gst_meta_compare_seqnum(BYVAL AS const GstMeta PTR, BYVAL AS const GstMeta PTR) AS gint
DECLARE FUNCTION gst_meta_get_seqnum(BYVAL AS const GstMeta PTR) AS guint64
DECLARE FUNCTION gst_meta_api_type_get_tags(BYVAL AS GType) AS const gchar* const PTR
DECLARE FUNCTION gst_meta_api_type_has_tag(BYVAL AS GType, BYVAL AS GQuark) AS gboolean
DECLARE FUNCTION gst_meta_api_type_register(BYVAL AS const gchar PTR, BYVAL AS const gchar PTR PTR) AS GType
DECLARE FUNCTION gst_meta_get_info(BYVAL AS const gchar PTR) AS const GstMetaInfo PTR
DECLARE FUNCTION gst_meta_register(BYVAL AS GType, BYVAL AS const gchar PTR, BYVAL AS gsize, BYVAL AS GstMetaInitFunction, BYVAL AS GstMetaFreeFunction, BYVAL AS GstMetaTransformFunction) AS const GstMetaInfo PTR
TYPE GstMetaFreeFunction AS SUB CDECL(BYVAL AS GstMeta PTR, BYVAL AS GstBuffer PTR)
TYPE _GstMetaInfo
  AS GType api
  AS GType type
  AS gsize size
  AS GstMetaInitFunction init_func
  AS GstMetaFreeFunction free_func
  AS GstMetaTransformFunction transform_func
END TYPE
TYPE GstMetaInitFunction AS FUNCTION CDECL(BYVAL AS GstMeta PTR, BYVAL AS gpointer, BYVAL AS GstBuffer PTR) AS gboolean
TYPE _GstMetaTransformCopy
  AS gboolean region
  AS gsize offset
  AS gsize size
END TYPE
TYPE GstMetaTransformFunction AS FUNCTION CDECL(BYVAL AS GstBuffer PTR, BYVAL AS GstMeta PTR, BYVAL AS GstBuffer PTR, BYVAL AS GQuark, BYVAL AS gpointer) AS gboolean
TYPE _GstMiniObject
  AS GType type
  AS gint refcount
  AS gint lockstate
  AS guint flags
  AS GstMiniObjectCopyFunction copy
  AS GstMiniObjectDisposeFunction dispose
  AS GstMiniObjectFreeFunction free
  AS guint priv_uint
  AS gpointer priv_pointer
END TYPE
DECLARE SUB gst_mini_object_add_parent(BYVAL AS GstMiniObject PTR, BYVAL AS GstMiniObject PTR)
DECLARE FUNCTION gst_mini_object_copy(BYVAL AS const GstMiniObject PTR) AS GstMiniObject PTR
DECLARE FUNCTION gst_mini_object_get_qdata(BYVAL AS GstMiniObject PTR, BYVAL AS GQuark) AS gpointer
DECLARE SUB gst_mini_object_init(BYVAL AS GstMiniObject PTR, BYVAL AS guint, BYVAL AS GType, BYVAL AS GstMiniObjectCopyFunction, BYVAL AS GstMiniObjectDisposeFunction, BYVAL AS GstMiniObjectFreeFunction)
DECLARE FUNCTION gst_mini_object_is_writable(BYVAL AS const GstMiniObject PTR) AS gboolean
DECLARE FUNCTION gst_mini_object_lock(BYVAL AS GstMiniObject PTR, BYVAL AS GstLockFlags) AS gboolean
DECLARE FUNCTION gst_mini_object_make_writable(BYVAL AS GstMiniObject PTR) AS GstMiniObject PTR
DECLARE FUNCTION gst_mini_object_ref(BYVAL AS GstMiniObject PTR) AS GstMiniObject PTR
DECLARE SUB gst_mini_object_remove_parent(BYVAL AS GstMiniObject PTR, BYVAL AS GstMiniObject PTR)
DECLARE SUB gst_mini_object_set_qdata(BYVAL AS GstMiniObject PTR, BYVAL AS GQuark, BYVAL AS gpointer, BYVAL AS GDestroyNotify)
DECLARE FUNCTION gst_mini_object_steal_qdata(BYVAL AS GstMiniObject PTR, BYVAL AS GQuark) AS gpointer
DECLARE SUB gst_mini_object_unlock(BYVAL AS GstMiniObject PTR, BYVAL AS GstLockFlags)
DECLARE SUB gst_mini_object_unref(BYVAL AS GstMiniObject PTR)
DECLARE SUB gst_mini_object_weak_ref(BYVAL AS GstMiniObject PTR, BYVAL AS GstMiniObjectNotify, BYVAL AS gpointer)
DECLARE SUB gst_mini_object_weak_unref(BYVAL AS GstMiniObject PTR, BYVAL AS GstMiniObjectNotify, BYVAL AS gpointer)
DECLARE FUNCTION gst_mini_object_replace(BYVAL AS GstMiniObject PTR PTR, BYVAL AS GstMiniObject PTR) AS gboolean
DECLARE FUNCTION gst_mini_object_steal(BYVAL AS GstMiniObject PTR PTR) AS GstMiniObject PTR
DECLARE FUNCTION gst_mini_object_take(BYVAL AS GstMiniObject PTR PTR, BYVAL AS GstMiniObject PTR) AS gboolean
TYPE GstMiniObjectCopyFunction AS FUNCTION CDECL(BYVAL AS const GstMiniObject PTR) AS GstMiniObject PTR
TYPE GstMiniObjectDisposeFunction AS FUNCTION CDECL(BYVAL AS GstMiniObject PTR) AS gboolean
TYPE GstMiniObjectFreeFunction AS SUB CDECL(BYVAL AS GstMiniObject PTR)
TYPE GstMiniObjectNotify AS SUB CDECL(BYVAL AS gpointer, BYVAL AS GstMiniObject PTR)
TYPE _GstObject
  AS GInitiallyUnowned object
  AS GMutex lock
  AS gchar PTR name
  AS GstObject PTR parent
  AS guint32 flags
  AS GList PTR control_bindings
  AS guint64 control_rate
  AS guint64 last_sync
  AS gpointer _gst_reserved
END TYPE
DECLARE FUNCTION gst_object_get_type() AS GType
#DEFINE GST_TYPE_OBJECT (gst_object_get_type())
#DEFINE GST_OBJECT(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GST_TYPE_OBJECT, GstObject))
#DEFINE GST_OBJECT_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GST_TYPE_OBJECT, GstObjectClass))
#DEFINE GST_IS_OBJECT(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GST_TYPE_OBJECT))
#DEFINE GST_IS_CLASS_OBJECT(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GST_TYPE_OBJECT))
#DEFINE GST_OBJECT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GST_TYPE_OBJECT, GstObjectClass))
DECLARE FUNCTION gst_object_check_uniqueness(BYVAL AS GList PTR, BYVAL AS const gchar PTR) AS gboolean
DECLARE SUB gst_object_default_deep_notify(BYVAL AS GObject PTR, BYVAL AS GstObject PTR, BYVAL AS GParamSpec PTR, BYVAL AS gchar PTR PTR)
DECLARE FUNCTION gst_object_ref_sink(BYVAL AS gpointer) AS gpointer
DECLARE FUNCTION gst_object_replace(BYVAL AS GstObject PTR PTR, BYVAL AS GstObject PTR) AS gboolean
DECLARE FUNCTION gst_object_add_control_binding(BYVAL AS GstObject PTR, BYVAL AS GstControlBinding PTR) AS gboolean
DECLARE SUB gst_object_default_error(BYVAL AS GstObject PTR, BYVAL AS const GError PTR, BYVAL AS const gchar PTR)
DECLARE FUNCTION gst_object_get_control_binding(BYVAL AS GstObject PTR, BYVAL AS const gchar PTR) AS GstControlBinding PTR
DECLARE FUNCTION gst_object_get_control_rate(BYVAL AS GstObject PTR) AS GstClockTime
DECLARE FUNCTION gst_object_get_g_value_array(BYVAL AS GstObject PTR, BYVAL AS const gchar PTR, BYVAL AS GstClockTime, BYVAL AS GstClockTime, BYVAL AS guint, BYVAL AS GValue PTR) AS gboolean
DECLARE FUNCTION gst_object_get_name(BYVAL AS GstObject PTR) AS gchar PTR
DECLARE FUNCTION gst_object_get_parent(BYVAL AS GstObject PTR) AS GstObject PTR
DECLARE FUNCTION gst_object_get_path_string(BYVAL AS GstObject PTR) AS gchar PTR
DECLARE FUNCTION gst_object_get_value(BYVAL AS GstObject PTR, BYVAL AS const gchar PTR, BYVAL AS GstClockTime) AS GValue PTR
DECLARE FUNCTION gst_object_get_value_array(BYVAL AS GstObject PTR, BYVAL AS const gchar PTR, BYVAL AS GstClockTime, BYVAL AS GstClockTime, BYVAL AS guint, BYVAL AS gpointer) AS gboolean
DECLARE FUNCTION gst_object_has_active_control_bindings(BYVAL AS GstObject PTR) AS gboolean
DECLARE FUNCTION gst_object_has_ancestor(BYVAL AS GstObject PTR, BYVAL AS GstObject PTR) AS gboolean
DECLARE FUNCTION gst_object_has_as_ancestor(BYVAL AS GstObject PTR, BYVAL AS GstObject PTR) AS gboolean
DECLARE FUNCTION gst_object_has_as_parent(BYVAL AS GstObject PTR, BYVAL AS GstObject PTR) AS gboolean
DECLARE FUNCTION gst_object_ref(BYVAL AS gpointer) AS gpointer
DECLARE FUNCTION gst_object_remove_control_binding(BYVAL AS GstObject PTR, BYVAL AS GstControlBinding PTR) AS gboolean
DECLARE SUB gst_object_set_control_binding_disabled(BYVAL AS GstObject PTR, BYVAL AS const gchar PTR, BYVAL AS gboolean)
DECLARE SUB gst_object_set_control_bindings_disabled(BYVAL AS GstObject PTR, BYVAL AS gboolean)
DECLARE SUB gst_object_set_control_rate(BYVAL AS GstObject PTR, BYVAL AS GstClockTime)
DECLARE FUNCTION gst_object_set_name(BYVAL AS GstObject PTR, BYVAL AS const gchar PTR) AS gboolean
DECLARE FUNCTION gst_object_set_parent(BYVAL AS GstObject PTR, BYVAL AS GstObject PTR) AS gboolean
DECLARE FUNCTION gst_object_suggest_next_sync(BYVAL AS GstObject PTR) AS GstClockTime
DECLARE FUNCTION gst_object_sync_values(BYVAL AS GstObject PTR, BYVAL AS GstClockTime) AS gboolean
DECLARE SUB gst_object_unparent(BYVAL AS GstObject PTR)
DECLARE SUB gst_object_unref(BYVAL AS gpointer)
TYPE _GstObjectClass
  AS GInitiallyUnownedClass parent_class
  AS const gchar PTR path_string_separator
  deep_notify AS SUB CDECL(BYVAL AS GstObject PTR, BYVAL AS GstObject PTR, BYVAL AS GParamSpec PTR)
  AS gpointer _gst_reserved(3)
END TYPE
TYPE _GstPad
  AS GstObject object
  AS gpointer element_private
  AS GstPadTemplate PTR padtemplate
  AS GstPadDirection direction
  AS GRecMutex stream_rec_lock
  AS GstTask PTR task
  AS GCond block_cond
  AS GHookList probes
  AS GstPadMode mode
  AS GstPadActivateFunction activatefunc
  AS gpointer activatedata
  AS GDestroyNotify activatenotify
  AS GstPadActivateModeFunction activatemodefunc
  AS gpointer activatemodedata
  AS GDestroyNotify activatemodenotify
  AS GstPad PTR peer
  AS GstPadLinkFunction linkfunc
  AS gpointer linkdata
  AS GDestroyNotify linknotify
  AS GstPadUnlinkFunction unlinkfunc
  AS gpointer unlinkdata
  AS GDestroyNotify unlinknotify
  AS GstPadChainFunction chainfunc
  AS gpointer chaindata
  AS GDestroyNotify chainnotify
  AS GstPadChainListFunction chainlistfunc
  AS gpointer chainlistdata
  AS GDestroyNotify chainlistnotify
  AS GstPadGetRangeFunction getrangefunc
  AS gpointer getrangedata
  AS GDestroyNotify getrangenotify
  AS GstPadEventFunction eventfunc
  AS gpointer eventdata
  AS GDestroyNotify eventnotify
  AS gint64 offset
  AS GstPadQueryFunction queryfunc
  AS gpointer querydata
  AS GDestroyNotify querynotify
  AS GstPadIterIntLinkFunction iterintlinkfunc
  AS gpointer iterintlinkdata
  AS GDestroyNotify iterintlinknotify
  AS gint num_probes
  AS gint num_blocked
  AS GstPadPrivate PTR priv
END TYPE
DECLARE FUNCTION gst_pad_get_type() AS GType
#DEFINE GST_TYPE_PAD (gst_pad_get_type())
#DEFINE GST_PAD(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GST_TYPE_PAD, GstPad))
#DEFINE GST_PAD_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GST_TYPE_PAD, GstPadClass))
#DEFINE GST_IS_PAD(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GST_TYPE_PAD))
#DEFINE GST_IS_CLASS_PAD(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GST_TYPE_PAD))
#DEFINE GST_PAD_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GST_TYPE_PAD, GstPadClass))
DECLARE FUNCTION gst_pad_new(BYVAL AS const gchar PTR, BYVAL AS GstPadDirection) AS GstPad PTR
DECLARE FUNCTION gst_pad_new_from_static_template(BYVAL AS GstStaticPadTemplate PTR, BYVAL AS const gchar PTR) AS GstPad PTR
DECLARE FUNCTION gst_pad_new_from_template(BYVAL AS GstPadTemplate PTR, BYVAL AS const gchar PTR) AS GstPad PTR
DECLARE FUNCTION gst_pad_link_get_name(BYVAL AS GstPadLinkReturn) AS const gchar PTR
DECLARE FUNCTION gst_pad_activate_mode(BYVAL AS GstPad PTR, BYVAL AS GstPadMode, BYVAL AS gboolean) AS gboolean
DECLARE FUNCTION gst_pad_add_probe(BYVAL AS GstPad PTR, BYVAL AS GstPadProbeType, BYVAL AS GstPadProbeCallback, BYVAL AS gpointer, BYVAL AS GDestroyNotify) AS gulong
DECLARE FUNCTION gst_pad_can_link(BYVAL AS GstPad PTR, BYVAL AS GstPad PTR) AS gboolean
DECLARE FUNCTION gst_pad_chain(BYVAL AS GstPad PTR, BYVAL AS GstBuffer PTR) AS GstFlowReturn
DECLARE FUNCTION gst_pad_chain_list(BYVAL AS GstPad PTR, BYVAL AS GstBufferList PTR) AS GstFlowReturn
DECLARE FUNCTION gst_pad_check_reconfigure(BYVAL AS GstPad PTR) AS gboolean
DECLARE FUNCTION gst_pad_create_stream_id(BYVAL AS GstPad PTR, BYVAL AS GstElement PTR, BYVAL AS const gchar PTR) AS gchar PTR
DECLARE FUNCTION gst_pad_create_stream_id_printf(BYVAL AS GstPad PTR, BYVAL AS GstElement PTR, BYVAL AS const gchar PTR, ...) AS gchar PTR
DECLARE FUNCTION gst_pad_create_stream_id_printf_valist(BYVAL AS GstPad PTR, BYVAL AS GstElement PTR, BYVAL AS const gchar PTR, BYVAL AS va_list) AS gchar PTR
DECLARE FUNCTION gst_pad_event_default(BYVAL AS GstPad PTR, BYVAL AS GstObject PTR, BYVAL AS GstEvent PTR) AS gboolean
DECLARE FUNCTION gst_pad_forward(BYVAL AS GstPad PTR, BYVAL AS GstPadForwardFunction, BYVAL AS gpointer) AS gboolean
DECLARE FUNCTION gst_pad_get_allowed_caps(BYVAL AS GstPad PTR) AS GstCaps PTR
DECLARE FUNCTION gst_pad_get_current_caps(BYVAL AS GstPad PTR) AS GstCaps PTR
DECLARE FUNCTION gst_pad_get_direction(BYVAL AS GstPad PTR) AS GstPadDirection
DECLARE FUNCTION gst_pad_get_element_private(BYVAL AS GstPad PTR) AS gpointer
DECLARE FUNCTION gst_pad_get_last_flow_return(BYVAL AS GstPad PTR) AS GstFlowReturn
DECLARE FUNCTION gst_pad_get_offset(BYVAL AS GstPad PTR) AS gint64
DECLARE FUNCTION gst_pad_get_pad_template(BYVAL AS GstPad PTR) AS GstPadTemplate PTR
DECLARE FUNCTION gst_pad_get_pad_template_caps(BYVAL AS GstPad PTR) AS GstCaps PTR
DECLARE FUNCTION gst_pad_get_parent_element(BYVAL AS GstPad PTR) AS GstElement PTR
DECLARE FUNCTION gst_pad_get_peer(BYVAL AS GstPad PTR) AS GstPad PTR
DECLARE FUNCTION gst_pad_get_range(BYVAL AS GstPad PTR, BYVAL AS guint64, BYVAL AS guint, BYVAL AS GstBuffer PTR PTR) AS GstFlowReturn
DECLARE FUNCTION gst_pad_get_sticky_event(BYVAL AS GstPad PTR, BYVAL AS GstEventType, BYVAL AS guint) AS GstEvent PTR
DECLARE FUNCTION gst_pad_get_stream(BYVAL AS GstPad PTR) AS GstStream PTR
DECLARE FUNCTION gst_pad_get_stream_id(BYVAL AS GstPad PTR) AS gchar PTR
DECLARE FUNCTION gst_pad_get_task_state(BYVAL AS GstPad PTR) AS GstTaskState
DECLARE FUNCTION gst_pad_has_current_caps(BYVAL AS GstPad PTR) AS gboolean
DECLARE FUNCTION gst_pad_is_active(BYVAL AS GstPad PTR) AS gboolean
DECLARE FUNCTION gst_pad_is_blocked(BYVAL AS GstPad PTR) AS gboolean
DECLARE FUNCTION gst_pad_is_blocking(BYVAL AS GstPad PTR) AS gboolean
DECLARE FUNCTION gst_pad_is_linked(BYVAL AS GstPad PTR) AS gboolean
DECLARE FUNCTION gst_pad_iterate_internal_links(BYVAL AS GstPad PTR) AS GstIterator PTR
DECLARE FUNCTION gst_pad_iterate_internal_links_default(BYVAL AS GstPad PTR, BYVAL AS GstObject PTR) AS GstIterator PTR
DECLARE FUNCTION gst_pad_link(BYVAL AS GstPad PTR, BYVAL AS GstPad PTR) AS GstPadLinkReturn
DECLARE FUNCTION gst_pad_link_full(BYVAL AS GstPad PTR, BYVAL AS GstPad PTR, BYVAL AS GstPadLinkCheck) AS GstPadLinkReturn
DECLARE FUNCTION gst_pad_link_maybe_ghosting(BYVAL AS GstPad PTR, BYVAL AS GstPad PTR) AS gboolean
DECLARE FUNCTION gst_pad_link_maybe_ghosting_full(BYVAL AS GstPad PTR, BYVAL AS GstPad PTR, BYVAL AS GstPadLinkCheck) AS gboolean
DECLARE SUB gst_pad_mark_reconfigure(BYVAL AS GstPad PTR)
DECLARE FUNCTION gst_pad_needs_reconfigure(BYVAL AS GstPad PTR) AS gboolean
DECLARE FUNCTION gst_pad_pause_task(BYVAL AS GstPad PTR) AS gboolean
DECLARE FUNCTION gst_pad_peer_query(BYVAL AS GstPad PTR, BYVAL AS GstQuery PTR) AS gboolean
DECLARE FUNCTION gst_pad_peer_query_accept_caps(BYVAL AS GstPad PTR, BYVAL AS GstCaps PTR) AS gboolean
DECLARE FUNCTION gst_pad_peer_query_caps(BYVAL AS GstPad PTR, BYVAL AS GstCaps PTR) AS GstCaps PTR
DECLARE FUNCTION gst_pad_peer_query_convert(BYVAL AS GstPad PTR, BYVAL AS GstFormat, BYVAL AS gint64, BYVAL AS GstFormat, BYVAL AS gint64 PTR) AS gboolean
DECLARE FUNCTION gst_pad_peer_query_duration(BYVAL AS GstPad PTR, BYVAL AS GstFormat, BYVAL AS gint64 PTR) AS gboolean
DECLARE FUNCTION gst_pad_peer_query_position(BYVAL AS GstPad PTR, BYVAL AS GstFormat, BYVAL AS gint64 PTR) AS gboolean
DECLARE FUNCTION gst_pad_proxy_query_accept_caps(BYVAL AS GstPad PTR, BYVAL AS GstQuery PTR) AS gboolean
DECLARE FUNCTION gst_pad_proxy_query_caps(BYVAL AS GstPad PTR, BYVAL AS GstQuery PTR) AS gboolean
DECLARE FUNCTION gst_pad_pull_range(BYVAL AS GstPad PTR, BYVAL AS guint64, BYVAL AS guint, BYVAL AS GstBuffer PTR PTR) AS GstFlowReturn
DECLARE FUNCTION gst_pad_push(BYVAL AS GstPad PTR, BYVAL AS GstBuffer PTR) AS GstFlowReturn
DECLARE FUNCTION gst_pad_push_event(BYVAL AS GstPad PTR, BYVAL AS GstEvent PTR) AS gboolean
DECLARE FUNCTION gst_pad_push_list(BYVAL AS GstPad PTR, BYVAL AS GstBufferList PTR) AS GstFlowReturn
DECLARE FUNCTION gst_pad_query(BYVAL AS GstPad PTR, BYVAL AS GstQuery PTR) AS gboolean
DECLARE FUNCTION gst_pad_query_accept_caps(BYVAL AS GstPad PTR, BYVAL AS GstCaps PTR) AS gboolean
DECLARE FUNCTION gst_pad_query_caps(BYVAL AS GstPad PTR, BYVAL AS GstCaps PTR) AS GstCaps PTR
DECLARE FUNCTION gst_pad_query_convert(BYVAL AS GstPad PTR, BYVAL AS GstFormat, BYVAL AS gint64, BYVAL AS GstFormat, BYVAL AS gint64 PTR) AS gboolean
DECLARE FUNCTION gst_pad_query_default(BYVAL AS GstPad PTR, BYVAL AS GstObject PTR, BYVAL AS GstQuery PTR) AS gboolean
DECLARE FUNCTION gst_pad_query_duration(BYVAL AS GstPad PTR, BYVAL AS GstFormat, BYVAL AS gint64 PTR) AS gboolean
DECLARE FUNCTION gst_pad_query_position(BYVAL AS GstPad PTR, BYVAL AS GstFormat, BYVAL AS gint64 PTR) AS gboolean
DECLARE SUB gst_pad_remove_probe(BYVAL AS GstPad PTR, BYVAL AS gulong)
DECLARE FUNCTION gst_pad_send_event(BYVAL AS GstPad PTR, BYVAL AS GstEvent PTR) AS gboolean
DECLARE SUB gst_pad_set_activate_function_full(BYVAL AS GstPad PTR, BYVAL AS GstPadActivateFunction, BYVAL AS gpointer, BYVAL AS GDestroyNotify)
DECLARE SUB gst_pad_set_activatemode_function_full(BYVAL AS GstPad PTR, BYVAL AS GstPadActivateModeFunction, BYVAL AS gpointer, BYVAL AS GDestroyNotify)
DECLARE FUNCTION gst_pad_set_active(BYVAL AS GstPad PTR, BYVAL AS gboolean) AS gboolean
DECLARE SUB gst_pad_set_chain_function_full(BYVAL AS GstPad PTR, BYVAL AS GstPadChainFunction, BYVAL AS gpointer, BYVAL AS GDestroyNotify)
DECLARE SUB gst_pad_set_chain_list_function_full(BYVAL AS GstPad PTR, BYVAL AS GstPadChainListFunction, BYVAL AS gpointer, BYVAL AS GDestroyNotify)
DECLARE SUB gst_pad_set_element_private(BYVAL AS GstPad PTR, BYVAL AS gpointer)
DECLARE SUB gst_pad_set_event_full_function_full(BYVAL AS GstPad PTR, BYVAL AS GstPadEventFullFunction, BYVAL AS gpointer, BYVAL AS GDestroyNotify)
DECLARE SUB gst_pad_set_event_function_full(BYVAL AS GstPad PTR, BYVAL AS GstPadEventFunction, BYVAL AS gpointer, BYVAL AS GDestroyNotify)
DECLARE SUB gst_pad_set_getrange_function_full(BYVAL AS GstPad PTR, BYVAL AS GstPadGetRangeFunction, BYVAL AS gpointer, BYVAL AS GDestroyNotify)
DECLARE SUB gst_pad_set_iterate_internal_links_function_full(BYVAL AS GstPad PTR, BYVAL AS GstPadIterIntLinkFunction, BYVAL AS gpointer, BYVAL AS GDestroyNotify)
DECLARE SUB gst_pad_set_link_function_full(BYVAL AS GstPad PTR, BYVAL AS GstPadLinkFunction, BYVAL AS gpointer, BYVAL AS GDestroyNotify)
DECLARE SUB gst_pad_set_offset(BYVAL AS GstPad PTR, BYVAL AS gint64)
DECLARE SUB gst_pad_set_query_function_full(BYVAL AS GstPad PTR, BYVAL AS GstPadQueryFunction, BYVAL AS gpointer, BYVAL AS GDestroyNotify)
DECLARE SUB gst_pad_set_unlink_function_full(BYVAL AS GstPad PTR, BYVAL AS GstPadUnlinkFunction, BYVAL AS gpointer, BYVAL AS GDestroyNotify)
DECLARE FUNCTION gst_pad_start_task(BYVAL AS GstPad PTR, BYVAL AS GstTaskFunction, BYVAL AS gpointer, BYVAL AS GDestroyNotify) AS gboolean
DECLARE SUB gst_pad_sticky_events_foreach(BYVAL AS GstPad PTR, BYVAL AS GstPadStickyEventsForeachFunction, BYVAL AS gpointer)
DECLARE FUNCTION gst_pad_stop_task(BYVAL AS GstPad PTR) AS gboolean
DECLARE FUNCTION gst_pad_store_sticky_event(BYVAL AS GstPad PTR, BYVAL AS GstEvent PTR) AS GstFlowReturn
DECLARE FUNCTION gst_pad_unlink(BYVAL AS GstPad PTR, BYVAL AS GstPad PTR) AS gboolean
DECLARE SUB gst_pad_use_fixed_caps(BYVAL AS GstPad PTR)
TYPE GstPadActivateFunction AS FUNCTION CDECL(BYVAL AS GstPad PTR, BYVAL AS GstObject PTR) AS gboolean
TYPE GstPadActivateModeFunction AS FUNCTION CDECL(BYVAL AS GstPad PTR, BYVAL AS GstObject PTR, BYVAL AS GstPadMode, BYVAL AS gboolean) AS gboolean
TYPE GstPadChainFunction AS FUNCTION CDECL(BYVAL AS GstPad PTR, BYVAL AS GstObject PTR, BYVAL AS GstBuffer PTR) AS GstFlowReturn
TYPE GstPadChainListFunction AS FUNCTION CDECL(BYVAL AS GstPad PTR, BYVAL AS GstObject PTR, BYVAL AS GstBufferList PTR) AS GstFlowReturn
TYPE _GstPadClass
  AS GstObjectClass parent_class
  linked AS SUB CDECL(BYVAL AS GstPad PTR, BYVAL AS GstPad PTR)
  unlinked AS SUB CDECL(BYVAL AS GstPad PTR, BYVAL AS GstPad PTR)
  AS gpointer _gst_reserved(3)
END TYPE
TYPE GstPadEventFullFunction AS FUNCTION CDECL(BYVAL AS GstPad PTR, BYVAL AS GstObject PTR, BYVAL AS GstEvent PTR) AS GstFlowReturn
TYPE GstPadEventFunction AS FUNCTION CDECL(BYVAL AS GstPad PTR, BYVAL AS GstObject PTR, BYVAL AS GstEvent PTR) AS gboolean
TYPE GstPadForwardFunction AS FUNCTION CDECL(BYVAL AS GstPad PTR, BYVAL AS gpointer) AS gboolean
TYPE GstPadGetRangeFunction AS FUNCTION CDECL(BYVAL AS GstPad PTR, BYVAL AS GstObject PTR, BYVAL AS guint64, BYVAL AS guint, BYVAL AS GstBuffer PTR PTR) AS GstFlowReturn
TYPE GstPadIterIntLinkFunction AS FUNCTION CDECL(BYVAL AS GstPad PTR, BYVAL AS GstObject PTR) AS GstIterator PTR
TYPE GstPadLinkFunction AS FUNCTION CDECL(BYVAL AS GstPad PTR, BYVAL AS GstObject PTR, BYVAL AS GstPad PTR) AS GstPadLinkReturn
DECLARE FUNCTION gst_pad_direction_get_type() AS GType
#DEFINE GST_TYPE_PAD_DIRECTION (gst_pad_direction_get_type())
DECLARE FUNCTION gst_pad_link_return_get_type() AS GType
#DEFINE GST_TYPE_PAD_LINK_RETURN (gst_pad_link_return_get_type())
DECLARE FUNCTION gst_pad_mode_get_type() AS GType
#DEFINE GST_TYPE_PAD_MODE (gst_pad_mode_get_type())
DECLARE FUNCTION gst_pad_presence_get_type() AS GType
#DEFINE GST_TYPE_PAD_PRESENCE (gst_pad_presence_get_type())
TYPE GstPadProbeCallback AS FUNCTION CDECL(BYVAL AS GstPad PTR, BYVAL AS GstPadProbeInfo PTR, BYVAL AS gpointer) AS GstPadProbeReturn
TYPE _GstPadProbeInfo
  AS GstPadProbeType type
  AS gulong id
  AS gpointer data
  AS guint64 offset
  AS guint size
END TYPE
DECLARE FUNCTION gst_pad_probe_info_get_buffer(BYVAL AS GstPadProbeInfo PTR) AS GstBuffer PTR
DECLARE FUNCTION gst_pad_probe_info_get_buffer_list(BYVAL AS GstPadProbeInfo PTR) AS GstBufferList PTR
DECLARE FUNCTION gst_pad_probe_info_get_event(BYVAL AS GstPadProbeInfo PTR) AS GstEvent PTR
DECLARE FUNCTION gst_pad_probe_info_get_query(BYVAL AS GstPadProbeInfo PTR) AS GstQuery PTR
TYPE GstPadQueryFunction AS FUNCTION CDECL(BYVAL AS GstPad PTR, BYVAL AS GstObject PTR, BYVAL AS GstQuery PTR) AS gboolean
TYPE GstPadStickyEventsForeachFunction AS FUNCTION CDECL(BYVAL AS GstPad PTR, BYVAL AS GstEvent PTR PTR, BYVAL AS gpointer) AS gboolean
TYPE _GstPadTemplate
  AS GstObject object
  AS gchar PTR name_template
  AS GstPadDirection direction
  AS GstPadPresence presence
  AS GstCaps PTR caps
END TYPE
DECLARE FUNCTION gst_pad_probe_return_get_type() AS GType
#DEFINE GST_TYPE_PAD_PROBE_RETURN (gst_pad_probe_return_get_type())
DECLARE FUNCTION gst_pad_template_get_type() AS GType
#DEFINE GST_TYPE_PAD_TEMPLATE (gst_pad_template_get_type())
#DEFINE GST_PAD_TEMPLATE(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GST_TYPE_PAD_TEMPLATE, GstPadTemplate))
#DEFINE GST_PAD_TEMPLATE_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GST_TYPE_PAD_TEMPLATE, GstPadTemplateClass))
#DEFINE GST_IS_PAD_TEMPLATE(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GST_TYPE_PAD_TEMPLATE))
#DEFINE GST_IS_CLASS_PAD_TEMPLATE(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GST_TYPE_PAD_TEMPLATE))
#DEFINE GST_PAD_TEMPLATE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GST_TYPE_PAD_TEMPLATE, GstPadTemplateClass))
DECLARE FUNCTION gst_pad_template_new(BYVAL AS const gchar PTR, BYVAL AS GstPadDirection, BYVAL AS GstPadPresence, BYVAL AS GstCaps PTR) AS GstPadTemplate PTR
DECLARE FUNCTION gst_pad_template_new_from_static_pad_template_with_gtype(BYVAL AS GstStaticPadTemplate PTR, BYVAL AS GType) AS GstPadTemplate PTR
DECLARE FUNCTION gst_pad_template_new_with_gtype(BYVAL AS const gchar PTR, BYVAL AS GstPadDirection, BYVAL AS GstPadPresence, BYVAL AS GstCaps PTR, BYVAL AS GType) AS GstPadTemplate PTR
DECLARE FUNCTION gst_pad_template_get_caps(BYVAL AS GstPadTemplate PTR) AS GstCaps PTR
DECLARE SUB gst_pad_template_pad_created(BYVAL AS GstPadTemplate PTR, BYVAL AS GstPad PTR)
TYPE _GstPadTemplateClass
  AS GstObjectClass parent_class
  pad_created AS SUB CDECL(BYVAL AS GstPadTemplate PTR, BYVAL AS GstPad PTR)
  AS gpointer _gst_reserved(3)
END TYPE
TYPE GstPadUnlinkFunction AS SUB CDECL(BYVAL AS GstPad PTR, BYVAL AS GstObject PTR)
DECLARE FUNCTION gst_param_spec_array_get_type() AS GType
#DEFINE GST_TYPE_PARAM_SPEC_ARRAY (gst_param_spec_array_get_type())
#DEFINE GST_PARAM_SPEC_ARRAY(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GST_TYPE_PARAM_SPEC_ARRAY, GstParamArray))
#DEFINE GST_PARAM_SPEC_ARRAY_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GST_TYPE_PARAM_SPEC_ARRAY, Gst))
#DEFINE GST_IS_PARAM_SPEC_ARRAY(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GST_TYPE_PARAM_SPEC_ARRAY))
#DEFINE GST_IS_CLASS_PARAM_SPEC_ARRAY(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GST_TYPE_PARAM_SPEC_ARRAY))
#DEFINE GST_PARAM_SPEC_ARRAY_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GST_TYPE_PARAM_SPEC_ARRAY, Gst))
DECLARE FUNCTION gst_param_spec_fraction_get_type() AS GType
#DEFINE GST_TYPE_PARAM_SPEC_FRACTION (gst_param_spec_fraction_get_type())
#DEFINE GST_PARAM_SPEC_FRACTION(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GST_TYPE_PARAM_SPEC_FRACTION, GstParamFraction))
#DEFINE GST_PARAM_SPEC_FRACTION_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GST_TYPE_PARAM_SPEC_FRACTION, Gst))
#DEFINE GST_IS_PARAM_SPEC_FRACTION(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GST_TYPE_PARAM_SPEC_FRACTION))
#DEFINE GST_IS_CLASS_PARAM_SPEC_FRACTION(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GST_TYPE_PARAM_SPEC_FRACTION))
#DEFINE GST_PARAM_SPEC_FRACTION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GST_TYPE_PARAM_SPEC_FRACTION, Gst))
TYPE _GstParamSpecArray
  AS GParamSpec parent_instance
  AS GParamSpec PTR element_spec
END TYPE
TYPE _GstParamSpecFraction
  AS GParamSpec parent_instance
  AS gint min_num
  AS gint min_den
  AS gint max_num
  AS gint max_den
  AS gint def_num
  AS gint def_den
END TYPE
TYPE _GstParentBufferMeta
  AS GstMeta parent
  AS GstBuffer PTR buffer
END TYPE
DECLARE FUNCTION gst_parent_buffer_meta_get_info() AS const GstMetaInfo PTR
DECLARE FUNCTION gst_parse_context_new() AS GstParseContext PTR
DECLARE FUNCTION gst_parse_context_copy(BYVAL AS const GstParseContext PTR) AS GstParseContext PTR
DECLARE SUB gst_parse_context_free(BYVAL AS GstParseContext PTR)
DECLARE FUNCTION gst_parse_context_get_missing_elements(BYVAL AS GstParseContext PTR) AS gchar PTR PTR
TYPE _GstPipeline
  AS GstBin bin
  AS GstClock PTR fixed_clock
  AS GstClockTime stream_time
  AS GstClockTime delay
  AS GstPipelinePrivate PTR priv
  AS gpointer _gst_reserved(3)
END TYPE
DECLARE FUNCTION gst_parse_error_get_type() AS GType
#DEFINE GST_TYPE_PARSE_ERROR (gst_parse_error_get_type())
DECLARE FUNCTION gst_pipeline_get_type() AS GType
#DEFINE GST_TYPE_PIPELINE (gst_pipeline_get_type())
#DEFINE GST_PIPELINE(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GST_TYPE_PIPELINE, GstPipeline))
#DEFINE GST_PIPELINE_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GST_TYPE_PIPELINE, GstPipelineClass))
#DEFINE GST_IS_PIPELINE(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GST_TYPE_PIPELINE))
#DEFINE GST_IS_CLASS_PIPELINE(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GST_TYPE_PIPELINE))
#DEFINE GST_PIPELINE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GST_TYPE_PIPELINE, GstPipelineClass))
DECLARE FUNCTION gst_pipeline_new(BYVAL AS const gchar PTR) AS GstElement PTR
DECLARE SUB gst_pipeline_auto_clock(BYVAL AS GstPipeline PTR)
DECLARE FUNCTION gst_pipeline_get_auto_flush_bus(BYVAL AS GstPipeline PTR) AS gboolean
DECLARE FUNCTION gst_pipeline_get_bus(BYVAL AS GstPipeline PTR) AS GstBus PTR
DECLARE FUNCTION gst_pipeline_get_clock(BYVAL AS GstPipeline PTR) AS GstClock PTR
DECLARE FUNCTION gst_pipeline_get_delay(BYVAL AS GstPipeline PTR) AS GstClockTime
DECLARE FUNCTION gst_pipeline_get_latency(BYVAL AS GstPipeline PTR) AS GstClockTime
DECLARE FUNCTION gst_pipeline_get_pipeline_clock(BYVAL AS GstPipeline PTR) AS GstClock PTR
DECLARE SUB gst_pipeline_set_auto_flush_bus(BYVAL AS GstPipeline PTR, BYVAL AS gboolean)
DECLARE FUNCTION gst_pipeline_set_clock(BYVAL AS GstPipeline PTR, BYVAL AS GstClock PTR) AS gboolean
DECLARE SUB gst_pipeline_set_delay(BYVAL AS GstPipeline PTR, BYVAL AS GstClockTime)
DECLARE SUB gst_pipeline_set_latency(BYVAL AS GstPipeline PTR, BYVAL AS GstClockTime)
DECLARE SUB gst_pipeline_use_clock(BYVAL AS GstPipeline PTR, BYVAL AS GstClock PTR)
TYPE _GstPipelineClass
  AS GstBinClass parent_class
  AS gpointer _gst_reserved(3)
END TYPE
DECLARE FUNCTION gst_plugin_get_type() AS GType
#DEFINE GST_TYPE_PLUGIN (gst_plugin_get_type())
#DEFINE GST_PLUGIN(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GST_TYPE_PLUGIN, GstPlugin))
#DEFINE GST_PLUGIN_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GST_TYPE_PLUGIN, GstPluginClass))
#DEFINE GST_IS_PLUGIN(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GST_TYPE_PLUGIN))
#DEFINE GST_IS_CLASS_PLUGIN(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GST_TYPE_PLUGIN))
#DEFINE GST_PLUGIN_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GST_TYPE_PLUGIN, GstPluginClass))
DECLARE SUB gst_plugin_list_free(BYVAL AS GList PTR)
DECLARE FUNCTION gst_plugin_load_by_name(BYVAL AS const gchar PTR) AS GstPlugin PTR
DECLARE FUNCTION gst_plugin_load_file(BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR) AS GstPlugin PTR
DECLARE FUNCTION gst_plugin_register_static(BYVAL AS gint, BYVAL AS gint, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS GstPluginInitFunc, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR) AS gboolean
DECLARE FUNCTION gst_plugin_register_static_full(BYVAL AS gint, BYVAL AS gint, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS GstPluginInitFullFunc, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS gpointer) AS gboolean
DECLARE SUB gst_plugin_add_dependency(BYVAL AS GstPlugin PTR, BYVAL AS const gchar PTR PTR, BYVAL AS const gchar PTR PTR, BYVAL AS const gchar PTR PTR, BYVAL AS GstPluginDependencyFlags)
DECLARE SUB gst_plugin_add_dependency_simple(BYVAL AS GstPlugin PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS GstPluginDependencyFlags)
DECLARE FUNCTION gst_plugin_get_cache_data(BYVAL AS GstPlugin PTR) AS const GstStructure PTR
DECLARE FUNCTION gst_plugin_get_description(BYVAL AS GstPlugin PTR) AS const gchar PTR
DECLARE FUNCTION gst_plugin_get_filename(BYVAL AS GstPlugin PTR) AS const gchar PTR
DECLARE FUNCTION gst_plugin_get_license(BYVAL AS GstPlugin PTR) AS const gchar PTR
DECLARE FUNCTION gst_plugin_get_name(BYVAL AS GstPlugin PTR) AS const gchar PTR
DECLARE FUNCTION gst_plugin_get_origin(BYVAL AS GstPlugin PTR) AS const gchar PTR
DECLARE FUNCTION gst_plugin_get_package(BYVAL AS GstPlugin PTR) AS const gchar PTR
DECLARE FUNCTION gst_plugin_get_release_date_string(BYVAL AS GstPlugin PTR) AS const gchar PTR
DECLARE FUNCTION gst_plugin_get_source(BYVAL AS GstPlugin PTR) AS const gchar PTR
DECLARE FUNCTION gst_plugin_get_version(BYVAL AS GstPlugin PTR) AS const gchar PTR
DECLARE FUNCTION gst_plugin_is_loaded(BYVAL AS GstPlugin PTR) AS gboolean
DECLARE FUNCTION gst_plugin_load(BYVAL AS GstPlugin PTR) AS GstPlugin PTR
DECLARE SUB gst_plugin_set_cache_data(BYVAL AS GstPlugin PTR, BYVAL AS GstStructure PTR)
TYPE _GstPluginDesc
  AS gint major_version
  AS gint minor_version
  AS const gchar PTR name
  AS const gchar PTR description
  AS GstPluginInitFunc plugin_init
  AS const gchar PTR version
  AS const gchar PTR license
  AS const gchar PTR source
  AS const gchar PTR package
  AS const gchar PTR origin
  AS const gchar PTR release_datetime
  AS gpointer _gst_reserved(3)
END TYPE
DECLARE FUNCTION gst_plugin_error_get_type() AS GType
#DEFINE GST_TYPE_PLUGIN_ERROR (gst_plugin_error_get_type())
DECLARE FUNCTION gst_plugin_feature_get_type() AS GType
#DEFINE GST_TYPE_PLUGIN_FEATURE (gst_plugin_feature_get_type())
#DEFINE GST_PLUGIN_FEATURE(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GST_TYPE_PLUGIN_FEATURE, GstPluginFeature))
#DEFINE GST_PLUGIN_FEATURE_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GST_TYPE_PLUGIN_FEATURE, GstPluginFeatureClass))
#DEFINE GST_IS_PLUGIN_FEATURE(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GST_TYPE_PLUGIN_FEATURE))
#DEFINE GST_IS_CLASS_PLUGIN_FEATURE(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GST_TYPE_PLUGIN_FEATURE))
#DEFINE GST_PLUGIN_FEATURE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GST_TYPE_PLUGIN_FEATURE, GstPluginFeatureClass))
DECLARE FUNCTION gst_plugin_feature_list_copy(BYVAL AS GList PTR) AS GList PTR
DECLARE SUB gst_plugin_feature_list_debug(BYVAL AS GList PTR)
DECLARE SUB gst_plugin_feature_list_free(BYVAL AS GList PTR)
DECLARE FUNCTION gst_plugin_feature_rank_compare_func(BYVAL AS gconstpointer, BYVAL AS gconstpointer) AS gint
DECLARE FUNCTION gst_plugin_feature_check_version(BYVAL AS GstPluginFeature PTR, BYVAL AS guint, BYVAL AS guint, BYVAL AS guint) AS gboolean
DECLARE FUNCTION gst_plugin_feature_get_plugin(BYVAL AS GstPluginFeature PTR) AS GstPlugin PTR
DECLARE FUNCTION gst_plugin_feature_get_plugin_name(BYVAL AS GstPluginFeature PTR) AS const gchar PTR
DECLARE FUNCTION gst_plugin_feature_get_rank(BYVAL AS GstPluginFeature PTR) AS guint
DECLARE FUNCTION gst_plugin_feature_load(BYVAL AS GstPluginFeature PTR) AS GstPluginFeature PTR
DECLARE SUB gst_plugin_feature_set_rank(BYVAL AS GstPluginFeature PTR, BYVAL AS guint)
TYPE GstPluginFeatureFilter AS FUNCTION CDECL(BYVAL AS GstPluginFeature PTR, BYVAL AS gpointer) AS gboolean
TYPE GstPluginFilter AS FUNCTION CDECL(BYVAL AS GstPlugin PTR, BYVAL AS gpointer) AS gboolean
TYPE GstPluginInitFullFunc AS FUNCTION CDECL(BYVAL AS GstPlugin PTR, BYVAL AS gpointer) AS gboolean
TYPE GstPluginInitFunc AS FUNCTION CDECL(BYVAL AS GstPlugin PTR) AS gboolean
DECLARE FUNCTION gst_poll_add_fd(BYVAL AS GstPoll PTR, BYVAL AS GstPollFD PTR) AS gboolean
DECLARE FUNCTION gst_poll_fd_can_read(BYVAL AS const GstPoll PTR, BYVAL AS GstPollFD PTR) AS gboolean
DECLARE FUNCTION gst_poll_fd_can_write(BYVAL AS const GstPoll PTR, BYVAL AS GstPollFD PTR) AS gboolean
DECLARE FUNCTION gst_poll_fd_ctl_pri(BYVAL AS GstPoll PTR, BYVAL AS GstPollFD PTR, BYVAL AS gboolean) AS gboolean
DECLARE FUNCTION gst_poll_fd_ctl_read(BYVAL AS GstPoll PTR, BYVAL AS GstPollFD PTR, BYVAL AS gboolean) AS gboolean
DECLARE FUNCTION gst_poll_fd_ctl_write(BYVAL AS GstPoll PTR, BYVAL AS GstPollFD PTR, BYVAL AS gboolean) AS gboolean
DECLARE FUNCTION gst_poll_fd_has_closed(BYVAL AS const GstPoll PTR, BYVAL AS GstPollFD PTR) AS gboolean
DECLARE FUNCTION gst_poll_fd_has_error(BYVAL AS const GstPoll PTR, BYVAL AS GstPollFD PTR) AS gboolean
DECLARE FUNCTION gst_poll_fd_has_pri(BYVAL AS const GstPoll PTR, BYVAL AS GstPollFD PTR) AS gboolean
DECLARE SUB gst_poll_fd_ignored(BYVAL AS GstPoll PTR, BYVAL AS GstPollFD PTR)
DECLARE SUB gst_poll_free(BYVAL AS GstPoll PTR)
DECLARE SUB gst_poll_get_read_gpollfd(BYVAL AS GstPoll PTR, BYVAL AS GPollFD PTR)
DECLARE FUNCTION gst_poll_read_control(BYVAL AS GstPoll PTR) AS gboolean
DECLARE FUNCTION gst_poll_remove_fd(BYVAL AS GstPoll PTR, BYVAL AS GstPollFD PTR) AS gboolean
DECLARE SUB gst_poll_restart(BYVAL AS GstPoll PTR)
DECLARE FUNCTION gst_poll_set_controllable(BYVAL AS GstPoll PTR, BYVAL AS gboolean) AS gboolean
DECLARE SUB gst_poll_set_flushing(BYVAL AS GstPoll PTR, BYVAL AS gboolean)
DECLARE FUNCTION gst_poll_wait(BYVAL AS GstPoll PTR, BYVAL AS GstClockTime) AS gint
DECLARE FUNCTION gst_poll_write_control(BYVAL AS GstPoll PTR) AS gboolean
DECLARE FUNCTION gst_poll_new(BYVAL AS gboolean) AS GstPoll PTR
DECLARE FUNCTION gst_poll_new_timer() AS GstPoll PTR
TYPE _GstPollFD
  AS int fd
  AS gint idx
END TYPE
DECLARE SUB gst_poll_fd_init(BYVAL AS GstPollFD PTR)
DECLARE FUNCTION gst_preset_get_type() AS GType
#DEFINE GST_TYPE_PRESET (gst_preset_get_type())
#DEFINE GST_PRESET(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GST_TYPE_PRESET, GstPreset))
#DEFINE GST_PRESET_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GST_TYPE_PRESET, GstPresetInterface))
#DEFINE GST_IS_PRESET(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GST_TYPE_PRESET))
#DEFINE GST_PRESET_GET_IFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE((obj), GST_TYPE_PRESET, GstPresetInterface))
DECLARE FUNCTION gst_preset_get_app_dir() AS const gchar PTR
DECLARE FUNCTION gst_preset_set_app_dir(BYVAL AS const gchar PTR) AS gboolean
DECLARE FUNCTION gst_preset_delete_preset(BYVAL AS GstPreset PTR, BYVAL AS const gchar PTR) AS gboolean
DECLARE FUNCTION gst_preset_get_meta(BYVAL AS GstPreset PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS gchar PTR PTR) AS gboolean
DECLARE FUNCTION gst_preset_get_preset_names(BYVAL AS GstPreset PTR) AS gchar PTR PTR
DECLARE FUNCTION gst_preset_get_property_names(BYVAL AS GstPreset PTR) AS gchar PTR PTR
DECLARE FUNCTION gst_preset_is_editable(BYVAL AS GstPreset PTR) AS gboolean
DECLARE FUNCTION gst_preset_load_preset(BYVAL AS GstPreset PTR, BYVAL AS const gchar PTR) AS gboolean
DECLARE FUNCTION gst_preset_rename_preset(BYVAL AS GstPreset PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR) AS gboolean
DECLARE FUNCTION gst_preset_save_preset(BYVAL AS GstPreset PTR, BYVAL AS const gchar PTR) AS gboolean
DECLARE FUNCTION gst_preset_set_meta(BYVAL AS GstPreset PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR) AS gboolean
TYPE _GstPresetInterface
  AS GTypeInterface parent
  get_preset_names AS FUNCTION CDECL(BYVAL AS GstPreset PTR) AS gchar PTR PTR
  get_property_names AS FUNCTION CDECL(BYVAL AS GstPreset PTR) AS gchar PTR PTR
  load_preset AS FUNCTION CDECL(BYVAL AS GstPreset PTR, BYVAL AS const gchar PTR) AS gboolean
  save_preset AS FUNCTION CDECL(BYVAL AS GstPreset PTR, BYVAL AS const gchar PTR) AS gboolean
  rename_preset AS FUNCTION CDECL(BYVAL AS GstPreset PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR) AS gboolean
  delete_preset AS FUNCTION CDECL(BYVAL AS GstPreset PTR, BYVAL AS const gchar PTR) AS gboolean
  set_meta AS FUNCTION CDECL(BYVAL AS GstPreset PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR) AS gboolean
  get_meta AS FUNCTION CDECL(BYVAL AS GstPreset PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS gchar PTR PTR) AS gboolean
  AS gpointer _gst_reserved(3)
END TYPE
TYPE _GstPromise
  AS GstMiniObject parent
END TYPE
DECLARE FUNCTION gst_progress_type_get_type() AS GType
#DEFINE GST_TYPE_PROGRESS_TYPE (gst_progress_type_get_type())
DECLARE FUNCTION gst_promise_new() AS GstPromise PTR
DECLARE FUNCTION gst_promise_new_with_change_func(BYVAL AS GstPromiseChangeFunc, BYVAL AS gpointer, BYVAL AS GDestroyNotify) AS GstPromise PTR
DECLARE SUB gst_promise_expire(BYVAL AS GstPromise PTR)
DECLARE FUNCTION gst_promise_get_reply(BYVAL AS GstPromise PTR) AS const GstStructure PTR
DECLARE SUB gst_promise_interrupt(BYVAL AS GstPromise PTR)
DECLARE SUB gst_promise_reply(BYVAL AS GstPromise PTR, BYVAL AS GstStructure PTR)
DECLARE FUNCTION gst_promise_wait(BYVAL AS GstPromise PTR) AS GstPromiseResult
TYPE GstPromiseChangeFunc AS SUB CDECL(BYVAL AS GstPromise PTR, BYVAL AS gpointer)
TYPE _GstProtectionMeta
  AS GstMeta meta
  AS GstStructure PTR info
END TYPE
DECLARE FUNCTION gst_promise_result_get_type() AS GType
#DEFINE GST_TYPE_PROMISE_RESULT (gst_promise_result_get_type())
DECLARE FUNCTION gst_protection_meta_get_info() AS const GstMetaInfo PTR
TYPE _GstProxyPad
  AS GstPad pad
  AS GstProxyPadPrivate PTR priv
END TYPE
DECLARE FUNCTION gst_proxy_pad_get_type() AS GType
#DEFINE GST_TYPE_PROXY_PAD (gst_proxy_pad_get_type())
#DEFINE GST_PROXY_PAD(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GST_TYPE_PROXY_PAD, GstProxyPad))
#DEFINE GST_PROXY_PAD_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GST_TYPE_PROXY_PAD, GstProxyPadClass))
#DEFINE GST_IS_PROXY_PAD(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GST_TYPE_PROXY_PAD))
#DEFINE GST_IS_CLASS_PROXY_PAD(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GST_TYPE_PROXY_PAD))
#DEFINE GST_PROXY_PAD_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GST_TYPE_PROXY_PAD, GstProxyPadClass))
DECLARE FUNCTION gst_proxy_pad_chain_default(BYVAL AS GstPad PTR, BYVAL AS GstObject PTR, BYVAL AS GstBuffer PTR) AS GstFlowReturn
DECLARE FUNCTION gst_proxy_pad_chain_list_default(BYVAL AS GstPad PTR, BYVAL AS GstObject PTR, BYVAL AS GstBufferList PTR) AS GstFlowReturn
DECLARE FUNCTION gst_proxy_pad_getrange_default(BYVAL AS GstPad PTR, BYVAL AS GstObject PTR, BYVAL AS guint64, BYVAL AS guint, BYVAL AS GstBuffer PTR PTR) AS GstFlowReturn
DECLARE FUNCTION gst_proxy_pad_iterate_internal_links_default(BYVAL AS GstPad PTR, BYVAL AS GstObject PTR) AS GstIterator PTR
DECLARE FUNCTION gst_proxy_pad_get_internal(BYVAL AS GstProxyPad PTR) AS GstProxyPad PTR
TYPE _GstProxyPadClass
  AS GstPadClass parent_class
  AS gpointer _gst_reserved(0)
END TYPE
TYPE _GstQuery
  AS GstMiniObject mini_object
  AS GstQueryType type
END TYPE
DECLARE FUNCTION gst_qos_type_get_type() AS GType
#DEFINE GST_TYPE_QOS_TYPE (gst_qos_type_get_type())
DECLARE FUNCTION gst_query_new_accept_caps(BYVAL AS GstCaps PTR) AS GstQuery PTR
DECLARE FUNCTION gst_query_new_allocation(BYVAL AS GstCaps PTR, BYVAL AS gboolean) AS GstQuery PTR
DECLARE FUNCTION gst_query_new_bitrate() AS GstQuery PTR
DECLARE FUNCTION gst_query_new_buffering(BYVAL AS GstFormat) AS GstQuery PTR
DECLARE FUNCTION gst_query_new_caps(BYVAL AS GstCaps PTR) AS GstQuery PTR
DECLARE FUNCTION gst_query_new_context(BYVAL AS const gchar PTR) AS GstQuery PTR
DECLARE FUNCTION gst_query_new_convert(BYVAL AS GstFormat, BYVAL AS gint64, BYVAL AS GstFormat) AS GstQuery PTR
DECLARE FUNCTION gst_query_new_custom(BYVAL AS GstQueryType, BYVAL AS GstStructure PTR) AS GstQuery PTR
DECLARE FUNCTION gst_query_new_drain() AS GstQuery PTR
DECLARE FUNCTION gst_query_new_duration(BYVAL AS GstFormat) AS GstQuery PTR
DECLARE FUNCTION gst_query_new_formats() AS GstQuery PTR
DECLARE FUNCTION gst_query_new_latency() AS GstQuery PTR
DECLARE FUNCTION gst_query_new_position(BYVAL AS GstFormat) AS GstQuery PTR
DECLARE FUNCTION gst_query_new_scheduling() AS GstQuery PTR
DECLARE FUNCTION gst_query_new_seeking(BYVAL AS GstFormat) AS GstQuery PTR
DECLARE FUNCTION gst_query_new_segment(BYVAL AS GstFormat) AS GstQuery PTR
DECLARE FUNCTION gst_query_new_uri() AS GstQuery PTR
DECLARE SUB gst_query_add_allocation_meta(BYVAL AS GstQuery PTR, BYVAL AS GType, BYVAL AS const GstStructure PTR)
DECLARE SUB gst_query_add_allocation_param(BYVAL AS GstQuery PTR, BYVAL AS GstAllocator PTR, BYVAL AS const GstAllocationParams PTR)
DECLARE SUB gst_query_add_allocation_pool(BYVAL AS GstQuery PTR, BYVAL AS GstBufferPool PTR, BYVAL AS guint, BYVAL AS guint, BYVAL AS guint)
DECLARE FUNCTION gst_query_add_buffering_range(BYVAL AS GstQuery PTR, BYVAL AS gint64, BYVAL AS gint64) AS gboolean
DECLARE SUB gst_query_add_scheduling_mode(BYVAL AS GstQuery PTR, BYVAL AS GstPadMode)
DECLARE FUNCTION gst_query_find_allocation_meta(BYVAL AS GstQuery PTR, BYVAL AS GType, BYVAL AS guint PTR) AS gboolean
DECLARE FUNCTION gst_query_get_n_allocation_metas(BYVAL AS GstQuery PTR) AS guint
DECLARE FUNCTION gst_query_get_n_allocation_params(BYVAL AS GstQuery PTR) AS guint
DECLARE FUNCTION gst_query_get_n_allocation_pools(BYVAL AS GstQuery PTR) AS guint
DECLARE FUNCTION gst_query_get_n_buffering_ranges(BYVAL AS GstQuery PTR) AS guint
DECLARE FUNCTION gst_query_get_n_scheduling_modes(BYVAL AS GstQuery PTR) AS guint
DECLARE FUNCTION gst_query_get_structure(BYVAL AS GstQuery PTR) AS const GstStructure PTR
DECLARE FUNCTION gst_query_has_scheduling_mode(BYVAL AS GstQuery PTR, BYVAL AS GstPadMode) AS gboolean
DECLARE FUNCTION gst_query_has_scheduling_mode_with_flags(BYVAL AS GstQuery PTR, BYVAL AS GstPadMode, BYVAL AS GstSchedulingFlags) AS gboolean
DECLARE SUB gst_query_parse_accept_caps(BYVAL AS GstQuery PTR, BYVAL AS GstCaps PTR PTR)
DECLARE SUB gst_query_parse_accept_caps_result(BYVAL AS GstQuery PTR, BYVAL AS gboolean PTR)
DECLARE SUB gst_query_parse_allocation(BYVAL AS GstQuery PTR, BYVAL AS GstCaps PTR PTR, BYVAL AS gboolean PTR)
DECLARE SUB gst_query_parse_bitrate(BYVAL AS GstQuery PTR, BYVAL AS guint PTR)
DECLARE SUB gst_query_parse_buffering_percent(BYVAL AS GstQuery PTR, BYVAL AS gboolean PTR, BYVAL AS gint PTR)
DECLARE SUB gst_query_parse_buffering_range(BYVAL AS GstQuery PTR, BYVAL AS GstFormat PTR, BYVAL AS gint64 PTR, BYVAL AS gint64 PTR, BYVAL AS gint64 PTR)
DECLARE SUB gst_query_parse_buffering_stats(BYVAL AS GstQuery PTR, BYVAL AS GstBufferingMode PTR, BYVAL AS gint PTR, BYVAL AS gint PTR, BYVAL AS gint64 PTR)
DECLARE SUB gst_query_parse_caps(BYVAL AS GstQuery PTR, BYVAL AS GstCaps PTR PTR)
DECLARE SUB gst_query_parse_caps_result(BYVAL AS GstQuery PTR, BYVAL AS GstCaps PTR PTR)
DECLARE SUB gst_query_parse_context(BYVAL AS GstQuery PTR, BYVAL AS GstContext PTR PTR)
DECLARE FUNCTION gst_query_parse_context_type(BYVAL AS GstQuery PTR, BYVAL AS const gchar PTR PTR) AS gboolean
DECLARE SUB gst_query_parse_convert(BYVAL AS GstQuery PTR, BYVAL AS GstFormat PTR, BYVAL AS gint64 PTR, BYVAL AS GstFormat PTR, BYVAL AS gint64 PTR)
DECLARE SUB gst_query_parse_duration(BYVAL AS GstQuery PTR, BYVAL AS GstFormat PTR, BYVAL AS gint64 PTR)
DECLARE SUB gst_query_parse_latency(BYVAL AS GstQuery PTR, BYVAL AS gboolean PTR, BYVAL AS GstClockTime PTR, BYVAL AS GstClockTime PTR)
DECLARE SUB gst_query_parse_n_formats(BYVAL AS GstQuery PTR, BYVAL AS guint PTR)
DECLARE FUNCTION gst_query_parse_nth_allocation_meta(BYVAL AS GstQuery PTR, BYVAL AS guint, BYVAL AS const GstStructure PTR PTR) AS GType
DECLARE SUB gst_query_parse_nth_allocation_param(BYVAL AS GstQuery PTR, BYVAL AS guint, BYVAL AS GstAllocator PTR PTR, BYVAL AS GstAllocationParams PTR)
DECLARE SUB gst_query_parse_nth_allocation_pool(BYVAL AS GstQuery PTR, BYVAL AS guint, BYVAL AS GstBufferPool PTR PTR, BYVAL AS guint PTR, BYVAL AS guint PTR, BYVAL AS guint PTR)
DECLARE FUNCTION gst_query_parse_nth_buffering_range(BYVAL AS GstQuery PTR, BYVAL AS guint, BYVAL AS gint64 PTR, BYVAL AS gint64 PTR) AS gboolean
DECLARE SUB gst_query_parse_nth_format(BYVAL AS GstQuery PTR, BYVAL AS guint, BYVAL AS GstFormat PTR)
DECLARE FUNCTION gst_query_parse_nth_scheduling_mode(BYVAL AS GstQuery PTR, BYVAL AS guint) AS GstPadMode
DECLARE SUB gst_query_parse_position(BYVAL AS GstQuery PTR, BYVAL AS GstFormat PTR, BYVAL AS gint64 PTR)
DECLARE SUB gst_query_parse_scheduling(BYVAL AS GstQuery PTR, BYVAL AS GstSchedulingFlags PTR, BYVAL AS gint PTR, BYVAL AS gint PTR, BYVAL AS gint PTR)
DECLARE SUB gst_query_parse_seeking(BYVAL AS GstQuery PTR, BYVAL AS GstFormat PTR, BYVAL AS gboolean PTR, BYVAL AS gint64 PTR, BYVAL AS gint64 PTR)
DECLARE SUB gst_query_parse_segment(BYVAL AS GstQuery PTR, BYVAL AS gdouble PTR, BYVAL AS GstFormat PTR, BYVAL AS gint64 PTR, BYVAL AS gint64 PTR)
DECLARE SUB gst_query_parse_uri(BYVAL AS GstQuery PTR, BYVAL AS gchar PTR PTR)
DECLARE SUB gst_query_parse_uri_redirection(BYVAL AS GstQuery PTR, BYVAL AS gchar PTR PTR)
DECLARE SUB gst_query_parse_uri_redirection_permanent(BYVAL AS GstQuery PTR, BYVAL AS gboolean PTR)
DECLARE SUB gst_query_remove_nth_allocation_meta(BYVAL AS GstQuery PTR, BYVAL AS guint)
DECLARE SUB gst_query_remove_nth_allocation_param(BYVAL AS GstQuery PTR, BYVAL AS guint)
DECLARE SUB gst_query_remove_nth_allocation_pool(BYVAL AS GstQuery PTR, BYVAL AS guint)
DECLARE SUB gst_query_set_accept_caps_result(BYVAL AS GstQuery PTR, BYVAL AS gboolean)
DECLARE SUB gst_query_set_bitrate(BYVAL AS GstQuery PTR, BYVAL AS guint)
DECLARE SUB gst_query_set_buffering_percent(BYVAL AS GstQuery PTR, BYVAL AS gboolean, BYVAL AS gint)
DECLARE SUB gst_query_set_buffering_range(BYVAL AS GstQuery PTR, BYVAL AS GstFormat, BYVAL AS gint64, BYVAL AS gint64, BYVAL AS gint64)
DECLARE SUB gst_query_set_buffering_stats(BYVAL AS GstQuery PTR, BYVAL AS GstBufferingMode, BYVAL AS gint, BYVAL AS gint, BYVAL AS gint64)
DECLARE SUB gst_query_set_caps_result(BYVAL AS GstQuery PTR, BYVAL AS GstCaps PTR)
DECLARE SUB gst_query_set_context(BYVAL AS GstQuery PTR, BYVAL AS GstContext PTR)
DECLARE SUB gst_query_set_convert(BYVAL AS GstQuery PTR, BYVAL AS GstFormat, BYVAL AS gint64, BYVAL AS GstFormat, BYVAL AS gint64)
DECLARE SUB gst_query_set_duration(BYVAL AS GstQuery PTR, BYVAL AS GstFormat, BYVAL AS gint64)
DECLARE SUB gst_query_set_formats(BYVAL AS GstQuery PTR, BYVAL AS gint, ...)
DECLARE SUB gst_query_set_formatsv(BYVAL AS GstQuery PTR, BYVAL AS gint, BYVAL AS const GstFormat PTR)
DECLARE SUB gst_query_set_latency(BYVAL AS GstQuery PTR, BYVAL AS gboolean, BYVAL AS GstClockTime, BYVAL AS GstClockTime)
DECLARE SUB gst_query_set_nth_allocation_param(BYVAL AS GstQuery PTR, BYVAL AS guint, BYVAL AS GstAllocator PTR, BYVAL AS const GstAllocationParams PTR)
DECLARE SUB gst_query_set_nth_allocation_pool(BYVAL AS GstQuery PTR, BYVAL AS guint, BYVAL AS GstBufferPool PTR, BYVAL AS guint, BYVAL AS guint, BYVAL AS guint)
DECLARE SUB gst_query_set_position(BYVAL AS GstQuery PTR, BYVAL AS GstFormat, BYVAL AS gint64)
DECLARE SUB gst_query_set_scheduling(BYVAL AS GstQuery PTR, BYVAL AS GstSchedulingFlags, BYVAL AS gint, BYVAL AS gint, BYVAL AS gint)
DECLARE SUB gst_query_set_seeking(BYVAL AS GstQuery PTR, BYVAL AS GstFormat, BYVAL AS gboolean, BYVAL AS gint64, BYVAL AS gint64)
DECLARE SUB gst_query_set_segment(BYVAL AS GstQuery PTR, BYVAL AS gdouble, BYVAL AS GstFormat, BYVAL AS gint64, BYVAL AS gint64)
DECLARE SUB gst_query_set_uri(BYVAL AS GstQuery PTR, BYVAL AS const gchar PTR)
DECLARE SUB gst_query_set_uri_redirection(BYVAL AS GstQuery PTR, BYVAL AS const gchar PTR)
DECLARE SUB gst_query_set_uri_redirection_permanent(BYVAL AS GstQuery PTR, BYVAL AS gboolean)
DECLARE FUNCTION gst_query_writable_structure(BYVAL AS GstQuery PTR) AS GstStructure PTR
TYPE _GstReferenceTimestampMeta
  AS GstMeta parent
  AS GstCaps PTR reference
  AS GstClockTime timestamp
  AS GstClockTime duration
END TYPE
DECLARE FUNCTION gst_query_type_get_type() AS GType
#DEFINE GST_TYPE_QUERY_TYPE (gst_query_type_get_type())
DECLARE FUNCTION gst_rank_get_type() AS GType
#DEFINE GST_TYPE_RANK (gst_rank_get_type())
DECLARE FUNCTION gst_reference_timestamp_meta_get_info() AS const GstMetaInfo PTR
TYPE _GstRegistry
  AS GstObject object
  AS GstRegistryPrivate PTR priv
END TYPE
DECLARE FUNCTION gst_registry_get_type() AS GType
#DEFINE GST_TYPE_REGISTRY (gst_registry_get_type())
#DEFINE GST_REGISTRY(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GST_TYPE_REGISTRY, GstRegistry))
#DEFINE GST_REGISTRY_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GST_TYPE_REGISTRY, GstRegistryClass))
#DEFINE GST_IS_REGISTRY(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GST_TYPE_REGISTRY))
#DEFINE GST_IS_CLASS_REGISTRY(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GST_TYPE_REGISTRY))
#DEFINE GST_REGISTRY_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GST_TYPE_REGISTRY, GstRegistryClass))
DECLARE FUNCTION gst_registry_fork_is_enabled() AS gboolean
DECLARE SUB gst_registry_fork_set_enabled(BYVAL AS gboolean)
DECLARE FUNCTION gst_registry_get() AS GstRegistry PTR
DECLARE FUNCTION gst_registry_add_feature(BYVAL AS GstRegistry PTR, BYVAL AS GstPluginFeature PTR) AS gboolean
DECLARE FUNCTION gst_registry_add_plugin(BYVAL AS GstRegistry PTR, BYVAL AS GstPlugin PTR) AS gboolean
DECLARE FUNCTION gst_registry_check_feature_version(BYVAL AS GstRegistry PTR, BYVAL AS const gchar PTR, BYVAL AS guint, BYVAL AS guint, BYVAL AS guint) AS gboolean
DECLARE FUNCTION gst_registry_feature_filter(BYVAL AS GstRegistry PTR, BYVAL AS GstPluginFeatureFilter, BYVAL AS gboolean, BYVAL AS gpointer) AS GList PTR
DECLARE FUNCTION gst_registry_find_feature(BYVAL AS GstRegistry PTR, BYVAL AS const gchar PTR, BYVAL AS GType) AS GstPluginFeature PTR
DECLARE FUNCTION gst_registry_find_plugin(BYVAL AS GstRegistry PTR, BYVAL AS const gchar PTR) AS GstPlugin PTR
DECLARE FUNCTION gst_registry_get_feature_list(BYVAL AS GstRegistry PTR, BYVAL AS GType) AS GList PTR
DECLARE FUNCTION gst_registry_get_feature_list_by_plugin(BYVAL AS GstRegistry PTR, BYVAL AS const gchar PTR) AS GList PTR
DECLARE FUNCTION gst_registry_get_feature_list_cookie(BYVAL AS GstRegistry PTR) AS guint32
DECLARE FUNCTION gst_registry_get_plugin_list(BYVAL AS GstRegistry PTR) AS GList PTR
DECLARE FUNCTION gst_registry_lookup(BYVAL AS GstRegistry PTR, BYVAL AS const char PTR) AS GstPlugin PTR
DECLARE FUNCTION gst_registry_lookup_feature(BYVAL AS GstRegistry PTR, BYVAL AS const char PTR) AS GstPluginFeature PTR
DECLARE FUNCTION gst_registry_plugin_filter(BYVAL AS GstRegistry PTR, BYVAL AS GstPluginFilter, BYVAL AS gboolean, BYVAL AS gpointer) AS GList PTR
DECLARE SUB gst_registry_remove_feature(BYVAL AS GstRegistry PTR, BYVAL AS GstPluginFeature PTR)
DECLARE SUB gst_registry_remove_plugin(BYVAL AS GstRegistry PTR, BYVAL AS GstPlugin PTR)
DECLARE FUNCTION gst_registry_scan_path(BYVAL AS GstRegistry PTR, BYVAL AS const gchar PTR) AS gboolean
TYPE _GstRegistryClass
  AS GstObjectClass parent_class
END TYPE
DECLARE FUNCTION gst_resource_error_get_type() AS GType
#DEFINE GST_TYPE_RESOURCE_ERROR (gst_resource_error_get_type())
DECLARE FUNCTION gst_sample_new(BYVAL AS GstBuffer PTR, BYVAL AS GstCaps PTR, BYVAL AS const GstSegment PTR, BYVAL AS GstStructure PTR) AS GstSample PTR
DECLARE FUNCTION gst_sample_get_buffer(BYVAL AS GstSample PTR) AS GstBuffer PTR
DECLARE FUNCTION gst_sample_get_buffer_list(BYVAL AS GstSample PTR) AS GstBufferList PTR
DECLARE FUNCTION gst_sample_get_caps(BYVAL AS GstSample PTR) AS GstCaps PTR
DECLARE FUNCTION gst_sample_get_info(BYVAL AS GstSample PTR) AS const GstStructure PTR
DECLARE FUNCTION gst_sample_get_segment(BYVAL AS GstSample PTR) AS GstSegment PTR
DECLARE SUB gst_sample_set_buffer(BYVAL AS GstSample PTR, BYVAL AS GstBuffer PTR)
DECLARE SUB gst_sample_set_buffer_list(BYVAL AS GstSample PTR, BYVAL AS GstBufferList PTR)
DECLARE SUB gst_sample_set_caps(BYVAL AS GstSample PTR, BYVAL AS GstCaps PTR)
DECLARE FUNCTION gst_sample_set_info(BYVAL AS GstSample PTR, BYVAL AS GstStructure PTR) AS gboolean
DECLARE SUB gst_sample_set_segment(BYVAL AS GstSample PTR, BYVAL AS const GstSegment PTR)
TYPE _GstSegment
  AS GstSegmentFlags flags
  AS gdouble rate
  AS gdouble applied_rate
  AS GstFormat format
  AS guint64 base
  AS guint64 offset
  AS guint64 start
  AS guint64 stop
  AS guint64 time
  AS guint64 position
  AS guint64 duration
  AS gpointer _gst_reserved(3)
END TYPE
DECLARE FUNCTION gst_search_mode_get_type() AS GType
#DEFINE GST_TYPE_SEARCH_MODE (gst_search_mode_get_type())
DECLARE FUNCTION gst_seek_type_get_type() AS GType
#DEFINE GST_TYPE_SEEK_TYPE (gst_seek_type_get_type())
DECLARE FUNCTION gst_segment_new() AS GstSegment PTR
DECLARE FUNCTION gst_segment_clip(BYVAL AS const GstSegment PTR, BYVAL AS GstFormat, BYVAL AS guint64, BYVAL AS guint64, BYVAL AS guint64 PTR, BYVAL AS guint64 PTR) AS gboolean
DECLARE FUNCTION gst_segment_copy(BYVAL AS const GstSegment PTR) AS GstSegment PTR
DECLARE SUB gst_segment_copy_into(BYVAL AS const GstSegment PTR, BYVAL AS GstSegment PTR)
DECLARE FUNCTION gst_segment_do_seek(BYVAL AS GstSegment PTR, BYVAL AS gdouble, BYVAL AS GstFormat, BYVAL AS GstSeekFlags, BYVAL AS GstSeekType, BYVAL AS guint64, BYVAL AS GstSeekType, BYVAL AS guint64, BYVAL AS gboolean PTR) AS gboolean
DECLARE SUB gst_segment_free(BYVAL AS GstSegment PTR)
DECLARE SUB gst_segment_init(BYVAL AS GstSegment PTR, BYVAL AS GstFormat)
DECLARE FUNCTION gst_segment_is_equal(BYVAL AS const GstSegment PTR, BYVAL AS const GstSegment PTR) AS gboolean
DECLARE FUNCTION gst_segment_offset_running_time(BYVAL AS GstSegment PTR, BYVAL AS GstFormat, BYVAL AS gint64) AS gboolean
DECLARE FUNCTION gst_segment_position_from_running_time(BYVAL AS const GstSegment PTR, BYVAL AS GstFormat, BYVAL AS guint64) AS guint64
DECLARE FUNCTION gst_segment_position_from_running_time_full(BYVAL AS const GstSegment PTR, BYVAL AS GstFormat, BYVAL AS guint64, BYVAL AS guint64 PTR) AS gint
DECLARE FUNCTION gst_segment_position_from_stream_time(BYVAL AS const GstSegment PTR, BYVAL AS GstFormat, BYVAL AS guint64) AS guint64
DECLARE FUNCTION gst_segment_position_from_stream_time_full(BYVAL AS const GstSegment PTR, BYVAL AS GstFormat, BYVAL AS guint64, BYVAL AS guint64 PTR) AS gint
DECLARE FUNCTION gst_segment_set_running_time(BYVAL AS GstSegment PTR, BYVAL AS GstFormat, BYVAL AS guint64) AS gboolean
DECLARE FUNCTION gst_segment_to_position(BYVAL AS const GstSegment PTR, BYVAL AS GstFormat, BYVAL AS guint64) AS guint64
DECLARE FUNCTION gst_segment_to_running_time(BYVAL AS const GstSegment PTR, BYVAL AS GstFormat, BYVAL AS guint64) AS guint64
DECLARE FUNCTION gst_segment_to_running_time_full(BYVAL AS const GstSegment PTR, BYVAL AS GstFormat, BYVAL AS guint64, BYVAL AS guint64 PTR) AS gint
DECLARE FUNCTION gst_segment_to_stream_time(BYVAL AS const GstSegment PTR, BYVAL AS GstFormat, BYVAL AS guint64) AS guint64
DECLARE FUNCTION gst_segment_to_stream_time_full(BYVAL AS const GstSegment PTR, BYVAL AS GstFormat, BYVAL AS guint64, BYVAL AS guint64 PTR) AS gint
TYPE _GstStaticCaps
  AS GstCaps PTR caps
  AS const char PTR string
  AS gpointer _gst_reserved(3)
END TYPE
DECLARE FUNCTION gst_state_get_type() AS GType
#DEFINE GST_TYPE_STATE (gst_state_get_type())
DECLARE FUNCTION gst_state_change_get_type() AS GType
#DEFINE GST_TYPE_STATE_CHANGE (gst_state_change_get_type())
DECLARE FUNCTION gst_state_change_return_get_type() AS GType
#DEFINE GST_TYPE_STATE_CHANGE_RETURN (gst_state_change_return_get_type())
DECLARE SUB gst_static_caps_cleanup(BYVAL AS GstStaticCaps PTR)
DECLARE FUNCTION gst_static_caps_get(BYVAL AS GstStaticCaps PTR) AS GstCaps PTR
TYPE _GstStaticPadTemplate
  AS const gchar PTR name_template
  AS GstPadDirection direction
  AS GstPadPresence presence
  AS GstStaticCaps static_caps
END TYPE
DECLARE FUNCTION gst_static_pad_template_get(BYVAL AS GstStaticPadTemplate PTR) AS GstPadTemplate PTR
DECLARE FUNCTION gst_static_pad_template_get_caps(BYVAL AS GstStaticPadTemplate PTR) AS GstCaps PTR
TYPE _GstStream
  AS GstObject object
  AS const gchar PTR stream_id
  AS GstStreamPrivate PTR priv
  AS gpointer _gst_reserved(3)
END TYPE
DECLARE FUNCTION gst_stream_get_type() AS GType
#DEFINE GST_TYPE_STREAM (gst_stream_get_type())
#DEFINE GST_STREAM(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GST_TYPE_STREAM, GstStream))
#DEFINE GST_STREAM_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GST_TYPE_STREAM, GstStreamClass))
#DEFINE GST_IS_STREAM(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GST_TYPE_STREAM))
#DEFINE GST_IS_CLASS_STREAM(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GST_TYPE_STREAM))
#DEFINE GST_STREAM_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GST_TYPE_STREAM, GstStreamClass))
DECLARE FUNCTION gst_stream_new(BYVAL AS const gchar PTR, BYVAL AS GstCaps PTR, BYVAL AS GstStreamType, BYVAL AS GstStreamFlags) AS GstStream PTR
DECLARE FUNCTION gst_stream_get_caps(BYVAL AS GstStream PTR) AS GstCaps PTR
DECLARE FUNCTION gst_stream_get_stream_flags(BYVAL AS GstStream PTR) AS GstStreamFlags
DECLARE FUNCTION gst_stream_get_stream_id(BYVAL AS GstStream PTR) AS const gchar PTR
DECLARE FUNCTION gst_stream_get_stream_type(BYVAL AS GstStream PTR) AS GstStreamType
DECLARE FUNCTION gst_stream_get_tags(BYVAL AS GstStream PTR) AS GstTagList PTR
DECLARE SUB gst_stream_set_caps(BYVAL AS GstStream PTR, BYVAL AS GstCaps PTR)
DECLARE SUB gst_stream_set_stream_flags(BYVAL AS GstStream PTR, BYVAL AS GstStreamFlags)
DECLARE SUB gst_stream_set_stream_type(BYVAL AS GstStream PTR, BYVAL AS GstStreamType)
DECLARE SUB gst_stream_set_tags(BYVAL AS GstStream PTR, BYVAL AS GstTagList PTR)
TYPE _GstStreamClass
  AS GstObjectClass parent_class
  AS gpointer _gst_reserved(3)
END TYPE
TYPE _GstStreamCollection
  AS GstObject object
  AS gchar PTR upstream_id
  AS GstStreamCollectionPrivate PTR priv
  AS gpointer _gst_reserved(3)
END TYPE
DECLARE FUNCTION gst_stream_collection_get_type() AS GType
#DEFINE GST_TYPE_STREAM_COLLECTION (gst_stream_collection_get_type())
#DEFINE GST_STREAM_COLLECTION(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GST_TYPE_STREAM_COLLECTION, GstStreamCollection))
#DEFINE GST_STREAM_COLLECTION_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GST_TYPE_STREAM_COLLECTION, GstStreamCollectionClass))
#DEFINE GST_IS_STREAM_COLLECTION(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GST_TYPE_STREAM_COLLECTION))
#DEFINE GST_IS_CLASS_STREAM_COLLECTION(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GST_TYPE_STREAM_COLLECTION))
#DEFINE GST_STREAM_COLLECTION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GST_TYPE_STREAM_COLLECTION, GstStreamCollectionClass))
DECLARE FUNCTION gst_stream_collection_new(BYVAL AS const gchar PTR) AS GstStreamCollection PTR
DECLARE FUNCTION gst_stream_collection_add_stream(BYVAL AS GstStreamCollection PTR, BYVAL AS GstStream PTR) AS gboolean
DECLARE FUNCTION gst_stream_collection_get_size(BYVAL AS GstStreamCollection PTR) AS guint
DECLARE FUNCTION gst_stream_collection_get_stream(BYVAL AS GstStreamCollection PTR, BYVAL AS guint) AS GstStream PTR
DECLARE FUNCTION gst_stream_collection_get_upstream_id(BYVAL AS GstStreamCollection PTR) AS const gchar PTR
TYPE _GstStreamCollectionClass
  AS GstObjectClass parent_class
  stream_notify AS SUB CDECL(BYVAL AS GstStreamCollection PTR, BYVAL AS GstStream PTR, BYVAL AS GParamSpec PTR)
  AS gpointer _gst_reserved(3)
END TYPE
DECLARE FUNCTION gst_stream_error_get_type() AS GType
#DEFINE GST_TYPE_STREAM_ERROR (gst_stream_error_get_type())
TYPE _GstStructure
  AS GType type
  AS GQuark name
END TYPE
DECLARE FUNCTION gst_stream_status_type_get_type() AS GType
#DEFINE GST_TYPE_STREAM_STATUS_TYPE (gst_stream_status_type_get_type())
DECLARE FUNCTION gst_structure_new(BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, ...) AS GstStructure PTR
DECLARE FUNCTION gst_structure_new_empty(BYVAL AS const gchar PTR) AS GstStructure PTR
DECLARE FUNCTION gst_structure_new_from_string(BYVAL AS const gchar PTR) AS GstStructure PTR
DECLARE FUNCTION gst_structure_new_id(BYVAL AS GQuark, BYVAL AS GQuark, ...) AS GstStructure PTR
DECLARE FUNCTION gst_structure_new_id_empty(BYVAL AS GQuark) AS GstStructure PTR
DECLARE FUNCTION gst_structure_new_valist(BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS va_list) AS GstStructure PTR
DECLARE FUNCTION gst_structure_can_intersect(BYVAL AS const GstStructure PTR, BYVAL AS const GstStructure PTR) AS gboolean
DECLARE FUNCTION gst_structure_copy(BYVAL AS const GstStructure PTR) AS GstStructure PTR
DECLARE SUB gst_structure_filter_and_map_in_place(BYVAL AS GstStructure PTR, BYVAL AS GstStructureFilterMapFunc, BYVAL AS gpointer)
DECLARE SUB gst_structure_fixate(BYVAL AS GstStructure PTR)
DECLARE FUNCTION gst_structure_fixate_field(BYVAL AS GstStructure PTR, BYVAL AS const char PTR) AS gboolean
DECLARE FUNCTION gst_structure_fixate_field_boolean(BYVAL AS GstStructure PTR, BYVAL AS const char PTR, BYVAL AS gboolean) AS gboolean
DECLARE FUNCTION gst_structure_fixate_field_nearest_double(BYVAL AS GstStructure PTR, BYVAL AS const char PTR, BYVAL AS double) AS gboolean
DECLARE FUNCTION gst_structure_fixate_field_nearest_fraction(BYVAL AS GstStructure PTR, BYVAL AS const char PTR, BYVAL AS const gint, BYVAL AS const gint) AS gboolean
DECLARE FUNCTION gst_structure_fixate_field_nearest_int(BYVAL AS GstStructure PTR, BYVAL AS const char PTR, BYVAL AS int) AS gboolean
DECLARE FUNCTION gst_structure_fixate_field_string(BYVAL AS GstStructure PTR, BYVAL AS const char PTR, BYVAL AS const gchar PTR) AS gboolean
DECLARE FUNCTION gst_structure_foreach(BYVAL AS const GstStructure PTR, BYVAL AS GstStructureForeachFunc, BYVAL AS gpointer) AS gboolean
DECLARE SUB gst_structure_free(BYVAL AS GstStructure PTR)
DECLARE FUNCTION gst_structure_get(BYVAL AS const GstStructure PTR, BYVAL AS const char PTR, ...) AS gboolean
DECLARE FUNCTION gst_structure_get_array(BYVAL AS GstStructure PTR, BYVAL AS const gchar PTR, BYVAL AS GValueArray PTR PTR) AS gboolean
DECLARE FUNCTION gst_structure_get_boolean(BYVAL AS const GstStructure PTR, BYVAL AS const gchar PTR, BYVAL AS gboolean PTR) AS gboolean
DECLARE FUNCTION gst_structure_get_clock_time(BYVAL AS const GstStructure PTR, BYVAL AS const gchar PTR, BYVAL AS GstClockTime PTR) AS gboolean
DECLARE FUNCTION gst_structure_get_date(BYVAL AS const GstStructure PTR, BYVAL AS const gchar PTR, BYVAL AS GDate PTR PTR) AS gboolean
DECLARE FUNCTION gst_structure_get_date_time(BYVAL AS const GstStructure PTR, BYVAL AS const gchar PTR, BYVAL AS GstDateTime PTR PTR) AS gboolean
DECLARE FUNCTION gst_structure_get_double(BYVAL AS const GstStructure PTR, BYVAL AS const gchar PTR, BYVAL AS gdouble PTR) AS gboolean
DECLARE FUNCTION gst_structure_get_enum(BYVAL AS const GstStructure PTR, BYVAL AS const gchar PTR, BYVAL AS GType, BYVAL AS gint PTR) AS gboolean
DECLARE FUNCTION gst_structure_get_field_type(BYVAL AS const GstStructure PTR, BYVAL AS const gchar PTR) AS GType
DECLARE FUNCTION gst_structure_get_flagset(BYVAL AS const GstStructure PTR, BYVAL AS const gchar PTR, BYVAL AS guint PTR, BYVAL AS guint PTR) AS gboolean
DECLARE FUNCTION gst_structure_get_fraction(BYVAL AS const GstStructure PTR, BYVAL AS const gchar PTR, BYVAL AS gint PTR, BYVAL AS gint PTR) AS gboolean
DECLARE FUNCTION gst_structure_get_int(BYVAL AS const GstStructure PTR, BYVAL AS const gchar PTR, BYVAL AS gint PTR) AS gboolean
DECLARE FUNCTION gst_structure_get_int64(BYVAL AS const GstStructure PTR, BYVAL AS const gchar PTR, BYVAL AS gint64 PTR) AS gboolean
DECLARE FUNCTION gst_structure_get_list(BYVAL AS GstStructure PTR, BYVAL AS const gchar PTR, BYVAL AS GValueArray PTR PTR) AS gboolean
DECLARE FUNCTION gst_structure_get_name(BYVAL AS const GstStructure PTR) AS const gchar PTR
DECLARE FUNCTION gst_structure_get_name_id(BYVAL AS const GstStructure PTR) AS GQuark
DECLARE FUNCTION gst_structure_get_string(BYVAL AS const GstStructure PTR, BYVAL AS const gchar PTR) AS const gchar PTR
DECLARE FUNCTION gst_structure_get_uint(BYVAL AS const GstStructure PTR, BYVAL AS const gchar PTR, BYVAL AS guint PTR) AS gboolean
DECLARE FUNCTION gst_structure_get_uint64(BYVAL AS const GstStructure PTR, BYVAL AS const gchar PTR, BYVAL AS guint64 PTR) AS gboolean
DECLARE FUNCTION gst_structure_get_valist(BYVAL AS const GstStructure PTR, BYVAL AS const char PTR, BYVAL AS va_list) AS gboolean
DECLARE FUNCTION gst_structure_get_value(BYVAL AS const GstStructure PTR, BYVAL AS const gchar PTR) AS const GValue PTR
DECLARE FUNCTION gst_structure_has_field(BYVAL AS const GstStructure PTR, BYVAL AS const gchar PTR) AS gboolean
DECLARE FUNCTION gst_structure_has_field_typed(BYVAL AS const GstStructure PTR, BYVAL AS const gchar PTR, BYVAL AS GType) AS gboolean
DECLARE FUNCTION gst_structure_has_name(BYVAL AS const GstStructure PTR, BYVAL AS const gchar PTR) AS gboolean
DECLARE FUNCTION gst_structure_id_get(BYVAL AS const GstStructure PTR, BYVAL AS GQuark, ...) AS gboolean
DECLARE FUNCTION gst_structure_id_get_valist(BYVAL AS const GstStructure PTR, BYVAL AS GQuark, BYVAL AS va_list) AS gboolean
DECLARE FUNCTION gst_structure_id_get_value(BYVAL AS const GstStructure PTR, BYVAL AS GQuark) AS const GValue PTR
DECLARE FUNCTION gst_structure_id_has_field(BYVAL AS const GstStructure PTR, BYVAL AS GQuark) AS gboolean
DECLARE FUNCTION gst_structure_id_has_field_typed(BYVAL AS const GstStructure PTR, BYVAL AS GQuark, BYVAL AS GType) AS gboolean
DECLARE SUB gst_structure_id_set(BYVAL AS GstStructure PTR, BYVAL AS GQuark, ...)
DECLARE SUB gst_structure_id_set_valist(BYVAL AS GstStructure PTR, BYVAL AS GQuark, BYVAL AS va_list)
DECLARE SUB gst_structure_id_set_value(BYVAL AS GstStructure PTR, BYVAL AS GQuark, BYVAL AS const GValue PTR)
DECLARE SUB gst_structure_id_take_value(BYVAL AS GstStructure PTR, BYVAL AS GQuark, BYVAL AS GValue PTR)
DECLARE FUNCTION gst_structure_intersect(BYVAL AS const GstStructure PTR, BYVAL AS const GstStructure PTR) AS GstStructure PTR
DECLARE FUNCTION gst_structure_is_equal(BYVAL AS const GstStructure PTR, BYVAL AS const GstStructure PTR) AS gboolean
DECLARE FUNCTION gst_structure_is_subset(BYVAL AS const GstStructure PTR, BYVAL AS const GstStructure PTR) AS gboolean
DECLARE FUNCTION gst_structure_map_in_place(BYVAL AS GstStructure PTR, BYVAL AS GstStructureMapFunc, BYVAL AS gpointer) AS gboolean
DECLARE FUNCTION gst_structure_n_fields(BYVAL AS const GstStructure PTR) AS gint
DECLARE FUNCTION gst_structure_nth_field_name(BYVAL AS const GstStructure PTR, BYVAL AS guint) AS const gchar PTR
DECLARE SUB gst_structure_remove_all_fields(BYVAL AS GstStructure PTR)
DECLARE SUB gst_structure_remove_field(BYVAL AS GstStructure PTR, BYVAL AS const gchar PTR)
DECLARE SUB gst_structure_remove_fields(BYVAL AS GstStructure PTR, BYVAL AS const gchar PTR, ...)
DECLARE SUB gst_structure_remove_fields_valist(BYVAL AS GstStructure PTR, BYVAL AS const gchar PTR, BYVAL AS va_list)
DECLARE SUB gst_structure_set(BYVAL AS GstStructure PTR, BYVAL AS const gchar PTR, ...)
DECLARE SUB gst_structure_set_array(BYVAL AS GstStructure PTR, BYVAL AS const gchar PTR, BYVAL AS const GValueArray PTR)
DECLARE SUB gst_structure_set_list(BYVAL AS GstStructure PTR, BYVAL AS const gchar PTR, BYVAL AS const GValueArray PTR)
DECLARE SUB gst_structure_set_name(BYVAL AS GstStructure PTR, BYVAL AS const gchar PTR)
DECLARE FUNCTION gst_structure_set_parent_refcount(BYVAL AS GstStructure PTR, BYVAL AS gint PTR) AS gboolean
DECLARE SUB gst_structure_set_valist(BYVAL AS GstStructure PTR, BYVAL AS const gchar PTR, BYVAL AS va_list)
DECLARE SUB gst_structure_set_value(BYVAL AS GstStructure PTR, BYVAL AS const gchar PTR, BYVAL AS const GValue PTR)
DECLARE SUB gst_structure_take_value(BYVAL AS GstStructure PTR, BYVAL AS const gchar PTR, BYVAL AS GValue PTR)
DECLARE FUNCTION gst_structure_to_string(BYVAL AS const GstStructure PTR) AS gchar PTR
DECLARE FUNCTION gst_structure_from_string(BYVAL AS const gchar PTR, BYVAL AS gchar PTR PTR) AS GstStructure PTR
TYPE GstStructureFilterMapFunc AS FUNCTION CDECL(BYVAL AS GQuark, BYVAL AS GValue PTR, BYVAL AS gpointer) AS gboolean
TYPE GstStructureForeachFunc AS FUNCTION CDECL(BYVAL AS GQuark, BYVAL AS const GValue PTR, BYVAL AS gpointer) AS gboolean
TYPE GstStructureMapFunc AS FUNCTION CDECL(BYVAL AS GQuark, BYVAL AS GValue PTR, BYVAL AS gpointer) AS gboolean
TYPE _GstSystemClock
  AS GstClock clock
  AS GstSystemClockPrivate PTR priv
  AS gpointer _gst_reserved(3)
END TYPE
DECLARE FUNCTION gst_structure_change_type_get_type() AS GType
#DEFINE GST_TYPE_STRUCTURE_CHANGE_TYPE (gst_structure_change_type_get_type())
DECLARE FUNCTION gst_system_clock_get_type() AS GType
#DEFINE GST_TYPE_SYSTEM_CLOCK (gst_system_clock_get_type())
#DEFINE GST_SYSTEM_CLOCK(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GST_TYPE_SYSTEM_CLOCK, GstSystemClock))
#DEFINE GST_SYSTEM_CLOCK_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GST_TYPE_SYSTEM_CLOCK, GstSystemClockClass))
#DEFINE GST_IS_SYSTEM_CLOCK(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GST_TYPE_SYSTEM_CLOCK))
#DEFINE GST_IS_CLASS_SYSTEM_CLOCK(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GST_TYPE_SYSTEM_CLOCK))
#DEFINE GST_SYSTEM_CLOCK_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GST_TYPE_SYSTEM_CLOCK, GstSystemClockClass))
DECLARE FUNCTION gst_system_clock_obtain() AS GstClock PTR
DECLARE SUB gst_system_clock_set_default(BYVAL AS GstClock PTR)
TYPE _GstSystemClockClass
  AS GstClockClass parent_class
  AS gpointer _gst_reserved(3)
END TYPE
TYPE GstTagForeachFunc AS SUB CDECL(BYVAL AS const GstTagList PTR, BYVAL AS const gchar PTR, BYVAL AS gpointer)
TYPE _GstTagList
  AS GstMiniObject mini_object
END TYPE
DECLARE FUNCTION gst_tag_flag_get_type() AS GType
#DEFINE GST_TYPE_TAG_FLAG (gst_tag_flag_get_type())
DECLARE FUNCTION gst_tag_list_new(BYVAL AS const gchar PTR, ...) AS GstTagList PTR
DECLARE FUNCTION gst_tag_list_new_empty() AS GstTagList PTR
DECLARE FUNCTION gst_tag_list_new_from_string(BYVAL AS const gchar PTR) AS GstTagList PTR
DECLARE FUNCTION gst_tag_list_new_valist(BYVAL AS va_list) AS GstTagList PTR
DECLARE SUB gst_tag_list_add(BYVAL AS GstTagList PTR, BYVAL AS GstTagMergeMode, BYVAL AS const gchar PTR, ...)
DECLARE SUB gst_tag_list_add_valist(BYVAL AS GstTagList PTR, BYVAL AS GstTagMergeMode, BYVAL AS const gchar PTR, BYVAL AS va_list)
DECLARE SUB gst_tag_list_add_valist_values(BYVAL AS GstTagList PTR, BYVAL AS GstTagMergeMode, BYVAL AS const gchar PTR, BYVAL AS va_list)
DECLARE SUB gst_tag_list_add_value(BYVAL AS GstTagList PTR, BYVAL AS GstTagMergeMode, BYVAL AS const gchar PTR, BYVAL AS const GValue PTR)
DECLARE SUB gst_tag_list_add_values(BYVAL AS GstTagList PTR, BYVAL AS GstTagMergeMode, BYVAL AS const gchar PTR, ...)
DECLARE SUB gst_tag_list_foreach(BYVAL AS const GstTagList PTR, BYVAL AS GstTagForeachFunc, BYVAL AS gpointer)
DECLARE FUNCTION gst_tag_list_get_boolean(BYVAL AS const GstTagList PTR, BYVAL AS const gchar PTR, BYVAL AS gboolean PTR) AS gboolean
DECLARE FUNCTION gst_tag_list_get_boolean_index(BYVAL AS const GstTagList PTR, BYVAL AS const gchar PTR, BYVAL AS guint, BYVAL AS gboolean PTR) AS gboolean
DECLARE FUNCTION gst_tag_list_get_date(BYVAL AS const GstTagList PTR, BYVAL AS const gchar PTR, BYVAL AS GDate PTR PTR) AS gboolean
DECLARE FUNCTION gst_tag_list_get_date_index(BYVAL AS const GstTagList PTR, BYVAL AS const gchar PTR, BYVAL AS guint, BYVAL AS GDate PTR PTR) AS gboolean
DECLARE FUNCTION gst_tag_list_get_date_time(BYVAL AS const GstTagList PTR, BYVAL AS const gchar PTR, BYVAL AS GstDateTime PTR PTR) AS gboolean
DECLARE FUNCTION gst_tag_list_get_date_time_index(BYVAL AS const GstTagList PTR, BYVAL AS const gchar PTR, BYVAL AS guint, BYVAL AS GstDateTime PTR PTR) AS gboolean
DECLARE FUNCTION gst_tag_list_get_double(BYVAL AS const GstTagList PTR, BYVAL AS const gchar PTR, BYVAL AS gdouble PTR) AS gboolean
DECLARE FUNCTION gst_tag_list_get_double_index(BYVAL AS const GstTagList PTR, BYVAL AS const gchar PTR, BYVAL AS guint, BYVAL AS gdouble PTR) AS gboolean
DECLARE FUNCTION gst_tag_list_get_float(BYVAL AS const GstTagList PTR, BYVAL AS const gchar PTR, BYVAL AS gfloat PTR) AS gboolean
DECLARE FUNCTION gst_tag_list_get_float_index(BYVAL AS const GstTagList PTR, BYVAL AS const gchar PTR, BYVAL AS guint, BYVAL AS gfloat PTR) AS gboolean
DECLARE FUNCTION gst_tag_list_get_int(BYVAL AS const GstTagList PTR, BYVAL AS const gchar PTR, BYVAL AS gint PTR) AS gboolean
DECLARE FUNCTION gst_tag_list_get_int64(BYVAL AS const GstTagList PTR, BYVAL AS const gchar PTR, BYVAL AS gint64 PTR) AS gboolean
DECLARE FUNCTION gst_tag_list_get_int64_index(BYVAL AS const GstTagList PTR, BYVAL AS const gchar PTR, BYVAL AS guint, BYVAL AS gint64 PTR) AS gboolean
DECLARE FUNCTION gst_tag_list_get_int_index(BYVAL AS const GstTagList PTR, BYVAL AS const gchar PTR, BYVAL AS guint, BYVAL AS gint PTR) AS gboolean
DECLARE FUNCTION gst_tag_list_get_pointer(BYVAL AS const GstTagList PTR, BYVAL AS const gchar PTR, BYVAL AS gpointer PTR) AS gboolean
DECLARE FUNCTION gst_tag_list_get_pointer_index(BYVAL AS const GstTagList PTR, BYVAL AS const gchar PTR, BYVAL AS guint, BYVAL AS gpointer PTR) AS gboolean
DECLARE FUNCTION gst_tag_list_get_sample(BYVAL AS const GstTagList PTR, BYVAL AS const gchar PTR, BYVAL AS GstSample PTR PTR) AS gboolean
DECLARE FUNCTION gst_tag_list_get_sample_index(BYVAL AS const GstTagList PTR, BYVAL AS const gchar PTR, BYVAL AS guint, BYVAL AS GstSample PTR PTR) AS gboolean
DECLARE FUNCTION gst_tag_list_get_scope(BYVAL AS const GstTagList PTR) AS GstTagScope
DECLARE FUNCTION gst_tag_list_get_string(BYVAL AS const GstTagList PTR, BYVAL AS const gchar PTR, BYVAL AS gchar PTR PTR) AS gboolean
DECLARE FUNCTION gst_tag_list_get_string_index(BYVAL AS const GstTagList PTR, BYVAL AS const gchar PTR, BYVAL AS guint, BYVAL AS gchar PTR PTR) AS gboolean
DECLARE FUNCTION gst_tag_list_get_tag_size(BYVAL AS const GstTagList PTR, BYVAL AS const gchar PTR) AS guint
DECLARE FUNCTION gst_tag_list_get_uint(BYVAL AS const GstTagList PTR, BYVAL AS const gchar PTR, BYVAL AS guint PTR) AS gboolean
DECLARE FUNCTION gst_tag_list_get_uint64(BYVAL AS const GstTagList PTR, BYVAL AS const gchar PTR, BYVAL AS guint64 PTR) AS gboolean
DECLARE FUNCTION gst_tag_list_get_uint64_index(BYVAL AS const GstTagList PTR, BYVAL AS const gchar PTR, BYVAL AS guint, BYVAL AS guint64 PTR) AS gboolean
DECLARE FUNCTION gst_tag_list_get_uint_index(BYVAL AS const GstTagList PTR, BYVAL AS const gchar PTR, BYVAL AS guint, BYVAL AS guint PTR) AS gboolean
DECLARE FUNCTION gst_tag_list_get_value_index(BYVAL AS const GstTagList PTR, BYVAL AS const gchar PTR, BYVAL AS guint) AS const GValue PTR
DECLARE SUB gst_tag_list_insert(BYVAL AS GstTagList PTR, BYVAL AS const GstTagList PTR, BYVAL AS GstTagMergeMode)
DECLARE FUNCTION gst_tag_list_is_empty(BYVAL AS const GstTagList PTR) AS gboolean
DECLARE FUNCTION gst_tag_list_is_equal(BYVAL AS const GstTagList PTR, BYVAL AS const GstTagList PTR) AS gboolean
DECLARE FUNCTION gst_tag_list_merge(BYVAL AS const GstTagList PTR, BYVAL AS const GstTagList PTR, BYVAL AS GstTagMergeMode) AS GstTagList PTR
DECLARE FUNCTION gst_tag_list_n_tags(BYVAL AS const GstTagList PTR) AS gint
DECLARE FUNCTION gst_tag_list_nth_tag_name(BYVAL AS const GstTagList PTR, BYVAL AS guint) AS const gchar PTR
DECLARE FUNCTION gst_tag_list_peek_string_index(BYVAL AS const GstTagList PTR, BYVAL AS const gchar PTR, BYVAL AS guint, BYVAL AS const gchar PTR PTR) AS gboolean
DECLARE SUB gst_tag_list_remove_tag(BYVAL AS GstTagList PTR, BYVAL AS const gchar PTR)
DECLARE SUB gst_tag_list_set_scope(BYVAL AS GstTagList PTR, BYVAL AS GstTagScope)
DECLARE FUNCTION gst_tag_list_to_string(BYVAL AS const GstTagList PTR) AS gchar PTR
DECLARE FUNCTION gst_tag_list_copy_value(BYVAL AS GValue PTR, BYVAL AS const GstTagList PTR, BYVAL AS const gchar PTR) AS gboolean
TYPE GstTagMergeFunc AS SUB CDECL(BYVAL AS GValue PTR, BYVAL AS const GValue PTR)
DECLARE FUNCTION gst_tag_merge_mode_get_type() AS GType
#DEFINE GST_TYPE_TAG_MERGE_MODE (gst_tag_merge_mode_get_type())
DECLARE FUNCTION gst_tag_scope_get_type() AS GType
#DEFINE GST_TYPE_TAG_SCOPE (gst_tag_scope_get_type())
DECLARE FUNCTION gst_tag_setter_get_type() AS GType
#DEFINE GST_TYPE_TAG_SETTER (gst_tag_setter_get_type())
#DEFINE GST_TAG_SETTER(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GST_TYPE_TAG_SETTER, GstTagSetter))
#DEFINE GST_TAG_SETTER_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GST_TYPE_TAG_SETTER, GstTagSetterInterface))
#DEFINE GST_IS_TAG_SETTER(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GST_TYPE_TAG_SETTER))
#DEFINE GST_TAG_SETTER_GET_IFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE((obj), GST_TYPE_TAG_SETTER, GstTagSetterInterface))
DECLARE SUB gst_tag_setter_add_tag_valist(BYVAL AS GstTagSetter PTR, BYVAL AS GstTagMergeMode, BYVAL AS const gchar PTR, BYVAL AS va_list)
DECLARE SUB gst_tag_setter_add_tag_valist_values(BYVAL AS GstTagSetter PTR, BYVAL AS GstTagMergeMode, BYVAL AS const gchar PTR, BYVAL AS va_list)
DECLARE SUB gst_tag_setter_add_tag_value(BYVAL AS GstTagSetter PTR, BYVAL AS GstTagMergeMode, BYVAL AS const gchar PTR, BYVAL AS const GValue PTR)
DECLARE SUB gst_tag_setter_add_tag_values(BYVAL AS GstTagSetter PTR, BYVAL AS GstTagMergeMode, BYVAL AS const gchar PTR, ...)
DECLARE SUB gst_tag_setter_add_tags(BYVAL AS GstTagSetter PTR, BYVAL AS GstTagMergeMode, BYVAL AS const gchar PTR, ...)
DECLARE FUNCTION gst_tag_setter_get_tag_list(BYVAL AS GstTagSetter PTR) AS const GstTagList PTR
DECLARE FUNCTION gst_tag_setter_get_tag_merge_mode(BYVAL AS GstTagSetter PTR) AS GstTagMergeMode
DECLARE SUB gst_tag_setter_merge_tags(BYVAL AS GstTagSetter PTR, BYVAL AS const GstTagList PTR, BYVAL AS GstTagMergeMode)
DECLARE SUB gst_tag_setter_reset_tags(BYVAL AS GstTagSetter PTR)
DECLARE SUB gst_tag_setter_set_tag_merge_mode(BYVAL AS GstTagSetter PTR, BYVAL AS GstTagMergeMode)
TYPE _GstTagSetterInterface
  AS GTypeInterface g_iface
END TYPE
TYPE _GstTask
  AS GstObject object
  AS GstTaskState state
  AS GCond cond
  AS GRecMutex PTR lock
  AS GstTaskFunction func
  AS gpointer user_data
  AS GDestroyNotify notify
  AS gboolean running
  AS GThread PTR thread
  AS GstTaskPrivate PTR priv
  AS gpointer _gst_reserved(3)
END TYPE
DECLARE FUNCTION gst_task_get_type() AS GType
#DEFINE GST_TYPE_TASK (gst_task_get_type())
#DEFINE GST_TASK(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GST_TYPE_TASK, GstTask))
#DEFINE GST_TASK_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GST_TYPE_TASK, GstTaskClass))
#DEFINE GST_IS_TASK(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GST_TYPE_TASK))
#DEFINE GST_IS_CLASS_TASK(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GST_TYPE_TASK))
#DEFINE GST_TASK_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GST_TYPE_TASK, GstTaskClass))
DECLARE FUNCTION gst_task_new(BYVAL AS GstTaskFunction, BYVAL AS gpointer, BYVAL AS GDestroyNotify) AS GstTask PTR
DECLARE SUB gst_task_cleanup_all()
DECLARE FUNCTION gst_task_get_pool(BYVAL AS GstTask PTR) AS GstTaskPool PTR
DECLARE FUNCTION gst_task_get_state(BYVAL AS GstTask PTR) AS GstTaskState
DECLARE FUNCTION gst_task_join(BYVAL AS GstTask PTR) AS gboolean
DECLARE FUNCTION gst_task_pause(BYVAL AS GstTask PTR) AS gboolean
DECLARE SUB gst_task_set_enter_callback(BYVAL AS GstTask PTR, BYVAL AS GstTaskThreadFunc, BYVAL AS gpointer, BYVAL AS GDestroyNotify)
DECLARE SUB gst_task_set_leave_callback(BYVAL AS GstTask PTR, BYVAL AS GstTaskThreadFunc, BYVAL AS gpointer, BYVAL AS GDestroyNotify)
DECLARE SUB gst_task_set_lock(BYVAL AS GstTask PTR, BYVAL AS GRecMutex PTR)
DECLARE SUB gst_task_set_pool(BYVAL AS GstTask PTR, BYVAL AS GstTaskPool PTR)
DECLARE FUNCTION gst_task_set_state(BYVAL AS GstTask PTR, BYVAL AS GstTaskState) AS gboolean
DECLARE FUNCTION gst_task_start(BYVAL AS GstTask PTR) AS gboolean
DECLARE FUNCTION gst_task_stop(BYVAL AS GstTask PTR) AS gboolean
TYPE _GstTaskClass
  AS GstObjectClass parent_class
  AS GstTaskPool PTR pool
  AS gpointer _gst_reserved(3)
END TYPE
TYPE GstTaskFunction AS SUB CDECL(BYVAL AS gpointer)
TYPE _GstTaskPool
  AS GstObject object
  AS GThreadPool PTR pool
  AS gpointer _gst_reserved(3)
END TYPE
DECLARE FUNCTION gst_task_pool_get_type() AS GType
#DEFINE GST_TYPE_TASK_POOL (gst_task_pool_get_type())
#DEFINE GST_TASK_POOL(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GST_TYPE_TASK_POOL, GstTaskPool))
#DEFINE GST_TASK_POOL_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GST_TYPE_TASK_POOL, GstTaskPoolClass))
#DEFINE GST_IS_TASK_POOL(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GST_TYPE_TASK_POOL))
#DEFINE GST_IS_CLASS_TASK_POOL(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GST_TYPE_TASK_POOL))
#DEFINE GST_TASK_POOL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GST_TYPE_TASK_POOL, GstTaskPoolClass))
DECLARE FUNCTION gst_task_pool_new() AS GstTaskPool PTR
DECLARE SUB gst_task_pool_cleanup(BYVAL AS GstTaskPool PTR)
DECLARE SUB gst_task_pool_join(BYVAL AS GstTaskPool PTR, BYVAL AS gpointer)
DECLARE SUB gst_task_pool_prepare(BYVAL AS GstTaskPool PTR, BYVAL AS GError PTR PTR)
DECLARE FUNCTION gst_task_pool_push(BYVAL AS GstTaskPool PTR, BYVAL AS GstTaskPoolFunction, BYVAL AS gpointer, BYVAL AS GError PTR PTR) AS gpointer
TYPE _GstTaskPoolClass
  AS GstObjectClass parent_class
  prepare AS SUB CDECL(BYVAL AS GstTaskPool PTR, BYVAL AS GError PTR PTR)
  cleanup AS SUB CDECL(BYVAL AS GstTaskPool PTR)
  push AS FUNCTION CDECL(BYVAL AS GstTaskPool PTR, BYVAL AS GstTaskPoolFunction, BYVAL AS gpointer, BYVAL AS GError PTR PTR) AS gpointer
  join AS SUB CDECL(BYVAL AS GstTaskPool PTR, BYVAL AS gpointer)
  AS gpointer _gst_reserved(3)
END TYPE
TYPE GstTaskPoolFunction AS SUB CDECL(BYVAL AS void PTR)
TYPE GstTaskThreadFunc AS SUB CDECL(BYVAL AS GstTask PTR, BYVAL AS GThread PTR, BYVAL AS gpointer)
TYPE _GstTimedValue
  AS GstClockTime timestamp
  AS gdouble value
END TYPE
DECLARE FUNCTION gst_task_state_get_type() AS GType
#DEFINE GST_TYPE_TASK_STATE (gst_task_state_get_type())
DECLARE FUNCTION gst_toc_new(BYVAL AS GstTocScope) AS GstToc PTR
DECLARE SUB gst_toc_append_entry(BYVAL AS GstToc PTR, BYVAL AS GstTocEntry PTR)
DECLARE SUB gst_toc_dump(BYVAL AS GstToc PTR)
DECLARE FUNCTION gst_toc_find_entry(BYVAL AS const GstToc PTR, BYVAL AS const gchar PTR) AS GstTocEntry PTR
DECLARE FUNCTION gst_toc_get_entries(BYVAL AS const GstToc PTR) AS GList PTR
DECLARE FUNCTION gst_toc_get_scope(BYVAL AS const GstToc PTR) AS GstTocScope
DECLARE FUNCTION gst_toc_get_tags(BYVAL AS const GstToc PTR) AS GstTagList PTR
DECLARE SUB gst_toc_merge_tags(BYVAL AS GstToc PTR, BYVAL AS GstTagList PTR, BYVAL AS GstTagMergeMode)
DECLARE SUB gst_toc_set_tags(BYVAL AS GstToc PTR, BYVAL AS GstTagList PTR)
DECLARE FUNCTION gst_toc_entry_new(BYVAL AS GstTocEntryType, BYVAL AS const gchar PTR) AS GstTocEntry PTR
DECLARE SUB gst_toc_entry_append_sub_entry(BYVAL AS GstTocEntry PTR, BYVAL AS GstTocEntry PTR)
DECLARE FUNCTION gst_toc_entry_get_entry_type(BYVAL AS const GstTocEntry PTR) AS GstTocEntryType
DECLARE FUNCTION gst_toc_entry_get_loop(BYVAL AS const GstTocEntry PTR, BYVAL AS GstTocLoopType PTR, BYVAL AS gint PTR) AS gboolean
DECLARE FUNCTION gst_toc_entry_get_parent(BYVAL AS GstTocEntry PTR) AS GstTocEntry PTR
DECLARE FUNCTION gst_toc_entry_get_start_stop_times(BYVAL AS const GstTocEntry PTR, BYVAL AS gint64 PTR, BYVAL AS gint64 PTR) AS gboolean
DECLARE FUNCTION gst_toc_entry_get_sub_entries(BYVAL AS const GstTocEntry PTR) AS GList PTR
DECLARE FUNCTION gst_toc_entry_get_tags(BYVAL AS const GstTocEntry PTR) AS GstTagList PTR
DECLARE FUNCTION gst_toc_entry_get_toc(BYVAL AS GstTocEntry PTR) AS GstToc PTR
DECLARE FUNCTION gst_toc_entry_get_uid(BYVAL AS const GstTocEntry PTR) AS const gchar PTR
DECLARE FUNCTION gst_toc_entry_is_alternative(BYVAL AS const GstTocEntry PTR) AS gboolean
DECLARE FUNCTION gst_toc_entry_is_sequence(BYVAL AS const GstTocEntry PTR) AS gboolean
DECLARE SUB gst_toc_entry_merge_tags(BYVAL AS GstTocEntry PTR, BYVAL AS GstTagList PTR, BYVAL AS GstTagMergeMode)
DECLARE SUB gst_toc_entry_set_loop(BYVAL AS GstTocEntry PTR, BYVAL AS GstTocLoopType, BYVAL AS gint)
DECLARE SUB gst_toc_entry_set_start_stop_times(BYVAL AS GstTocEntry PTR, BYVAL AS gint64, BYVAL AS gint64)
DECLARE SUB gst_toc_entry_set_tags(BYVAL AS GstTocEntry PTR, BYVAL AS GstTagList PTR)
DECLARE FUNCTION gst_toc_entry_type_get_type() AS GType
#DEFINE GST_TYPE_TOC_ENTRY_TYPE (gst_toc_entry_type_get_type())
DECLARE FUNCTION gst_toc_loop_type_get_type() AS GType
#DEFINE GST_TYPE_TOC_LOOP_TYPE (gst_toc_loop_type_get_type())
DECLARE FUNCTION gst_toc_scope_get_type() AS GType
#DEFINE GST_TYPE_TOC_SCOPE (gst_toc_scope_get_type())
DECLARE FUNCTION gst_toc_setter_get_type() AS GType
#DEFINE GST_TYPE_TOC_SETTER (gst_toc_setter_get_type())
#DEFINE GST_TOC_SETTER(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GST_TYPE_TOC_SETTER, GstTocSetter))
#DEFINE GST_TOC_SETTER_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GST_TYPE_TOC_SETTER, GstTocSetterInterface))
#DEFINE GST_IS_TOC_SETTER(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GST_TYPE_TOC_SETTER))
#DEFINE GST_TOC_SETTER_GET_IFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE((obj), GST_TYPE_TOC_SETTER, GstTocSetterInterface))
DECLARE FUNCTION gst_toc_setter_get_toc(BYVAL AS GstTocSetter PTR) AS GstToc PTR
DECLARE SUB gst_toc_setter_reset(BYVAL AS GstTocSetter PTR)
DECLARE SUB gst_toc_setter_set_toc(BYVAL AS GstTocSetter PTR, BYVAL AS GstToc PTR)
TYPE _GstTocSetterInterface
  AS GTypeInterface g_iface
END TYPE
TYPE _GstTracer
  AS GstObject parent
  AS GstTracerPrivate PTR priv
  AS gpointer _gst_reserved(3)
END TYPE
DECLARE FUNCTION gst_tracer_get_type() AS GType
#DEFINE GST_TYPE_TRACER (gst_tracer_get_type())
#DEFINE GST_TRACER(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GST_TYPE_TRACER, GstTracer))
#DEFINE GST_TRACER_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GST_TYPE_TRACER, GstTracerClass))
#DEFINE GST_IS_TRACER(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GST_TYPE_TRACER))
#DEFINE GST_IS_CLASS_TRACER(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GST_TYPE_TRACER))
#DEFINE GST_TRACER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GST_TYPE_TRACER, GstTracerClass))
TYPE _GstTracerClass
  AS GstObjectClass parent_class
  AS gpointer _gst_reserved(3)
END TYPE
DECLARE FUNCTION gst_tracer_factory_get_type() AS GType
#DEFINE GST_TYPE_TRACER_FACTORY (gst_tracer_factory_get_type())
#DEFINE GST_TRACER_FACTORY(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GST_TYPE_TRACER_FACTORY, GstTracerFactory))
#DEFINE GST_TRACER_FACTORY_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GST_TYPE_TRACER_FACTORY, GstTracerFactoryClass))
#DEFINE GST_IS_TRACER_FACTORY(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GST_TYPE_TRACER_FACTORY))
#DEFINE GST_IS_CLASS_TRACER_FACTORY(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GST_TYPE_TRACER_FACTORY))
#DEFINE GST_TRACER_FACTORY_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GST_TYPE_TRACER_FACTORY, GstTracerFactoryClass))
DECLARE FUNCTION gst_tracer_factory_get_list() AS GList PTR
DECLARE FUNCTION gst_tracer_factory_get_tracer_type(BYVAL AS GstTracerFactory PTR) AS GType
DECLARE FUNCTION gst_tracer_record_get_type() AS GType
#DEFINE GST_TYPE_TRACER_RECORD (gst_tracer_record_get_type())
#DEFINE GST_TRACER_RECORD(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GST_TYPE_TRACER_RECORD, GstTracerRecord))
#DEFINE GST_TRACER_RECORD_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GST_TYPE_TRACER_RECORD, GstTracerRecordClass))
#DEFINE GST_IS_TRACER_RECORD(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GST_TYPE_TRACER_RECORD))
#DEFINE GST_IS_CLASS_TRACER_RECORD(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GST_TYPE_TRACER_RECORD))
#DEFINE GST_TRACER_RECORD_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GST_TYPE_TRACER_RECORD, GstTracerRecordClass))
TYPE _GstTypeFind
  peek AS FUNCTION CDECL(BYVAL AS gpointer, BYVAL AS gint64, BYVAL AS guint) AS const guint8 PTR
  suggest AS SUB CDECL(BYVAL AS gpointer, BYVAL AS guint, BYVAL AS GstCaps PTR)
  AS gpointer data
  get_length AS FUNCTION CDECL(BYVAL AS gpointer) AS guint64
  AS gpointer _gst_reserved(3)
END TYPE
DECLARE FUNCTION gst_tracer_value_scope_get_type() AS GType
#DEFINE GST_TYPE_TRACER_VALUE_SCOPE (gst_tracer_value_scope_get_type())
DECLARE FUNCTION gst_type_find_get_length(BYVAL AS GstTypeFind PTR) AS guint64
DECLARE FUNCTION gst_type_find_peek(BYVAL AS GstTypeFind PTR, BYVAL AS gint64, BYVAL AS guint) AS const guint8 PTR
DECLARE SUB gst_type_find_suggest(BYVAL AS GstTypeFind PTR, BYVAL AS guint, BYVAL AS GstCaps PTR)
DECLARE SUB gst_type_find_suggest_simple(BYVAL AS GstTypeFind PTR, BYVAL AS guint, BYVAL AS const char PTR, BYVAL AS const char PTR, ...)
DECLARE FUNCTION gst_type_find_register(BYVAL AS GstPlugin PTR, BYVAL AS const gchar PTR, BYVAL AS guint, BYVAL AS GstTypeFindFunction, BYVAL AS const gchar PTR, BYVAL AS GstCaps PTR, BYVAL AS gpointer, BYVAL AS GDestroyNotify) AS gboolean
DECLARE FUNCTION gst_type_find_factory_get_type() AS GType
#DEFINE GST_TYPE_TYPE_FIND_FACTORY (gst_type_find_factory_get_type())
#DEFINE GST_TYPE_FIND_FACTORY(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GST_TYPE_TYPE_FIND_FACTORY, GstTypeFindFactory))
#DEFINE GST_TYPE_FIND_FACTORY_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GST_TYPE_TYPE_FIND_FACTORY, GstTypeFindFactoryClass))
#DEFINE GST_IS_TYPE_FIND_FACTORY(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GST_TYPE_TYPE_FIND_FACTORY))
#DEFINE GST_IS_CLASS_TYPE_FIND_FACTORY(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GST_TYPE_TYPE_FIND_FACTORY))
#DEFINE GST_TYPE_FIND_FACTORY_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GST_TYPE_TYPE_FIND_FACTORY, GstTypeFindFactoryClass))
DECLARE FUNCTION gst_type_find_factory_get_list() AS GList PTR
DECLARE SUB gst_type_find_factory_call_function(BYVAL AS GstTypeFindFactory PTR, BYVAL AS GstTypeFind PTR)
DECLARE FUNCTION gst_type_find_factory_get_caps(BYVAL AS GstTypeFindFactory PTR) AS GstCaps PTR
DECLARE FUNCTION gst_type_find_factory_get_extensions(BYVAL AS GstTypeFindFactory PTR) AS const gchar* const PTR
DECLARE FUNCTION gst_type_find_factory_has_function(BYVAL AS GstTypeFindFactory PTR) AS gboolean
TYPE GstTypeFindFunction AS SUB CDECL(BYVAL AS GstTypeFind PTR, BYVAL AS gpointer)
DECLARE FUNCTION gst_type_find_probability_get_type() AS GType
#DEFINE GST_TYPE_TYPE_FIND_PROBABILITY (gst_type_find_probability_get_type())
DECLARE FUNCTION gst_uri_error_get_type() AS GType
#DEFINE GST_TYPE_URI_ERROR (gst_uri_error_get_type())
DECLARE FUNCTION gst_uri_handler_get_type() AS GType
#DEFINE GST_TYPE_URI_HANDLER (gst_uri_handler_get_type())
#DEFINE GST_URI_HANDLER(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GST_TYPE_URI_HANDLER, GstURIHandler))
#DEFINE GST_URI_HANDLER_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GST_TYPE_URI_HANDLER, GstURIHandlerInterface))
#DEFINE GST_IS_URI_HANDLER(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GST_TYPE_URI_HANDLER))
#DEFINE GST_URI_HANDLER_GET_IFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE((obj), GST_TYPE_URI_HANDLER, GstURIHandlerInterface))
DECLARE FUNCTION gst_uri_handler_get_protocols(BYVAL AS GstURIHandler PTR) AS const gchar* const PTR
DECLARE FUNCTION gst_uri_handler_get_uri(BYVAL AS GstURIHandler PTR) AS gchar PTR
DECLARE FUNCTION gst_uri_handler_get_uri_type(BYVAL AS GstURIHandler PTR) AS GstURIType
DECLARE FUNCTION gst_uri_handler_set_uri(BYVAL AS GstURIHandler PTR, BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR) AS gboolean
TYPE _GstURIHandlerInterface
  AS GTypeInterface parent
  get_type AS FUNCTION CDECL(BYVAL AS GType) AS GstURIType
  get_protocols AS FUNCTION CDECL(BYVAL AS GType) AS const gchar* const PTR
  get_uri AS FUNCTION CDECL(BYVAL AS GstURIHandler PTR) AS gchar PTR
  set_uri AS FUNCTION CDECL(BYVAL AS GstURIHandler PTR, BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR) AS gboolean
END TYPE
DECLARE FUNCTION gst_uri_type_get_type() AS GType
#DEFINE GST_TYPE_URI_TYPE (gst_uri_type_get_type())
DECLARE FUNCTION gst_uri_new(BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS guint, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR) AS GstUri PTR
DECLARE FUNCTION gst_uri_append_path(BYVAL AS GstUri PTR, BYVAL AS const gchar PTR) AS gboolean
DECLARE FUNCTION gst_uri_append_path_segment(BYVAL AS GstUri PTR, BYVAL AS const gchar PTR) AS gboolean
DECLARE FUNCTION gst_uri_equal(BYVAL AS const GstUri PTR, BYVAL AS const GstUri PTR) AS gboolean
DECLARE FUNCTION gst_uri_from_string_with_base(BYVAL AS GstUri PTR, BYVAL AS const gchar PTR) AS GstUri PTR
DECLARE FUNCTION gst_uri_get_fragment(BYVAL AS const GstUri PTR) AS const gchar PTR
DECLARE FUNCTION gst_uri_get_host(BYVAL AS const GstUri PTR) AS const gchar PTR
DECLARE FUNCTION gst_uri_get_media_fragment_table(BYVAL AS const GstUri PTR) AS GHashTable PTR
DECLARE FUNCTION gst_uri_get_path(BYVAL AS const GstUri PTR) AS gchar PTR
DECLARE FUNCTION gst_uri_get_path_segments(BYVAL AS const GstUri PTR) AS GList PTR
DECLARE FUNCTION gst_uri_get_path_string(BYVAL AS const GstUri PTR) AS gchar PTR
DECLARE FUNCTION gst_uri_get_port(BYVAL AS const GstUri PTR) AS guint
DECLARE FUNCTION gst_uri_get_query_keys(BYVAL AS const GstUri PTR) AS GList PTR
DECLARE FUNCTION gst_uri_get_query_string(BYVAL AS const GstUri PTR) AS gchar PTR
DECLARE FUNCTION gst_uri_get_query_table(BYVAL AS const GstUri PTR) AS GHashTable PTR
DECLARE FUNCTION gst_uri_get_query_value(BYVAL AS const GstUri PTR, BYVAL AS const gchar PTR) AS const gchar PTR
DECLARE FUNCTION gst_uri_get_scheme(BYVAL AS const GstUri PTR) AS const gchar PTR
DECLARE FUNCTION gst_uri_get_userinfo(BYVAL AS const GstUri PTR) AS const gchar PTR
DECLARE FUNCTION gst_uri_is_normalized(BYVAL AS const GstUri PTR) AS gboolean
DECLARE FUNCTION gst_uri_is_writable(BYVAL AS const GstUri PTR) AS gboolean
DECLARE FUNCTION gst_uri_join(BYVAL AS GstUri PTR, BYVAL AS GstUri PTR) AS GstUri PTR
DECLARE FUNCTION gst_uri_make_writable(BYVAL AS GstUri PTR) AS GstUri PTR
DECLARE FUNCTION gst_uri_new_with_base(BYVAL AS GstUri PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS guint, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR) AS GstUri PTR
DECLARE FUNCTION gst_uri_normalize(BYVAL AS GstUri PTR) AS gboolean
DECLARE FUNCTION gst_uri_query_has_key(BYVAL AS const GstUri PTR, BYVAL AS const gchar PTR) AS gboolean
DECLARE FUNCTION gst_uri_remove_query_key(BYVAL AS GstUri PTR, BYVAL AS const gchar PTR) AS gboolean
DECLARE FUNCTION gst_uri_set_fragment(BYVAL AS GstUri PTR, BYVAL AS const gchar PTR) AS gboolean
DECLARE FUNCTION gst_uri_set_host(BYVAL AS GstUri PTR, BYVAL AS const gchar PTR) AS gboolean
DECLARE FUNCTION gst_uri_set_path(BYVAL AS GstUri PTR, BYVAL AS const gchar PTR) AS gboolean
DECLARE FUNCTION gst_uri_set_path_segments(BYVAL AS GstUri PTR, BYVAL AS GList PTR) AS gboolean
DECLARE FUNCTION gst_uri_set_path_string(BYVAL AS GstUri PTR, BYVAL AS const gchar PTR) AS gboolean
DECLARE FUNCTION gst_uri_set_port(BYVAL AS GstUri PTR, BYVAL AS guint) AS gboolean
DECLARE FUNCTION gst_uri_set_query_string(BYVAL AS GstUri PTR, BYVAL AS const gchar PTR) AS gboolean
DECLARE FUNCTION gst_uri_set_query_table(BYVAL AS GstUri PTR, BYVAL AS GHashTable PTR) AS gboolean
DECLARE FUNCTION gst_uri_set_query_value(BYVAL AS GstUri PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR) AS gboolean
DECLARE FUNCTION gst_uri_set_scheme(BYVAL AS GstUri PTR, BYVAL AS const gchar PTR) AS gboolean
DECLARE FUNCTION gst_uri_set_userinfo(BYVAL AS GstUri PTR, BYVAL AS const gchar PTR) AS gboolean
DECLARE FUNCTION gst_uri_to_string(BYVAL AS const GstUri PTR) AS gchar PTR
DECLARE FUNCTION gst_uri_construct(BYVAL AS const gchar PTR, BYVAL AS const gchar PTR) AS gchar PTR
DECLARE FUNCTION gst_uri_from_string(BYVAL AS const gchar PTR) AS GstUri PTR
DECLARE FUNCTION gst_uri_get_location(BYVAL AS const gchar PTR) AS gchar PTR
DECLARE FUNCTION gst_uri_get_protocol(BYVAL AS const gchar PTR) AS gchar PTR
DECLARE FUNCTION gst_uri_has_protocol(BYVAL AS const gchar PTR, BYVAL AS const gchar PTR) AS gboolean
DECLARE FUNCTION gst_uri_is_valid(BYVAL AS const gchar PTR) AS gboolean
DECLARE FUNCTION gst_uri_join_strings(BYVAL AS const gchar PTR, BYVAL AS const gchar PTR) AS gchar PTR
DECLARE FUNCTION gst_uri_protocol_is_supported(BYVAL AS const GstURIType, BYVAL AS const gchar PTR) AS gboolean
DECLARE FUNCTION gst_uri_protocol_is_valid(BYVAL AS const gchar PTR) AS gboolean
DECLARE FUNCTION gst_value_array_get_type() AS GType
#DEFINE GST_TYPE_VALUE_ARRAY (gst_value_array_get_type())
#DEFINE GST_VALUE_ARRAY(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GST_TYPE_VALUE_ARRAY, GstValueArray))
#DEFINE GST_VALUE_ARRAY_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GST_TYPE_VALUE_ARRAY, Gst))
#DEFINE GST_IS_VALUE_ARRAY(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GST_TYPE_VALUE_ARRAY))
#DEFINE GST_IS_CLASS_VALUE_ARRAY(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GST_TYPE_VALUE_ARRAY))
#DEFINE GST_VALUE_ARRAY_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GST_TYPE_VALUE_ARRAY, Gst))
DECLARE SUB gst_value_array_append_and_take_value(BYVAL AS GValue PTR, BYVAL AS GValue PTR)
DECLARE SUB gst_value_array_append_value(BYVAL AS GValue PTR, BYVAL AS const GValue PTR)
DECLARE FUNCTION gst_value_array_get_size(BYVAL AS const GValue PTR) AS guint
DECLARE FUNCTION gst_value_array_get_value(BYVAL AS const GValue PTR, BYVAL AS guint) AS const GValue PTR
DECLARE SUB gst_value_array_prepend_value(BYVAL AS GValue PTR, BYVAL AS const GValue PTR)
TYPE GstValueCompareFunc AS FUNCTION CDECL(BYVAL AS const GValue PTR, BYVAL AS const GValue PTR) AS gint
TYPE GstValueDeserializeFunc AS FUNCTION CDECL(BYVAL AS GValue PTR, BYVAL AS const gchar PTR) AS gboolean
DECLARE FUNCTION gst_value_list_get_type() AS GType
#DEFINE GST_TYPE_VALUE_LIST (gst_value_list_get_type())
#DEFINE GST_VALUE_LIST(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GST_TYPE_VALUE_LIST, GstValueList))
#DEFINE GST_VALUE_LIST_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GST_TYPE_VALUE_LIST, Gst))
#DEFINE GST_IS_VALUE_LIST(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GST_TYPE_VALUE_LIST))
#DEFINE GST_IS_CLASS_VALUE_LIST(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GST_TYPE_VALUE_LIST))
#DEFINE GST_VALUE_LIST_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GST_TYPE_VALUE_LIST, Gst))
DECLARE SUB gst_value_list_append_and_take_value(BYVAL AS GValue PTR, BYVAL AS GValue PTR)
DECLARE SUB gst_value_list_append_value(BYVAL AS GValue PTR, BYVAL AS const GValue PTR)
DECLARE SUB gst_value_list_concat(BYVAL AS GValue PTR, BYVAL AS const GValue PTR, BYVAL AS const GValue PTR)
DECLARE FUNCTION gst_value_list_get_size(BYVAL AS const GValue PTR) AS guint
DECLARE FUNCTION gst_value_list_get_value(BYVAL AS const GValue PTR, BYVAL AS guint) AS const GValue PTR
DECLARE SUB gst_value_list_merge(BYVAL AS GValue PTR, BYVAL AS const GValue PTR, BYVAL AS const GValue PTR)
DECLARE SUB gst_value_list_prepend_value(BYVAL AS GValue PTR, BYVAL AS const GValue PTR)
TYPE GstValueSerializeFunc AS FUNCTION CDECL(BYVAL AS const GValue PTR) AS gchar PTR
TYPE _GstValueTable
  AS GType type
  AS GstValueCompareFunc compare
  AS GstValueSerializeFunc serialize
  AS GstValueDeserializeFunc deserialize
  AS gpointer _gst_reserved(3)
END TYPE
' P_4

DECLARE FUNCTION gst_calculate_linear_regression(BYVAL AS const GstClockTime PTR, BYVAL AS GstClockTime PTR, BYVAL AS guint, BYVAL AS GstClockTime PTR, BYVAL AS GstClockTime PTR, BYVAL AS GstClockTime PTR, BYVAL AS GstClockTime PTR, BYVAL AS gdouble PTR) AS gboolean
DECLARE SUB gst_clear_mini_object(BYVAL AS GstMiniObject PTR PTR)
DECLARE SUB gst_clear_object(BYVAL AS GstObject PTR PTR)
DECLARE SUB gst_clear_structure(BYVAL AS GstStructure PTR PTR)
DECLARE SUB gst_debug_add_log_function(BYVAL AS GstLogFunction, BYVAL AS gpointer, BYVAL AS GDestroyNotify)
DECLARE SUB gst_debug_add_ring_buffer_logger(BYVAL AS guint, BYVAL AS guint)
DECLARE FUNCTION gst_debug_bin_to_dot_data(BYVAL AS GstBin PTR, BYVAL AS GstDebugGraphDetails) AS gchar PTR
DECLARE SUB gst_debug_bin_to_dot_file(BYVAL AS GstBin PTR, BYVAL AS GstDebugGraphDetails, BYVAL AS const gchar PTR)
DECLARE SUB gst_debug_bin_to_dot_file_with_ts(BYVAL AS GstBin PTR, BYVAL AS GstDebugGraphDetails, BYVAL AS const gchar PTR)
DECLARE FUNCTION gst_debug_construct_term_color(BYVAL AS guint) AS gchar PTR
DECLARE FUNCTION gst_debug_construct_win_color(BYVAL AS guint) AS gint
DECLARE FUNCTION gst_debug_get_all_categories() AS GSList PTR
DECLARE FUNCTION gst_debug_get_color_mode() AS GstDebugColorMode
DECLARE FUNCTION gst_debug_get_default_threshold() AS GstDebugLevel
DECLARE FUNCTION gst_debug_get_stack_trace(BYVAL AS GstStackTraceFlags) AS gchar PTR
DECLARE FUNCTION gst_debug_is_active() AS gboolean
DECLARE FUNCTION gst_debug_is_colored() AS gboolean
DECLARE SUB gst_debug_log(BYVAL AS GstDebugCategory PTR, BYVAL AS GstDebugLevel, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS gint, BYVAL AS GObject PTR, BYVAL AS const gchar PTR, ...)
DECLARE SUB gst_debug_log_default(BYVAL AS GstDebugCategory PTR, BYVAL AS GstDebugLevel, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS gint, BYVAL AS GObject PTR, BYVAL AS GstDebugMessage PTR, BYVAL AS gpointer)
DECLARE SUB gst_debug_log_valist(BYVAL AS GstDebugCategory PTR, BYVAL AS GstDebugLevel, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS gint, BYVAL AS GObject PTR, BYVAL AS const gchar PTR, BYVAL AS va_list)
DECLARE SUB gst_debug_print_stack_trace()
DECLARE FUNCTION gst_debug_remove_log_function(BYVAL AS GstLogFunction) AS guint
DECLARE FUNCTION gst_debug_remove_log_function_by_data(BYVAL AS gpointer) AS guint
DECLARE SUB gst_debug_remove_ring_buffer_logger()
DECLARE FUNCTION gst_debug_ring_buffer_logger_get_logs() AS gchar PTR PTR
DECLARE SUB gst_debug_set_active(BYVAL AS gboolean)
DECLARE SUB gst_debug_set_color_mode(BYVAL AS GstDebugColorMode)
DECLARE SUB gst_debug_set_color_mode_from_string(BYVAL AS const gchar PTR)
DECLARE SUB gst_debug_set_colored(BYVAL AS gboolean)
DECLARE SUB gst_debug_set_default_threshold(BYVAL AS GstDebugLevel)
DECLARE SUB gst_debug_set_threshold_for_name(BYVAL AS const gchar PTR, BYVAL AS GstDebugLevel)
DECLARE SUB gst_debug_set_threshold_from_string(BYVAL AS const gchar PTR, BYVAL AS gboolean)
DECLARE SUB gst_debug_unset_threshold_for_name(BYVAL AS const gchar PTR)
DECLARE SUB gst_deinit()
DECLARE FUNCTION gst_dynamic_type_register(BYVAL AS GstPlugin PTR, BYVAL AS GType) AS gboolean
DECLARE FUNCTION gst_error_get_message(BYVAL AS GQuark, BYVAL AS gint) AS gchar PTR
DECLARE FUNCTION gst_filename_to_uri(BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR) AS gchar PTR
DECLARE FUNCTION gst_flow_get_name(BYVAL AS GstFlowReturn) AS const gchar PTR
DECLARE FUNCTION gst_flow_to_quark(BYVAL AS GstFlowReturn) AS GQuark
DECLARE FUNCTION gst_formats_contains(BYVAL AS const GstFormat PTR, BYVAL AS GstFormat) AS gboolean
DECLARE FUNCTION gst_get_main_executable_path() AS const gchar PTR
DECLARE FUNCTION gst_info_strdup_printf(BYVAL AS const gchar PTR, ...) AS gchar PTR
DECLARE FUNCTION gst_info_strdup_vprintf(BYVAL AS const gchar PTR, BYVAL AS va_list) AS gchar PTR
DECLARE FUNCTION gst_info_vasprintf(BYVAL AS gchar PTR PTR, BYVAL AS const gchar PTR, BYVAL AS va_list) AS gint
DECLARE SUB gst_init(BYVAL AS int PTR, BYVAL AS char PTR PTR PTR)
DECLARE FUNCTION gst_init_check(BYVAL AS int PTR, BYVAL AS char PTR PTR PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION gst_init_get_option_group() AS GOptionGroup PTR
DECLARE FUNCTION gst_is_caps_features(BYVAL AS gconstpointer) AS gboolean
DECLARE FUNCTION gst_is_initialized() AS gboolean
DECLARE FUNCTION gst_make_element_message_details(BYVAL AS const char PTR, ...) AS GstStructure PTR
DECLARE FUNCTION gst_param_spec_array(BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS GParamSpec PTR, BYVAL AS GParamFlags) AS GParamSpec PTR
DECLARE FUNCTION gst_param_spec_fraction(BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS gint, BYVAL AS gint, BYVAL AS gint, BYVAL AS gint, BYVAL AS gint, BYVAL AS gint, BYVAL AS GParamFlags) AS GParamSpec PTR
DECLARE FUNCTION gst_parent_buffer_meta_api_get_type() AS GType
DECLARE FUNCTION gst_parse_bin_from_description(BYVAL AS const gchar PTR, BYVAL AS gboolean, BYVAL AS GError PTR PTR) AS GstElement PTR
DECLARE FUNCTION gst_parse_bin_from_description_full(BYVAL AS const gchar PTR, BYVAL AS gboolean, BYVAL AS GstParseContext PTR, BYVAL AS GstParseFlags, BYVAL AS GError PTR PTR) AS GstElement PTR
DECLARE FUNCTION gst_parse_launch(BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR) AS GstElement PTR
DECLARE FUNCTION gst_parse_launch_full(BYVAL AS const gchar PTR, BYVAL AS GstParseContext PTR, BYVAL AS GstParseFlags, BYVAL AS GError PTR PTR) AS GstElement PTR
DECLARE FUNCTION gst_parse_launchv(BYVAL AS const gchar PTR PTR, BYVAL AS GError PTR PTR) AS GstElement PTR
DECLARE FUNCTION gst_parse_launchv_full(BYVAL AS const gchar PTR PTR, BYVAL AS GstParseContext PTR, BYVAL AS GstParseFlags, BYVAL AS GError PTR PTR) AS GstElement PTR
DECLARE SUB gst_print(BYVAL AS const gchar PTR, ...)
DECLARE SUB gst_printerr(BYVAL AS const gchar PTR, ...)
DECLARE SUB gst_printerrln(BYVAL AS const gchar PTR, ...)
DECLARE SUB gst_println(BYVAL AS const gchar PTR, ...)
DECLARE FUNCTION gst_protection_filter_systems_by_available_decryptors(BYVAL AS const gchar PTR PTR) AS gchar PTR PTR
DECLARE FUNCTION gst_protection_meta_api_get_type() AS GType
DECLARE FUNCTION gst_protection_select_system(BYVAL AS const gchar PTR PTR) AS const gchar PTR
DECLARE FUNCTION gst_reference_timestamp_meta_api_get_type() AS GType
DECLARE FUNCTION gst_segtrap_is_enabled() AS gboolean
DECLARE SUB gst_segtrap_set_enabled(BYVAL AS gboolean)
DECLARE FUNCTION gst_static_caps_get_type() AS GType
DECLARE FUNCTION gst_static_pad_template_get_type() AS GType
DECLARE FUNCTION gst_tag_exists(BYVAL AS const gchar PTR) AS gboolean
DECLARE FUNCTION gst_tag_get_description(BYVAL AS const gchar PTR) AS const gchar PTR
DECLARE FUNCTION gst_tag_get_flag(BYVAL AS const gchar PTR) AS GstTagFlag
DECLARE FUNCTION gst_tag_get_nick(BYVAL AS const gchar PTR) AS const gchar PTR
DECLARE FUNCTION gst_tag_get_type(BYVAL AS const gchar PTR) AS GType
DECLARE FUNCTION gst_tag_is_fixed(BYVAL AS const gchar PTR) AS gboolean
DECLARE SUB gst_tag_merge_strings_with_comma(BYVAL AS GValue PTR, BYVAL AS const GValue PTR)
DECLARE SUB gst_tag_merge_use_first(BYVAL AS GValue PTR, BYVAL AS const GValue PTR)
DECLARE SUB gst_tag_register(BYVAL AS const gchar PTR, BYVAL AS GstTagFlag, BYVAL AS GType, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS GstTagMergeFunc)
DECLARE SUB gst_tag_register_static(BYVAL AS const gchar PTR, BYVAL AS GstTagFlag, BYVAL AS GType, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS GstTagMergeFunc)
DECLARE FUNCTION gst_type_find_get_type() AS GType
DECLARE FUNCTION gst_update_registry() AS gboolean
DECLARE FUNCTION gst_util_array_binary_search(BYVAL AS gpointer, BYVAL AS guint, BYVAL AS gsize, BYVAL AS GCompareDataFunc, BYVAL AS GstSearchMode, BYVAL AS gconstpointer, BYVAL AS gpointer) AS gpointer
DECLARE SUB gst_util_double_to_fraction(BYVAL AS gdouble, BYVAL AS gint PTR, BYVAL AS gint PTR)
DECLARE SUB gst_util_dump_buffer(BYVAL AS GstBuffer PTR)
DECLARE SUB gst_util_dump_mem(BYVAL AS const guchar PTR, BYVAL AS guint)
DECLARE FUNCTION gst_util_fraction_add(BYVAL AS gint, BYVAL AS gint, BYVAL AS gint, BYVAL AS gint, BYVAL AS gint PTR, BYVAL AS gint PTR) AS gboolean
DECLARE FUNCTION gst_util_fraction_compare(BYVAL AS gint, BYVAL AS gint, BYVAL AS gint, BYVAL AS gint) AS gint
DECLARE FUNCTION gst_util_fraction_multiply(BYVAL AS gint, BYVAL AS gint, BYVAL AS gint, BYVAL AS gint, BYVAL AS gint PTR, BYVAL AS gint PTR) AS gboolean
DECLARE SUB gst_util_fraction_to_double(BYVAL AS gint, BYVAL AS gint, BYVAL AS gdouble PTR)
DECLARE FUNCTION gst_util_gdouble_to_guint64(BYVAL AS gdouble) AS guint64
DECLARE FUNCTION gst_util_get_object_array(BYVAL AS GObject PTR, BYVAL AS const gchar PTR, BYVAL AS GValueArray PTR PTR) AS gboolean
DECLARE FUNCTION gst_util_get_timestamp() AS GstClockTime
DECLARE FUNCTION gst_util_greatest_common_divisor(BYVAL AS gint, BYVAL AS gint) AS gint
DECLARE FUNCTION gst_util_greatest_common_divisor_int64(BYVAL AS gint64, BYVAL AS gint64) AS gint64
DECLARE FUNCTION gst_util_group_id_next() AS guint
DECLARE FUNCTION gst_util_guint64_to_gdouble(BYVAL AS guint64) AS gdouble
DECLARE FUNCTION gst_util_seqnum_compare(BYVAL AS guint32, BYVAL AS guint32) AS gint32
DECLARE FUNCTION gst_util_seqnum_next() AS guint32
DECLARE SUB gst_util_set_object_arg(BYVAL AS GObject PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR)
DECLARE FUNCTION gst_util_set_object_array(BYVAL AS GObject PTR, BYVAL AS const gchar PTR, BYVAL AS const GValueArray PTR) AS gboolean
DECLARE SUB gst_util_set_value_from_string(BYVAL AS GValue PTR, BYVAL AS const gchar PTR)
DECLARE FUNCTION gst_util_uint64_scale(BYVAL AS guint64, BYVAL AS guint64, BYVAL AS guint64) AS guint64
DECLARE FUNCTION gst_util_uint64_scale_ceil(BYVAL AS guint64, BYVAL AS guint64, BYVAL AS guint64) AS guint64
DECLARE FUNCTION gst_util_uint64_scale_int(BYVAL AS guint64, BYVAL AS gint, BYVAL AS gint) AS guint64
DECLARE FUNCTION gst_util_uint64_scale_int_ceil(BYVAL AS guint64, BYVAL AS gint, BYVAL AS gint) AS guint64
DECLARE FUNCTION gst_util_uint64_scale_int_round(BYVAL AS guint64, BYVAL AS gint, BYVAL AS gint) AS guint64
DECLARE FUNCTION gst_util_uint64_scale_round(BYVAL AS guint64, BYVAL AS guint64, BYVAL AS guint64) AS guint64
DECLARE FUNCTION gst_value_can_compare(BYVAL AS const GValue PTR, BYVAL AS const GValue PTR) AS gboolean
DECLARE FUNCTION gst_value_can_intersect(BYVAL AS const GValue PTR, BYVAL AS const GValue PTR) AS gboolean
DECLARE FUNCTION gst_value_can_subtract(BYVAL AS const GValue PTR, BYVAL AS const GValue PTR) AS gboolean
DECLARE FUNCTION gst_value_can_union(BYVAL AS const GValue PTR, BYVAL AS const GValue PTR) AS gboolean
DECLARE FUNCTION gst_value_compare(BYVAL AS const GValue PTR, BYVAL AS const GValue PTR) AS gint
DECLARE FUNCTION gst_value_deserialize(BYVAL AS GValue PTR, BYVAL AS const gchar PTR) AS gboolean
DECLARE FUNCTION gst_value_fixate(BYVAL AS GValue PTR, BYVAL AS const GValue PTR) AS gboolean
DECLARE FUNCTION gst_value_fraction_multiply(BYVAL AS GValue PTR, BYVAL AS const GValue PTR, BYVAL AS const GValue PTR) AS gboolean
DECLARE FUNCTION gst_value_fraction_subtract(BYVAL AS GValue PTR, BYVAL AS const GValue PTR, BYVAL AS const GValue PTR) AS gboolean
DECLARE FUNCTION gst_value_get_bitmask(BYVAL AS const GValue PTR) AS guint64
DECLARE FUNCTION gst_value_get_caps(BYVAL AS const GValue PTR) AS const GstCaps PTR
DECLARE FUNCTION gst_value_get_caps_features(BYVAL AS const GValue PTR) AS const GstCapsFeatures PTR
DECLARE FUNCTION gst_value_get_double_range_max(BYVAL AS const GValue PTR) AS gdouble
DECLARE FUNCTION gst_value_get_double_range_min(BYVAL AS const GValue PTR) AS gdouble
DECLARE FUNCTION gst_value_get_flagset_flags(BYVAL AS const GValue PTR) AS guint
DECLARE FUNCTION gst_value_get_flagset_mask(BYVAL AS const GValue PTR) AS guint
DECLARE FUNCTION gst_value_get_fraction_denominator(BYVAL AS const GValue PTR) AS gint
DECLARE FUNCTION gst_value_get_fraction_numerator(BYVAL AS const GValue PTR) AS gint
DECLARE FUNCTION gst_value_get_fraction_range_max(BYVAL AS const GValue PTR) AS const GValue PTR
DECLARE FUNCTION gst_value_get_fraction_range_min(BYVAL AS const GValue PTR) AS const GValue PTR
DECLARE FUNCTION gst_value_get_int64_range_max(BYVAL AS const GValue PTR) AS gint64
DECLARE FUNCTION gst_value_get_int64_range_min(BYVAL AS const GValue PTR) AS gint64
DECLARE FUNCTION gst_value_get_int64_range_step(BYVAL AS const GValue PTR) AS gint64
DECLARE FUNCTION gst_value_get_int_range_max(BYVAL AS const GValue PTR) AS gint
DECLARE FUNCTION gst_value_get_int_range_min(BYVAL AS const GValue PTR) AS gint
DECLARE FUNCTION gst_value_get_int_range_step(BYVAL AS const GValue PTR) AS gint
DECLARE FUNCTION gst_value_get_structure(BYVAL AS const GValue PTR) AS const GstStructure PTR
DECLARE SUB gst_value_init_and_copy(BYVAL AS GValue PTR, BYVAL AS const GValue PTR)
DECLARE FUNCTION gst_value_intersect(BYVAL AS GValue PTR, BYVAL AS const GValue PTR, BYVAL AS const GValue PTR) AS gboolean
DECLARE FUNCTION gst_value_is_fixed(BYVAL AS const GValue PTR) AS gboolean
DECLARE FUNCTION gst_value_is_subset(BYVAL AS const GValue PTR, BYVAL AS const GValue PTR) AS gboolean
DECLARE SUB gst_value_register(BYVAL AS const GstValueTable PTR)
DECLARE FUNCTION gst_value_serialize(BYVAL AS const GValue PTR) AS gchar PTR
DECLARE SUB gst_value_set_bitmask(BYVAL AS GValue PTR, BYVAL AS guint64)
DECLARE SUB gst_value_set_caps(BYVAL AS GValue PTR, BYVAL AS const GstCaps PTR)
DECLARE SUB gst_value_set_caps_features(BYVAL AS GValue PTR, BYVAL AS const GstCapsFeatures PTR)
DECLARE SUB gst_value_set_double_range(BYVAL AS GValue PTR, BYVAL AS gdouble, BYVAL AS gdouble)
DECLARE SUB gst_value_set_flagset(BYVAL AS GValue PTR, BYVAL AS guint, BYVAL AS guint)
DECLARE SUB gst_value_set_fraction(BYVAL AS GValue PTR, BYVAL AS gint, BYVAL AS gint)
DECLARE SUB gst_value_set_fraction_range(BYVAL AS GValue PTR, BYVAL AS const GValue PTR, BYVAL AS const GValue PTR)
DECLARE SUB gst_value_set_fraction_range_full(BYVAL AS GValue PTR, BYVAL AS gint, BYVAL AS gint, BYVAL AS gint, BYVAL AS gint)
DECLARE SUB gst_value_set_int64_range(BYVAL AS GValue PTR, BYVAL AS gint64, BYVAL AS gint64)
DECLARE SUB gst_value_set_int64_range_step(BYVAL AS GValue PTR, BYVAL AS gint64, BYVAL AS gint64, BYVAL AS gint64)
DECLARE SUB gst_value_set_int_range(BYVAL AS GValue PTR, BYVAL AS gint, BYVAL AS gint)
DECLARE SUB gst_value_set_int_range_step(BYVAL AS GValue PTR, BYVAL AS gint, BYVAL AS gint, BYVAL AS gint)
DECLARE SUB gst_value_set_structure(BYVAL AS GValue PTR, BYVAL AS const GstStructure PTR)
DECLARE FUNCTION gst_value_subtract(BYVAL AS GValue PTR, BYVAL AS const GValue PTR, BYVAL AS const GValue PTR) AS gboolean
DECLARE FUNCTION gst_value_union(BYVAL AS GValue PTR, BYVAL AS const GValue PTR, BYVAL AS const GValue PTR) AS gboolean
DECLARE SUB gst_version(BYVAL AS guint PTR, BYVAL AS guint PTR, BYVAL AS guint PTR, BYVAL AS guint PTR)
DECLARE FUNCTION gst_version_string() AS gchar PTR
END EXTERN

