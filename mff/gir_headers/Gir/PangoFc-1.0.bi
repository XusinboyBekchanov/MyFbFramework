'            FreeBasic header file, auto-generated by
'                       ### girtobac ###
' LGPLv2.1 (C) 2013-2022 by Thomas{ doT ]Freiherr[ At ]gmx[ DoT }net
' Auto-translated from file /usr/share/gir-1.0/PangoFc-1.0.gir
#INCLUDE ONCE "_GirToBac-0.0.bi"
TYPE AS _FcConfig FcConfig
' Repository version 1.2
#INCLUDE ONCE "Pango-1.0.bi"
#INCLUDE ONCE "fontconfig-2.0.bi"
TYPE AS _PangoFcDecoder PangoFcDecoder
TYPE AS _PangoFcDecoderClass PangoFcDecoderClass
#DEFINE PANGO_FC_FONT_FEATURES @!"fontfeatures"
#DEFINE PANGO_FC_FONT_VARIATIONS @!"fontvariations"
TYPE AS _PangoFcFont PangoFcFont
TYPE AS _PangoFcFontClass PangoFcFontClass
TYPE AS _PangoFcFontMap PangoFcFontMap
TYPE AS _PangoFcFontMapClass PangoFcFontMapClass
TYPE AS _PangoFcFontMapPrivate PangoFcFontMapPrivate
#DEFINE PANGO_FC_GRAVITY @!"pangogravity"
#DEFINE PANGO_FC_PRGNAME @!"prgname"
#DEFINE PANGO_FC_VERSION @!"pangoversion"
EXTERN "C" LIB "pangoft2-1.0"
' P_X

' P_3

TYPE _PangoFcDecoder
  AS GObject parent_instance
END TYPE
DECLARE FUNCTION pango_fc_decoder_get_type() AS GType
#DEFINE PANGOFC_TYPE_FC_DECODER (pango_fc_decoder_get_type())
#DEFINE PANGOFC_FC_DECODER(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), PANGOFC_TYPE_FC_DECODER, PangoFcDecoder))
#DEFINE PANGOFC_FC_DECODER_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), PANGOFC_TYPE_FC_DECODER, PangoFcDecoderClass))
#DEFINE PANGOFC_IS_FC_DECODER(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), PANGOFC_TYPE_FC_DECODER))
#DEFINE PANGOFC_IS_CLASS_FC_DECODER(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), PANGOFC_TYPE_FC_DECODER))
#DEFINE PANGOFC_FC_DECODER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), PANGOFC_TYPE_FC_DECODER, PangoFcDecoderClass))
DECLARE FUNCTION pango_fc_decoder_get_charset(BYVAL AS PangoFcDecoder PTR, BYVAL AS PangoFcFont PTR) AS FcCharSet PTR
DECLARE FUNCTION pango_fc_decoder_get_glyph(BYVAL AS PangoFcDecoder PTR, BYVAL AS PangoFcFont PTR, BYVAL AS guint32) AS PangoGlyph
TYPE _PangoFcDecoderClass
  AS GObjectClass parent_class
  get_charset AS FUNCTION CDECL(BYVAL AS PangoFcDecoder PTR, BYVAL AS PangoFcFont PTR) AS FcCharSet PTR
  get_glyph AS FUNCTION CDECL(BYVAL AS PangoFcDecoder PTR, BYVAL AS PangoFcFont PTR, BYVAL AS guint32) AS PangoGlyph
  _pango_reserved1 AS SUB CDECL()
  _pango_reserved2 AS SUB CDECL()
  _pango_reserved3 AS SUB CDECL()
  _pango_reserved4 AS SUB CDECL()
END TYPE
TYPE PangoFcDecoderFindFunc AS FUNCTION CDECL(BYVAL AS FcPattern PTR, BYVAL AS gpointer) AS PangoFcDecoder PTR
TYPE _PangoFcFont
  AS PangoFont parent_instance
  AS FcPattern PTR font_pattern
  AS PangoFontMap PTR fontmap
  AS gpointer priv
  AS PangoMatrix matrix
  AS PangoFontDescription PTR description
  AS GSList PTR metrics_by_lang
  AS guint is_hinted : 1
  AS guint is_transformed : 1
END TYPE
DECLARE FUNCTION pango_fc_font_get_type() AS GType
#DEFINE PANGOFC_TYPE_FC_FONT (pango_fc_font_get_type())
#DEFINE PANGOFC_FC_FONT(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), PANGOFC_TYPE_FC_FONT, PangoFcFont))
#DEFINE PANGOFC_FC_FONT_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), PANGOFC_TYPE_FC_FONT, PangoFcFontClass))
#DEFINE PANGOFC_IS_FC_FONT(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), PANGOFC_TYPE_FC_FONT))
#DEFINE PANGOFC_IS_CLASS_FC_FONT(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), PANGOFC_TYPE_FC_FONT))
#DEFINE PANGOFC_FC_FONT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), PANGOFC_TYPE_FC_FONT, PangoFcFontClass))
DECLARE FUNCTION pango_fc_font_description_from_pattern(BYVAL AS FcPattern PTR, BYVAL AS gboolean) AS PangoFontDescription PTR
DECLARE FUNCTION pango_fc_font_get_glyph(BYVAL AS PangoFcFont PTR, BYVAL AS gunichar /'?'/) AS guint
DECLARE FUNCTION pango_fc_font_get_unknown_glyph(BYVAL AS PangoFcFont PTR, BYVAL AS gunichar /'?'/) AS PangoGlyph
DECLARE FUNCTION pango_fc_font_has_char(BYVAL AS PangoFcFont PTR, BYVAL AS gunichar /'?'/) AS gboolean
DECLARE SUB pango_fc_font_kern_glyphs(BYVAL AS PangoFcFont PTR, BYVAL AS PangoGlyphString PTR)
DECLARE FUNCTION pango_fc_font_lock_face(BYVAL AS PangoFcFont PTR) AS FT_Face PTR
DECLARE SUB pango_fc_font_unlock_face(BYVAL AS PangoFcFont PTR)
DECLARE FUNCTION pango_fc_font_map_get_type() AS GType
#DEFINE PANGOFC_TYPE_FC_FONT_MAP (pango_fc_font_map_get_type())
#DEFINE PANGOFC_FC_FONT_MAP(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), PANGOFC_TYPE_FC_FONT_MAP, PangoFcFontMap))
#DEFINE PANGOFC_FC_FONT_MAP_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), PANGOFC_TYPE_FC_FONT_MAP, PangoFcFontMapClass))
#DEFINE PANGOFC_IS_FC_FONT_MAP(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), PANGOFC_TYPE_FC_FONT_MAP))
#DEFINE PANGOFC_IS_CLASS_FC_FONT_MAP(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), PANGOFC_TYPE_FC_FONT_MAP))
#DEFINE PANGOFC_FC_FONT_MAP_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), PANGOFC_TYPE_FC_FONT_MAP, PangoFcFontMapClass))
DECLARE SUB pango_fc_font_map_add_decoder_find_func(BYVAL AS PangoFcFontMap PTR, BYVAL AS PangoFcDecoderFindFunc, BYVAL AS gpointer, BYVAL AS GDestroyNotify)
DECLARE SUB pango_fc_font_map_cache_clear(BYVAL AS PangoFcFontMap PTR)
DECLARE SUB pango_fc_font_map_config_changed(BYVAL AS PangoFcFontMap PTR)
DECLARE FUNCTION pango_fc_font_map_create_context(BYVAL AS PangoFcFontMap PTR) AS PangoContext PTR
DECLARE FUNCTION pango_fc_font_map_find_decoder(BYVAL AS PangoFcFontMap PTR, BYVAL AS FcPattern PTR) AS PangoFcDecoder PTR
DECLARE FUNCTION pango_fc_font_map_get_config(BYVAL AS PangoFcFontMap PTR) AS FcConfig PTR
DECLARE FUNCTION pango_fc_font_map_get_hb_face(BYVAL AS PangoFcFontMap PTR, BYVAL AS PangoFcFont PTR) AS hb_face_t PTR
DECLARE SUB pango_fc_font_map_set_config(BYVAL AS PangoFcFontMap PTR, BYVAL AS FcConfig PTR)
DECLARE SUB pango_fc_font_map_shutdown(BYVAL AS PangoFcFontMap PTR)
' P_4

END EXTERN

