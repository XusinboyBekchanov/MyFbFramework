'            FreeBasic header file, auto-generated by
'                       ### girtobac ###
' LGPLv2.1 (C) 2013-2022 by Thomas{ doT ]Freiherr[ At ]gmx[ DoT }net
' Auto-translated from file /usr/share/gir-1.0/Atk-1.0.gir
#INCLUDE ONCE "_GirToBac-0.0.bi"
' Repository version 1.2
#INCLUDE ONCE "GObject-2.0.bi"
TYPE AS GSList AtkAttributeSet
TYPE AS guint64 AtkState
TYPE AS _AtkAction AtkAction
TYPE AS _AtkActionIface AtkActionIface
TYPE AS _AtkAttribute AtkAttribute
#DEFINE ATK_BINARY_AGE 23511
TYPE AS _AtkComponent AtkComponent
TYPE AS _AtkComponentIface AtkComponentIface
TYPE AS LONG AtkCoordType
ENUM
  ATK_XY_SCREEN = 0
  ATK_XY_WINDOW = 1
  ATK_XY_PARENT = 2
END ENUM
TYPE AS _AtkDocument AtkDocument
TYPE AS _AtkDocumentIface AtkDocumentIface
TYPE AS _AtkEditableText AtkEditableText
TYPE AS _AtkEditableTextIface AtkEditableTextIface
TYPE AS _AtkGObjectAccessible AtkGObjectAccessible
TYPE AS _AtkGObjectAccessibleClass AtkGObjectAccessibleClass
TYPE AS _AtkHyperlink AtkHyperlink
TYPE AS _AtkHyperlinkClass AtkHyperlinkClass
TYPE AS _AtkHyperlinkImpl AtkHyperlinkImpl
TYPE AS _AtkHyperlinkImplIface AtkHyperlinkImplIface
TYPE AS LONG AtkHyperlinkStateFlags
ENUM
  ATK_HYPERLINK_IS_INLINE = 1
END ENUM
TYPE AS _AtkHypertext AtkHypertext
TYPE AS _AtkHypertextIface AtkHypertextIface
#DEFINE ATK_INTERFACE_AGE 1
TYPE AS _AtkImage AtkImage
TYPE AS _AtkImageIface AtkImageIface
TYPE AS _AtkImplementor AtkImplementor
TYPE AS _AtkImplementorIface AtkImplementorIface
TYPE AS _AtkKeyEventStruct AtkKeyEventStruct
TYPE AS LONG AtkKeyEventType
ENUM
  ATK_KEY_EVENT_PRESS = 0
  ATK_KEY_EVENT_RELEASE = 1
  ATK_KEY_EVENT_LAST_DEFINED = 2
END ENUM
TYPE AS LONG AtkLayer
ENUM
  ATK_LAYER_INVALID = 0
  ATK_LAYER_BACKGROUND = 1
  ATK_LAYER_CANVAS = 2
  ATK_LAYER_WIDGET = 3
  ATK_LAYER_MDI = 4
  ATK_LAYER_POPUP = 5
  ATK_LAYER_OVERLAY = 6
  ATK_LAYER_WINDOW = 7
END ENUM
#DEFINE ATK_MAJOR_VERSION 2
#DEFINE ATK_MICRO_VERSION 1
#DEFINE ATK_MINOR_VERSION 35
TYPE AS _AtkMisc AtkMisc
TYPE AS _AtkMiscClass AtkMiscClass
TYPE AS _AtkNoOpObject AtkNoOpObject
TYPE AS _AtkNoOpObjectClass AtkNoOpObjectClass
TYPE AS _AtkNoOpObjectFactory AtkNoOpObjectFactory
TYPE AS _AtkNoOpObjectFactoryClass AtkNoOpObjectFactoryClass
TYPE AS _AtkObject AtkObject
TYPE AS _AtkObjectClass AtkObjectClass
TYPE AS _AtkObjectFactory AtkObjectFactory
TYPE AS _AtkObjectFactoryClass AtkObjectFactoryClass
TYPE AS _AtkPlug AtkPlug
TYPE AS _AtkPlugClass AtkPlugClass
TYPE AS _AtkPropertyValues AtkPropertyValues
TYPE AS _AtkRange AtkRange
TYPE AS _AtkRectangle AtkRectangle
TYPE AS _AtkRegistry AtkRegistry
TYPE AS _AtkRegistryClass AtkRegistryClass
TYPE AS _AtkRelation AtkRelation
TYPE AS _AtkRelationClass AtkRelationClass
TYPE AS _AtkRelationSet AtkRelationSet
TYPE AS _AtkRelationSetClass AtkRelationSetClass
TYPE AS LONG AtkRelationType
ENUM
  ATK_RELATION_NULL = 0
  ATK_RELATION_CONTROLLED_BY = 1
  ATK_RELATION_CONTROLLER_FOR = 2
  ATK_RELATION_LABEL_FOR = 3
  ATK_RELATION_LABELLED_BY = 4
  ATK_RELATION_MEMBER_OF = 5
  ATK_RELATION_NODE_CHILD_OF = 6
  ATK_RELATION_FLOWS_TO = 7
  ATK_RELATION_FLOWS_FROM = 8
  ATK_RELATION_SUBWINDOW_OF = 9
  ATK_RELATION_EMBEDS = 10
  ATK_RELATION_EMBEDDED_BY = 11
  ATK_RELATION_POPUP_FOR = 12
  ATK_RELATION_PARENT_WINDOW_OF = 13
  ATK_RELATION_DESCRIBED_BY = 14
  ATK_RELATION_DESCRIPTION_FOR = 15
  ATK_RELATION_NODE_PARENT_OF = 16
  ATK_RELATION_DETAILS = 17
  ATK_RELATION_DETAILS_FOR = 18
  ATK_RELATION_ERROR_MESSAGE = 19
  ATK_RELATION_ERROR_FOR = 20
  ATK_RELATION_LAST_DEFINED = 21
END ENUM
TYPE AS LONG AtkRole
ENUM
  ATK_ROLE_INVALID = 0
  ATK_ROLE_ACCEL_LABEL = 1
  ATK_ROLE_ALERT = 2
  ATK_ROLE_ANIMATION = 3
  ATK_ROLE_ARROW = 4
  ATK_ROLE_CALENDAR = 5
  ATK_ROLE_CANVAS = 6
  ATK_ROLE_CHECK_BOX = 7
  ATK_ROLE_CHECK_MENU_ITEM = 8
  ATK_ROLE_COLOR_CHOOSER = 9
  ATK_ROLE_COLUMN_HEADER = 10
  ATK_ROLE_COMBO_BOX = 11
  ATK_ROLE_DATE_EDITOR = 12
  ATK_ROLE_DESKTOP_ICON = 13
  ATK_ROLE_DESKTOP_FRAME = 14
  ATK_ROLE_DIAL = 15
  ATK_ROLE_DIALOG = 16
  ATK_ROLE_DIRECTORY_PANE = 17
  ATK_ROLE_DRAWING_AREA = 18
  ATK_ROLE_FILE_CHOOSER = 19
  ATK_ROLE_FILLER = 20
  ATK_ROLE_FONT_CHOOSER = 21
  ATK_ROLE_FRAME = 22
  ATK_ROLE_GLASS_PANE = 23
  ATK_ROLE_HTML_CONTAINER = 24
  ATK_ROLE_ICON = 25
  ATK_ROLE_IMAGE = 26
  ATK_ROLE_INTERNAL_FRAME = 27
  ATK_ROLE_LABEL = 28
  ATK_ROLE_LAYERED_PANE = 29
  ATK_ROLE_LIST = 30
  ATK_ROLE_LIST_ITEM = 31
  ATK_ROLE_MENU = 32
  ATK_ROLE_MENU_BAR = 33
  ATK_ROLE_MENU_ITEM = 34
  ATK_ROLE_OPTION_PANE = 35
  ATK_ROLE_PAGE_TAB = 36
  ATK_ROLE_PAGE_TAB_LIST = 37
  ATK_ROLE_PANEL = 38
  ATK_ROLE_PASSWORD_TEXT = 39
  ATK_ROLE_POPUP_MENU = 40
  ATK_ROLE_PROGRESS_BAR = 41
  ATK_ROLE_PUSH_BUTTON = 42
  ATK_ROLE_RADIO_BUTTON = 43
  ATK_ROLE_RADIO_MENU_ITEM = 44
  ATK_ROLE_ROOT_PANE = 45
  ATK_ROLE_ROW_HEADER = 46
  ATK_ROLE_SCROLL_BAR = 47
  ATK_ROLE_SCROLL_PANE = 48
  ATK_ROLE_SEPARATOR = 49
  ATK_ROLE_SLIDER = 50
  ATK_ROLE_SPLIT_PANE = 51
  ATK_ROLE_SPIN_BUTTON = 52
  ATK_ROLE_STATUSBAR = 53
  ATK_ROLE_TABLE = 54
  ATK_ROLE_TABLE_CELL = 55
  ATK_ROLE_TABLE_COLUMN_HEADER = 56
  ATK_ROLE_TABLE_ROW_HEADER = 57
  ATK_ROLE_TEAR_OFF_MENU_ITEM = 58
  ATK_ROLE_TERMINAL = 59
  ATK_ROLE_TEXT = 60
  ATK_ROLE_TOGGLE_BUTTON = 61
  ATK_ROLE_TOOL_BAR = 62
  ATK_ROLE_TOOL_TIP = 63
  ATK_ROLE_TREE = 64
  ATK_ROLE_TREE_TABLE = 65
  ATK_ROLE_UNKNOWN = 66
  ATK_ROLE_VIEWPORT = 67
  ATK_ROLE_WINDOW = 68
  ATK_ROLE_HEADER = 69
  ATK_ROLE_FOOTER = 70
  ATK_ROLE_PARAGRAPH = 71
  ATK_ROLE_RULER = 72
  ATK_ROLE_APPLICATION = 73
  ATK_ROLE_AUTOCOMPLETE = 74
  ATK_ROLE_EDITBAR = 75
  ATK_ROLE_EMBEDDED = 76
  ATK_ROLE_ENTRY = 77
  ATK_ROLE_CHART = 78
  ATK_ROLE_CAPTION = 79
  ATK_ROLE_DOCUMENT_FRAME = 80
  ATK_ROLE_HEADING = 81
  ATK_ROLE_PAGE = 82
  ATK_ROLE_SECTION = 83
  ATK_ROLE_REDUNDANT_OBJECT = 84
  ATK_ROLE_FORM = 85
  ATK_ROLE_LINK = 86
  ATK_ROLE_INPUT_METHOD_WINDOW = 87
  ATK_ROLE_TABLE_ROW = 88
  ATK_ROLE_TREE_ITEM = 89
  ATK_ROLE_DOCUMENT_SPREADSHEET = 90
  ATK_ROLE_DOCUMENT_PRESENTATION = 91
  ATK_ROLE_DOCUMENT_TEXT = 92
  ATK_ROLE_DOCUMENT_WEB = 93
  ATK_ROLE_DOCUMENT_EMAIL = 94
  ATK_ROLE_COMMENT = 95
  ATK_ROLE_LIST_BOX = 96
  ATK_ROLE_GROUPING = 97
  ATK_ROLE_IMAGE_MAP = 98
  ATK_ROLE_NOTIFICATION = 99
  ATK_ROLE_INFO_BAR = 100
  ATK_ROLE_LEVEL_BAR = 101
  ATK_ROLE_TITLE_BAR = 102
  ATK_ROLE_BLOCK_QUOTE = 103
  ATK_ROLE_AUDIO = 104
  ATK_ROLE_VIDEO = 105
  ATK_ROLE_DEFINITION = 106
  ATK_ROLE_ARTICLE = 107
  ATK_ROLE_LANDMARK = 108
  ATK_ROLE_LOG = 109
  ATK_ROLE_MARQUEE = 110
  ATK_ROLE_MATH = 111
  ATK_ROLE_RATING = 112
  ATK_ROLE_TIMER = 113
  ATK_ROLE_DESCRIPTION_LIST = 114
  ATK_ROLE_DESCRIPTION_TERM = 115
  ATK_ROLE_DESCRIPTION_VALUE = 116
  ATK_ROLE_STATIC = 117
  ATK_ROLE_MATH_FRACTION = 118
  ATK_ROLE_MATH_ROOT = 119
  ATK_ROLE_SUBSCRIPT = 120
  ATK_ROLE_SUPERSCRIPT = 121
  ATK_ROLE_FOOTNOTE = 122
  ATK_ROLE_CONTENT_DELETION = 123
  ATK_ROLE_CONTENT_INSERTION = 124
  ATK_ROLE_LAST_DEFINED = 125
END ENUM
TYPE AS LONG AtkScrollType
ENUM
  ATK_SCROLL_TOP_LEFT = 0
  ATK_SCROLL_BOTTOM_RIGHT = 1
  ATK_SCROLL_TOP_EDGE = 2
  ATK_SCROLL_BOTTOM_EDGE = 3
  ATK_SCROLL_LEFT_EDGE = 4
  ATK_SCROLL_RIGHT_EDGE = 5
  ATK_SCROLL_ANYWHERE = 6
END ENUM
TYPE AS _AtkSelection AtkSelection
TYPE AS _AtkSelectionIface AtkSelectionIface
TYPE AS _AtkSocket AtkSocket
TYPE AS _AtkSocketClass AtkSocketClass
TYPE AS _AtkStateSet AtkStateSet
TYPE AS _AtkStateSetClass AtkStateSetClass
TYPE AS LONG AtkStateType
ENUM
  ATK_STATE_INVALID = 0
  ATK_STATE_ACTIVE = 1
  ATK_STATE_ARMED = 2
  ATK_STATE_BUSY = 3
  ATK_STATE_CHECKED = 4
  ATK_STATE_DEFUNCT = 5
  ATK_STATE_EDITABLE = 6
  ATK_STATE_ENABLED = 7
  ATK_STATE_EXPANDABLE = 8
  ATK_STATE_EXPANDED = 9
  ATK_STATE_FOCUSABLE = 10
  ATK_STATE_FOCUSED = 11
  ATK_STATE_HORIZONTAL = 12
  ATK_STATE_ICONIFIED = 13
  ATK_STATE_MODAL = 14
  ATK_STATE_MULTI_LINE = 15
  ATK_STATE_MULTISELECTABLE = 16
  ATK_STATE_OPAQUE = 17
  ATK_STATE_PRESSED = 18
  ATK_STATE_RESIZABLE = 19
  ATK_STATE_SELECTABLE = 20
  ATK_STATE_SELECTED = 21
  ATK_STATE_SENSITIVE = 22
  ATK_STATE_SHOWING = 23
  ATK_STATE_SINGLE_LINE = 24
  ATK_STATE_STALE = 25
  ATK_STATE_TRANSIENT = 26
  ATK_STATE_VERTICAL = 27
  ATK_STATE_VISIBLE = 28
  ATK_STATE_MANAGES_DESCENDANTS = 29
  ATK_STATE_INDETERMINATE = 30
  ATK_STATE_TRUNCATED = 31
  ATK_STATE_REQUIRED = 32
  ATK_STATE_INVALID_ENTRY = 33
  ATK_STATE_SUPPORTS_AUTOCOMPLETION = 34
  ATK_STATE_SELECTABLE_TEXT = 35
  ATK_STATE_DEFAULT = 36
  ATK_STATE_ANIMATED = 37
  ATK_STATE_VISITED = 38
  ATK_STATE_CHECKABLE = 39
  ATK_STATE_HAS_POPUP = 40
  ATK_STATE_HAS_TOOLTIP = 41
  ATK_STATE_READ_ONLY = 42
  ATK_STATE_LAST_DEFINED = 43
END ENUM
TYPE AS _AtkStreamableContent AtkStreamableContent
TYPE AS _AtkStreamableContentIface AtkStreamableContentIface
TYPE AS _AtkTable AtkTable
TYPE AS _AtkTableCell AtkTableCell
TYPE AS _AtkTableCellIface AtkTableCellIface
TYPE AS _AtkTableIface AtkTableIface
TYPE AS _AtkText AtkText
TYPE AS LONG AtkTextAttribute
ENUM
  ATK_TEXT_ATTR_INVALID = 0
  ATK_TEXT_ATTR_LEFT_MARGIN = 1
  ATK_TEXT_ATTR_RIGHT_MARGIN = 2
  ATK_TEXT_ATTR_INDENT = 3
  ATK_TEXT_ATTR_INVISIBLE = 4
  ATK_TEXT_ATTR_EDITABLE = 5
  ATK_TEXT_ATTR_PIXELS_ABOVE_LINES = 6
  ATK_TEXT_ATTR_PIXELS_BELOW_LINES = 7
  ATK_TEXT_ATTR_PIXELS_INSIDE_WRAP = 8
  ATK_TEXT_ATTR_BG_FULL_HEIGHT = 9
  ATK_TEXT_ATTR_RISE = 10
  ATK_TEXT_ATTR_UNDERLINE = 11
  ATK_TEXT_ATTR_STRIKETHROUGH = 12
  ATK_TEXT_ATTR_SIZE = 13
  ATK_TEXT_ATTR_SCALE = 14
  ATK_TEXT_ATTR_WEIGHT = 15
  ATK_TEXT_ATTR_LANGUAGE = 16
  ATK_TEXT_ATTR_FAMILY_NAME = 17
  ATK_TEXT_ATTR_BG_COLOR = 18
  ATK_TEXT_ATTR_FG_COLOR = 19
  ATK_TEXT_ATTR_BG_STIPPLE = 20
  ATK_TEXT_ATTR_FG_STIPPLE = 21
  ATK_TEXT_ATTR_WRAP_MODE = 22
  ATK_TEXT_ATTR_DIRECTION = 23
  ATK_TEXT_ATTR_JUSTIFICATION = 24
  ATK_TEXT_ATTR_STRETCH = 25
  ATK_TEXT_ATTR_VARIANT = 26
  ATK_TEXT_ATTR_STYLE = 27
  ATK_TEXT_ATTR_LAST_DEFINED = 28
END ENUM
TYPE AS LONG AtkTextBoundary
ENUM
  ATK_TEXT_BOUNDARY_CHAR = 0
  ATK_TEXT_BOUNDARY_WORD_START = 1
  ATK_TEXT_BOUNDARY_WORD_END = 2
  ATK_TEXT_BOUNDARY_SENTENCE_START = 3
  ATK_TEXT_BOUNDARY_SENTENCE_END = 4
  ATK_TEXT_BOUNDARY_LINE_START = 5
  ATK_TEXT_BOUNDARY_LINE_END = 6
END ENUM
TYPE AS LONG AtkTextClipType
ENUM
  ATK_TEXT_CLIP_NONE = 0
  ATK_TEXT_CLIP_MIN = 1
  ATK_TEXT_CLIP_MAX = 2
  ATK_TEXT_CLIP_BOTH = 3
END ENUM
TYPE AS LONG AtkTextGranularity
ENUM
  ATK_TEXT_GRANULARITY_CHAR = 0
  ATK_TEXT_GRANULARITY_WORD = 1
  ATK_TEXT_GRANULARITY_SENTENCE = 2
  ATK_TEXT_GRANULARITY_LINE = 3
  ATK_TEXT_GRANULARITY_PARAGRAPH = 4
END ENUM
TYPE AS _AtkTextIface AtkTextIface
TYPE AS _AtkTextRange AtkTextRange
TYPE AS _AtkTextRectangle AtkTextRectangle
TYPE AS _AtkUtil AtkUtil
TYPE AS _AtkUtilClass AtkUtilClass
#DEFINE ATK_VERSION_MIN_REQUIRED 2
TYPE AS _AtkValue AtkValue
TYPE AS _AtkValueIface AtkValueIface
TYPE AS LONG AtkValueType
ENUM
  ATK_VALUE_VERY_WEAK = 0
  ATK_VALUE_WEAK = 1
  ATK_VALUE_ACCEPTABLE = 2
  ATK_VALUE_STRONG = 3
  ATK_VALUE_VERY_STRONG = 4
  ATK_VALUE_VERY_LOW = 5
  ATK_VALUE_LOW = 6
  ATK_VALUE_MEDIUM = 7
  ATK_VALUE_HIGH = 8
  ATK_VALUE_VERY_HIGH = 9
  ATK_VALUE_VERY_BAD = 10
  ATK_VALUE_BAD = 11
  ATK_VALUE_GOOD = 12
  ATK_VALUE_VERY_GOOD = 13
  ATK_VALUE_BEST = 14
  ATK_VALUE_LAST_DEFINED = 15
END ENUM
TYPE AS _AtkWindow AtkWindow
TYPE AS _AtkWindowIface AtkWindowIface
EXTERN "C" LIB "atk-1.0"
' P_X

TYPE AtkFunction AS FUNCTION CDECL(BYVAL AS gpointer) AS gboolean
TYPE AtkFocusHandler AS SUB CDECL(BYVAL AS AtkObject PTR, BYVAL AS gboolean)
TYPE AtkPropertyChangeHandler AS SUB CDECL(BYVAL AS AtkObject PTR, BYVAL AS AtkPropertyValues PTR)
TYPE _AtkPropertyValues
  AS const gchar PTR property_name
  AS GValue old_value
  AS GValue new_value
END TYPE
TYPE _AtkObject
  AS GObject parent
  AS gchar PTR description
  AS gchar PTR name
  AS AtkObject PTR accessible_parent
  AS AtkRole role
  AS AtkRelationSet PTR relation_set
  AS AtkLayer layer
END TYPE
DECLARE FUNCTION atk_object_get_type() AS GType
#DEFINE ATK_TYPE_OBJECT (atk_object_get_type())
#DEFINE ATK_OBJECT(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), ATK_TYPE_OBJECT, AtkObject))
#DEFINE ATK_OBJECT_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), ATK_TYPE_OBJECT, AtkObjectClass))
#DEFINE ATK_IS_OBJECT(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), ATK_TYPE_OBJECT))
#DEFINE ATK_IS_CLASS_OBJECT(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), ATK_TYPE_OBJECT))
#DEFINE ATK_OBJECT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), ATK_TYPE_OBJECT, AtkObjectClass))
DECLARE FUNCTION atk_object_add_relationship(BYVAL AS AtkObject PTR, BYVAL AS AtkRelationType, BYVAL AS AtkObject PTR) AS gboolean
DECLARE FUNCTION atk_object_connect_property_change_handler(BYVAL AS AtkObject PTR, BYVAL AS AtkPropertyChangeHandler PTR) AS guint
DECLARE FUNCTION atk_object_get_accessible_id(BYVAL AS AtkObject PTR) AS const gchar PTR
DECLARE FUNCTION atk_object_get_attributes(BYVAL AS AtkObject PTR) AS AtkAttributeSet PTR
DECLARE FUNCTION atk_object_get_description(BYVAL AS AtkObject PTR) AS const gchar PTR
DECLARE FUNCTION atk_object_get_index_in_parent(BYVAL AS AtkObject PTR) AS gint
DECLARE FUNCTION atk_object_get_layer(BYVAL AS AtkObject PTR) AS AtkLayer
DECLARE FUNCTION atk_object_get_mdi_zorder(BYVAL AS AtkObject PTR) AS gint
DECLARE FUNCTION atk_object_get_n_accessible_children(BYVAL AS AtkObject PTR) AS gint
DECLARE FUNCTION atk_object_get_name(BYVAL AS AtkObject PTR) AS const gchar PTR
DECLARE FUNCTION atk_object_get_object_locale(BYVAL AS AtkObject PTR) AS const gchar PTR
DECLARE FUNCTION atk_object_get_parent(BYVAL AS AtkObject PTR) AS AtkObject PTR
DECLARE FUNCTION atk_object_get_role(BYVAL AS AtkObject PTR) AS AtkRole
DECLARE SUB atk_object_initialize(BYVAL AS AtkObject PTR, BYVAL AS gpointer)
DECLARE SUB atk_object_notify_state_change(BYVAL AS AtkObject PTR, BYVAL AS AtkState, BYVAL AS gboolean)
DECLARE FUNCTION atk_object_peek_parent(BYVAL AS AtkObject PTR) AS AtkObject PTR
DECLARE FUNCTION atk_object_ref_accessible_child(BYVAL AS AtkObject PTR, BYVAL AS gint) AS AtkObject PTR
DECLARE FUNCTION atk_object_ref_relation_set(BYVAL AS AtkObject PTR) AS AtkRelationSet PTR
DECLARE FUNCTION atk_object_ref_state_set(BYVAL AS AtkObject PTR) AS AtkStateSet PTR
DECLARE SUB atk_object_remove_property_change_handler(BYVAL AS AtkObject PTR, BYVAL AS guint)
DECLARE FUNCTION atk_object_remove_relationship(BYVAL AS AtkObject PTR, BYVAL AS AtkRelationType, BYVAL AS AtkObject PTR) AS gboolean
DECLARE SUB atk_object_set_accessible_id(BYVAL AS AtkObject PTR, BYVAL AS const gchar PTR)
DECLARE SUB atk_object_set_description(BYVAL AS AtkObject PTR, BYVAL AS const gchar PTR)
DECLARE SUB atk_object_set_name(BYVAL AS AtkObject PTR, BYVAL AS const gchar PTR)
DECLARE SUB atk_object_set_parent(BYVAL AS AtkObject PTR, BYVAL AS AtkObject PTR)
DECLARE SUB atk_object_set_role(BYVAL AS AtkObject PTR, BYVAL AS AtkRole)
TYPE _AtkObjectClass
  AS GObjectClass parent
  get_name AS FUNCTION CDECL(BYVAL AS AtkObject PTR) AS const gchar PTR
  get_description AS FUNCTION CDECL(BYVAL AS AtkObject PTR) AS const gchar PTR
  get_parent AS FUNCTION CDECL(BYVAL AS AtkObject PTR) AS AtkObject PTR
  get_n_children AS FUNCTION CDECL(BYVAL AS AtkObject PTR) AS gint
  ref_child AS FUNCTION CDECL(BYVAL AS AtkObject PTR, BYVAL AS gint) AS AtkObject PTR
  get_index_in_parent AS FUNCTION CDECL(BYVAL AS AtkObject PTR) AS gint
  ref_relation_set AS FUNCTION CDECL(BYVAL AS AtkObject PTR) AS AtkRelationSet PTR
  get_role AS FUNCTION CDECL(BYVAL AS AtkObject PTR) AS AtkRole
  get_layer AS FUNCTION CDECL(BYVAL AS AtkObject PTR) AS AtkLayer
  get_mdi_zorder AS FUNCTION CDECL(BYVAL AS AtkObject PTR) AS gint
  ref_state_set AS FUNCTION CDECL(BYVAL AS AtkObject PTR) AS AtkStateSet PTR
  set_name AS SUB CDECL(BYVAL AS AtkObject PTR, BYVAL AS const gchar PTR)
  set_description AS SUB CDECL(BYVAL AS AtkObject PTR, BYVAL AS const gchar PTR)
  set_parent AS SUB CDECL(BYVAL AS AtkObject PTR, BYVAL AS AtkObject PTR)
  set_role AS SUB CDECL(BYVAL AS AtkObject PTR, BYVAL AS AtkRole)
  connect_property_change_handler AS FUNCTION CDECL(BYVAL AS AtkObject PTR, BYVAL AS AtkPropertyChangeHandler PTR) AS guint
  remove_property_change_handler AS SUB CDECL(BYVAL AS AtkObject PTR, BYVAL AS guint)
  initialize AS SUB CDECL(BYVAL AS AtkObject PTR, BYVAL AS gpointer)
  children_changed AS SUB CDECL(BYVAL AS AtkObject PTR, BYVAL AS guint, BYVAL AS gpointer)
  focus_event AS SUB CDECL(BYVAL AS AtkObject PTR, BYVAL AS gboolean)
  property_change AS SUB CDECL(BYVAL AS AtkObject PTR, BYVAL AS AtkPropertyValues PTR)
  state_change AS SUB CDECL(BYVAL AS AtkObject PTR, BYVAL AS const gchar PTR, BYVAL AS gboolean)
  visible_data_changed AS SUB CDECL(BYVAL AS AtkObject PTR)
  active_descendant_changed AS SUB CDECL(BYVAL AS AtkObject PTR, BYVAL AS gpointer PTR)
  get_attributes AS FUNCTION CDECL(BYVAL AS AtkObject PTR) AS AtkAttributeSet PTR
  get_object_locale AS FUNCTION CDECL(BYVAL AS AtkObject PTR) AS const gchar PTR
  AS AtkFunction pad1
END TYPE
TYPE _AtkObjectFactory
  AS GObject parent
END TYPE
DECLARE FUNCTION atk_object_factory_get_type() AS GType
#DEFINE ATK_TYPE_OBJECT_FACTORY (atk_object_factory_get_type())
#DEFINE ATK_OBJECT_FACTORY(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), ATK_TYPE_OBJECT_FACTORY, AtkObjectFactory))
#DEFINE ATK_OBJECT_FACTORY_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), ATK_TYPE_OBJECT_FACTORY, AtkObjectFactoryClass))
#DEFINE ATK_IS_OBJECT_FACTORY(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), ATK_TYPE_OBJECT_FACTORY))
#DEFINE ATK_IS_CLASS_OBJECT_FACTORY(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), ATK_TYPE_OBJECT_FACTORY))
#DEFINE ATK_OBJECT_FACTORY_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), ATK_TYPE_OBJECT_FACTORY, AtkObjectFactoryClass))
DECLARE FUNCTION atk_object_factory_create_accessible(BYVAL AS AtkObjectFactory PTR, BYVAL AS GObject PTR) AS AtkObject PTR
DECLARE FUNCTION atk_object_factory_get_accessible_type(BYVAL AS AtkObjectFactory PTR) AS GType
DECLARE SUB atk_object_factory_invalidate(BYVAL AS AtkObjectFactory PTR)
TYPE _AtkObjectFactoryClass
  AS GObjectClass parent_class
  create_accessible AS FUNCTION CDECL(BYVAL AS GObject PTR) AS AtkObject PTR
  invalidate AS SUB CDECL(BYVAL AS AtkObjectFactory PTR)
  get_accessible_type AS FUNCTION CDECL() AS GType
  AS AtkFunction pad1
  AS AtkFunction pad2
END TYPE
TYPE _AtkTextRectangle
  AS gint x
  AS gint y
  AS gint width
  AS gint height
END TYPE
' P_3

DECLARE FUNCTION atk_action_get_type() AS GType
#DEFINE ATK_TYPE_ACTION (atk_action_get_type())
#DEFINE ATK_ACTION(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), ATK_TYPE_ACTION, AtkAction))
#DEFINE ATK_ACTION_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), ATK_TYPE_ACTION, AtkActionIface))
#DEFINE ATK_IS_ACTION(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), ATK_TYPE_ACTION))
#DEFINE ATK_ACTION_GET_IFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE((obj), ATK_TYPE_ACTION, AtkActionIface))
DECLARE FUNCTION atk_action_do_action(BYVAL AS AtkAction PTR, BYVAL AS gint) AS gboolean
DECLARE FUNCTION atk_action_get_description(BYVAL AS AtkAction PTR, BYVAL AS gint) AS const gchar PTR
DECLARE FUNCTION atk_action_get_keybinding(BYVAL AS AtkAction PTR, BYVAL AS gint) AS const gchar PTR
DECLARE FUNCTION atk_action_get_localized_name(BYVAL AS AtkAction PTR, BYVAL AS gint) AS const gchar PTR
DECLARE FUNCTION atk_action_get_n_actions(BYVAL AS AtkAction PTR) AS gint
DECLARE FUNCTION atk_action_get_name(BYVAL AS AtkAction PTR, BYVAL AS gint) AS const gchar PTR
DECLARE FUNCTION atk_action_set_description(BYVAL AS AtkAction PTR, BYVAL AS gint, BYVAL AS const gchar PTR) AS gboolean
TYPE _AtkActionIface
  AS GTypeInterface parent
  do_action AS FUNCTION CDECL(BYVAL AS AtkAction PTR, BYVAL AS gint) AS gboolean
  get_n_actions AS FUNCTION CDECL(BYVAL AS AtkAction PTR) AS gint
  get_description AS FUNCTION CDECL(BYVAL AS AtkAction PTR, BYVAL AS gint) AS const gchar PTR
  get_name AS FUNCTION CDECL(BYVAL AS AtkAction PTR, BYVAL AS gint) AS const gchar PTR
  get_keybinding AS FUNCTION CDECL(BYVAL AS AtkAction PTR, BYVAL AS gint) AS const gchar PTR
  set_description AS FUNCTION CDECL(BYVAL AS AtkAction PTR, BYVAL AS gint, BYVAL AS const gchar PTR) AS gboolean
  get_localized_name AS FUNCTION CDECL(BYVAL AS AtkAction PTR, BYVAL AS gint) AS const gchar PTR
END TYPE
TYPE _AtkAttribute
  AS gchar PTR name
  AS gchar PTR value
END TYPE
DECLARE SUB atk_attribute_set_free(BYVAL AS AtkAttributeSet PTR)
DECLARE FUNCTION atk_component_get_type() AS GType
#DEFINE ATK_TYPE_COMPONENT (atk_component_get_type())
#DEFINE ATK_COMPONENT(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), ATK_TYPE_COMPONENT, AtkComponent))
#DEFINE ATK_COMPONENT_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), ATK_TYPE_COMPONENT, AtkComponentIface))
#DEFINE ATK_IS_COMPONENT(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), ATK_TYPE_COMPONENT))
#DEFINE ATK_COMPONENT_GET_IFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE((obj), ATK_TYPE_COMPONENT, AtkComponentIface))
DECLARE FUNCTION atk_component_add_focus_handler(BYVAL AS AtkComponent PTR, BYVAL AS AtkFocusHandler) AS guint
DECLARE FUNCTION atk_component_contains(BYVAL AS AtkComponent PTR, BYVAL AS gint, BYVAL AS gint, BYVAL AS AtkCoordType) AS gboolean
DECLARE FUNCTION atk_component_get_alpha(BYVAL AS AtkComponent PTR) AS gdouble
DECLARE SUB atk_component_get_extents(BYVAL AS AtkComponent PTR, BYVAL AS gint PTR, BYVAL AS gint PTR, BYVAL AS gint PTR, BYVAL AS gint PTR, BYVAL AS AtkCoordType)
DECLARE FUNCTION atk_component_get_layer(BYVAL AS AtkComponent PTR) AS AtkLayer
DECLARE FUNCTION atk_component_get_mdi_zorder(BYVAL AS AtkComponent PTR) AS gint
DECLARE SUB atk_component_get_position(BYVAL AS AtkComponent PTR, BYVAL AS gint PTR, BYVAL AS gint PTR, BYVAL AS AtkCoordType)
DECLARE SUB atk_component_get_size(BYVAL AS AtkComponent PTR, BYVAL AS gint PTR, BYVAL AS gint PTR)
DECLARE FUNCTION atk_component_grab_focus(BYVAL AS AtkComponent PTR) AS gboolean
DECLARE FUNCTION atk_component_ref_accessible_at_point(BYVAL AS AtkComponent PTR, BYVAL AS gint, BYVAL AS gint, BYVAL AS AtkCoordType) AS AtkObject PTR
DECLARE SUB atk_component_remove_focus_handler(BYVAL AS AtkComponent PTR, BYVAL AS guint)
DECLARE FUNCTION atk_component_scroll_to(BYVAL AS AtkComponent PTR, BYVAL AS AtkScrollType) AS gboolean
DECLARE FUNCTION atk_component_scroll_to_point(BYVAL AS AtkComponent PTR, BYVAL AS AtkCoordType, BYVAL AS gint, BYVAL AS gint) AS gboolean
DECLARE FUNCTION atk_component_set_extents(BYVAL AS AtkComponent PTR, BYVAL AS gint, BYVAL AS gint, BYVAL AS gint, BYVAL AS gint, BYVAL AS AtkCoordType) AS gboolean
DECLARE FUNCTION atk_component_set_position(BYVAL AS AtkComponent PTR, BYVAL AS gint, BYVAL AS gint, BYVAL AS AtkCoordType) AS gboolean
DECLARE FUNCTION atk_component_set_size(BYVAL AS AtkComponent PTR, BYVAL AS gint, BYVAL AS gint) AS gboolean
TYPE _AtkComponentIface
  AS GTypeInterface parent
  add_focus_handler AS FUNCTION CDECL(BYVAL AS AtkComponent PTR, BYVAL AS AtkFocusHandler) AS guint
  contains AS FUNCTION CDECL(BYVAL AS AtkComponent PTR, BYVAL AS gint, BYVAL AS gint, BYVAL AS AtkCoordType) AS gboolean
  ref_accessible_at_point AS FUNCTION CDECL(BYVAL AS AtkComponent PTR, BYVAL AS gint, BYVAL AS gint, BYVAL AS AtkCoordType) AS AtkObject PTR
  get_extents AS SUB CDECL(BYVAL AS AtkComponent PTR, BYVAL AS gint PTR, BYVAL AS gint PTR, BYVAL AS gint PTR, BYVAL AS gint PTR, BYVAL AS AtkCoordType)
  get_position AS SUB CDECL(BYVAL AS AtkComponent PTR, BYVAL AS gint PTR, BYVAL AS gint PTR, BYVAL AS AtkCoordType)
  get_size AS SUB CDECL(BYVAL AS AtkComponent PTR, BYVAL AS gint PTR, BYVAL AS gint PTR)
  grab_focus AS FUNCTION CDECL(BYVAL AS AtkComponent PTR) AS gboolean
  remove_focus_handler AS SUB CDECL(BYVAL AS AtkComponent PTR, BYVAL AS guint)
  set_extents AS FUNCTION CDECL(BYVAL AS AtkComponent PTR, BYVAL AS gint, BYVAL AS gint, BYVAL AS gint, BYVAL AS gint, BYVAL AS AtkCoordType) AS gboolean
  set_position AS FUNCTION CDECL(BYVAL AS AtkComponent PTR, BYVAL AS gint, BYVAL AS gint, BYVAL AS AtkCoordType) AS gboolean
  set_size AS FUNCTION CDECL(BYVAL AS AtkComponent PTR, BYVAL AS gint, BYVAL AS gint) AS gboolean
  get_layer AS FUNCTION CDECL(BYVAL AS AtkComponent PTR) AS AtkLayer
  get_mdi_zorder AS FUNCTION CDECL(BYVAL AS AtkComponent PTR) AS gint
  bounds_changed AS SUB CDECL(BYVAL AS AtkComponent PTR, BYVAL AS AtkRectangle PTR)
  get_alpha AS FUNCTION CDECL(BYVAL AS AtkComponent PTR) AS gdouble
  scroll_to AS FUNCTION CDECL(BYVAL AS AtkComponent PTR, BYVAL AS AtkScrollType) AS gboolean
  scroll_to_point AS FUNCTION CDECL(BYVAL AS AtkComponent PTR, BYVAL AS AtkCoordType, BYVAL AS gint, BYVAL AS gint) AS gboolean
END TYPE
DECLARE FUNCTION atk_coord_type_get_type() AS GType
#DEFINE ATK_TYPE_COORD_TYPE (atk_coord_type_get_type())
DECLARE FUNCTION atk_document_get_type() AS GType
#DEFINE ATK_TYPE_DOCUMENT (atk_document_get_type())
#DEFINE ATK_DOCUMENT(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), ATK_TYPE_DOCUMENT, AtkDocument))
#DEFINE ATK_DOCUMENT_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), ATK_TYPE_DOCUMENT, AtkDocumentIface))
#DEFINE ATK_IS_DOCUMENT(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), ATK_TYPE_DOCUMENT))
#DEFINE ATK_DOCUMENT_GET_IFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE((obj), ATK_TYPE_DOCUMENT, AtkDocumentIface))
DECLARE FUNCTION atk_document_get_attribute_value(BYVAL AS AtkDocument PTR, BYVAL AS const gchar PTR) AS const gchar PTR
DECLARE FUNCTION atk_document_get_attributes(BYVAL AS AtkDocument PTR) AS AtkAttributeSet PTR
DECLARE FUNCTION atk_document_get_current_page_number(BYVAL AS AtkDocument PTR) AS gint
DECLARE FUNCTION atk_document_get_document(BYVAL AS AtkDocument PTR) AS gpointer
DECLARE FUNCTION atk_document_get_document_type(BYVAL AS AtkDocument PTR) AS const gchar PTR
DECLARE FUNCTION atk_document_get_locale(BYVAL AS AtkDocument PTR) AS const gchar PTR
DECLARE FUNCTION atk_document_get_page_count(BYVAL AS AtkDocument PTR) AS gint
DECLARE FUNCTION atk_document_set_attribute_value(BYVAL AS AtkDocument PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR) AS gboolean
TYPE _AtkDocumentIface
  AS GTypeInterface parent
  get_document_type AS FUNCTION CDECL(BYVAL AS AtkDocument PTR) AS const gchar PTR
  get_document AS FUNCTION CDECL(BYVAL AS AtkDocument PTR) AS gpointer
  get_document_locale AS FUNCTION CDECL(BYVAL AS AtkDocument PTR) AS const gchar PTR
  get_document_attributes AS FUNCTION CDECL(BYVAL AS AtkDocument PTR) AS AtkAttributeSet PTR
  get_document_attribute_value AS FUNCTION CDECL(BYVAL AS AtkDocument PTR, BYVAL AS const gchar PTR) AS const gchar PTR
  set_document_attribute AS FUNCTION CDECL(BYVAL AS AtkDocument PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR) AS gboolean
  get_current_page_number AS FUNCTION CDECL(BYVAL AS AtkDocument PTR) AS gint
  get_page_count AS FUNCTION CDECL(BYVAL AS AtkDocument PTR) AS gint
END TYPE
DECLARE FUNCTION atk_editable_text_get_type() AS GType
#DEFINE ATK_TYPE_EDITABLE_TEXT (atk_editable_text_get_type())
#DEFINE ATK_EDITABLE_TEXT(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), ATK_TYPE_EDITABLE_TEXT, AtkEditableText))
#DEFINE ATK_EDITABLE_TEXT_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), ATK_TYPE_EDITABLE_TEXT, AtkEditableTextIface))
#DEFINE ATK_IS_EDITABLE_TEXT(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), ATK_TYPE_EDITABLE_TEXT))
#DEFINE ATK_EDITABLE_TEXT_GET_IFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE((obj), ATK_TYPE_EDITABLE_TEXT, AtkEditableTextIface))
DECLARE SUB atk_editable_text_copy_text(BYVAL AS AtkEditableText PTR, BYVAL AS gint, BYVAL AS gint)
DECLARE SUB atk_editable_text_cut_text(BYVAL AS AtkEditableText PTR, BYVAL AS gint, BYVAL AS gint)
DECLARE SUB atk_editable_text_delete_text(BYVAL AS AtkEditableText PTR, BYVAL AS gint, BYVAL AS gint)
DECLARE SUB atk_editable_text_insert_text(BYVAL AS AtkEditableText PTR, BYVAL AS const gchar PTR, BYVAL AS gint, BYVAL AS gint PTR)
DECLARE SUB atk_editable_text_paste_text(BYVAL AS AtkEditableText PTR, BYVAL AS gint)
DECLARE FUNCTION atk_editable_text_set_run_attributes(BYVAL AS AtkEditableText PTR, BYVAL AS AtkAttributeSet PTR, BYVAL AS gint, BYVAL AS gint) AS gboolean
DECLARE SUB atk_editable_text_set_text_contents(BYVAL AS AtkEditableText PTR, BYVAL AS const gchar PTR)
TYPE _AtkEditableTextIface
  AS GTypeInterface parent_interface
  set_run_attributes AS FUNCTION CDECL(BYVAL AS AtkEditableText PTR, BYVAL AS AtkAttributeSet PTR, BYVAL AS gint, BYVAL AS gint) AS gboolean
  set_text_contents AS SUB CDECL(BYVAL AS AtkEditableText PTR, BYVAL AS const gchar PTR)
  insert_text AS SUB CDECL(BYVAL AS AtkEditableText PTR, BYVAL AS const gchar PTR, BYVAL AS gint, BYVAL AS gint PTR)
  copy_text AS SUB CDECL(BYVAL AS AtkEditableText PTR, BYVAL AS gint, BYVAL AS gint)
  cut_text AS SUB CDECL(BYVAL AS AtkEditableText PTR, BYVAL AS gint, BYVAL AS gint)
  delete_text AS SUB CDECL(BYVAL AS AtkEditableText PTR, BYVAL AS gint, BYVAL AS gint)
  paste_text AS SUB CDECL(BYVAL AS AtkEditableText PTR, BYVAL AS gint)
END TYPE
TYPE AtkEventListener AS SUB CDECL(BYVAL AS AtkObject PTR)
TYPE AtkEventListenerInit AS SUB CDECL()
TYPE _AtkGObjectAccessible
  AS AtkObject parent
END TYPE
DECLARE FUNCTION atk_gobject_accessible_get_type() AS GType
#DEFINE ATK_TYPE_GOBJECT_ACCESSIBLE (atk_gobject_accessible_get_type())
#DEFINE ATK_GOBJECT_ACCESSIBLE(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), ATK_TYPE_GOBJECT_ACCESSIBLE, AtkGObjectAccessible))
#DEFINE ATK_GOBJECT_ACCESSIBLE_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), ATK_TYPE_GOBJECT_ACCESSIBLE, AtkGObjectAccessibleClass))
#DEFINE ATK_IS_GOBJECT_ACCESSIBLE(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), ATK_TYPE_GOBJECT_ACCESSIBLE))
#DEFINE ATK_IS_CLASS_GOBJECT_ACCESSIBLE(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), ATK_TYPE_GOBJECT_ACCESSIBLE))
#DEFINE ATK_GOBJECT_ACCESSIBLE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), ATK_TYPE_GOBJECT_ACCESSIBLE, AtkGObjectAccessibleClass))
DECLARE FUNCTION atk_gobject_accessible_for_object(BYVAL AS GObject PTR) AS AtkObject PTR
DECLARE FUNCTION atk_gobject_accessible_get_object(BYVAL AS AtkGObjectAccessible PTR) AS GObject PTR
TYPE _AtkGObjectAccessibleClass
  AS AtkObjectClass parent_class
  AS AtkFunction pad1
  AS AtkFunction pad2
END TYPE
TYPE _AtkHyperlink
  AS GObject parent
END TYPE
DECLARE FUNCTION atk_hyperlink_get_type() AS GType
#DEFINE ATK_TYPE_HYPERLINK (atk_hyperlink_get_type())
#DEFINE ATK_HYPERLINK(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), ATK_TYPE_HYPERLINK, AtkHyperlink))
#DEFINE ATK_HYPERLINK_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), ATK_TYPE_HYPERLINK, AtkHyperlinkClass))
#DEFINE ATK_IS_HYPERLINK(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), ATK_TYPE_HYPERLINK))
#DEFINE ATK_IS_CLASS_HYPERLINK(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), ATK_TYPE_HYPERLINK))
#DEFINE ATK_HYPERLINK_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), ATK_TYPE_HYPERLINK, AtkHyperlinkClass))
DECLARE FUNCTION atk_hyperlink_get_end_index(BYVAL AS AtkHyperlink PTR) AS gint
DECLARE FUNCTION atk_hyperlink_get_n_anchors(BYVAL AS AtkHyperlink PTR) AS gint
DECLARE FUNCTION atk_hyperlink_get_object(BYVAL AS AtkHyperlink PTR, BYVAL AS gint) AS AtkObject PTR
DECLARE FUNCTION atk_hyperlink_get_start_index(BYVAL AS AtkHyperlink PTR) AS gint
DECLARE FUNCTION atk_hyperlink_get_uri(BYVAL AS AtkHyperlink PTR, BYVAL AS gint) AS gchar PTR
DECLARE FUNCTION atk_hyperlink_is_inline(BYVAL AS AtkHyperlink PTR) AS gboolean
DECLARE FUNCTION atk_hyperlink_is_selected_link(BYVAL AS AtkHyperlink PTR) AS gboolean
DECLARE FUNCTION atk_hyperlink_is_valid(BYVAL AS AtkHyperlink PTR) AS gboolean
TYPE _AtkHyperlinkClass
  AS GObjectClass parent
  get_uri AS FUNCTION CDECL(BYVAL AS AtkHyperlink PTR, BYVAL AS gint) AS gchar PTR
  get_object AS FUNCTION CDECL(BYVAL AS AtkHyperlink PTR, BYVAL AS gint) AS AtkObject PTR
  get_end_index AS FUNCTION CDECL(BYVAL AS AtkHyperlink PTR) AS gint
  get_start_index AS FUNCTION CDECL(BYVAL AS AtkHyperlink PTR) AS gint
  is_valid AS FUNCTION CDECL(BYVAL AS AtkHyperlink PTR) AS gboolean
  get_n_anchors AS FUNCTION CDECL(BYVAL AS AtkHyperlink PTR) AS gint
  link_state AS FUNCTION CDECL(BYVAL AS AtkHyperlink PTR) AS guint
  is_selected_link AS FUNCTION CDECL(BYVAL AS AtkHyperlink PTR) AS gboolean
  link_activated AS SUB CDECL(BYVAL AS AtkHyperlink PTR)
  AS AtkFunction pad1
END TYPE
DECLARE FUNCTION atk_hyperlink_impl_get_type() AS GType
#DEFINE ATK_TYPE_HYPERLINK_IMPL (atk_hyperlink_impl_get_type())
#DEFINE ATK_HYPERLINK_IMPL(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), ATK_TYPE_HYPERLINK_IMPL, AtkHyperlinkImpl))
#DEFINE ATK_HYPERLINK_IMPL_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), ATK_TYPE_HYPERLINK_IMPL, AtkHyperlinkImplIface))
#DEFINE ATK_IS_HYPERLINK_IMPL(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), ATK_TYPE_HYPERLINK_IMPL))
#DEFINE ATK_HYPERLINK_IMPL_GET_IFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE((obj), ATK_TYPE_HYPERLINK_IMPL, AtkHyperlinkImplIface))
DECLARE FUNCTION atk_hyperlink_impl_get_hyperlink(BYVAL AS AtkHyperlinkImpl PTR) AS AtkHyperlink PTR
TYPE _AtkHyperlinkImplIface
  AS GTypeInterface parent
  get_hyperlink AS FUNCTION CDECL(BYVAL AS AtkHyperlinkImpl PTR) AS AtkHyperlink PTR
END TYPE
DECLARE FUNCTION atk_hypertext_get_type() AS GType
#DEFINE ATK_TYPE_HYPERTEXT (atk_hypertext_get_type())
#DEFINE ATK_HYPERTEXT(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), ATK_TYPE_HYPERTEXT, AtkHypertext))
#DEFINE ATK_HYPERTEXT_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), ATK_TYPE_HYPERTEXT, AtkHypertextIface))
#DEFINE ATK_IS_HYPERTEXT(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), ATK_TYPE_HYPERTEXT))
#DEFINE ATK_HYPERTEXT_GET_IFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE((obj), ATK_TYPE_HYPERTEXT, AtkHypertextIface))
DECLARE FUNCTION atk_hypertext_get_link(BYVAL AS AtkHypertext PTR, BYVAL AS gint) AS AtkHyperlink PTR
DECLARE FUNCTION atk_hypertext_get_link_index(BYVAL AS AtkHypertext PTR, BYVAL AS gint) AS gint
DECLARE FUNCTION atk_hypertext_get_n_links(BYVAL AS AtkHypertext PTR) AS gint
TYPE _AtkHypertextIface
  AS GTypeInterface parent
  get_link AS FUNCTION CDECL(BYVAL AS AtkHypertext PTR, BYVAL AS gint) AS AtkHyperlink PTR
  get_n_links AS FUNCTION CDECL(BYVAL AS AtkHypertext PTR) AS gint
  get_link_index AS FUNCTION CDECL(BYVAL AS AtkHypertext PTR, BYVAL AS gint) AS gint
  link_selected AS SUB CDECL(BYVAL AS AtkHypertext PTR, BYVAL AS gint)
END TYPE
DECLARE FUNCTION atk_image_get_type() AS GType
#DEFINE ATK_TYPE_IMAGE (atk_image_get_type())
#DEFINE ATK_IMAGE(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), ATK_TYPE_IMAGE, AtkImage))
#DEFINE ATK_IMAGE_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), ATK_TYPE_IMAGE, AtkImageIface))
#DEFINE ATK_IS_IMAGE(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), ATK_TYPE_IMAGE))
#DEFINE ATK_IMAGE_GET_IFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE((obj), ATK_TYPE_IMAGE, AtkImageIface))
DECLARE FUNCTION atk_image_get_image_description(BYVAL AS AtkImage PTR) AS const gchar PTR
DECLARE FUNCTION atk_image_get_image_locale(BYVAL AS AtkImage PTR) AS const gchar PTR
DECLARE SUB atk_image_get_image_position(BYVAL AS AtkImage PTR, BYVAL AS gint PTR, BYVAL AS gint PTR, BYVAL AS AtkCoordType)
DECLARE SUB atk_image_get_image_size(BYVAL AS AtkImage PTR, BYVAL AS gint PTR, BYVAL AS gint PTR)
DECLARE FUNCTION atk_image_set_image_description(BYVAL AS AtkImage PTR, BYVAL AS const gchar PTR) AS gboolean
TYPE _AtkImageIface
  AS GTypeInterface parent
  get_image_position AS SUB CDECL(BYVAL AS AtkImage PTR, BYVAL AS gint PTR, BYVAL AS gint PTR, BYVAL AS AtkCoordType)
  get_image_description AS FUNCTION CDECL(BYVAL AS AtkImage PTR) AS const gchar PTR
  get_image_size AS SUB CDECL(BYVAL AS AtkImage PTR, BYVAL AS gint PTR, BYVAL AS gint PTR)
  set_image_description AS FUNCTION CDECL(BYVAL AS AtkImage PTR, BYVAL AS const gchar PTR) AS gboolean
  get_image_locale AS FUNCTION CDECL(BYVAL AS AtkImage PTR) AS const gchar PTR
END TYPE
DECLARE FUNCTION atk_implementor_ref_accessible(BYVAL AS AtkImplementor PTR) AS AtkObject PTR
DECLARE FUNCTION atk_implementor_get_type() AS GType
#DEFINE ATK_TYPE_IMPLEMENTOR (atk_implementor_get_type())
#DEFINE ATK_IMPLEMENTOR(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), ATK_TYPE_IMPLEMENTOR, AtkImplementorIface))
#DEFINE ATK_IMPLEMENTOR_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), ATK_TYPE_IMPLEMENTOR, Atk))
#DEFINE ATK_IS_IMPLEMENTOR(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), ATK_TYPE_IMPLEMENTOR))
#DEFINE ATK_IMPLEMENTOR_GET_IFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE((obj), ATK_TYPE_IMPLEMENTOR, Atk))
TYPE _AtkKeyEventStruct
  AS gint type
  AS guint state
  AS guint keyval
  AS gint length
  AS gchar PTR string
  AS guint16 keycode
  AS guint32 timestamp
END TYPE
TYPE AtkKeySnoopFunc AS FUNCTION CDECL(BYVAL AS AtkKeyEventStruct PTR, BYVAL AS gpointer) AS gint
TYPE _AtkMisc
  AS GObject parent
END TYPE
DECLARE FUNCTION atk_key_event_type_get_type() AS GType
#DEFINE ATK_TYPE_KEY_EVENT_TYPE (atk_key_event_type_get_type())
DECLARE FUNCTION atk_layer_get_type() AS GType
#DEFINE ATK_TYPE_LAYER (atk_layer_get_type())
DECLARE FUNCTION atk_misc_get_type() AS GType
#DEFINE ATK_TYPE_MISC (atk_misc_get_type())
#DEFINE ATK_MISC(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), ATK_TYPE_MISC, AtkMisc))
#DEFINE ATK_MISC_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), ATK_TYPE_MISC, AtkMiscClass))
#DEFINE ATK_IS_MISC(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), ATK_TYPE_MISC))
#DEFINE ATK_IS_CLASS_MISC(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), ATK_TYPE_MISC))
#DEFINE ATK_MISC_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), ATK_TYPE_MISC, AtkMiscClass))
DECLARE FUNCTION atk_misc_get_instance() AS const AtkMisc PTR
DECLARE SUB atk_misc_threads_enter(BYVAL AS AtkMisc PTR)
DECLARE SUB atk_misc_threads_leave(BYVAL AS AtkMisc PTR)
TYPE _AtkMiscClass
  AS GObjectClass parent
  threads_enter AS SUB CDECL(BYVAL AS AtkMisc PTR)
  threads_leave AS SUB CDECL(BYVAL AS AtkMisc PTR)
  AS gpointer vfuncs(31)
END TYPE
TYPE _AtkNoOpObject
  AS AtkObject parent
END TYPE
DECLARE FUNCTION atk_no_op_object_get_type() AS GType
#DEFINE ATK_TYPE_NO_OP_OBJECT (atk_no_op_object_get_type())
#DEFINE ATK_NO_OP_OBJECT(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), ATK_TYPE_NO_OP_OBJECT, AtkNoOpObject))
#DEFINE ATK_NO_OP_OBJECT_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), ATK_TYPE_NO_OP_OBJECT, AtkNoOpObjectClass))
#DEFINE ATK_IS_NO_OP_OBJECT(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), ATK_TYPE_NO_OP_OBJECT))
#DEFINE ATK_IS_CLASS_NO_OP_OBJECT(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), ATK_TYPE_NO_OP_OBJECT))
#DEFINE ATK_NO_OP_OBJECT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), ATK_TYPE_NO_OP_OBJECT, AtkNoOpObjectClass))
DECLARE FUNCTION atk_no_op_object_new(BYVAL AS GObject PTR) AS AtkObject PTR
TYPE _AtkNoOpObjectClass
  AS AtkObjectClass parent_class
END TYPE
TYPE _AtkNoOpObjectFactory
  AS AtkObjectFactory parent
END TYPE
DECLARE FUNCTION atk_no_op_object_factory_get_type() AS GType
#DEFINE ATK_TYPE_NO_OP_OBJECT_FACTORY (atk_no_op_object_factory_get_type())
#DEFINE ATK_NO_OP_OBJECT_FACTORY(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), ATK_TYPE_NO_OP_OBJECT_FACTORY, AtkNoOpObjectFactory))
#DEFINE ATK_NO_OP_OBJECT_FACTORY_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), ATK_TYPE_NO_OP_OBJECT_FACTORY, AtkNoOpObjectFactoryClass))
#DEFINE ATK_IS_NO_OP_OBJECT_FACTORY(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), ATK_TYPE_NO_OP_OBJECT_FACTORY))
#DEFINE ATK_IS_CLASS_NO_OP_OBJECT_FACTORY(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), ATK_TYPE_NO_OP_OBJECT_FACTORY))
#DEFINE ATK_NO_OP_OBJECT_FACTORY_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), ATK_TYPE_NO_OP_OBJECT_FACTORY, AtkNoOpObjectFactoryClass))
DECLARE FUNCTION atk_no_op_object_factory_new() AS AtkObjectFactory PTR
TYPE _AtkNoOpObjectFactoryClass
  AS AtkObjectFactoryClass parent_class
END TYPE
TYPE _AtkPlug
  AS AtkObject parent
END TYPE
DECLARE FUNCTION atk_plug_get_type() AS GType
#DEFINE ATK_TYPE_PLUG (atk_plug_get_type())
#DEFINE ATK_PLUG(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), ATK_TYPE_PLUG, AtkPlug))
#DEFINE ATK_PLUG_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), ATK_TYPE_PLUG, AtkPlugClass))
#DEFINE ATK_IS_PLUG(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), ATK_TYPE_PLUG))
#DEFINE ATK_IS_CLASS_PLUG(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), ATK_TYPE_PLUG))
#DEFINE ATK_PLUG_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), ATK_TYPE_PLUG, AtkPlugClass))
DECLARE FUNCTION atk_plug_new() AS AtkObject PTR
DECLARE FUNCTION atk_plug_get_id(BYVAL AS AtkPlug PTR) AS gchar PTR
DECLARE SUB atk_plug_set_child(BYVAL AS AtkPlug PTR, BYVAL AS AtkObject PTR)
TYPE _AtkPlugClass
  AS AtkObjectClass parent_class
  get_object_id AS FUNCTION CDECL(BYVAL AS AtkPlug PTR) AS gchar PTR
END TYPE
DECLARE FUNCTION atk_range_new(BYVAL AS gdouble, BYVAL AS gdouble, BYVAL AS const gchar PTR) AS AtkRange PTR
DECLARE FUNCTION atk_range_copy(BYVAL AS AtkRange PTR) AS AtkRange PTR
DECLARE SUB atk_range_free(BYVAL AS AtkRange PTR)
DECLARE FUNCTION atk_range_get_description(BYVAL AS AtkRange PTR) AS const gchar PTR
DECLARE FUNCTION atk_range_get_lower_limit(BYVAL AS AtkRange PTR) AS gdouble
DECLARE FUNCTION atk_range_get_upper_limit(BYVAL AS AtkRange PTR) AS gdouble
TYPE _AtkRectangle
  AS gint x
  AS gint y
  AS gint width
  AS gint height
END TYPE
TYPE _AtkRegistry
  AS GObject parent
  AS GHashTable PTR factory_type_registry
  AS GHashTable PTR factory_singleton_cache
END TYPE
DECLARE FUNCTION atk_registry_get_type() AS GType
#DEFINE ATK_TYPE_REGISTRY (atk_registry_get_type())
#DEFINE ATK_REGISTRY(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), ATK_TYPE_REGISTRY, AtkRegistry))
#DEFINE ATK_REGISTRY_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), ATK_TYPE_REGISTRY, AtkRegistryClass))
#DEFINE ATK_IS_REGISTRY(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), ATK_TYPE_REGISTRY))
#DEFINE ATK_IS_CLASS_REGISTRY(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), ATK_TYPE_REGISTRY))
#DEFINE ATK_REGISTRY_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), ATK_TYPE_REGISTRY, AtkRegistryClass))
DECLARE FUNCTION atk_registry_get_factory(BYVAL AS AtkRegistry PTR, BYVAL AS GType) AS AtkObjectFactory PTR
DECLARE FUNCTION atk_registry_get_factory_type(BYVAL AS AtkRegistry PTR, BYVAL AS GType) AS GType
DECLARE SUB atk_registry_set_factory_type(BYVAL AS AtkRegistry PTR, BYVAL AS GType, BYVAL AS GType)
TYPE _AtkRegistryClass
  AS GObjectClass parent_class
END TYPE
TYPE _AtkRelation
  AS GObject parent
  AS GPtrArray PTR target
  AS AtkRelationType relationship
END TYPE
DECLARE FUNCTION atk_relation_get_type() AS GType
#DEFINE ATK_TYPE_RELATION (atk_relation_get_type())
#DEFINE ATK_RELATION(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), ATK_TYPE_RELATION, AtkRelation))
#DEFINE ATK_RELATION_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), ATK_TYPE_RELATION, AtkRelationClass))
#DEFINE ATK_IS_RELATION(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), ATK_TYPE_RELATION))
#DEFINE ATK_IS_CLASS_RELATION(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), ATK_TYPE_RELATION))
#DEFINE ATK_RELATION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), ATK_TYPE_RELATION, AtkRelationClass))
DECLARE FUNCTION atk_relation_new(BYVAL AS AtkObject PTR PTR, BYVAL AS gint, BYVAL AS AtkRelationType) AS AtkRelation PTR
DECLARE SUB atk_relation_add_target(BYVAL AS AtkRelation PTR, BYVAL AS AtkObject PTR)
DECLARE FUNCTION atk_relation_get_relation_type(BYVAL AS AtkRelation PTR) AS AtkRelationType
DECLARE FUNCTION atk_relation_get_target(BYVAL AS AtkRelation PTR) AS GPtrArray PTR
DECLARE FUNCTION atk_relation_remove_target(BYVAL AS AtkRelation PTR, BYVAL AS AtkObject PTR) AS gboolean
TYPE _AtkRelationClass
  AS GObjectClass parent
END TYPE
TYPE _AtkRelationSet
  AS GObject parent
  AS GPtrArray PTR relations
END TYPE
DECLARE FUNCTION atk_relation_set_get_type() AS GType
#DEFINE ATK_TYPE_RELATION_SET (atk_relation_set_get_type())
#DEFINE ATK_RELATION_SET(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), ATK_TYPE_RELATION_SET, AtkRelationSet))
#DEFINE ATK_RELATION_SET_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), ATK_TYPE_RELATION_SET, AtkRelationSetClass))
#DEFINE ATK_IS_RELATION_SET(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), ATK_TYPE_RELATION_SET))
#DEFINE ATK_IS_CLASS_RELATION_SET(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), ATK_TYPE_RELATION_SET))
#DEFINE ATK_RELATION_SET_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), ATK_TYPE_RELATION_SET, AtkRelationSetClass))
DECLARE FUNCTION atk_relation_set_new() AS AtkRelationSet PTR
DECLARE SUB atk_relation_set_add(BYVAL AS AtkRelationSet PTR, BYVAL AS AtkRelation PTR)
DECLARE SUB atk_relation_set_add_relation_by_type(BYVAL AS AtkRelationSet PTR, BYVAL AS AtkRelationType, BYVAL AS AtkObject PTR)
DECLARE FUNCTION atk_relation_set_contains(BYVAL AS AtkRelationSet PTR, BYVAL AS AtkRelationType) AS gboolean
DECLARE FUNCTION atk_relation_set_contains_target(BYVAL AS AtkRelationSet PTR, BYVAL AS AtkRelationType, BYVAL AS AtkObject PTR) AS gboolean
DECLARE FUNCTION atk_relation_set_get_n_relations(BYVAL AS AtkRelationSet PTR) AS gint
DECLARE FUNCTION atk_relation_set_get_relation(BYVAL AS AtkRelationSet PTR, BYVAL AS gint) AS AtkRelation PTR
DECLARE FUNCTION atk_relation_set_get_relation_by_type(BYVAL AS AtkRelationSet PTR, BYVAL AS AtkRelationType) AS AtkRelation PTR
DECLARE SUB atk_relation_set_remove(BYVAL AS AtkRelationSet PTR, BYVAL AS AtkRelation PTR)
TYPE _AtkRelationSetClass
  AS GObjectClass parent
  AS AtkFunction pad1
  AS AtkFunction pad2
END TYPE
DECLARE FUNCTION atk_relation_type_get_type() AS GType
#DEFINE ATK_TYPE_RELATION_TYPE (atk_relation_type_get_type())
DECLARE FUNCTION atk_role_get_type() AS GType
#DEFINE ATK_TYPE_ROLE (atk_role_get_type())
DECLARE FUNCTION atk_scroll_type_get_type() AS GType
#DEFINE ATK_TYPE_SCROLL_TYPE (atk_scroll_type_get_type())
DECLARE FUNCTION atk_selection_get_type() AS GType
#DEFINE ATK_TYPE_SELECTION (atk_selection_get_type())
#DEFINE ATK_SELECTION(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), ATK_TYPE_SELECTION, AtkSelection))
#DEFINE ATK_SELECTION_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), ATK_TYPE_SELECTION, AtkSelectionIface))
#DEFINE ATK_IS_SELECTION(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), ATK_TYPE_SELECTION))
#DEFINE ATK_SELECTION_GET_IFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE((obj), ATK_TYPE_SELECTION, AtkSelectionIface))
DECLARE FUNCTION atk_selection_add_selection(BYVAL AS AtkSelection PTR, BYVAL AS gint) AS gboolean
DECLARE FUNCTION atk_selection_clear_selection(BYVAL AS AtkSelection PTR) AS gboolean
DECLARE FUNCTION atk_selection_get_selection_count(BYVAL AS AtkSelection PTR) AS gint
DECLARE FUNCTION atk_selection_is_child_selected(BYVAL AS AtkSelection PTR, BYVAL AS gint) AS gboolean
DECLARE FUNCTION atk_selection_ref_selection(BYVAL AS AtkSelection PTR, BYVAL AS gint) AS AtkObject PTR
DECLARE FUNCTION atk_selection_remove_selection(BYVAL AS AtkSelection PTR, BYVAL AS gint) AS gboolean
DECLARE FUNCTION atk_selection_select_all_selection(BYVAL AS AtkSelection PTR) AS gboolean
TYPE _AtkSelectionIface
  AS GTypeInterface parent
  add_selection AS FUNCTION CDECL(BYVAL AS AtkSelection PTR, BYVAL AS gint) AS gboolean
  clear_selection AS FUNCTION CDECL(BYVAL AS AtkSelection PTR) AS gboolean
  ref_selection AS FUNCTION CDECL(BYVAL AS AtkSelection PTR, BYVAL AS gint) AS AtkObject PTR
  get_selection_count AS FUNCTION CDECL(BYVAL AS AtkSelection PTR) AS gint
  is_child_selected AS FUNCTION CDECL(BYVAL AS AtkSelection PTR, BYVAL AS gint) AS gboolean
  remove_selection AS FUNCTION CDECL(BYVAL AS AtkSelection PTR, BYVAL AS gint) AS gboolean
  select_all_selection AS FUNCTION CDECL(BYVAL AS AtkSelection PTR) AS gboolean
  selection_changed AS SUB CDECL(BYVAL AS AtkSelection PTR)
END TYPE
TYPE _AtkSocket
  AS AtkObject parent
  AS gchar PTR embedded_plug_id
END TYPE
DECLARE FUNCTION atk_socket_get_type() AS GType
#DEFINE ATK_TYPE_SOCKET (atk_socket_get_type())
#DEFINE ATK_SOCKET(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), ATK_TYPE_SOCKET, AtkSocket))
#DEFINE ATK_SOCKET_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), ATK_TYPE_SOCKET, AtkSocketClass))
#DEFINE ATK_IS_SOCKET(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), ATK_TYPE_SOCKET))
#DEFINE ATK_IS_CLASS_SOCKET(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), ATK_TYPE_SOCKET))
#DEFINE ATK_SOCKET_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), ATK_TYPE_SOCKET, AtkSocketClass))
DECLARE FUNCTION atk_socket_new() AS AtkObject PTR
DECLARE SUB atk_socket_embed(BYVAL AS AtkSocket PTR, BYVAL AS const gchar PTR)
DECLARE FUNCTION atk_socket_is_occupied(BYVAL AS AtkSocket PTR) AS gboolean
TYPE _AtkSocketClass
  AS AtkObjectClass parent_class
  embed AS SUB CDECL(BYVAL AS AtkSocket PTR, BYVAL AS const gchar PTR)
END TYPE
TYPE _AtkStateSet
  AS GObject parent
END TYPE
DECLARE FUNCTION atk_state_set_get_type() AS GType
#DEFINE ATK_TYPE_STATE_SET (atk_state_set_get_type())
#DEFINE ATK_STATE_SET(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), ATK_TYPE_STATE_SET, AtkStateSet))
#DEFINE ATK_STATE_SET_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), ATK_TYPE_STATE_SET, AtkStateSetClass))
#DEFINE ATK_IS_STATE_SET(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), ATK_TYPE_STATE_SET))
#DEFINE ATK_IS_CLASS_STATE_SET(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), ATK_TYPE_STATE_SET))
#DEFINE ATK_STATE_SET_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), ATK_TYPE_STATE_SET, AtkStateSetClass))
DECLARE FUNCTION atk_state_set_new() AS AtkStateSet PTR
DECLARE FUNCTION atk_state_set_add_state(BYVAL AS AtkStateSet PTR, BYVAL AS AtkStateType) AS gboolean
DECLARE SUB atk_state_set_add_states(BYVAL AS AtkStateSet PTR, BYVAL AS AtkStateType PTR, BYVAL AS gint)
DECLARE FUNCTION atk_state_set_and_sets(BYVAL AS AtkStateSet PTR, BYVAL AS AtkStateSet PTR) AS AtkStateSet PTR
DECLARE SUB atk_state_set_clear_states(BYVAL AS AtkStateSet PTR)
DECLARE FUNCTION atk_state_set_contains_state(BYVAL AS AtkStateSet PTR, BYVAL AS AtkStateType) AS gboolean
DECLARE FUNCTION atk_state_set_contains_states(BYVAL AS AtkStateSet PTR, BYVAL AS AtkStateType PTR, BYVAL AS gint) AS gboolean
DECLARE FUNCTION atk_state_set_is_empty(BYVAL AS AtkStateSet PTR) AS gboolean
DECLARE FUNCTION atk_state_set_or_sets(BYVAL AS AtkStateSet PTR, BYVAL AS AtkStateSet PTR) AS AtkStateSet PTR
DECLARE FUNCTION atk_state_set_remove_state(BYVAL AS AtkStateSet PTR, BYVAL AS AtkStateType) AS gboolean
DECLARE FUNCTION atk_state_set_xor_sets(BYVAL AS AtkStateSet PTR, BYVAL AS AtkStateSet PTR) AS AtkStateSet PTR
TYPE _AtkStateSetClass
  AS GObjectClass parent
END TYPE
DECLARE FUNCTION atk_state_type_get_type() AS GType
#DEFINE ATK_TYPE_STATE_TYPE (atk_state_type_get_type())
DECLARE FUNCTION atk_streamable_content_get_type() AS GType
#DEFINE ATK_TYPE_STREAMABLE_CONTENT (atk_streamable_content_get_type())
#DEFINE ATK_STREAMABLE_CONTENT(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), ATK_TYPE_STREAMABLE_CONTENT, AtkStreamableContent))
#DEFINE ATK_STREAMABLE_CONTENT_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), ATK_TYPE_STREAMABLE_CONTENT, AtkStreamableContentIface))
#DEFINE ATK_IS_STREAMABLE_CONTENT(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), ATK_TYPE_STREAMABLE_CONTENT))
#DEFINE ATK_STREAMABLE_CONTENT_GET_IFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE((obj), ATK_TYPE_STREAMABLE_CONTENT, AtkStreamableContentIface))
DECLARE FUNCTION atk_streamable_content_get_mime_type(BYVAL AS AtkStreamableContent PTR, BYVAL AS gint) AS const gchar PTR
DECLARE FUNCTION atk_streamable_content_get_n_mime_types(BYVAL AS AtkStreamableContent PTR) AS gint
DECLARE FUNCTION atk_streamable_content_get_stream(BYVAL AS AtkStreamableContent PTR, BYVAL AS const gchar PTR) AS GIOChannel PTR
DECLARE FUNCTION atk_streamable_content_get_uri(BYVAL AS AtkStreamableContent PTR, BYVAL AS const gchar PTR) AS const gchar PTR
TYPE _AtkStreamableContentIface
  AS GTypeInterface parent
  get_n_mime_types AS FUNCTION CDECL(BYVAL AS AtkStreamableContent PTR) AS gint
  get_mime_type AS FUNCTION CDECL(BYVAL AS AtkStreamableContent PTR, BYVAL AS gint) AS const gchar PTR
  get_stream AS FUNCTION CDECL(BYVAL AS AtkStreamableContent PTR, BYVAL AS const gchar PTR) AS GIOChannel PTR
  get_uri AS FUNCTION CDECL(BYVAL AS AtkStreamableContent PTR, BYVAL AS const gchar PTR) AS const gchar PTR
  AS AtkFunction pad1
  AS AtkFunction pad2
  AS AtkFunction pad3
END TYPE
DECLARE FUNCTION atk_table_get_type() AS GType
#DEFINE ATK_TYPE_TABLE (atk_table_get_type())
#DEFINE ATK_TABLE(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), ATK_TYPE_TABLE, AtkTable))
#DEFINE ATK_TABLE_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), ATK_TYPE_TABLE, AtkTableIface))
#DEFINE ATK_IS_TABLE(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), ATK_TYPE_TABLE))
#DEFINE ATK_TABLE_GET_IFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE((obj), ATK_TYPE_TABLE, AtkTableIface))
DECLARE FUNCTION atk_table_add_column_selection(BYVAL AS AtkTable PTR, BYVAL AS gint) AS gboolean
DECLARE FUNCTION atk_table_add_row_selection(BYVAL AS AtkTable PTR, BYVAL AS gint) AS gboolean
DECLARE FUNCTION atk_table_get_caption(BYVAL AS AtkTable PTR) AS AtkObject PTR
DECLARE FUNCTION atk_table_get_column_at_index(BYVAL AS AtkTable PTR, BYVAL AS gint) AS gint
DECLARE FUNCTION atk_table_get_column_description(BYVAL AS AtkTable PTR, BYVAL AS gint) AS const gchar PTR
DECLARE FUNCTION atk_table_get_column_extent_at(BYVAL AS AtkTable PTR, BYVAL AS gint, BYVAL AS gint) AS gint
DECLARE FUNCTION atk_table_get_column_header(BYVAL AS AtkTable PTR, BYVAL AS gint) AS AtkObject PTR
DECLARE FUNCTION atk_table_get_index_at(BYVAL AS AtkTable PTR, BYVAL AS gint, BYVAL AS gint) AS gint
DECLARE FUNCTION atk_table_get_n_columns(BYVAL AS AtkTable PTR) AS gint
DECLARE FUNCTION atk_table_get_n_rows(BYVAL AS AtkTable PTR) AS gint
DECLARE FUNCTION atk_table_get_row_at_index(BYVAL AS AtkTable PTR, BYVAL AS gint) AS gint
DECLARE FUNCTION atk_table_get_row_description(BYVAL AS AtkTable PTR, BYVAL AS gint) AS const gchar PTR
DECLARE FUNCTION atk_table_get_row_extent_at(BYVAL AS AtkTable PTR, BYVAL AS gint, BYVAL AS gint) AS gint
DECLARE FUNCTION atk_table_get_row_header(BYVAL AS AtkTable PTR, BYVAL AS gint) AS AtkObject PTR
DECLARE FUNCTION atk_table_get_selected_columns(BYVAL AS AtkTable PTR, BYVAL AS gint PTR PTR) AS gint
DECLARE FUNCTION atk_table_get_selected_rows(BYVAL AS AtkTable PTR, BYVAL AS gint PTR PTR) AS gint
DECLARE FUNCTION atk_table_get_summary(BYVAL AS AtkTable PTR) AS AtkObject PTR
DECLARE FUNCTION atk_table_is_column_selected(BYVAL AS AtkTable PTR, BYVAL AS gint) AS gboolean
DECLARE FUNCTION atk_table_is_row_selected(BYVAL AS AtkTable PTR, BYVAL AS gint) AS gboolean
DECLARE FUNCTION atk_table_is_selected(BYVAL AS AtkTable PTR, BYVAL AS gint, BYVAL AS gint) AS gboolean
DECLARE FUNCTION atk_table_ref_at(BYVAL AS AtkTable PTR, BYVAL AS gint, BYVAL AS gint) AS AtkObject PTR
DECLARE FUNCTION atk_table_remove_column_selection(BYVAL AS AtkTable PTR, BYVAL AS gint) AS gboolean
DECLARE FUNCTION atk_table_remove_row_selection(BYVAL AS AtkTable PTR, BYVAL AS gint) AS gboolean
DECLARE SUB atk_table_set_caption(BYVAL AS AtkTable PTR, BYVAL AS AtkObject PTR)
DECLARE SUB atk_table_set_column_description(BYVAL AS AtkTable PTR, BYVAL AS gint, BYVAL AS const gchar PTR)
DECLARE SUB atk_table_set_column_header(BYVAL AS AtkTable PTR, BYVAL AS gint, BYVAL AS AtkObject PTR)
DECLARE SUB atk_table_set_row_description(BYVAL AS AtkTable PTR, BYVAL AS gint, BYVAL AS const gchar PTR)
DECLARE SUB atk_table_set_row_header(BYVAL AS AtkTable PTR, BYVAL AS gint, BYVAL AS AtkObject PTR)
DECLARE SUB atk_table_set_summary(BYVAL AS AtkTable PTR, BYVAL AS AtkObject PTR)
DECLARE FUNCTION atk_table_cell_get_type() AS GType
#DEFINE ATK_TYPE_TABLE_CELL (atk_table_cell_get_type())
#DEFINE ATK_TABLE_CELL(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), ATK_TYPE_TABLE_CELL, AtkTableCell))
#DEFINE ATK_TABLE_CELL_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), ATK_TYPE_TABLE_CELL, AtkTableCellIface))
#DEFINE ATK_IS_TABLE_CELL(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), ATK_TYPE_TABLE_CELL))
#DEFINE ATK_TABLE_CELL_GET_IFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE((obj), ATK_TYPE_TABLE_CELL, AtkTableCellIface))
DECLARE FUNCTION atk_table_cell_get_column_header_cells(BYVAL AS AtkTableCell PTR) AS GPtrArray PTR
DECLARE FUNCTION atk_table_cell_get_column_span(BYVAL AS AtkTableCell PTR) AS gint
DECLARE FUNCTION atk_table_cell_get_position(BYVAL AS AtkTableCell PTR, BYVAL AS gint PTR, BYVAL AS gint PTR) AS gboolean
DECLARE FUNCTION atk_table_cell_get_row_column_span(BYVAL AS AtkTableCell PTR, BYVAL AS gint PTR, BYVAL AS gint PTR, BYVAL AS gint PTR, BYVAL AS gint PTR) AS gboolean
DECLARE FUNCTION atk_table_cell_get_row_header_cells(BYVAL AS AtkTableCell PTR) AS GPtrArray PTR
DECLARE FUNCTION atk_table_cell_get_row_span(BYVAL AS AtkTableCell PTR) AS gint
DECLARE FUNCTION atk_table_cell_get_table(BYVAL AS AtkTableCell PTR) AS AtkObject PTR
TYPE _AtkTableCellIface
  AS GTypeInterface parent
  get_column_span AS FUNCTION CDECL(BYVAL AS AtkTableCell PTR) AS gint
  get_column_header_cells AS FUNCTION CDECL(BYVAL AS AtkTableCell PTR) AS GPtrArray PTR
  get_position AS FUNCTION CDECL(BYVAL AS AtkTableCell PTR, BYVAL AS gint PTR, BYVAL AS gint PTR) AS gboolean
  get_row_span AS FUNCTION CDECL(BYVAL AS AtkTableCell PTR) AS gint
  get_row_header_cells AS FUNCTION CDECL(BYVAL AS AtkTableCell PTR) AS GPtrArray PTR
  get_row_column_span AS FUNCTION CDECL(BYVAL AS AtkTableCell PTR, BYVAL AS gint PTR, BYVAL AS gint PTR, BYVAL AS gint PTR, BYVAL AS gint PTR) AS gboolean
  get_table AS FUNCTION CDECL(BYVAL AS AtkTableCell PTR) AS AtkObject PTR
END TYPE
TYPE _AtkTableIface
  AS GTypeInterface parent
  ref_at AS FUNCTION CDECL(BYVAL AS AtkTable PTR, BYVAL AS gint, BYVAL AS gint) AS AtkObject PTR
  get_index_at AS FUNCTION CDECL(BYVAL AS AtkTable PTR, BYVAL AS gint, BYVAL AS gint) AS gint
  get_column_at_index AS FUNCTION CDECL(BYVAL AS AtkTable PTR, BYVAL AS gint) AS gint
  get_row_at_index AS FUNCTION CDECL(BYVAL AS AtkTable PTR, BYVAL AS gint) AS gint
  get_n_columns AS FUNCTION CDECL(BYVAL AS AtkTable PTR) AS gint
  get_n_rows AS FUNCTION CDECL(BYVAL AS AtkTable PTR) AS gint
  get_column_extent_at AS FUNCTION CDECL(BYVAL AS AtkTable PTR, BYVAL AS gint, BYVAL AS gint) AS gint
  get_row_extent_at AS FUNCTION CDECL(BYVAL AS AtkTable PTR, BYVAL AS gint, BYVAL AS gint) AS gint
  get_caption AS FUNCTION CDECL(BYVAL AS AtkTable PTR) AS AtkObject PTR
  get_column_description AS FUNCTION CDECL(BYVAL AS AtkTable PTR, BYVAL AS gint) AS const gchar PTR
  get_column_header AS FUNCTION CDECL(BYVAL AS AtkTable PTR, BYVAL AS gint) AS AtkObject PTR
  get_row_description AS FUNCTION CDECL(BYVAL AS AtkTable PTR, BYVAL AS gint) AS const gchar PTR
  get_row_header AS FUNCTION CDECL(BYVAL AS AtkTable PTR, BYVAL AS gint) AS AtkObject PTR
  get_summary AS FUNCTION CDECL(BYVAL AS AtkTable PTR) AS AtkObject PTR
  set_caption AS SUB CDECL(BYVAL AS AtkTable PTR, BYVAL AS AtkObject PTR)
  set_column_description AS SUB CDECL(BYVAL AS AtkTable PTR, BYVAL AS gint, BYVAL AS const gchar PTR)
  set_column_header AS SUB CDECL(BYVAL AS AtkTable PTR, BYVAL AS gint, BYVAL AS AtkObject PTR)
  set_row_description AS SUB CDECL(BYVAL AS AtkTable PTR, BYVAL AS gint, BYVAL AS const gchar PTR)
  set_row_header AS SUB CDECL(BYVAL AS AtkTable PTR, BYVAL AS gint, BYVAL AS AtkObject PTR)
  set_summary AS SUB CDECL(BYVAL AS AtkTable PTR, BYVAL AS AtkObject PTR)
  get_selected_columns AS FUNCTION CDECL(BYVAL AS AtkTable PTR, BYVAL AS gint PTR PTR) AS gint
  get_selected_rows AS FUNCTION CDECL(BYVAL AS AtkTable PTR, BYVAL AS gint PTR PTR) AS gint
  is_column_selected AS FUNCTION CDECL(BYVAL AS AtkTable PTR, BYVAL AS gint) AS gboolean
  is_row_selected AS FUNCTION CDECL(BYVAL AS AtkTable PTR, BYVAL AS gint) AS gboolean
  is_selected AS FUNCTION CDECL(BYVAL AS AtkTable PTR, BYVAL AS gint, BYVAL AS gint) AS gboolean
  add_row_selection AS FUNCTION CDECL(BYVAL AS AtkTable PTR, BYVAL AS gint) AS gboolean
  remove_row_selection AS FUNCTION CDECL(BYVAL AS AtkTable PTR, BYVAL AS gint) AS gboolean
  add_column_selection AS FUNCTION CDECL(BYVAL AS AtkTable PTR, BYVAL AS gint) AS gboolean
  remove_column_selection AS FUNCTION CDECL(BYVAL AS AtkTable PTR, BYVAL AS gint) AS gboolean
  row_inserted AS SUB CDECL(BYVAL AS AtkTable PTR, BYVAL AS gint, BYVAL AS gint)
  column_inserted AS SUB CDECL(BYVAL AS AtkTable PTR, BYVAL AS gint, BYVAL AS gint)
  row_deleted AS SUB CDECL(BYVAL AS AtkTable PTR, BYVAL AS gint, BYVAL AS gint)
  column_deleted AS SUB CDECL(BYVAL AS AtkTable PTR, BYVAL AS gint, BYVAL AS gint)
  row_reordered AS SUB CDECL(BYVAL AS AtkTable PTR)
  column_reordered AS SUB CDECL(BYVAL AS AtkTable PTR)
  model_changed AS SUB CDECL(BYVAL AS AtkTable PTR)
END TYPE
DECLARE FUNCTION atk_text_get_type() AS GType
#DEFINE ATK_TYPE_TEXT (atk_text_get_type())
#DEFINE ATK_TEXT(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), ATK_TYPE_TEXT, AtkText))
#DEFINE ATK_TEXT_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), ATK_TYPE_TEXT, AtkTextIface))
#DEFINE ATK_IS_TEXT(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), ATK_TYPE_TEXT))
#DEFINE ATK_TEXT_GET_IFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE((obj), ATK_TYPE_TEXT, AtkTextIface))
DECLARE SUB atk_text_free_ranges(BYVAL AS AtkTextRange PTR PTR)
DECLARE FUNCTION atk_text_add_selection(BYVAL AS AtkText PTR, BYVAL AS gint, BYVAL AS gint) AS gboolean
DECLARE FUNCTION atk_text_get_bounded_ranges(BYVAL AS AtkText PTR, BYVAL AS AtkTextRectangle PTR, BYVAL AS AtkCoordType, BYVAL AS AtkTextClipType, BYVAL AS AtkTextClipType) AS AtkTextRange PTR PTR
DECLARE FUNCTION atk_text_get_caret_offset(BYVAL AS AtkText PTR) AS gint
DECLARE FUNCTION atk_text_get_character_at_offset(BYVAL AS AtkText PTR, BYVAL AS gint) AS gunichar /'?'/
DECLARE FUNCTION atk_text_get_character_count(BYVAL AS AtkText PTR) AS gint
DECLARE SUB atk_text_get_character_extents(BYVAL AS AtkText PTR, BYVAL AS gint, BYVAL AS gint PTR, BYVAL AS gint PTR, BYVAL AS gint PTR, BYVAL AS gint PTR, BYVAL AS AtkCoordType)
DECLARE FUNCTION atk_text_get_default_attributes(BYVAL AS AtkText PTR) AS AtkAttributeSet PTR
DECLARE FUNCTION atk_text_get_n_selections(BYVAL AS AtkText PTR) AS gint
DECLARE FUNCTION atk_text_get_offset_at_point(BYVAL AS AtkText PTR, BYVAL AS gint, BYVAL AS gint, BYVAL AS AtkCoordType) AS gint
DECLARE SUB atk_text_get_range_extents(BYVAL AS AtkText PTR, BYVAL AS gint, BYVAL AS gint, BYVAL AS AtkCoordType, BYVAL AS AtkTextRectangle PTR)
DECLARE FUNCTION atk_text_get_run_attributes(BYVAL AS AtkText PTR, BYVAL AS gint, BYVAL AS gint PTR, BYVAL AS gint PTR) AS AtkAttributeSet PTR
DECLARE FUNCTION atk_text_get_selection(BYVAL AS AtkText PTR, BYVAL AS gint, BYVAL AS gint PTR, BYVAL AS gint PTR) AS gchar PTR
DECLARE FUNCTION atk_text_get_string_at_offset(BYVAL AS AtkText PTR, BYVAL AS gint, BYVAL AS AtkTextGranularity, BYVAL AS gint PTR, BYVAL AS gint PTR) AS gchar PTR
DECLARE FUNCTION atk_text_get_text(BYVAL AS AtkText PTR, BYVAL AS gint, BYVAL AS gint) AS gchar PTR
DECLARE FUNCTION atk_text_get_text_after_offset(BYVAL AS AtkText PTR, BYVAL AS gint, BYVAL AS AtkTextBoundary, BYVAL AS gint PTR, BYVAL AS gint PTR) AS gchar PTR
DECLARE FUNCTION atk_text_get_text_at_offset(BYVAL AS AtkText PTR, BYVAL AS gint, BYVAL AS AtkTextBoundary, BYVAL AS gint PTR, BYVAL AS gint PTR) AS gchar PTR
DECLARE FUNCTION atk_text_get_text_before_offset(BYVAL AS AtkText PTR, BYVAL AS gint, BYVAL AS AtkTextBoundary, BYVAL AS gint PTR, BYVAL AS gint PTR) AS gchar PTR
DECLARE FUNCTION atk_text_remove_selection(BYVAL AS AtkText PTR, BYVAL AS gint) AS gboolean
DECLARE FUNCTION atk_text_scroll_substring_to(BYVAL AS AtkText PTR, BYVAL AS gint, BYVAL AS gint, BYVAL AS AtkScrollType) AS gboolean
DECLARE FUNCTION atk_text_scroll_substring_to_point(BYVAL AS AtkText PTR, BYVAL AS gint, BYVAL AS gint, BYVAL AS AtkCoordType, BYVAL AS gint, BYVAL AS gint) AS gboolean
DECLARE FUNCTION atk_text_set_caret_offset(BYVAL AS AtkText PTR, BYVAL AS gint) AS gboolean
DECLARE FUNCTION atk_text_set_selection(BYVAL AS AtkText PTR, BYVAL AS gint, BYVAL AS gint, BYVAL AS gint) AS gboolean
TYPE _AtkTextIface
  AS GTypeInterface parent
  get_text AS FUNCTION CDECL(BYVAL AS AtkText PTR, BYVAL AS gint, BYVAL AS gint) AS gchar PTR
  get_text_after_offset AS FUNCTION CDECL(BYVAL AS AtkText PTR, BYVAL AS gint, BYVAL AS AtkTextBoundary, BYVAL AS gint PTR, BYVAL AS gint PTR) AS gchar PTR
  get_text_at_offset AS FUNCTION CDECL(BYVAL AS AtkText PTR, BYVAL AS gint, BYVAL AS AtkTextBoundary, BYVAL AS gint PTR, BYVAL AS gint PTR) AS gchar PTR
  get_character_at_offset AS FUNCTION CDECL(BYVAL AS AtkText PTR, BYVAL AS gint) AS gunichar /'?'/
  get_text_before_offset AS FUNCTION CDECL(BYVAL AS AtkText PTR, BYVAL AS gint, BYVAL AS AtkTextBoundary, BYVAL AS gint PTR, BYVAL AS gint PTR) AS gchar PTR
  get_caret_offset AS FUNCTION CDECL(BYVAL AS AtkText PTR) AS gint
  get_run_attributes AS FUNCTION CDECL(BYVAL AS AtkText PTR, BYVAL AS gint, BYVAL AS gint PTR, BYVAL AS gint PTR) AS AtkAttributeSet PTR
  get_default_attributes AS FUNCTION CDECL(BYVAL AS AtkText PTR) AS AtkAttributeSet PTR
  get_character_extents AS SUB CDECL(BYVAL AS AtkText PTR, BYVAL AS gint, BYVAL AS gint PTR, BYVAL AS gint PTR, BYVAL AS gint PTR, BYVAL AS gint PTR, BYVAL AS AtkCoordType)
  get_character_count AS FUNCTION CDECL(BYVAL AS AtkText PTR) AS gint
  get_offset_at_point AS FUNCTION CDECL(BYVAL AS AtkText PTR, BYVAL AS gint, BYVAL AS gint, BYVAL AS AtkCoordType) AS gint
  get_n_selections AS FUNCTION CDECL(BYVAL AS AtkText PTR) AS gint
  get_selection AS FUNCTION CDECL(BYVAL AS AtkText PTR, BYVAL AS gint, BYVAL AS gint PTR, BYVAL AS gint PTR) AS gchar PTR
  add_selection AS FUNCTION CDECL(BYVAL AS AtkText PTR, BYVAL AS gint, BYVAL AS gint) AS gboolean
  remove_selection AS FUNCTION CDECL(BYVAL AS AtkText PTR, BYVAL AS gint) AS gboolean
  set_selection AS FUNCTION CDECL(BYVAL AS AtkText PTR, BYVAL AS gint, BYVAL AS gint, BYVAL AS gint) AS gboolean
  set_caret_offset AS FUNCTION CDECL(BYVAL AS AtkText PTR, BYVAL AS gint) AS gboolean
  text_changed AS SUB CDECL(BYVAL AS AtkText PTR, BYVAL AS gint, BYVAL AS gint)
  text_caret_moved AS SUB CDECL(BYVAL AS AtkText PTR, BYVAL AS gint)
  text_selection_changed AS SUB CDECL(BYVAL AS AtkText PTR)
  text_attributes_changed AS SUB CDECL(BYVAL AS AtkText PTR)
  get_range_extents AS SUB CDECL(BYVAL AS AtkText PTR, BYVAL AS gint, BYVAL AS gint, BYVAL AS AtkCoordType, BYVAL AS AtkTextRectangle PTR)
  get_bounded_ranges AS FUNCTION CDECL(BYVAL AS AtkText PTR, BYVAL AS AtkTextRectangle PTR, BYVAL AS AtkCoordType, BYVAL AS AtkTextClipType, BYVAL AS AtkTextClipType) AS AtkTextRange PTR PTR
  get_string_at_offset AS FUNCTION CDECL(BYVAL AS AtkText PTR, BYVAL AS gint, BYVAL AS AtkTextGranularity, BYVAL AS gint PTR, BYVAL AS gint PTR) AS gchar PTR
  scroll_substring_to AS FUNCTION CDECL(BYVAL AS AtkText PTR, BYVAL AS gint, BYVAL AS gint, BYVAL AS AtkScrollType) AS gboolean
  scroll_substring_to_point AS FUNCTION CDECL(BYVAL AS AtkText PTR, BYVAL AS gint, BYVAL AS gint, BYVAL AS AtkCoordType, BYVAL AS gint, BYVAL AS gint) AS gboolean
END TYPE
DECLARE FUNCTION atk_text_attribute_get_type() AS GType
#DEFINE ATK_TYPE_TEXT_ATTRIBUTE (atk_text_attribute_get_type())
DECLARE FUNCTION atk_text_boundary_get_type() AS GType
#DEFINE ATK_TYPE_TEXT_BOUNDARY (atk_text_boundary_get_type())
DECLARE FUNCTION atk_text_clip_type_get_type() AS GType
#DEFINE ATK_TYPE_TEXT_CLIP_TYPE (atk_text_clip_type_get_type())
DECLARE FUNCTION atk_text_granularity_get_type() AS GType
#DEFINE ATK_TYPE_TEXT_GRANULARITY (atk_text_granularity_get_type())
TYPE _AtkTextRange
  AS AtkTextRectangle bounds
  AS gint start_offset
  AS gint end_offset
  AS gchar PTR content
END TYPE
TYPE _AtkUtil
  AS GObject parent
END TYPE
DECLARE FUNCTION atk_util_get_type() AS GType
#DEFINE ATK_TYPE_UTIL (atk_util_get_type())
#DEFINE ATK_UTIL(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), ATK_TYPE_UTIL, AtkUtil))
#DEFINE ATK_UTIL_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), ATK_TYPE_UTIL, AtkUtilClass))
#DEFINE ATK_IS_UTIL(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), ATK_TYPE_UTIL))
#DEFINE ATK_IS_CLASS_UTIL(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), ATK_TYPE_UTIL))
#DEFINE ATK_UTIL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), ATK_TYPE_UTIL, AtkUtilClass))
TYPE _AtkUtilClass
  AS GObjectClass parent
  add_global_event_listener AS FUNCTION CDECL(BYVAL AS GSignalEmissionHook, BYVAL AS const gchar PTR) AS guint
  remove_global_event_listener AS SUB CDECL(BYVAL AS guint)
  add_key_event_listener AS FUNCTION CDECL(BYVAL AS AtkKeySnoopFunc, BYVAL AS gpointer) AS guint
  remove_key_event_listener AS SUB CDECL(BYVAL AS guint)
  get_root AS FUNCTION CDECL() AS AtkObject PTR
  get_toolkit_name AS FUNCTION CDECL() AS const gchar PTR
  get_toolkit_version AS FUNCTION CDECL() AS const gchar PTR
END TYPE
DECLARE FUNCTION atk_value_get_type() AS GType
#DEFINE ATK_TYPE_VALUE (atk_value_get_type())
#DEFINE ATK_VALUE(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), ATK_TYPE_VALUE, AtkValue))
#DEFINE ATK_VALUE_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), ATK_TYPE_VALUE, AtkValueIface))
#DEFINE ATK_IS_VALUE(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), ATK_TYPE_VALUE))
#DEFINE ATK_VALUE_GET_IFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE((obj), ATK_TYPE_VALUE, AtkValueIface))
DECLARE SUB atk_value_get_current_value(BYVAL AS AtkValue PTR, BYVAL AS GValue PTR)
DECLARE FUNCTION atk_value_get_increment(BYVAL AS AtkValue PTR) AS gdouble
DECLARE SUB atk_value_get_maximum_value(BYVAL AS AtkValue PTR, BYVAL AS GValue PTR)
DECLARE SUB atk_value_get_minimum_increment(BYVAL AS AtkValue PTR, BYVAL AS GValue PTR)
DECLARE SUB atk_value_get_minimum_value(BYVAL AS AtkValue PTR, BYVAL AS GValue PTR)
DECLARE FUNCTION atk_value_get_range(BYVAL AS AtkValue PTR) AS AtkRange PTR
DECLARE FUNCTION atk_value_get_sub_ranges(BYVAL AS AtkValue PTR) AS GSList PTR
DECLARE SUB atk_value_get_value_and_text(BYVAL AS AtkValue PTR, BYVAL AS gdouble PTR, BYVAL AS gchar PTR PTR)
DECLARE FUNCTION atk_value_set_current_value(BYVAL AS AtkValue PTR, BYVAL AS const GValue PTR) AS gboolean
DECLARE SUB atk_value_set_value(BYVAL AS AtkValue PTR, BYVAL AS const gdouble)
TYPE _AtkValueIface
  AS GTypeInterface parent
  get_current_value AS SUB CDECL(BYVAL AS AtkValue PTR, BYVAL AS GValue PTR)
  get_maximum_value AS SUB CDECL(BYVAL AS AtkValue PTR, BYVAL AS GValue PTR)
  get_minimum_value AS SUB CDECL(BYVAL AS AtkValue PTR, BYVAL AS GValue PTR)
  set_current_value AS FUNCTION CDECL(BYVAL AS AtkValue PTR, BYVAL AS const GValue PTR) AS gboolean
  get_minimum_increment AS SUB CDECL(BYVAL AS AtkValue PTR, BYVAL AS GValue PTR)
  get_value_and_text AS SUB CDECL(BYVAL AS AtkValue PTR, BYVAL AS gdouble PTR, BYVAL AS gchar PTR PTR)
  get_range AS FUNCTION CDECL(BYVAL AS AtkValue PTR) AS AtkRange PTR
  get_increment AS FUNCTION CDECL(BYVAL AS AtkValue PTR) AS gdouble
  get_sub_ranges AS FUNCTION CDECL(BYVAL AS AtkValue PTR) AS GSList PTR
  set_value AS SUB CDECL(BYVAL AS AtkValue PTR, BYVAL AS const gdouble)
END TYPE
DECLARE FUNCTION atk_value_type_get_type() AS GType
#DEFINE ATK_TYPE_VALUE_TYPE (atk_value_type_get_type())
DECLARE FUNCTION atk_window_get_type() AS GType
#DEFINE ATK_TYPE_WINDOW (atk_window_get_type())
#DEFINE ATK_WINDOW(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), ATK_TYPE_WINDOW, AtkWindow))
#DEFINE ATK_WINDOW_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), ATK_TYPE_WINDOW, AtkWindowIface))
#DEFINE ATK_IS_WINDOW(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), ATK_TYPE_WINDOW))
#DEFINE ATK_WINDOW_GET_IFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE((obj), ATK_TYPE_WINDOW, AtkWindowIface))
TYPE _AtkWindowIface
  AS GTypeInterface parent
END TYPE
' P_4

DECLARE FUNCTION atk_add_focus_tracker(BYVAL AS AtkEventListener) AS guint
DECLARE FUNCTION atk_add_global_event_listener(BYVAL AS GSignalEmissionHook, BYVAL AS const gchar PTR) AS guint
DECLARE FUNCTION atk_add_key_event_listener(BYVAL AS AtkKeySnoopFunc, BYVAL AS gpointer) AS guint
DECLARE SUB atk_focus_tracker_init(BYVAL AS AtkEventListenerInit)
DECLARE SUB atk_focus_tracker_notify(BYVAL AS AtkObject PTR)
DECLARE FUNCTION atk_get_binary_age() AS guint
DECLARE FUNCTION atk_get_default_registry() AS AtkRegistry PTR
DECLARE FUNCTION atk_get_focus_object() AS AtkObject PTR
DECLARE FUNCTION atk_get_interface_age() AS guint
DECLARE FUNCTION atk_get_major_version() AS guint
DECLARE FUNCTION atk_get_micro_version() AS guint
DECLARE FUNCTION atk_get_minor_version() AS guint
DECLARE FUNCTION atk_get_root() AS AtkObject PTR
DECLARE FUNCTION atk_get_toolkit_name() AS const gchar PTR
DECLARE FUNCTION atk_get_toolkit_version() AS const gchar PTR
DECLARE FUNCTION atk_get_version() AS const gchar PTR
DECLARE SUB atk_remove_focus_tracker(BYVAL AS guint)
DECLARE SUB atk_remove_global_event_listener(BYVAL AS guint)
DECLARE SUB atk_remove_key_event_listener(BYVAL AS guint)
END EXTERN

