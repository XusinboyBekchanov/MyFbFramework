'            FreeBasic header file, auto-generated by
'                       ### girtobac ###
' LGPLv2.1 (C) 2013-2022 by Thomas{ doT ]Freiherr[ At ]gmx[ DoT }net
' Auto-translated from file /usr/share/gir-1.0/Gda-5.0.gir
#INCLUDE ONCE "_GirToBac-0.0.bi"
' Repository version 1.2
#INCLUDE ONCE "GObject-2.0.bi"
#INCLUDE ONCE "libxml2-2.0.bi"
TYPE AS GRecMutex GdaMutex
TYPE AS guint GdaSqlBuilderId
TYPE AS GdaSqlError GdaSqlErrorType
#DEFINE GDA_ATTRIBUTE_AUTO_INCREMENT @!"__gda_attr_autoinc"
#DEFINE GDA_ATTRIBUTE_DESCRIPTION @!"__gda_attr_descr"
#DEFINE GDA_ATTRIBUTE_IS_DEFAULT @!"__gda_attr_is_default"
#DEFINE GDA_ATTRIBUTE_NAME @!"__gda_attr_name"
#DEFINE GDA_ATTRIBUTE_NUMERIC_PRECISION @!"__gda_attr_numeric_precision"
#DEFINE GDA_ATTRIBUTE_NUMERIC_SCALE @!"__gda_attr_numeric_scale"
#DEFINE GDA_ATTRIBUTE_TREE_NODE_UNKNOWN_CHILDREN @!"__gda_attr_tnuchild"
TYPE AS _GdaAttributesManager GdaAttributesManager
TYPE AS _GdaBatch GdaBatch
TYPE AS _GdaBatchClass GdaBatchClass
TYPE AS LONG GdaBatchError
ENUM
  GDA_BATCH_CONFLICTING_PARAMETER_ERROR = 0
END ENUM
TYPE AS _GdaBatchPrivate GdaBatchPrivate
TYPE AS _GdaBinary GdaBinary
TYPE AS _GdaBlob GdaBlob
TYPE AS _GdaBlobOp GdaBlobOp
TYPE AS _GdaBlobOpClass GdaBlobOpClass
TYPE AS _GdaColumn GdaColumn
TYPE AS _GdaColumnClass GdaColumnClass
TYPE AS _GdaColumnPrivate GdaColumnPrivate
TYPE AS _GdaConfig GdaConfig
TYPE AS _GdaConfigClass GdaConfigClass
TYPE AS LONG GdaConfigError
ENUM
  GDA_CONFIG_DSN_NOT_FOUND_ERROR = 0
  GDA_CONFIG_PERMISSION_ERROR = 1
  GDA_CONFIG_PROVIDER_NOT_FOUND_ERROR = 2
  GDA_CONFIG_PROVIDER_CREATION_ERROR = 3
END ENUM
TYPE AS _GdaConfigPrivate GdaConfigPrivate
TYPE AS _GdaConnection GdaConnection
TYPE AS _GdaConnectionClass GdaConnectionClass
TYPE AS LONG GdaConnectionError
ENUM
  GDA_CONNECTION_DSN_NOT_FOUND_ERROR = 0
  GDA_CONNECTION_PROVIDER_NOT_FOUND_ERROR = 1
  GDA_CONNECTION_PROVIDER_ERROR = 2
  GDA_CONNECTION_NO_CNC_SPEC_ERROR = 3
  GDA_CONNECTION_NO_PROVIDER_SPEC_ERROR = 4
  GDA_CONNECTION_OPEN_ERROR = 5
  GDA_CONNECTION_STATEMENT_TYPE_ERROR = 6
  GDA_CONNECTION_CANT_LOCK_ERROR = 7
  GDA_CONNECTION_TASK_NOT_FOUND_ERROR = 8
  GDA_CONNECTION_UNSUPPORTED_THREADS_ERROR = 9
  GDA_CONNECTION_CLOSED_ERROR = 10
  GDA_CONNECTION_META_DATA_CONTEXT_ERROR = 11
  GDA_CONNECTION_UNSUPPORTED_ASYNC_EXEC_ERROR = 12
END ENUM
TYPE AS _GdaConnectionEvent GdaConnectionEvent
TYPE AS _GdaConnectionEventClass GdaConnectionEventClass
TYPE AS LONG GdaConnectionEventCode
ENUM
  GDA_CONNECTION_EVENT_CODE_CONSTRAINT_VIOLATION = 0
  GDA_CONNECTION_EVENT_CODE_RESTRICT_VIOLATION = 1
  GDA_CONNECTION_EVENT_CODE_NOT_NULL_VIOLATION = 2
  GDA_CONNECTION_EVENT_CODE_FOREIGN_KEY_VIOLATION = 3
  GDA_CONNECTION_EVENT_CODE_UNIQUE_VIOLATION = 4
  GDA_CONNECTION_EVENT_CODE_CHECK_VIOLATION = 5
  GDA_CONNECTION_EVENT_CODE_INSUFFICIENT_PRIVILEGES = 6
  GDA_CONNECTION_EVENT_CODE_UNDEFINED_COLUMN = 7
  GDA_CONNECTION_EVENT_CODE_UNDEFINED_FUNCTION = 8
  GDA_CONNECTION_EVENT_CODE_UNDEFINED_TABLE = 9
  GDA_CONNECTION_EVENT_CODE_DUPLICATE_COLUMN = 10
  GDA_CONNECTION_EVENT_CODE_DUPLICATE_DATABASE = 11
  GDA_CONNECTION_EVENT_CODE_DUPLICATE_FUNCTION = 12
  GDA_CONNECTION_EVENT_CODE_DUPLICATE_SCHEMA = 13
  GDA_CONNECTION_EVENT_CODE_DUPLICATE_TABLE = 14
  GDA_CONNECTION_EVENT_CODE_DUPLICATE_ALIAS = 15
  GDA_CONNECTION_EVENT_CODE_DUPLICATE_OBJECT = 16
  GDA_CONNECTION_EVENT_CODE_SYNTAX_ERROR = 17
  GDA_CONNECTION_EVENT_CODE_UNKNOWN = 18
END ENUM
TYPE AS _GdaConnectionEventPrivate GdaConnectionEventPrivate
TYPE AS LONG GdaConnectionEventType
ENUM
  GDA_CONNECTION_EVENT_NOTICE = 0
  GDA_CONNECTION_EVENT_WARNING = 1
  GDA_CONNECTION_EVENT_ERROR = 2
  GDA_CONNECTION_EVENT_COMMAND = 3
END ENUM
TYPE AS LONG GdaConnectionFeature
ENUM
  GDA_CONNECTION_FEATURE_AGGREGATES = 0
  GDA_CONNECTION_FEATURE_BLOBS = 1
  GDA_CONNECTION_FEATURE_INDEXES = 2
  GDA_CONNECTION_FEATURE_INHERITANCE = 3
  GDA_CONNECTION_FEATURE_NAMESPACES = 4
  GDA_CONNECTION_FEATURE_PROCEDURES = 5
  GDA_CONNECTION_FEATURE_SEQUENCES = 6
  GDA_CONNECTION_FEATURE_SQL = 7
  GDA_CONNECTION_FEATURE_TRANSACTIONS = 8
  GDA_CONNECTION_FEATURE_SAVEPOINTS = 9
  GDA_CONNECTION_FEATURE_SAVEPOINTS_REMOVE = 10
  GDA_CONNECTION_FEATURE_TRIGGERS = 11
  GDA_CONNECTION_FEATURE_UPDATABLE_CURSOR = 12
  GDA_CONNECTION_FEATURE_USERS = 13
  GDA_CONNECTION_FEATURE_VIEWS = 14
  GDA_CONNECTION_FEATURE_XA_TRANSACTIONS = 15
  GDA_CONNECTION_FEATURE_MULTI_THREADING = 16
  GDA_CONNECTION_FEATURE_ASYNC_EXEC = 17
  GDA_CONNECTION_FEATURE_LAST = 18
END ENUM
TYPE AS LONG GdaConnectionMetaType
ENUM
  GDA_CONNECTION_META_NAMESPACES = 0
  GDA_CONNECTION_META_TYPES = 1
  GDA_CONNECTION_META_TABLES = 2
  GDA_CONNECTION_META_VIEWS = 3
  GDA_CONNECTION_META_FIELDS = 4
  GDA_CONNECTION_META_INDEXES = 5
END ENUM
TYPE AS LONG GdaConnectionOptions
ENUM
  GDA_CONNECTION_OPTIONS_NONE = 0
  GDA_CONNECTION_OPTIONS_READ_ONLY = 1
  GDA_CONNECTION_OPTIONS_SQL_IDENTIFIERS_CASE_SENSITIVE = 2
  GDA_CONNECTION_OPTIONS_THREAD_SAFE = 4
  GDA_CONNECTION_OPTIONS_THREAD_ISOLATED = 8
  GDA_CONNECTION_OPTIONS_AUTO_META_DATA = 16
END ENUM
TYPE AS _GdaConnectionPrivate GdaConnectionPrivate
TYPE AS _GdaDataAccessWrapper GdaDataAccessWrapper
TYPE AS _GdaDataAccessWrapperClass GdaDataAccessWrapperClass
TYPE AS _GdaDataAccessWrapperPrivate GdaDataAccessWrapperPrivate
TYPE AS _GdaDataComparator GdaDataComparator
TYPE AS _GdaDataComparatorClass GdaDataComparatorClass
TYPE AS LONG GdaDataComparatorError
ENUM
  GDA_DATA_COMPARATOR_MISSING_DATA_MODEL_ERROR = 0
  GDA_DATA_COMPARATOR_COLUMN_TYPES_MISMATCH_ERROR = 1
  GDA_DATA_COMPARATOR_MODEL_ACCESS_ERROR = 2
  GDA_DATA_COMPARATOR_USER_CANCELLED_ERROR = 3
END ENUM
TYPE AS _GdaDataComparatorPrivate GdaDataComparatorPrivate
TYPE AS _GdaDataHandler GdaDataHandler
TYPE AS _GdaDataHandlerIface GdaDataHandlerIface
TYPE AS _GdaDataModel GdaDataModel
TYPE AS LONG GdaDataModelAccessFlags
ENUM
  GDA_DATA_MODEL_ACCESS_RANDOM = 1
  GDA_DATA_MODEL_ACCESS_CURSOR_FORWARD = 2
  GDA_DATA_MODEL_ACCESS_CURSOR_BACKWARD = 4
  GDA_DATA_MODEL_ACCESS_CURSOR = 6
  GDA_DATA_MODEL_ACCESS_INSERT = 8
  GDA_DATA_MODEL_ACCESS_UPDATE = 16
  GDA_DATA_MODEL_ACCESS_DELETE = 32
  GDA_DATA_MODEL_ACCESS_WRITE = 56
END ENUM
TYPE AS _GdaDataModelArray GdaDataModelArray
TYPE AS _GdaDataModelArrayClass GdaDataModelArrayClass
TYPE AS _GdaDataModelArrayPrivate GdaDataModelArrayPrivate
TYPE AS _GdaDataModelDir GdaDataModelDir
TYPE AS _GdaDataModelDirClass GdaDataModelDirClass
TYPE AS _GdaDataModelDirPrivate GdaDataModelDirPrivate
TYPE AS LONG GdaDataModelError
ENUM
  GDA_DATA_MODEL_ROW_OUT_OF_RANGE_ERROR = 0
  GDA_DATA_MODEL_COLUMN_OUT_OF_RANGE_ERROR = 1
  GDA_DATA_MODEL_VALUES_LIST_ERROR = 2
  GDA_DATA_MODEL_VALUE_TYPE_ERROR = 3
  GDA_DATA_MODEL_ROW_NOT_FOUND_ERROR = 4
  GDA_DATA_MODEL_ACCESS_ERROR = 5
  GDA_DATA_MODEL_FEATURE_NON_SUPPORTED_ERROR = 6
  GDA_DATA_MODEL_FILE_EXIST_ERROR = 7
  GDA_DATA_MODEL_XML_FORMAT_ERROR = 8
  GDA_DATA_MODEL_TRUNCATED_ERROR = 9
  GDA_DATA_MODEL_OTHER_ERROR = 10
END ENUM
TYPE AS LONG GdaDataModelHint
ENUM
  GDA_DATA_MODEL_HINT_START_BATCH_UPDATE = 0
  GDA_DATA_MODEL_HINT_END_BATCH_UPDATE = 1
  GDA_DATA_MODEL_HINT_REFRESH = 2
END ENUM
TYPE AS LONG GdaDataModelIOFormat
ENUM
  GDA_DATA_MODEL_IO_DATA_ARRAY_XML = 0
  GDA_DATA_MODEL_IO_TEXT_SEPARATED = 1
  GDA_DATA_MODEL_IO_TEXT_TABLE = 2
END ENUM
TYPE AS _GdaDataModelIface GdaDataModelIface
TYPE AS _GdaDataModelImport GdaDataModelImport
TYPE AS _GdaDataModelImportClass GdaDataModelImportClass
TYPE AS _GdaDataModelImportPrivate GdaDataModelImportPrivate
TYPE AS _GdaDataModelIter GdaDataModelIter
TYPE AS _GdaDataModelIterClass GdaDataModelIterClass
TYPE AS LONG GdaDataModelIterError
ENUM
  GDA_DATA_MODEL_ITER_COLUMN_OUT_OF_RANGE_ERROR = 0
END ENUM
TYPE AS _GdaDataModelIterPrivate GdaDataModelIterPrivate
TYPE AS _GdaDataPivot GdaDataPivot
TYPE AS LONG GdaDataPivotAggregate
ENUM
  GDA_DATA_PIVOT_AVG = 0
  GDA_DATA_PIVOT_COUNT = 1
  GDA_DATA_PIVOT_MAX = 2
  GDA_DATA_PIVOT_MIN = 3
  GDA_DATA_PIVOT_SUM = 4
END ENUM
TYPE AS _GdaDataPivotClass GdaDataPivotClass
TYPE AS LONG GdaDataPivotError
ENUM
  GDA_DATA_PIVOT_INTERNAL_ERROR = 0
  GDA_DATA_PIVOT_SOURCE_MODEL_ERROR = 1
  GDA_DATA_PIVOT_FIELD_FORMAT_ERROR = 2
  GDA_DATA_PIVOT_USAGE_ERROR = 3
  GDA_DATA_PIVOT_OVERFLOW_ERROR = 4
END ENUM
TYPE AS LONG GdaDataPivotFieldType
ENUM
  GDA_DATA_PIVOT_FIELD_ROW = 0
  GDA_DATA_PIVOT_FIELD_COLUMN = 1
END ENUM
TYPE AS _GdaDataPivotPrivate GdaDataPivotPrivate
TYPE AS _GdaDataProxy GdaDataProxy
TYPE AS _GdaDataProxyClass GdaDataProxyClass
TYPE AS LONG GdaDataProxyError
ENUM
  GDA_DATA_PROXY_COMMIT_ERROR = 0
  GDA_DATA_PROXY_COMMIT_CANCELLED = 1
  GDA_DATA_PROXY_READ_ONLY_VALUE = 2
  GDA_DATA_PROXY_READ_ONLY_ROW = 3
  GDA_DATA_PROXY_FILTER_ERROR = 4
END ENUM
TYPE AS _GdaDataProxyPrivate GdaDataProxyPrivate
TYPE AS _GdaDataSelect GdaDataSelect
TYPE AS _GdaDataSelectClass GdaDataSelectClass
TYPE AS LONG GdaDataSelectConditionType
ENUM
  GDA_DATA_SELECT_COND_PK = 0
  GDA_DATA_SELECT_COND_ALL_COLUMNS = 1
END ENUM
TYPE AS LONG GdaDataSelectError
ENUM
  GDA_DATA_SELECT_MODIFICATION_STATEMENT_ERROR = 0
  GDA_DATA_SELECT_MISSING_MODIFICATION_STATEMENT_ERROR = 1
  GDA_DATA_SELECT_CONNECTION_ERROR = 2
  GDA_DATA_SELECT_ACCESS_ERROR = 3
  GDA_DATA_SELECT_SQL_ERROR = 4
  GDA_DATA_SELECT_SAFETY_LOCKED_ERROR = 5
END ENUM
TYPE AS _GdaDataSelectPrivate GdaDataSelectPrivate
TYPE AS _GdaDiff GdaDiff
TYPE AS LONG GdaDiffType
ENUM
  GDA_DIFF_ADD_ROW = 0
  GDA_DIFF_REMOVE_ROW = 1
  GDA_DIFF_MODIFY_ROW = 2
END ENUM
TYPE AS _GdaDsnInfo GdaDsnInfo
#DEFINE GDA_EXTRA_AUTO_INCREMENT @!"AUTO_INCREMENT"
TYPE AS _GdaGeometricPoint GdaGeometricPoint
TYPE AS _GdaHandlerBin GdaHandlerBin
TYPE AS _GdaHandlerBinClass GdaHandlerBinClass
TYPE AS _GdaHandlerBinPriv GdaHandlerBinPriv
TYPE AS _GdaHandlerBoolean GdaHandlerBoolean
TYPE AS _GdaHandlerBooleanClass GdaHandlerBooleanClass
TYPE AS _GdaHandlerBooleanPriv GdaHandlerBooleanPriv
TYPE AS _GdaHandlerNumerical GdaHandlerNumerical
TYPE AS _GdaHandlerNumericalClass GdaHandlerNumericalClass
TYPE AS _GdaHandlerNumericalPriv GdaHandlerNumericalPriv
TYPE AS _GdaHandlerString GdaHandlerString
TYPE AS _GdaHandlerStringClass GdaHandlerStringClass
TYPE AS _GdaHandlerStringPriv GdaHandlerStringPriv
TYPE AS _GdaHandlerTime GdaHandlerTime
TYPE AS _GdaHandlerTimeClass GdaHandlerTimeClass
TYPE AS _GdaHandlerTimePriv GdaHandlerTimePriv
TYPE AS _GdaHandlerType GdaHandlerType
TYPE AS _GdaHandlerTypeClass GdaHandlerTypeClass
TYPE AS _GdaHandlerTypePriv GdaHandlerTypePriv
TYPE AS _GdaHolder GdaHolder
TYPE AS _GdaHolderClass GdaHolderClass
TYPE AS LONG GdaHolderError
ENUM
  GDA_HOLDER_STRING_CONVERSION_ERROR = 0
  GDA_HOLDER_VALUE_TYPE_ERROR = 1
  GDA_HOLDER_VALUE_NULL_ERROR = 2
END ENUM
TYPE AS _GdaHolderPrivate GdaHolderPrivate
TYPE AS _GdaLockable GdaLockable
TYPE AS _GdaLockableIface GdaLockableIface
TYPE AS _GdaMetaContext GdaMetaContext
TYPE AS _GdaMetaDbObject GdaMetaDbObject
TYPE AS LONG GdaMetaDbObjectType
ENUM
  GDA_META_DB_UNKNOWN = 0
  GDA_META_DB_TABLE = 1
  GDA_META_DB_VIEW = 2
END ENUM
TYPE AS LONG GdaMetaForeignKeyPolicy
ENUM
  GDA_META_FOREIGN_KEY_UNKNOWN = 0
  GDA_META_FOREIGN_KEY_NONE = 1
  GDA_META_FOREIGN_KEY_NO_ACTION = 2
  GDA_META_FOREIGN_KEY_RESTRICT = 3
  GDA_META_FOREIGN_KEY_CASCADE = 4
  GDA_META_FOREIGN_KEY_SET_NULL = 5
  GDA_META_FOREIGN_KEY_SET_DEFAULT = 6
END ENUM
TYPE AS LONG GdaMetaGraphInfo
ENUM
  GDA_META_GRAPH_COLUMNS = 1
END ENUM
TYPE AS LONG GdaMetaSortType
ENUM
  GDA_META_SORT_ALHAPETICAL = 0
  GDA_META_SORT_DEPENDENCIES = 1
END ENUM
TYPE AS _GdaMetaStore GdaMetaStore
TYPE AS _GdaMetaStoreChange GdaMetaStoreChange
TYPE AS LONG GdaMetaStoreChangeType
ENUM
  GDA_META_STORE_ADD = 0
  GDA_META_STORE_REMOVE = 1
  GDA_META_STORE_MODIFY = 2
END ENUM
TYPE AS _GdaMetaStoreClass GdaMetaStoreClass
TYPE AS _GdaMetaStoreClassPrivate GdaMetaStoreClassPrivate
TYPE AS LONG GdaMetaStoreError
ENUM
  GDA_META_STORE_INCORRECT_SCHEMA_ERROR = 0
  GDA_META_STORE_UNSUPPORTED_PROVIDER_ERROR = 1
  GDA_META_STORE_INTERNAL_ERROR = 2
  GDA_META_STORE_META_CONTEXT_ERROR = 3
  GDA_META_STORE_MODIFY_CONTENTS_ERROR = 4
  GDA_META_STORE_EXTRACT_SQL_ERROR = 5
  GDA_META_STORE_ATTRIBUTE_NOT_FOUND_ERROR = 6
  GDA_META_STORE_ATTRIBUTE_ERROR = 7
  GDA_META_STORE_SCHEMA_OBJECT_NOT_FOUND_ERROR = 8
  GDA_META_STORE_SCHEMA_OBJECT_CONFLICT_ERROR = 9
  GDA_META_STORE_SCHEMA_OBJECT_DESCR_ERROR = 10
  GDA_META_STORE_TRANSACTION_ALREADY_STARTED_ERROR = 11
END ENUM
TYPE AS _GdaMetaStorePrivate GdaMetaStorePrivate
TYPE AS _GdaMetaStruct GdaMetaStruct
TYPE AS _GdaMetaStructClass GdaMetaStructClass
TYPE AS LONG GdaMetaStructError
ENUM
  GDA_META_STRUCT_UNKNOWN_OBJECT_ERROR = 0
  GDA_META_STRUCT_DUPLICATE_OBJECT_ERROR = 1
  GDA_META_STRUCT_INCOHERENCE_ERROR = 2
  GDA_META_STRUCT_XML_ERROR = 3
END ENUM
TYPE AS LONG GdaMetaStructFeature
ENUM
  GDA_META_STRUCT_FEATURE_NONE = 0
  GDA_META_STRUCT_FEATURE_FOREIGN_KEYS = 1
  GDA_META_STRUCT_FEATURE_VIEW_DEPENDENCIES = 2
  GDA_META_STRUCT_FEATURE_ALL = 3
END ENUM
TYPE AS _GdaMetaStructPrivate GdaMetaStructPrivate
TYPE AS _GdaMetaTable GdaMetaTable
TYPE AS _GdaMetaTableColumn GdaMetaTableColumn
TYPE AS _GdaMetaTableForeignKey GdaMetaTableForeignKey
TYPE AS _GdaMetaView GdaMetaView
TYPE AS _GdaNumeric GdaNumeric
TYPE AS _GdaPStmt GdaPStmt
TYPE AS _GdaPStmtClass GdaPStmtClass
TYPE AS _GdaPStmtPrivate GdaPStmtPrivate
TYPE AS _GdaProviderInfo GdaProviderInfo
TYPE AS _GdaQuarkList GdaQuarkList
TYPE AS _GdaRepetitiveStatement GdaRepetitiveStatement
TYPE AS _GdaRepetitiveStatementClass GdaRepetitiveStatementClass
TYPE AS _GdaRow GdaRow
TYPE AS _GdaRowClass GdaRowClass
TYPE AS _GdaRowPrivate GdaRowPrivate
#DEFINE GDA_SERVER_PROVIDER_UNDEFINED_LIMITING_THREAD 1
#DEFINE GDA_SQLSTATE_GENERAL_ERROR @!"HY000"
#DEFINE GDA_SQLSTATE_NO_ERROR @!"00000"
TYPE AS _GdaServerOperation GdaServerOperation
TYPE AS _GdaServerOperationClass GdaServerOperationClass
TYPE AS LONG GdaServerOperationCreateTableFlag
ENUM
  GDA_SERVER_OPERATION_CREATE_TABLE_NOTHING_FLAG = 1
  GDA_SERVER_OPERATION_CREATE_TABLE_PKEY_FLAG = 2
  GDA_SERVER_OPERATION_CREATE_TABLE_NOT_NULL_FLAG = 4
  GDA_SERVER_OPERATION_CREATE_TABLE_UNIQUE_FLAG = 8
  GDA_SERVER_OPERATION_CREATE_TABLE_AUTOINC_FLAG = 16
  GDA_SERVER_OPERATION_CREATE_TABLE_FKEY_FLAG = 32
  GDA_SERVER_OPERATION_CREATE_TABLE_PKEY_AUTOINC_FLAG = 18
END ENUM
TYPE AS LONG GdaServerOperationError
ENUM
  GDA_SERVER_OPERATION_OBJECT_NAME_ERROR = 0
  GDA_SERVER_OPERATION_INCORRECT_VALUE_ERROR = 1
  GDA_SERVER_OPERATION_XML_ERROR = 2
END ENUM
TYPE AS _GdaServerOperationNode GdaServerOperationNode
TYPE AS LONG GdaServerOperationNodeStatus
ENUM
  GDA_SERVER_OPERATION_STATUS_OPTIONAL = 0
  GDA_SERVER_OPERATION_STATUS_REQUIRED = 1
  GDA_SERVER_OPERATION_STATUS_UNKNOWN = 2
END ENUM
TYPE AS LONG GdaServerOperationNodeType
ENUM
  GDA_SERVER_OPERATION_NODE_PARAMLIST = 0
  GDA_SERVER_OPERATION_NODE_DATA_MODEL = 1
  GDA_SERVER_OPERATION_NODE_PARAM = 2
  GDA_SERVER_OPERATION_NODE_SEQUENCE = 3
  GDA_SERVER_OPERATION_NODE_SEQUENCE_ITEM = 4
  GDA_SERVER_OPERATION_NODE_DATA_MODEL_COLUMN = 5
  GDA_SERVER_OPERATION_NODE_UNKNOWN = 6
END ENUM
TYPE AS _GdaServerOperationPrivate GdaServerOperationPrivate
TYPE AS LONG GdaServerOperationType
ENUM
  GDA_SERVER_OPERATION_CREATE_DB = 0
  GDA_SERVER_OPERATION_DROP_DB = 1
  GDA_SERVER_OPERATION_CREATE_TABLE = 2
  GDA_SERVER_OPERATION_DROP_TABLE = 3
  GDA_SERVER_OPERATION_RENAME_TABLE = 4
  GDA_SERVER_OPERATION_ADD_COLUMN = 5
  GDA_SERVER_OPERATION_DROP_COLUMN = 6
  GDA_SERVER_OPERATION_CREATE_INDEX = 7
  GDA_SERVER_OPERATION_DROP_INDEX = 8
  GDA_SERVER_OPERATION_CREATE_VIEW = 9
  GDA_SERVER_OPERATION_DROP_VIEW = 10
  GDA_SERVER_OPERATION_COMMENT_TABLE = 11
  GDA_SERVER_OPERATION_COMMENT_COLUMN = 12
  GDA_SERVER_OPERATION_CREATE_USER = 13
  GDA_SERVER_OPERATION_ALTER_USER = 14
  GDA_SERVER_OPERATION_DROP_USER = 15
  GDA_SERVER_OPERATION_LAST = 16
END ENUM
TYPE AS _GdaServerProvider GdaServerProvider
TYPE AS _GdaServerProviderClass GdaServerProviderClass
TYPE AS LONG GdaServerProviderError
ENUM
  GDA_SERVER_PROVIDER_METHOD_NON_IMPLEMENTED_ERROR = 0
  GDA_SERVER_PROVIDER_PREPARE_STMT_ERROR = 1
  GDA_SERVER_PROVIDER_EMPTY_STMT_ERROR = 2
  GDA_SERVER_PROVIDER_MISSING_PARAM_ERROR = 3
  GDA_SERVER_PROVIDER_STATEMENT_EXEC_ERROR = 4
  GDA_SERVER_PROVIDER_OPERATION_ERROR = 5
  GDA_SERVER_PROVIDER_INTERNAL_ERROR = 6
  GDA_SERVER_PROVIDER_BUSY_ERROR = 7
  GDA_SERVER_PROVIDER_NON_SUPPORTED_ERROR = 8
  GDA_SERVER_PROVIDER_SERVER_VERSION_ERROR = 9
  GDA_SERVER_PROVIDER_DATA_ERROR = 10
  GDA_SERVER_PROVIDER_DEFAULT_VALUE_HANDLING_ERROR = 11
  GDA_SERVER_PROVIDER_MISUSE_ERROR = 12
  GDA_SERVER_PROVIDER_FILE_NOT_FOUND_ERROR = 13
END ENUM
TYPE AS _GdaServerProviderHandlerInfo GdaServerProviderHandlerInfo
TYPE AS _GdaServerProviderInfo GdaServerProviderInfo
TYPE AS _GdaServerProviderMeta GdaServerProviderMeta
TYPE AS _GdaServerProviderPrivate GdaServerProviderPrivate
TYPE AS _GdaServerProviderXa GdaServerProviderXa
TYPE AS _GdaSet GdaSet
TYPE AS _GdaSetClass GdaSetClass
TYPE AS LONG GdaSetError
ENUM
  GDA_SET_XML_SPEC_ERROR = 0
  GDA_SET_HOLDER_NOT_FOUND_ERROR = 1
  GDA_SET_INVALID_ERROR = 2
  GDA_SET_READ_ONLY_ERROR = 3
  GDA_SET_IMPLEMENTATION_ERROR = 4
END ENUM
TYPE AS _GdaSetGroup GdaSetGroup
TYPE AS _GdaSetNode GdaSetNode
TYPE AS _GdaSetPrivate GdaSetPrivate
TYPE AS _GdaSetSource GdaSetSource
TYPE AS _GdaShort GdaShort
TYPE AS _GdaSqlAnyPart GdaSqlAnyPart
TYPE AS LONG GdaSqlAnyPartType
ENUM
  GDA_SQL_ANY_STMT_SELECT = 0
  GDA_SQL_ANY_STMT_INSERT = 1
  GDA_SQL_ANY_STMT_UPDATE = 2
  GDA_SQL_ANY_STMT_DELETE = 3
  GDA_SQL_ANY_STMT_COMPOUND = 4
  GDA_SQL_ANY_STMT_BEGIN = 5
  GDA_SQL_ANY_STMT_ROLLBACK = 6
  GDA_SQL_ANY_STMT_COMMIT = 7
  GDA_SQL_ANY_STMT_SAVEPOINT = 8
  GDA_SQL_ANY_STMT_ROLLBACK_SAVEPOINT = 9
  GDA_SQL_ANY_STMT_DELETE_SAVEPOINT = 10
  GDA_SQL_ANY_STMT_UNKNOWN = 11
  GDA_SQL_ANY_EXPR = 500
  GDA_SQL_ANY_SQL_FIELD = 501
  GDA_SQL_ANY_SQL_TABLE = 502
  GDA_SQL_ANY_SQL_FUNCTION = 503
  GDA_SQL_ANY_SQL_OPERATION = 504
  GDA_SQL_ANY_SQL_CASE = 505
  GDA_SQL_ANY_SQL_SELECT_FIELD = 506
  GDA_SQL_ANY_SQL_SELECT_TARGET = 507
  GDA_SQL_ANY_SQL_SELECT_JOIN = 508
  GDA_SQL_ANY_SQL_SELECT_FROM = 509
  GDA_SQL_ANY_SQL_SELECT_ORDER = 510
END ENUM
TYPE AS _GdaSqlBuilder GdaSqlBuilder
TYPE AS _GdaSqlBuilderClass GdaSqlBuilderClass
TYPE AS LONG GdaSqlBuilderError
ENUM
  GDA_SQL_BUILDER_WRONG_TYPE_ERROR = 0
  GDA_SQL_BUILDER_MISUSE_ERROR = 1
END ENUM
TYPE AS _GdaSqlBuilderPrivate GdaSqlBuilderPrivate
TYPE AS _GdaSqlCase GdaSqlCase
TYPE AS LONG GdaSqlError
ENUM
  GDA_SQL_STRUCTURE_CONTENTS_ERROR = 0
  GDA_SQL_MALFORMED_IDENTIFIER_ERROR = 1
  GDA_SQL_MISSING_IDENTIFIER_ERROR = 2
  GDA_SQL_VALIDATION_ERROR = 3
END ENUM
TYPE AS _GdaSqlExpr GdaSqlExpr
TYPE AS _GdaSqlField GdaSqlField
TYPE AS _GdaSqlFunction GdaSqlFunction
TYPE AS LONG GdaSqlIdentifierStyle
ENUM
  GDA_SQL_IDENTIFIERS_LOWER_CASE = 1
  GDA_SQL_IDENTIFIERS_UPPER_CASE = 2
END ENUM
TYPE AS _GdaSqlOperation GdaSqlOperation
TYPE AS LONG GdaSqlOperatorType
ENUM
  GDA_SQL_OPERATOR_TYPE_AND = 0
  GDA_SQL_OPERATOR_TYPE_OR = 1
  GDA_SQL_OPERATOR_TYPE_EQ = 2
  GDA_SQL_OPERATOR_TYPE_IS = 3
  GDA_SQL_OPERATOR_TYPE_LIKE = 4
  GDA_SQL_OPERATOR_TYPE_BETWEEN = 5
  GDA_SQL_OPERATOR_TYPE_GT = 6
  GDA_SQL_OPERATOR_TYPE_LT = 7
  GDA_SQL_OPERATOR_TYPE_GEQ = 8
  GDA_SQL_OPERATOR_TYPE_LEQ = 9
  GDA_SQL_OPERATOR_TYPE_DIFF = 10
  GDA_SQL_OPERATOR_TYPE_REGEXP = 11
  GDA_SQL_OPERATOR_TYPE_REGEXP_CI = 12
  GDA_SQL_OPERATOR_TYPE_NOT_REGEXP = 13
  GDA_SQL_OPERATOR_TYPE_NOT_REGEXP_CI = 14
  GDA_SQL_OPERATOR_TYPE_SIMILAR = 15
  GDA_SQL_OPERATOR_TYPE_ISNULL = 16
  GDA_SQL_OPERATOR_TYPE_ISNOTNULL = 17
  GDA_SQL_OPERATOR_TYPE_NOT = 18
  GDA_SQL_OPERATOR_TYPE_IN = 19
  GDA_SQL_OPERATOR_TYPE_NOTIN = 20
  GDA_SQL_OPERATOR_TYPE_CONCAT = 21
  GDA_SQL_OPERATOR_TYPE_PLUS = 22
  GDA_SQL_OPERATOR_TYPE_MINUS = 23
  GDA_SQL_OPERATOR_TYPE_STAR = 24
  GDA_SQL_OPERATOR_TYPE_DIV = 25
  GDA_SQL_OPERATOR_TYPE_REM = 26
  GDA_SQL_OPERATOR_TYPE_BITAND = 27
  GDA_SQL_OPERATOR_TYPE_BITOR = 28
  GDA_SQL_OPERATOR_TYPE_BITNOT = 29
  GDA_SQL_OPERATOR_TYPE_ILIKE = 30
  GDA_SQL_OPERATOR_TYPE_NOTLIKE = 31
  GDA_SQL_OPERATOR_TYPE_NOTILIKE = 32
  GDA_SQL_OPERATOR_TYPE_GLOB = 33
END ENUM
TYPE AS _GdaSqlParser GdaSqlParser
TYPE AS _GdaSqlParserClass GdaSqlParserClass
TYPE AS LONG GdaSqlParserError
ENUM
  GDA_SQL_PARSER_SYNTAX_ERROR = 0
  GDA_SQL_PARSER_OVERFLOW_ERROR = 1
  GDA_SQL_PARSER_EMPTY_SQL_ERROR = 2
END ENUM
TYPE AS LONG GdaSqlParserFlavour
ENUM
  GDA_SQL_PARSER_FLAVOUR_STANDARD = 0
  GDA_SQL_PARSER_FLAVOUR_SQLITE = 1
  GDA_SQL_PARSER_FLAVOUR_MYSQL = 2
  GDA_SQL_PARSER_FLAVOUR_ORACLE = 3
  GDA_SQL_PARSER_FLAVOUR_POSTGRESQL = 4
END ENUM
TYPE AS _GdaSqlParserIface GdaSqlParserIface
TYPE AS LONG GdaSqlParserMode
ENUM
  GDA_SQL_PARSER_MODE_PARSE = 0
  GDA_SQL_PARSER_MODE_DELIMIT = 1
END ENUM
TYPE AS _GdaSqlParserPrivate GdaSqlParserPrivate
TYPE AS _GdaSqlRenderingContext GdaSqlRenderingContext
TYPE AS _GdaSqlSelectField GdaSqlSelectField
TYPE AS _GdaSqlSelectFrom GdaSqlSelectFrom
TYPE AS _GdaSqlSelectJoin GdaSqlSelectJoin
TYPE AS LONG GdaSqlSelectJoinType
ENUM
  GDA_SQL_SELECT_JOIN_CROSS = 0
  GDA_SQL_SELECT_JOIN_NATURAL = 1
  GDA_SQL_SELECT_JOIN_INNER = 2
  GDA_SQL_SELECT_JOIN_LEFT = 3
  GDA_SQL_SELECT_JOIN_RIGHT = 4
  GDA_SQL_SELECT_JOIN_FULL = 5
END ENUM
TYPE AS _GdaSqlSelectOrder GdaSqlSelectOrder
TYPE AS _GdaSqlSelectTarget GdaSqlSelectTarget
TYPE AS _GdaSqlStatement GdaSqlStatement
TYPE AS _GdaSqlStatementCheckValidityData GdaSqlStatementCheckValidityData
TYPE AS _GdaSqlStatementCompound GdaSqlStatementCompound
TYPE AS LONG GdaSqlStatementCompoundType
ENUM
  GDA_SQL_STATEMENT_COMPOUND_UNION = 0
  GDA_SQL_STATEMENT_COMPOUND_UNION_ALL = 1
  GDA_SQL_STATEMENT_COMPOUND_INTERSECT = 2
  GDA_SQL_STATEMENT_COMPOUND_INTERSECT_ALL = 3
  GDA_SQL_STATEMENT_COMPOUND_EXCEPT = 4
  GDA_SQL_STATEMENT_COMPOUND_EXCEPT_ALL = 5
END ENUM
TYPE AS _GdaSqlStatementContentsInfo GdaSqlStatementContentsInfo
TYPE AS _GdaSqlStatementDelete GdaSqlStatementDelete
TYPE AS _GdaSqlStatementInsert GdaSqlStatementInsert
TYPE AS _GdaSqlStatementSelect GdaSqlStatementSelect
TYPE AS _GdaSqlStatementTransaction GdaSqlStatementTransaction
TYPE AS LONG GdaSqlStatementType
ENUM
  GDA_SQL_STATEMENT_SELECT = 0
  GDA_SQL_STATEMENT_INSERT = 1
  GDA_SQL_STATEMENT_UPDATE = 2
  GDA_SQL_STATEMENT_DELETE = 3
  GDA_SQL_STATEMENT_COMPOUND = 4
  GDA_SQL_STATEMENT_BEGIN = 5
  GDA_SQL_STATEMENT_ROLLBACK = 6
  GDA_SQL_STATEMENT_COMMIT = 7
  GDA_SQL_STATEMENT_SAVEPOINT = 8
  GDA_SQL_STATEMENT_ROLLBACK_SAVEPOINT = 9
  GDA_SQL_STATEMENT_DELETE_SAVEPOINT = 10
  GDA_SQL_STATEMENT_UNKNOWN = 11
  GDA_SQL_STATEMENT_NONE = 12
END ENUM
TYPE AS _GdaSqlStatementUnknown GdaSqlStatementUnknown
TYPE AS _GdaSqlStatementUpdate GdaSqlStatementUpdate
TYPE AS _GdaSqlTable GdaSqlTable
TYPE AS _GdaStatement GdaStatement
TYPE AS _GdaStatementClass GdaStatementClass
TYPE AS LONG GdaStatementError
ENUM
  GDA_STATEMENT_PARSE_ERROR = 0
  GDA_STATEMENT_SYNTAX_ERROR = 1
  GDA_STATEMENT_NO_CNC_ERROR = 2
  GDA_STATEMENT_CNC_CLOSED_ERROR = 3
  GDA_STATEMENT_EXEC_ERROR = 4
  GDA_STATEMENT_PARAM_TYPE_ERROR = 5
  GDA_STATEMENT_PARAM_ERROR = 6
END ENUM
TYPE AS LONG GdaStatementModelUsage
ENUM
  GDA_STATEMENT_MODEL_RANDOM_ACCESS = 1
  GDA_STATEMENT_MODEL_CURSOR_FORWARD = 2
  GDA_STATEMENT_MODEL_CURSOR_BACKWARD = 4
  GDA_STATEMENT_MODEL_CURSOR = 6
  GDA_STATEMENT_MODEL_ALLOW_NOPARAM = 8
  GDA_STATEMENT_MODEL_OFFLINE = 16
END ENUM
TYPE AS _GdaStatementPrivate GdaStatementPrivate
TYPE AS LONG GdaStatementSqlFlag
ENUM
  GDA_STATEMENT_SQL_PARAMS_AS_VALUES = 0
  GDA_STATEMENT_SQL_PRETTY = 1
  GDA_STATEMENT_SQL_PARAMS_LONG = 2
  GDA_STATEMENT_SQL_PARAMS_SHORT = 4
  GDA_STATEMENT_SQL_PARAMS_AS_COLON = 8
  GDA_STATEMENT_SQL_PARAMS_AS_DOLLAR = 16
  GDA_STATEMENT_SQL_PARAMS_AS_QMARK = 32
  GDA_STATEMENT_SQL_PARAMS_AS_UQMARK = 64
  GDA_STATEMENT_SQL_TIMEZONE_TO_GMT = 128
END ENUM
#DEFINE GDA_TIMEZONE_INVALID 86400
TYPE AS _GdaThreadNotification GdaThreadNotification
TYPE AS LONG GdaThreadNotificationType
ENUM
  GDA_THREAD_NOTIFICATION_JOB = 1
  GDA_THREAD_NOTIFICATION_SIGNAL = 2
END ENUM
TYPE AS _GdaThreadWrapper GdaThreadWrapper
TYPE AS _GdaThreadWrapperClass GdaThreadWrapperClass
TYPE AS LONG GdaThreadWrapperError
ENUM
  GDA_THREAD_WRAPPER_UNKNOWN_ERROR = 0
END ENUM
TYPE AS _GdaThreadWrapperPrivate GdaThreadWrapperPrivate
TYPE AS _GdaTime GdaTime
TYPE AS _GdaTimestamp GdaTimestamp
TYPE AS LONG GdaTransactionIsolation
ENUM
  GDA_TRANSACTION_ISOLATION_UNKNOWN = 0
  GDA_TRANSACTION_ISOLATION_READ_COMMITTED = 1
  GDA_TRANSACTION_ISOLATION_READ_UNCOMMITTED = 2
  GDA_TRANSACTION_ISOLATION_REPEATABLE_READ = 3
  GDA_TRANSACTION_ISOLATION_SERIALIZABLE = 4
END ENUM
TYPE AS _GdaTransactionStatus GdaTransactionStatus
TYPE AS _GdaTransactionStatusClass GdaTransactionStatusClass
TYPE AS _GdaTransactionStatusEvent GdaTransactionStatusEvent
TYPE AS LONG GdaTransactionStatusEventType
ENUM
  GDA_TRANSACTION_STATUS_EVENT_SAVEPOINT = 0
  GDA_TRANSACTION_STATUS_EVENT_SQL = 1
  GDA_TRANSACTION_STATUS_EVENT_SUB_TRANSACTION = 2
END ENUM
TYPE AS LONG GdaTransactionStatusState
ENUM
  GDA_TRANSACTION_STATUS_STATE_OK = 0
  GDA_TRANSACTION_STATUS_STATE_FAILED = 1
END ENUM
TYPE AS _GdaTree GdaTree
TYPE AS _GdaTreeClass GdaTreeClass
TYPE AS LONG GdaTreeError
ENUM
  GDA_TREE_UNKNOWN_ERROR = 0
END ENUM
TYPE AS _GdaTreeManager GdaTreeManager
TYPE AS _GdaTreeManagerClass GdaTreeManagerClass
TYPE AS LONG GdaTreeManagerError
ENUM
  GDA_TREE_MANAGER_UNKNOWN_ERROR = 0
END ENUM
TYPE AS _GdaTreeManagerPrivate GdaTreeManagerPrivate
TYPE AS _GdaTreeMgrColumns GdaTreeMgrColumns
TYPE AS _GdaTreeMgrColumnsClass GdaTreeMgrColumnsClass
TYPE AS _GdaTreeMgrColumnsPriv GdaTreeMgrColumnsPriv
TYPE AS _GdaTreeMgrLabel GdaTreeMgrLabel
TYPE AS _GdaTreeMgrLabelClass GdaTreeMgrLabelClass
TYPE AS _GdaTreeMgrLabelPriv GdaTreeMgrLabelPriv
TYPE AS _GdaTreeMgrSchemas GdaTreeMgrSchemas
TYPE AS _GdaTreeMgrSchemasClass GdaTreeMgrSchemasClass
TYPE AS _GdaTreeMgrSchemasPriv GdaTreeMgrSchemasPriv
TYPE AS _GdaTreeMgrSelect GdaTreeMgrSelect
TYPE AS _GdaTreeMgrSelectClass GdaTreeMgrSelectClass
TYPE AS _GdaTreeMgrSelectPriv GdaTreeMgrSelectPriv
TYPE AS _GdaTreeMgrTables GdaTreeMgrTables
TYPE AS _GdaTreeMgrTablesClass GdaTreeMgrTablesClass
TYPE AS _GdaTreeMgrTablesPriv GdaTreeMgrTablesPriv
TYPE AS _GdaTreeNode GdaTreeNode
TYPE AS _GdaTreeNodeClass GdaTreeNodeClass
TYPE AS LONG GdaTreeNodeError
ENUM
  GDA_TREE_NODE_UNKNOWN_ERROR = 0
END ENUM
TYPE AS _GdaTreeNodePrivate GdaTreeNodePrivate
TYPE AS _GdaTreePrivate GdaTreePrivate
TYPE AS _GdaUShort GdaUShort
TYPE AS LONG GdaValueAttribute
ENUM
  GDA_VALUE_ATTR_NONE = 0
  GDA_VALUE_ATTR_IS_NULL = 1
  GDA_VALUE_ATTR_CAN_BE_NULL = 2
  GDA_VALUE_ATTR_IS_DEFAULT = 4
  GDA_VALUE_ATTR_CAN_BE_DEFAULT = 8
  GDA_VALUE_ATTR_IS_UNCHANGED = 16
  GDA_VALUE_ATTR_ACTIONS_SHOWN = 32
  GDA_VALUE_ATTR_DATA_NON_VALID = 64
  GDA_VALUE_ATTR_HAS_VALUE_ORIG = 128
  GDA_VALUE_ATTR_NO_MODIF = 256
  GDA_VALUE_ATTR_UNUSED = 512
END ENUM
TYPE AS _GdaXaTransaction GdaXaTransaction
TYPE AS _GdaXaTransactionClass GdaXaTransactionClass
TYPE AS LONG GdaXaTransactionError
ENUM
  GDA_XA_TRANSACTION_ALREADY_REGISTERED_ERROR = 0
  GDA_XA_TRANSACTION_DTP_NOT_SUPPORTED_ERROR = 1
  GDA_XA_TRANSACTION_CONNECTION_BRANCH_LENGTH_ERROR = 2
END ENUM
TYPE AS _GdaXaTransactionId GdaXaTransactionId
TYPE AS _GdaXaTransactionPrivate GdaXaTransactionPrivate
EXTERN "C" LIB "gda-5.0"
' P_X

TYPE GdaAttributesManagerFunc AS SUB CDECL(BYVAL AS const gchar PTR, BYVAL AS const GValue PTR, BYVAL AS gpointer)
TYPE GdaAttributesManagerSignal AS SUB CDECL(BYVAL AS GObject PTR, BYVAL AS const gchar PTR, BYVAL AS const GValue PTR, BYVAL AS gpointer)
TYPE _GdaSet
  AS GObject object
  AS GdaSetPrivate PTR priv
  AS GSList PTR holders
  AS GSList PTR nodes_list
  AS GSList PTR sources_list
  AS GSList PTR groups_list
END TYPE
DECLARE FUNCTION gda_set_get_type() AS GType
#DEFINE GDA_TYPE_SET (gda_set_get_type())
#DEFINE GDA_SET(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GDA_TYPE_SET, GdaSet))
#DEFINE GDA_SET_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GDA_TYPE_SET, GdaSetClass))
#DEFINE GDA_IS_SET(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GDA_TYPE_SET))
#DEFINE GDA_IS_CLASS_SET(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GDA_TYPE_SET))
#DEFINE GDA_SET_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GDA_TYPE_SET, GdaSetClass))
DECLARE FUNCTION gda_set_new(BYVAL AS GSList PTR) AS GdaSet PTR
DECLARE FUNCTION gda_set_new_from_spec_node(BYVAL AS any ptr /' xmlNodePtr '/, BYVAL AS GError PTR PTR) AS GdaSet PTR
DECLARE FUNCTION gda_set_new_from_spec_string(BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR) AS GdaSet PTR
DECLARE FUNCTION gda_set_new_inline(BYVAL AS gint, ...) AS GdaSet PTR
DECLARE FUNCTION gda_set_new_read_only(BYVAL AS GSList PTR) AS GdaSet PTR
DECLARE FUNCTION gda_set_error_quark() AS GQuark
DECLARE FUNCTION gda_set_add_holder(BYVAL AS GdaSet PTR, BYVAL AS GdaHolder PTR) AS gboolean
DECLARE FUNCTION gda_set_copy(BYVAL AS GdaSet PTR) AS GdaSet PTR
DECLARE FUNCTION gda_set_get_group(BYVAL AS GdaSet PTR, BYVAL AS GdaHolder PTR) AS GdaSetGroup PTR
DECLARE FUNCTION gda_set_get_holder(BYVAL AS GdaSet PTR, BYVAL AS const gchar PTR) AS GdaHolder PTR
DECLARE FUNCTION gda_set_get_holder_value(BYVAL AS GdaSet PTR, BYVAL AS const gchar PTR) AS const GValue PTR
DECLARE FUNCTION gda_set_get_node(BYVAL AS GdaSet PTR, BYVAL AS GdaHolder PTR) AS GdaSetNode PTR
DECLARE FUNCTION gda_set_get_nth_holder(BYVAL AS GdaSet PTR, BYVAL AS gint) AS GdaHolder PTR
DECLARE FUNCTION gda_set_get_source(BYVAL AS GdaSet PTR, BYVAL AS GdaHolder PTR) AS GdaSetSource PTR
DECLARE FUNCTION gda_set_get_source_for_model(BYVAL AS GdaSet PTR, BYVAL AS GdaDataModel PTR) AS GdaSetSource PTR
DECLARE FUNCTION gda_set_is_valid(BYVAL AS GdaSet PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE SUB gda_set_merge_with_set(BYVAL AS GdaSet PTR, BYVAL AS GdaSet PTR)
DECLARE SUB gda_set_remove_holder(BYVAL AS GdaSet PTR, BYVAL AS GdaHolder PTR)
DECLARE SUB gda_set_replace_source_model(BYVAL AS GdaSet PTR, BYVAL AS GdaSetSource PTR, BYVAL AS GdaDataModel PTR)
DECLARE FUNCTION gda_set_set_holder_value(BYVAL AS GdaSet PTR, BYVAL AS GError PTR PTR, BYVAL AS const gchar PTR, ...) AS gboolean
TYPE _GdaSetClass
  AS GObjectClass parent_class
  validate_holder_change AS FUNCTION CDECL(BYVAL AS GdaSet PTR, BYVAL AS GdaHolder PTR, BYVAL AS const GValue PTR) AS GError PTR
  validate_set AS FUNCTION CDECL(BYVAL AS GdaSet PTR) AS GError PTR
  holder_changed AS SUB CDECL(BYVAL AS GdaSet PTR, BYVAL AS GdaHolder PTR)
  holder_attr_changed AS SUB CDECL(BYVAL AS GdaSet PTR, BYVAL AS GdaHolder PTR, BYVAL AS const gchar PTR, BYVAL AS const GValue PTR)
  public_data_changed AS SUB CDECL(BYVAL AS GdaSet PTR)
  holder_type_set AS SUB CDECL(BYVAL AS GdaSet PTR, BYVAL AS GdaHolder PTR)
  source_model_changed AS SUB CDECL(BYVAL AS GdaSet PTR, BYVAL AS GdaSetSource PTR)
  _gda_reserved1 AS SUB CDECL()
  _gda_reserved2 AS SUB CDECL()
  _gda_reserved3 AS SUB CDECL()
  _gda_reserved4 AS SUB CDECL()
END TYPE
TYPE GdaSqlReservedKeywordsFunc AS FUNCTION CDECL(BYVAL AS const gchar PTR) AS gboolean
TYPE GdaServerProviderExecCallback AS SUB CDECL(BYVAL AS GdaServerProvider PTR, BYVAL AS GdaConnection PTR, BYVAL AS guint, BYVAL AS GObject PTR, BYVAL AS const GError PTR, BYVAL AS gpointer)
TYPE _GdaServerProviderMeta
  _info AS FUNCTION CDECL(BYVAL AS GdaServerProvider PTR, BYVAL AS GdaConnection PTR, BYVAL AS GdaMetaStore PTR, BYVAL AS GdaMetaContext PTR, BYVAL AS GError PTR PTR) AS gboolean
  _btypes AS FUNCTION CDECL(BYVAL AS GdaServerProvider PTR, BYVAL AS GdaConnection PTR, BYVAL AS GdaMetaStore PTR, BYVAL AS GdaMetaContext PTR, BYVAL AS GError PTR PTR) AS gboolean
  _udt AS FUNCTION CDECL(BYVAL AS GdaServerProvider PTR, BYVAL AS GdaConnection PTR, BYVAL AS GdaMetaStore PTR, BYVAL AS GdaMetaContext PTR, BYVAL AS GError PTR PTR) AS gboolean
  udt AS FUNCTION CDECL(BYVAL AS GdaServerProvider PTR, BYVAL AS GdaConnection PTR, BYVAL AS GdaMetaStore PTR, BYVAL AS GdaMetaContext PTR, BYVAL AS GError PTR PTR, BYVAL AS const GValue PTR, BYVAL AS const GValue PTR) AS gboolean
  _udt_cols AS FUNCTION CDECL(BYVAL AS GdaServerProvider PTR, BYVAL AS GdaConnection PTR, BYVAL AS GdaMetaStore PTR, BYVAL AS GdaMetaContext PTR, BYVAL AS GError PTR PTR) AS gboolean
  udt_cols AS FUNCTION CDECL(BYVAL AS GdaServerProvider PTR, BYVAL AS GdaConnection PTR, BYVAL AS GdaMetaStore PTR, BYVAL AS GdaMetaContext PTR, BYVAL AS GError PTR PTR, BYVAL AS const GValue PTR, BYVAL AS const GValue PTR, BYVAL AS const GValue PTR) AS gboolean
  _enums AS FUNCTION CDECL(BYVAL AS GdaServerProvider PTR, BYVAL AS GdaConnection PTR, BYVAL AS GdaMetaStore PTR, BYVAL AS GdaMetaContext PTR, BYVAL AS GError PTR PTR) AS gboolean
  enums AS FUNCTION CDECL(BYVAL AS GdaServerProvider PTR, BYVAL AS GdaConnection PTR, BYVAL AS GdaMetaStore PTR, BYVAL AS GdaMetaContext PTR, BYVAL AS GError PTR PTR, BYVAL AS const GValue PTR, BYVAL AS const GValue PTR, BYVAL AS const GValue PTR) AS gboolean
  _domains AS FUNCTION CDECL(BYVAL AS GdaServerProvider PTR, BYVAL AS GdaConnection PTR, BYVAL AS GdaMetaStore PTR, BYVAL AS GdaMetaContext PTR, BYVAL AS GError PTR PTR) AS gboolean
  domains AS FUNCTION CDECL(BYVAL AS GdaServerProvider PTR, BYVAL AS GdaConnection PTR, BYVAL AS GdaMetaStore PTR, BYVAL AS GdaMetaContext PTR, BYVAL AS GError PTR PTR, BYVAL AS const GValue PTR, BYVAL AS const GValue PTR) AS gboolean
  _constraints_dom AS FUNCTION CDECL(BYVAL AS GdaServerProvider PTR, BYVAL AS GdaConnection PTR, BYVAL AS GdaMetaStore PTR, BYVAL AS GdaMetaContext PTR, BYVAL AS GError PTR PTR) AS gboolean
  constraints_dom AS FUNCTION CDECL(BYVAL AS GdaServerProvider PTR, BYVAL AS GdaConnection PTR, BYVAL AS GdaMetaStore PTR, BYVAL AS GdaMetaContext PTR, BYVAL AS GError PTR PTR, BYVAL AS const GValue PTR, BYVAL AS const GValue PTR, BYVAL AS const GValue PTR) AS gboolean
  _el_types AS FUNCTION CDECL(BYVAL AS GdaServerProvider PTR, BYVAL AS GdaConnection PTR, BYVAL AS GdaMetaStore PTR, BYVAL AS GdaMetaContext PTR, BYVAL AS GError PTR PTR) AS gboolean
  el_types AS FUNCTION CDECL(BYVAL AS GdaServerProvider PTR, BYVAL AS GdaConnection PTR, BYVAL AS GdaMetaStore PTR, BYVAL AS GdaMetaContext PTR, BYVAL AS GError PTR PTR, BYVAL AS const GValue PTR) AS gboolean
  _collations AS FUNCTION CDECL(BYVAL AS GdaServerProvider PTR, BYVAL AS GdaConnection PTR, BYVAL AS GdaMetaStore PTR, BYVAL AS GdaMetaContext PTR, BYVAL AS GError PTR PTR) AS gboolean
  collations AS FUNCTION CDECL(BYVAL AS GdaServerProvider PTR, BYVAL AS GdaConnection PTR, BYVAL AS GdaMetaStore PTR, BYVAL AS GdaMetaContext PTR, BYVAL AS GError PTR PTR, BYVAL AS const GValue PTR, BYVAL AS const GValue PTR, BYVAL AS const GValue PTR) AS gboolean
  _character_sets AS FUNCTION CDECL(BYVAL AS GdaServerProvider PTR, BYVAL AS GdaConnection PTR, BYVAL AS GdaMetaStore PTR, BYVAL AS GdaMetaContext PTR, BYVAL AS GError PTR PTR) AS gboolean
  character_sets AS FUNCTION CDECL(BYVAL AS GdaServerProvider PTR, BYVAL AS GdaConnection PTR, BYVAL AS GdaMetaStore PTR, BYVAL AS GdaMetaContext PTR, BYVAL AS GError PTR PTR, BYVAL AS const GValue PTR, BYVAL AS const GValue PTR, BYVAL AS const GValue PTR) AS gboolean
  _schemata AS FUNCTION CDECL(BYVAL AS GdaServerProvider PTR, BYVAL AS GdaConnection PTR, BYVAL AS GdaMetaStore PTR, BYVAL AS GdaMetaContext PTR, BYVAL AS GError PTR PTR) AS gboolean
  schemata AS FUNCTION CDECL(BYVAL AS GdaServerProvider PTR, BYVAL AS GdaConnection PTR, BYVAL AS GdaMetaStore PTR, BYVAL AS GdaMetaContext PTR, BYVAL AS GError PTR PTR, BYVAL AS const GValue PTR, BYVAL AS const GValue PTR) AS gboolean
  _tables_views AS FUNCTION CDECL(BYVAL AS GdaServerProvider PTR, BYVAL AS GdaConnection PTR, BYVAL AS GdaMetaStore PTR, BYVAL AS GdaMetaContext PTR, BYVAL AS GError PTR PTR) AS gboolean
  tables_views AS FUNCTION CDECL(BYVAL AS GdaServerProvider PTR, BYVAL AS GdaConnection PTR, BYVAL AS GdaMetaStore PTR, BYVAL AS GdaMetaContext PTR, BYVAL AS GError PTR PTR, BYVAL AS const GValue PTR, BYVAL AS const GValue PTR, BYVAL AS const GValue PTR) AS gboolean
  _columns AS FUNCTION CDECL(BYVAL AS GdaServerProvider PTR, BYVAL AS GdaConnection PTR, BYVAL AS GdaMetaStore PTR, BYVAL AS GdaMetaContext PTR, BYVAL AS GError PTR PTR) AS gboolean
  columns AS FUNCTION CDECL(BYVAL AS GdaServerProvider PTR, BYVAL AS GdaConnection PTR, BYVAL AS GdaMetaStore PTR, BYVAL AS GdaMetaContext PTR, BYVAL AS GError PTR PTR, BYVAL AS const GValue PTR, BYVAL AS const GValue PTR, BYVAL AS const GValue PTR) AS gboolean
  _view_cols AS FUNCTION CDECL(BYVAL AS GdaServerProvider PTR, BYVAL AS GdaConnection PTR, BYVAL AS GdaMetaStore PTR, BYVAL AS GdaMetaContext PTR, BYVAL AS GError PTR PTR) AS gboolean
  view_cols AS FUNCTION CDECL(BYVAL AS GdaServerProvider PTR, BYVAL AS GdaConnection PTR, BYVAL AS GdaMetaStore PTR, BYVAL AS GdaMetaContext PTR, BYVAL AS GError PTR PTR, BYVAL AS const GValue PTR, BYVAL AS const GValue PTR, BYVAL AS const GValue PTR) AS gboolean
  _constraints_tab AS FUNCTION CDECL(BYVAL AS GdaServerProvider PTR, BYVAL AS GdaConnection PTR, BYVAL AS GdaMetaStore PTR, BYVAL AS GdaMetaContext PTR, BYVAL AS GError PTR PTR) AS gboolean
  constraints_tab AS FUNCTION CDECL(BYVAL AS GdaServerProvider PTR, BYVAL AS GdaConnection PTR, BYVAL AS GdaMetaStore PTR, BYVAL AS GdaMetaContext PTR, BYVAL AS GError PTR PTR, BYVAL AS const GValue PTR, BYVAL AS const GValue PTR, BYVAL AS const GValue PTR, BYVAL AS const GValue PTR) AS gboolean
  _constraints_ref AS FUNCTION CDECL(BYVAL AS GdaServerProvider PTR, BYVAL AS GdaConnection PTR, BYVAL AS GdaMetaStore PTR, BYVAL AS GdaMetaContext PTR, BYVAL AS GError PTR PTR) AS gboolean
  constraints_ref AS FUNCTION CDECL(BYVAL AS GdaServerProvider PTR, BYVAL AS GdaConnection PTR, BYVAL AS GdaMetaStore PTR, BYVAL AS GdaMetaContext PTR, BYVAL AS GError PTR PTR, BYVAL AS const GValue PTR, BYVAL AS const GValue PTR, BYVAL AS const GValue PTR, BYVAL AS const GValue PTR) AS gboolean
  _key_columns AS FUNCTION CDECL(BYVAL AS GdaServerProvider PTR, BYVAL AS GdaConnection PTR, BYVAL AS GdaMetaStore PTR, BYVAL AS GdaMetaContext PTR, BYVAL AS GError PTR PTR) AS gboolean
  key_columns AS FUNCTION CDECL(BYVAL AS GdaServerProvider PTR, BYVAL AS GdaConnection PTR, BYVAL AS GdaMetaStore PTR, BYVAL AS GdaMetaContext PTR, BYVAL AS GError PTR PTR, BYVAL AS const GValue PTR, BYVAL AS const GValue PTR, BYVAL AS const GValue PTR, BYVAL AS const GValue PTR) AS gboolean
  _check_columns AS FUNCTION CDECL(BYVAL AS GdaServerProvider PTR, BYVAL AS GdaConnection PTR, BYVAL AS GdaMetaStore PTR, BYVAL AS GdaMetaContext PTR, BYVAL AS GError PTR PTR) AS gboolean
  check_columns AS FUNCTION CDECL(BYVAL AS GdaServerProvider PTR, BYVAL AS GdaConnection PTR, BYVAL AS GdaMetaStore PTR, BYVAL AS GdaMetaContext PTR, BYVAL AS GError PTR PTR, BYVAL AS const GValue PTR, BYVAL AS const GValue PTR, BYVAL AS const GValue PTR, BYVAL AS const GValue PTR) AS gboolean
  _triggers AS FUNCTION CDECL(BYVAL AS GdaServerProvider PTR, BYVAL AS GdaConnection PTR, BYVAL AS GdaMetaStore PTR, BYVAL AS GdaMetaContext PTR, BYVAL AS GError PTR PTR) AS gboolean
  triggers AS FUNCTION CDECL(BYVAL AS GdaServerProvider PTR, BYVAL AS GdaConnection PTR, BYVAL AS GdaMetaStore PTR, BYVAL AS GdaMetaContext PTR, BYVAL AS GError PTR PTR, BYVAL AS const GValue PTR, BYVAL AS const GValue PTR, BYVAL AS const GValue PTR) AS gboolean
  _routines AS FUNCTION CDECL(BYVAL AS GdaServerProvider PTR, BYVAL AS GdaConnection PTR, BYVAL AS GdaMetaStore PTR, BYVAL AS GdaMetaContext PTR, BYVAL AS GError PTR PTR) AS gboolean
  routines AS FUNCTION CDECL(BYVAL AS GdaServerProvider PTR, BYVAL AS GdaConnection PTR, BYVAL AS GdaMetaStore PTR, BYVAL AS GdaMetaContext PTR, BYVAL AS GError PTR PTR, BYVAL AS const GValue PTR, BYVAL AS const GValue PTR, BYVAL AS const GValue PTR) AS gboolean
  _routine_col AS FUNCTION CDECL(BYVAL AS GdaServerProvider PTR, BYVAL AS GdaConnection PTR, BYVAL AS GdaMetaStore PTR, BYVAL AS GdaMetaContext PTR, BYVAL AS GError PTR PTR) AS gboolean
  routine_col AS FUNCTION CDECL(BYVAL AS GdaServerProvider PTR, BYVAL AS GdaConnection PTR, BYVAL AS GdaMetaStore PTR, BYVAL AS GdaMetaContext PTR, BYVAL AS GError PTR PTR, BYVAL AS const GValue PTR, BYVAL AS const GValue PTR, BYVAL AS const GValue PTR) AS gboolean
  _routine_par AS FUNCTION CDECL(BYVAL AS GdaServerProvider PTR, BYVAL AS GdaConnection PTR, BYVAL AS GdaMetaStore PTR, BYVAL AS GdaMetaContext PTR, BYVAL AS GError PTR PTR) AS gboolean
  routine_par AS FUNCTION CDECL(BYVAL AS GdaServerProvider PTR, BYVAL AS GdaConnection PTR, BYVAL AS GdaMetaStore PTR, BYVAL AS GdaMetaContext PTR, BYVAL AS GError PTR PTR, BYVAL AS const GValue PTR, BYVAL AS const GValue PTR, BYVAL AS const GValue PTR) AS gboolean
  _indexes_tab AS FUNCTION CDECL(BYVAL AS GdaServerProvider PTR, BYVAL AS GdaConnection PTR, BYVAL AS GdaMetaStore PTR, BYVAL AS GdaMetaContext PTR, BYVAL AS GError PTR PTR) AS gboolean
  indexes_tab AS FUNCTION CDECL(BYVAL AS GdaServerProvider PTR, BYVAL AS GdaConnection PTR, BYVAL AS GdaMetaStore PTR, BYVAL AS GdaMetaContext PTR, BYVAL AS GError PTR PTR, BYVAL AS const GValue PTR, BYVAL AS const GValue PTR, BYVAL AS const GValue PTR, BYVAL AS const GValue PTR) AS gboolean
  _index_cols AS FUNCTION CDECL(BYVAL AS GdaServerProvider PTR, BYVAL AS GdaConnection PTR, BYVAL AS GdaMetaStore PTR, BYVAL AS GdaMetaContext PTR, BYVAL AS GError PTR PTR) AS gboolean
  index_cols AS FUNCTION CDECL(BYVAL AS GdaServerProvider PTR, BYVAL AS GdaConnection PTR, BYVAL AS GdaMetaStore PTR, BYVAL AS GdaMetaContext PTR, BYVAL AS GError PTR PTR, BYVAL AS const GValue PTR, BYVAL AS const GValue PTR, BYVAL AS const GValue PTR, BYVAL AS const GValue PTR) AS gboolean
  _gda_reserved5 AS SUB CDECL()
  _gda_reserved6 AS SUB CDECL()
  _gda_reserved7 AS SUB CDECL()
  _gda_reserved8 AS SUB CDECL()
  _gda_reserved9 AS SUB CDECL()
  _gda_reserved10 AS SUB CDECL()
  _gda_reserved11 AS SUB CDECL()
  _gda_reserved12 AS SUB CDECL()
  _gda_reserved13 AS SUB CDECL()
  _gda_reserved14 AS SUB CDECL()
  _gda_reserved15 AS SUB CDECL()
  _gda_reserved16 AS SUB CDECL()
END TYPE
TYPE GdaSqlForeachFunc AS FUNCTION CDECL(BYVAL AS GdaSqlAnyPart PTR, BYVAL AS gpointer) AS gboolean
TYPE GdaSqlRenderingValue AS FUNCTION CDECL(BYVAL AS const GValue PTR, BYVAL AS GdaSqlRenderingContext PTR) AS gchar PTR
TYPE GdaSqlRenderingPSpecFunc AS FUNCTION CDECL(BYVAL AS any ptr /' GdaSqlParamSpec '/ PTR, BYVAL AS GdaSqlExpr PTR, BYVAL AS GdaSqlRenderingContext PTR, BYVAL AS gboolean PTR, BYVAL AS gboolean PTR) AS gchar PTR
TYPE GdaThreadWrapperCallback AS SUB CDECL(BYVAL AS GdaThreadWrapper PTR, BYVAL AS gpointer, BYVAL AS const gchar PTR, BYVAL AS gint, BYVAL AS const GValue PTR, BYVAL AS gpointer, BYVAL AS gpointer)
TYPE GdaThreadWrapperFunc AS FUNCTION CDECL(BYVAL AS gpointer) AS gpointer
TYPE GdaThreadWrapperVoidFunc AS SUB CDECL(BYVAL AS gpointer)
TYPE GdaTreeManagerNodesFunc AS FUNCTION CDECL(BYVAL AS GdaTreeManager PTR, BYVAL AS GdaTreeNode PTR, BYVAL AS const GSList PTR, BYVAL AS gboolean PTR) AS GSList PTR
TYPE GdaTreeManagerNodeFunc AS FUNCTION CDECL(BYVAL AS GdaTreeManager PTR, BYVAL AS GdaTreeNode PTR, BYVAL AS const gchar PTR) AS GdaTreeNode PTR
TYPE GdaSqlRenderingExpr AS FUNCTION CDECL(BYVAL AS GdaSqlExpr PTR, BYVAL AS GdaSqlRenderingContext PTR, BYVAL AS gboolean PTR, BYVAL AS gboolean PTR) AS gchar PTR
TYPE GdaSqlRenderingFunc AS FUNCTION CDECL(BYVAL AS GdaSqlAnyPart PTR, BYVAL AS GdaSqlRenderingContext PTR) AS gchar PTR
' P_3

DECLARE SUB gda_attributes_manager_clear(BYVAL AS GdaAttributesManager PTR, BYVAL AS gpointer)
DECLARE SUB gda_attributes_manager_copy(BYVAL AS GdaAttributesManager PTR, BYVAL AS gpointer PTR, BYVAL AS GdaAttributesManager PTR, BYVAL AS gpointer PTR)
DECLARE SUB gda_attributes_manager_foreach(BYVAL AS GdaAttributesManager PTR, BYVAL AS gpointer, BYVAL AS GdaAttributesManagerFunc, BYVAL AS gpointer)
DECLARE SUB gda_attributes_manager_free(BYVAL AS GdaAttributesManager PTR)
DECLARE FUNCTION gda_attributes_manager_get(BYVAL AS GdaAttributesManager PTR, BYVAL AS gpointer, BYVAL AS const gchar PTR) AS const GValue PTR
DECLARE SUB gda_attributes_manager_set(BYVAL AS GdaAttributesManager PTR, BYVAL AS gpointer, BYVAL AS const gchar PTR, BYVAL AS const GValue PTR)
DECLARE SUB gda_attributes_manager_set_full(BYVAL AS GdaAttributesManager PTR, BYVAL AS gpointer, BYVAL AS const gchar PTR, BYVAL AS const GValue PTR, BYVAL AS GDestroyNotify)
DECLARE FUNCTION gda_attributes_manager_new(BYVAL AS gboolean, BYVAL AS GdaAttributesManagerSignal, BYVAL AS gpointer) AS GdaAttributesManager PTR
TYPE _GdaBatch
  AS GObject object
  AS GdaBatchPrivate PTR priv
END TYPE
DECLARE FUNCTION gda_batch_get_type() AS GType
#DEFINE GDA_TYPE_BATCH (gda_batch_get_type())
#DEFINE GDA_BATCH(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GDA_TYPE_BATCH, GdaBatch))
#DEFINE GDA_BATCH_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GDA_TYPE_BATCH, GdaBatchClass))
#DEFINE GDA_IS_BATCH(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GDA_TYPE_BATCH))
#DEFINE GDA_IS_CLASS_BATCH(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GDA_TYPE_BATCH))
#DEFINE GDA_BATCH_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GDA_TYPE_BATCH, GdaBatchClass))
DECLARE FUNCTION gda_batch_new() AS GdaBatch PTR
DECLARE FUNCTION gda_batch_error_quark() AS GQuark
DECLARE SUB gda_batch_add_statement(BYVAL AS GdaBatch PTR, BYVAL AS GdaStatement PTR)
DECLARE FUNCTION gda_batch_copy(BYVAL AS GdaBatch PTR) AS GdaBatch PTR
DECLARE FUNCTION gda_batch_get_parameters(BYVAL AS GdaBatch PTR, BYVAL AS GdaSet PTR PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION gda_batch_get_statements(BYVAL AS GdaBatch PTR) AS const GSList PTR
DECLARE SUB gda_batch_remove_statement(BYVAL AS GdaBatch PTR, BYVAL AS GdaStatement PTR)
DECLARE FUNCTION gda_batch_serialize(BYVAL AS GdaBatch PTR) AS gchar PTR
TYPE _GdaBatchClass
  AS GObjectClass parent_class
  changed AS SUB CDECL(BYVAL AS GdaBatch PTR, BYVAL AS GdaStatement PTR)
  _gda_reserved1 AS SUB CDECL()
  _gda_reserved2 AS SUB CDECL()
  _gda_reserved3 AS SUB CDECL()
  _gda_reserved4 AS SUB CDECL()
END TYPE
TYPE _GdaBinary
  AS guchar /'?'/ data
  AS glong binary_length
END TYPE
DECLARE FUNCTION gda_binary_to_string(BYVAL AS const GdaBinary PTR, BYVAL AS guint) AS gchar PTR
DECLARE FUNCTION gda_binary_copy(BYVAL AS gpointer) AS gpointer
DECLARE SUB gda_binary_free(BYVAL AS gpointer)
TYPE _GdaBlob
  AS GdaBinary data
  AS GdaBlobOp PTR op
END TYPE
DECLARE SUB gda_blob_set_op(BYVAL AS GdaBlob PTR, BYVAL AS GdaBlobOp PTR)
DECLARE FUNCTION gda_blob_to_string(BYVAL AS GdaBlob PTR, BYVAL AS guint) AS gchar PTR
DECLARE FUNCTION gda_blob_copy(BYVAL AS gpointer) AS gpointer
DECLARE SUB gda_blob_free(BYVAL AS gpointer)
TYPE _GdaBlobOp
  AS GObject object
  AS gpointer _gda_reserved1
END TYPE
DECLARE FUNCTION gda_blob_op_get_type() AS GType
#DEFINE GDA_TYPE_BLOB_OP (gda_blob_op_get_type())
#DEFINE GDA_BLOB_OP(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GDA_TYPE_BLOB_OP, GdaBlobOp))
#DEFINE GDA_BLOB_OP_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GDA_TYPE_BLOB_OP, GdaBlobOpClass))
#DEFINE GDA_IS_BLOB_OP(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GDA_TYPE_BLOB_OP))
#DEFINE GDA_IS_CLASS_BLOB_OP(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GDA_TYPE_BLOB_OP))
#DEFINE GDA_BLOB_OP_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GDA_TYPE_BLOB_OP, GdaBlobOpClass))
DECLARE FUNCTION gda_blob_op_get_length(BYVAL AS GdaBlobOp PTR) AS glong
DECLARE FUNCTION gda_blob_op_read(BYVAL AS GdaBlobOp PTR, BYVAL AS GdaBlob PTR, BYVAL AS glong, BYVAL AS glong) AS glong
DECLARE FUNCTION gda_blob_op_read_all(BYVAL AS GdaBlobOp PTR, BYVAL AS GdaBlob PTR) AS gboolean
DECLARE FUNCTION gda_blob_op_write(BYVAL AS GdaBlobOp PTR, BYVAL AS GdaBlob PTR, BYVAL AS glong) AS glong
DECLARE FUNCTION gda_blob_op_write_all(BYVAL AS GdaBlobOp PTR, BYVAL AS GdaBlob PTR) AS gboolean
TYPE _GdaBlobOpClass
  AS GObjectClass parent_class
  get_length AS FUNCTION CDECL(BYVAL AS GdaBlobOp PTR) AS glong
  read AS FUNCTION CDECL(BYVAL AS GdaBlobOp PTR, BYVAL AS GdaBlob PTR, BYVAL AS glong, BYVAL AS glong) AS glong
  write AS FUNCTION CDECL(BYVAL AS GdaBlobOp PTR, BYVAL AS GdaBlob PTR, BYVAL AS glong) AS glong
  write_all AS FUNCTION CDECL(BYVAL AS GdaBlobOp PTR, BYVAL AS GdaBlob PTR) AS gboolean
  _gda_reserved1 AS SUB CDECL()
  _gda_reserved2 AS SUB CDECL()
  _gda_reserved3 AS SUB CDECL()
  _gda_reserved4 AS SUB CDECL()
END TYPE
TYPE _GdaColumn
  AS GObject object
  AS GdaColumnPrivate PTR priv
END TYPE
DECLARE FUNCTION gda_column_get_type() AS GType
#DEFINE GDA_TYPE_COLUMN (gda_column_get_type())
#DEFINE GDA_COLUMN(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GDA_TYPE_COLUMN, GdaColumn))
#DEFINE GDA_COLUMN_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GDA_TYPE_COLUMN, GdaColumnClass))
#DEFINE GDA_IS_COLUMN(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GDA_TYPE_COLUMN))
#DEFINE GDA_IS_CLASS_COLUMN(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GDA_TYPE_COLUMN))
#DEFINE GDA_COLUMN_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GDA_TYPE_COLUMN, GdaColumnClass))
DECLARE FUNCTION gda_column_new() AS GdaColumn PTR
DECLARE FUNCTION gda_column_copy(BYVAL AS GdaColumn PTR) AS GdaColumn PTR
DECLARE FUNCTION gda_column_get_allow_null(BYVAL AS GdaColumn PTR) AS gboolean
DECLARE FUNCTION gda_column_get_attribute(BYVAL AS GdaColumn PTR, BYVAL AS const gchar PTR) AS const GValue PTR
DECLARE FUNCTION gda_column_get_auto_increment(BYVAL AS GdaColumn PTR) AS gboolean
DECLARE FUNCTION gda_column_get_dbms_type(BYVAL AS GdaColumn PTR) AS const gchar PTR
DECLARE FUNCTION gda_column_get_default_value(BYVAL AS GdaColumn PTR) AS const GValue PTR
DECLARE FUNCTION gda_column_get_description(BYVAL AS GdaColumn PTR) AS const gchar PTR
DECLARE FUNCTION gda_column_get_g_type(BYVAL AS GdaColumn PTR) AS GType
DECLARE FUNCTION gda_column_get_name(BYVAL AS GdaColumn PTR) AS const gchar PTR
DECLARE FUNCTION gda_column_get_position(BYVAL AS GdaColumn PTR) AS gint
DECLARE SUB gda_column_set_allow_null(BYVAL AS GdaColumn PTR, BYVAL AS gboolean)
DECLARE SUB gda_column_set_attribute(BYVAL AS GdaColumn PTR, BYVAL AS const gchar PTR, BYVAL AS const GValue PTR, BYVAL AS GDestroyNotify)
DECLARE SUB gda_column_set_auto_increment(BYVAL AS GdaColumn PTR, BYVAL AS gboolean)
DECLARE SUB gda_column_set_dbms_type(BYVAL AS GdaColumn PTR, BYVAL AS const gchar PTR)
DECLARE SUB gda_column_set_default_value(BYVAL AS GdaColumn PTR, BYVAL AS const GValue PTR)
DECLARE SUB gda_column_set_description(BYVAL AS GdaColumn PTR, BYVAL AS const gchar PTR)
DECLARE SUB gda_column_set_g_type(BYVAL AS GdaColumn PTR, BYVAL AS GType)
DECLARE SUB gda_column_set_name(BYVAL AS GdaColumn PTR, BYVAL AS const gchar PTR)
DECLARE SUB gda_column_set_position(BYVAL AS GdaColumn PTR, BYVAL AS gint)
TYPE _GdaColumnClass
  AS GObjectClass parent_class
  name_changed AS SUB CDECL(BYVAL AS GdaColumn PTR, BYVAL AS const gchar PTR)
  g_type_changed AS SUB CDECL(BYVAL AS GdaColumn PTR, BYVAL AS GType, BYVAL AS GType)
  _gda_reserved1 AS SUB CDECL()
  _gda_reserved2 AS SUB CDECL()
  _gda_reserved3 AS SUB CDECL()
  _gda_reserved4 AS SUB CDECL()
END TYPE
TYPE _GdaConfig
  AS GObject object
  AS GdaConfigPrivate PTR priv
END TYPE
DECLARE FUNCTION gda_config_get_type() AS GType
#DEFINE GDA_TYPE_CONFIG (gda_config_get_type())
#DEFINE GDA_CONFIG(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GDA_TYPE_CONFIG, GdaConfig))
#DEFINE GDA_CONFIG_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GDA_TYPE_CONFIG, GdaConfigClass))
#DEFINE GDA_IS_CONFIG(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GDA_TYPE_CONFIG))
#DEFINE GDA_IS_CLASS_CONFIG(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GDA_TYPE_CONFIG))
#DEFINE GDA_CONFIG_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GDA_TYPE_CONFIG, GdaConfigClass))
DECLARE FUNCTION gda_config_can_modify_system_config() AS gboolean
DECLARE FUNCTION gda_config_define_dsn(BYVAL AS const GdaDsnInfo PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION gda_config_dsn_needs_authentication(BYVAL AS const gchar PTR) AS gboolean
DECLARE FUNCTION gda_config_error_quark() AS GQuark
DECLARE FUNCTION gda_config_get() AS GdaConfig PTR
DECLARE FUNCTION gda_config_get_dsn_info(BYVAL AS const gchar PTR) AS GdaDsnInfo PTR
DECLARE FUNCTION gda_config_get_dsn_info_at_index(BYVAL AS gint) AS GdaDsnInfo PTR
DECLARE FUNCTION gda_config_get_dsn_info_index(BYVAL AS const gchar PTR) AS gint
DECLARE FUNCTION gda_config_get_nb_dsn() AS gint
DECLARE FUNCTION gda_config_get_provider(BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR) AS GdaServerProvider PTR
DECLARE FUNCTION gda_config_get_provider_info(BYVAL AS const gchar PTR) AS GdaProviderInfo PTR
DECLARE FUNCTION gda_config_list_dsn() AS GdaDataModel PTR
DECLARE FUNCTION gda_config_list_providers() AS GdaDataModel PTR
DECLARE FUNCTION gda_config_remove_dsn(BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR) AS gboolean
TYPE _GdaConfigClass
  AS GObjectClass object_class
  dsn_added AS SUB CDECL(BYVAL AS GdaConfig PTR, BYVAL AS GdaDsnInfo PTR)
  dsn_to_be_removed AS SUB CDECL(BYVAL AS GdaConfig PTR, BYVAL AS GdaDsnInfo PTR)
  dsn_removed AS SUB CDECL(BYVAL AS GdaConfig PTR, BYVAL AS GdaDsnInfo PTR)
  dsn_changed AS SUB CDECL(BYVAL AS GdaConfig PTR, BYVAL AS GdaDsnInfo PTR)
  _gda_reserved1 AS SUB CDECL()
  _gda_reserved2 AS SUB CDECL()
  _gda_reserved3 AS SUB CDECL()
  _gda_reserved4 AS SUB CDECL()
END TYPE
TYPE _GdaConnection
  AS GObject object
  AS GdaConnectionPrivate PTR priv
END TYPE
DECLARE FUNCTION gda_connection_get_type() AS GType
#DEFINE GDA_TYPE_CONNECTION (gda_connection_get_type())
#DEFINE GDA_CONNECTION(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GDA_TYPE_CONNECTION, GdaConnection))
#DEFINE GDA_CONNECTION_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GDA_TYPE_CONNECTION, GdaConnectionClass))
#DEFINE GDA_IS_CONNECTION(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GDA_TYPE_CONNECTION))
#DEFINE GDA_IS_CLASS_CONNECTION(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GDA_TYPE_CONNECTION))
#DEFINE GDA_CONNECTION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GDA_TYPE_CONNECTION, GdaConnectionClass))
DECLARE FUNCTION gda_connection_new_from_dsn(BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS GdaConnectionOptions, BYVAL AS GError PTR PTR) AS GdaConnection PTR
DECLARE FUNCTION gda_connection_new_from_string(BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS GdaConnectionOptions, BYVAL AS GError PTR PTR) AS GdaConnection PTR
DECLARE FUNCTION gda_connection_error_quark() AS GQuark
DECLARE FUNCTION gda_connection_open_from_dsn(BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS GdaConnectionOptions, BYVAL AS GError PTR PTR) AS GdaConnection PTR
DECLARE FUNCTION gda_connection_open_from_string(BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS GdaConnectionOptions, BYVAL AS GError PTR PTR) AS GdaConnection PTR
DECLARE FUNCTION gda_connection_open_sqlite(BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS gboolean) AS GdaConnection PTR
DECLARE SUB gda_connection_string_split(BYVAL AS const gchar PTR, BYVAL AS gchar PTR PTR, BYVAL AS gchar PTR PTR, BYVAL AS gchar PTR PTR, BYVAL AS gchar PTR PTR)
DECLARE SUB gda_connection_add_event(BYVAL AS GdaConnection PTR, BYVAL AS GdaConnectionEvent PTR)
DECLARE FUNCTION gda_connection_add_event_string(BYVAL AS GdaConnection PTR, BYVAL AS const gchar PTR, ...) AS GdaConnectionEvent PTR
DECLARE SUB gda_connection_add_prepared_statement(BYVAL AS GdaConnection PTR, BYVAL AS GdaStatement PTR, BYVAL AS GdaPStmt PTR)
DECLARE FUNCTION gda_connection_add_savepoint(BYVAL AS GdaConnection PTR, BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION gda_connection_async_cancel(BYVAL AS GdaConnection PTR, BYVAL AS guint, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION gda_connection_async_fetch_result(BYVAL AS GdaConnection PTR, BYVAL AS guint, BYVAL AS GdaSet PTR PTR, BYVAL AS GError PTR PTR) AS GObject PTR
DECLARE FUNCTION gda_connection_async_statement_execute(BYVAL AS GdaConnection PTR, BYVAL AS GdaStatement PTR, BYVAL AS GdaSet PTR, BYVAL AS GdaStatementModelUsage, BYVAL AS GType PTR, BYVAL AS gboolean, BYVAL AS GError PTR PTR) AS guint
DECLARE FUNCTION gda_connection_batch_execute(BYVAL AS GdaConnection PTR, BYVAL AS GdaBatch PTR, BYVAL AS GdaSet PTR, BYVAL AS GdaStatementModelUsage, BYVAL AS GError PTR PTR) AS GSList PTR
DECLARE FUNCTION gda_connection_begin_transaction(BYVAL AS GdaConnection PTR, BYVAL AS const gchar PTR, BYVAL AS GdaTransactionIsolation, BYVAL AS GError PTR PTR) AS gboolean
DECLARE SUB gda_connection_clear_events_list(BYVAL AS GdaConnection PTR)
DECLARE SUB gda_connection_close(BYVAL AS GdaConnection PTR)
DECLARE SUB gda_connection_close_no_warning(BYVAL AS GdaConnection PTR)
DECLARE FUNCTION gda_connection_commit_transaction(BYVAL AS GdaConnection PTR, BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION gda_connection_create_operation(BYVAL AS GdaConnection PTR, BYVAL AS GdaServerOperationType, BYVAL AS GdaSet PTR, BYVAL AS GError PTR PTR) AS GdaServerOperation PTR
DECLARE FUNCTION gda_connection_create_parser(BYVAL AS GdaConnection PTR) AS GdaSqlParser PTR
DECLARE SUB gda_connection_del_prepared_statement(BYVAL AS GdaConnection PTR, BYVAL AS GdaStatement PTR)
DECLARE FUNCTION gda_connection_delete_row_from_table(BYVAL AS GdaConnection PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS GValue PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION gda_connection_delete_savepoint(BYVAL AS GdaConnection PTR, BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION gda_connection_execute_non_select_command(BYVAL AS GdaConnection PTR, BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR) AS gint
DECLARE FUNCTION gda_connection_execute_select_command(BYVAL AS GdaConnection PTR, BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR) AS GdaDataModel PTR
DECLARE FUNCTION gda_connection_get_authentication(BYVAL AS GdaConnection PTR) AS const gchar PTR
DECLARE FUNCTION gda_connection_get_cnc_string(BYVAL AS GdaConnection PTR) AS const gchar PTR
DECLARE FUNCTION gda_connection_get_date_format(BYVAL AS GdaConnection PTR, BYVAL AS GDateDMY PTR, BYVAL AS GDateDMY PTR, BYVAL AS GDateDMY PTR, BYVAL AS gchar PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION gda_connection_get_dsn(BYVAL AS GdaConnection PTR) AS const gchar PTR
DECLARE FUNCTION gda_connection_get_events(BYVAL AS GdaConnection PTR) AS const GList PTR
DECLARE FUNCTION gda_connection_get_meta_store(BYVAL AS GdaConnection PTR) AS GdaMetaStore PTR
DECLARE FUNCTION gda_connection_get_meta_store_data(BYVAL AS GdaConnection PTR, BYVAL AS GdaConnectionMetaType, BYVAL AS GError PTR PTR, BYVAL AS gint, ...) AS GdaDataModel PTR
DECLARE FUNCTION gda_connection_get_meta_store_data_v(BYVAL AS GdaConnection PTR, BYVAL AS GdaConnectionMetaType, BYVAL AS GList PTR, BYVAL AS GError PTR PTR) AS GdaDataModel PTR
DECLARE FUNCTION gda_connection_get_options(BYVAL AS GdaConnection PTR) AS GdaConnectionOptions
DECLARE FUNCTION gda_connection_get_prepared_statement(BYVAL AS GdaConnection PTR, BYVAL AS GdaStatement PTR) AS GdaPStmt PTR
DECLARE FUNCTION gda_connection_get_provider(BYVAL AS GdaConnection PTR) AS GdaServerProvider PTR
DECLARE FUNCTION gda_connection_get_provider_name(BYVAL AS GdaConnection PTR) AS const gchar PTR
DECLARE FUNCTION gda_connection_get_transaction_status(BYVAL AS GdaConnection PTR) AS GdaTransactionStatus PTR
DECLARE FUNCTION gda_connection_insert_row_into_table(BYVAL AS GdaConnection PTR, BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR, ...) AS gboolean
DECLARE FUNCTION gda_connection_insert_row_into_table_v(BYVAL AS GdaConnection PTR, BYVAL AS const gchar PTR, BYVAL AS GSList PTR, BYVAL AS GSList PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE SUB gda_connection_internal_change_transaction_state(BYVAL AS GdaConnection PTR, BYVAL AS GdaTransactionStatusState)
DECLARE FUNCTION gda_connection_internal_get_provider_data(BYVAL AS GdaConnection PTR) AS gpointer
DECLARE FUNCTION gda_connection_internal_get_provider_data_error(BYVAL AS GdaConnection PTR, BYVAL AS GError PTR PTR) AS gpointer
DECLARE SUB gda_connection_internal_reset_transaction_status(BYVAL AS GdaConnection PTR)
DECLARE SUB gda_connection_internal_savepoint_added(BYVAL AS GdaConnection PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR)
DECLARE SUB gda_connection_internal_savepoint_removed(BYVAL AS GdaConnection PTR, BYVAL AS const gchar PTR)
DECLARE SUB gda_connection_internal_savepoint_rolledback(BYVAL AS GdaConnection PTR, BYVAL AS const gchar PTR)
DECLARE SUB gda_connection_internal_set_provider_data(BYVAL AS GdaConnection PTR, BYVAL AS gpointer, BYVAL AS GDestroyNotify)
DECLARE SUB gda_connection_internal_statement_executed(BYVAL AS GdaConnection PTR, BYVAL AS GdaStatement PTR, BYVAL AS GdaSet PTR, BYVAL AS GdaConnectionEvent PTR)
DECLARE SUB gda_connection_internal_transaction_committed(BYVAL AS GdaConnection PTR, BYVAL AS const gchar PTR)
DECLARE SUB gda_connection_internal_transaction_rolledback(BYVAL AS GdaConnection PTR, BYVAL AS const gchar PTR)
DECLARE SUB gda_connection_internal_transaction_started(BYVAL AS GdaConnection PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS GdaTransactionIsolation)
DECLARE FUNCTION gda_connection_is_opened(BYVAL AS GdaConnection PTR) AS gboolean
DECLARE FUNCTION gda_connection_open(BYVAL AS GdaConnection PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION gda_connection_parse_sql_string(BYVAL AS GdaConnection PTR, BYVAL AS const gchar PTR, BYVAL AS GdaSet PTR PTR, BYVAL AS GError PTR PTR) AS GdaStatement PTR
DECLARE FUNCTION gda_connection_perform_operation(BYVAL AS GdaConnection PTR, BYVAL AS GdaServerOperation PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION gda_connection_point_available_event(BYVAL AS GdaConnection PTR, BYVAL AS GdaConnectionEventType) AS GdaConnectionEvent PTR
DECLARE FUNCTION gda_connection_quote_sql_identifier(BYVAL AS GdaConnection PTR, BYVAL AS const gchar PTR) AS gchar PTR
DECLARE FUNCTION gda_connection_repetitive_statement_execute(BYVAL AS GdaConnection PTR, BYVAL AS GdaRepetitiveStatement PTR, BYVAL AS GdaStatementModelUsage, BYVAL AS GType PTR, BYVAL AS gboolean, BYVAL AS GError PTR PTR) AS GSList PTR
DECLARE FUNCTION gda_connection_rollback_savepoint(BYVAL AS GdaConnection PTR, BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION gda_connection_rollback_transaction(BYVAL AS GdaConnection PTR, BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION gda_connection_statement_execute(BYVAL AS GdaConnection PTR, BYVAL AS GdaStatement PTR, BYVAL AS GdaSet PTR, BYVAL AS GdaStatementModelUsage, BYVAL AS GdaSet PTR PTR, BYVAL AS GError PTR PTR) AS GObject PTR
DECLARE FUNCTION gda_connection_statement_execute_non_select(BYVAL AS GdaConnection PTR, BYVAL AS GdaStatement PTR, BYVAL AS GdaSet PTR, BYVAL AS GdaSet PTR PTR, BYVAL AS GError PTR PTR) AS gint
DECLARE FUNCTION gda_connection_statement_execute_select(BYVAL AS GdaConnection PTR, BYVAL AS GdaStatement PTR, BYVAL AS GdaSet PTR, BYVAL AS GError PTR PTR) AS GdaDataModel PTR
DECLARE FUNCTION gda_connection_statement_execute_select_full(BYVAL AS GdaConnection PTR, BYVAL AS GdaStatement PTR, BYVAL AS GdaSet PTR, BYVAL AS GdaStatementModelUsage, BYVAL AS GType PTR, BYVAL AS GError PTR PTR) AS GdaDataModel PTR
DECLARE FUNCTION gda_connection_statement_execute_select_fullv(BYVAL AS GdaConnection PTR, BYVAL AS GdaStatement PTR, BYVAL AS GdaSet PTR, BYVAL AS GdaStatementModelUsage, BYVAL AS GError PTR PTR, ...) AS GdaDataModel PTR
DECLARE FUNCTION gda_connection_statement_prepare(BYVAL AS GdaConnection PTR, BYVAL AS GdaStatement PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION gda_connection_statement_to_sql(BYVAL AS GdaConnection PTR, BYVAL AS GdaStatement PTR, BYVAL AS GdaSet PTR, BYVAL AS GdaStatementSqlFlag, BYVAL AS GSList PTR PTR, BYVAL AS GError PTR PTR) AS gchar PTR
DECLARE FUNCTION gda_connection_supports_feature(BYVAL AS GdaConnection PTR, BYVAL AS GdaConnectionFeature) AS gboolean
DECLARE FUNCTION gda_connection_update_meta_store(BYVAL AS GdaConnection PTR, BYVAL AS GdaMetaContext PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION gda_connection_update_row_in_table(BYVAL AS GdaConnection PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS GValue PTR, BYVAL AS GError PTR PTR, ...) AS gboolean
DECLARE FUNCTION gda_connection_update_row_in_table_v(BYVAL AS GdaConnection PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS GValue PTR, BYVAL AS GSList PTR, BYVAL AS GSList PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION gda_connection_value_to_sql_string(BYVAL AS GdaConnection PTR, BYVAL AS GValue PTR) AS gchar PTR
TYPE _GdaConnectionClass
  AS GObjectClass object_class
  error AS SUB CDECL(BYVAL AS GdaConnection PTR, BYVAL AS GdaConnectionEvent PTR)
  conn_opened AS SUB CDECL(BYVAL AS GdaConnection PTR)
  conn_to_close AS SUB CDECL(BYVAL AS GdaConnection PTR)
  conn_closed AS SUB CDECL(BYVAL AS GdaConnection PTR)
  dsn_changed AS SUB CDECL(BYVAL AS GdaConnection PTR)
  transaction_status_changed AS SUB CDECL(BYVAL AS GdaConnection PTR)
  _gda_reserved1 AS SUB CDECL()
  _gda_reserved2 AS SUB CDECL()
  _gda_reserved3 AS SUB CDECL()
  _gda_reserved4 AS SUB CDECL()
END TYPE
TYPE _GdaConnectionEvent
  AS GObject object
  AS GdaConnectionEventPrivate PTR priv
END TYPE
DECLARE FUNCTION gda_connection_event_get_type() AS GType
#DEFINE GDA_TYPE_CONNECTION_EVENT (gda_connection_event_get_type())
#DEFINE GDA_CONNECTION_EVENT(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GDA_TYPE_CONNECTION_EVENT, GdaConnectionEvent))
#DEFINE GDA_CONNECTION_EVENT_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GDA_TYPE_CONNECTION_EVENT, GdaConnectionEventClass))
#DEFINE GDA_IS_CONNECTION_EVENT(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GDA_TYPE_CONNECTION_EVENT))
#DEFINE GDA_IS_CLASS_CONNECTION_EVENT(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GDA_TYPE_CONNECTION_EVENT))
#DEFINE GDA_CONNECTION_EVENT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GDA_TYPE_CONNECTION_EVENT, GdaConnectionEventClass))
DECLARE FUNCTION gda_connection_event_get_code(BYVAL AS GdaConnectionEvent PTR) AS glong
DECLARE FUNCTION gda_connection_event_get_description(BYVAL AS GdaConnectionEvent PTR) AS const gchar PTR
DECLARE FUNCTION gda_connection_event_get_event_type(BYVAL AS GdaConnectionEvent PTR) AS GdaConnectionEventType
DECLARE FUNCTION gda_connection_event_get_gda_code(BYVAL AS GdaConnectionEvent PTR) AS GdaConnectionEventCode
DECLARE FUNCTION gda_connection_event_get_source(BYVAL AS GdaConnectionEvent PTR) AS const gchar PTR
DECLARE FUNCTION gda_connection_event_get_sqlstate(BYVAL AS GdaConnectionEvent PTR) AS const gchar PTR
DECLARE SUB gda_connection_event_set_code(BYVAL AS GdaConnectionEvent PTR, BYVAL AS glong)
DECLARE SUB gda_connection_event_set_description(BYVAL AS GdaConnectionEvent PTR, BYVAL AS const gchar PTR)
DECLARE SUB gda_connection_event_set_event_type(BYVAL AS GdaConnectionEvent PTR, BYVAL AS GdaConnectionEventType)
DECLARE SUB gda_connection_event_set_gda_code(BYVAL AS GdaConnectionEvent PTR, BYVAL AS GdaConnectionEventCode)
DECLARE SUB gda_connection_event_set_source(BYVAL AS GdaConnectionEvent PTR, BYVAL AS const gchar PTR)
DECLARE SUB gda_connection_event_set_sqlstate(BYVAL AS GdaConnectionEvent PTR, BYVAL AS const gchar PTR)
TYPE _GdaConnectionEventClass
  AS GObjectClass parent_class
  _gda_reserved1 AS SUB CDECL()
  _gda_reserved2 AS SUB CDECL()
  _gda_reserved3 AS SUB CDECL()
  _gda_reserved4 AS SUB CDECL()
END TYPE
TYPE _GdaDataAccessWrapper
  AS GObject object
  AS GdaDataAccessWrapperPrivate PTR priv
END TYPE
DECLARE FUNCTION gda_data_access_wrapper_get_type() AS GType
#DEFINE GDA_TYPE_DATA_ACCESS_WRAPPER (gda_data_access_wrapper_get_type())
#DEFINE GDA_DATA_ACCESS_WRAPPER(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GDA_TYPE_DATA_ACCESS_WRAPPER, GdaDataAccessWrapper))
#DEFINE GDA_DATA_ACCESS_WRAPPER_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GDA_TYPE_DATA_ACCESS_WRAPPER, GdaDataAccessWrapperClass))
#DEFINE GDA_IS_DATA_ACCESS_WRAPPER(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GDA_TYPE_DATA_ACCESS_WRAPPER))
#DEFINE GDA_IS_CLASS_DATA_ACCESS_WRAPPER(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GDA_TYPE_DATA_ACCESS_WRAPPER))
#DEFINE GDA_DATA_ACCESS_WRAPPER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GDA_TYPE_DATA_ACCESS_WRAPPER, GdaDataAccessWrapperClass))
DECLARE FUNCTION gda_data_access_wrapper_new(BYVAL AS GdaDataModel PTR) AS GdaDataModel PTR
DECLARE FUNCTION gda_data_access_wrapper_set_mapping(BYVAL AS GdaDataAccessWrapper PTR, BYVAL AS const gint PTR, BYVAL AS gint) AS gboolean
TYPE _GdaDataAccessWrapperClass
  AS GObjectClass parent_class
  _gda_reserved1 AS SUB CDECL()
  _gda_reserved2 AS SUB CDECL()
  _gda_reserved3 AS SUB CDECL()
  _gda_reserved4 AS SUB CDECL()
END TYPE
TYPE _GdaDataComparator
  AS GObject object
  AS GdaDataComparatorPrivate PTR priv
END TYPE
DECLARE FUNCTION gda_data_comparator_get_type() AS GType
#DEFINE GDA_TYPE_DATA_COMPARATOR (gda_data_comparator_get_type())
#DEFINE GDA_DATA_COMPARATOR(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GDA_TYPE_DATA_COMPARATOR, GdaDataComparator))
#DEFINE GDA_DATA_COMPARATOR_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GDA_TYPE_DATA_COMPARATOR, GdaDataComparatorClass))
#DEFINE GDA_IS_DATA_COMPARATOR(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GDA_TYPE_DATA_COMPARATOR))
#DEFINE GDA_IS_CLASS_DATA_COMPARATOR(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GDA_TYPE_DATA_COMPARATOR))
#DEFINE GDA_DATA_COMPARATOR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GDA_TYPE_DATA_COMPARATOR, GdaDataComparatorClass))
DECLARE FUNCTION gda_data_comparator_new(BYVAL AS GdaDataModel PTR, BYVAL AS GdaDataModel PTR) AS GObject PTR
DECLARE FUNCTION gda_data_comparator_error_quark() AS GQuark
DECLARE FUNCTION gda_data_comparator_compute_diff(BYVAL AS GdaDataComparator PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION gda_data_comparator_get_diff(BYVAL AS GdaDataComparator PTR, BYVAL AS gint) AS const GdaDiff PTR
DECLARE FUNCTION gda_data_comparator_get_n_diffs(BYVAL AS GdaDataComparator PTR) AS gint
DECLARE SUB gda_data_comparator_set_key_columns(BYVAL AS GdaDataComparator PTR, BYVAL AS const gint PTR, BYVAL AS gint)
TYPE _GdaDataComparatorClass
  AS GObjectClass parent_class
  diff_computed AS FUNCTION CDECL(BYVAL AS GdaDataComparator PTR, BYVAL AS GdaDiff PTR) AS gboolean
  _gda_reserved1 AS SUB CDECL()
  _gda_reserved2 AS SUB CDECL()
  _gda_reserved3 AS SUB CDECL()
  _gda_reserved4 AS SUB CDECL()
END TYPE
DECLARE FUNCTION gda_data_handler_get_type() AS GType
#DEFINE GDA_TYPE_DATA_HANDLER (gda_data_handler_get_type())
#DEFINE GDA_DATA_HANDLER(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GDA_TYPE_DATA_HANDLER, GdaDataHandler))
#DEFINE GDA_DATA_HANDLER_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GDA_TYPE_DATA_HANDLER, GdaDataHandlerIface))
#DEFINE GDA_IS_DATA_HANDLER(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GDA_TYPE_DATA_HANDLER))
#DEFINE GDA_DATA_HANDLER_GET_IFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE((obj), GDA_TYPE_DATA_HANDLER, GdaDataHandlerIface))
DECLARE FUNCTION gda_data_handler_get_default(BYVAL AS GType) AS GdaDataHandler PTR
DECLARE FUNCTION gda_data_handler_accepts_g_type(BYVAL AS GdaDataHandler PTR, BYVAL AS GType) AS gboolean
DECLARE FUNCTION gda_data_handler_get_descr(BYVAL AS GdaDataHandler PTR) AS const gchar PTR
DECLARE FUNCTION gda_data_handler_get_sane_init_value(BYVAL AS GdaDataHandler PTR, BYVAL AS GType) AS GValue PTR
DECLARE FUNCTION gda_data_handler_get_sql_from_value(BYVAL AS GdaDataHandler PTR, BYVAL AS const GValue PTR) AS gchar PTR
DECLARE FUNCTION gda_data_handler_get_str_from_value(BYVAL AS GdaDataHandler PTR, BYVAL AS const GValue PTR) AS gchar PTR
DECLARE FUNCTION gda_data_handler_get_value_from_sql(BYVAL AS GdaDataHandler PTR, BYVAL AS const gchar PTR, BYVAL AS GType) AS GValue PTR
DECLARE FUNCTION gda_data_handler_get_value_from_str(BYVAL AS GdaDataHandler PTR, BYVAL AS const gchar PTR, BYVAL AS GType) AS GValue PTR
TYPE _GdaDataHandlerIface
  AS GTypeInterface g_iface
  get_sql_from_value AS FUNCTION CDECL(BYVAL AS GdaDataHandler PTR, BYVAL AS const GValue PTR) AS gchar PTR
  get_str_from_value AS FUNCTION CDECL(BYVAL AS GdaDataHandler PTR, BYVAL AS const GValue PTR) AS gchar PTR
  get_value_from_sql AS FUNCTION CDECL(BYVAL AS GdaDataHandler PTR, BYVAL AS const gchar PTR, BYVAL AS GType) AS GValue PTR
  get_value_from_str AS FUNCTION CDECL(BYVAL AS GdaDataHandler PTR, BYVAL AS const gchar PTR, BYVAL AS GType) AS GValue PTR
  get_sane_init_value AS FUNCTION CDECL(BYVAL AS GdaDataHandler PTR, BYVAL AS GType) AS GValue PTR
  accepts_g_type AS FUNCTION CDECL(BYVAL AS GdaDataHandler PTR, BYVAL AS GType) AS gboolean
  get_descr AS FUNCTION CDECL(BYVAL AS GdaDataHandler PTR) AS const gchar PTR
END TYPE
DECLARE FUNCTION gda_data_model_get_type() AS GType
#DEFINE GDA_TYPE_DATA_MODEL (gda_data_model_get_type())
#DEFINE GDA_DATA_MODEL(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GDA_TYPE_DATA_MODEL, GdaDataModel))
#DEFINE GDA_DATA_MODEL_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GDA_TYPE_DATA_MODEL, GdaDataModelIface))
#DEFINE GDA_IS_DATA_MODEL(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GDA_TYPE_DATA_MODEL))
#DEFINE GDA_DATA_MODEL_GET_IFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE((obj), GDA_TYPE_DATA_MODEL, GdaDataModelIface))
DECLARE FUNCTION gda_data_model_error_quark() AS GQuark
DECLARE FUNCTION gda_data_model_add_data_from_xml_node(BYVAL AS GdaDataModel PTR, BYVAL AS any ptr /' xmlNodePtr '/, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION gda_data_model_append_row(BYVAL AS GdaDataModel PTR, BYVAL AS GError PTR PTR) AS gint
DECLARE FUNCTION gda_data_model_append_values(BYVAL AS GdaDataModel PTR, BYVAL AS const GList PTR, BYVAL AS GError PTR PTR) AS gint
DECLARE FUNCTION gda_data_model_array_copy_model(BYVAL AS GdaDataModel PTR, BYVAL AS GError PTR PTR) AS GdaDataModelArray PTR
DECLARE FUNCTION gda_data_model_array_copy_model_ext(BYVAL AS GdaDataModel PTR, BYVAL AS gint, BYVAL AS gint PTR, BYVAL AS GError PTR PTR) AS GdaDataModelArray PTR
DECLARE FUNCTION gda_data_model_create_iter(BYVAL AS GdaDataModel PTR) AS GdaDataModelIter PTR
DECLARE FUNCTION gda_data_model_describe_column(BYVAL AS GdaDataModel PTR, BYVAL AS gint) AS GdaColumn PTR
DECLARE SUB gda_data_model_dump(BYVAL AS GdaDataModel PTR, BYVAL AS FILE PTR)
DECLARE FUNCTION gda_data_model_dump_as_string(BYVAL AS GdaDataModel PTR) AS gchar PTR
DECLARE FUNCTION gda_data_model_export_to_file(BYVAL AS GdaDataModel PTR, BYVAL AS GdaDataModelIOFormat, BYVAL AS const gchar PTR, BYVAL AS const gint PTR, BYVAL AS gint, BYVAL AS const gint PTR, BYVAL AS gint, BYVAL AS GdaSet PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION gda_data_model_export_to_string(BYVAL AS GdaDataModel PTR, BYVAL AS GdaDataModelIOFormat, BYVAL AS const gint PTR, BYVAL AS gint, BYVAL AS const gint PTR, BYVAL AS gint, BYVAL AS GdaSet PTR) AS gchar PTR
DECLARE SUB gda_data_model_freeze(BYVAL AS GdaDataModel PTR)
DECLARE FUNCTION gda_data_model_get_access_flags(BYVAL AS GdaDataModel PTR) AS GdaDataModelAccessFlags
DECLARE FUNCTION gda_data_model_get_attributes_at(BYVAL AS GdaDataModel PTR, BYVAL AS gint, BYVAL AS gint) AS GdaValueAttribute
DECLARE FUNCTION gda_data_model_get_column_index(BYVAL AS GdaDataModel PTR, BYVAL AS const gchar PTR) AS gint
DECLARE FUNCTION gda_data_model_get_column_name(BYVAL AS GdaDataModel PTR, BYVAL AS gint) AS const gchar PTR
DECLARE FUNCTION gda_data_model_get_column_title(BYVAL AS GdaDataModel PTR, BYVAL AS gint) AS const gchar PTR
DECLARE FUNCTION gda_data_model_get_exceptions(BYVAL AS GdaDataModel PTR) AS GError PTR PTR
DECLARE FUNCTION gda_data_model_get_n_columns(BYVAL AS GdaDataModel PTR) AS gint
DECLARE FUNCTION gda_data_model_get_n_rows(BYVAL AS GdaDataModel PTR) AS gint
DECLARE FUNCTION gda_data_model_get_notify(BYVAL AS GdaDataModel PTR) AS gboolean
DECLARE FUNCTION gda_data_model_get_row_from_values(BYVAL AS GdaDataModel PTR, BYVAL AS GSList PTR, BYVAL AS gint PTR) AS gint
DECLARE FUNCTION gda_data_model_get_typed_value_at(BYVAL AS GdaDataModel PTR, BYVAL AS gint, BYVAL AS gint, BYVAL AS GType, BYVAL AS gboolean, BYVAL AS GError PTR PTR) AS const GValue PTR
DECLARE FUNCTION gda_data_model_get_value_at(BYVAL AS GdaDataModel PTR, BYVAL AS gint, BYVAL AS gint, BYVAL AS GError PTR PTR) AS const GValue PTR
DECLARE FUNCTION gda_data_model_import_from_file(BYVAL AS GdaDataModel PTR, BYVAL AS const gchar PTR, BYVAL AS GHashTable PTR, BYVAL AS GdaSet PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION gda_data_model_import_from_model(BYVAL AS GdaDataModel PTR, BYVAL AS GdaDataModel PTR, BYVAL AS gboolean, BYVAL AS GHashTable PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION gda_data_model_import_from_string(BYVAL AS GdaDataModel PTR, BYVAL AS const gchar PTR, BYVAL AS GHashTable PTR, BYVAL AS GdaSet PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION gda_data_model_iter_at_row(BYVAL AS GdaDataModel PTR, BYVAL AS GdaDataModelIter PTR, BYVAL AS gint) AS gboolean
DECLARE FUNCTION gda_data_model_iter_move_next_default(BYVAL AS GdaDataModel PTR, BYVAL AS GdaDataModelIter PTR) AS gboolean
DECLARE FUNCTION gda_data_model_iter_move_prev_default(BYVAL AS GdaDataModel PTR, BYVAL AS GdaDataModelIter PTR) AS gboolean
DECLARE FUNCTION gda_data_model_iter_move_to_row_default(BYVAL AS GdaDataModel PTR, BYVAL AS GdaDataModelIter PTR, BYVAL AS gint) AS gboolean
DECLARE FUNCTION gda_data_model_iter_next(BYVAL AS GdaDataModel PTR, BYVAL AS GdaDataModelIter PTR) AS gboolean
DECLARE FUNCTION gda_data_model_iter_prev(BYVAL AS GdaDataModel PTR, BYVAL AS GdaDataModelIter PTR) AS gboolean
DECLARE FUNCTION gda_data_model_iter_set_value(BYVAL AS GdaDataModel PTR, BYVAL AS GdaDataModelIter PTR, BYVAL AS gint, BYVAL AS const GValue PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION gda_data_model_remove_row(BYVAL AS GdaDataModel PTR, BYVAL AS gint, BYVAL AS GError PTR PTR) AS gboolean
DECLARE SUB gda_data_model_reset(BYVAL AS GdaDataModel PTR)
DECLARE SUB gda_data_model_row_inserted(BYVAL AS GdaDataModel PTR, BYVAL AS gint)
DECLARE SUB gda_data_model_row_removed(BYVAL AS GdaDataModel PTR, BYVAL AS gint)
DECLARE SUB gda_data_model_row_updated(BYVAL AS GdaDataModel PTR, BYVAL AS gint)
DECLARE SUB gda_data_model_send_hint(BYVAL AS GdaDataModel PTR, BYVAL AS GdaDataModelHint, BYVAL AS const GValue PTR)
DECLARE SUB gda_data_model_set_column_name(BYVAL AS GdaDataModel PTR, BYVAL AS gint, BYVAL AS const gchar PTR)
DECLARE SUB gda_data_model_set_column_title(BYVAL AS GdaDataModel PTR, BYVAL AS gint, BYVAL AS const gchar PTR)
DECLARE SUB gda_data_model_set_notify(BYVAL AS GdaDataModel PTR, BYVAL AS gboolean)
DECLARE FUNCTION gda_data_model_set_value_at(BYVAL AS GdaDataModel PTR, BYVAL AS gint, BYVAL AS gint, BYVAL AS const GValue PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION gda_data_model_set_values(BYVAL AS GdaDataModel PTR, BYVAL AS gint, BYVAL AS GList PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE SUB gda_data_model_thaw(BYVAL AS GdaDataModel PTR)
TYPE _GdaDataModelArray
  AS GObject object
  AS GdaDataModelArrayPrivate PTR priv
END TYPE
DECLARE FUNCTION gda_data_model_array_get_type() AS GType
#DEFINE GDA_TYPE_DATA_MODEL_ARRAY (gda_data_model_array_get_type())
#DEFINE GDA_DATA_MODEL_ARRAY(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GDA_TYPE_DATA_MODEL_ARRAY, GdaDataModelArray))
#DEFINE GDA_DATA_MODEL_ARRAY_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GDA_TYPE_DATA_MODEL_ARRAY, GdaDataModelArrayClass))
#DEFINE GDA_IS_DATA_MODEL_ARRAY(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GDA_TYPE_DATA_MODEL_ARRAY))
#DEFINE GDA_IS_CLASS_DATA_MODEL_ARRAY(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GDA_TYPE_DATA_MODEL_ARRAY))
#DEFINE GDA_DATA_MODEL_ARRAY_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GDA_TYPE_DATA_MODEL_ARRAY, GdaDataModelArrayClass))
DECLARE FUNCTION gda_data_model_array_new(BYVAL AS gint) AS GdaDataModel PTR
DECLARE FUNCTION gda_data_model_array_new_with_g_types(BYVAL AS gint, ...) AS GdaDataModel PTR
DECLARE FUNCTION gda_data_model_array_new_with_g_types_v(BYVAL AS gint, BYVAL AS GType PTR) AS GdaDataModel PTR
DECLARE SUB gda_data_model_array_clear(BYVAL AS GdaDataModelArray PTR)
DECLARE FUNCTION gda_data_model_array_get_row(BYVAL AS GdaDataModelArray PTR, BYVAL AS gint, BYVAL AS GError PTR PTR) AS GdaRow PTR
DECLARE SUB gda_data_model_array_set_n_columns(BYVAL AS GdaDataModelArray PTR, BYVAL AS gint)
TYPE _GdaDataModelArrayClass
  AS GObjectClass parent_class
  _gda_reserved1 AS SUB CDECL()
  _gda_reserved2 AS SUB CDECL()
  _gda_reserved3 AS SUB CDECL()
  _gda_reserved4 AS SUB CDECL()
END TYPE
TYPE _GdaDataModelDir
  AS GObject object
  AS GdaDataModelDirPrivate PTR priv
END TYPE
DECLARE FUNCTION gda_data_model_dir_get_type() AS GType
#DEFINE GDA_TYPE_DATA_MODEL_DIR (gda_data_model_dir_get_type())
#DEFINE GDA_DATA_MODEL_DIR(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GDA_TYPE_DATA_MODEL_DIR, GdaDataModelDir))
#DEFINE GDA_DATA_MODEL_DIR_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GDA_TYPE_DATA_MODEL_DIR, GdaDataModelDirClass))
#DEFINE GDA_IS_DATA_MODEL_DIR(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GDA_TYPE_DATA_MODEL_DIR))
#DEFINE GDA_IS_CLASS_DATA_MODEL_DIR(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GDA_TYPE_DATA_MODEL_DIR))
#DEFINE GDA_DATA_MODEL_DIR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GDA_TYPE_DATA_MODEL_DIR, GdaDataModelDirClass))
DECLARE FUNCTION gda_data_model_dir_new(BYVAL AS const gchar PTR) AS GdaDataModel PTR
DECLARE SUB gda_data_model_dir_clean_errors(BYVAL AS GdaDataModelDir PTR)
DECLARE FUNCTION gda_data_model_dir_get_errors(BYVAL AS GdaDataModelDir PTR) AS const GSList PTR
TYPE _GdaDataModelDirClass
  AS GObjectClass parent_class
  _gda_reserved1 AS SUB CDECL()
  _gda_reserved2 AS SUB CDECL()
  _gda_reserved3 AS SUB CDECL()
  _gda_reserved4 AS SUB CDECL()
END TYPE
TYPE _GdaDataModelIface
  AS GTypeInterface g_iface
  i_get_n_rows AS FUNCTION CDECL(BYVAL AS GdaDataModel PTR) AS gint
  i_get_n_columns AS FUNCTION CDECL(BYVAL AS GdaDataModel PTR) AS gint
  i_describe_column AS FUNCTION CDECL(BYVAL AS GdaDataModel PTR, BYVAL AS gint) AS GdaColumn PTR
  i_get_access_flags AS FUNCTION CDECL(BYVAL AS GdaDataModel PTR) AS GdaDataModelAccessFlags
  i_get_value_at AS FUNCTION CDECL(BYVAL AS GdaDataModel PTR, BYVAL AS gint, BYVAL AS gint, BYVAL AS GError PTR PTR) AS const GValue PTR
  i_get_attributes_at AS FUNCTION CDECL(BYVAL AS GdaDataModel PTR, BYVAL AS gint, BYVAL AS gint) AS GdaValueAttribute
  i_create_iter AS FUNCTION CDECL(BYVAL AS GdaDataModel PTR) AS GdaDataModelIter PTR
  i_iter_at_row AS FUNCTION CDECL(BYVAL AS GdaDataModel PTR, BYVAL AS GdaDataModelIter PTR, BYVAL AS gint) AS gboolean
  i_iter_next AS FUNCTION CDECL(BYVAL AS GdaDataModel PTR, BYVAL AS GdaDataModelIter PTR) AS gboolean
  i_iter_prev AS FUNCTION CDECL(BYVAL AS GdaDataModel PTR, BYVAL AS GdaDataModelIter PTR) AS gboolean
  i_set_value_at AS FUNCTION CDECL(BYVAL AS GdaDataModel PTR, BYVAL AS gint, BYVAL AS gint, BYVAL AS const GValue PTR, BYVAL AS GError PTR PTR) AS gboolean
  i_iter_set_value AS FUNCTION CDECL(BYVAL AS GdaDataModel PTR, BYVAL AS GdaDataModelIter PTR, BYVAL AS gint, BYVAL AS const GValue PTR, BYVAL AS GError PTR PTR) AS gboolean
  i_set_values AS FUNCTION CDECL(BYVAL AS GdaDataModel PTR, BYVAL AS gint, BYVAL AS GList PTR, BYVAL AS GError PTR PTR) AS gboolean
  i_append_values AS FUNCTION CDECL(BYVAL AS GdaDataModel PTR, BYVAL AS const GList PTR, BYVAL AS GError PTR PTR) AS gint
  i_append_row AS FUNCTION CDECL(BYVAL AS GdaDataModel PTR, BYVAL AS GError PTR PTR) AS gint
  i_remove_row AS FUNCTION CDECL(BYVAL AS GdaDataModel PTR, BYVAL AS gint, BYVAL AS GError PTR PTR) AS gboolean
  i_find_row AS FUNCTION CDECL(BYVAL AS GdaDataModel PTR, BYVAL AS GSList PTR, BYVAL AS gint PTR) AS gint
  i_set_notify AS SUB CDECL(BYVAL AS GdaDataModel PTR, BYVAL AS gboolean)
  i_get_notify AS FUNCTION CDECL(BYVAL AS GdaDataModel PTR) AS gboolean
  i_send_hint AS SUB CDECL(BYVAL AS GdaDataModel PTR, BYVAL AS GdaDataModelHint, BYVAL AS const GValue PTR)
  row_inserted AS SUB CDECL(BYVAL AS GdaDataModel PTR, BYVAL AS gint)
  row_updated AS SUB CDECL(BYVAL AS GdaDataModel PTR, BYVAL AS gint)
  row_removed AS SUB CDECL(BYVAL AS GdaDataModel PTR, BYVAL AS gint)
  changed AS SUB CDECL(BYVAL AS GdaDataModel PTR)
  reset AS SUB CDECL(BYVAL AS GdaDataModel PTR)
  access_changed AS SUB CDECL(BYVAL AS GdaDataModel PTR)
  i_get_exceptions AS FUNCTION CDECL(BYVAL AS GdaDataModel PTR) AS GError PTR PTR
END TYPE
TYPE _GdaDataModelImport
  AS GObject object
  AS GdaDataModelImportPrivate PTR priv
END TYPE
DECLARE FUNCTION gda_data_model_import_get_type() AS GType
#DEFINE GDA_TYPE_DATA_MODEL_IMPORT (gda_data_model_import_get_type())
#DEFINE GDA_DATA_MODEL_IMPORT(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GDA_TYPE_DATA_MODEL_IMPORT, GdaDataModelImport))
#DEFINE GDA_DATA_MODEL_IMPORT_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GDA_TYPE_DATA_MODEL_IMPORT, GdaDataModelImportClass))
#DEFINE GDA_IS_DATA_MODEL_IMPORT(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GDA_TYPE_DATA_MODEL_IMPORT))
#DEFINE GDA_IS_CLASS_DATA_MODEL_IMPORT(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GDA_TYPE_DATA_MODEL_IMPORT))
#DEFINE GDA_DATA_MODEL_IMPORT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GDA_TYPE_DATA_MODEL_IMPORT, GdaDataModelImportClass))
DECLARE FUNCTION gda_data_model_import_new_file(BYVAL AS const gchar PTR, BYVAL AS gboolean, BYVAL AS GdaSet PTR) AS GdaDataModel PTR
DECLARE FUNCTION gda_data_model_import_new_mem(BYVAL AS const gchar PTR, BYVAL AS gboolean, BYVAL AS GdaSet PTR) AS GdaDataModel PTR
DECLARE FUNCTION gda_data_model_import_new_xml_node(BYVAL AS any ptr /' xmlNodePtr '/) AS GdaDataModel PTR
DECLARE SUB gda_data_model_import_clean_errors(BYVAL AS GdaDataModelImport PTR)
DECLARE FUNCTION gda_data_model_import_get_errors(BYVAL AS GdaDataModelImport PTR) AS GSList PTR
TYPE _GdaDataModelImportClass
  AS GObjectClass parent_class
  _gda_reserved1 AS SUB CDECL()
  _gda_reserved2 AS SUB CDECL()
  _gda_reserved3 AS SUB CDECL()
  _gda_reserved4 AS SUB CDECL()
END TYPE
TYPE _GdaDataModelIter
  AS GdaSet object
  AS GdaDataModelIterPrivate PTR priv
END TYPE
DECLARE FUNCTION gda_data_model_iter_get_type() AS GType
#DEFINE GDA_TYPE_DATA_MODEL_ITER (gda_data_model_iter_get_type())
#DEFINE GDA_DATA_MODEL_ITER(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GDA_TYPE_DATA_MODEL_ITER, GdaDataModelIter))
#DEFINE GDA_DATA_MODEL_ITER_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GDA_TYPE_DATA_MODEL_ITER, GdaDataModelIterClass))
#DEFINE GDA_IS_DATA_MODEL_ITER(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GDA_TYPE_DATA_MODEL_ITER))
#DEFINE GDA_IS_CLASS_DATA_MODEL_ITER(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GDA_TYPE_DATA_MODEL_ITER))
#DEFINE GDA_DATA_MODEL_ITER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GDA_TYPE_DATA_MODEL_ITER, GdaDataModelIterClass))
DECLARE FUNCTION gda_data_model_iter_error_quark() AS GQuark
DECLARE FUNCTION gda_data_model_iter_get_column_for_param(BYVAL AS GdaDataModelIter PTR, BYVAL AS GdaHolder PTR) AS gint
DECLARE FUNCTION gda_data_model_iter_get_holder_for_field(BYVAL AS GdaDataModelIter PTR, BYVAL AS gint) AS GdaHolder PTR
DECLARE FUNCTION gda_data_model_iter_get_row(BYVAL AS GdaDataModelIter PTR) AS gint
DECLARE FUNCTION gda_data_model_iter_get_value_at(BYVAL AS GdaDataModelIter PTR, BYVAL AS gint) AS const GValue PTR
DECLARE FUNCTION gda_data_model_iter_get_value_at_e(BYVAL AS GdaDataModelIter PTR, BYVAL AS gint, BYVAL AS GError PTR PTR) AS const GValue PTR
DECLARE FUNCTION gda_data_model_iter_get_value_for_field(BYVAL AS GdaDataModelIter PTR, BYVAL AS const gchar PTR) AS const GValue PTR
DECLARE SUB gda_data_model_iter_invalidate_contents(BYVAL AS GdaDataModelIter PTR)
DECLARE FUNCTION gda_data_model_iter_is_valid(BYVAL AS GdaDataModelIter PTR) AS gboolean
DECLARE FUNCTION gda_data_model_iter_move_next(BYVAL AS GdaDataModelIter PTR) AS gboolean
DECLARE FUNCTION gda_data_model_iter_move_prev(BYVAL AS GdaDataModelIter PTR) AS gboolean
DECLARE FUNCTION gda_data_model_iter_move_to_row(BYVAL AS GdaDataModelIter PTR, BYVAL AS gint) AS gboolean
DECLARE FUNCTION gda_data_model_iter_set_value_at(BYVAL AS GdaDataModelIter PTR, BYVAL AS gint, BYVAL AS const GValue PTR, BYVAL AS GError PTR PTR) AS gboolean
TYPE _GdaDataModelIterClass
  AS GdaSetClass parent_class
  row_changed AS SUB CDECL(BYVAL AS GdaDataModelIter PTR, BYVAL AS gint)
  end_of_data AS SUB CDECL(BYVAL AS GdaDataModelIter PTR)
  _gda_reserved1 AS SUB CDECL()
  _gda_reserved2 AS SUB CDECL()
  _gda_reserved3 AS SUB CDECL()
  _gda_reserved4 AS SUB CDECL()
END TYPE
TYPE _GdaDataPivot
  AS GObject object
  AS GdaDataPivotPrivate PTR priv
END TYPE
DECLARE FUNCTION gda_data_pivot_get_type() AS GType
#DEFINE GDA_TYPE_DATA_PIVOT (gda_data_pivot_get_type())
#DEFINE GDA_DATA_PIVOT(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GDA_TYPE_DATA_PIVOT, GdaDataPivot))
#DEFINE GDA_DATA_PIVOT_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GDA_TYPE_DATA_PIVOT, GdaDataPivotClass))
#DEFINE GDA_IS_DATA_PIVOT(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GDA_TYPE_DATA_PIVOT))
#DEFINE GDA_IS_CLASS_DATA_PIVOT(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GDA_TYPE_DATA_PIVOT))
#DEFINE GDA_DATA_PIVOT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GDA_TYPE_DATA_PIVOT, GdaDataPivotClass))
DECLARE FUNCTION gda_data_pivot_error_quark() AS GQuark
DECLARE FUNCTION gda_data_pivot_new(BYVAL AS GdaDataModel PTR) AS GdaDataModel PTR
DECLARE FUNCTION gda_data_pivot_add_data(BYVAL AS GdaDataPivot PTR, BYVAL AS GdaDataPivotAggregate, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION gda_data_pivot_add_field(BYVAL AS GdaDataPivot PTR, BYVAL AS GdaDataPivotFieldType, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION gda_data_pivot_populate(BYVAL AS GdaDataPivot PTR, BYVAL AS GError PTR PTR) AS gboolean
TYPE _GdaDataPivotClass
  AS GObjectClass parent_class
  _gda_reserved1 AS SUB CDECL()
  _gda_reserved2 AS SUB CDECL()
  _gda_reserved3 AS SUB CDECL()
  _gda_reserved4 AS SUB CDECL()
END TYPE
TYPE _GdaDataProxy
  AS GObject object
  AS GdaDataProxyPrivate PTR priv
END TYPE
DECLARE FUNCTION gda_data_proxy_get_type() AS GType
#DEFINE GDA_TYPE_DATA_PROXY (gda_data_proxy_get_type())
#DEFINE GDA_DATA_PROXY(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GDA_TYPE_DATA_PROXY, GdaDataProxy))
#DEFINE GDA_DATA_PROXY_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GDA_TYPE_DATA_PROXY, GdaDataProxyClass))
#DEFINE GDA_IS_DATA_PROXY(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GDA_TYPE_DATA_PROXY))
#DEFINE GDA_IS_CLASS_DATA_PROXY(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GDA_TYPE_DATA_PROXY))
#DEFINE GDA_DATA_PROXY_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GDA_TYPE_DATA_PROXY, GdaDataProxyClass))
DECLARE FUNCTION gda_data_proxy_new(BYVAL AS GdaDataModel PTR) AS GObject PTR
DECLARE FUNCTION gda_data_proxy_new_with_data_model(BYVAL AS GdaDataModel PTR) AS GdaDataProxy PTR
DECLARE FUNCTION gda_data_proxy_error_quark() AS GQuark
DECLARE SUB gda_data_proxy_alter_value_attributes(BYVAL AS GdaDataProxy PTR, BYVAL AS gint, BYVAL AS gint, BYVAL AS GdaValueAttribute)
DECLARE FUNCTION gda_data_proxy_apply_all_changes(BYVAL AS GdaDataProxy PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION gda_data_proxy_apply_row_changes(BYVAL AS GdaDataProxy PTR, BYVAL AS gint, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION gda_data_proxy_cancel_all_changes(BYVAL AS GdaDataProxy PTR) AS gboolean
DECLARE SUB gda_data_proxy_cancel_row_changes(BYVAL AS GdaDataProxy PTR, BYVAL AS gint, BYVAL AS gint)
DECLARE SUB gda_data_proxy_delete(BYVAL AS GdaDataProxy PTR, BYVAL AS gint)
DECLARE FUNCTION gda_data_proxy_get_filter_expr(BYVAL AS GdaDataProxy PTR) AS const gchar PTR
DECLARE FUNCTION gda_data_proxy_get_filtered_n_rows(BYVAL AS GdaDataProxy PTR) AS gint
DECLARE FUNCTION gda_data_proxy_get_n_modified_rows(BYVAL AS GdaDataProxy PTR) AS gint
DECLARE FUNCTION gda_data_proxy_get_n_new_rows(BYVAL AS GdaDataProxy PTR) AS gint
DECLARE FUNCTION gda_data_proxy_get_proxied_model(BYVAL AS GdaDataProxy PTR) AS GdaDataModel PTR
DECLARE FUNCTION gda_data_proxy_get_proxied_model_n_cols(BYVAL AS GdaDataProxy PTR) AS gint
DECLARE FUNCTION gda_data_proxy_get_proxied_model_n_rows(BYVAL AS GdaDataProxy PTR) AS gint
DECLARE FUNCTION gda_data_proxy_get_proxied_model_row(BYVAL AS GdaDataProxy PTR, BYVAL AS gint) AS gint
DECLARE FUNCTION gda_data_proxy_get_sample_end(BYVAL AS GdaDataProxy PTR) AS gint
DECLARE FUNCTION gda_data_proxy_get_sample_size(BYVAL AS GdaDataProxy PTR) AS gint
DECLARE FUNCTION gda_data_proxy_get_sample_start(BYVAL AS GdaDataProxy PTR) AS gint
DECLARE FUNCTION gda_data_proxy_get_value_attributes(BYVAL AS GdaDataProxy PTR, BYVAL AS gint, BYVAL AS gint) AS GdaValueAttribute
DECLARE FUNCTION gda_data_proxy_get_values(BYVAL AS GdaDataProxy PTR, BYVAL AS gint, BYVAL AS gint PTR, BYVAL AS gint) AS GSList PTR
DECLARE FUNCTION gda_data_proxy_has_changed(BYVAL AS GdaDataProxy PTR) AS gboolean
DECLARE FUNCTION gda_data_proxy_is_read_only(BYVAL AS GdaDataProxy PTR) AS gboolean
DECLARE FUNCTION gda_data_proxy_row_has_changed(BYVAL AS GdaDataProxy PTR, BYVAL AS gint) AS gboolean
DECLARE FUNCTION gda_data_proxy_row_is_deleted(BYVAL AS GdaDataProxy PTR, BYVAL AS gint) AS gboolean
DECLARE FUNCTION gda_data_proxy_row_is_inserted(BYVAL AS GdaDataProxy PTR, BYVAL AS gint) AS gboolean
DECLARE FUNCTION gda_data_proxy_set_filter_expr(BYVAL AS GdaDataProxy PTR, BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION gda_data_proxy_set_ordering_column(BYVAL AS GdaDataProxy PTR, BYVAL AS gint, BYVAL AS GError PTR PTR) AS gboolean
DECLARE SUB gda_data_proxy_set_sample_size(BYVAL AS GdaDataProxy PTR, BYVAL AS gint)
DECLARE SUB gda_data_proxy_set_sample_start(BYVAL AS GdaDataProxy PTR, BYVAL AS gint)
DECLARE SUB gda_data_proxy_undelete(BYVAL AS GdaDataProxy PTR, BYVAL AS gint)
TYPE _GdaDataProxyClass
  AS GObjectClass parent_class
  row_delete_changed AS SUB CDECL(BYVAL AS GdaDataProxy PTR, BYVAL AS gint, BYVAL AS gboolean)
  sample_size_changed AS SUB CDECL(BYVAL AS GdaDataProxy PTR, BYVAL AS gint)
  sample_changed AS SUB CDECL(BYVAL AS GdaDataProxy PTR, BYVAL AS gint, BYVAL AS gint)
  validate_row_changes AS FUNCTION CDECL(BYVAL AS GdaDataProxy PTR, BYVAL AS gint, BYVAL AS gint) AS GError PTR
  row_changes_applied AS SUB CDECL(BYVAL AS GdaDataProxy PTR, BYVAL AS gint, BYVAL AS gint)
  filter_changed AS SUB CDECL(BYVAL AS GdaDataProxy PTR)
  _gda_reserved1 AS SUB CDECL()
  _gda_reserved2 AS SUB CDECL()
  _gda_reserved3 AS SUB CDECL()
  _gda_reserved4 AS SUB CDECL()
END TYPE
TYPE _GdaDataSelect
  AS GObject object
  AS GdaDataSelectPrivate PTR priv
  AS GdaPStmt PTR prep_stmt
  AS gint nb_stored_rows
  AS gint advertized_nrows
  AS gpointer _gda_reserved1
  AS gpointer _gda_reserved2
  AS gpointer _gda_reserved3
  AS gpointer _gda_reserved4
END TYPE
DECLARE FUNCTION gda_data_select_get_type() AS GType
#DEFINE GDA_TYPE_DATA_SELECT (gda_data_select_get_type())
#DEFINE GDA_DATA_SELECT(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GDA_TYPE_DATA_SELECT, GdaDataSelect))
#DEFINE GDA_DATA_SELECT_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GDA_TYPE_DATA_SELECT, GdaDataSelectClass))
#DEFINE GDA_IS_DATA_SELECT(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GDA_TYPE_DATA_SELECT))
#DEFINE GDA_IS_CLASS_DATA_SELECT(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GDA_TYPE_DATA_SELECT))
#DEFINE GDA_DATA_SELECT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GDA_TYPE_DATA_SELECT, GdaDataSelectClass))
DECLARE FUNCTION gda_data_select_error_quark() AS GQuark
DECLARE FUNCTION gda_data_select_compute_columns_attributes(BYVAL AS GdaDataSelect PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION gda_data_select_compute_modification_statements(BYVAL AS GdaDataSelect PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION gda_data_select_compute_modification_statements_ext(BYVAL AS GdaDataSelect PTR, BYVAL AS GdaDataSelectConditionType, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION gda_data_select_compute_row_selection_condition(BYVAL AS GdaDataSelect PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION gda_data_select_get_connection(BYVAL AS GdaDataSelect PTR) AS GdaConnection PTR
DECLARE FUNCTION gda_data_select_prepare_for_offline(BYVAL AS GdaDataSelect PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION gda_data_select_rerun(BYVAL AS GdaDataSelect PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION gda_data_select_set_modification_statement(BYVAL AS GdaDataSelect PTR, BYVAL AS GdaStatement PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION gda_data_select_set_modification_statement_sql(BYVAL AS GdaDataSelect PTR, BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION gda_data_select_set_row_selection_condition(BYVAL AS GdaDataSelect PTR, BYVAL AS GdaSqlExpr PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION gda_data_select_set_row_selection_condition_sql(BYVAL AS GdaDataSelect PTR, BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR) AS gboolean
TYPE _GdaDataSelectClass
  AS GObjectClass parent_class
  fetch_nb_rows AS FUNCTION CDECL(BYVAL AS GdaDataSelect PTR) AS gint
  fetch_random AS FUNCTION CDECL(BYVAL AS GdaDataSelect PTR, BYVAL AS GdaRow PTR PTR, BYVAL AS gint, BYVAL AS GError PTR PTR) AS gboolean
  store_all AS FUNCTION CDECL(BYVAL AS GdaDataSelect PTR, BYVAL AS GError PTR PTR) AS gboolean
  fetch_next AS FUNCTION CDECL(BYVAL AS GdaDataSelect PTR, BYVAL AS GdaRow PTR PTR, BYVAL AS gint, BYVAL AS GError PTR PTR) AS gboolean
  fetch_prev AS FUNCTION CDECL(BYVAL AS GdaDataSelect PTR, BYVAL AS GdaRow PTR PTR, BYVAL AS gint, BYVAL AS GError PTR PTR) AS gboolean
  fetch_at AS FUNCTION CDECL(BYVAL AS GdaDataSelect PTR, BYVAL AS GdaRow PTR PTR, BYVAL AS gint, BYVAL AS GError PTR PTR) AS gboolean
  _gda_reserved1 AS SUB CDECL()
  _gda_reserved2 AS SUB CDECL()
  _gda_reserved3 AS SUB CDECL()
  _gda_reserved4 AS SUB CDECL()
END TYPE
TYPE _GdaDiff
  AS GdaDiffType type
  AS gint old_row
  AS gint new_row
  AS GHashTable PTR values
END TYPE
TYPE _GdaDsnInfo
  AS gchar PTR name
  AS gchar PTR provider
  AS gchar PTR description
  AS gchar PTR cnc_string
  AS gchar PTR auth_string
  AS gboolean is_system
  AS gpointer _gda_reserved1
  AS gpointer _gda_reserved2
  AS gpointer _gda_reserved3
  AS gpointer _gda_reserved4
END TYPE
DECLARE FUNCTION gda_dsn_info_new() AS GdaDsnInfo PTR
DECLARE FUNCTION gda_dsn_info_copy(BYVAL AS GdaDsnInfo PTR) AS GdaDsnInfo PTR
DECLARE SUB gda_dsn_info_free(BYVAL AS GdaDsnInfo PTR)
TYPE _GdaGeometricPoint
  AS gdouble x
  AS gdouble y
END TYPE
DECLARE FUNCTION gda_geometricpoint_copy(BYVAL AS gpointer) AS gpointer
DECLARE SUB gda_geometricpoint_free(BYVAL AS gpointer)
TYPE _GdaHandlerBin
  AS GObject object
  AS GdaHandlerBinPriv PTR priv
END TYPE
DECLARE FUNCTION gda_handler_bin_get_type() AS GType
#DEFINE GDA_TYPE_HANDLER_BIN (gda_handler_bin_get_type())
#DEFINE GDA_HANDLER_BIN(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GDA_TYPE_HANDLER_BIN, GdaHandlerBin))
#DEFINE GDA_HANDLER_BIN_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GDA_TYPE_HANDLER_BIN, GdaHandlerBinClass))
#DEFINE GDA_IS_HANDLER_BIN(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GDA_TYPE_HANDLER_BIN))
#DEFINE GDA_IS_CLASS_HANDLER_BIN(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GDA_TYPE_HANDLER_BIN))
#DEFINE GDA_HANDLER_BIN_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GDA_TYPE_HANDLER_BIN, GdaHandlerBinClass))
DECLARE FUNCTION gda_handler_bin_new() AS GdaDataHandler PTR
TYPE _GdaHandlerBinClass
  AS GObjectClass parent_class
  _gda_reserved1 AS SUB CDECL()
  _gda_reserved2 AS SUB CDECL()
END TYPE
TYPE _GdaHandlerBoolean
  AS GObject object
  AS GdaHandlerBooleanPriv PTR priv
END TYPE
DECLARE FUNCTION gda_handler_boolean_get_type() AS GType
#DEFINE GDA_TYPE_HANDLER_BOOLEAN (gda_handler_boolean_get_type())
#DEFINE GDA_HANDLER_BOOLEAN(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GDA_TYPE_HANDLER_BOOLEAN, GdaHandlerBoolean))
#DEFINE GDA_HANDLER_BOOLEAN_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GDA_TYPE_HANDLER_BOOLEAN, GdaHandlerBooleanClass))
#DEFINE GDA_IS_HANDLER_BOOLEAN(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GDA_TYPE_HANDLER_BOOLEAN))
#DEFINE GDA_IS_CLASS_HANDLER_BOOLEAN(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GDA_TYPE_HANDLER_BOOLEAN))
#DEFINE GDA_HANDLER_BOOLEAN_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GDA_TYPE_HANDLER_BOOLEAN, GdaHandlerBooleanClass))
DECLARE FUNCTION gda_handler_boolean_new() AS GdaDataHandler PTR
TYPE _GdaHandlerBooleanClass
  AS GObjectClass parent_class
  _gda_reserved1 AS SUB CDECL()
  _gda_reserved2 AS SUB CDECL()
END TYPE
TYPE _GdaHandlerNumerical
  AS GObject object
  AS GdaHandlerNumericalPriv PTR priv
END TYPE
DECLARE FUNCTION gda_handler_numerical_get_type() AS GType
#DEFINE GDA_TYPE_HANDLER_NUMERICAL (gda_handler_numerical_get_type())
#DEFINE GDA_HANDLER_NUMERICAL(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GDA_TYPE_HANDLER_NUMERICAL, GdaHandlerNumerical))
#DEFINE GDA_HANDLER_NUMERICAL_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GDA_TYPE_HANDLER_NUMERICAL, GdaHandlerNumericalClass))
#DEFINE GDA_IS_HANDLER_NUMERICAL(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GDA_TYPE_HANDLER_NUMERICAL))
#DEFINE GDA_IS_CLASS_HANDLER_NUMERICAL(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GDA_TYPE_HANDLER_NUMERICAL))
#DEFINE GDA_HANDLER_NUMERICAL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GDA_TYPE_HANDLER_NUMERICAL, GdaHandlerNumericalClass))
DECLARE FUNCTION gda_handler_numerical_new() AS GdaDataHandler PTR
TYPE _GdaHandlerNumericalClass
  AS GObjectClass parent_class
  _gda_reserved1 AS SUB CDECL()
  _gda_reserved2 AS SUB CDECL()
END TYPE
TYPE _GdaHandlerString
  AS GObject object
  AS GdaHandlerStringPriv PTR priv
END TYPE
DECLARE FUNCTION gda_handler_string_get_type() AS GType
#DEFINE GDA_TYPE_HANDLER_STRING (gda_handler_string_get_type())
#DEFINE GDA_HANDLER_STRING(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GDA_TYPE_HANDLER_STRING, GdaHandlerString))
#DEFINE GDA_HANDLER_STRING_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GDA_TYPE_HANDLER_STRING, GdaHandlerStringClass))
#DEFINE GDA_IS_HANDLER_STRING(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GDA_TYPE_HANDLER_STRING))
#DEFINE GDA_IS_CLASS_HANDLER_STRING(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GDA_TYPE_HANDLER_STRING))
#DEFINE GDA_HANDLER_STRING_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GDA_TYPE_HANDLER_STRING, GdaHandlerStringClass))
DECLARE FUNCTION gda_handler_string_new() AS GdaDataHandler PTR
DECLARE FUNCTION gda_handler_string_new_with_provider(BYVAL AS GdaServerProvider PTR, BYVAL AS GdaConnection PTR) AS GdaDataHandler PTR
TYPE _GdaHandlerStringClass
  AS GObjectClass parent_class
  _gda_reserved1 AS SUB CDECL()
  _gda_reserved2 AS SUB CDECL()
END TYPE
TYPE _GdaHandlerTime
  AS GObject object
  AS GdaHandlerTimePriv PTR priv
END TYPE
DECLARE FUNCTION gda_handler_time_get_type() AS GType
#DEFINE GDA_TYPE_HANDLER_TIME (gda_handler_time_get_type())
#DEFINE GDA_HANDLER_TIME(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GDA_TYPE_HANDLER_TIME, GdaHandlerTime))
#DEFINE GDA_HANDLER_TIME_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GDA_TYPE_HANDLER_TIME, GdaHandlerTimeClass))
#DEFINE GDA_IS_HANDLER_TIME(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GDA_TYPE_HANDLER_TIME))
#DEFINE GDA_IS_CLASS_HANDLER_TIME(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GDA_TYPE_HANDLER_TIME))
#DEFINE GDA_HANDLER_TIME_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GDA_TYPE_HANDLER_TIME, GdaHandlerTimeClass))
DECLARE FUNCTION gda_handler_time_new() AS GdaDataHandler PTR
DECLARE FUNCTION gda_handler_time_new_no_locale() AS GdaDataHandler PTR
DECLARE FUNCTION gda_handler_time_get_format(BYVAL AS GdaHandlerTime PTR, BYVAL AS GType) AS gchar PTR
DECLARE FUNCTION gda_handler_time_get_no_locale_str_from_value(BYVAL AS GdaHandlerTime PTR, BYVAL AS const GValue PTR) AS gchar PTR
DECLARE SUB gda_handler_time_set_sql_spec(BYVAL AS GdaHandlerTime PTR, BYVAL AS GDateDMY, BYVAL AS GDateDMY, BYVAL AS GDateDMY, BYVAL AS gint8, BYVAL AS gboolean)
DECLARE SUB gda_handler_time_set_str_spec(BYVAL AS GdaHandlerTime PTR, BYVAL AS GDateDMY, BYVAL AS GDateDMY, BYVAL AS GDateDMY, BYVAL AS gint8, BYVAL AS gboolean)
TYPE _GdaHandlerTimeClass
  AS GObjectClass parent_class
  _gda_reserved1 AS SUB CDECL()
  _gda_reserved2 AS SUB CDECL()
END TYPE
TYPE _GdaHandlerType
  AS GObject object
  AS GdaHandlerTypePriv PTR priv
END TYPE
DECLARE FUNCTION gda_handler_type_get_type() AS GType
#DEFINE GDA_TYPE_HANDLER_TYPE (gda_handler_type_get_type())
#DEFINE GDA_HANDLER_TYPE(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GDA_TYPE_HANDLER_TYPE, GdaHandlerType))
#DEFINE GDA_HANDLER_TYPE_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GDA_TYPE_HANDLER_TYPE, GdaHandlerTypeClass))
#DEFINE GDA_IS_HANDLER_TYPE(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GDA_TYPE_HANDLER_TYPE))
#DEFINE GDA_IS_CLASS_HANDLER_TYPE(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GDA_TYPE_HANDLER_TYPE))
#DEFINE GDA_HANDLER_TYPE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GDA_TYPE_HANDLER_TYPE, GdaHandlerTypeClass))
DECLARE FUNCTION gda_handler_type_new() AS GdaDataHandler PTR
TYPE _GdaHandlerTypeClass
  AS GObjectClass parent_class
  _gda_reserved1 AS SUB CDECL()
  _gda_reserved2 AS SUB CDECL()
END TYPE
TYPE _GdaHolder
  AS GObject object
  AS GdaHolderPrivate PTR priv
END TYPE
DECLARE FUNCTION gda_holder_get_type() AS GType
#DEFINE GDA_TYPE_HOLDER (gda_holder_get_type())
#DEFINE GDA_HOLDER(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GDA_TYPE_HOLDER, GdaHolder))
#DEFINE GDA_HOLDER_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GDA_TYPE_HOLDER, GdaHolderClass))
#DEFINE GDA_IS_HOLDER(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GDA_TYPE_HOLDER))
#DEFINE GDA_IS_CLASS_HOLDER(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GDA_TYPE_HOLDER))
#DEFINE GDA_HOLDER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GDA_TYPE_HOLDER, GdaHolderClass))
DECLARE FUNCTION gda_holder_new(BYVAL AS GType) AS GdaHolder PTR
DECLARE FUNCTION gda_holder_new_inline(BYVAL AS GType, BYVAL AS const gchar PTR, ...) AS GdaHolder PTR
DECLARE FUNCTION gda_holder_error_quark() AS GQuark
DECLARE FUNCTION gda_holder_copy(BYVAL AS GdaHolder PTR) AS GdaHolder PTR
DECLARE SUB gda_holder_force_invalid(BYVAL AS GdaHolder PTR)
DECLARE SUB gda_holder_force_invalid_e(BYVAL AS GdaHolder PTR, BYVAL AS GError PTR)
DECLARE FUNCTION gda_holder_get_alphanum_id(BYVAL AS GdaHolder PTR) AS gchar PTR
DECLARE FUNCTION gda_holder_get_attribute(BYVAL AS GdaHolder PTR, BYVAL AS const gchar PTR) AS const GValue PTR
DECLARE FUNCTION gda_holder_get_bind(BYVAL AS GdaHolder PTR) AS GdaHolder PTR
DECLARE FUNCTION gda_holder_get_default_value(BYVAL AS GdaHolder PTR) AS const GValue PTR
DECLARE FUNCTION gda_holder_get_g_type(BYVAL AS GdaHolder PTR) AS GType
DECLARE FUNCTION gda_holder_get_id(BYVAL AS GdaHolder PTR) AS const gchar PTR
DECLARE FUNCTION gda_holder_get_not_null(BYVAL AS GdaHolder PTR) AS gboolean
DECLARE FUNCTION gda_holder_get_source_model(BYVAL AS GdaHolder PTR, BYVAL AS gint PTR) AS GdaDataModel PTR
DECLARE FUNCTION gda_holder_get_value(BYVAL AS GdaHolder PTR) AS const GValue PTR
DECLARE FUNCTION gda_holder_get_value_str(BYVAL AS GdaHolder PTR, BYVAL AS GdaDataHandler PTR) AS gchar PTR
DECLARE FUNCTION gda_holder_is_valid(BYVAL AS GdaHolder PTR) AS gboolean
DECLARE FUNCTION gda_holder_is_valid_e(BYVAL AS GdaHolder PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE SUB gda_holder_set_attribute(BYVAL AS GdaHolder PTR, BYVAL AS const gchar PTR, BYVAL AS const GValue PTR, BYVAL AS GDestroyNotify)
DECLARE FUNCTION gda_holder_set_bind(BYVAL AS GdaHolder PTR, BYVAL AS GdaHolder PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE SUB gda_holder_set_default_value(BYVAL AS GdaHolder PTR, BYVAL AS const GValue PTR)
DECLARE SUB gda_holder_set_not_null(BYVAL AS GdaHolder PTR, BYVAL AS gboolean)
DECLARE FUNCTION gda_holder_set_source_model(BYVAL AS GdaHolder PTR, BYVAL AS GdaDataModel PTR, BYVAL AS gint, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION gda_holder_set_value(BYVAL AS GdaHolder PTR, BYVAL AS const GValue PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION gda_holder_set_value_str(BYVAL AS GdaHolder PTR, BYVAL AS GdaDataHandler PTR, BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION gda_holder_set_value_to_default(BYVAL AS GdaHolder PTR) AS gboolean
DECLARE FUNCTION gda_holder_take_static_value(BYVAL AS GdaHolder PTR, BYVAL AS const GValue PTR, BYVAL AS gboolean PTR, BYVAL AS GError PTR PTR) AS GValue PTR
DECLARE FUNCTION gda_holder_take_value(BYVAL AS GdaHolder PTR, BYVAL AS GValue PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION gda_holder_value_is_default(BYVAL AS GdaHolder PTR) AS gboolean
TYPE _GdaHolderClass
  AS GObjectClass parent_class
  changed AS SUB CDECL(BYVAL AS GdaHolder PTR)
  source_changed AS SUB CDECL(BYVAL AS GdaHolder PTR)
  validate_change AS FUNCTION CDECL(BYVAL AS GdaHolder PTR, BYVAL AS const GValue PTR) AS GError PTR
  att_changed AS SUB CDECL(BYVAL AS GdaHolder PTR, BYVAL AS const gchar PTR, BYVAL AS const GValue PTR)
  _gda_reserved1 AS SUB CDECL()
  _gda_reserved2 AS SUB CDECL()
  _gda_reserved3 AS SUB CDECL()
  _gda_reserved4 AS SUB CDECL()
END TYPE
DECLARE FUNCTION gda_lockable_get_type() AS GType
#DEFINE GDA_TYPE_LOCKABLE (gda_lockable_get_type())
#DEFINE GDA_LOCKABLE(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GDA_TYPE_LOCKABLE, GdaLockable))
#DEFINE GDA_LOCKABLE_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GDA_TYPE_LOCKABLE, GdaLockableIface))
#DEFINE GDA_IS_LOCKABLE(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GDA_TYPE_LOCKABLE))
#DEFINE GDA_LOCKABLE_GET_IFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE((obj), GDA_TYPE_LOCKABLE, GdaLockableIface))
DECLARE SUB gda_lockable_lock(BYVAL AS GdaLockable PTR)
DECLARE FUNCTION gda_lockable_trylock(BYVAL AS GdaLockable PTR) AS gboolean
DECLARE SUB gda_lockable_unlock(BYVAL AS GdaLockable PTR)
TYPE _GdaLockableIface
  AS GTypeInterface g_iface
  i_lock AS SUB CDECL(BYVAL AS GdaLockable PTR)
  i_trylock AS FUNCTION CDECL(BYVAL AS GdaLockable PTR) AS gboolean
  i_unlock AS SUB CDECL(BYVAL AS GdaLockable PTR)
END TYPE
TYPE _GdaMetaContext
  AS gchar PTR table_name
  AS gint size
  AS gchar PTR column_names(0)
  AS GValue PTR column_values(0)
  AS GHashTable PTR columns
END TYPE
DECLARE FUNCTION gda_meta_context_new() AS GdaMetaContext PTR
DECLARE FUNCTION gda_meta_context_copy(BYVAL AS GdaMetaContext PTR) AS GdaMetaContext PTR
DECLARE SUB gda_meta_context_free(BYVAL AS GdaMetaContext PTR)
DECLARE FUNCTION gda_meta_context_get_table(BYVAL AS GdaMetaContext PTR) AS const gchar PTR
DECLARE SUB gda_meta_context_set_column(BYVAL AS GdaMetaContext PTR, BYVAL AS const gchar PTR, BYVAL AS const GValue PTR, BYVAL AS GdaConnection PTR)
DECLARE SUB gda_meta_context_set_columns(BYVAL AS GdaMetaContext PTR, BYVAL AS GHashTable PTR, BYVAL AS GdaConnection PTR)
DECLARE SUB gda_meta_context_set_table(BYVAL AS GdaMetaContext PTR, BYVAL AS const gchar PTR)
TYPE _GdaMetaDbObject
  AS GdaMetaDbObjectType obj_type
  AS gboolean outdated
  AS gchar PTR obj_catalog
  AS gchar PTR obj_schema
  AS gchar PTR obj_name
  AS gchar PTR obj_short_name
  AS gchar PTR obj_full_name
  AS gchar PTR obj_owner
  AS GSList PTR depend_list
  AS gpointer _gda_reserved1
  AS gpointer _gda_reserved2
  AS gpointer _gda_reserved3
  AS gpointer _gda_reserved4
END TYPE
TYPE _GdaMetaStore
  AS GObject object
  AS GdaMetaStorePrivate PTR priv
END TYPE
DECLARE FUNCTION gda_meta_store_get_type() AS GType
#DEFINE GDA_TYPE_META_STORE (gda_meta_store_get_type())
#DEFINE GDA_META_STORE(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GDA_TYPE_META_STORE, GdaMetaStore))
#DEFINE GDA_META_STORE_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GDA_TYPE_META_STORE, GdaMetaStoreClass))
#DEFINE GDA_IS_META_STORE(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GDA_TYPE_META_STORE))
#DEFINE GDA_IS_CLASS_META_STORE(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GDA_TYPE_META_STORE))
#DEFINE GDA_META_STORE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GDA_TYPE_META_STORE, GdaMetaStoreClass))
DECLARE FUNCTION gda_meta_store_new(BYVAL AS const gchar PTR) AS GdaMetaStore PTR
DECLARE FUNCTION gda_meta_store_new_with_file(BYVAL AS const gchar PTR) AS GdaMetaStore PTR
DECLARE FUNCTION gda_meta_store_error_quark() AS GQuark
DECLARE FUNCTION gda_meta_store_sql_identifier_quote(BYVAL AS const gchar PTR, BYVAL AS GdaConnection PTR) AS gchar PTR
DECLARE FUNCTION gda_meta_store_create_modify_data_model(BYVAL AS GdaMetaStore PTR, BYVAL AS const gchar PTR) AS GdaDataModel PTR
DECLARE FUNCTION gda_meta_store_declare_foreign_key(BYVAL AS GdaMetaStore PTR, BYVAL AS GdaMetaStruct PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS guint, BYVAL AS gchar PTR PTR, BYVAL AS gchar PTR PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION gda_meta_store_extract(BYVAL AS GdaMetaStore PTR, BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR, ...) AS GdaDataModel PTR
DECLARE FUNCTION gda_meta_store_extract_v(BYVAL AS GdaMetaStore PTR, BYVAL AS const gchar PTR, BYVAL AS GHashTable PTR, BYVAL AS GError PTR PTR) AS GdaDataModel PTR
DECLARE FUNCTION gda_meta_store_get_attribute_value(BYVAL AS GdaMetaStore PTR, BYVAL AS const gchar PTR, BYVAL AS gchar PTR PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION gda_meta_store_get_internal_connection(BYVAL AS GdaMetaStore PTR) AS GdaConnection PTR
DECLARE FUNCTION gda_meta_store_get_version(BYVAL AS GdaMetaStore PTR) AS gint
DECLARE FUNCTION gda_meta_store_modify(BYVAL AS GdaMetaStore PTR, BYVAL AS const gchar PTR, BYVAL AS GdaDataModel PTR, BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR, ...) AS gboolean
DECLARE FUNCTION gda_meta_store_modify_v(BYVAL AS GdaMetaStore PTR, BYVAL AS const gchar PTR, BYVAL AS GdaDataModel PTR, BYVAL AS const gchar PTR, BYVAL AS gint, BYVAL AS const gchar PTR PTR, BYVAL AS const GValue PTR PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION gda_meta_store_modify_with_context(BYVAL AS GdaMetaStore PTR, BYVAL AS GdaMetaContext PTR, BYVAL AS GdaDataModel PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION gda_meta_store_schema_add_custom_object(BYVAL AS GdaMetaStore PTR, BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION gda_meta_store_schema_get_all_tables(BYVAL AS GdaMetaStore PTR) AS GSList PTR
DECLARE FUNCTION gda_meta_store_schema_get_depend_tables(BYVAL AS GdaMetaStore PTR, BYVAL AS const gchar PTR) AS GSList PTR
DECLARE FUNCTION gda_meta_store_schema_get_structure(BYVAL AS GdaMetaStore PTR, BYVAL AS GError PTR PTR) AS GdaMetaStruct PTR
DECLARE FUNCTION gda_meta_store_schema_remove_custom_object(BYVAL AS GdaMetaStore PTR, BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION gda_meta_store_set_attribute_value(BYVAL AS GdaMetaStore PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE SUB gda_meta_store_set_identifiers_style(BYVAL AS GdaMetaStore PTR, BYVAL AS GdaSqlIdentifierStyle)
DECLARE SUB gda_meta_store_set_reserved_keywords_func(BYVAL AS GdaMetaStore PTR, BYVAL AS GdaSqlReservedKeywordsFunc)
DECLARE FUNCTION gda_meta_store_undeclare_foreign_key(BYVAL AS GdaMetaStore PTR, BYVAL AS GdaMetaStruct PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR) AS gboolean
TYPE _GdaMetaStoreChange
  AS GdaMetaStoreChangeType c_type
  AS gchar PTR table_name
  AS GHashTable PTR keys
END TYPE
TYPE _GdaMetaStoreClass
  AS GObjectClass parent_class
  AS GdaMetaStoreClassPrivate PTR cpriv
  meta_reset AS SUB CDECL(BYVAL AS GdaMetaStore PTR)
  suggest_update AS FUNCTION CDECL(BYVAL AS GdaMetaStore PTR, BYVAL AS GdaMetaContext PTR) AS GError PTR
  meta_changed AS SUB CDECL(BYVAL AS GdaMetaStore PTR, BYVAL AS GSList PTR)
  _gda_reserved1 AS SUB CDECL()
  _gda_reserved2 AS SUB CDECL()
  _gda_reserved3 AS SUB CDECL()
  _gda_reserved4 AS SUB CDECL()
END TYPE
TYPE _GdaMetaStruct
  AS GObject object
  AS GdaMetaStructPrivate PTR priv
END TYPE
DECLARE FUNCTION gda_meta_struct_get_type() AS GType
#DEFINE GDA_TYPE_META_STRUCT (gda_meta_struct_get_type())
#DEFINE GDA_META_STRUCT(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GDA_TYPE_META_STRUCT, GdaMetaStruct))
#DEFINE GDA_META_STRUCT_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GDA_TYPE_META_STRUCT, GdaMetaStructClass))
#DEFINE GDA_IS_META_STRUCT(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GDA_TYPE_META_STRUCT))
#DEFINE GDA_IS_CLASS_META_STRUCT(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GDA_TYPE_META_STRUCT))
#DEFINE GDA_META_STRUCT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GDA_TYPE_META_STRUCT, GdaMetaStructClass))
DECLARE FUNCTION gda_meta_struct_new(BYVAL AS GdaMetaStore PTR, BYVAL AS GdaMetaStructFeature) AS GdaMetaStruct PTR
DECLARE FUNCTION gda_meta_struct_error_quark() AS GQuark
DECLARE FUNCTION gda_meta_struct_complement(BYVAL AS GdaMetaStruct PTR, BYVAL AS GdaMetaDbObjectType, BYVAL AS const GValue PTR, BYVAL AS const GValue PTR, BYVAL AS const GValue PTR, BYVAL AS GError PTR PTR) AS GdaMetaDbObject PTR
DECLARE FUNCTION gda_meta_struct_complement_all(BYVAL AS GdaMetaStruct PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION gda_meta_struct_complement_default(BYVAL AS GdaMetaStruct PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION gda_meta_struct_complement_depend(BYVAL AS GdaMetaStruct PTR, BYVAL AS GdaMetaDbObject PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION gda_meta_struct_complement_schema(BYVAL AS GdaMetaStruct PTR, BYVAL AS const GValue PTR, BYVAL AS const GValue PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION gda_meta_struct_dump_as_graph(BYVAL AS GdaMetaStruct PTR, BYVAL AS GdaMetaGraphInfo, BYVAL AS GError PTR PTR) AS gchar PTR
DECLARE FUNCTION gda_meta_struct_get_all_db_objects(BYVAL AS GdaMetaStruct PTR) AS GSList PTR
DECLARE FUNCTION gda_meta_struct_get_db_object(BYVAL AS GdaMetaStruct PTR, BYVAL AS const GValue PTR, BYVAL AS const GValue PTR, BYVAL AS const GValue PTR) AS GdaMetaDbObject PTR
DECLARE FUNCTION gda_meta_struct_get_table_column(BYVAL AS GdaMetaStruct PTR, BYVAL AS GdaMetaTable PTR, BYVAL AS const GValue PTR) AS GdaMetaTableColumn PTR
DECLARE FUNCTION gda_meta_struct_load_from_xml_file(BYVAL AS GdaMetaStruct PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION gda_meta_struct_sort_db_objects(BYVAL AS GdaMetaStruct PTR, BYVAL AS GdaMetaSortType, BYVAL AS GError PTR PTR) AS gboolean
TYPE _GdaMetaStructClass
  AS GObjectClass parent_class
  _gda_reserved1 AS SUB CDECL()
  _gda_reserved2 AS SUB CDECL()
  _gda_reserved3 AS SUB CDECL()
  _gda_reserved4 AS SUB CDECL()
END TYPE
TYPE _GdaMetaTable
  AS GSList PTR columns
  AS gint PTR pk_cols_array
  AS gint pk_cols_nb
  AS GSList PTR reverse_fk_list
  AS GSList PTR fk_list
  AS gpointer _gda_reserved1
  AS gpointer _gda_reserved2
  AS gpointer _gda_reserved3
  AS gpointer _gda_reserved4
END TYPE
TYPE _GdaMetaTableColumn
  AS gchar PTR column_name
  AS gchar PTR column_type
  AS GType gtype
  AS gboolean pkey
  AS gboolean nullok
  AS gchar PTR default_value
  AS gpointer _gda_reserved1
  AS gpointer _gda_reserved2
  AS gpointer _gda_reserved3
  AS gpointer _gda_reserved4
END TYPE
DECLARE SUB gda_meta_table_column_foreach_attribute(BYVAL AS GdaMetaTableColumn PTR, BYVAL AS GdaAttributesManagerFunc, BYVAL AS gpointer)
DECLARE FUNCTION gda_meta_table_column_get_attribute(BYVAL AS GdaMetaTableColumn PTR, BYVAL AS const gchar PTR) AS const GValue PTR
DECLARE SUB gda_meta_table_column_set_attribute(BYVAL AS GdaMetaTableColumn PTR, BYVAL AS const gchar PTR, BYVAL AS const GValue PTR, BYVAL AS GDestroyNotify)
TYPE _GdaMetaTableForeignKey
  AS GdaMetaDbObject PTR meta_table
  AS GdaMetaDbObject PTR depend_on
  AS gint cols_nb
  AS gint PTR fk_cols_array
  AS gchar PTR PTR fk_names_array
  AS gint PTR ref_pk_cols_array
  AS gchar PTR PTR ref_pk_names_array
  AS GdaMetaForeignKeyPolicy on_update_policy
  AS GdaMetaForeignKeyPolicy on_delete_policy
  AS gboolean declared
  AS gchar PTR fk_name
  AS gpointer _gda_reserved1
  AS gpointer _gda_reserved2
  AS gpointer _gda_reserved3
  AS gpointer _gda_reserved4
END TYPE
TYPE _GdaMetaView
  AS GdaMetaTable table
  AS gchar PTR view_def
  AS gboolean is_updatable
  AS gpointer _gda_reserved1
  AS gpointer _gda_reserved2
  AS gpointer _gda_reserved3
  AS gpointer _gda_reserved4
END TYPE
TYPE _GdaNumeric
  AS gchar PTR number
  AS glong precision
  AS glong width
  AS gpointer reserved
END TYPE
DECLARE FUNCTION gda_numeric_new() AS GdaNumeric PTR
DECLARE FUNCTION gda_numeric_copy(BYVAL AS GdaNumeric PTR) AS GdaNumeric PTR
DECLARE SUB gda_numeric_free(BYVAL AS GdaNumeric PTR)
DECLARE FUNCTION gda_numeric_get_double(BYVAL AS const GdaNumeric PTR) AS gdouble
DECLARE FUNCTION gda_numeric_get_precision(BYVAL AS const GdaNumeric PTR) AS glong
DECLARE FUNCTION gda_numeric_get_string(BYVAL AS const GdaNumeric PTR) AS gchar PTR
DECLARE FUNCTION gda_numeric_get_width(BYVAL AS const GdaNumeric PTR) AS glong
DECLARE SUB gda_numeric_set_double(BYVAL AS GdaNumeric PTR, BYVAL AS gdouble)
DECLARE SUB gda_numeric_set_from_string(BYVAL AS GdaNumeric PTR, BYVAL AS const gchar PTR)
DECLARE SUB gda_numeric_set_precision(BYVAL AS GdaNumeric PTR, BYVAL AS glong)
DECLARE SUB gda_numeric_set_width(BYVAL AS GdaNumeric PTR, BYVAL AS glong)
TYPE _GdaPStmt
  AS GObject object
  AS GdaPStmtPrivate PTR priv
  AS gchar PTR sql
  AS GSList PTR param_ids
  AS gint ncols
  AS GType PTR types
  AS GSList PTR tmpl_columns
  AS gpointer _gda_reserved1
  AS gpointer _gda_reserved2
END TYPE
DECLARE FUNCTION gda_pstmt_get_type() AS GType
#DEFINE GDA_TYPE_PSTMT (gda_pstmt_get_type())
#DEFINE GDA_PSTMT(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GDA_TYPE_PSTMT, GdaPStmt))
#DEFINE GDA_PSTMT_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GDA_TYPE_PSTMT, GdaPStmtClass))
#DEFINE GDA_IS_PSTMT(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GDA_TYPE_PSTMT))
#DEFINE GDA_IS_CLASS_PSTMT(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GDA_TYPE_PSTMT))
#DEFINE GDA_PSTMT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GDA_TYPE_PSTMT, GdaPStmtClass))
DECLARE SUB gda_pstmt_copy_contents(BYVAL AS GdaPStmt PTR, BYVAL AS GdaPStmt PTR)
DECLARE FUNCTION gda_pstmt_get_gda_statement(BYVAL AS GdaPStmt PTR) AS GdaStatement PTR
DECLARE SUB gda_pstmt_set_gda_statement(BYVAL AS GdaPStmt PTR, BYVAL AS GdaStatement PTR)
TYPE _GdaPStmtClass
  AS GObjectClass parent_class
  _gda_reserved1 AS SUB CDECL()
  _gda_reserved2 AS SUB CDECL()
  _gda_reserved3 AS SUB CDECL()
  _gda_reserved4 AS SUB CDECL()
END TYPE
TYPE _GdaProviderInfo
  AS gchar PTR id
  AS gchar PTR location
  AS gchar PTR description
  AS GdaSet PTR dsn_params
  AS GdaSet PTR auth_params
  AS gpointer _gda_reserved1
  AS gpointer _gda_reserved2
  AS gpointer _gda_reserved3
  AS gpointer _gda_reserved4
END TYPE
DECLARE FUNCTION gda_quark_list_new() AS GdaQuarkList PTR
DECLARE FUNCTION gda_quark_list_new_from_string(BYVAL AS const gchar PTR) AS GdaQuarkList PTR
DECLARE SUB gda_quark_list_add_from_string(BYVAL AS GdaQuarkList PTR, BYVAL AS const gchar PTR, BYVAL AS gboolean)
DECLARE SUB gda_quark_list_clear(BYVAL AS GdaQuarkList PTR)
DECLARE FUNCTION gda_quark_list_copy(BYVAL AS GdaQuarkList PTR) AS GdaQuarkList PTR
DECLARE FUNCTION gda_quark_list_find(BYVAL AS GdaQuarkList PTR, BYVAL AS const gchar PTR) AS const gchar PTR
DECLARE SUB gda_quark_list_foreach(BYVAL AS GdaQuarkList PTR, BYVAL AS GHFunc, BYVAL AS gpointer)
DECLARE SUB gda_quark_list_free(BYVAL AS GdaQuarkList PTR)
DECLARE SUB gda_quark_list_protect_values(BYVAL AS GdaQuarkList PTR)
DECLARE SUB gda_quark_list_remove(BYVAL AS GdaQuarkList PTR, BYVAL AS const gchar PTR)
TYPE _GdaRepetitiveStatement
  AS GObject parent_instance
END TYPE
DECLARE FUNCTION gda_repetitive_statement_get_type() AS GType
#DEFINE GDA_TYPE_REPETITIVE_STATEMENT (gda_repetitive_statement_get_type())
#DEFINE GDA_REPETITIVE_STATEMENT(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GDA_TYPE_REPETITIVE_STATEMENT, GdaRepetitiveStatement))
#DEFINE GDA_REPETITIVE_STATEMENT_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GDA_TYPE_REPETITIVE_STATEMENT, GdaRepetitiveStatementClass))
#DEFINE GDA_IS_REPETITIVE_STATEMENT(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GDA_TYPE_REPETITIVE_STATEMENT))
#DEFINE GDA_IS_CLASS_REPETITIVE_STATEMENT(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GDA_TYPE_REPETITIVE_STATEMENT))
#DEFINE GDA_REPETITIVE_STATEMENT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GDA_TYPE_REPETITIVE_STATEMENT, GdaRepetitiveStatementClass))
DECLARE FUNCTION gda_repetitive_statement_new(BYVAL AS GdaStatement PTR) AS GdaRepetitiveStatement PTR
DECLARE FUNCTION gda_repetitive_statement_append_set(BYVAL AS GdaRepetitiveStatement PTR, BYVAL AS GdaSet PTR, BYVAL AS gboolean) AS gboolean
DECLARE FUNCTION gda_repetitive_statement_get_all_sets(BYVAL AS GdaRepetitiveStatement PTR) AS GSList PTR
DECLARE FUNCTION gda_repetitive_statement_get_template_set(BYVAL AS GdaRepetitiveStatement PTR, BYVAL AS GdaSet PTR PTR, BYVAL AS GError PTR PTR) AS gboolean
TYPE _GdaRepetitiveStatementClass
  AS GObjectClass parent_class
END TYPE
TYPE _GdaRow
  AS GObject object
  AS GdaRowPrivate PTR priv
END TYPE
DECLARE FUNCTION gda_row_get_type() AS GType
#DEFINE GDA_TYPE_ROW (gda_row_get_type())
#DEFINE GDA_ROW(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GDA_TYPE_ROW, GdaRow))
#DEFINE GDA_ROW_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GDA_TYPE_ROW, GdaRowClass))
#DEFINE GDA_IS_ROW(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GDA_TYPE_ROW))
#DEFINE GDA_IS_CLASS_ROW(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GDA_TYPE_ROW))
#DEFINE GDA_ROW_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GDA_TYPE_ROW, GdaRowClass))
DECLARE FUNCTION gda_row_new(BYVAL AS gint) AS GdaRow PTR
DECLARE FUNCTION gda_row_get_length(BYVAL AS GdaRow PTR) AS gint
DECLARE FUNCTION gda_row_get_value(BYVAL AS GdaRow PTR, BYVAL AS gint) AS GValue PTR
DECLARE SUB gda_row_invalidate_value(BYVAL AS GdaRow PTR, BYVAL AS GValue PTR)
DECLARE SUB gda_row_invalidate_value_e(BYVAL AS GdaRow PTR, BYVAL AS GValue PTR, BYVAL AS GError PTR)
DECLARE FUNCTION gda_row_value_is_valid(BYVAL AS GdaRow PTR, BYVAL AS GValue PTR) AS gboolean
DECLARE FUNCTION gda_row_value_is_valid_e(BYVAL AS GdaRow PTR, BYVAL AS GValue PTR, BYVAL AS GError PTR PTR) AS gboolean
TYPE _GdaRowClass
  AS GObjectClass parent_class
  _gda_reserved1 AS SUB CDECL()
  _gda_reserved2 AS SUB CDECL()
  _gda_reserved3 AS SUB CDECL()
  _gda_reserved4 AS SUB CDECL()
END TYPE
TYPE _GdaServerOperation
  AS GObject object
  AS GdaServerOperationPrivate PTR priv
END TYPE
DECLARE FUNCTION gda_server_operation_get_type() AS GType
#DEFINE GDA_TYPE_SERVER_OPERATION (gda_server_operation_get_type())
#DEFINE GDA_SERVER_OPERATION(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GDA_TYPE_SERVER_OPERATION, GdaServerOperation))
#DEFINE GDA_SERVER_OPERATION_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GDA_TYPE_SERVER_OPERATION, GdaServerOperationClass))
#DEFINE GDA_IS_SERVER_OPERATION(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GDA_TYPE_SERVER_OPERATION))
#DEFINE GDA_IS_CLASS_SERVER_OPERATION(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GDA_TYPE_SERVER_OPERATION))
#DEFINE GDA_SERVER_OPERATION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GDA_TYPE_SERVER_OPERATION, GdaServerOperationClass))
DECLARE FUNCTION gda_server_operation_new(BYVAL AS GdaServerOperationType, BYVAL AS const gchar PTR) AS GdaServerOperation PTR
DECLARE FUNCTION gda_server_operation_error_quark() AS GQuark
DECLARE FUNCTION gda_server_operation_op_type_to_string(BYVAL AS GdaServerOperationType) AS const gchar PTR
DECLARE FUNCTION gda_server_operation_prepare_create_database(BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR) AS GdaServerOperation PTR
DECLARE FUNCTION gda_server_operation_prepare_create_table(BYVAL AS GdaConnection PTR, BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR, ...) AS GdaServerOperation PTR
DECLARE FUNCTION gda_server_operation_prepare_drop_database(BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR) AS GdaServerOperation PTR
DECLARE FUNCTION gda_server_operation_prepare_drop_table(BYVAL AS GdaConnection PTR, BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR) AS GdaServerOperation PTR
DECLARE FUNCTION gda_server_operation_string_to_op_type(BYVAL AS const gchar PTR) AS GdaServerOperationType
DECLARE FUNCTION gda_server_operation_add_item_to_sequence(BYVAL AS GdaServerOperation PTR, BYVAL AS const gchar PTR) AS guint
DECLARE FUNCTION gda_server_operation_del_item_from_sequence(BYVAL AS GdaServerOperation PTR, BYVAL AS const gchar PTR) AS gboolean
DECLARE FUNCTION gda_server_operation_get_node_info(BYVAL AS GdaServerOperation PTR, BYVAL AS const gchar PTR, ...) AS GdaServerOperationNode PTR
DECLARE FUNCTION gda_server_operation_get_node_parent(BYVAL AS GdaServerOperation PTR, BYVAL AS const gchar PTR) AS gchar PTR
DECLARE FUNCTION gda_server_operation_get_node_path_portion(BYVAL AS GdaServerOperation PTR, BYVAL AS const gchar PTR) AS gchar PTR
DECLARE FUNCTION gda_server_operation_get_node_type(BYVAL AS GdaServerOperation PTR, BYVAL AS const gchar PTR, BYVAL AS GdaServerOperationNodeStatus PTR) AS GdaServerOperationNodeType
DECLARE FUNCTION gda_server_operation_get_op_type(BYVAL AS GdaServerOperation PTR) AS GdaServerOperationType
DECLARE FUNCTION gda_server_operation_get_root_nodes(BYVAL AS GdaServerOperation PTR) AS gchar PTR PTR
DECLARE FUNCTION gda_server_operation_get_sequence_item_names(BYVAL AS GdaServerOperation PTR, BYVAL AS const gchar PTR) AS gchar PTR PTR
DECLARE FUNCTION gda_server_operation_get_sequence_max_size(BYVAL AS GdaServerOperation PTR, BYVAL AS const gchar PTR) AS guint
DECLARE FUNCTION gda_server_operation_get_sequence_min_size(BYVAL AS GdaServerOperation PTR, BYVAL AS const gchar PTR) AS guint
DECLARE FUNCTION gda_server_operation_get_sequence_name(BYVAL AS GdaServerOperation PTR, BYVAL AS const gchar PTR) AS const gchar PTR
DECLARE FUNCTION gda_server_operation_get_sequence_size(BYVAL AS GdaServerOperation PTR, BYVAL AS const gchar PTR) AS guint
DECLARE FUNCTION gda_server_operation_get_sql_identifier_at(BYVAL AS GdaServerOperation PTR, BYVAL AS GdaConnection PTR, BYVAL AS GdaServerProvider PTR, BYVAL AS const gchar PTR, ...) AS gchar PTR
DECLARE FUNCTION gda_server_operation_get_sql_identifier_at_path(BYVAL AS GdaServerOperation PTR, BYVAL AS GdaConnection PTR, BYVAL AS GdaServerProvider PTR, BYVAL AS const gchar PTR) AS gchar PTR
DECLARE FUNCTION gda_server_operation_get_value_at(BYVAL AS GdaServerOperation PTR, BYVAL AS const gchar PTR, ...) AS const GValue PTR
DECLARE FUNCTION gda_server_operation_get_value_at_path(BYVAL AS GdaServerOperation PTR, BYVAL AS const gchar PTR) AS const GValue PTR
DECLARE FUNCTION gda_server_operation_is_valid(BYVAL AS GdaServerOperation PTR, BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION gda_server_operation_load_data_from_xml(BYVAL AS GdaServerOperation PTR, BYVAL AS any ptr /' xmlNodePtr '/, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION gda_server_operation_perform_create_database(BYVAL AS GdaServerOperation PTR, BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION gda_server_operation_perform_create_table(BYVAL AS GdaServerOperation PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION gda_server_operation_perform_drop_database(BYVAL AS GdaServerOperation PTR, BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION gda_server_operation_perform_drop_table(BYVAL AS GdaServerOperation PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION gda_server_operation_save_data_to_xml(BYVAL AS GdaServerOperation PTR, BYVAL AS GError PTR PTR) AS any ptr /' xmlNodePtr '/
DECLARE FUNCTION gda_server_operation_set_value_at(BYVAL AS GdaServerOperation PTR, BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR, BYVAL AS const gchar PTR, ...) AS gboolean
DECLARE FUNCTION gda_server_operation_set_value_at_path(BYVAL AS GdaServerOperation PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR) AS gboolean
TYPE _GdaServerOperationClass
  AS GObjectClass parent_class
  seq_item_added AS SUB CDECL(BYVAL AS GdaServerOperation PTR, BYVAL AS const gchar PTR, BYVAL AS gint)
  seq_item_remove AS SUB CDECL(BYVAL AS GdaServerOperation PTR, BYVAL AS const gchar PTR, BYVAL AS gint)
  _gda_reserved1 AS SUB CDECL()
  _gda_reserved2 AS SUB CDECL()
  _gda_reserved3 AS SUB CDECL()
  _gda_reserved4 AS SUB CDECL()
END TYPE
TYPE _GdaServerOperationNode
  AS GdaServerOperationNodeType type
  AS GdaServerOperationNodeStatus status
  AS GdaSet PTR plist
  AS GdaDataModel PTR model
  AS GdaColumn PTR column
  AS GdaHolder PTR param
  AS gpointer priv
END TYPE
TYPE _GdaServerProvider
  AS GObject object
  AS GdaServerProviderPrivate PTR priv
END TYPE
DECLARE FUNCTION gda_server_provider_get_type() AS GType
#DEFINE GDA_TYPE_SERVER_PROVIDER (gda_server_provider_get_type())
#DEFINE GDA_SERVER_PROVIDER(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GDA_TYPE_SERVER_PROVIDER, GdaServerProvider))
#DEFINE GDA_SERVER_PROVIDER_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GDA_TYPE_SERVER_PROVIDER, GdaServerProviderClass))
#DEFINE GDA_IS_SERVER_PROVIDER(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GDA_TYPE_SERVER_PROVIDER))
#DEFINE GDA_IS_CLASS_SERVER_PROVIDER(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GDA_TYPE_SERVER_PROVIDER))
#DEFINE GDA_SERVER_PROVIDER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GDA_TYPE_SERVER_PROVIDER, GdaServerProviderClass))
DECLARE FUNCTION gda_server_provider_error_quark() AS GQuark
DECLARE FUNCTION gda_server_provider_load_file_contents(BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR) AS gchar PTR
DECLARE FUNCTION gda_server_provider_create_operation(BYVAL AS GdaServerProvider PTR, BYVAL AS GdaConnection PTR, BYVAL AS GdaServerOperationType, BYVAL AS GdaSet PTR, BYVAL AS GError PTR PTR) AS GdaServerOperation PTR
DECLARE FUNCTION gda_server_provider_create_parser(BYVAL AS GdaServerProvider PTR, BYVAL AS GdaConnection PTR) AS GdaSqlParser PTR
DECLARE FUNCTION gda_server_provider_escape_string(BYVAL AS GdaServerProvider PTR, BYVAL AS GdaConnection PTR, BYVAL AS const gchar PTR) AS gchar PTR
DECLARE FUNCTION gda_server_provider_find_file(BYVAL AS GdaServerProvider PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR) AS gchar PTR
DECLARE FUNCTION gda_server_provider_get_data_handler_dbms(BYVAL AS GdaServerProvider PTR, BYVAL AS GdaConnection PTR, BYVAL AS const gchar PTR) AS GdaDataHandler PTR
DECLARE FUNCTION gda_server_provider_get_data_handler_default(BYVAL AS GdaServerProvider PTR, BYVAL AS GdaConnection PTR, BYVAL AS GType, BYVAL AS const gchar PTR) AS GdaDataHandler PTR
DECLARE FUNCTION gda_server_provider_get_data_handler_g_type(BYVAL AS GdaServerProvider PTR, BYVAL AS GdaConnection PTR, BYVAL AS GType) AS GdaDataHandler PTR
DECLARE FUNCTION gda_server_provider_get_default_dbms_type(BYVAL AS GdaServerProvider PTR, BYVAL AS GdaConnection PTR, BYVAL AS GType) AS const gchar PTR
DECLARE FUNCTION gda_server_provider_get_name(BYVAL AS GdaServerProvider PTR) AS const gchar PTR
DECLARE FUNCTION gda_server_provider_get_server_version(BYVAL AS GdaServerProvider PTR, BYVAL AS GdaConnection PTR) AS const gchar PTR
DECLARE FUNCTION gda_server_provider_get_version(BYVAL AS GdaServerProvider PTR) AS const gchar PTR
DECLARE SUB gda_server_provider_handler_declare(BYVAL AS GdaServerProvider PTR, BYVAL AS GdaDataHandler PTR, BYVAL AS GdaConnection PTR, BYVAL AS GType, BYVAL AS const gchar PTR)
DECLARE FUNCTION gda_server_provider_handler_find(BYVAL AS GdaServerProvider PTR, BYVAL AS GdaConnection PTR, BYVAL AS GType, BYVAL AS const gchar PTR) AS GdaDataHandler PTR
DECLARE FUNCTION gda_server_provider_handler_use_default(BYVAL AS GdaServerProvider PTR, BYVAL AS GType) AS GdaDataHandler PTR
DECLARE FUNCTION gda_server_provider_internal_get_parser(BYVAL AS GdaServerProvider PTR) AS GdaSqlParser PTR
DECLARE FUNCTION gda_server_provider_perform_operation(BYVAL AS GdaServerProvider PTR, BYVAL AS GdaConnection PTR, BYVAL AS GdaServerOperation PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION gda_server_provider_perform_operation_default(BYVAL AS GdaServerProvider PTR, BYVAL AS GdaConnection PTR, BYVAL AS GdaServerOperation PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION gda_server_provider_render_operation(BYVAL AS GdaServerProvider PTR, BYVAL AS GdaConnection PTR, BYVAL AS GdaServerOperation PTR, BYVAL AS GError PTR PTR) AS gchar PTR
DECLARE FUNCTION gda_server_provider_string_to_value(BYVAL AS GdaServerProvider PTR, BYVAL AS GdaConnection PTR, BYVAL AS const gchar PTR, BYVAL AS GType, BYVAL AS gchar PTR PTR) AS GValue PTR
DECLARE FUNCTION gda_server_provider_supports_feature(BYVAL AS GdaServerProvider PTR, BYVAL AS GdaConnection PTR, BYVAL AS GdaConnectionFeature) AS gboolean
DECLARE FUNCTION gda_server_provider_supports_operation(BYVAL AS GdaServerProvider PTR, BYVAL AS GdaConnection PTR, BYVAL AS GdaServerOperationType, BYVAL AS GdaSet PTR) AS gboolean
DECLARE FUNCTION gda_server_provider_unescape_string(BYVAL AS GdaServerProvider PTR, BYVAL AS GdaConnection PTR, BYVAL AS const gchar PTR) AS gchar PTR
DECLARE FUNCTION gda_server_provider_value_to_sql_string(BYVAL AS GdaServerProvider PTR, BYVAL AS GdaConnection PTR, BYVAL AS GValue PTR) AS gchar PTR
TYPE GdaServerProviderAsyncCallback AS SUB CDECL(BYVAL AS GdaServerProvider PTR, BYVAL AS GdaConnection PTR, BYVAL AS guint, BYVAL AS gboolean, BYVAL AS const GError PTR, BYVAL AS gpointer)
TYPE _GdaServerProviderClass
  AS GObjectClass parent_class
  AS GThread PTR limiting_thread
  get_name AS FUNCTION CDECL(BYVAL AS GdaServerProvider PTR) AS const gchar PTR
  get_version AS FUNCTION CDECL(BYVAL AS GdaServerProvider PTR) AS const gchar PTR
  get_server_version AS FUNCTION CDECL(BYVAL AS GdaServerProvider PTR, BYVAL AS GdaConnection PTR) AS const gchar PTR
  supports_feature AS FUNCTION CDECL(BYVAL AS GdaServerProvider PTR, BYVAL AS GdaConnection PTR, BYVAL AS GdaConnectionFeature) AS gboolean
  get_data_handler AS FUNCTION CDECL(BYVAL AS GdaServerProvider PTR, BYVAL AS GdaConnection PTR, BYVAL AS GType, BYVAL AS const gchar PTR) AS GdaDataHandler PTR
  get_def_dbms_type AS FUNCTION CDECL(BYVAL AS GdaServerProvider PTR, BYVAL AS GdaConnection PTR, BYVAL AS GType) AS const gchar PTR
  escape_string AS FUNCTION CDECL(BYVAL AS GdaServerProvider PTR, BYVAL AS GdaConnection PTR, BYVAL AS const gchar PTR) AS gchar PTR
  unescape_string AS FUNCTION CDECL(BYVAL AS GdaServerProvider PTR, BYVAL AS GdaConnection PTR, BYVAL AS const gchar PTR) AS gchar PTR
  open_connection AS FUNCTION CDECL(BYVAL AS GdaServerProvider PTR, BYVAL AS GdaConnection PTR, BYVAL AS GdaQuarkList PTR, BYVAL AS GdaQuarkList PTR, BYVAL AS guint PTR, BYVAL AS GdaServerProviderAsyncCallback, BYVAL AS gpointer) AS gboolean
  close_connection AS FUNCTION CDECL(BYVAL AS GdaServerProvider PTR, BYVAL AS GdaConnection PTR) AS gboolean
  get_database AS FUNCTION CDECL(BYVAL AS GdaServerProvider PTR, BYVAL AS GdaConnection PTR) AS const gchar PTR
  supports_operation AS FUNCTION CDECL(BYVAL AS GdaServerProvider PTR, BYVAL AS GdaConnection PTR, BYVAL AS GdaServerOperationType, BYVAL AS GdaSet PTR) AS gboolean
  create_operation AS FUNCTION CDECL(BYVAL AS GdaServerProvider PTR, BYVAL AS GdaConnection PTR, BYVAL AS GdaServerOperationType, BYVAL AS GdaSet PTR, BYVAL AS GError PTR PTR) AS GdaServerOperation PTR
  render_operation AS FUNCTION CDECL(BYVAL AS GdaServerProvider PTR, BYVAL AS GdaConnection PTR, BYVAL AS GdaServerOperation PTR, BYVAL AS GError PTR PTR) AS gchar PTR
  perform_operation AS FUNCTION CDECL(BYVAL AS GdaServerProvider PTR, BYVAL AS GdaConnection PTR, BYVAL AS GdaServerOperation PTR, BYVAL AS guint PTR, BYVAL AS GdaServerProviderAsyncCallback, BYVAL AS gpointer, BYVAL AS GError PTR PTR) AS gboolean
  begin_transaction AS FUNCTION CDECL(BYVAL AS GdaServerProvider PTR, BYVAL AS GdaConnection PTR, BYVAL AS const gchar PTR, BYVAL AS GdaTransactionIsolation, BYVAL AS GError PTR PTR) AS gboolean
  commit_transaction AS FUNCTION CDECL(BYVAL AS GdaServerProvider PTR, BYVAL AS GdaConnection PTR, BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR) AS gboolean
  rollback_transaction AS FUNCTION CDECL(BYVAL AS GdaServerProvider PTR, BYVAL AS GdaConnection PTR, BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR) AS gboolean
  add_savepoint AS FUNCTION CDECL(BYVAL AS GdaServerProvider PTR, BYVAL AS GdaConnection PTR, BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR) AS gboolean
  rollback_savepoint AS FUNCTION CDECL(BYVAL AS GdaServerProvider PTR, BYVAL AS GdaConnection PTR, BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR) AS gboolean
  delete_savepoint AS FUNCTION CDECL(BYVAL AS GdaServerProvider PTR, BYVAL AS GdaConnection PTR, BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR) AS gboolean
  create_parser AS FUNCTION CDECL(BYVAL AS GdaServerProvider PTR, BYVAL AS GdaConnection PTR) AS GdaSqlParser PTR
  statement_to_sql AS FUNCTION CDECL(BYVAL AS GdaServerProvider PTR, BYVAL AS GdaConnection PTR, BYVAL AS GdaStatement PTR, BYVAL AS GdaSet PTR, BYVAL AS GdaStatementSqlFlag, BYVAL AS GSList PTR PTR, BYVAL AS GError PTR PTR) AS gchar PTR
  statement_prepare AS FUNCTION CDECL(BYVAL AS GdaServerProvider PTR, BYVAL AS GdaConnection PTR, BYVAL AS GdaStatement PTR, BYVAL AS GError PTR PTR) AS gboolean
  statement_execute AS FUNCTION CDECL(BYVAL AS GdaServerProvider PTR, BYVAL AS GdaConnection PTR, BYVAL AS GdaStatement PTR, BYVAL AS GdaSet PTR, BYVAL AS GdaStatementModelUsage, BYVAL AS GType PTR, BYVAL AS GdaSet PTR PTR, BYVAL AS guint PTR, BYVAL AS GdaServerProviderExecCallback, BYVAL AS gpointer, BYVAL AS GError PTR PTR) AS GObject PTR
  is_busy AS FUNCTION CDECL(BYVAL AS GdaServerProvider PTR, BYVAL AS GdaConnection PTR, BYVAL AS GError PTR PTR) AS gboolean
  cancel AS FUNCTION CDECL(BYVAL AS GdaServerProvider PTR, BYVAL AS GdaConnection PTR, BYVAL AS guint, BYVAL AS GError PTR PTR) AS gboolean
  create_connection AS FUNCTION CDECL(BYVAL AS GdaServerProvider PTR) AS GdaConnection PTR
  AS GdaServerProviderMeta meta_funcs
  AS GdaServerProviderXa PTR xa_funcs
  identifier_quote AS FUNCTION CDECL(BYVAL AS GdaServerProvider PTR, BYVAL AS GdaConnection PTR, BYVAL AS const gchar PTR, BYVAL AS gboolean, BYVAL AS gboolean) AS gchar PTR
  handle_async AS FUNCTION CDECL(BYVAL AS GdaServerProvider PTR, BYVAL AS GdaConnection PTR, BYVAL AS GError PTR PTR) AS gboolean
  statement_rewrite AS FUNCTION CDECL(BYVAL AS GdaServerProvider PTR, BYVAL AS GdaConnection PTR, BYVAL AS GdaStatement PTR, BYVAL AS GdaSet PTR, BYVAL AS GError PTR PTR) AS GdaSqlStatement PTR
  _gda_reserved1 AS SUB CDECL()
  _gda_reserved2 AS SUB CDECL()
  _gda_reserved3 AS SUB CDECL()
  _gda_reserved4 AS SUB CDECL()
  _gda_reserved5 AS SUB CDECL()
  _gda_reserved6 AS SUB CDECL()
END TYPE
TYPE _GdaServerProviderHandlerInfo
  AS GdaConnection PTR cnc
  AS GType g_type
  AS gchar PTR dbms_type
END TYPE
TYPE _GdaServerProviderPrivate
  AS GHashTable PTR data_handlers
  AS GdaSqlParser PTR parser
END TYPE
TYPE _GdaServerProviderXa
  xa_start AS FUNCTION CDECL(BYVAL AS GdaServerProvider PTR, BYVAL AS GdaConnection PTR, BYVAL AS const GdaXaTransactionId PTR, BYVAL AS GError PTR PTR) AS gboolean
  xa_end AS FUNCTION CDECL(BYVAL AS GdaServerProvider PTR, BYVAL AS GdaConnection PTR, BYVAL AS const GdaXaTransactionId PTR, BYVAL AS GError PTR PTR) AS gboolean
  xa_prepare AS FUNCTION CDECL(BYVAL AS GdaServerProvider PTR, BYVAL AS GdaConnection PTR, BYVAL AS const GdaXaTransactionId PTR, BYVAL AS GError PTR PTR) AS gboolean
  xa_commit AS FUNCTION CDECL(BYVAL AS GdaServerProvider PTR, BYVAL AS GdaConnection PTR, BYVAL AS const GdaXaTransactionId PTR, BYVAL AS GError PTR PTR) AS gboolean
  xa_rollback AS FUNCTION CDECL(BYVAL AS GdaServerProvider PTR, BYVAL AS GdaConnection PTR, BYVAL AS const GdaXaTransactionId PTR, BYVAL AS GError PTR PTR) AS gboolean
  xa_recover AS FUNCTION CDECL(BYVAL AS GdaServerProvider PTR, BYVAL AS GdaConnection PTR, BYVAL AS GError PTR PTR) AS GList PTR
END TYPE
TYPE _GdaSetGroup
  AS GSList PTR nodes
  AS GdaSetSource PTR nodes_source
  AS gpointer _gda_reserved1
  AS gpointer _gda_reserved2
END TYPE
DECLARE FUNCTION gda_set_group_new(BYVAL AS GdaSetNode PTR) AS GdaSetGroup PTR
DECLARE SUB gda_set_group_add_node(BYVAL AS GdaSetGroup PTR, BYVAL AS GdaSetNode PTR)
DECLARE FUNCTION gda_set_group_copy(BYVAL AS GdaSetGroup PTR) AS GdaSetGroup PTR
DECLARE SUB gda_set_group_free(BYVAL AS GdaSetGroup PTR)
DECLARE FUNCTION gda_set_group_get_n_nodes(BYVAL AS GdaSetGroup PTR) AS gint
DECLARE FUNCTION gda_set_group_get_node(BYVAL AS GdaSetGroup PTR) AS GdaSetNode PTR
DECLARE FUNCTION gda_set_group_get_nodes(BYVAL AS GdaSetGroup PTR) AS GSList PTR
DECLARE FUNCTION gda_set_group_get_source(BYVAL AS GdaSetGroup PTR) AS GdaSetSource PTR
DECLARE SUB gda_set_group_set_source(BYVAL AS GdaSetGroup PTR, BYVAL AS GdaSetSource PTR)
TYPE _GdaSetNode
  AS GdaHolder PTR holder
  AS GdaDataModel PTR source_model
  AS gint source_column
  AS gpointer _gda_reserved1
  AS gpointer _gda_reserved2
END TYPE
DECLARE FUNCTION gda_set_node_new(BYVAL AS GdaHolder PTR) AS GdaSetNode PTR
DECLARE FUNCTION gda_set_node_copy(BYVAL AS GdaSetNode PTR) AS GdaSetNode PTR
DECLARE SUB gda_set_node_free(BYVAL AS GdaSetNode PTR)
DECLARE FUNCTION gda_set_node_get_data_model(BYVAL AS GdaSetNode PTR) AS GdaDataModel PTR
DECLARE FUNCTION gda_set_node_get_holder(BYVAL AS GdaSetNode PTR) AS GdaHolder PTR
DECLARE FUNCTION gda_set_node_get_source_column(BYVAL AS GdaSetNode PTR) AS gint
DECLARE SUB gda_set_node_set_data_model(BYVAL AS GdaSetNode PTR, BYVAL AS GdaDataModel PTR)
DECLARE SUB gda_set_node_set_holder(BYVAL AS GdaSetNode PTR, BYVAL AS GdaHolder PTR)
DECLARE SUB gda_set_node_set_source_column(BYVAL AS GdaSetNode PTR, BYVAL AS gint)
TYPE _GdaSetSource
  AS GdaDataModel PTR data_model
  AS GSList PTR nodes
  AS gpointer _gda_reserved1
  AS gpointer _gda_reserved2
  AS gpointer _gda_reserved3
  AS gpointer _gda_reserved4
END TYPE
DECLARE FUNCTION gda_set_source_new(BYVAL AS GdaDataModel PTR) AS GdaSetSource PTR
DECLARE SUB gda_set_source_add_node(BYVAL AS GdaSetSource PTR, BYVAL AS GdaSetNode PTR)
DECLARE FUNCTION gda_set_source_copy(BYVAL AS GdaSetSource PTR) AS GdaSetSource PTR
DECLARE SUB gda_set_source_free(BYVAL AS GdaSetSource PTR)
DECLARE FUNCTION gda_set_source_get_data_model(BYVAL AS GdaSetSource PTR) AS GdaDataModel PTR
DECLARE FUNCTION gda_set_source_get_n_nodes(BYVAL AS GdaSetSource PTR) AS gint
DECLARE FUNCTION gda_set_source_get_nodes(BYVAL AS GdaSetSource PTR) AS GSList PTR
DECLARE SUB gda_set_source_set_data_model(BYVAL AS GdaSetSource PTR, BYVAL AS GdaDataModel PTR)
DECLARE FUNCTION gda_short_get_type() AS GType
#DEFINE GDA_TYPE_SHORT (gda_short_get_type())
#DEFINE GDA_SHORT(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GDA_TYPE_SHORT, GdaShort))
#DEFINE GDA_SHORT_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GDA_TYPE_SHORT, Gda))
#DEFINE GDA_IS_SHORT(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GDA_TYPE_SHORT))
#DEFINE GDA_IS_CLASS_SHORT(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GDA_TYPE_SHORT))
#DEFINE GDA_SHORT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GDA_TYPE_SHORT, Gda))
TYPE _GdaSqlAnyPart
  AS GdaSqlAnyPartType type
  AS GdaSqlAnyPart PTR parent
END TYPE
DECLARE FUNCTION gda_sql_any_part_check_structure(BYVAL AS GdaSqlAnyPart PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION gda_sql_any_part_foreach(BYVAL AS GdaSqlAnyPart PTR, BYVAL AS GdaSqlForeachFunc, BYVAL AS gpointer, BYVAL AS GError PTR PTR) AS gboolean
TYPE _GdaSqlBuilder
  AS GObject object
  AS GdaSqlBuilderPrivate PTR priv
END TYPE
DECLARE FUNCTION gda_sql_builder_get_type() AS GType
#DEFINE GDA_TYPE_SQL_BUILDER (gda_sql_builder_get_type())
#DEFINE GDA_SQL_BUILDER(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GDA_TYPE_SQL_BUILDER, GdaSqlBuilder))
#DEFINE GDA_SQL_BUILDER_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GDA_TYPE_SQL_BUILDER, GdaSqlBuilderClass))
#DEFINE GDA_IS_SQL_BUILDER(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GDA_TYPE_SQL_BUILDER))
#DEFINE GDA_IS_CLASS_SQL_BUILDER(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GDA_TYPE_SQL_BUILDER))
#DEFINE GDA_SQL_BUILDER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GDA_TYPE_SQL_BUILDER, GdaSqlBuilderClass))
DECLARE FUNCTION gda_sql_builder_new(BYVAL AS GdaSqlStatementType) AS GdaSqlBuilder PTR
DECLARE FUNCTION gda_sql_builder_error_quark() AS GQuark
DECLARE FUNCTION gda_sql_builder_add_case(BYVAL AS GdaSqlBuilder PTR, BYVAL AS GdaSqlBuilderId, BYVAL AS GdaSqlBuilderId, ...) AS GdaSqlBuilderId
DECLARE FUNCTION gda_sql_builder_add_case_v(BYVAL AS GdaSqlBuilder PTR, BYVAL AS GdaSqlBuilderId, BYVAL AS GdaSqlBuilderId, BYVAL AS const GdaSqlBuilderId PTR, BYVAL AS const GdaSqlBuilderId PTR, BYVAL AS gint) AS GdaSqlBuilderId
DECLARE FUNCTION gda_sql_builder_add_cond(BYVAL AS GdaSqlBuilder PTR, BYVAL AS GdaSqlOperatorType, BYVAL AS GdaSqlBuilderId, BYVAL AS GdaSqlBuilderId, BYVAL AS GdaSqlBuilderId) AS GdaSqlBuilderId
DECLARE FUNCTION gda_sql_builder_add_cond_v(BYVAL AS GdaSqlBuilder PTR, BYVAL AS GdaSqlOperatorType, BYVAL AS const GdaSqlBuilderId PTR, BYVAL AS gint) AS GdaSqlBuilderId
DECLARE FUNCTION gda_sql_builder_add_expr(BYVAL AS GdaSqlBuilder PTR, BYVAL AS GdaDataHandler PTR, BYVAL AS GType, ...) AS GdaSqlBuilderId
DECLARE FUNCTION gda_sql_builder_add_expr_value(BYVAL AS GdaSqlBuilder PTR, BYVAL AS GdaDataHandler PTR, BYVAL AS const GValue PTR) AS GdaSqlBuilderId
DECLARE FUNCTION gda_sql_builder_add_field_id(BYVAL AS GdaSqlBuilder PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR) AS GdaSqlBuilderId
DECLARE SUB gda_sql_builder_add_field_value(BYVAL AS GdaSqlBuilder PTR, BYVAL AS const gchar PTR, BYVAL AS GType, ...)
DECLARE SUB gda_sql_builder_add_field_value_as_gvalue(BYVAL AS GdaSqlBuilder PTR, BYVAL AS const gchar PTR, BYVAL AS const GValue PTR)
DECLARE SUB gda_sql_builder_add_field_value_id(BYVAL AS GdaSqlBuilder PTR, BYVAL AS GdaSqlBuilderId, BYVAL AS GdaSqlBuilderId)
DECLARE FUNCTION gda_sql_builder_add_function(BYVAL AS GdaSqlBuilder PTR, BYVAL AS const gchar PTR, ...) AS GdaSqlBuilderId
DECLARE FUNCTION gda_sql_builder_add_function_v(BYVAL AS GdaSqlBuilder PTR, BYVAL AS const gchar PTR, BYVAL AS const GdaSqlBuilderId PTR, BYVAL AS gint) AS GdaSqlBuilderId
DECLARE FUNCTION gda_sql_builder_add_id(BYVAL AS GdaSqlBuilder PTR, BYVAL AS const gchar PTR) AS GdaSqlBuilderId
DECLARE FUNCTION gda_sql_builder_add_param(BYVAL AS GdaSqlBuilder PTR, BYVAL AS const gchar PTR, BYVAL AS GType, BYVAL AS gboolean) AS GdaSqlBuilderId
DECLARE FUNCTION gda_sql_builder_add_sub_select(BYVAL AS GdaSqlBuilder PTR, BYVAL AS GdaSqlStatement PTR) AS GdaSqlBuilderId
DECLARE SUB gda_sql_builder_compound_add_sub_select(BYVAL AS GdaSqlBuilder PTR, BYVAL AS GdaSqlStatement PTR)
DECLARE SUB gda_sql_builder_compound_add_sub_select_from_builder(BYVAL AS GdaSqlBuilder PTR, BYVAL AS GdaSqlBuilder PTR)
DECLARE SUB gda_sql_builder_compound_set_type(BYVAL AS GdaSqlBuilder PTR, BYVAL AS GdaSqlStatementCompoundType)
DECLARE FUNCTION gda_sql_builder_export_expression(BYVAL AS GdaSqlBuilder PTR, BYVAL AS GdaSqlBuilderId) AS GdaSqlExpr PTR
DECLARE FUNCTION gda_sql_builder_get_sql_statement(BYVAL AS GdaSqlBuilder PTR) AS GdaSqlStatement PTR
DECLARE FUNCTION gda_sql_builder_get_statement(BYVAL AS GdaSqlBuilder PTR, BYVAL AS GError PTR PTR) AS GdaStatement PTR
DECLARE FUNCTION gda_sql_builder_import_expression(BYVAL AS GdaSqlBuilder PTR, BYVAL AS GdaSqlExpr PTR) AS GdaSqlBuilderId
DECLARE FUNCTION gda_sql_builder_import_expression_from_builder(BYVAL AS GdaSqlBuilder PTR, BYVAL AS GdaSqlBuilder PTR, BYVAL AS GdaSqlBuilderId) AS GdaSqlBuilderId
DECLARE SUB gda_sql_builder_join_add_field(BYVAL AS GdaSqlBuilder PTR, BYVAL AS GdaSqlBuilderId, BYVAL AS const gchar PTR)
DECLARE FUNCTION gda_sql_builder_select_add_field(BYVAL AS GdaSqlBuilder PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR) AS GdaSqlBuilderId
DECLARE FUNCTION gda_sql_builder_select_add_target(BYVAL AS GdaSqlBuilder PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR) AS GdaSqlBuilderId
DECLARE FUNCTION gda_sql_builder_select_add_target_id(BYVAL AS GdaSqlBuilder PTR, BYVAL AS GdaSqlBuilderId, BYVAL AS const gchar PTR) AS GdaSqlBuilderId
DECLARE SUB gda_sql_builder_select_group_by(BYVAL AS GdaSqlBuilder PTR, BYVAL AS GdaSqlBuilderId)
DECLARE FUNCTION gda_sql_builder_select_join_targets(BYVAL AS GdaSqlBuilder PTR, BYVAL AS GdaSqlBuilderId, BYVAL AS GdaSqlBuilderId, BYVAL AS GdaSqlSelectJoinType, BYVAL AS GdaSqlBuilderId) AS GdaSqlBuilderId
DECLARE SUB gda_sql_builder_select_order_by(BYVAL AS GdaSqlBuilder PTR, BYVAL AS GdaSqlBuilderId, BYVAL AS gboolean, BYVAL AS const gchar PTR)
DECLARE SUB gda_sql_builder_select_set_distinct(BYVAL AS GdaSqlBuilder PTR, BYVAL AS gboolean, BYVAL AS GdaSqlBuilderId)
DECLARE SUB gda_sql_builder_select_set_having(BYVAL AS GdaSqlBuilder PTR, BYVAL AS GdaSqlBuilderId)
DECLARE SUB gda_sql_builder_select_set_limit(BYVAL AS GdaSqlBuilder PTR, BYVAL AS GdaSqlBuilderId, BYVAL AS GdaSqlBuilderId)
DECLARE SUB gda_sql_builder_set_table(BYVAL AS GdaSqlBuilder PTR, BYVAL AS const gchar PTR)
DECLARE SUB gda_sql_builder_set_where(BYVAL AS GdaSqlBuilder PTR, BYVAL AS GdaSqlBuilderId)
TYPE _GdaSqlBuilderClass
  AS GObjectClass parent_class
  _gda_reserved1 AS SUB CDECL()
  _gda_reserved2 AS SUB CDECL()
  _gda_reserved3 AS SUB CDECL()
  _gda_reserved4 AS SUB CDECL()
END TYPE
TYPE _GdaSqlCase
  AS GdaSqlAnyPart any
  AS GdaSqlExpr PTR base_expr
  AS GSList PTR when_expr_list
  AS GSList PTR then_expr_list
  AS GdaSqlExpr PTR else_expr
  AS gpointer _gda_reserved1
  AS gpointer _gda_reserved2
END TYPE
DECLARE FUNCTION gda_sql_case_copy(BYVAL AS GdaSqlCase PTR) AS GdaSqlCase PTR
DECLARE SUB gda_sql_case_free(BYVAL AS GdaSqlCase PTR)
DECLARE FUNCTION gda_sql_case_serialize(BYVAL AS GdaSqlCase PTR) AS gchar PTR
DECLARE FUNCTION gda_sql_case_new(BYVAL AS GdaSqlAnyPart PTR) AS GdaSqlCase PTR
TYPE _GdaSqlExpr
  AS GdaSqlAnyPart any
  AS GValue PTR value
  AS any ptr /' GdaSqlParamSpec '/ PTR param_spec
  AS GdaSqlFunction PTR func
  AS GdaSqlOperation PTR cond
  AS GdaSqlAnyPart PTR select
  AS GdaSqlCase PTR case_s
  AS gchar PTR cast_as
  AS gboolean value_is_ident
  AS gpointer _gda_reserved1
  AS gpointer _gda_reserved2
  AS gpointer _gda_reserved3
  AS gpointer _gda_reserved4
END TYPE
DECLARE FUNCTION gda_sql_expr_new(BYVAL AS GdaSqlAnyPart PTR) AS GdaSqlExpr PTR
DECLARE FUNCTION gda_sql_expr_copy(BYVAL AS GdaSqlExpr PTR) AS GdaSqlExpr PTR
DECLARE SUB gda_sql_expr_free(BYVAL AS GdaSqlExpr PTR)
DECLARE FUNCTION gda_sql_expr_serialize(BYVAL AS GdaSqlExpr PTR) AS gchar PTR
DECLARE SUB gda_sql_expr_take_select(BYVAL AS GdaSqlExpr PTR, BYVAL AS GdaSqlStatement PTR)
TYPE _GdaSqlField
  AS GdaSqlAnyPart any
  AS gchar PTR field_name
  AS GdaMetaTableColumn PTR validity_meta_table_column
  AS gpointer _gda_reserved1
  AS gpointer _gda_reserved2
END TYPE
DECLARE FUNCTION gda_sql_field_copy(BYVAL AS GdaSqlField PTR) AS GdaSqlField PTR
DECLARE SUB gda_sql_field_free(BYVAL AS GdaSqlField PTR)
DECLARE FUNCTION gda_sql_field_serialize(BYVAL AS GdaSqlField PTR) AS gchar PTR
DECLARE SUB gda_sql_field_take_name(BYVAL AS GdaSqlField PTR, BYVAL AS GValue PTR)
DECLARE FUNCTION gda_sql_field_new(BYVAL AS GdaSqlAnyPart PTR) AS GdaSqlField PTR
TYPE _GdaSqlFunction
  AS GdaSqlAnyPart any
  AS gchar PTR function_name
  AS GSList PTR args_list
  AS gpointer _gda_reserved1
  AS gpointer _gda_reserved2
END TYPE
DECLARE SUB gda_sql_function_check_clean(BYVAL AS GdaSqlFunction PTR)
DECLARE FUNCTION gda_sql_function_copy(BYVAL AS GdaSqlFunction PTR) AS GdaSqlFunction PTR
DECLARE SUB gda_sql_function_free(BYVAL AS GdaSqlFunction PTR)
DECLARE FUNCTION gda_sql_function_serialize(BYVAL AS GdaSqlFunction PTR) AS gchar PTR
DECLARE SUB gda_sql_function_take_args_list(BYVAL AS GdaSqlFunction PTR, BYVAL AS GSList PTR)
DECLARE SUB gda_sql_function_take_name(BYVAL AS GdaSqlFunction PTR, BYVAL AS GValue PTR)
DECLARE FUNCTION gda_sql_function_new(BYVAL AS GdaSqlAnyPart PTR) AS GdaSqlFunction PTR
TYPE _GdaSqlOperation
  AS GdaSqlAnyPart any
  AS GdaSqlOperatorType operator_type
  AS GSList PTR operands
  AS gpointer _gda_reserved1
  AS gpointer _gda_reserved2
END TYPE
DECLARE FUNCTION gda_sql_operation_copy(BYVAL AS GdaSqlOperation PTR) AS GdaSqlOperation PTR
DECLARE SUB gda_sql_operation_free(BYVAL AS GdaSqlOperation PTR)
DECLARE FUNCTION gda_sql_operation_serialize(BYVAL AS GdaSqlOperation PTR) AS gchar PTR
DECLARE FUNCTION gda_sql_operation_new(BYVAL AS GdaSqlAnyPart PTR) AS GdaSqlOperation PTR
DECLARE FUNCTION gda_sql_operation_operator_from_string(BYVAL AS const gchar PTR) AS GdaSqlOperatorType
DECLARE FUNCTION gda_sql_operation_operator_to_string(BYVAL AS GdaSqlOperatorType) AS const gchar PTR
TYPE _GdaSqlParser
  AS GObject object
  AS GdaSqlParserPrivate PTR priv
END TYPE
DECLARE FUNCTION gda_sql_parser_get_type() AS GType
#DEFINE GDA_TYPE_SQL_PARSER (gda_sql_parser_get_type())
#DEFINE GDA_SQL_PARSER(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GDA_TYPE_SQL_PARSER, GdaSqlParser))
#DEFINE GDA_SQL_PARSER_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GDA_TYPE_SQL_PARSER, GdaSqlParserClass))
#DEFINE GDA_IS_SQL_PARSER(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GDA_TYPE_SQL_PARSER))
#DEFINE GDA_IS_CLASS_SQL_PARSER(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GDA_TYPE_SQL_PARSER))
#DEFINE GDA_SQL_PARSER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GDA_TYPE_SQL_PARSER, GdaSqlParserClass))
DECLARE FUNCTION gda_sql_parser_new() AS GdaSqlParser PTR
DECLARE FUNCTION gda_sql_parser_error_quark() AS GQuark
DECLARE FUNCTION gda_sql_parser_parse_file_as_batch(BYVAL AS GdaSqlParser PTR, BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR) AS GdaBatch PTR
DECLARE FUNCTION gda_sql_parser_parse_string(BYVAL AS GdaSqlParser PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR PTR, BYVAL AS GError PTR PTR) AS GdaStatement PTR
DECLARE FUNCTION gda_sql_parser_parse_string_as_batch(BYVAL AS GdaSqlParser PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR PTR, BYVAL AS GError PTR PTR) AS GdaBatch PTR
DECLARE SUB gda_sql_parser_set_overflow_error(BYVAL AS GdaSqlParser PTR)
DECLARE SUB gda_sql_parser_set_syntax_error(BYVAL AS GdaSqlParser PTR)
TYPE _GdaSqlParserClass
  AS GObjectClass parent_class
  delim_alloc AS FUNCTION CDECL(BYVAL AS gpointer PTR) AS any /' void '/ PTR
  delim_free AS SUB CDECL(BYVAL AS any /' void '/ PTR, BYVAL AS gpointer PTR)
  delim_trace AS SUB CDECL(BYVAL AS any /' void '/ PTR, BYVAL AS char PTR)
  delim_parse AS SUB CDECL(BYVAL AS any /' void '/ PTR, BYVAL AS gint /' int '/, BYVAL AS GValue PTR, BYVAL AS GdaSqlParserIface PTR)
  AS gint PTR delim_tokens_trans
  parser_alloc AS FUNCTION CDECL(BYVAL AS gpointer PTR) AS any /' void '/ PTR
  parser_free AS SUB CDECL(BYVAL AS any /' void '/ PTR, BYVAL AS gpointer PTR)
  parser_trace AS SUB CDECL(BYVAL AS any /' void '/ PTR, BYVAL AS char PTR)
  parser_parse AS SUB CDECL(BYVAL AS any /' void '/ PTR, BYVAL AS gint /' int '/, BYVAL AS GValue PTR, BYVAL AS GdaSqlParserIface PTR)
  AS gint PTR parser_tokens_trans
  _gda_reserved1 AS SUB CDECL()
  _gda_reserved2 AS SUB CDECL()
  _gda_reserved3 AS SUB CDECL()
  _gda_reserved4 AS SUB CDECL()
END TYPE
TYPE _GdaSqlParserIface
  AS GdaSqlParser PTR parser
  AS GdaSqlStatement PTR parsed_statement
  AS gpointer _gda_reserved1
  AS gpointer _gda_reserved2
END TYPE
TYPE _GdaSqlRenderingContext
  AS GdaStatementSqlFlag flags
  AS GdaSet PTR params
  AS GSList PTR params_used
  AS GdaServerProvider PTR provider
  AS GdaConnection PTR cnc
  AS GdaSqlRenderingValue render_value
  AS GdaSqlRenderingPSpecFunc render_param_spec
  AS GdaSqlRenderingExpr render_expr
  AS GdaSqlRenderingFunc render_unknown
  AS GdaSqlRenderingFunc render_begin
  AS GdaSqlRenderingFunc render_rollback
  AS GdaSqlRenderingFunc render_commit
  AS GdaSqlRenderingFunc render_savepoint
  AS GdaSqlRenderingFunc render_rollback_savepoint
  AS GdaSqlRenderingFunc render_delete_savepoint
  AS GdaSqlRenderingFunc render_select
  AS GdaSqlRenderingFunc render_insert
  AS GdaSqlRenderingFunc render_delete
  AS GdaSqlRenderingFunc render_update
  AS GdaSqlRenderingFunc render_compound
  AS GdaSqlRenderingFunc render_field
  AS GdaSqlRenderingFunc render_table
  AS GdaSqlRenderingFunc render_function
  AS GdaSqlRenderingFunc render_operation
  AS GdaSqlRenderingFunc render_case
  AS GdaSqlRenderingFunc render_select_field
  AS GdaSqlRenderingFunc render_select_target
  AS GdaSqlRenderingFunc render_select_join
  AS GdaSqlRenderingFunc render_select_from
  AS GdaSqlRenderingFunc render_select_order
  AS GdaSqlRenderingFunc render_distinct
  _gda_reserved1 AS SUB CDECL()
  _gda_reserved2 AS SUB CDECL()
  _gda_reserved3 AS SUB CDECL()
  _gda_reserved4 AS SUB CDECL()
  _gda_reserved5 AS SUB CDECL()
  _gda_reserved6 AS SUB CDECL()
  _gda_reserved7 AS SUB CDECL()
END TYPE
TYPE _GdaSqlSelectField
  AS GdaSqlAnyPart any
  AS GdaSqlExpr PTR expr
  AS gchar PTR field_name
  AS gchar PTR table_name
  AS gchar PTR as
  AS GdaMetaDbObject PTR validity_meta_object
  AS GdaMetaTableColumn PTR validity_meta_table_column
  AS gpointer _gda_reserved1
  AS gpointer _gda_reserved2
END TYPE
DECLARE FUNCTION gda_sql_select_field_copy(BYVAL AS GdaSqlSelectField PTR) AS GdaSqlSelectField PTR
DECLARE SUB gda_sql_select_field_free(BYVAL AS GdaSqlSelectField PTR)
DECLARE FUNCTION gda_sql_select_field_serialize(BYVAL AS GdaSqlSelectField PTR) AS gchar PTR
DECLARE SUB gda_sql_select_field_take_alias(BYVAL AS GdaSqlSelectField PTR, BYVAL AS GValue PTR)
DECLARE SUB gda_sql_select_field_take_expr(BYVAL AS GdaSqlSelectField PTR, BYVAL AS GdaSqlExpr PTR)
DECLARE SUB gda_sql_select_field_take_star_value(BYVAL AS GdaSqlSelectField PTR, BYVAL AS GValue PTR)
DECLARE FUNCTION gda_sql_select_field_new(BYVAL AS GdaSqlAnyPart PTR) AS GdaSqlSelectField PTR
TYPE _GdaSqlSelectFrom
  AS GdaSqlAnyPart any
  AS GSList PTR targets
  AS GSList PTR joins
  AS gpointer _gda_reserved1
  AS gpointer _gda_reserved2
END TYPE
DECLARE FUNCTION gda_sql_select_from_copy(BYVAL AS GdaSqlSelectFrom PTR) AS GdaSqlSelectFrom PTR
DECLARE SUB gda_sql_select_from_free(BYVAL AS GdaSqlSelectFrom PTR)
DECLARE FUNCTION gda_sql_select_from_serialize(BYVAL AS GdaSqlSelectFrom PTR) AS gchar PTR
DECLARE SUB gda_sql_select_from_take_new_join(BYVAL AS GdaSqlSelectFrom PTR, BYVAL AS GdaSqlSelectJoin PTR)
DECLARE SUB gda_sql_select_from_take_new_target(BYVAL AS GdaSqlSelectFrom PTR, BYVAL AS GdaSqlSelectTarget PTR)
DECLARE FUNCTION gda_sql_select_from_new(BYVAL AS GdaSqlAnyPart PTR) AS GdaSqlSelectFrom PTR
TYPE _GdaSqlSelectJoin
  AS GdaSqlAnyPart any
  AS GdaSqlSelectJoinType type
  AS gint position
  AS GdaSqlExpr PTR expr
  AS GSList PTR use
  AS gpointer _gda_reserved1
  AS gpointer _gda_reserved2
END TYPE
DECLARE FUNCTION gda_sql_select_join_copy(BYVAL AS GdaSqlSelectJoin PTR) AS GdaSqlSelectJoin PTR
DECLARE SUB gda_sql_select_join_free(BYVAL AS GdaSqlSelectJoin PTR)
DECLARE FUNCTION gda_sql_select_join_serialize(BYVAL AS GdaSqlSelectJoin PTR) AS gchar PTR
DECLARE FUNCTION gda_sql_select_join_new(BYVAL AS GdaSqlAnyPart PTR) AS GdaSqlSelectJoin PTR
DECLARE FUNCTION gda_sql_select_join_type_to_string(BYVAL AS GdaSqlSelectJoinType) AS const gchar PTR
TYPE _GdaSqlSelectOrder
  AS GdaSqlAnyPart any
  AS GdaSqlExpr PTR expr
  AS gboolean asc
  AS gchar PTR collation_name
  AS gpointer _gda_reserved1
  AS gpointer _gda_reserved2
END TYPE
DECLARE FUNCTION gda_sql_select_order_copy(BYVAL AS GdaSqlSelectOrder PTR) AS GdaSqlSelectOrder PTR
DECLARE SUB gda_sql_select_order_free(BYVAL AS GdaSqlSelectOrder PTR)
DECLARE FUNCTION gda_sql_select_order_serialize(BYVAL AS GdaSqlSelectOrder PTR) AS gchar PTR
DECLARE FUNCTION gda_sql_select_order_new(BYVAL AS GdaSqlAnyPart PTR) AS GdaSqlSelectOrder PTR
TYPE _GdaSqlSelectTarget
  AS GdaSqlAnyPart any
  AS GdaSqlExpr PTR expr
  AS gchar PTR table_name
  AS gchar PTR as
  AS GdaMetaDbObject PTR validity_meta_object
  AS gpointer _gda_reserved1
  AS gpointer _gda_reserved2
END TYPE
DECLARE FUNCTION gda_sql_select_target_copy(BYVAL AS GdaSqlSelectTarget PTR) AS GdaSqlSelectTarget PTR
DECLARE SUB gda_sql_select_target_free(BYVAL AS GdaSqlSelectTarget PTR)
DECLARE FUNCTION gda_sql_select_target_serialize(BYVAL AS GdaSqlSelectTarget PTR) AS gchar PTR
DECLARE SUB gda_sql_select_target_take_alias(BYVAL AS GdaSqlSelectTarget PTR, BYVAL AS GValue PTR)
DECLARE SUB gda_sql_select_target_take_select(BYVAL AS GdaSqlSelectTarget PTR, BYVAL AS GdaSqlStatement PTR)
DECLARE SUB gda_sql_select_target_take_table_name(BYVAL AS GdaSqlSelectTarget PTR, BYVAL AS GValue PTR)
DECLARE FUNCTION gda_sql_select_target_new(BYVAL AS GdaSqlAnyPart PTR) AS GdaSqlSelectTarget PTR
DECLARE SUB gda_sql_statement_compound_set_type(BYVAL AS GdaSqlStatement PTR, BYVAL AS GdaSqlStatementCompoundType)
DECLARE SUB gda_sql_statement_compound_take_stmt(BYVAL AS GdaSqlStatement PTR, BYVAL AS GdaSqlStatement PTR)
TYPE _GdaSqlStatementCheckValidityData
  AS GdaConnection PTR cnc
  AS GdaMetaStore PTR store
  AS GdaMetaStruct PTR mstruct
  AS gpointer _gda_reserved1
  AS gpointer _gda_reserved2
  AS gpointer _gda_reserved3
  AS gpointer _gda_reserved4
END TYPE
TYPE _GdaSqlStatementCompound
  AS GdaSqlAnyPart any
  AS GdaSqlStatementCompoundType compound_type
  AS GSList PTR stmt_list
  AS gpointer _gda_reserved1
  AS gpointer _gda_reserved2
END TYPE
TYPE _GdaSqlStatementContentsInfo
  AS GdaSqlStatementType type
  AS gchar PTR name
  construct AS FUNCTION CDECL() AS gpointer
  free AS SUB CDECL(BYVAL AS gpointer)
  copy AS FUNCTION CDECL(BYVAL AS gpointer) AS gpointer
  serialize AS FUNCTION CDECL(BYVAL AS gpointer) AS gchar PTR
  AS GdaSqlForeachFunc check_structure_func
  AS GdaSqlForeachFunc check_validity_func
  AS gpointer _gda_reserved1
  AS gpointer _gda_reserved2
  AS gpointer _gda_reserved3
  AS gpointer _gda_reserved4
END TYPE
TYPE _GdaSqlTable
  AS GdaSqlAnyPart any
  AS gchar PTR table_name
  AS GdaMetaDbObject PTR validity_meta_object
  AS gpointer _gda_reserved1
  AS gpointer _gda_reserved2
END TYPE
DECLARE FUNCTION gda_sql_table_copy(BYVAL AS GdaSqlTable PTR) AS GdaSqlTable PTR
DECLARE SUB gda_sql_table_free(BYVAL AS GdaSqlTable PTR)
DECLARE FUNCTION gda_sql_table_serialize(BYVAL AS GdaSqlTable PTR) AS gchar PTR
DECLARE SUB gda_sql_table_take_name(BYVAL AS GdaSqlTable PTR, BYVAL AS GValue PTR)
DECLARE FUNCTION gda_sql_table_new(BYVAL AS GdaSqlAnyPart PTR) AS GdaSqlTable PTR
TYPE _GdaStatement
  AS GObject object
  AS GdaStatementPrivate PTR priv
END TYPE
DECLARE FUNCTION gda_statement_get_type() AS GType
#DEFINE GDA_TYPE_STATEMENT (gda_statement_get_type())
#DEFINE GDA_STATEMENT(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GDA_TYPE_STATEMENT, GdaStatement))
#DEFINE GDA_STATEMENT_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GDA_TYPE_STATEMENT, GdaStatementClass))
#DEFINE GDA_IS_STATEMENT(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GDA_TYPE_STATEMENT))
#DEFINE GDA_IS_CLASS_STATEMENT(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GDA_TYPE_STATEMENT))
#DEFINE GDA_STATEMENT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GDA_TYPE_STATEMENT, GdaStatementClass))
DECLARE FUNCTION gda_statement_new() AS GdaStatement PTR
DECLARE FUNCTION gda_statement_error_quark() AS GQuark
DECLARE FUNCTION gda_statement_check_structure(BYVAL AS GdaStatement PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION gda_statement_check_validity(BYVAL AS GdaStatement PTR, BYVAL AS GdaConnection PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION gda_statement_copy(BYVAL AS GdaStatement PTR) AS GdaStatement PTR
DECLARE FUNCTION gda_statement_get_parameters(BYVAL AS GdaStatement PTR, BYVAL AS GdaSet PTR PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION gda_statement_get_statement_type(BYVAL AS GdaStatement PTR) AS GdaSqlStatementType
DECLARE FUNCTION gda_statement_is_useless(BYVAL AS GdaStatement PTR) AS gboolean
DECLARE FUNCTION gda_statement_normalize(BYVAL AS GdaStatement PTR, BYVAL AS GdaConnection PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION gda_statement_rewrite_for_default_values(BYVAL AS GdaStatement PTR, BYVAL AS GdaSet PTR, BYVAL AS gboolean, BYVAL AS GError PTR PTR) AS GdaSqlStatement PTR
DECLARE FUNCTION gda_statement_serialize(BYVAL AS GdaStatement PTR) AS gchar PTR
DECLARE FUNCTION gda_statement_to_sql_extended(BYVAL AS GdaStatement PTR, BYVAL AS GdaConnection PTR, BYVAL AS GdaSet PTR, BYVAL AS GdaStatementSqlFlag, BYVAL AS GSList PTR PTR, BYVAL AS GError PTR PTR) AS gchar PTR
DECLARE FUNCTION gda_statement_to_sql_real(BYVAL AS GdaStatement PTR, BYVAL AS GdaSqlRenderingContext PTR, BYVAL AS GError PTR PTR) AS gchar PTR
TYPE _GdaStatementClass
  AS GObjectClass parent_class
  checked AS SUB CDECL(BYVAL AS GdaStatement PTR, BYVAL AS GdaConnection PTR, BYVAL AS gboolean)
  reset AS SUB CDECL(BYVAL AS GdaStatement PTR)
  _gda_reserved1 AS SUB CDECL()
  _gda_reserved2 AS SUB CDECL()
  _gda_reserved3 AS SUB CDECL()
  _gda_reserved4 AS SUB CDECL()
END TYPE
TYPE _GdaThreadNotification
  AS GdaThreadNotificationType type
  AS guint job_id
END TYPE
TYPE _GdaThreadWrapper
  AS GObject object
  AS GdaThreadWrapperPrivate PTR priv
END TYPE
DECLARE FUNCTION gda_thread_wrapper_get_type() AS GType
#DEFINE GDA_TYPE_THREAD_WRAPPER (gda_thread_wrapper_get_type())
#DEFINE GDA_THREAD_WRAPPER(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GDA_TYPE_THREAD_WRAPPER, GdaThreadWrapper))
#DEFINE GDA_THREAD_WRAPPER_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GDA_TYPE_THREAD_WRAPPER, GdaThreadWrapperClass))
#DEFINE GDA_IS_THREAD_WRAPPER(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GDA_TYPE_THREAD_WRAPPER))
#DEFINE GDA_IS_CLASS_THREAD_WRAPPER(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GDA_TYPE_THREAD_WRAPPER))
#DEFINE GDA_THREAD_WRAPPER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GDA_TYPE_THREAD_WRAPPER, GdaThreadWrapperClass))
DECLARE FUNCTION gda_thread_wrapper_new() AS GdaThreadWrapper PTR
DECLARE FUNCTION gda_thread_wrapper_error_quark() AS GQuark
DECLARE FUNCTION gda_thread_wrapper_cancel(BYVAL AS GdaThreadWrapper PTR, BYVAL AS guint) AS gboolean
DECLARE FUNCTION gda_thread_wrapper_connect_raw(BYVAL AS GdaThreadWrapper PTR, BYVAL AS gpointer, BYVAL AS const gchar PTR, BYVAL AS gboolean, BYVAL AS gboolean, BYVAL AS GdaThreadWrapperCallback, BYVAL AS gpointer) AS gulong
DECLARE SUB gda_thread_wrapper_disconnect(BYVAL AS GdaThreadWrapper PTR, BYVAL AS gulong)
DECLARE FUNCTION gda_thread_wrapper_execute(BYVAL AS GdaThreadWrapper PTR, BYVAL AS GdaThreadWrapperFunc, BYVAL AS gpointer, BYVAL AS GDestroyNotify, BYVAL AS GError PTR PTR) AS guint
DECLARE FUNCTION gda_thread_wrapper_execute_void(BYVAL AS GdaThreadWrapper PTR, BYVAL AS GdaThreadWrapperVoidFunc, BYVAL AS gpointer, BYVAL AS GDestroyNotify, BYVAL AS GError PTR PTR) AS guint
DECLARE FUNCTION gda_thread_wrapper_fetch_result(BYVAL AS GdaThreadWrapper PTR, BYVAL AS gboolean, BYVAL AS guint, BYVAL AS GError PTR PTR) AS gpointer
DECLARE FUNCTION gda_thread_wrapper_get_io_channel(BYVAL AS GdaThreadWrapper PTR) AS GIOChannel PTR
DECLARE FUNCTION gda_thread_wrapper_get_waiting_size(BYVAL AS GdaThreadWrapper PTR) AS gint
DECLARE SUB gda_thread_wrapper_iterate(BYVAL AS GdaThreadWrapper PTR, BYVAL AS gboolean)
DECLARE SUB gda_thread_wrapper_steal_signal(BYVAL AS GdaThreadWrapper PTR, BYVAL AS gulong)
DECLARE SUB gda_thread_wrapper_unset_io_channel(BYVAL AS GdaThreadWrapper PTR)
TYPE _GdaThreadWrapperClass
  AS GObjectClass object_class
  _gda_reserved1 AS SUB CDECL()
  _gda_reserved2 AS SUB CDECL()
  _gda_reserved3 AS SUB CDECL()
  _gda_reserved4 AS SUB CDECL()
END TYPE
TYPE _GdaTime
  AS gushort hour
  AS gushort minute
  AS gushort second
  AS gulong fraction
  AS glong timezone
END TYPE
DECLARE SUB gda_time_change_timezone(BYVAL AS GdaTime PTR, BYVAL AS glong)
DECLARE FUNCTION gda_time_valid(BYVAL AS const GdaTime PTR) AS gboolean
DECLARE FUNCTION gda_time_copy(BYVAL AS gpointer) AS gpointer
DECLARE SUB gda_time_free(BYVAL AS gpointer)
TYPE _GdaTimestamp
  AS gshort year
  AS gushort month
  AS gushort day
  AS gushort hour
  AS gushort minute
  AS gushort second
  AS gulong fraction
  AS glong timezone
END TYPE
DECLARE SUB gda_timestamp_change_timezone(BYVAL AS GdaTimestamp PTR, BYVAL AS glong)
DECLARE FUNCTION gda_timestamp_valid(BYVAL AS const GdaTimestamp PTR) AS gboolean
DECLARE FUNCTION gda_timestamp_copy(BYVAL AS gpointer) AS gpointer
DECLARE SUB gda_timestamp_free(BYVAL AS gpointer)
TYPE _GdaTransactionStatus
  AS GObject object
  AS gchar PTR name
  AS GdaTransactionIsolation isolation_level
  AS GdaTransactionStatusState state
  AS GList PTR events
  AS gpointer _gda_reserved1
  AS gpointer _gda_reserved2
END TYPE
DECLARE FUNCTION gda_transaction_status_get_type() AS GType
#DEFINE GDA_TYPE_TRANSACTION_STATUS (gda_transaction_status_get_type())
#DEFINE GDA_TRANSACTION_STATUS(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GDA_TYPE_TRANSACTION_STATUS, GdaTransactionStatus))
#DEFINE GDA_TRANSACTION_STATUS_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GDA_TYPE_TRANSACTION_STATUS, GdaTransactionStatusClass))
#DEFINE GDA_IS_TRANSACTION_STATUS(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GDA_TYPE_TRANSACTION_STATUS))
#DEFINE GDA_IS_CLASS_TRANSACTION_STATUS(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GDA_TYPE_TRANSACTION_STATUS))
#DEFINE GDA_TRANSACTION_STATUS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GDA_TYPE_TRANSACTION_STATUS, GdaTransactionStatusClass))
DECLARE FUNCTION gda_transaction_status_new(BYVAL AS const gchar PTR) AS GdaTransactionStatus PTR
DECLARE FUNCTION gda_transaction_status_add_event_sql(BYVAL AS GdaTransactionStatus PTR, BYVAL AS const gchar PTR, BYVAL AS GdaConnectionEvent PTR) AS GdaTransactionStatusEvent PTR
DECLARE FUNCTION gda_transaction_status_add_event_sub(BYVAL AS GdaTransactionStatus PTR, BYVAL AS GdaTransactionStatus PTR) AS GdaTransactionStatusEvent PTR
DECLARE FUNCTION gda_transaction_status_add_event_svp(BYVAL AS GdaTransactionStatus PTR, BYVAL AS const gchar PTR) AS GdaTransactionStatusEvent PTR
DECLARE FUNCTION gda_transaction_status_find(BYVAL AS GdaTransactionStatus PTR, BYVAL AS const gchar PTR, BYVAL AS GdaTransactionStatusEvent PTR PTR) AS GdaTransactionStatus PTR
DECLARE FUNCTION gda_transaction_status_find_current(BYVAL AS GdaTransactionStatus PTR, BYVAL AS GdaTransactionStatusEvent PTR PTR, BYVAL AS gboolean) AS GdaTransactionStatus PTR
DECLARE SUB gda_transaction_status_free_events(BYVAL AS GdaTransactionStatus PTR, BYVAL AS GdaTransactionStatusEvent PTR, BYVAL AS gboolean)
TYPE _GdaTransactionStatusClass
  AS GObjectClass parent_class
  _gda_reserved1 AS SUB CDECL()
  _gda_reserved2 AS SUB CDECL()
  _gda_reserved3 AS SUB CDECL()
  _gda_reserved4 AS SUB CDECL()
END TYPE
TYPE _GdaTransactionStatusEvent
  AS GdaTransactionStatus PTR trans
  AS GdaTransactionStatusEventType type
  AS GdaConnectionEvent PTR conn_event
  AS gpointer _gda_reserved1
  AS gpointer _gda_reserved2
END TYPE
TYPE _GdaTree
  AS GObject object
  AS GdaTreePrivate PTR priv
END TYPE
DECLARE FUNCTION gda_tree_get_type() AS GType
#DEFINE GDA_TYPE_TREE (gda_tree_get_type())
#DEFINE GDA_TREE(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GDA_TYPE_TREE, GdaTree))
#DEFINE GDA_TREE_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GDA_TYPE_TREE, GdaTreeClass))
#DEFINE GDA_IS_TREE(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GDA_TYPE_TREE))
#DEFINE GDA_IS_CLASS_TREE(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GDA_TYPE_TREE))
#DEFINE GDA_TREE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GDA_TYPE_TREE, GdaTreeClass))
DECLARE FUNCTION gda_tree_new() AS GdaTree PTR
DECLARE FUNCTION gda_tree_error_quark() AS GQuark
DECLARE SUB gda_tree_add_manager(BYVAL AS GdaTree PTR, BYVAL AS GdaTreeManager PTR)
DECLARE SUB gda_tree_clean(BYVAL AS GdaTree PTR)
DECLARE SUB gda_tree_dump(BYVAL AS GdaTree PTR, BYVAL AS GdaTreeNode PTR, BYVAL AS FILE PTR)
DECLARE FUNCTION gda_tree_get_node(BYVAL AS GdaTree PTR, BYVAL AS const gchar PTR, BYVAL AS gboolean) AS GdaTreeNode PTR
DECLARE FUNCTION gda_tree_get_node_manager(BYVAL AS GdaTree PTR, BYVAL AS GdaTreeNode PTR) AS GdaTreeManager PTR
DECLARE FUNCTION gda_tree_get_node_path(BYVAL AS GdaTree PTR, BYVAL AS GdaTreeNode PTR) AS gchar PTR
DECLARE FUNCTION gda_tree_get_nodes_in_path(BYVAL AS GdaTree PTR, BYVAL AS const gchar PTR, BYVAL AS gboolean) AS GSList PTR
DECLARE SUB gda_tree_set_attribute(BYVAL AS GdaTree PTR, BYVAL AS const gchar PTR, BYVAL AS const GValue PTR, BYVAL AS GDestroyNotify)
DECLARE FUNCTION gda_tree_update_all(BYVAL AS GdaTree PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION gda_tree_update_children(BYVAL AS GdaTree PTR, BYVAL AS GdaTreeNode PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION gda_tree_update_part(BYVAL AS GdaTree PTR, BYVAL AS GdaTreeNode PTR, BYVAL AS GError PTR PTR) AS gboolean
TYPE _GdaTreeClass
  AS GObjectClass object_class
  node_changed AS SUB CDECL(BYVAL AS GdaTree PTR, BYVAL AS GdaTreeNode PTR)
  node_inserted AS SUB CDECL(BYVAL AS GdaTree PTR, BYVAL AS GdaTreeNode PTR)
  node_has_child_toggled AS SUB CDECL(BYVAL AS GdaTree PTR, BYVAL AS GdaTreeNode PTR)
  node_deleted AS SUB CDECL(BYVAL AS GdaTree PTR, BYVAL AS const gchar PTR)
  _gda_reserved1 AS SUB CDECL()
  _gda_reserved2 AS SUB CDECL()
  _gda_reserved3 AS SUB CDECL()
  _gda_reserved4 AS SUB CDECL()
END TYPE
TYPE _GdaTreeManager
  AS GObject object
  AS GdaTreeManagerPrivate PTR priv
END TYPE
DECLARE FUNCTION gda_tree_manager_get_type() AS GType
#DEFINE GDA_TYPE_TREE_MANAGER (gda_tree_manager_get_type())
#DEFINE GDA_TREE_MANAGER(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GDA_TYPE_TREE_MANAGER, GdaTreeManager))
#DEFINE GDA_TREE_MANAGER_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GDA_TYPE_TREE_MANAGER, GdaTreeManagerClass))
#DEFINE GDA_IS_TREE_MANAGER(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GDA_TYPE_TREE_MANAGER))
#DEFINE GDA_IS_CLASS_TREE_MANAGER(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GDA_TYPE_TREE_MANAGER))
#DEFINE GDA_TREE_MANAGER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GDA_TYPE_TREE_MANAGER, GdaTreeManagerClass))
DECLARE FUNCTION gda_tree_manager_new_with_func(BYVAL AS GdaTreeManagerNodesFunc) AS GdaTreeManager PTR
DECLARE FUNCTION gda_tree_manager_error_quark() AS GQuark
DECLARE SUB gda_tree_manager_add_manager(BYVAL AS GdaTreeManager PTR, BYVAL AS GdaTreeManager PTR)
DECLARE SUB gda_tree_manager_add_new_node_attribute(BYVAL AS GdaTreeManager PTR, BYVAL AS const gchar PTR, BYVAL AS const GValue PTR)
DECLARE FUNCTION gda_tree_manager_create_node(BYVAL AS GdaTreeManager PTR, BYVAL AS GdaTreeNode PTR, BYVAL AS const gchar PTR) AS GdaTreeNode PTR
DECLARE FUNCTION gda_tree_manager_get_managers(BYVAL AS GdaTreeManager PTR) AS const GSList PTR
DECLARE FUNCTION gda_tree_manager_get_node_create_func(BYVAL AS GdaTreeManager PTR) AS GdaTreeManagerNodeFunc
DECLARE SUB gda_tree_manager_set_node_create_func(BYVAL AS GdaTreeManager PTR, BYVAL AS GdaTreeManagerNodeFunc)
TYPE _GdaTreeManagerClass
  AS GObjectClass object_class
  update_children AS FUNCTION CDECL(BYVAL AS GdaTreeManager PTR, BYVAL AS GdaTreeNode PTR, BYVAL AS const GSList PTR, BYVAL AS gboolean PTR, BYVAL AS GError PTR PTR) AS GSList PTR
  _gda_reserved1 AS SUB CDECL()
  _gda_reserved2 AS SUB CDECL()
  _gda_reserved3 AS SUB CDECL()
  _gda_reserved4 AS SUB CDECL()
END TYPE
TYPE _GdaTreeMgrColumns
  AS GdaTreeManager object
  AS GdaTreeMgrColumnsPriv PTR priv
END TYPE
DECLARE FUNCTION gda_tree_mgr_columns_get_type() AS GType
#DEFINE GDA_TYPE_TREE_MGR_COLUMNS (gda_tree_mgr_columns_get_type())
#DEFINE GDA_TREE_MGR_COLUMNS(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GDA_TYPE_TREE_MGR_COLUMNS, GdaTreeMgrColumns))
#DEFINE GDA_TREE_MGR_COLUMNS_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GDA_TYPE_TREE_MGR_COLUMNS, GdaTreeMgrColumnsClass))
#DEFINE GDA_IS_TREE_MGR_COLUMNS(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GDA_TYPE_TREE_MGR_COLUMNS))
#DEFINE GDA_IS_CLASS_TREE_MGR_COLUMNS(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GDA_TYPE_TREE_MGR_COLUMNS))
#DEFINE GDA_TREE_MGR_COLUMNS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GDA_TYPE_TREE_MGR_COLUMNS, GdaTreeMgrColumnsClass))
DECLARE FUNCTION gda_tree_mgr_columns_new(BYVAL AS GdaConnection PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR) AS GdaTreeManager PTR
TYPE _GdaTreeMgrColumnsClass
  AS GdaTreeManagerClass object_class
END TYPE
TYPE _GdaTreeMgrLabel
  AS GdaTreeManager object
  AS GdaTreeMgrLabelPriv PTR priv
END TYPE
DECLARE FUNCTION gda_tree_mgr_label_get_type() AS GType
#DEFINE GDA_TYPE_TREE_MGR_LABEL (gda_tree_mgr_label_get_type())
#DEFINE GDA_TREE_MGR_LABEL(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GDA_TYPE_TREE_MGR_LABEL, GdaTreeMgrLabel))
#DEFINE GDA_TREE_MGR_LABEL_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GDA_TYPE_TREE_MGR_LABEL, GdaTreeMgrLabelClass))
#DEFINE GDA_IS_TREE_MGR_LABEL(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GDA_TYPE_TREE_MGR_LABEL))
#DEFINE GDA_IS_CLASS_TREE_MGR_LABEL(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GDA_TYPE_TREE_MGR_LABEL))
#DEFINE GDA_TREE_MGR_LABEL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GDA_TYPE_TREE_MGR_LABEL, GdaTreeMgrLabelClass))
DECLARE FUNCTION gda_tree_mgr_label_new(BYVAL AS const gchar PTR) AS GdaTreeManager PTR
TYPE _GdaTreeMgrLabelClass
  AS GdaTreeManagerClass object_class
END TYPE
TYPE _GdaTreeMgrSchemas
  AS GdaTreeManager object
  AS GdaTreeMgrSchemasPriv PTR priv
END TYPE
DECLARE FUNCTION gda_tree_mgr_schemas_get_type() AS GType
#DEFINE GDA_TYPE_TREE_MGR_SCHEMAS (gda_tree_mgr_schemas_get_type())
#DEFINE GDA_TREE_MGR_SCHEMAS(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GDA_TYPE_TREE_MGR_SCHEMAS, GdaTreeMgrSchemas))
#DEFINE GDA_TREE_MGR_SCHEMAS_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GDA_TYPE_TREE_MGR_SCHEMAS, GdaTreeMgrSchemasClass))
#DEFINE GDA_IS_TREE_MGR_SCHEMAS(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GDA_TYPE_TREE_MGR_SCHEMAS))
#DEFINE GDA_IS_CLASS_TREE_MGR_SCHEMAS(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GDA_TYPE_TREE_MGR_SCHEMAS))
#DEFINE GDA_TREE_MGR_SCHEMAS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GDA_TYPE_TREE_MGR_SCHEMAS, GdaTreeMgrSchemasClass))
DECLARE FUNCTION gda_tree_mgr_schemas_new(BYVAL AS GdaConnection PTR) AS GdaTreeManager PTR
TYPE _GdaTreeMgrSchemasClass
  AS GdaTreeManagerClass object_class
END TYPE
TYPE _GdaTreeMgrSelect
  AS GdaTreeManager object
  AS GdaTreeMgrSelectPriv PTR priv
END TYPE
DECLARE FUNCTION gda_tree_mgr_select_get_type() AS GType
#DEFINE GDA_TYPE_TREE_MGR_SELECT (gda_tree_mgr_select_get_type())
#DEFINE GDA_TREE_MGR_SELECT(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GDA_TYPE_TREE_MGR_SELECT, GdaTreeMgrSelect))
#DEFINE GDA_TREE_MGR_SELECT_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GDA_TYPE_TREE_MGR_SELECT, GdaTreeMgrSelectClass))
#DEFINE GDA_IS_TREE_MGR_SELECT(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GDA_TYPE_TREE_MGR_SELECT))
#DEFINE GDA_IS_CLASS_TREE_MGR_SELECT(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GDA_TYPE_TREE_MGR_SELECT))
#DEFINE GDA_TREE_MGR_SELECT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GDA_TYPE_TREE_MGR_SELECT, GdaTreeMgrSelectClass))
DECLARE FUNCTION gda_tree_mgr_select_new(BYVAL AS GdaConnection PTR, BYVAL AS GdaStatement PTR, BYVAL AS GdaSet PTR) AS GdaTreeManager PTR
TYPE _GdaTreeMgrSelectClass
  AS GdaTreeManagerClass object_class
END TYPE
TYPE _GdaTreeMgrTables
  AS GdaTreeManager object
  AS GdaTreeMgrTablesPriv PTR priv
END TYPE
DECLARE FUNCTION gda_tree_mgr_tables_get_type() AS GType
#DEFINE GDA_TYPE_TREE_MGR_TABLES (gda_tree_mgr_tables_get_type())
#DEFINE GDA_TREE_MGR_TABLES(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GDA_TYPE_TREE_MGR_TABLES, GdaTreeMgrTables))
#DEFINE GDA_TREE_MGR_TABLES_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GDA_TYPE_TREE_MGR_TABLES, GdaTreeMgrTablesClass))
#DEFINE GDA_IS_TREE_MGR_TABLES(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GDA_TYPE_TREE_MGR_TABLES))
#DEFINE GDA_IS_CLASS_TREE_MGR_TABLES(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GDA_TYPE_TREE_MGR_TABLES))
#DEFINE GDA_TREE_MGR_TABLES_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GDA_TYPE_TREE_MGR_TABLES, GdaTreeMgrTablesClass))
DECLARE FUNCTION gda_tree_mgr_tables_new(BYVAL AS GdaConnection PTR, BYVAL AS const gchar PTR) AS GdaTreeManager PTR
TYPE _GdaTreeMgrTablesClass
  AS GdaTreeManagerClass object_class
END TYPE
TYPE _GdaTreeNode
  AS GObject object
  AS GdaTreeNodePrivate PTR priv
END TYPE
DECLARE FUNCTION gda_tree_node_get_type() AS GType
#DEFINE GDA_TYPE_TREE_NODE (gda_tree_node_get_type())
#DEFINE GDA_TREE_NODE(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GDA_TYPE_TREE_NODE, GdaTreeNode))
#DEFINE GDA_TREE_NODE_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GDA_TYPE_TREE_NODE, GdaTreeNodeClass))
#DEFINE GDA_IS_TREE_NODE(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GDA_TYPE_TREE_NODE))
#DEFINE GDA_IS_CLASS_TREE_NODE(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GDA_TYPE_TREE_NODE))
#DEFINE GDA_TREE_NODE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GDA_TYPE_TREE_NODE, GdaTreeNodeClass))
DECLARE FUNCTION gda_tree_node_new(BYVAL AS const gchar PTR) AS GdaTreeNode PTR
DECLARE FUNCTION gda_tree_node_error_quark() AS GQuark
DECLARE FUNCTION gda_tree_node_fetch_attribute(BYVAL AS GdaTreeNode PTR, BYVAL AS const gchar PTR) AS const GValue PTR
DECLARE FUNCTION gda_tree_node_get_child_index(BYVAL AS GdaTreeNode PTR, BYVAL AS gint) AS GdaTreeNode PTR
DECLARE FUNCTION gda_tree_node_get_child_name(BYVAL AS GdaTreeNode PTR, BYVAL AS const gchar PTR) AS GdaTreeNode PTR
DECLARE FUNCTION gda_tree_node_get_children(BYVAL AS GdaTreeNode PTR) AS GSList PTR
DECLARE FUNCTION gda_tree_node_get_node_attribute(BYVAL AS GdaTreeNode PTR, BYVAL AS const gchar PTR) AS const GValue PTR
DECLARE FUNCTION gda_tree_node_get_parent(BYVAL AS GdaTreeNode PTR) AS GdaTreeNode PTR
DECLARE SUB gda_tree_node_set_node_attribute(BYVAL AS GdaTreeNode PTR, BYVAL AS const gchar PTR, BYVAL AS const GValue PTR, BYVAL AS GDestroyNotify)
TYPE _GdaTreeNodeClass
  AS GObjectClass object_class
  node_changed AS SUB CDECL(BYVAL AS GdaTreeNode PTR, BYVAL AS GdaTreeNode PTR)
  node_inserted AS SUB CDECL(BYVAL AS GdaTreeNode PTR, BYVAL AS GdaTreeNode PTR)
  node_has_child_toggled AS SUB CDECL(BYVAL AS GdaTreeNode PTR, BYVAL AS GdaTreeNode PTR)
  node_deleted AS SUB CDECL(BYVAL AS GdaTreeNode PTR, BYVAL AS const gchar PTR)
  dump_header AS FUNCTION CDECL(BYVAL AS GdaTreeNode PTR) AS gchar PTR
  dump_children AS SUB CDECL(BYVAL AS GdaTreeNode PTR, BYVAL AS const gchar PTR, BYVAL AS GString PTR)
  _gda_reserved1 AS SUB CDECL()
  _gda_reserved2 AS SUB CDECL()
  _gda_reserved3 AS SUB CDECL()
  _gda_reserved4 AS SUB CDECL()
END TYPE
DECLARE FUNCTION gda_ushort_get_type() AS GType
#DEFINE GDA_TYPE_USHORT (gda_ushort_get_type())
#DEFINE GDA_USHORT(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GDA_TYPE_USHORT, GdaUShort))
#DEFINE GDA_USHORT_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GDA_TYPE_USHORT, Gda))
#DEFINE GDA_IS_USHORT(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GDA_TYPE_USHORT))
#DEFINE GDA_IS_CLASS_USHORT(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GDA_TYPE_USHORT))
#DEFINE GDA_USHORT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GDA_TYPE_USHORT, Gda))
TYPE _GdaXaTransaction
  AS GObject object
  AS GdaXaTransactionPrivate PTR priv
END TYPE
DECLARE FUNCTION gda_xa_transaction_get_type() AS GType
#DEFINE GDA_TYPE_XA_TRANSACTION (gda_xa_transaction_get_type())
#DEFINE GDA_XA_TRANSACTION(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GDA_TYPE_XA_TRANSACTION, GdaXaTransaction))
#DEFINE GDA_XA_TRANSACTION_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GDA_TYPE_XA_TRANSACTION, GdaXaTransactionClass))
#DEFINE GDA_IS_XA_TRANSACTION(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GDA_TYPE_XA_TRANSACTION))
#DEFINE GDA_IS_CLASS_XA_TRANSACTION(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GDA_TYPE_XA_TRANSACTION))
#DEFINE GDA_XA_TRANSACTION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GDA_TYPE_XA_TRANSACTION, GdaXaTransactionClass))
DECLARE FUNCTION gda_xa_transaction_new(BYVAL AS guint32, BYVAL AS const gchar PTR) AS GdaXaTransaction PTR
DECLARE FUNCTION gda_xa_transaction_error_quark() AS GQuark
DECLARE FUNCTION gda_xa_transaction_string_to_id(BYVAL AS const gchar PTR) AS GdaXaTransactionId PTR
DECLARE FUNCTION gda_xa_transaction_begin(BYVAL AS GdaXaTransaction PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION gda_xa_transaction_commit(BYVAL AS GdaXaTransaction PTR, BYVAL AS GSList PTR PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION gda_xa_transaction_commit_recovered(BYVAL AS GdaXaTransaction PTR, BYVAL AS GSList PTR PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION gda_xa_transaction_register_connection(BYVAL AS GdaXaTransaction PTR, BYVAL AS GdaConnection PTR, BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION gda_xa_transaction_rollback(BYVAL AS GdaXaTransaction PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE SUB gda_xa_transaction_unregister_connection(BYVAL AS GdaXaTransaction PTR, BYVAL AS GdaConnection PTR)
TYPE _GdaXaTransactionClass
  AS GObjectClass parent_class
  _gda_reserved1 AS SUB CDECL()
  _gda_reserved2 AS SUB CDECL()
  _gda_reserved3 AS SUB CDECL()
  _gda_reserved4 AS SUB CDECL()
END TYPE
TYPE _GdaXaTransactionId
  AS guint32 format
  AS gushort gtrid_length
  AS gushort bqual_length
  AS char /'?'/ data(127)
END TYPE
DECLARE FUNCTION gda_xa_transaction_id_to_string(BYVAL AS const GdaXaTransactionId PTR) AS gchar PTR
' P_4

DECLARE FUNCTION gda_alphanum_to_text(BYVAL AS gchar PTR) AS gchar PTR
DECLARE FUNCTION gda_completion_list_get(BYVAL AS GdaConnection PTR, BYVAL AS const gchar PTR, BYVAL AS gint, BYVAL AS gint) AS gchar PTR PTR
DECLARE FUNCTION gda_compute_dml_statements(BYVAL AS GdaConnection PTR, BYVAL AS GdaStatement PTR, BYVAL AS gboolean, BYVAL AS GdaStatement PTR PTR, BYVAL AS GdaStatement PTR PTR, BYVAL AS GdaStatement PTR PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION gda_compute_select_statement_from_update(BYVAL AS GdaStatement PTR, BYVAL AS GError PTR PTR) AS GdaSqlStatement PTR
DECLARE FUNCTION gda_compute_unique_table_row_condition(BYVAL AS GdaSqlStatementSelect PTR, BYVAL AS GdaMetaTable PTR, BYVAL AS gboolean, BYVAL AS GError PTR PTR) AS GdaSqlExpr PTR
DECLARE FUNCTION gda_compute_unique_table_row_condition_with_cnc(BYVAL AS GdaConnection PTR, BYVAL AS GdaSqlStatementSelect PTR, BYVAL AS GdaMetaTable PTR, BYVAL AS gboolean, BYVAL AS GError PTR PTR) AS GdaSqlExpr PTR
DECLARE SUB gda_dsn_split(BYVAL AS const gchar PTR, BYVAL AS gchar PTR PTR, BYVAL AS gchar PTR PTR, BYVAL AS gchar PTR PTR)
DECLARE FUNCTION gda_g_type_from_string(BYVAL AS const gchar PTR) AS GType
DECLARE FUNCTION gda_g_type_to_string(BYVAL AS GType) AS const gchar PTR
DECLARE FUNCTION gda_get_application_exec_path(BYVAL AS const gchar PTR) AS gchar PTR
DECLARE FUNCTION gda_identifier_equal(BYVAL AS const gchar PTR, BYVAL AS const gchar PTR) AS gboolean
DECLARE FUNCTION gda_identifier_hash(BYVAL AS const gchar PTR) AS guint
DECLARE SUB gda_init()
DECLARE SUB gda_locale_changed()
DECLARE SUB gda_log_disable()
DECLARE SUB gda_log_enable()
DECLARE SUB gda_log_error(BYVAL AS const gchar PTR, ...)
DECLARE FUNCTION gda_log_is_enabled() AS gboolean
DECLARE SUB gda_log_message(BYVAL AS const gchar PTR, ...)
DECLARE SUB gda_mutex_free(BYVAL AS GdaMutex PTR)
DECLARE SUB gda_mutex_lock(BYVAL AS GdaMutex PTR)
DECLARE FUNCTION gda_mutex_new() AS GdaMutex PTR
DECLARE FUNCTION gda_mutex_trylock(BYVAL AS GdaMutex PTR) AS gboolean
DECLARE SUB gda_mutex_unlock(BYVAL AS GdaMutex PTR)
DECLARE FUNCTION gda_parse_formatted_date(BYVAL AS GDate PTR, BYVAL AS const gchar PTR, BYVAL AS GDateDMY, BYVAL AS GDateDMY, BYVAL AS GDateDMY, BYVAL AS gint8) AS gboolean
DECLARE FUNCTION gda_parse_formatted_time(BYVAL AS GdaTime PTR, BYVAL AS const gchar PTR, BYVAL AS gint8) AS gboolean
DECLARE FUNCTION gda_parse_formatted_timestamp(BYVAL AS GdaTimestamp PTR, BYVAL AS const gchar PTR, BYVAL AS GDateDMY, BYVAL AS GDateDMY, BYVAL AS GDateDMY, BYVAL AS gint8) AS gboolean
DECLARE FUNCTION gda_parse_iso8601_date(BYVAL AS GDate PTR, BYVAL AS const gchar PTR) AS gboolean
DECLARE FUNCTION gda_parse_iso8601_time(BYVAL AS GdaTime PTR, BYVAL AS const gchar PTR) AS gboolean
DECLARE FUNCTION gda_parse_iso8601_timestamp(BYVAL AS GdaTimestamp PTR, BYVAL AS const gchar PTR) AS gboolean
DECLARE FUNCTION gda_rewrite_sql_statement_for_null_parameters(BYVAL AS GdaSqlStatement PTR, BYVAL AS GdaSet PTR, BYVAL AS gboolean PTR, BYVAL AS GError PTR PTR) AS GdaSqlStatement PTR
DECLARE FUNCTION gda_rewrite_statement_for_null_parameters(BYVAL AS GdaStatement PTR, BYVAL AS GdaSet PTR, BYVAL AS GdaStatement PTR PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION gda_rfc1738_decode(BYVAL AS gchar PTR) AS gboolean
DECLARE FUNCTION gda_rfc1738_encode(BYVAL AS const gchar PTR) AS gchar PTR
DECLARE FUNCTION gda_select_alter_select_for_empty(BYVAL AS GdaStatement PTR, BYVAL AS GError PTR PTR) AS GdaStatement PTR
DECLARE FUNCTION gda_sql_error_quark() AS GQuark
DECLARE FUNCTION gda_sql_identifier_quote(BYVAL AS const gchar PTR, BYVAL AS GdaConnection PTR, BYVAL AS GdaServerProvider PTR, BYVAL AS gboolean, BYVAL AS gboolean) AS gchar PTR
DECLARE FUNCTION gda_sql_identifier_split(BYVAL AS const gchar PTR) AS gchar PTR PTR
DECLARE FUNCTION gda_string_to_binary(BYVAL AS const gchar PTR) AS GdaBinary PTR
DECLARE FUNCTION gda_string_to_blob(BYVAL AS const gchar PTR) AS GdaBlob PTR
DECLARE FUNCTION gda_text_to_alphanum(BYVAL AS const gchar PTR) AS gchar PTR
DECLARE FUNCTION gda_utility_check_data_model(BYVAL AS GdaDataModel PTR, BYVAL AS gint, ...) AS gboolean
DECLARE FUNCTION gda_utility_check_data_model_v(BYVAL AS GdaDataModel PTR, BYVAL AS gint, BYVAL AS GType PTR) AS gboolean
DECLARE FUNCTION gda_utility_data_model_dump_data_to_xml(BYVAL AS GdaDataModel PTR, BYVAL AS any ptr /' xmlNodePtr '/, BYVAL AS const gint PTR, BYVAL AS gint, BYVAL AS const gint PTR, BYVAL AS gint, BYVAL AS gboolean) AS gboolean
DECLARE FUNCTION gda_utility_data_model_find_column_description(BYVAL AS GdaDataSelect PTR, BYVAL AS const gchar PTR) AS const gchar PTR
DECLARE FUNCTION gda_utility_holder_load_attributes(BYVAL AS GdaHolder PTR, BYVAL AS any ptr /' xmlNodePtr '/, BYVAL AS GSList PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION gda_value_compare(BYVAL AS const GValue PTR, BYVAL AS const GValue PTR) AS gint
DECLARE FUNCTION gda_value_copy(BYVAL AS const GValue PTR) AS GValue PTR
DECLARE FUNCTION gda_value_differ(BYVAL AS const GValue PTR, BYVAL AS const GValue PTR) AS gint
DECLARE SUB gda_value_free(BYVAL AS GValue PTR)
DECLARE FUNCTION gda_value_get_binary(BYVAL AS const GValue PTR) AS const GdaBinary PTR
DECLARE FUNCTION gda_value_get_blob(BYVAL AS const GValue PTR) AS const GdaBlob PTR
DECLARE FUNCTION gda_value_get_geometric_point(BYVAL AS const GValue PTR) AS const GdaGeometricPoint PTR
DECLARE FUNCTION gda_value_get_numeric(BYVAL AS const GValue PTR) AS const GdaNumeric PTR
DECLARE FUNCTION gda_value_get_short(BYVAL AS const GValue PTR) AS gshort
DECLARE FUNCTION gda_value_get_time(BYVAL AS const GValue PTR) AS const GdaTime PTR
DECLARE FUNCTION gda_value_get_timestamp(BYVAL AS const GValue PTR) AS const GdaTimestamp PTR
DECLARE FUNCTION gda_value_get_ushort(BYVAL AS const GValue PTR) AS gushort
DECLARE FUNCTION gda_value_is_null(BYVAL AS const GValue PTR) AS gboolean
DECLARE FUNCTION gda_value_is_number(BYVAL AS const GValue PTR) AS gboolean
DECLARE FUNCTION gda_value_new(BYVAL AS GType) AS GValue PTR
DECLARE FUNCTION gda_value_new_binary(BYVAL AS const guchar PTR, BYVAL AS glong) AS GValue PTR
DECLARE FUNCTION gda_value_new_blob(BYVAL AS const guchar PTR, BYVAL AS glong) AS GValue PTR
DECLARE FUNCTION gda_value_new_blob_from_file(BYVAL AS const gchar PTR) AS GValue PTR
DECLARE FUNCTION gda_value_new_default(BYVAL AS const gchar PTR) AS GValue PTR
DECLARE FUNCTION gda_value_new_from_string(BYVAL AS const gchar PTR, BYVAL AS GType) AS GValue PTR
DECLARE FUNCTION gda_value_new_from_xml(BYVAL AS const any ptr /' const xmlNodePtr '/) AS GValue PTR
DECLARE FUNCTION gda_value_new_null() AS GValue PTR
DECLARE FUNCTION gda_value_new_timestamp_from_timet(BYVAL AS time_t) AS GValue PTR
DECLARE SUB gda_value_reset_with_type(BYVAL AS GValue PTR, BYVAL AS GType)
DECLARE SUB gda_value_set_binary(BYVAL AS GValue PTR, BYVAL AS const GdaBinary PTR)
DECLARE SUB gda_value_set_blob(BYVAL AS GValue PTR, BYVAL AS const GdaBlob PTR)
DECLARE FUNCTION gda_value_set_from_string(BYVAL AS GValue PTR, BYVAL AS const gchar PTR, BYVAL AS GType) AS gboolean
DECLARE FUNCTION gda_value_set_from_value(BYVAL AS GValue PTR, BYVAL AS const GValue PTR) AS gboolean
DECLARE SUB gda_value_set_geometric_point(BYVAL AS GValue PTR, BYVAL AS const GdaGeometricPoint PTR)
DECLARE SUB gda_value_set_null(BYVAL AS GValue PTR)
DECLARE SUB gda_value_set_numeric(BYVAL AS GValue PTR, BYVAL AS const GdaNumeric PTR)
DECLARE SUB gda_value_set_short(BYVAL AS GValue PTR, BYVAL AS const gshort)
DECLARE SUB gda_value_set_time(BYVAL AS GValue PTR, BYVAL AS const GdaTime PTR)
DECLARE SUB gda_value_set_timestamp(BYVAL AS GValue PTR, BYVAL AS const GdaTimestamp PTR)
DECLARE SUB gda_value_set_ushort(BYVAL AS GValue PTR, BYVAL AS const gushort)
DECLARE FUNCTION gda_value_stringify(BYVAL AS const GValue PTR) AS gchar PTR
DECLARE SUB gda_value_take_binary(BYVAL AS GValue PTR, BYVAL AS GdaBinary PTR)
DECLARE SUB gda_value_take_blob(BYVAL AS GValue PTR, BYVAL AS GdaBlob PTR)
DECLARE FUNCTION gda_value_to_xml(BYVAL AS const GValue PTR) AS any ptr /' xmlNodePtr '/
END EXTERN

