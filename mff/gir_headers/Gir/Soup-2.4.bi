'            FreeBasic header file, auto-generated by
'                       ### girtobac ###
' LGPLv2.1 (C) 2013-2022 by Thomas{ doT ]Freiherr[ At ]gmx[ DoT }net
' Auto-translated from file /usr/share/gir-1.0/Soup-2.4.gir
#INCLUDE ONCE "_GirToBac-0.0.bi"

#IFNDEF sockaddr
 TYPE sa_family_t AS USHORT ' from bits/sockaddr.bi
 TYPE sockaddr
  sa_family AS sa_family_t
  sa_data(0 TO 14-1) AS UBYTE
 END TYPE
#ENDIF

' Repository version 1.2
#INCLUDE ONCE "Gio-2.0.bi"
#DEFINE SOUP_ADDRESS_ANY_PORT 0
#DEFINE SOUP_ADDRESS_FAMILY @!"family"
#DEFINE SOUP_ADDRESS_NAME @!"name"
#DEFINE SOUP_ADDRESS_PHYSICAL @!"physical"
#DEFINE SOUP_ADDRESS_PORT @!"port"
#DEFINE SOUP_ADDRESS_PROTOCOL @!"protocol"
#DEFINE SOUP_ADDRESS_SOCKADDR @!"sockaddr"
#DEFINE SOUP_AUTH_DOMAIN_ADD_PATH @!"add-path"
#DEFINE SOUP_AUTH_DOMAIN_BASIC_AUTH_CALLBACK @!"auth-callback"
#DEFINE SOUP_AUTH_DOMAIN_BASIC_AUTH_DATA @!"auth-data"
#DEFINE SOUP_AUTH_DOMAIN_DIGEST_AUTH_CALLBACK @!"auth-callback"
#DEFINE SOUP_AUTH_DOMAIN_DIGEST_AUTH_DATA @!"auth-data"
#DEFINE SOUP_AUTH_DOMAIN_FILTER @!"filter"
#DEFINE SOUP_AUTH_DOMAIN_FILTER_DATA @!"filter-data"
#DEFINE SOUP_AUTH_DOMAIN_GENERIC_AUTH_CALLBACK @!"generic-auth-callback"
#DEFINE SOUP_AUTH_DOMAIN_GENERIC_AUTH_DATA @!"generic-auth-data"
#DEFINE SOUP_AUTH_DOMAIN_PROXY @!"proxy"
#DEFINE SOUP_AUTH_DOMAIN_REALM @!"realm"
#DEFINE SOUP_AUTH_DOMAIN_REMOVE_PATH @!"remove-path"
#DEFINE SOUP_AUTH_HOST @!"host"
#DEFINE SOUP_AUTH_IS_AUTHENTICATED @!"is-authenticated"
#DEFINE SOUP_AUTH_IS_FOR_PROXY @!"is-for-proxy"
#DEFINE SOUP_AUTH_REALM @!"realm"
#DEFINE SOUP_AUTH_SCHEME_NAME @!"scheme-name"
TYPE AS _SoupAddress SoupAddress
TYPE AS _SoupAddressClass SoupAddressClass
TYPE AS LONG SoupAddressFamily
ENUM
  SOUP_ADDRESS_FAMILY_INVALID = -1
  SOUP_ADDRESS_FAMILY_IPV4 = 2
  SOUP_ADDRESS_FAMILY_IPV6 = 10
END ENUM
TYPE AS _SoupAuth SoupAuth
TYPE AS _SoupAuthBasic SoupAuthBasic
TYPE AS _SoupAuthClass SoupAuthClass
TYPE AS _SoupAuthDigest SoupAuthDigest
TYPE AS _SoupAuthDomain SoupAuthDomain
TYPE AS _SoupAuthDomainBasic SoupAuthDomainBasic
TYPE AS _SoupAuthDomainBasicClass SoupAuthDomainBasicClass
TYPE AS _SoupAuthDomainClass SoupAuthDomainClass
TYPE AS _SoupAuthDomainDigest SoupAuthDomainDigest
TYPE AS _SoupAuthDomainDigestClass SoupAuthDomainDigestClass
TYPE AS _SoupAuthManager SoupAuthManager
TYPE AS _SoupAuthManagerClass SoupAuthManagerClass
TYPE AS _SoupAuthManagerPrivate SoupAuthManagerPrivate
TYPE AS _SoupAuthNTLM SoupAuthNTLM
TYPE AS _SoupAuthNegotiate SoupAuthNegotiate
TYPE AS _SoupBuffer SoupBuffer
#DEFINE SOUP_CHAR_HTTP_CTL 16
#DEFINE SOUP_CHAR_HTTP_SEPARATOR 8
#DEFINE SOUP_CHAR_URI_GEN_DELIMS 2
#DEFINE SOUP_CHAR_URI_PERCENT_ENCODED 1
#DEFINE SOUP_CHAR_URI_SUB_DELIMS 4
#DEFINE SOUP_COOKIE_JAR_ACCEPT_POLICY @!"accept-policy"
#DEFINE SOUP_COOKIE_JAR_DB_FILENAME @!"filename"
#DEFINE SOUP_COOKIE_JAR_READ_ONLY @!"read-only"
#DEFINE SOUP_COOKIE_JAR_TEXT_FILENAME @!"filename"
#DEFINE SOUP_COOKIE_MAX_AGE_ONE_DAY 0
#DEFINE SOUP_COOKIE_MAX_AGE_ONE_HOUR 3600
#DEFINE SOUP_COOKIE_MAX_AGE_ONE_WEEK 0
#DEFINE SOUP_COOKIE_MAX_AGE_ONE_YEAR 0
TYPE AS _SoupCache SoupCache
TYPE AS _SoupCacheClass SoupCacheClass
TYPE AS _SoupCachePrivate SoupCachePrivate
TYPE AS LONG SoupCacheResponse
ENUM
  SOUP_CACHE_RESPONSE_FRESH = 0
  SOUP_CACHE_RESPONSE_NEEDS_VALIDATION = 1
  SOUP_CACHE_RESPONSE_STALE = 2
END ENUM
TYPE AS LONG SoupCacheType
ENUM
  SOUP_CACHE_SINGLE_USER = 0
  SOUP_CACHE_SHARED = 1
END ENUM
TYPE AS LONG SoupCacheability
ENUM
  SOUP_CACHE_CACHEABLE = 1
  SOUP_CACHE_UNCACHEABLE = 2
  SOUP_CACHE_INVALIDATES = 4
  SOUP_CACHE_VALIDATES = 8
END ENUM
TYPE AS _SoupClientContext SoupClientContext
TYPE AS _SoupConnection SoupConnection
TYPE AS LONG SoupConnectionState
ENUM
  SOUP_CONNECTION_NEW = 0
  SOUP_CONNECTION_CONNECTING = 1
  SOUP_CONNECTION_IDLE = 2
  SOUP_CONNECTION_IN_USE = 3
  SOUP_CONNECTION_REMOTE_DISCONNECTED = 4
  SOUP_CONNECTION_DISCONNECTED = 5
END ENUM
TYPE AS _SoupContentDecoder SoupContentDecoder
TYPE AS _SoupContentDecoderClass SoupContentDecoderClass
TYPE AS _SoupContentDecoderPrivate SoupContentDecoderPrivate
TYPE AS _SoupContentSniffer SoupContentSniffer
TYPE AS _SoupContentSnifferClass SoupContentSnifferClass
TYPE AS _SoupContentSnifferPrivate SoupContentSnifferPrivate
TYPE AS _SoupCookie SoupCookie
TYPE AS _SoupCookieJar SoupCookieJar
TYPE AS LONG SoupCookieJarAcceptPolicy
ENUM
  SOUP_COOKIE_JAR_ACCEPT_ALWAYS = 0
  SOUP_COOKIE_JAR_ACCEPT_NEVER = 1
  SOUP_COOKIE_JAR_ACCEPT_NO_THIRD_PARTY = 2
END ENUM
TYPE AS _SoupCookieJarClass SoupCookieJarClass
TYPE AS _SoupCookieJarDB SoupCookieJarDB
TYPE AS _SoupCookieJarDBClass SoupCookieJarDBClass
TYPE AS _SoupCookieJarText SoupCookieJarText
TYPE AS _SoupCookieJarTextClass SoupCookieJarTextClass
TYPE AS _SoupDate SoupDate
TYPE AS LONG SoupDateFormat
ENUM
  SOUP_DATE_HTTP = 1
  SOUP_DATE_COOKIE = 2
  SOUP_DATE_RFC2822 = 3
  SOUP_DATE_ISO8601_COMPACT = 4
  SOUP_DATE_ISO8601_FULL = 5
  SOUP_DATE_ISO8601 = 5
  SOUP_DATE_ISO8601_XMLRPC = 6
END ENUM
TYPE AS LONG SoupEncoding
ENUM
  SOUP_ENCODING_UNRECOGNIZED = 0
  SOUP_ENCODING_NONE = 1
  SOUP_ENCODING_CONTENT_LENGTH = 2
  SOUP_ENCODING_EOF = 3
  SOUP_ENCODING_CHUNKED = 4
  SOUP_ENCODING_BYTERANGES = 5
END ENUM
TYPE AS LONG SoupExpectation
ENUM
  SOUP_EXPECTATION_UNRECOGNIZED = 1
  SOUP_EXPECTATION_CONTINUE = 2
END ENUM
#DEFINE SOUP_FORM_MIME_TYPE_MULTIPART @!"multipart/form-data"
#DEFINE SOUP_FORM_MIME_TYPE_URLENCODED @!"application/x-www-form-urlencoded"
TYPE AS _SoupHSTSEnforcer SoupHSTSEnforcer
TYPE AS _SoupHSTSEnforcerClass SoupHSTSEnforcerClass
TYPE AS _SoupHSTSEnforcerDB SoupHSTSEnforcerDB
TYPE AS _SoupHSTSEnforcerDBClass SoupHSTSEnforcerDBClass
TYPE AS _SoupHSTSEnforcerDBPrivate SoupHSTSEnforcerDBPrivate
TYPE AS _SoupHSTSEnforcerPrivate SoupHSTSEnforcerPrivate
TYPE AS _SoupHSTSPolicy SoupHSTSPolicy
#DEFINE SOUP_HSTS_ENFORCER_DB_FILENAME @!"filename"
#DEFINE SOUP_HSTS_POLICY_MAX_AGE_PAST 0
TYPE AS LONG SoupHTTPVersion
ENUM
  SOUP_HTTP_1_0 = 0
  SOUP_HTTP_1_1 = 1
END ENUM
TYPE AS LONG SoupKnownStatusCode
ENUM
  SOUP_KNOWN_STATUS_CODE_NONE = 0
  SOUP_KNOWN_STATUS_CODE_CANCELLED = 1
  SOUP_KNOWN_STATUS_CODE_CANT_RESOLVE = 2
  SOUP_KNOWN_STATUS_CODE_CANT_RESOLVE_PROXY = 3
  SOUP_KNOWN_STATUS_CODE_CANT_CONNECT = 4
  SOUP_KNOWN_STATUS_CODE_CANT_CONNECT_PROXY = 5
  SOUP_KNOWN_STATUS_CODE_SSL_FAILED = 6
  SOUP_KNOWN_STATUS_CODE_IO_ERROR = 7
  SOUP_KNOWN_STATUS_CODE_MALFORMED = 8
  SOUP_KNOWN_STATUS_CODE_TRY_AGAIN = 9
  SOUP_KNOWN_STATUS_CODE_TOO_MANY_REDIRECTS = 10
  SOUP_KNOWN_STATUS_CODE_TLS_FAILED = 11
  SOUP_KNOWN_STATUS_CODE_CONTINUE = 100
  SOUP_KNOWN_STATUS_CODE_SWITCHING_PROTOCOLS = 101
  SOUP_KNOWN_STATUS_CODE_PROCESSING = 102
  SOUP_KNOWN_STATUS_CODE_OK = 200
  SOUP_KNOWN_STATUS_CODE_CREATED = 201
  SOUP_KNOWN_STATUS_CODE_ACCEPTED = 202
  SOUP_KNOWN_STATUS_CODE_NON_AUTHORITATIVE = 203
  SOUP_KNOWN_STATUS_CODE_NO_CONTENT = 204
  SOUP_KNOWN_STATUS_CODE_RESET_CONTENT = 205
  SOUP_KNOWN_STATUS_CODE_PARTIAL_CONTENT = 206
  SOUP_KNOWN_STATUS_CODE_MULTI_STATUS = 207
  SOUP_KNOWN_STATUS_CODE_MULTIPLE_CHOICES = 300
  SOUP_KNOWN_STATUS_CODE_MOVED_PERMANENTLY = 301
  SOUP_KNOWN_STATUS_CODE_FOUND = 302
  SOUP_KNOWN_STATUS_CODE_MOVED_TEMPORARILY = 302
  SOUP_KNOWN_STATUS_CODE_SEE_OTHER = 303
  SOUP_KNOWN_STATUS_CODE_NOT_MODIFIED = 304
  SOUP_KNOWN_STATUS_CODE_USE_PROXY = 305
  SOUP_KNOWN_STATUS_CODE_NOT_APPEARING_IN_THIS_PROTOCOL = 306
  SOUP_KNOWN_STATUS_CODE_TEMPORARY_REDIRECT = 307
  SOUP_KNOWN_STATUS_CODE_BAD_REQUEST = 400
  SOUP_KNOWN_STATUS_CODE_UNAUTHORIZED = 401
  SOUP_KNOWN_STATUS_CODE_PAYMENT_REQUIRED = 402
  SOUP_KNOWN_STATUS_CODE_FORBIDDEN = 403
  SOUP_KNOWN_STATUS_CODE_NOT_FOUND = 404
  SOUP_KNOWN_STATUS_CODE_METHOD_NOT_ALLOWED = 405
  SOUP_KNOWN_STATUS_CODE_NOT_ACCEPTABLE = 406
  SOUP_KNOWN_STATUS_CODE_PROXY_AUTHENTICATION_REQUIRED = 407
  SOUP_KNOWN_STATUS_CODE_PROXY_UNAUTHORIZED = 407
  SOUP_KNOWN_STATUS_CODE_REQUEST_TIMEOUT = 408
  SOUP_KNOWN_STATUS_CODE_CONFLICT = 409
  SOUP_KNOWN_STATUS_CODE_GONE = 410
  SOUP_KNOWN_STATUS_CODE_LENGTH_REQUIRED = 411
  SOUP_KNOWN_STATUS_CODE_PRECONDITION_FAILED = 412
  SOUP_KNOWN_STATUS_CODE_REQUEST_ENTITY_TOO_LARGE = 413
  SOUP_KNOWN_STATUS_CODE_REQUEST_URI_TOO_LONG = 414
  SOUP_KNOWN_STATUS_CODE_UNSUPPORTED_MEDIA_TYPE = 415
  SOUP_KNOWN_STATUS_CODE_REQUESTED_RANGE_NOT_SATISFIABLE = 416
  SOUP_KNOWN_STATUS_CODE_INVALID_RANGE = 416
  SOUP_KNOWN_STATUS_CODE_EXPECTATION_FAILED = 417
  SOUP_KNOWN_STATUS_CODE_UNPROCESSABLE_ENTITY = 422
  SOUP_KNOWN_STATUS_CODE_LOCKED = 423
  SOUP_KNOWN_STATUS_CODE_FAILED_DEPENDENCY = 424
  SOUP_KNOWN_STATUS_CODE_INTERNAL_SERVER_ERROR = 500
  SOUP_KNOWN_STATUS_CODE_NOT_IMPLEMENTED = 501
  SOUP_KNOWN_STATUS_CODE_BAD_GATEWAY = 502
  SOUP_KNOWN_STATUS_CODE_SERVICE_UNAVAILABLE = 503
  SOUP_KNOWN_STATUS_CODE_GATEWAY_TIMEOUT = 504
  SOUP_KNOWN_STATUS_CODE_HTTP_VERSION_NOT_SUPPORTED = 505
  SOUP_KNOWN_STATUS_CODE_INSUFFICIENT_STORAGE = 507
  SOUP_KNOWN_STATUS_CODE_NOT_EXTENDED = 510
END ENUM
#DEFINE SOUP_LOGGER_LEVEL @!"level"
#DEFINE SOUP_LOGGER_MAX_BODY_SIZE @!"max-body-size"
TYPE AS _SoupLogger SoupLogger
TYPE AS _SoupLoggerClass SoupLoggerClass
TYPE AS LONG SoupLoggerLogLevel
ENUM
  SOUP_LOGGER_LOG_NONE = 0
  SOUP_LOGGER_LOG_MINIMAL = 1
  SOUP_LOGGER_LOG_HEADERS = 2
  SOUP_LOGGER_LOG_BODY = 3
END ENUM
#DEFINE SOUP_MAJOR_VERSION 2
#DEFINE SOUP_MESSAGE_FIRST_PARTY @!"first-party"
#DEFINE SOUP_MESSAGE_FLAGS @!"flags"
#DEFINE SOUP_MESSAGE_HTTP_VERSION @!"http-version"
#DEFINE SOUP_MESSAGE_IS_TOP_LEVEL_NAVIGATION @!"is-top-level-navigation"
#DEFINE SOUP_MESSAGE_METHOD @!"method"
#DEFINE SOUP_MESSAGE_PRIORITY @!"priority"
#DEFINE SOUP_MESSAGE_REASON_PHRASE @!"reason-phrase"
#DEFINE SOUP_MESSAGE_REQUEST_BODY @!"request-body"
#DEFINE SOUP_MESSAGE_REQUEST_BODY_DATA @!"request-body-data"
#DEFINE SOUP_MESSAGE_REQUEST_HEADERS @!"request-headers"
#DEFINE SOUP_MESSAGE_RESPONSE_BODY @!"response-body"
#DEFINE SOUP_MESSAGE_RESPONSE_BODY_DATA @!"response-body-data"
#DEFINE SOUP_MESSAGE_RESPONSE_HEADERS @!"response-headers"
#DEFINE SOUP_MESSAGE_SERVER_SIDE @!"server-side"
#DEFINE SOUP_MESSAGE_SITE_FOR_COOKIES @!"site-for-cookies"
#DEFINE SOUP_MESSAGE_STATUS_CODE @!"status-code"
#DEFINE SOUP_MESSAGE_TLS_CERTIFICATE @!"tls-certificate"
#DEFINE SOUP_MESSAGE_TLS_ERRORS @!"tls-errors"
#DEFINE SOUP_MESSAGE_URI @!"uri"
#DEFINE SOUP_MICRO_VERSION 0
#DEFINE SOUP_MINOR_VERSION 70
TYPE AS LONG SoupMemoryUse
ENUM
  SOUP_MEMORY_STATIC = 0
  SOUP_MEMORY_TAKE = 1
  SOUP_MEMORY_COPY = 2
  SOUP_MEMORY_TEMPORARY = 3
END ENUM
TYPE AS _SoupMessage SoupMessage
TYPE AS _SoupMessageBody SoupMessageBody
TYPE AS _SoupMessageClass SoupMessageClass
TYPE AS LONG SoupMessageFlags
ENUM
  SOUP_MESSAGE_NO_REDIRECT = 2
  SOUP_MESSAGE_CAN_REBUILD = 4
  SOUP_MESSAGE_OVERWRITE_CHUNKS = 8
  SOUP_MESSAGE_CONTENT_DECODED = 16
  SOUP_MESSAGE_CERTIFICATE_TRUSTED = 32
  SOUP_MESSAGE_NEW_CONNECTION = 64
  SOUP_MESSAGE_IDEMPOTENT = 128
  SOUP_MESSAGE_IGNORE_CONNECTION_LIMITS = 256
  SOUP_MESSAGE_DO_NOT_USE_AUTH_CACHE = 512
END ENUM
TYPE AS _SoupMessageHeaders SoupMessageHeaders
TYPE AS _SoupMessageHeadersIter SoupMessageHeadersIter
TYPE AS LONG SoupMessageHeadersType
ENUM
  SOUP_MESSAGE_HEADERS_REQUEST = 0
  SOUP_MESSAGE_HEADERS_RESPONSE = 1
  SOUP_MESSAGE_HEADERS_MULTIPART = 2
END ENUM
TYPE AS LONG SoupMessagePriority
ENUM
  SOUP_MESSAGE_PRIORITY_VERY_LOW = 0
  SOUP_MESSAGE_PRIORITY_LOW = 1
  SOUP_MESSAGE_PRIORITY_NORMAL = 2
  SOUP_MESSAGE_PRIORITY_HIGH = 3
  SOUP_MESSAGE_PRIORITY_VERY_HIGH = 4
END ENUM
TYPE AS _SoupMessageQueue SoupMessageQueue
TYPE AS _SoupMessageQueueItem SoupMessageQueueItem
TYPE AS _SoupMultipart SoupMultipart
TYPE AS _SoupMultipartInputStream SoupMultipartInputStream
TYPE AS _SoupMultipartInputStreamClass SoupMultipartInputStreamClass
TYPE AS _SoupMultipartInputStreamPrivate SoupMultipartInputStreamPrivate
TYPE AS _SoupPasswordManager SoupPasswordManager
TYPE AS _SoupPasswordManagerInterface SoupPasswordManagerInterface
TYPE AS _SoupProxyResolver SoupProxyResolver
TYPE AS _SoupProxyResolverDefault SoupProxyResolverDefault
TYPE AS _SoupProxyResolverDefaultClass SoupProxyResolverDefaultClass
TYPE AS _SoupProxyResolverInterface SoupProxyResolverInterface
TYPE AS _SoupProxyURIResolver SoupProxyURIResolver
TYPE AS _SoupProxyURIResolverInterface SoupProxyURIResolverInterface
#DEFINE SOUP_REQUEST_SESSION @!"session"
#DEFINE SOUP_REQUEST_URI @!"uri"
TYPE AS _SoupRange SoupRange
TYPE AS _SoupRequest SoupRequest
TYPE AS _SoupRequestClass SoupRequestClass
TYPE AS _SoupRequestData SoupRequestData
TYPE AS _SoupRequestDataClass SoupRequestDataClass
TYPE AS _SoupRequestDataPrivate SoupRequestDataPrivate
TYPE AS LONG SoupRequestError
ENUM
  SOUP_REQUEST_ERROR_BAD_URI = 0
  SOUP_REQUEST_ERROR_UNSUPPORTED_URI_SCHEME = 1
  SOUP_REQUEST_ERROR_PARSING = 2
  SOUP_REQUEST_ERROR_ENCODING = 3
END ENUM
TYPE AS _SoupRequestFile SoupRequestFile
TYPE AS _SoupRequestFileClass SoupRequestFileClass
TYPE AS _SoupRequestFilePrivate SoupRequestFilePrivate
TYPE AS _SoupRequestHTTP SoupRequestHTTP
TYPE AS _SoupRequestHTTPClass SoupRequestHTTPClass
TYPE AS _SoupRequestHTTPPrivate SoupRequestHTTPPrivate
TYPE AS _SoupRequestPrivate SoupRequestPrivate
TYPE AS _SoupRequester SoupRequester
TYPE AS _SoupRequesterClass SoupRequesterClass
TYPE AS LONG SoupRequesterError
ENUM
  SOUP_REQUESTER_ERROR_BAD_URI = 0
  SOUP_REQUESTER_ERROR_UNSUPPORTED_URI_SCHEME = 1
END ENUM
TYPE AS _SoupRequesterPrivate SoupRequesterPrivate
#DEFINE SOUP_SERVER_ADD_WEBSOCKET_EXTENSION_ @!"add-websocket-extension"
#DEFINE SOUP_SERVER_ASYNC_CONTEXT @!"async-context"
#DEFINE SOUP_SERVER_HTTPS_ALIASES @!"https-aliases"
#DEFINE SOUP_SERVER_HTTP_ALIASES @!"http-aliases"
#DEFINE SOUP_SERVER_INTERFACE @!"interface"
#DEFINE SOUP_SERVER_PORT @!"port"
#DEFINE SOUP_SERVER_RAW_PATHS @!"raw-paths"
#DEFINE SOUP_SERVER_REMOVE_WEBSOCKET_EXTENSION_ @!"remove-websocket-extension"
#DEFINE SOUP_SERVER_SERVER_HEADER @!"server-header"
#DEFINE SOUP_SERVER_SSL_CERT_FILE @!"ssl-cert-file"
#DEFINE SOUP_SERVER_SSL_KEY_FILE @!"ssl-key-file"
#DEFINE SOUP_SERVER_TLS_CERTIFICATE @!"tls-certificate"
#DEFINE SOUP_SESSION_ACCEPT_LANGUAGE @!"accept-language"
#DEFINE SOUP_SESSION_ACCEPT_LANGUAGE_AUTO @!"accept-language-auto"
#DEFINE SOUP_SESSION_ADD_FEATURE @!"add-feature"
#DEFINE SOUP_SESSION_ADD_FEATURE_BY_TYPE @!"add-feature-by-type"
#DEFINE SOUP_SESSION_ASYNC_CONTEXT @!"async-context"
#DEFINE SOUP_SESSION_HTTPS_ALIASES @!"https-aliases"
#DEFINE SOUP_SESSION_HTTP_ALIASES @!"http-aliases"
#DEFINE SOUP_SESSION_IDLE_TIMEOUT @!"idle-timeout"
#DEFINE SOUP_SESSION_LOCAL_ADDRESS @!"local-address"
#DEFINE SOUP_SESSION_MAX_CONNS @!"max-conns"
#DEFINE SOUP_SESSION_MAX_CONNS_PER_HOST @!"max-conns-per-host"
#DEFINE SOUP_SESSION_PROXY_RESOLVER @!"proxy-resolver"
#DEFINE SOUP_SESSION_PROXY_URI @!"proxy-uri"
#DEFINE SOUP_SESSION_REMOVE_FEATURE_BY_TYPE @!"remove-feature-by-type"
#DEFINE SOUP_SESSION_SSL_CA_FILE @!"ssl-ca-file"
#DEFINE SOUP_SESSION_SSL_STRICT @!"ssl-strict"
#DEFINE SOUP_SESSION_SSL_USE_SYSTEM_CA_FILE @!"ssl-use-system-ca-file"
#DEFINE SOUP_SESSION_TIMEOUT @!"timeout"
#DEFINE SOUP_SESSION_TLS_DATABASE @!"tls-database"
#DEFINE SOUP_SESSION_TLS_INTERACTION @!"tls-interaction"
#DEFINE SOUP_SESSION_USER_AGENT @!"user-agent"
#DEFINE SOUP_SESSION_USE_NTLM @!"use-ntlm"
#DEFINE SOUP_SESSION_USE_THREAD_CONTEXT @!"use-thread-context"
#DEFINE SOUP_SOCKET_ASYNC_CONTEXT @!"async-context"
#DEFINE SOUP_SOCKET_FLAG_NONBLOCKING @!"non-blocking"
#DEFINE SOUP_SOCKET_IS_SERVER @!"is-server"
#DEFINE SOUP_SOCKET_LOCAL_ADDRESS @!"local-address"
#DEFINE SOUP_SOCKET_REMOTE_ADDRESS @!"remote-address"
#DEFINE SOUP_SOCKET_SSL_CREDENTIALS @!"ssl-creds"
#DEFINE SOUP_SOCKET_SSL_FALLBACK @!"ssl-fallback"
#DEFINE SOUP_SOCKET_SSL_STRICT @!"ssl-strict"
#DEFINE SOUP_SOCKET_TIMEOUT @!"timeout"
#DEFINE SOUP_SOCKET_TLS_CERTIFICATE @!"tls-certificate"
#DEFINE SOUP_SOCKET_TLS_ERRORS @!"tls-errors"
#DEFINE SOUP_SOCKET_TRUSTED_CERTIFICATE @!"trusted-certificate"
#DEFINE SOUP_SOCKET_USE_THREAD_CONTEXT @!"use-thread-context"
TYPE AS LONG SoupSameSitePolicy
ENUM
  SOUP_SAME_SITE_POLICY_NONE = 0
  SOUP_SAME_SITE_POLICY_LAX = 1
  SOUP_SAME_SITE_POLICY_STRICT = 2
END ENUM
TYPE AS _SoupServer SoupServer
TYPE AS _SoupServerClass SoupServerClass
TYPE AS LONG SoupServerListenOptions
ENUM
  SOUP_SERVER_LISTEN_HTTPS = 1
  SOUP_SERVER_LISTEN_IPV4_ONLY = 2
  SOUP_SERVER_LISTEN_IPV6_ONLY = 4
END ENUM
TYPE AS _SoupSession SoupSession
TYPE AS _SoupSessionAsync SoupSessionAsync
TYPE AS _SoupSessionAsyncClass SoupSessionAsyncClass
TYPE AS _SoupSessionClass SoupSessionClass
TYPE AS _SoupSessionFeature SoupSessionFeature
TYPE AS _SoupSessionFeatureInterface SoupSessionFeatureInterface
TYPE AS _SoupSessionSync SoupSessionSync
TYPE AS _SoupSessionSyncClass SoupSessionSyncClass
TYPE AS _SoupSocket SoupSocket
TYPE AS _SoupSocketClass SoupSocketClass
TYPE AS LONG SoupSocketIOStatus
ENUM
  SOUP_SOCKET_OK = 0
  SOUP_SOCKET_WOULD_BLOCK = 1
  SOUP_SOCKET_EOF = 2
  SOUP_SOCKET_ERROR = 3
END ENUM
TYPE AS LONG SoupStatus
ENUM
  SOUP_STATUS_NONE = 0
  SOUP_STATUS_CANCELLED = 1
  SOUP_STATUS_CANT_RESOLVE = 2
  SOUP_STATUS_CANT_RESOLVE_PROXY = 3
  SOUP_STATUS_CANT_CONNECT = 4
  SOUP_STATUS_CANT_CONNECT_PROXY = 5
  SOUP_STATUS_SSL_FAILED = 6
  SOUP_STATUS_IO_ERROR = 7
  SOUP_STATUS_MALFORMED = 8
  SOUP_STATUS_TRY_AGAIN = 9
  SOUP_STATUS_TOO_MANY_REDIRECTS = 10
  SOUP_STATUS_TLS_FAILED = 11
  SOUP_STATUS_CONTINUE = 100
  SOUP_STATUS_SWITCHING_PROTOCOLS = 101
  SOUP_STATUS_PROCESSING = 102
  SOUP_STATUS_OK = 200
  SOUP_STATUS_CREATED = 201
  SOUP_STATUS_ACCEPTED = 202
  SOUP_STATUS_NON_AUTHORITATIVE = 203
  SOUP_STATUS_NO_CONTENT = 204
  SOUP_STATUS_RESET_CONTENT = 205
  SOUP_STATUS_PARTIAL_CONTENT = 206
  SOUP_STATUS_MULTI_STATUS = 207
  SOUP_STATUS_MULTIPLE_CHOICES = 300
  SOUP_STATUS_MOVED_PERMANENTLY = 301
  SOUP_STATUS_FOUND = 302
  SOUP_STATUS_MOVED_TEMPORARILY = 302
  SOUP_STATUS_SEE_OTHER = 303
  SOUP_STATUS_NOT_MODIFIED = 304
  SOUP_STATUS_USE_PROXY = 305
  SOUP_STATUS_NOT_APPEARING_IN_THIS_PROTOCOL = 306
  SOUP_STATUS_TEMPORARY_REDIRECT = 307
  SOUP_STATUS_BAD_REQUEST = 400
  SOUP_STATUS_UNAUTHORIZED = 401
  SOUP_STATUS_PAYMENT_REQUIRED = 402
  SOUP_STATUS_FORBIDDEN = 403
  SOUP_STATUS_NOT_FOUND = 404
  SOUP_STATUS_METHOD_NOT_ALLOWED = 405
  SOUP_STATUS_NOT_ACCEPTABLE = 406
  SOUP_STATUS_PROXY_AUTHENTICATION_REQUIRED = 407
  SOUP_STATUS_PROXY_UNAUTHORIZED = 407
  SOUP_STATUS_REQUEST_TIMEOUT = 408
  SOUP_STATUS_CONFLICT = 409
  SOUP_STATUS_GONE = 410
  SOUP_STATUS_LENGTH_REQUIRED = 411
  SOUP_STATUS_PRECONDITION_FAILED = 412
  SOUP_STATUS_REQUEST_ENTITY_TOO_LARGE = 413
  SOUP_STATUS_REQUEST_URI_TOO_LONG = 414
  SOUP_STATUS_UNSUPPORTED_MEDIA_TYPE = 415
  SOUP_STATUS_REQUESTED_RANGE_NOT_SATISFIABLE = 416
  SOUP_STATUS_INVALID_RANGE = 416
  SOUP_STATUS_EXPECTATION_FAILED = 417
  SOUP_STATUS_UNPROCESSABLE_ENTITY = 422
  SOUP_STATUS_LOCKED = 423
  SOUP_STATUS_FAILED_DEPENDENCY = 424
  SOUP_STATUS_INTERNAL_SERVER_ERROR = 500
  SOUP_STATUS_NOT_IMPLEMENTED = 501
  SOUP_STATUS_BAD_GATEWAY = 502
  SOUP_STATUS_SERVICE_UNAVAILABLE = 503
  SOUP_STATUS_GATEWAY_TIMEOUT = 504
  SOUP_STATUS_HTTP_VERSION_NOT_SUPPORTED = 505
  SOUP_STATUS_INSUFFICIENT_STORAGE = 507
  SOUP_STATUS_NOT_EXTENDED = 510
END ENUM
TYPE AS LONG SoupTLDError
ENUM
  SOUP_TLD_ERROR_INVALID_HOSTNAME = 0
  SOUP_TLD_ERROR_IS_IP_ADDRESS = 1
  SOUP_TLD_ERROR_NOT_ENOUGH_DOMAINS = 2
  SOUP_TLD_ERROR_NO_BASE_DOMAIN = 3
  SOUP_TLD_ERROR_NO_PSL_DATA = 4
END ENUM
TYPE AS _SoupURI SoupURI
#DEFINE SOUP_VERSION_MIN_REQUIRED 2
TYPE AS LONG SoupWebsocketCloseCode
ENUM
  SOUP_WEBSOCKET_CLOSE_NORMAL = 1000
  SOUP_WEBSOCKET_CLOSE_GOING_AWAY = 1001
  SOUP_WEBSOCKET_CLOSE_PROTOCOL_ERROR = 1002
  SOUP_WEBSOCKET_CLOSE_UNSUPPORTED_DATA = 1003
  SOUP_WEBSOCKET_CLOSE_NO_STATUS = 1005
  SOUP_WEBSOCKET_CLOSE_ABNORMAL = 1006
  SOUP_WEBSOCKET_CLOSE_BAD_DATA = 1007
  SOUP_WEBSOCKET_CLOSE_POLICY_VIOLATION = 1008
  SOUP_WEBSOCKET_CLOSE_TOO_BIG = 1009
  SOUP_WEBSOCKET_CLOSE_NO_EXTENSION = 1010
  SOUP_WEBSOCKET_CLOSE_SERVER_ERROR = 1011
  SOUP_WEBSOCKET_CLOSE_TLS_HANDSHAKE = 1015
END ENUM
TYPE AS _SoupWebsocketConnection SoupWebsocketConnection
TYPE AS _SoupWebsocketConnectionClass SoupWebsocketConnectionClass
TYPE AS _SoupWebsocketConnectionPrivate SoupWebsocketConnectionPrivate
TYPE AS LONG SoupWebsocketConnectionType
ENUM
  SOUP_WEBSOCKET_CONNECTION_UNKNOWN = 0
  SOUP_WEBSOCKET_CONNECTION_CLIENT = 1
  SOUP_WEBSOCKET_CONNECTION_SERVER = 2
END ENUM
TYPE AS LONG SoupWebsocketDataType
ENUM
  SOUP_WEBSOCKET_DATA_TEXT = 1
  SOUP_WEBSOCKET_DATA_BINARY = 2
END ENUM
TYPE AS LONG SoupWebsocketError
ENUM
  SOUP_WEBSOCKET_ERROR_FAILED = 0
  SOUP_WEBSOCKET_ERROR_NOT_WEBSOCKET = 1
  SOUP_WEBSOCKET_ERROR_BAD_HANDSHAKE = 2
  SOUP_WEBSOCKET_ERROR_BAD_ORIGIN = 3
END ENUM
TYPE AS _SoupWebsocketExtension SoupWebsocketExtension
TYPE AS _SoupWebsocketExtensionClass SoupWebsocketExtensionClass
TYPE AS _SoupWebsocketExtensionDeflate SoupWebsocketExtensionDeflate
TYPE AS _SoupWebsocketExtensionDeflateClass SoupWebsocketExtensionDeflateClass
TYPE AS _SoupWebsocketExtensionManager SoupWebsocketExtensionManager
TYPE AS _SoupWebsocketExtensionManagerClass SoupWebsocketExtensionManagerClass
TYPE AS LONG SoupWebsocketState
ENUM
  SOUP_WEBSOCKET_STATE_OPEN = 1
  SOUP_WEBSOCKET_STATE_CLOSING = 2
  SOUP_WEBSOCKET_STATE_CLOSED = 3
END ENUM
TYPE AS LONG SoupXMLRPCError
ENUM
  SOUP_XMLRPC_ERROR_ARGUMENTS = 0
  SOUP_XMLRPC_ERROR_RETVAL = 1
END ENUM
TYPE AS LONG SoupXMLRPCFault
ENUM
  SOUP_XMLRPC_FAULT_PARSE_ERROR_NOT_WELL_FORMED = -32700
  SOUP_XMLRPC_FAULT_PARSE_ERROR_UNSUPPORTED_ENCODING = -32701
  SOUP_XMLRPC_FAULT_PARSE_ERROR_INVALID_CHARACTER_FOR_ENCODING = -32702
  SOUP_XMLRPC_FAULT_SERVER_ERROR_INVALID_XML_RPC = -32600
  SOUP_XMLRPC_FAULT_SERVER_ERROR_REQUESTED_METHOD_NOT_FOUND = -32601
  SOUP_XMLRPC_FAULT_SERVER_ERROR_INVALID_METHOD_PARAMETERS = -32602
  SOUP_XMLRPC_FAULT_SERVER_ERROR_INTERNAL_XML_RPC_ERROR = -32603
  SOUP_XMLRPC_FAULT_APPLICATION_ERROR = -32500
  SOUP_XMLRPC_FAULT_SYSTEM_ERROR = -32400
  SOUP_XMLRPC_FAULT_TRANSPORT_ERROR = -32300
END ENUM
TYPE AS _SoupXMLRPCParams SoupXMLRPCParams
EXTERN "C" LIB "soup-2.4"
' P_X

TYPE _SoupAuthDomainClass
  AS GObjectClass parent_class
  accepts AS FUNCTION CDECL(BYVAL AS SoupAuthDomain PTR, BYVAL AS SoupMessage PTR, BYVAL AS const char PTR) AS char PTR
  challenge AS FUNCTION CDECL(BYVAL AS SoupAuthDomain PTR, BYVAL AS SoupMessage PTR) AS char PTR
  check_password AS FUNCTION CDECL(BYVAL AS SoupAuthDomain PTR, BYVAL AS SoupMessage PTR, BYVAL AS const char PTR, BYVAL AS const char PTR) AS gboolean
  _libsoup_reserved2 AS SUB CDECL()
  _libsoup_reserved3 AS SUB CDECL()
  _libsoup_reserved4 AS SUB CDECL()
END TYPE
TYPE SoupSessionCallback AS SUB CDECL(BYVAL AS SoupSession PTR, BYVAL AS SoupMessage PTR, BYVAL AS gpointer)
TYPE _SoupSessionClass
  AS GObjectClass parent_class
  request_started AS SUB CDECL(BYVAL AS SoupSession PTR, BYVAL AS SoupMessage PTR, BYVAL AS SoupSocket PTR)
  authenticate AS SUB CDECL(BYVAL AS SoupSession PTR, BYVAL AS SoupMessage PTR, BYVAL AS SoupAuth PTR, BYVAL AS gboolean)
  queue_message AS SUB CDECL(BYVAL AS SoupSession PTR, BYVAL AS SoupMessage PTR, BYVAL AS SoupSessionCallback, BYVAL AS gpointer)
  requeue_message AS SUB CDECL(BYVAL AS SoupSession PTR, BYVAL AS SoupMessage PTR)
  send_message AS FUNCTION CDECL(BYVAL AS SoupSession PTR, BYVAL AS SoupMessage PTR) AS guint
  cancel_message AS SUB CDECL(BYVAL AS SoupSession PTR, BYVAL AS SoupMessage PTR, BYVAL AS guint)
  auth_required AS SUB CDECL(BYVAL AS SoupSession PTR, BYVAL AS SoupMessage PTR, BYVAL AS SoupAuth PTR, BYVAL AS gboolean)
  flush_queue AS SUB CDECL(BYVAL AS SoupSession PTR)
  kick AS SUB CDECL(BYVAL AS SoupSession PTR)
  _libsoup_reserved4 AS SUB CDECL()
END TYPE
TYPE SoupAddressCallback AS SUB CDECL(BYVAL AS SoupAddress PTR, BYVAL AS guint, BYVAL AS gpointer)
TYPE SoupAuthDomainBasicAuthCallback AS FUNCTION CDECL(BYVAL AS SoupAuthDomain PTR, BYVAL AS SoupMessage PTR, BYVAL AS const char PTR, BYVAL AS const char PTR, BYVAL AS gpointer) AS gboolean
TYPE SoupAuthDomainFilter AS FUNCTION CDECL(BYVAL AS SoupAuthDomain PTR, BYVAL AS SoupMessage PTR, BYVAL AS gpointer) AS gboolean
TYPE SoupAuthDomainGenericAuthCallback AS FUNCTION CDECL(BYVAL AS SoupAuthDomain PTR, BYVAL AS SoupMessage PTR, BYVAL AS const char PTR, BYVAL AS gpointer) AS gboolean
TYPE SoupAuthDomainDigestAuthCallback AS FUNCTION CDECL(BYVAL AS SoupAuthDomain PTR, BYVAL AS SoupMessage PTR, BYVAL AS const char PTR, BYVAL AS gpointer) AS char PTR
TYPE SoupLoggerPrinter AS SUB CDECL(BYVAL AS SoupLogger PTR, BYVAL AS SoupLoggerLogLevel, BYVAL AS gint8, BYVAL AS const char PTR, BYVAL AS gpointer)
TYPE SoupLoggerFilter AS FUNCTION CDECL(BYVAL AS SoupLogger PTR, BYVAL AS SoupMessage PTR, BYVAL AS gpointer) AS SoupLoggerLogLevel
TYPE SoupMessageHeadersForeachFunc AS SUB CDECL(BYVAL AS const char PTR, BYVAL AS const char PTR, BYVAL AS gpointer)
TYPE SoupPasswordManagerCallback AS SUB CDECL(BYVAL AS SoupPasswordManager PTR, BYVAL AS SoupMessage PTR, BYVAL AS SoupAuth PTR, BYVAL AS gboolean, BYVAL AS gpointer)
TYPE SoupProxyURIResolverCallback AS SUB CDECL(BYVAL AS SoupProxyURIResolver PTR, BYVAL AS guint, BYVAL AS SoupURI PTR, BYVAL AS gpointer)
TYPE SoupServerCallback AS SUB CDECL(BYVAL AS SoupServer PTR, BYVAL AS SoupMessage PTR, BYVAL AS const char PTR, BYVAL AS GHashTable PTR, BYVAL AS SoupClientContext PTR, BYVAL AS gpointer)
TYPE SoupServerWebsocketCallback AS SUB CDECL(BYVAL AS SoupServer PTR, BYVAL AS SoupWebsocketConnection PTR, BYVAL AS const char PTR, BYVAL AS SoupClientContext PTR, BYVAL AS gpointer)
TYPE SoupSocketCallback AS SUB CDECL(BYVAL AS SoupSocket PTR, BYVAL AS guint, BYVAL AS gpointer)
TYPE SoupProxyResolverCallback AS SUB CDECL(BYVAL AS SoupProxyResolver PTR, BYVAL AS SoupMessage PTR, BYVAL AS guint, BYVAL AS SoupAddress PTR, BYVAL AS gpointer)
TYPE SoupSessionConnectProgressCallback AS SUB CDECL(BYVAL AS SoupSession PTR, BYVAL AS GSocketClientEvent, BYVAL AS GIOStream PTR, BYVAL AS gpointer)
' P_3

TYPE _SoupAddress
  AS GObject parent
END TYPE
DECLARE FUNCTION soup_address_get_type() AS GType
#DEFINE SOUP_TYPE_ADDRESS (soup_address_get_type())
#DEFINE SOUP_ADDRESS(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), SOUP_TYPE_ADDRESS, SoupAddress))
#DEFINE SOUP_ADDRESS_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), SOUP_TYPE_ADDRESS, SoupAddressClass))
#DEFINE SOUP_IS_ADDRESS(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), SOUP_TYPE_ADDRESS))
#DEFINE SOUP_IS_CLASS_ADDRESS(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), SOUP_TYPE_ADDRESS))
#DEFINE SOUP_ADDRESS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), SOUP_TYPE_ADDRESS, SoupAddressClass))
DECLARE FUNCTION soup_address_new(BYVAL AS const char PTR, BYVAL AS guint) AS SoupAddress PTR
DECLARE FUNCTION soup_address_new_any(BYVAL AS SoupAddressFamily, BYVAL AS guint) AS SoupAddress PTR
DECLARE FUNCTION soup_address_new_from_sockaddr(BYVAL AS sockaddr PTR, BYVAL AS gint) AS SoupAddress PTR
DECLARE FUNCTION soup_address_equal_by_ip(BYVAL AS gconstpointer, BYVAL AS gconstpointer) AS gboolean
DECLARE FUNCTION soup_address_equal_by_name(BYVAL AS gconstpointer, BYVAL AS gconstpointer) AS gboolean
DECLARE FUNCTION soup_address_get_gsockaddr(BYVAL AS SoupAddress PTR) AS GSocketAddress PTR
DECLARE FUNCTION soup_address_get_name(BYVAL AS SoupAddress PTR) AS const char PTR
DECLARE FUNCTION soup_address_get_physical(BYVAL AS SoupAddress PTR) AS const char PTR
DECLARE FUNCTION soup_address_get_port(BYVAL AS SoupAddress PTR) AS guint
DECLARE FUNCTION soup_address_get_sockaddr(BYVAL AS SoupAddress PTR, BYVAL AS gint PTR) AS sockaddr PTR
DECLARE FUNCTION soup_address_hash_by_ip(BYVAL AS gconstpointer) AS guint
DECLARE FUNCTION soup_address_hash_by_name(BYVAL AS gconstpointer) AS guint
DECLARE FUNCTION soup_address_is_resolved(BYVAL AS SoupAddress PTR) AS gboolean
DECLARE SUB soup_address_resolve_async(BYVAL AS SoupAddress PTR, BYVAL AS GMainContext PTR, BYVAL AS GCancellable PTR, BYVAL AS SoupAddressCallback, BYVAL AS gpointer)
DECLARE FUNCTION soup_address_resolve_sync(BYVAL AS SoupAddress PTR, BYVAL AS GCancellable PTR) AS guint
TYPE _SoupAddressClass
  AS GObjectClass parent_class
  _libsoup_reserved1 AS SUB CDECL()
  _libsoup_reserved2 AS SUB CDECL()
  _libsoup_reserved3 AS SUB CDECL()
  _libsoup_reserved4 AS SUB CDECL()
END TYPE
TYPE _SoupAuth
  AS GObject parent
  AS char PTR realm
END TYPE
DECLARE FUNCTION soup_address_family_get_type() AS GType
#DEFINE SOUP_TYPE_ADDRESS_FAMILY (soup_address_family_get_type())
DECLARE FUNCTION soup_auth_get_type() AS GType
#DEFINE SOUP_TYPE_AUTH (soup_auth_get_type())
#DEFINE SOUP_AUTH(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), SOUP_TYPE_AUTH, SoupAuth))
#DEFINE SOUP_AUTH_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), SOUP_TYPE_AUTH, SoupAuthClass))
#DEFINE SOUP_IS_AUTH(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), SOUP_TYPE_AUTH))
#DEFINE SOUP_IS_CLASS_AUTH(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), SOUP_TYPE_AUTH))
#DEFINE SOUP_AUTH_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), SOUP_TYPE_AUTH, SoupAuthClass))
DECLARE FUNCTION soup_auth_new(BYVAL AS GType, BYVAL AS SoupMessage PTR, BYVAL AS const char PTR) AS SoupAuth PTR
DECLARE SUB soup_auth_authenticate(BYVAL AS SoupAuth PTR, BYVAL AS const char PTR, BYVAL AS const char PTR)
DECLARE FUNCTION soup_auth_can_authenticate(BYVAL AS SoupAuth PTR) AS gboolean
DECLARE SUB soup_auth_free_protection_space(BYVAL AS SoupAuth PTR, BYVAL AS GSList PTR)
DECLARE FUNCTION soup_auth_get_authorization(BYVAL AS SoupAuth PTR, BYVAL AS SoupMessage PTR) AS char PTR
DECLARE FUNCTION soup_auth_get_host(BYVAL AS SoupAuth PTR) AS const char PTR
DECLARE FUNCTION soup_auth_get_info(BYVAL AS SoupAuth PTR) AS char PTR
DECLARE FUNCTION soup_auth_get_protection_space(BYVAL AS SoupAuth PTR, BYVAL AS SoupURI PTR) AS GSList PTR
DECLARE FUNCTION soup_auth_get_realm(BYVAL AS SoupAuth PTR) AS const char PTR
DECLARE FUNCTION soup_auth_get_saved_password(BYVAL AS SoupAuth PTR, BYVAL AS const char PTR) AS const char PTR
DECLARE FUNCTION soup_auth_get_saved_users(BYVAL AS SoupAuth PTR) AS GSList PTR
DECLARE FUNCTION soup_auth_get_scheme_name(BYVAL AS SoupAuth PTR) AS const char PTR
DECLARE SUB soup_auth_has_saved_password(BYVAL AS SoupAuth PTR, BYVAL AS const char PTR, BYVAL AS const char PTR)
DECLARE FUNCTION soup_auth_is_authenticated_ ALIAS "soup_auth_is_authenticated"(BYVAL AS SoupAuth PTR) AS gboolean
DECLARE FUNCTION soup_auth_is_for_proxy_ ALIAS "soup_auth_is_for_proxy"(BYVAL AS SoupAuth PTR) AS gboolean
DECLARE FUNCTION soup_auth_is_ready(BYVAL AS SoupAuth PTR, BYVAL AS SoupMessage PTR) AS gboolean
DECLARE SUB soup_auth_save_password(BYVAL AS SoupAuth PTR, BYVAL AS const char PTR, BYVAL AS const char PTR)
DECLARE FUNCTION soup_auth_update(BYVAL AS SoupAuth PTR, BYVAL AS SoupMessage PTR, BYVAL AS const char PTR) AS gboolean
DECLARE FUNCTION soup_auth_basic_get_type() AS GType
#DEFINE SOUP_TYPE_AUTH_BASIC (soup_auth_basic_get_type())
#DEFINE SOUP_AUTH_BASIC(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), SOUP_TYPE_AUTH_BASIC, SoupAuthBasic))
#DEFINE SOUP_AUTH_BASIC_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), SOUP_TYPE_AUTH_BASIC, Soup))
#DEFINE SOUP_IS_AUTH_BASIC(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), SOUP_TYPE_AUTH_BASIC))
#DEFINE SOUP_IS_CLASS_AUTH_BASIC(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), SOUP_TYPE_AUTH_BASIC))
#DEFINE SOUP_AUTH_BASIC_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), SOUP_TYPE_AUTH_BASIC, Soup))
TYPE _SoupAuthClass
  AS GObjectClass parent_class
  AS const char PTR scheme_name
  AS guint strength
  update AS FUNCTION CDECL(BYVAL AS SoupAuth PTR, BYVAL AS SoupMessage PTR, BYVAL AS GHashTable PTR) AS gboolean
  get_protection_space AS FUNCTION CDECL(BYVAL AS SoupAuth PTR, BYVAL AS SoupURI PTR) AS GSList PTR
  authenticate AS SUB CDECL(BYVAL AS SoupAuth PTR, BYVAL AS const char PTR, BYVAL AS const char PTR)
  is_authenticated AS FUNCTION CDECL(BYVAL AS SoupAuth PTR) AS gboolean
  get_authorization AS FUNCTION CDECL(BYVAL AS SoupAuth PTR, BYVAL AS SoupMessage PTR) AS char PTR
  is_ready AS FUNCTION CDECL(BYVAL AS SoupAuth PTR, BYVAL AS SoupMessage PTR) AS gboolean
  can_authenticate AS FUNCTION CDECL(BYVAL AS SoupAuth PTR) AS gboolean
  _libsoup_reserved3 AS SUB CDECL()
  _libsoup_reserved4 AS SUB CDECL()
END TYPE
DECLARE FUNCTION soup_auth_digest_get_type() AS GType
#DEFINE SOUP_TYPE_AUTH_DIGEST (soup_auth_digest_get_type())
#DEFINE SOUP_AUTH_DIGEST(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), SOUP_TYPE_AUTH_DIGEST, SoupAuthDigest))
#DEFINE SOUP_AUTH_DIGEST_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), SOUP_TYPE_AUTH_DIGEST, Soup))
#DEFINE SOUP_IS_AUTH_DIGEST(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), SOUP_TYPE_AUTH_DIGEST))
#DEFINE SOUP_IS_CLASS_AUTH_DIGEST(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), SOUP_TYPE_AUTH_DIGEST))
#DEFINE SOUP_AUTH_DIGEST_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), SOUP_TYPE_AUTH_DIGEST, Soup))
TYPE _SoupAuthDomain
  AS GObject parent
END TYPE
DECLARE FUNCTION soup_auth_domain_get_type() AS GType
#DEFINE SOUP_TYPE_AUTH_DOMAIN (soup_auth_domain_get_type())
#DEFINE SOUP_AUTH_DOMAIN(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), SOUP_TYPE_AUTH_DOMAIN, SoupAuthDomain))
#DEFINE SOUP_AUTH_DOMAIN_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), SOUP_TYPE_AUTH_DOMAIN, SoupAuthDomainClass))
#DEFINE SOUP_IS_AUTH_DOMAIN(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), SOUP_TYPE_AUTH_DOMAIN))
#DEFINE SOUP_IS_CLASS_AUTH_DOMAIN(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), SOUP_TYPE_AUTH_DOMAIN))
#DEFINE SOUP_AUTH_DOMAIN_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), SOUP_TYPE_AUTH_DOMAIN, SoupAuthDomainClass))
DECLARE FUNCTION soup_auth_domain_accepts(BYVAL AS SoupAuthDomain PTR, BYVAL AS SoupMessage PTR) AS char PTR
DECLARE SUB soup_auth_domain_add_path_ ALIAS "soup_auth_domain_add_path"(BYVAL AS SoupAuthDomain PTR, BYVAL AS const char PTR)
DECLARE SUB soup_auth_domain_challenge(BYVAL AS SoupAuthDomain PTR, BYVAL AS SoupMessage PTR)
DECLARE FUNCTION soup_auth_domain_check_password(BYVAL AS SoupAuthDomain PTR, BYVAL AS SoupMessage PTR, BYVAL AS const char PTR, BYVAL AS const char PTR) AS gboolean
DECLARE FUNCTION soup_auth_domain_covers(BYVAL AS SoupAuthDomain PTR, BYVAL AS SoupMessage PTR) AS gboolean
DECLARE FUNCTION soup_auth_domain_get_realm(BYVAL AS SoupAuthDomain PTR) AS const char PTR
DECLARE SUB soup_auth_domain_remove_path_ ALIAS "soup_auth_domain_remove_path"(BYVAL AS SoupAuthDomain PTR, BYVAL AS const char PTR)
DECLARE SUB soup_auth_domain_set_filter(BYVAL AS SoupAuthDomain PTR, BYVAL AS SoupAuthDomainFilter, BYVAL AS gpointer, BYVAL AS GDestroyNotify)
DECLARE SUB soup_auth_domain_set_generic_auth_callback(BYVAL AS SoupAuthDomain PTR, BYVAL AS SoupAuthDomainGenericAuthCallback, BYVAL AS gpointer, BYVAL AS GDestroyNotify)
DECLARE FUNCTION soup_auth_domain_try_generic_auth_callback(BYVAL AS SoupAuthDomain PTR, BYVAL AS SoupMessage PTR, BYVAL AS const char PTR) AS gboolean
TYPE _SoupAuthDomainBasic
  AS SoupAuthDomain parent
END TYPE
DECLARE FUNCTION soup_auth_domain_basic_get_type() AS GType
#DEFINE SOUP_TYPE_AUTH_DOMAIN_BASIC (soup_auth_domain_basic_get_type())
#DEFINE SOUP_AUTH_DOMAIN_BASIC(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), SOUP_TYPE_AUTH_DOMAIN_BASIC, SoupAuthDomainBasic))
#DEFINE SOUP_AUTH_DOMAIN_BASIC_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), SOUP_TYPE_AUTH_DOMAIN_BASIC, SoupAuthDomainBasicClass))
#DEFINE SOUP_IS_AUTH_DOMAIN_BASIC(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), SOUP_TYPE_AUTH_DOMAIN_BASIC))
#DEFINE SOUP_IS_CLASS_AUTH_DOMAIN_BASIC(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), SOUP_TYPE_AUTH_DOMAIN_BASIC))
#DEFINE SOUP_AUTH_DOMAIN_BASIC_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), SOUP_TYPE_AUTH_DOMAIN_BASIC, SoupAuthDomainBasicClass))
DECLARE FUNCTION soup_auth_domain_basic_new(BYVAL AS const char PTR, ...) AS SoupAuthDomain PTR
DECLARE SUB soup_auth_domain_basic_set_auth_callback(BYVAL AS SoupAuthDomain PTR, BYVAL AS SoupAuthDomainBasicAuthCallback, BYVAL AS gpointer, BYVAL AS GDestroyNotify)
TYPE _SoupAuthDomainBasicClass
  AS SoupAuthDomainClass parent_class
  _libsoup_reserved1 AS SUB CDECL()
  _libsoup_reserved2 AS SUB CDECL()
  _libsoup_reserved3 AS SUB CDECL()
  _libsoup_reserved4 AS SUB CDECL()
END TYPE
TYPE _SoupAuthDomainDigest
  AS SoupAuthDomain parent
END TYPE
DECLARE FUNCTION soup_auth_domain_digest_get_type() AS GType
#DEFINE SOUP_TYPE_AUTH_DOMAIN_DIGEST (soup_auth_domain_digest_get_type())
#DEFINE SOUP_AUTH_DOMAIN_DIGEST(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), SOUP_TYPE_AUTH_DOMAIN_DIGEST, SoupAuthDomainDigest))
#DEFINE SOUP_AUTH_DOMAIN_DIGEST_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), SOUP_TYPE_AUTH_DOMAIN_DIGEST, SoupAuthDomainDigestClass))
#DEFINE SOUP_IS_AUTH_DOMAIN_DIGEST(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), SOUP_TYPE_AUTH_DOMAIN_DIGEST))
#DEFINE SOUP_IS_CLASS_AUTH_DOMAIN_DIGEST(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), SOUP_TYPE_AUTH_DOMAIN_DIGEST))
#DEFINE SOUP_AUTH_DOMAIN_DIGEST_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), SOUP_TYPE_AUTH_DOMAIN_DIGEST, SoupAuthDomainDigestClass))
DECLARE FUNCTION soup_auth_domain_digest_new(BYVAL AS const char PTR, ...) AS SoupAuthDomain PTR
DECLARE FUNCTION soup_auth_domain_digest_encode_password(BYVAL AS const char PTR, BYVAL AS const char PTR, BYVAL AS const char PTR) AS char PTR
DECLARE SUB soup_auth_domain_digest_set_auth_callback(BYVAL AS SoupAuthDomain PTR, BYVAL AS SoupAuthDomainDigestAuthCallback, BYVAL AS gpointer, BYVAL AS GDestroyNotify)
TYPE _SoupAuthDomainDigestClass
  AS SoupAuthDomainClass parent_class
  _libsoup_reserved1 AS SUB CDECL()
  _libsoup_reserved2 AS SUB CDECL()
  _libsoup_reserved3 AS SUB CDECL()
  _libsoup_reserved4 AS SUB CDECL()
END TYPE
TYPE _SoupAuthManager
  AS GObject parent
  AS SoupAuthManagerPrivate PTR priv
END TYPE
DECLARE FUNCTION soup_auth_manager_get_type() AS GType
#DEFINE SOUP_TYPE_AUTH_MANAGER (soup_auth_manager_get_type())
#DEFINE SOUP_AUTH_MANAGER(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), SOUP_TYPE_AUTH_MANAGER, SoupAuthManager))
#DEFINE SOUP_AUTH_MANAGER_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), SOUP_TYPE_AUTH_MANAGER, SoupAuthManagerClass))
#DEFINE SOUP_IS_AUTH_MANAGER(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), SOUP_TYPE_AUTH_MANAGER))
#DEFINE SOUP_IS_CLASS_AUTH_MANAGER(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), SOUP_TYPE_AUTH_MANAGER))
#DEFINE SOUP_AUTH_MANAGER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), SOUP_TYPE_AUTH_MANAGER, SoupAuthManagerClass))
DECLARE SUB soup_auth_manager_clear_cached_credentials(BYVAL AS SoupAuthManager PTR)
DECLARE SUB soup_auth_manager_use_auth(BYVAL AS SoupAuthManager PTR, BYVAL AS SoupURI PTR, BYVAL AS SoupAuth PTR)
TYPE _SoupAuthManagerClass
  AS GObjectClass parent_class
  authenticate AS SUB CDECL(BYVAL AS SoupAuthManager PTR, BYVAL AS SoupMessage PTR, BYVAL AS SoupAuth PTR, BYVAL AS gboolean)
END TYPE
DECLARE FUNCTION soup_auth_ntlm_get_type() AS GType
#DEFINE SOUP_TYPE_AUTH_NTLM (soup_auth_ntlm_get_type())
#DEFINE SOUP_AUTH_NTLM(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), SOUP_TYPE_AUTH_NTLM, SoupAuthNTLM))
#DEFINE SOUP_AUTH_NTLM_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), SOUP_TYPE_AUTH_NTLM, Soup))
#DEFINE SOUP_IS_AUTH_NTLM(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), SOUP_TYPE_AUTH_NTLM))
#DEFINE SOUP_IS_CLASS_AUTH_NTLM(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), SOUP_TYPE_AUTH_NTLM))
#DEFINE SOUP_AUTH_NTLM_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), SOUP_TYPE_AUTH_NTLM, Soup))
DECLARE FUNCTION soup_auth_negotiate_get_type() AS GType
#DEFINE SOUP_TYPE_AUTH_NEGOTIATE (soup_auth_negotiate_get_type())
#DEFINE SOUP_AUTH_NEGOTIATE(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), SOUP_TYPE_AUTH_NEGOTIATE, SoupAuthNegotiate))
#DEFINE SOUP_AUTH_NEGOTIATE_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), SOUP_TYPE_AUTH_NEGOTIATE, Soup))
#DEFINE SOUP_IS_AUTH_NEGOTIATE(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), SOUP_TYPE_AUTH_NEGOTIATE))
#DEFINE SOUP_IS_CLASS_AUTH_NEGOTIATE(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), SOUP_TYPE_AUTH_NEGOTIATE))
#DEFINE SOUP_AUTH_NEGOTIATE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), SOUP_TYPE_AUTH_NEGOTIATE, Soup))
DECLARE FUNCTION soup_auth_negotiate_supported() AS gboolean
TYPE _SoupBuffer
  AS gpointer data
  AS gsize length
END TYPE
DECLARE FUNCTION soup_buffer_new(BYVAL AS SoupMemoryUse, BYVAL AS gconstpointer, BYVAL AS gsize) AS SoupBuffer PTR
DECLARE FUNCTION soup_buffer_new_take(BYVAL AS guchar PTR, BYVAL AS gsize) AS SoupBuffer PTR
DECLARE FUNCTION soup_buffer_new_with_owner(BYVAL AS gconstpointer, BYVAL AS gsize, BYVAL AS gpointer, BYVAL AS GDestroyNotify) AS SoupBuffer PTR
DECLARE FUNCTION soup_buffer_copy(BYVAL AS SoupBuffer PTR) AS SoupBuffer PTR
DECLARE SUB soup_buffer_free(BYVAL AS SoupBuffer PTR)
DECLARE FUNCTION soup_buffer_get_as_bytes(BYVAL AS SoupBuffer PTR) AS GBytes PTR
DECLARE SUB soup_buffer_get_data(BYVAL AS SoupBuffer PTR, BYVAL AS const guint8 PTR PTR, BYVAL AS gsize PTR)
DECLARE FUNCTION soup_buffer_get_owner(BYVAL AS SoupBuffer PTR) AS gpointer
DECLARE FUNCTION soup_buffer_new_subbuffer(BYVAL AS SoupBuffer PTR, BYVAL AS gsize, BYVAL AS gsize) AS SoupBuffer PTR
TYPE _SoupCache
  AS GObject parent_instance
  AS SoupCachePrivate PTR priv
END TYPE
DECLARE FUNCTION soup_cache_get_type() AS GType
#DEFINE SOUP_TYPE_CACHE (soup_cache_get_type())
#DEFINE SOUP_CACHE(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), SOUP_TYPE_CACHE, SoupCache))
#DEFINE SOUP_CACHE_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), SOUP_TYPE_CACHE, SoupCacheClass))
#DEFINE SOUP_IS_CACHE(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), SOUP_TYPE_CACHE))
#DEFINE SOUP_IS_CLASS_CACHE(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), SOUP_TYPE_CACHE))
#DEFINE SOUP_CACHE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), SOUP_TYPE_CACHE, SoupCacheClass))
DECLARE FUNCTION soup_cache_new(BYVAL AS const char PTR, BYVAL AS SoupCacheType) AS SoupCache PTR
DECLARE SUB soup_cache_clear(BYVAL AS SoupCache PTR)
DECLARE SUB soup_cache_dump(BYVAL AS SoupCache PTR)
DECLARE SUB soup_cache_flush(BYVAL AS SoupCache PTR)
DECLARE FUNCTION soup_cache_get_max_size(BYVAL AS SoupCache PTR) AS guint
DECLARE SUB soup_cache_load(BYVAL AS SoupCache PTR)
DECLARE SUB soup_cache_set_max_size(BYVAL AS SoupCache PTR, BYVAL AS guint)
TYPE _SoupCacheClass
  AS GObjectClass parent_class
  get_cacheability AS FUNCTION CDECL(BYVAL AS SoupCache PTR, BYVAL AS SoupMessage PTR) AS SoupCacheability
  _libsoup_reserved1 AS SUB CDECL()
  _libsoup_reserved2 AS SUB CDECL()
  _libsoup_reserved3 AS SUB CDECL()
END TYPE
TYPE SoupChunkAllocator AS FUNCTION CDECL(BYVAL AS SoupMessage PTR, BYVAL AS gsize, BYVAL AS gpointer) AS SoupBuffer PTR
DECLARE FUNCTION soup_cache_response_get_type() AS GType
#DEFINE SOUP_TYPE_CACHE_RESPONSE (soup_cache_response_get_type())
DECLARE FUNCTION soup_cache_type_get_type() AS GType
#DEFINE SOUP_TYPE_CACHE_TYPE (soup_cache_type_get_type())
DECLARE FUNCTION soup_client_context_get_address(BYVAL AS SoupClientContext PTR) AS SoupAddress PTR
DECLARE FUNCTION soup_client_context_get_auth_domain(BYVAL AS SoupClientContext PTR) AS SoupAuthDomain PTR
DECLARE FUNCTION soup_client_context_get_auth_user(BYVAL AS SoupClientContext PTR) AS const char PTR
DECLARE FUNCTION soup_client_context_get_gsocket(BYVAL AS SoupClientContext PTR) AS GSocket PTR
DECLARE FUNCTION soup_client_context_get_host(BYVAL AS SoupClientContext PTR) AS const char PTR
DECLARE FUNCTION soup_client_context_get_local_address(BYVAL AS SoupClientContext PTR) AS GSocketAddress PTR
DECLARE FUNCTION soup_client_context_get_remote_address(BYVAL AS SoupClientContext PTR) AS GSocketAddress PTR
DECLARE FUNCTION soup_client_context_get_socket(BYVAL AS SoupClientContext PTR) AS SoupSocket PTR
DECLARE FUNCTION soup_client_context_steal_connection(BYVAL AS SoupClientContext PTR) AS GIOStream PTR
TYPE _SoupContentDecoder
  AS GObject parent
  AS SoupContentDecoderPrivate PTR priv
END TYPE
DECLARE FUNCTION soup_connection_state_get_type() AS GType
#DEFINE SOUP_TYPE_CONNECTION_STATE (soup_connection_state_get_type())
DECLARE FUNCTION soup_content_decoder_get_type() AS GType
#DEFINE SOUP_TYPE_CONTENT_DECODER (soup_content_decoder_get_type())
#DEFINE SOUP_CONTENT_DECODER(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), SOUP_TYPE_CONTENT_DECODER, SoupContentDecoder))
#DEFINE SOUP_CONTENT_DECODER_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), SOUP_TYPE_CONTENT_DECODER, SoupContentDecoderClass))
#DEFINE SOUP_IS_CONTENT_DECODER(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), SOUP_TYPE_CONTENT_DECODER))
#DEFINE SOUP_IS_CLASS_CONTENT_DECODER(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), SOUP_TYPE_CONTENT_DECODER))
#DEFINE SOUP_CONTENT_DECODER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), SOUP_TYPE_CONTENT_DECODER, SoupContentDecoderClass))
TYPE _SoupContentDecoderClass
  AS GObjectClass parent_class
  _libsoup_reserved1 AS SUB CDECL()
  _libsoup_reserved2 AS SUB CDECL()
  _libsoup_reserved3 AS SUB CDECL()
  _libsoup_reserved4 AS SUB CDECL()
  _libsoup_reserved5 AS SUB CDECL()
END TYPE
TYPE _SoupContentSniffer
  AS GObject parent
  AS SoupContentSnifferPrivate PTR priv
END TYPE
DECLARE FUNCTION soup_content_sniffer_get_type() AS GType
#DEFINE SOUP_TYPE_CONTENT_SNIFFER (soup_content_sniffer_get_type())
#DEFINE SOUP_CONTENT_SNIFFER(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), SOUP_TYPE_CONTENT_SNIFFER, SoupContentSniffer))
#DEFINE SOUP_CONTENT_SNIFFER_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), SOUP_TYPE_CONTENT_SNIFFER, SoupContentSnifferClass))
#DEFINE SOUP_IS_CONTENT_SNIFFER(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), SOUP_TYPE_CONTENT_SNIFFER))
#DEFINE SOUP_IS_CLASS_CONTENT_SNIFFER(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), SOUP_TYPE_CONTENT_SNIFFER))
#DEFINE SOUP_CONTENT_SNIFFER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), SOUP_TYPE_CONTENT_SNIFFER, SoupContentSnifferClass))
DECLARE FUNCTION soup_content_sniffer_new() AS SoupContentSniffer PTR
DECLARE FUNCTION soup_content_sniffer_get_buffer_size(BYVAL AS SoupContentSniffer PTR) AS gsize
DECLARE FUNCTION soup_content_sniffer_sniff(BYVAL AS SoupContentSniffer PTR, BYVAL AS SoupMessage PTR, BYVAL AS SoupBuffer PTR, BYVAL AS GHashTable PTR PTR) AS char PTR
TYPE _SoupContentSnifferClass
  AS GObjectClass parent_class
  sniff AS FUNCTION CDECL(BYVAL AS SoupContentSniffer PTR, BYVAL AS SoupMessage PTR, BYVAL AS SoupBuffer PTR, BYVAL AS GHashTable PTR PTR) AS char PTR
  get_buffer_size AS FUNCTION CDECL(BYVAL AS SoupContentSniffer PTR) AS gsize
  _libsoup_reserved1 AS SUB CDECL()
  _libsoup_reserved2 AS SUB CDECL()
  _libsoup_reserved3 AS SUB CDECL()
  _libsoup_reserved4 AS SUB CDECL()
  _libsoup_reserved5 AS SUB CDECL()
END TYPE
TYPE _SoupCookie
  AS char PTR name
  AS char PTR value
  AS char PTR domain
  AS char PTR path
  AS SoupDate PTR expires
  AS gboolean secure
  AS gboolean http_only
END TYPE
DECLARE FUNCTION soup_cookie_new(BYVAL AS const char PTR, BYVAL AS const char PTR, BYVAL AS const char PTR, BYVAL AS const char PTR, BYVAL AS gint) AS SoupCookie PTR
DECLARE FUNCTION soup_cookie_applies_to_uri(BYVAL AS SoupCookie PTR, BYVAL AS SoupURI PTR) AS gboolean
DECLARE FUNCTION soup_cookie_copy(BYVAL AS SoupCookie PTR) AS SoupCookie PTR
DECLARE FUNCTION soup_cookie_domain_matches(BYVAL AS SoupCookie PTR, BYVAL AS const char PTR) AS gboolean
DECLARE FUNCTION soup_cookie_equal(BYVAL AS SoupCookie PTR, BYVAL AS SoupCookie PTR) AS gboolean
DECLARE SUB soup_cookie_free(BYVAL AS SoupCookie PTR)
DECLARE FUNCTION soup_cookie_get_domain(BYVAL AS SoupCookie PTR) AS const char PTR
DECLARE FUNCTION soup_cookie_get_expires(BYVAL AS SoupCookie PTR) AS SoupDate PTR
DECLARE FUNCTION soup_cookie_get_http_only(BYVAL AS SoupCookie PTR) AS gboolean
DECLARE FUNCTION soup_cookie_get_name(BYVAL AS SoupCookie PTR) AS const char PTR
DECLARE FUNCTION soup_cookie_get_path(BYVAL AS SoupCookie PTR) AS const char PTR
DECLARE FUNCTION soup_cookie_get_same_site_policy(BYVAL AS SoupCookie PTR) AS SoupSameSitePolicy
DECLARE FUNCTION soup_cookie_get_secure(BYVAL AS SoupCookie PTR) AS gboolean
DECLARE FUNCTION soup_cookie_get_value(BYVAL AS SoupCookie PTR) AS const char PTR
DECLARE SUB soup_cookie_set_domain(BYVAL AS SoupCookie PTR, BYVAL AS const char PTR)
DECLARE SUB soup_cookie_set_expires(BYVAL AS SoupCookie PTR, BYVAL AS SoupDate PTR)
DECLARE SUB soup_cookie_set_http_only(BYVAL AS SoupCookie PTR, BYVAL AS gboolean)
DECLARE SUB soup_cookie_set_max_age(BYVAL AS SoupCookie PTR, BYVAL AS gint)
DECLARE SUB soup_cookie_set_name(BYVAL AS SoupCookie PTR, BYVAL AS const char PTR)
DECLARE SUB soup_cookie_set_path(BYVAL AS SoupCookie PTR, BYVAL AS const char PTR)
DECLARE SUB soup_cookie_set_same_site_policy(BYVAL AS SoupCookie PTR, BYVAL AS SoupSameSitePolicy)
DECLARE SUB soup_cookie_set_secure(BYVAL AS SoupCookie PTR, BYVAL AS gboolean)
DECLARE SUB soup_cookie_set_value(BYVAL AS SoupCookie PTR, BYVAL AS const char PTR)
DECLARE FUNCTION soup_cookie_to_cookie_header(BYVAL AS SoupCookie PTR) AS char PTR
DECLARE FUNCTION soup_cookie_to_set_cookie_header(BYVAL AS SoupCookie PTR) AS char PTR
DECLARE FUNCTION soup_cookie_parse(BYVAL AS const char PTR, BYVAL AS SoupURI PTR) AS SoupCookie PTR
TYPE _SoupCookieJar
  AS GObject parent
END TYPE
DECLARE FUNCTION soup_cookie_jar_get_type() AS GType
#DEFINE SOUP_TYPE_COOKIE_JAR (soup_cookie_jar_get_type())
#DEFINE SOUP_COOKIE_JAR(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), SOUP_TYPE_COOKIE_JAR, SoupCookieJar))
#DEFINE SOUP_COOKIE_JAR_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), SOUP_TYPE_COOKIE_JAR, SoupCookieJarClass))
#DEFINE SOUP_IS_COOKIE_JAR(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), SOUP_TYPE_COOKIE_JAR))
#DEFINE SOUP_IS_CLASS_COOKIE_JAR(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), SOUP_TYPE_COOKIE_JAR))
#DEFINE SOUP_COOKIE_JAR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), SOUP_TYPE_COOKIE_JAR, SoupCookieJarClass))
DECLARE FUNCTION soup_cookie_jar_new() AS SoupCookieJar PTR
DECLARE SUB soup_cookie_jar_add_cookie(BYVAL AS SoupCookieJar PTR, BYVAL AS SoupCookie PTR)
DECLARE SUB soup_cookie_jar_add_cookie_full(BYVAL AS SoupCookieJar PTR, BYVAL AS SoupCookie PTR, BYVAL AS SoupURI PTR, BYVAL AS SoupURI PTR)
DECLARE SUB soup_cookie_jar_add_cookie_with_first_party(BYVAL AS SoupCookieJar PTR, BYVAL AS SoupURI PTR, BYVAL AS SoupCookie PTR)
DECLARE FUNCTION soup_cookie_jar_all_cookies(BYVAL AS SoupCookieJar PTR) AS GSList PTR
DECLARE SUB soup_cookie_jar_delete_cookie(BYVAL AS SoupCookieJar PTR, BYVAL AS SoupCookie PTR)
DECLARE FUNCTION soup_cookie_jar_get_accept_policy(BYVAL AS SoupCookieJar PTR) AS SoupCookieJarAcceptPolicy
DECLARE FUNCTION soup_cookie_jar_get_cookie_list(BYVAL AS SoupCookieJar PTR, BYVAL AS SoupURI PTR, BYVAL AS gboolean) AS GSList PTR
DECLARE FUNCTION soup_cookie_jar_get_cookie_list_with_same_site_info(BYVAL AS SoupCookieJar PTR, BYVAL AS SoupURI PTR, BYVAL AS SoupURI PTR, BYVAL AS SoupURI PTR, BYVAL AS gboolean, BYVAL AS gboolean, BYVAL AS gboolean) AS GSList PTR
DECLARE FUNCTION soup_cookie_jar_get_cookies(BYVAL AS SoupCookieJar PTR, BYVAL AS SoupURI PTR, BYVAL AS gboolean) AS char PTR
DECLARE FUNCTION soup_cookie_jar_is_persistent(BYVAL AS SoupCookieJar PTR) AS gboolean
DECLARE SUB soup_cookie_jar_save(BYVAL AS SoupCookieJar PTR)
DECLARE SUB soup_cookie_jar_set_accept_policy(BYVAL AS SoupCookieJar PTR, BYVAL AS SoupCookieJarAcceptPolicy)
DECLARE SUB soup_cookie_jar_set_cookie(BYVAL AS SoupCookieJar PTR, BYVAL AS SoupURI PTR, BYVAL AS const char PTR)
DECLARE SUB soup_cookie_jar_set_cookie_with_first_party(BYVAL AS SoupCookieJar PTR, BYVAL AS SoupURI PTR, BYVAL AS SoupURI PTR, BYVAL AS const char PTR)
TYPE _SoupCookieJarClass
  AS GObjectClass parent_class
  save AS SUB CDECL(BYVAL AS SoupCookieJar PTR)
  is_persistent AS FUNCTION CDECL(BYVAL AS SoupCookieJar PTR) AS gboolean
  changed AS SUB CDECL(BYVAL AS SoupCookieJar PTR, BYVAL AS SoupCookie PTR, BYVAL AS SoupCookie PTR)
  _libsoup_reserved1 AS SUB CDECL()
  _libsoup_reserved2 AS SUB CDECL()
END TYPE
DECLARE FUNCTION soup_cookie_jar_accept_policy_get_type() AS GType
#DEFINE SOUP_TYPE_COOKIE_JAR_ACCEPT_POLICY (soup_cookie_jar_accept_policy_get_type())
TYPE _SoupCookieJarDB
  AS SoupCookieJar parent
END TYPE
DECLARE FUNCTION soup_cookie_jar_db_get_type() AS GType
#DEFINE SOUP_TYPE_COOKIE_JAR_DB (soup_cookie_jar_db_get_type())
#DEFINE SOUP_COOKIE_JAR_DB(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), SOUP_TYPE_COOKIE_JAR_DB, SoupCookieJarDB))
#DEFINE SOUP_COOKIE_JAR_DB_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), SOUP_TYPE_COOKIE_JAR_DB, SoupCookieJarDBClass))
#DEFINE SOUP_IS_COOKIE_JAR_DB(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), SOUP_TYPE_COOKIE_JAR_DB))
#DEFINE SOUP_IS_CLASS_COOKIE_JAR_DB(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), SOUP_TYPE_COOKIE_JAR_DB))
#DEFINE SOUP_COOKIE_JAR_DB_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), SOUP_TYPE_COOKIE_JAR_DB, SoupCookieJarDBClass))
DECLARE FUNCTION soup_cookie_jar_db_new(BYVAL AS const char PTR, BYVAL AS gboolean) AS SoupCookieJar PTR
TYPE _SoupCookieJarDBClass
  AS SoupCookieJarClass parent_class
  _libsoup_reserved1 AS SUB CDECL()
  _libsoup_reserved2 AS SUB CDECL()
  _libsoup_reserved3 AS SUB CDECL()
  _libsoup_reserved4 AS SUB CDECL()
END TYPE
TYPE _SoupCookieJarText
  AS SoupCookieJar parent
END TYPE
DECLARE FUNCTION soup_cookie_jar_text_get_type() AS GType
#DEFINE SOUP_TYPE_COOKIE_JAR_TEXT (soup_cookie_jar_text_get_type())
#DEFINE SOUP_COOKIE_JAR_TEXT(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), SOUP_TYPE_COOKIE_JAR_TEXT, SoupCookieJarText))
#DEFINE SOUP_COOKIE_JAR_TEXT_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), SOUP_TYPE_COOKIE_JAR_TEXT, SoupCookieJarTextClass))
#DEFINE SOUP_IS_COOKIE_JAR_TEXT(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), SOUP_TYPE_COOKIE_JAR_TEXT))
#DEFINE SOUP_IS_CLASS_COOKIE_JAR_TEXT(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), SOUP_TYPE_COOKIE_JAR_TEXT))
#DEFINE SOUP_COOKIE_JAR_TEXT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), SOUP_TYPE_COOKIE_JAR_TEXT, SoupCookieJarTextClass))
DECLARE FUNCTION soup_cookie_jar_text_new(BYVAL AS const char PTR, BYVAL AS gboolean) AS SoupCookieJar PTR
TYPE _SoupCookieJarTextClass
  AS SoupCookieJarClass parent_class
  _libsoup_reserved1 AS SUB CDECL()
  _libsoup_reserved2 AS SUB CDECL()
  _libsoup_reserved3 AS SUB CDECL()
  _libsoup_reserved4 AS SUB CDECL()
END TYPE
TYPE _SoupDate
  AS gint year
  AS gint month
  AS gint day
  AS gint hour
  AS gint minute
  AS gint second
  AS gboolean utc
  AS gint offset
END TYPE
DECLARE FUNCTION soup_date_new(BYVAL AS gint, BYVAL AS gint, BYVAL AS gint, BYVAL AS gint, BYVAL AS gint, BYVAL AS gint) AS SoupDate PTR
DECLARE FUNCTION soup_date_new_from_now(BYVAL AS gint) AS SoupDate PTR
DECLARE FUNCTION soup_date_new_from_string(BYVAL AS const char PTR) AS SoupDate PTR
DECLARE FUNCTION soup_date_new_from_time_t(BYVAL AS time_t) AS SoupDate PTR
DECLARE FUNCTION soup_date_copy(BYVAL AS SoupDate PTR) AS SoupDate PTR
DECLARE SUB soup_date_free(BYVAL AS SoupDate PTR)
DECLARE FUNCTION soup_date_get_day(BYVAL AS SoupDate PTR) AS gint
DECLARE FUNCTION soup_date_get_hour(BYVAL AS SoupDate PTR) AS gint
DECLARE FUNCTION soup_date_get_minute(BYVAL AS SoupDate PTR) AS gint
DECLARE FUNCTION soup_date_get_month(BYVAL AS SoupDate PTR) AS gint
DECLARE FUNCTION soup_date_get_offset(BYVAL AS SoupDate PTR) AS gint
DECLARE FUNCTION soup_date_get_second(BYVAL AS SoupDate PTR) AS gint
DECLARE FUNCTION soup_date_get_utc(BYVAL AS SoupDate PTR) AS gint
DECLARE FUNCTION soup_date_get_year(BYVAL AS SoupDate PTR) AS gint
DECLARE FUNCTION soup_date_is_past(BYVAL AS SoupDate PTR) AS gboolean
DECLARE FUNCTION soup_date_to_string(BYVAL AS SoupDate PTR, BYVAL AS SoupDateFormat) AS char PTR
DECLARE FUNCTION soup_date_to_time_t(BYVAL AS SoupDate PTR) AS time_t
DECLARE SUB soup_date_to_timeval(BYVAL AS SoupDate PTR, BYVAL AS GTimeVal PTR)
TYPE _SoupHSTSEnforcer
  AS GObject parent
  AS SoupHSTSEnforcerPrivate PTR priv
END TYPE
DECLARE FUNCTION soup_date_format_get_type() AS GType
#DEFINE SOUP_TYPE_DATE_FORMAT (soup_date_format_get_type())
DECLARE FUNCTION soup_encoding_get_type() AS GType
#DEFINE SOUP_TYPE_ENCODING (soup_encoding_get_type())
DECLARE FUNCTION soup_hsts_enforcer_get_type() AS GType
#DEFINE SOUP_TYPE_HSTS_ENFORCER (soup_hsts_enforcer_get_type())
#DEFINE SOUP_HSTS_ENFORCER(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), SOUP_TYPE_HSTS_ENFORCER, SoupHSTSEnforcer))
#DEFINE SOUP_HSTS_ENFORCER_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), SOUP_TYPE_HSTS_ENFORCER, SoupHSTSEnforcerClass))
#DEFINE SOUP_IS_HSTS_ENFORCER(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), SOUP_TYPE_HSTS_ENFORCER))
#DEFINE SOUP_IS_CLASS_HSTS_ENFORCER(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), SOUP_TYPE_HSTS_ENFORCER))
#DEFINE SOUP_HSTS_ENFORCER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), SOUP_TYPE_HSTS_ENFORCER, SoupHSTSEnforcerClass))
DECLARE FUNCTION soup_hsts_enforcer_new() AS SoupHSTSEnforcer PTR
DECLARE FUNCTION soup_hsts_enforcer_get_domains(BYVAL AS SoupHSTSEnforcer PTR, BYVAL AS gboolean) AS GList PTR
DECLARE FUNCTION soup_hsts_enforcer_get_policies(BYVAL AS SoupHSTSEnforcer PTR, BYVAL AS gboolean) AS GList PTR
DECLARE FUNCTION soup_hsts_enforcer_has_valid_policy(BYVAL AS SoupHSTSEnforcer PTR, BYVAL AS const char PTR) AS gboolean
DECLARE FUNCTION soup_hsts_enforcer_is_persistent(BYVAL AS SoupHSTSEnforcer PTR) AS gboolean
DECLARE SUB soup_hsts_enforcer_set_policy(BYVAL AS SoupHSTSEnforcer PTR, BYVAL AS SoupHSTSPolicy PTR)
DECLARE SUB soup_hsts_enforcer_set_session_policy(BYVAL AS SoupHSTSEnforcer PTR, BYVAL AS const char PTR, BYVAL AS gboolean)
TYPE _SoupHSTSEnforcerClass
  AS GObjectClass parent_class
  is_persistent AS FUNCTION CDECL(BYVAL AS SoupHSTSEnforcer PTR) AS gboolean
  has_valid_policy AS FUNCTION CDECL(BYVAL AS SoupHSTSEnforcer PTR, BYVAL AS const char PTR) AS gboolean
  changed AS SUB CDECL(BYVAL AS SoupHSTSEnforcer PTR, BYVAL AS SoupHSTSPolicy PTR, BYVAL AS SoupHSTSPolicy PTR)
  hsts_enforced AS SUB CDECL(BYVAL AS SoupHSTSEnforcer PTR, BYVAL AS SoupMessage PTR)
  _libsoup_reserved1 AS SUB CDECL()
  _libsoup_reserved2 AS SUB CDECL()
  _libsoup_reserved3 AS SUB CDECL()
  _libsoup_reserved4 AS SUB CDECL()
END TYPE
TYPE _SoupHSTSEnforcerDB
  AS SoupHSTSEnforcer parent
  AS SoupHSTSEnforcerDBPrivate PTR priv
END TYPE
DECLARE FUNCTION soup_hsts_enforcer_db_get_type() AS GType
#DEFINE SOUP_TYPE_HSTS_ENFORCER_DB (soup_hsts_enforcer_db_get_type())
#DEFINE SOUP_HSTS_ENFORCER_DB(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), SOUP_TYPE_HSTS_ENFORCER_DB, SoupHSTSEnforcerDB))
#DEFINE SOUP_HSTS_ENFORCER_DB_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), SOUP_TYPE_HSTS_ENFORCER_DB, SoupHSTSEnforcerDBClass))
#DEFINE SOUP_IS_HSTS_ENFORCER_DB(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), SOUP_TYPE_HSTS_ENFORCER_DB))
#DEFINE SOUP_IS_CLASS_HSTS_ENFORCER_DB(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), SOUP_TYPE_HSTS_ENFORCER_DB))
#DEFINE SOUP_HSTS_ENFORCER_DB_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), SOUP_TYPE_HSTS_ENFORCER_DB, SoupHSTSEnforcerDBClass))
DECLARE FUNCTION soup_hsts_enforcer_db_new(BYVAL AS const char PTR) AS SoupHSTSEnforcer PTR
TYPE _SoupHSTSEnforcerDBClass
  AS SoupHSTSEnforcerClass parent_class
  _libsoup_reserved1 AS SUB CDECL()
  _libsoup_reserved2 AS SUB CDECL()
  _libsoup_reserved3 AS SUB CDECL()
  _libsoup_reserved4 AS SUB CDECL()
END TYPE
TYPE _SoupHSTSPolicy
  AS char PTR domain
  AS unsigned long max_age
  AS SoupDate PTR expires
  AS gboolean include_subdomains
END TYPE
DECLARE FUNCTION soup_hsts_policy_new(BYVAL AS const char PTR, BYVAL AS unsigned long, BYVAL AS gboolean) AS SoupHSTSPolicy PTR
DECLARE FUNCTION soup_hsts_policy_new_from_response(BYVAL AS SoupMessage PTR) AS SoupHSTSPolicy PTR
DECLARE FUNCTION soup_hsts_policy_new_full(BYVAL AS const char PTR, BYVAL AS unsigned long, BYVAL AS SoupDate PTR, BYVAL AS gboolean) AS SoupHSTSPolicy PTR
DECLARE FUNCTION soup_hsts_policy_new_session_policy(BYVAL AS const char PTR, BYVAL AS gboolean) AS SoupHSTSPolicy PTR
DECLARE FUNCTION soup_hsts_policy_copy(BYVAL AS SoupHSTSPolicy PTR) AS SoupHSTSPolicy PTR
DECLARE FUNCTION soup_hsts_policy_equal(BYVAL AS SoupHSTSPolicy PTR, BYVAL AS SoupHSTSPolicy PTR) AS gboolean
DECLARE SUB soup_hsts_policy_free(BYVAL AS SoupHSTSPolicy PTR)
DECLARE FUNCTION soup_hsts_policy_get_domain(BYVAL AS SoupHSTSPolicy PTR) AS const char PTR
DECLARE FUNCTION soup_hsts_policy_includes_subdomains(BYVAL AS SoupHSTSPolicy PTR) AS gboolean
DECLARE FUNCTION soup_hsts_policy_is_expired(BYVAL AS SoupHSTSPolicy PTR) AS gboolean
DECLARE FUNCTION soup_hsts_policy_is_session_policy(BYVAL AS SoupHSTSPolicy PTR) AS gboolean
TYPE _SoupLogger
  AS GObject parent
END TYPE
DECLARE FUNCTION soup_http_version_get_type() AS GType
#DEFINE SOUP_TYPE_HTTP_VERSION (soup_http_version_get_type())
DECLARE FUNCTION soup_known_status_code_get_type() AS GType
#DEFINE SOUP_TYPE_KNOWN_STATUS_CODE (soup_known_status_code_get_type())
DECLARE FUNCTION soup_logger_get_type() AS GType
#DEFINE SOUP_TYPE_LOGGER (soup_logger_get_type())
#DEFINE SOUP_LOGGER(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), SOUP_TYPE_LOGGER, SoupLogger))
#DEFINE SOUP_LOGGER_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), SOUP_TYPE_LOGGER, SoupLoggerClass))
#DEFINE SOUP_IS_LOGGER(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), SOUP_TYPE_LOGGER))
#DEFINE SOUP_IS_CLASS_LOGGER(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), SOUP_TYPE_LOGGER))
#DEFINE SOUP_LOGGER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), SOUP_TYPE_LOGGER, SoupLoggerClass))
DECLARE FUNCTION soup_logger_new(BYVAL AS SoupLoggerLogLevel, BYVAL AS gint) AS SoupLogger PTR
DECLARE SUB soup_logger_attach(BYVAL AS SoupLogger PTR, BYVAL AS SoupSession PTR)
DECLARE SUB soup_logger_detach(BYVAL AS SoupLogger PTR, BYVAL AS SoupSession PTR)
DECLARE SUB soup_logger_set_printer(BYVAL AS SoupLogger PTR, BYVAL AS SoupLoggerPrinter, BYVAL AS gpointer, BYVAL AS GDestroyNotify)
DECLARE SUB soup_logger_set_request_filter(BYVAL AS SoupLogger PTR, BYVAL AS SoupLoggerFilter, BYVAL AS gpointer, BYVAL AS GDestroyNotify)
DECLARE SUB soup_logger_set_response_filter(BYVAL AS SoupLogger PTR, BYVAL AS SoupLoggerFilter, BYVAL AS gpointer, BYVAL AS GDestroyNotify)
TYPE _SoupLoggerClass
  AS GObjectClass parent_class
  _libsoup_reserved1 AS SUB CDECL()
  _libsoup_reserved2 AS SUB CDECL()
  _libsoup_reserved3 AS SUB CDECL()
  _libsoup_reserved4 AS SUB CDECL()
END TYPE
TYPE _SoupMessage
  AS GObject parent
  AS const char PTR method
  AS guint status_code
  AS char PTR reason_phrase
  AS SoupMessageBody PTR request_body
  AS SoupMessageHeaders PTR request_headers
  AS SoupMessageBody PTR response_body
  AS SoupMessageHeaders PTR response_headers
END TYPE
DECLARE FUNCTION soup_logger_log_level_get_type() AS GType
#DEFINE SOUP_TYPE_LOGGER_LOG_LEVEL (soup_logger_log_level_get_type())
DECLARE FUNCTION soup_memory_use_get_type() AS GType
#DEFINE SOUP_TYPE_MEMORY_USE (soup_memory_use_get_type())
DECLARE FUNCTION soup_message_get_type() AS GType
#DEFINE SOUP_TYPE_MESSAGE (soup_message_get_type())
#DEFINE SOUP_MESSAGE(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), SOUP_TYPE_MESSAGE, SoupMessage))
#DEFINE SOUP_MESSAGE_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), SOUP_TYPE_MESSAGE, SoupMessageClass))
#DEFINE SOUP_IS_MESSAGE(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), SOUP_TYPE_MESSAGE))
#DEFINE SOUP_IS_CLASS_MESSAGE(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), SOUP_TYPE_MESSAGE))
#DEFINE SOUP_MESSAGE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), SOUP_TYPE_MESSAGE, SoupMessageClass))
DECLARE FUNCTION soup_message_new(BYVAL AS const char PTR, BYVAL AS const char PTR) AS SoupMessage PTR
DECLARE FUNCTION soup_message_new_from_uri(BYVAL AS const char PTR, BYVAL AS SoupURI PTR) AS SoupMessage PTR
DECLARE FUNCTION soup_message_add_header_handler(BYVAL AS SoupMessage PTR, BYVAL AS const char PTR, BYVAL AS const char PTR, BYVAL AS GCallback, BYVAL AS gpointer) AS guint
DECLARE FUNCTION soup_message_add_status_code_handler(BYVAL AS SoupMessage PTR, BYVAL AS const char PTR, BYVAL AS guint, BYVAL AS GCallback, BYVAL AS gpointer) AS guint
DECLARE SUB soup_message_content_sniffed(BYVAL AS SoupMessage PTR, BYVAL AS const char PTR, BYVAL AS GHashTable PTR)
DECLARE SUB soup_message_disable_feature(BYVAL AS SoupMessage PTR, BYVAL AS GType)
DECLARE SUB soup_message_finished(BYVAL AS SoupMessage PTR)
DECLARE FUNCTION soup_message_get_address(BYVAL AS SoupMessage PTR) AS SoupAddress PTR
DECLARE FUNCTION soup_message_get_first_party(BYVAL AS SoupMessage PTR) AS SoupURI PTR
DECLARE FUNCTION soup_message_get_flags(BYVAL AS SoupMessage PTR) AS SoupMessageFlags
DECLARE FUNCTION soup_message_get_http_version(BYVAL AS SoupMessage PTR) AS SoupHTTPVersion
DECLARE FUNCTION soup_message_get_https_status(BYVAL AS SoupMessage PTR, BYVAL AS GTlsCertificate PTR PTR, BYVAL AS GTlsCertificateFlags PTR) AS gboolean
DECLARE FUNCTION soup_message_get_is_top_level_navigation(BYVAL AS SoupMessage PTR) AS gboolean
DECLARE FUNCTION soup_message_get_priority(BYVAL AS SoupMessage PTR) AS SoupMessagePriority
DECLARE FUNCTION soup_message_get_site_for_cookies(BYVAL AS SoupMessage PTR) AS SoupURI PTR
DECLARE FUNCTION soup_message_get_soup_request(BYVAL AS SoupMessage PTR) AS SoupRequest PTR
DECLARE FUNCTION soup_message_get_uri(BYVAL AS SoupMessage PTR) AS SoupURI PTR
DECLARE SUB soup_message_got_body(BYVAL AS SoupMessage PTR)
DECLARE SUB soup_message_got_chunk(BYVAL AS SoupMessage PTR, BYVAL AS SoupBuffer PTR)
DECLARE SUB soup_message_got_headers(BYVAL AS SoupMessage PTR)
DECLARE SUB soup_message_got_informational(BYVAL AS SoupMessage PTR)
DECLARE FUNCTION soup_message_is_keepalive(BYVAL AS SoupMessage PTR) AS gboolean
DECLARE SUB soup_message_restarted(BYVAL AS SoupMessage PTR)
DECLARE SUB soup_message_set_chunk_allocator(BYVAL AS SoupMessage PTR, BYVAL AS SoupChunkAllocator, BYVAL AS gpointer, BYVAL AS GDestroyNotify)
DECLARE SUB soup_message_set_first_party(BYVAL AS SoupMessage PTR, BYVAL AS SoupURI PTR)
DECLARE SUB soup_message_set_flags(BYVAL AS SoupMessage PTR, BYVAL AS SoupMessageFlags)
DECLARE SUB soup_message_set_http_version(BYVAL AS SoupMessage PTR, BYVAL AS SoupHTTPVersion)
DECLARE SUB soup_message_set_is_top_level_navigation(BYVAL AS SoupMessage PTR, BYVAL AS gboolean)
DECLARE SUB soup_message_set_priority(BYVAL AS SoupMessage PTR, BYVAL AS SoupMessagePriority)
DECLARE SUB soup_message_set_redirect(BYVAL AS SoupMessage PTR, BYVAL AS guint, BYVAL AS const char PTR)
DECLARE SUB soup_message_set_request(BYVAL AS SoupMessage PTR, BYVAL AS const char PTR, BYVAL AS SoupMemoryUse, BYVAL AS const char PTR, BYVAL AS gsize)
DECLARE SUB soup_message_set_response(BYVAL AS SoupMessage PTR, BYVAL AS const char PTR, BYVAL AS SoupMemoryUse, BYVAL AS const char PTR, BYVAL AS gsize)
DECLARE SUB soup_message_set_site_for_cookies(BYVAL AS SoupMessage PTR, BYVAL AS SoupURI PTR)
DECLARE SUB soup_message_set_status(BYVAL AS SoupMessage PTR, BYVAL AS guint)
DECLARE SUB soup_message_set_status_full(BYVAL AS SoupMessage PTR, BYVAL AS guint, BYVAL AS const char PTR)
DECLARE SUB soup_message_set_uri(BYVAL AS SoupMessage PTR, BYVAL AS SoupURI PTR)
DECLARE SUB soup_message_starting(BYVAL AS SoupMessage PTR)
DECLARE SUB soup_message_wrote_body(BYVAL AS SoupMessage PTR)
DECLARE SUB soup_message_wrote_body_data(BYVAL AS SoupMessage PTR, BYVAL AS SoupBuffer PTR)
DECLARE SUB soup_message_wrote_chunk(BYVAL AS SoupMessage PTR)
DECLARE SUB soup_message_wrote_headers(BYVAL AS SoupMessage PTR)
DECLARE SUB soup_message_wrote_informational(BYVAL AS SoupMessage PTR)
TYPE _SoupMessageBody
  AS const char PTR data
  AS goffset length
END TYPE
DECLARE FUNCTION soup_message_body_new() AS SoupMessageBody PTR
DECLARE SUB soup_message_body_append(BYVAL AS SoupMessageBody PTR, BYVAL AS SoupMemoryUse, BYVAL AS gconstpointer, BYVAL AS gsize)
DECLARE SUB soup_message_body_append_buffer(BYVAL AS SoupMessageBody PTR, BYVAL AS SoupBuffer PTR)
DECLARE SUB soup_message_body_append_take(BYVAL AS SoupMessageBody PTR, BYVAL AS guchar PTR, BYVAL AS gsize)
DECLARE SUB soup_message_body_complete(BYVAL AS SoupMessageBody PTR)
DECLARE FUNCTION soup_message_body_flatten(BYVAL AS SoupMessageBody PTR) AS SoupBuffer PTR
DECLARE SUB soup_message_body_free(BYVAL AS SoupMessageBody PTR)
DECLARE FUNCTION soup_message_body_get_accumulate(BYVAL AS SoupMessageBody PTR) AS gboolean
DECLARE FUNCTION soup_message_body_get_chunk(BYVAL AS SoupMessageBody PTR, BYVAL AS goffset) AS SoupBuffer PTR
DECLARE SUB soup_message_body_got_chunk(BYVAL AS SoupMessageBody PTR, BYVAL AS SoupBuffer PTR)
DECLARE SUB soup_message_body_set_accumulate(BYVAL AS SoupMessageBody PTR, BYVAL AS gboolean)
DECLARE SUB soup_message_body_truncate(BYVAL AS SoupMessageBody PTR)
DECLARE SUB soup_message_body_wrote_chunk(BYVAL AS SoupMessageBody PTR, BYVAL AS SoupBuffer PTR)
TYPE _SoupMessageClass
  AS GObjectClass parent_class
  wrote_informational AS SUB CDECL(BYVAL AS SoupMessage PTR)
  wrote_headers AS SUB CDECL(BYVAL AS SoupMessage PTR)
  wrote_chunk AS SUB CDECL(BYVAL AS SoupMessage PTR)
  wrote_body AS SUB CDECL(BYVAL AS SoupMessage PTR)
  got_informational AS SUB CDECL(BYVAL AS SoupMessage PTR)
  got_headers AS SUB CDECL(BYVAL AS SoupMessage PTR)
  got_chunk AS SUB CDECL(BYVAL AS SoupMessage PTR, BYVAL AS SoupBuffer PTR)
  got_body AS SUB CDECL(BYVAL AS SoupMessage PTR)
  restarted AS SUB CDECL(BYVAL AS SoupMessage PTR)
  finished AS SUB CDECL(BYVAL AS SoupMessage PTR)
  starting AS SUB CDECL(BYVAL AS SoupMessage PTR)
  _libsoup_reserved1 AS SUB CDECL()
  _libsoup_reserved2 AS SUB CDECL()
  _libsoup_reserved3 AS SUB CDECL()
END TYPE
DECLARE FUNCTION soup_message_headers_new(BYVAL AS SoupMessageHeadersType) AS SoupMessageHeaders PTR
DECLARE SUB soup_message_headers_append(BYVAL AS SoupMessageHeaders PTR, BYVAL AS const char PTR, BYVAL AS const char PTR)
DECLARE SUB soup_message_headers_clean_connection_headers(BYVAL AS SoupMessageHeaders PTR)
DECLARE SUB soup_message_headers_clear(BYVAL AS SoupMessageHeaders PTR)
DECLARE SUB soup_message_headers_foreach(BYVAL AS SoupMessageHeaders PTR, BYVAL AS SoupMessageHeadersForeachFunc, BYVAL AS gpointer)
DECLARE SUB soup_message_headers_free(BYVAL AS SoupMessageHeaders PTR)
DECLARE SUB soup_message_headers_free_ranges(BYVAL AS SoupMessageHeaders PTR, BYVAL AS SoupRange PTR)
DECLARE FUNCTION soup_message_headers_get(BYVAL AS SoupMessageHeaders PTR, BYVAL AS const char PTR) AS const char PTR
DECLARE FUNCTION soup_message_headers_get_content_disposition(BYVAL AS SoupMessageHeaders PTR, BYVAL AS char PTR PTR, BYVAL AS GHashTable PTR PTR) AS gboolean
DECLARE FUNCTION soup_message_headers_get_content_length(BYVAL AS SoupMessageHeaders PTR) AS goffset
DECLARE FUNCTION soup_message_headers_get_content_range(BYVAL AS SoupMessageHeaders PTR, BYVAL AS goffset PTR, BYVAL AS goffset PTR, BYVAL AS goffset PTR) AS gboolean
DECLARE FUNCTION soup_message_headers_get_content_type(BYVAL AS SoupMessageHeaders PTR, BYVAL AS GHashTable PTR PTR) AS const char PTR
DECLARE FUNCTION soup_message_headers_get_encoding(BYVAL AS SoupMessageHeaders PTR) AS SoupEncoding
DECLARE FUNCTION soup_message_headers_get_expectations(BYVAL AS SoupMessageHeaders PTR) AS SoupExpectation
DECLARE FUNCTION soup_message_headers_get_headers_type(BYVAL AS SoupMessageHeaders PTR) AS SoupMessageHeadersType
DECLARE FUNCTION soup_message_headers_get_list(BYVAL AS SoupMessageHeaders PTR, BYVAL AS const char PTR) AS const char PTR
DECLARE FUNCTION soup_message_headers_get_one(BYVAL AS SoupMessageHeaders PTR, BYVAL AS const char PTR) AS const char PTR
DECLARE FUNCTION soup_message_headers_get_ranges(BYVAL AS SoupMessageHeaders PTR, BYVAL AS goffset, BYVAL AS SoupRange PTR PTR, BYVAL AS gint PTR) AS gboolean
DECLARE FUNCTION soup_message_headers_header_contains(BYVAL AS SoupMessageHeaders PTR, BYVAL AS const char PTR, BYVAL AS const char PTR) AS gboolean
DECLARE FUNCTION soup_message_headers_header_equals(BYVAL AS SoupMessageHeaders PTR, BYVAL AS const char PTR, BYVAL AS const char PTR) AS gboolean
DECLARE SUB soup_message_headers_remove(BYVAL AS SoupMessageHeaders PTR, BYVAL AS const char PTR)
DECLARE SUB soup_message_headers_replace(BYVAL AS SoupMessageHeaders PTR, BYVAL AS const char PTR, BYVAL AS const char PTR)
DECLARE SUB soup_message_headers_set_content_disposition(BYVAL AS SoupMessageHeaders PTR, BYVAL AS const char PTR, BYVAL AS GHashTable PTR)
DECLARE SUB soup_message_headers_set_content_length(BYVAL AS SoupMessageHeaders PTR, BYVAL AS goffset)
DECLARE SUB soup_message_headers_set_content_range(BYVAL AS SoupMessageHeaders PTR, BYVAL AS goffset, BYVAL AS goffset, BYVAL AS goffset)
DECLARE SUB soup_message_headers_set_content_type(BYVAL AS SoupMessageHeaders PTR, BYVAL AS const char PTR, BYVAL AS GHashTable PTR)
DECLARE SUB soup_message_headers_set_encoding(BYVAL AS SoupMessageHeaders PTR, BYVAL AS SoupEncoding)
DECLARE SUB soup_message_headers_set_expectations(BYVAL AS SoupMessageHeaders PTR, BYVAL AS SoupExpectation)
DECLARE SUB soup_message_headers_set_range(BYVAL AS SoupMessageHeaders PTR, BYVAL AS goffset, BYVAL AS goffset)
DECLARE SUB soup_message_headers_set_ranges(BYVAL AS SoupMessageHeaders PTR, BYVAL AS SoupRange PTR, BYVAL AS gint)
TYPE _SoupMessageHeadersIter
  AS gpointer dummy(2)
END TYPE
DECLARE FUNCTION soup_message_headers_iter_next(BYVAL AS SoupMessageHeadersIter PTR, BYVAL AS const char PTR PTR, BYVAL AS const char PTR PTR) AS gboolean
DECLARE SUB soup_message_headers_iter_init(BYVAL AS SoupMessageHeadersIter PTR, BYVAL AS SoupMessageHeaders PTR)
DECLARE FUNCTION soup_message_headers_type_get_type() AS GType
#DEFINE SOUP_TYPE_MESSAGE_HEADERS_TYPE (soup_message_headers_type_get_type())
DECLARE FUNCTION soup_message_priority_get_type() AS GType
#DEFINE SOUP_TYPE_MESSAGE_PRIORITY (soup_message_priority_get_type())
DECLARE FUNCTION soup_multipart_new(BYVAL AS const char PTR) AS SoupMultipart PTR
DECLARE FUNCTION soup_multipart_new_from_message(BYVAL AS SoupMessageHeaders PTR, BYVAL AS SoupMessageBody PTR) AS SoupMultipart PTR
DECLARE SUB soup_multipart_append_form_file(BYVAL AS SoupMultipart PTR, BYVAL AS const char PTR, BYVAL AS const char PTR, BYVAL AS const char PTR, BYVAL AS SoupBuffer PTR)
DECLARE SUB soup_multipart_append_form_string(BYVAL AS SoupMultipart PTR, BYVAL AS const char PTR, BYVAL AS const char PTR)
DECLARE SUB soup_multipart_append_part(BYVAL AS SoupMultipart PTR, BYVAL AS SoupMessageHeaders PTR, BYVAL AS SoupBuffer PTR)
DECLARE SUB soup_multipart_free(BYVAL AS SoupMultipart PTR)
DECLARE FUNCTION soup_multipart_get_length(BYVAL AS SoupMultipart PTR) AS gint
DECLARE FUNCTION soup_multipart_get_part(BYVAL AS SoupMultipart PTR, BYVAL AS gint, BYVAL AS SoupMessageHeaders PTR PTR, BYVAL AS SoupBuffer PTR PTR) AS gboolean
DECLARE SUB soup_multipart_to_message(BYVAL AS SoupMultipart PTR, BYVAL AS SoupMessageHeaders PTR, BYVAL AS SoupMessageBody PTR)
TYPE _SoupMultipartInputStream
  AS GFilterInputStream parent_instance
  AS SoupMultipartInputStreamPrivate PTR priv
END TYPE
DECLARE FUNCTION soup_multipart_input_stream_get_type() AS GType
#DEFINE SOUP_TYPE_MULTIPART_INPUT_STREAM (soup_multipart_input_stream_get_type())
#DEFINE SOUP_MULTIPART_INPUT_STREAM(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), SOUP_TYPE_MULTIPART_INPUT_STREAM, SoupMultipartInputStream))
#DEFINE SOUP_MULTIPART_INPUT_STREAM_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), SOUP_TYPE_MULTIPART_INPUT_STREAM, SoupMultipartInputStreamClass))
#DEFINE SOUP_IS_MULTIPART_INPUT_STREAM(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), SOUP_TYPE_MULTIPART_INPUT_STREAM))
#DEFINE SOUP_IS_CLASS_MULTIPART_INPUT_STREAM(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), SOUP_TYPE_MULTIPART_INPUT_STREAM))
#DEFINE SOUP_MULTIPART_INPUT_STREAM_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), SOUP_TYPE_MULTIPART_INPUT_STREAM, SoupMultipartInputStreamClass))
DECLARE FUNCTION soup_multipart_input_stream_new(BYVAL AS SoupMessage PTR, BYVAL AS GInputStream PTR) AS SoupMultipartInputStream PTR
DECLARE FUNCTION soup_multipart_input_stream_get_headers(BYVAL AS SoupMultipartInputStream PTR) AS SoupMessageHeaders PTR
DECLARE FUNCTION soup_multipart_input_stream_next_part(BYVAL AS SoupMultipartInputStream PTR, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS GInputStream PTR
DECLARE SUB soup_multipart_input_stream_next_part_async(BYVAL AS SoupMultipartInputStream PTR, BYVAL AS gint, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
DECLARE FUNCTION soup_multipart_input_stream_next_part_finish(BYVAL AS SoupMultipartInputStream PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS GInputStream PTR
TYPE _SoupMultipartInputStreamClass
  AS GFilterInputStreamClass parent_class
END TYPE
DECLARE FUNCTION soup_password_manager_get_type() AS GType
#DEFINE SOUP_TYPE_PASSWORD_MANAGER (soup_password_manager_get_type())
#DEFINE SOUP_PASSWORD_MANAGER(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), SOUP_TYPE_PASSWORD_MANAGER, SoupPasswordManager))
#DEFINE SOUP_PASSWORD_MANAGER_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), SOUP_TYPE_PASSWORD_MANAGER, SoupPasswordManagerInterface))
#DEFINE SOUP_IS_PASSWORD_MANAGER(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), SOUP_TYPE_PASSWORD_MANAGER))
#DEFINE SOUP_PASSWORD_MANAGER_GET_IFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE((obj), SOUP_TYPE_PASSWORD_MANAGER, SoupPasswordManagerInterface))
DECLARE SUB soup_password_manager_get_passwords_async(BYVAL AS SoupPasswordManager PTR, BYVAL AS SoupMessage PTR, BYVAL AS SoupAuth PTR, BYVAL AS gboolean, BYVAL AS GMainContext PTR, BYVAL AS GCancellable PTR, BYVAL AS SoupPasswordManagerCallback, BYVAL AS gpointer)
DECLARE SUB soup_password_manager_get_passwords_sync(BYVAL AS SoupPasswordManager PTR, BYVAL AS SoupMessage PTR, BYVAL AS SoupAuth PTR, BYVAL AS GCancellable PTR)
TYPE _SoupPasswordManagerInterface
  AS GTypeInterface base
  get_passwords_async AS SUB CDECL(BYVAL AS SoupPasswordManager PTR, BYVAL AS SoupMessage PTR, BYVAL AS SoupAuth PTR, BYVAL AS gboolean, BYVAL AS GMainContext PTR, BYVAL AS GCancellable PTR, BYVAL AS SoupPasswordManagerCallback, BYVAL AS gpointer)
  get_passwords_sync AS SUB CDECL(BYVAL AS SoupPasswordManager PTR, BYVAL AS SoupMessage PTR, BYVAL AS SoupAuth PTR, BYVAL AS GCancellable PTR)
END TYPE
DECLARE FUNCTION soup_proxy_resolver_get_type() AS GType
#DEFINE SOUP_TYPE_PROXY_RESOLVER (soup_proxy_resolver_get_type())
#DEFINE SOUP_PROXY_RESOLVER(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), SOUP_TYPE_PROXY_RESOLVER, SoupProxyResolver))
#DEFINE SOUP_PROXY_RESOLVER_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), SOUP_TYPE_PROXY_RESOLVER, SoupProxyResolverInterface))
#DEFINE SOUP_IS_PROXY_RESOLVER(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), SOUP_TYPE_PROXY_RESOLVER))
#DEFINE SOUP_PROXY_RESOLVER_GET_IFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE((obj), SOUP_TYPE_PROXY_RESOLVER, SoupProxyResolverInterface))
DECLARE SUB soup_proxy_resolver_get_proxy_async(BYVAL AS SoupProxyResolver PTR, BYVAL AS SoupMessage PTR, BYVAL AS GMainContext PTR, BYVAL AS GCancellable PTR, BYVAL AS SoupProxyResolverCallback, BYVAL AS gpointer)
DECLARE FUNCTION soup_proxy_resolver_get_proxy_sync(BYVAL AS SoupProxyResolver PTR, BYVAL AS SoupMessage PTR, BYVAL AS GCancellable PTR, BYVAL AS SoupAddress PTR PTR) AS guint
TYPE _SoupProxyResolverDefault
  AS GObject parent
END TYPE
DECLARE FUNCTION soup_proxy_resolver_default_get_type() AS GType
#DEFINE SOUP_TYPE_PROXY_RESOLVER_DEFAULT (soup_proxy_resolver_default_get_type())
#DEFINE SOUP_PROXY_RESOLVER_DEFAULT(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), SOUP_TYPE_PROXY_RESOLVER_DEFAULT, SoupProxyResolverDefault))
#DEFINE SOUP_PROXY_RESOLVER_DEFAULT_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), SOUP_TYPE_PROXY_RESOLVER_DEFAULT, SoupProxyResolverDefaultClass))
#DEFINE SOUP_IS_PROXY_RESOLVER_DEFAULT(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), SOUP_TYPE_PROXY_RESOLVER_DEFAULT))
#DEFINE SOUP_IS_CLASS_PROXY_RESOLVER_DEFAULT(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), SOUP_TYPE_PROXY_RESOLVER_DEFAULT))
#DEFINE SOUP_PROXY_RESOLVER_DEFAULT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), SOUP_TYPE_PROXY_RESOLVER_DEFAULT, SoupProxyResolverDefaultClass))
TYPE _SoupProxyResolverDefaultClass
  AS GObjectClass parent_class
END TYPE
TYPE _SoupProxyResolverInterface
  AS GTypeInterface base
  get_proxy_async AS SUB CDECL(BYVAL AS SoupProxyResolver PTR, BYVAL AS SoupMessage PTR, BYVAL AS GMainContext PTR, BYVAL AS GCancellable PTR, BYVAL AS SoupProxyResolverCallback, BYVAL AS gpointer)
  get_proxy_sync AS FUNCTION CDECL(BYVAL AS SoupProxyResolver PTR, BYVAL AS SoupMessage PTR, BYVAL AS GCancellable PTR, BYVAL AS SoupAddress PTR PTR) AS guint
END TYPE
DECLARE FUNCTION soup_proxy_uri_resolver_get_type() AS GType
#DEFINE SOUP_TYPE_PROXY_URI_RESOLVER (soup_proxy_uri_resolver_get_type())
#DEFINE SOUP_PROXY_URI_RESOLVER(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), SOUP_TYPE_PROXY_URI_RESOLVER, SoupProxyURIResolver))
#DEFINE SOUP_PROXY_URI_RESOLVER_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), SOUP_TYPE_PROXY_URI_RESOLVER, SoupProxyURIResolverInterface))
#DEFINE SOUP_IS_PROXY_URI_RESOLVER(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), SOUP_TYPE_PROXY_URI_RESOLVER))
#DEFINE SOUP_PROXY_URI_RESOLVER_GET_IFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE((obj), SOUP_TYPE_PROXY_URI_RESOLVER, SoupProxyURIResolverInterface))
DECLARE SUB soup_proxy_uri_resolver_get_proxy_uri_async(BYVAL AS SoupProxyURIResolver PTR, BYVAL AS SoupURI PTR, BYVAL AS GMainContext PTR, BYVAL AS GCancellable PTR, BYVAL AS SoupProxyURIResolverCallback, BYVAL AS gpointer)
DECLARE FUNCTION soup_proxy_uri_resolver_get_proxy_uri_sync(BYVAL AS SoupProxyURIResolver PTR, BYVAL AS SoupURI PTR, BYVAL AS GCancellable PTR, BYVAL AS SoupURI PTR PTR) AS guint
TYPE _SoupProxyURIResolverInterface
  AS GTypeInterface base
  get_proxy_uri_async AS SUB CDECL(BYVAL AS SoupProxyURIResolver PTR, BYVAL AS SoupURI PTR, BYVAL AS GMainContext PTR, BYVAL AS GCancellable PTR, BYVAL AS SoupProxyURIResolverCallback, BYVAL AS gpointer)
  get_proxy_uri_sync AS FUNCTION CDECL(BYVAL AS SoupProxyURIResolver PTR, BYVAL AS SoupURI PTR, BYVAL AS GCancellable PTR, BYVAL AS SoupURI PTR PTR) AS guint
  _libsoup_reserved1 AS SUB CDECL()
  _libsoup_reserved2 AS SUB CDECL()
  _libsoup_reserved3 AS SUB CDECL()
  _libsoup_reserved4 AS SUB CDECL()
END TYPE
TYPE _SoupRange
  AS goffset start
  AS goffset end
END TYPE
TYPE _SoupRequest
  AS GObject parent
  AS SoupRequestPrivate PTR priv
END TYPE
DECLARE FUNCTION soup_request_get_type() AS GType
#DEFINE SOUP_TYPE_REQUEST (soup_request_get_type())
#DEFINE SOUP_REQUEST(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), SOUP_TYPE_REQUEST, SoupRequest))
#DEFINE SOUP_REQUEST_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), SOUP_TYPE_REQUEST, SoupRequestClass))
#DEFINE SOUP_IS_REQUEST(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), SOUP_TYPE_REQUEST))
#DEFINE SOUP_IS_CLASS_REQUEST(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), SOUP_TYPE_REQUEST))
#DEFINE SOUP_REQUEST_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), SOUP_TYPE_REQUEST, SoupRequestClass))
DECLARE FUNCTION soup_request_get_content_length(BYVAL AS SoupRequest PTR) AS goffset
DECLARE FUNCTION soup_request_get_content_type(BYVAL AS SoupRequest PTR) AS const char PTR
DECLARE FUNCTION soup_request_get_session(BYVAL AS SoupRequest PTR) AS SoupSession PTR
DECLARE FUNCTION soup_request_get_uri(BYVAL AS SoupRequest PTR) AS SoupURI PTR
DECLARE FUNCTION soup_request_send(BYVAL AS SoupRequest PTR, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS GInputStream PTR
DECLARE SUB soup_request_send_async(BYVAL AS SoupRequest PTR, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
DECLARE FUNCTION soup_request_send_finish(BYVAL AS SoupRequest PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS GInputStream PTR
TYPE _SoupRequestClass
  AS GObjectClass parent
  AS const char PTR PTR schemes
  check_uri AS FUNCTION CDECL(BYVAL AS SoupRequest PTR, BYVAL AS SoupURI PTR, BYVAL AS GError PTR PTR) AS gboolean
  send AS FUNCTION CDECL(BYVAL AS SoupRequest PTR, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS GInputStream PTR
  send_async AS SUB CDECL(BYVAL AS SoupRequest PTR, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
  send_finish AS FUNCTION CDECL(BYVAL AS SoupRequest PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS GInputStream PTR
  get_content_length AS FUNCTION CDECL(BYVAL AS SoupRequest PTR) AS goffset
  get_content_type AS FUNCTION CDECL(BYVAL AS SoupRequest PTR) AS const char PTR
END TYPE
TYPE _SoupRequestData
  AS SoupRequest parent
  AS SoupRequestDataPrivate PTR priv
END TYPE
DECLARE FUNCTION soup_request_data_get_type() AS GType
#DEFINE SOUP_TYPE_REQUEST_DATA (soup_request_data_get_type())
#DEFINE SOUP_REQUEST_DATA(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), SOUP_TYPE_REQUEST_DATA, SoupRequestData))
#DEFINE SOUP_REQUEST_DATA_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), SOUP_TYPE_REQUEST_DATA, SoupRequestDataClass))
#DEFINE SOUP_IS_REQUEST_DATA(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), SOUP_TYPE_REQUEST_DATA))
#DEFINE SOUP_IS_CLASS_REQUEST_DATA(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), SOUP_TYPE_REQUEST_DATA))
#DEFINE SOUP_REQUEST_DATA_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), SOUP_TYPE_REQUEST_DATA, SoupRequestDataClass))
TYPE _SoupRequestDataClass
  AS SoupRequestClass parent
END TYPE
TYPE _SoupRequestFile
  AS SoupRequest parent
  AS SoupRequestFilePrivate PTR priv
END TYPE
DECLARE FUNCTION soup_request_error_get_type() AS GType
#DEFINE SOUP_TYPE_REQUEST_ERROR (soup_request_error_get_type())
DECLARE FUNCTION soup_request_file_get_type() AS GType
#DEFINE SOUP_TYPE_REQUEST_FILE (soup_request_file_get_type())
#DEFINE SOUP_REQUEST_FILE(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), SOUP_TYPE_REQUEST_FILE, SoupRequestFile))
#DEFINE SOUP_REQUEST_FILE_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), SOUP_TYPE_REQUEST_FILE, SoupRequestFileClass))
#DEFINE SOUP_IS_REQUEST_FILE(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), SOUP_TYPE_REQUEST_FILE))
#DEFINE SOUP_IS_CLASS_REQUEST_FILE(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), SOUP_TYPE_REQUEST_FILE))
#DEFINE SOUP_REQUEST_FILE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), SOUP_TYPE_REQUEST_FILE, SoupRequestFileClass))
DECLARE FUNCTION soup_request_file_get_file(BYVAL AS SoupRequestFile PTR) AS GFile PTR
TYPE _SoupRequestFileClass
  AS SoupRequestClass parent
END TYPE
TYPE _SoupRequestHTTP
  AS SoupRequest parent
  AS SoupRequestHTTPPrivate PTR priv
END TYPE
DECLARE FUNCTION soup_request_http_get_type() AS GType
#DEFINE SOUP_TYPE_REQUEST_HTTP (soup_request_http_get_type())
#DEFINE SOUP_REQUEST_HTTP(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), SOUP_TYPE_REQUEST_HTTP, SoupRequestHTTP))
#DEFINE SOUP_REQUEST_HTTP_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), SOUP_TYPE_REQUEST_HTTP, SoupRequestHTTPClass))
#DEFINE SOUP_IS_REQUEST_HTTP(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), SOUP_TYPE_REQUEST_HTTP))
#DEFINE SOUP_IS_CLASS_REQUEST_HTTP(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), SOUP_TYPE_REQUEST_HTTP))
#DEFINE SOUP_REQUEST_HTTP_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), SOUP_TYPE_REQUEST_HTTP, SoupRequestHTTPClass))
DECLARE FUNCTION soup_request_http_get_message(BYVAL AS SoupRequestHTTP PTR) AS SoupMessage PTR
TYPE _SoupRequestHTTPClass
  AS SoupRequestClass parent
END TYPE
TYPE _SoupRequester
  AS GObject parent
  AS SoupRequesterPrivate PTR priv
END TYPE
DECLARE FUNCTION soup_requester_get_type() AS GType
#DEFINE SOUP_TYPE_REQUESTER (soup_requester_get_type())
#DEFINE SOUP_REQUESTER(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), SOUP_TYPE_REQUESTER, SoupRequester))
#DEFINE SOUP_REQUESTER_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), SOUP_TYPE_REQUESTER, SoupRequesterClass))
#DEFINE SOUP_IS_REQUESTER(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), SOUP_TYPE_REQUESTER))
#DEFINE SOUP_IS_CLASS_REQUESTER(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), SOUP_TYPE_REQUESTER))
#DEFINE SOUP_REQUESTER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), SOUP_TYPE_REQUESTER, SoupRequesterClass))
DECLARE FUNCTION soup_requester_new() AS SoupRequester PTR
DECLARE FUNCTION soup_requester_request(BYVAL AS SoupRequester PTR, BYVAL AS const char PTR, BYVAL AS GError PTR PTR) AS SoupRequest PTR
DECLARE FUNCTION soup_requester_request_uri(BYVAL AS SoupRequester PTR, BYVAL AS SoupURI PTR, BYVAL AS GError PTR PTR) AS SoupRequest PTR
TYPE _SoupRequesterClass
  AS GObjectClass parent_class
END TYPE
DECLARE FUNCTION soup_requester_error_get_type() AS GType
#DEFINE SOUP_TYPE_REQUESTER_ERROR (soup_requester_error_get_type())
TYPE _SoupServer
  AS GObject parent
END TYPE
DECLARE FUNCTION soup_same_site_policy_get_type() AS GType
#DEFINE SOUP_TYPE_SAME_SITE_POLICY (soup_same_site_policy_get_type())
DECLARE FUNCTION soup_server_get_type() AS GType
#DEFINE SOUP_TYPE_SERVER (soup_server_get_type())
#DEFINE SOUP_SERVER(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), SOUP_TYPE_SERVER, SoupServer))
#DEFINE SOUP_SERVER_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), SOUP_TYPE_SERVER, SoupServerClass))
#DEFINE SOUP_IS_SERVER(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), SOUP_TYPE_SERVER))
#DEFINE SOUP_IS_CLASS_SERVER(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), SOUP_TYPE_SERVER))
#DEFINE SOUP_SERVER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), SOUP_TYPE_SERVER, SoupServerClass))
DECLARE FUNCTION soup_server_new(BYVAL AS const char PTR, ...) AS SoupServer PTR
DECLARE FUNCTION soup_server_accept_iostream(BYVAL AS SoupServer PTR, BYVAL AS GIOStream PTR, BYVAL AS GSocketAddress PTR, BYVAL AS GSocketAddress PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE SUB soup_server_add_auth_domain(BYVAL AS SoupServer PTR, BYVAL AS SoupAuthDomain PTR)
DECLARE SUB soup_server_add_early_handler(BYVAL AS SoupServer PTR, BYVAL AS const char PTR, BYVAL AS SoupServerCallback, BYVAL AS gpointer, BYVAL AS GDestroyNotify)
DECLARE SUB soup_server_add_handler(BYVAL AS SoupServer PTR, BYVAL AS const char PTR, BYVAL AS SoupServerCallback, BYVAL AS gpointer, BYVAL AS GDestroyNotify)
DECLARE SUB soup_server_add_websocket_extension(BYVAL AS SoupServer PTR, BYVAL AS GType)
DECLARE SUB soup_server_add_websocket_handler(BYVAL AS SoupServer PTR, BYVAL AS const char PTR, BYVAL AS const char PTR, BYVAL AS char PTR PTR, BYVAL AS SoupServerWebsocketCallback, BYVAL AS gpointer, BYVAL AS GDestroyNotify)
DECLARE SUB soup_server_disconnect(BYVAL AS SoupServer PTR)
DECLARE FUNCTION soup_server_get_async_context(BYVAL AS SoupServer PTR) AS GMainContext PTR
DECLARE FUNCTION soup_server_get_listener(BYVAL AS SoupServer PTR) AS SoupSocket PTR
DECLARE FUNCTION soup_server_get_listeners(BYVAL AS SoupServer PTR) AS GSList PTR
DECLARE FUNCTION soup_server_get_port(BYVAL AS SoupServer PTR) AS guint
DECLARE FUNCTION soup_server_get_uris(BYVAL AS SoupServer PTR) AS GSList PTR
DECLARE FUNCTION soup_server_is_https(BYVAL AS SoupServer PTR) AS gboolean
DECLARE FUNCTION soup_server_listen(BYVAL AS SoupServer PTR, BYVAL AS GSocketAddress PTR, BYVAL AS SoupServerListenOptions, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION soup_server_listen_all(BYVAL AS SoupServer PTR, BYVAL AS guint, BYVAL AS SoupServerListenOptions, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION soup_server_listen_fd(BYVAL AS SoupServer PTR, BYVAL AS gint, BYVAL AS SoupServerListenOptions, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION soup_server_listen_local(BYVAL AS SoupServer PTR, BYVAL AS guint, BYVAL AS SoupServerListenOptions, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION soup_server_listen_socket(BYVAL AS SoupServer PTR, BYVAL AS GSocket PTR, BYVAL AS SoupServerListenOptions, BYVAL AS GError PTR PTR) AS gboolean
DECLARE SUB soup_server_pause_message(BYVAL AS SoupServer PTR, BYVAL AS SoupMessage PTR)
DECLARE SUB soup_server_quit(BYVAL AS SoupServer PTR)
DECLARE SUB soup_server_remove_auth_domain(BYVAL AS SoupServer PTR, BYVAL AS SoupAuthDomain PTR)
DECLARE SUB soup_server_remove_handler(BYVAL AS SoupServer PTR, BYVAL AS const char PTR)
DECLARE SUB soup_server_remove_websocket_extension(BYVAL AS SoupServer PTR, BYVAL AS GType)
DECLARE SUB soup_server_run(BYVAL AS SoupServer PTR)
DECLARE SUB soup_server_run_async(BYVAL AS SoupServer PTR)
DECLARE FUNCTION soup_server_set_ssl_cert_file(BYVAL AS SoupServer PTR, BYVAL AS const char PTR, BYVAL AS const char PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE SUB soup_server_unpause_message(BYVAL AS SoupServer PTR, BYVAL AS SoupMessage PTR)
TYPE _SoupServerClass
  AS GObjectClass parent_class
  request_started AS SUB CDECL(BYVAL AS SoupServer PTR, BYVAL AS SoupMessage PTR, BYVAL AS SoupClientContext PTR)
  request_read AS SUB CDECL(BYVAL AS SoupServer PTR, BYVAL AS SoupMessage PTR, BYVAL AS SoupClientContext PTR)
  request_finished AS SUB CDECL(BYVAL AS SoupServer PTR, BYVAL AS SoupMessage PTR, BYVAL AS SoupClientContext PTR)
  request_aborted AS SUB CDECL(BYVAL AS SoupServer PTR, BYVAL AS SoupMessage PTR, BYVAL AS SoupClientContext PTR)
  _libsoup_reserved1 AS SUB CDECL()
  _libsoup_reserved2 AS SUB CDECL()
  _libsoup_reserved3 AS SUB CDECL()
  _libsoup_reserved4 AS SUB CDECL()
END TYPE
TYPE _SoupSession
  AS GObject parent
END TYPE
DECLARE FUNCTION soup_session_get_type() AS GType
#DEFINE SOUP_TYPE_SESSION (soup_session_get_type())
#DEFINE SOUP_SESSION(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), SOUP_TYPE_SESSION, SoupSession))
#DEFINE SOUP_SESSION_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), SOUP_TYPE_SESSION, SoupSessionClass))
#DEFINE SOUP_IS_SESSION(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), SOUP_TYPE_SESSION))
#DEFINE SOUP_IS_CLASS_SESSION(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), SOUP_TYPE_SESSION))
#DEFINE SOUP_SESSION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), SOUP_TYPE_SESSION, SoupSessionClass))
DECLARE FUNCTION soup_session_new() AS SoupSession PTR
DECLARE FUNCTION soup_session_new_with_options(BYVAL AS const char PTR, ...) AS SoupSession PTR
DECLARE SUB soup_session_abort(BYVAL AS SoupSession PTR)
DECLARE SUB soup_session_add_feature_ ALIAS "soup_session_add_feature"(BYVAL AS SoupSession PTR, BYVAL AS SoupSessionFeature PTR)
DECLARE SUB soup_session_add_feature_by_type_ ALIAS "soup_session_add_feature_by_type"(BYVAL AS SoupSession PTR, BYVAL AS GType)
DECLARE SUB soup_session_cancel_message(BYVAL AS SoupSession PTR, BYVAL AS SoupMessage PTR, BYVAL AS guint)
DECLARE SUB soup_session_connect_async(BYVAL AS SoupSession PTR, BYVAL AS SoupURI PTR, BYVAL AS GCancellable PTR, BYVAL AS SoupSessionConnectProgressCallback, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
DECLARE FUNCTION soup_session_connect_finish(BYVAL AS SoupSession PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS GIOStream PTR
DECLARE FUNCTION soup_session_get_async_context(BYVAL AS SoupSession PTR) AS GMainContext PTR
DECLARE FUNCTION soup_session_get_feature(BYVAL AS SoupSession PTR, BYVAL AS GType) AS SoupSessionFeature PTR
DECLARE FUNCTION soup_session_get_feature_for_message(BYVAL AS SoupSession PTR, BYVAL AS GType, BYVAL AS SoupMessage PTR) AS SoupSessionFeature PTR
DECLARE FUNCTION soup_session_get_features(BYVAL AS SoupSession PTR, BYVAL AS GType) AS GSList PTR
DECLARE FUNCTION soup_session_has_feature(BYVAL AS SoupSession PTR, BYVAL AS GType) AS gboolean
DECLARE SUB soup_session_pause_message(BYVAL AS SoupSession PTR, BYVAL AS SoupMessage PTR)
DECLARE SUB soup_session_prefetch_dns(BYVAL AS SoupSession PTR, BYVAL AS const char PTR, BYVAL AS GCancellable PTR, BYVAL AS SoupAddressCallback, BYVAL AS gpointer)
DECLARE SUB soup_session_prepare_for_uri(BYVAL AS SoupSession PTR, BYVAL AS SoupURI PTR)
DECLARE SUB soup_session_queue_message(BYVAL AS SoupSession PTR, BYVAL AS SoupMessage PTR, BYVAL AS SoupSessionCallback, BYVAL AS gpointer)
DECLARE FUNCTION soup_session_redirect_message(BYVAL AS SoupSession PTR, BYVAL AS SoupMessage PTR) AS gboolean
DECLARE SUB soup_session_remove_feature(BYVAL AS SoupSession PTR, BYVAL AS SoupSessionFeature PTR)
DECLARE SUB soup_session_remove_feature_by_type_ ALIAS "soup_session_remove_feature_by_type"(BYVAL AS SoupSession PTR, BYVAL AS GType)
DECLARE FUNCTION soup_session_request(BYVAL AS SoupSession PTR, BYVAL AS const char PTR, BYVAL AS GError PTR PTR) AS SoupRequest PTR
DECLARE FUNCTION soup_session_request_http(BYVAL AS SoupSession PTR, BYVAL AS const char PTR, BYVAL AS const char PTR, BYVAL AS GError PTR PTR) AS SoupRequestHTTP PTR
DECLARE FUNCTION soup_session_request_http_uri(BYVAL AS SoupSession PTR, BYVAL AS const char PTR, BYVAL AS SoupURI PTR, BYVAL AS GError PTR PTR) AS SoupRequestHTTP PTR
DECLARE FUNCTION soup_session_request_uri(BYVAL AS SoupSession PTR, BYVAL AS SoupURI PTR, BYVAL AS GError PTR PTR) AS SoupRequest PTR
DECLARE SUB soup_session_requeue_message(BYVAL AS SoupSession PTR, BYVAL AS SoupMessage PTR)
DECLARE FUNCTION soup_session_send(BYVAL AS SoupSession PTR, BYVAL AS SoupMessage PTR, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS GInputStream PTR
DECLARE SUB soup_session_send_async(BYVAL AS SoupSession PTR, BYVAL AS SoupMessage PTR, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
DECLARE FUNCTION soup_session_send_finish(BYVAL AS SoupSession PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS GInputStream PTR
DECLARE FUNCTION soup_session_send_message(BYVAL AS SoupSession PTR, BYVAL AS SoupMessage PTR) AS guint
DECLARE FUNCTION soup_session_steal_connection(BYVAL AS SoupSession PTR, BYVAL AS SoupMessage PTR) AS GIOStream PTR
DECLARE SUB soup_session_unpause_message(BYVAL AS SoupSession PTR, BYVAL AS SoupMessage PTR)
DECLARE SUB soup_session_websocket_connect_async(BYVAL AS SoupSession PTR, BYVAL AS SoupMessage PTR, BYVAL AS const char PTR, BYVAL AS char PTR PTR, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
DECLARE FUNCTION soup_session_websocket_connect_finish(BYVAL AS SoupSession PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS SoupWebsocketConnection PTR
DECLARE FUNCTION soup_session_would_redirect(BYVAL AS SoupSession PTR, BYVAL AS SoupMessage PTR) AS gboolean
TYPE _SoupSessionAsync
  AS SoupSession parent
END TYPE
DECLARE FUNCTION soup_session_async_get_type() AS GType
#DEFINE SOUP_TYPE_SESSION_ASYNC (soup_session_async_get_type())
#DEFINE SOUP_SESSION_ASYNC(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), SOUP_TYPE_SESSION_ASYNC, SoupSessionAsync))
#DEFINE SOUP_SESSION_ASYNC_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), SOUP_TYPE_SESSION_ASYNC, SoupSessionAsyncClass))
#DEFINE SOUP_IS_SESSION_ASYNC(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), SOUP_TYPE_SESSION_ASYNC))
#DEFINE SOUP_IS_CLASS_SESSION_ASYNC(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), SOUP_TYPE_SESSION_ASYNC))
#DEFINE SOUP_SESSION_ASYNC_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), SOUP_TYPE_SESSION_ASYNC, SoupSessionAsyncClass))
DECLARE FUNCTION soup_session_async_new() AS SoupSession PTR
DECLARE FUNCTION soup_session_async_new_with_options(BYVAL AS const char PTR, ...) AS SoupSession PTR
TYPE _SoupSessionAsyncClass
  AS SoupSessionClass parent_class
  _libsoup_reserved1 AS SUB CDECL()
  _libsoup_reserved2 AS SUB CDECL()
  _libsoup_reserved3 AS SUB CDECL()
  _libsoup_reserved4 AS SUB CDECL()
END TYPE
DECLARE FUNCTION soup_session_feature_get_type() AS GType
#DEFINE SOUP_TYPE_SESSION_FEATURE (soup_session_feature_get_type())
#DEFINE SOUP_SESSION_FEATURE(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), SOUP_TYPE_SESSION_FEATURE, SoupSessionFeature))
#DEFINE SOUP_SESSION_FEATURE_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), SOUP_TYPE_SESSION_FEATURE, SoupSessionFeatureInterface))
#DEFINE SOUP_IS_SESSION_FEATURE(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), SOUP_TYPE_SESSION_FEATURE))
#DEFINE SOUP_SESSION_FEATURE_GET_IFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE((obj), SOUP_TYPE_SESSION_FEATURE, SoupSessionFeatureInterface))
DECLARE FUNCTION soup_session_feature_add_feature(BYVAL AS SoupSessionFeature PTR, BYVAL AS GType) AS gboolean
DECLARE SUB soup_session_feature_attach(BYVAL AS SoupSessionFeature PTR, BYVAL AS SoupSession PTR)
DECLARE SUB soup_session_feature_detach(BYVAL AS SoupSessionFeature PTR, BYVAL AS SoupSession PTR)
DECLARE FUNCTION soup_session_feature_has_feature(BYVAL AS SoupSessionFeature PTR, BYVAL AS GType) AS gboolean
DECLARE FUNCTION soup_session_feature_remove_feature(BYVAL AS SoupSessionFeature PTR, BYVAL AS GType) AS gboolean
TYPE _SoupSessionFeatureInterface
  AS GTypeInterface parent
  attach AS SUB CDECL(BYVAL AS SoupSessionFeature PTR, BYVAL AS SoupSession PTR)
  detach AS SUB CDECL(BYVAL AS SoupSessionFeature PTR, BYVAL AS SoupSession PTR)
  request_queued AS SUB CDECL(BYVAL AS SoupSessionFeature PTR, BYVAL AS SoupSession PTR, BYVAL AS SoupMessage PTR)
  request_started AS SUB CDECL(BYVAL AS SoupSessionFeature PTR, BYVAL AS SoupSession PTR, BYVAL AS SoupMessage PTR, BYVAL AS SoupSocket PTR)
  request_unqueued AS SUB CDECL(BYVAL AS SoupSessionFeature PTR, BYVAL AS SoupSession PTR, BYVAL AS SoupMessage PTR)
  add_feature AS FUNCTION CDECL(BYVAL AS SoupSessionFeature PTR, BYVAL AS GType) AS gboolean
  remove_feature AS FUNCTION CDECL(BYVAL AS SoupSessionFeature PTR, BYVAL AS GType) AS gboolean
  has_feature AS FUNCTION CDECL(BYVAL AS SoupSessionFeature PTR, BYVAL AS GType) AS gboolean
END TYPE
TYPE _SoupSessionSync
  AS SoupSession parent
END TYPE
DECLARE FUNCTION soup_session_sync_get_type() AS GType
#DEFINE SOUP_TYPE_SESSION_SYNC (soup_session_sync_get_type())
#DEFINE SOUP_SESSION_SYNC(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), SOUP_TYPE_SESSION_SYNC, SoupSessionSync))
#DEFINE SOUP_SESSION_SYNC_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), SOUP_TYPE_SESSION_SYNC, SoupSessionSyncClass))
#DEFINE SOUP_IS_SESSION_SYNC(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), SOUP_TYPE_SESSION_SYNC))
#DEFINE SOUP_IS_CLASS_SESSION_SYNC(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), SOUP_TYPE_SESSION_SYNC))
#DEFINE SOUP_SESSION_SYNC_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), SOUP_TYPE_SESSION_SYNC, SoupSessionSyncClass))
DECLARE FUNCTION soup_session_sync_new() AS SoupSession PTR
DECLARE FUNCTION soup_session_sync_new_with_options(BYVAL AS const char PTR, ...) AS SoupSession PTR
TYPE _SoupSessionSyncClass
  AS SoupSessionClass parent_class
  _libsoup_reserved1 AS SUB CDECL()
  _libsoup_reserved2 AS SUB CDECL()
  _libsoup_reserved3 AS SUB CDECL()
  _libsoup_reserved4 AS SUB CDECL()
END TYPE
TYPE _SoupSocket
  AS GObject parent
END TYPE
DECLARE FUNCTION soup_socket_get_type() AS GType
#DEFINE SOUP_TYPE_SOCKET (soup_socket_get_type())
#DEFINE SOUP_SOCKET(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), SOUP_TYPE_SOCKET, SoupSocket))
#DEFINE SOUP_SOCKET_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), SOUP_TYPE_SOCKET, SoupSocketClass))
#DEFINE SOUP_IS_SOCKET(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), SOUP_TYPE_SOCKET))
#DEFINE SOUP_IS_CLASS_SOCKET(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), SOUP_TYPE_SOCKET))
#DEFINE SOUP_SOCKET_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), SOUP_TYPE_SOCKET, SoupSocketClass))
DECLARE FUNCTION soup_socket_new(BYVAL AS const char PTR, ...) AS SoupSocket PTR
DECLARE SUB soup_socket_connect_async(BYVAL AS SoupSocket PTR, BYVAL AS GCancellable PTR, BYVAL AS SoupSocketCallback, BYVAL AS gpointer)
DECLARE FUNCTION soup_socket_connect_sync(BYVAL AS SoupSocket PTR, BYVAL AS GCancellable PTR) AS guint
DECLARE SUB soup_socket_disconnect(BYVAL AS SoupSocket PTR)
DECLARE FUNCTION soup_socket_get_fd(BYVAL AS SoupSocket PTR) AS gint
DECLARE FUNCTION soup_socket_get_local_address(BYVAL AS SoupSocket PTR) AS SoupAddress PTR
DECLARE FUNCTION soup_socket_get_remote_address(BYVAL AS SoupSocket PTR) AS SoupAddress PTR
DECLARE FUNCTION soup_socket_is_connected(BYVAL AS SoupSocket PTR) AS gboolean
DECLARE FUNCTION soup_socket_is_ssl(BYVAL AS SoupSocket PTR) AS gboolean
DECLARE FUNCTION soup_socket_listen(BYVAL AS SoupSocket PTR) AS gboolean
DECLARE FUNCTION soup_socket_read(BYVAL AS SoupSocket PTR, BYVAL AS gpointer, BYVAL AS gsize, BYVAL AS gsize PTR, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS SoupSocketIOStatus
DECLARE FUNCTION soup_socket_read_until(BYVAL AS SoupSocket PTR, BYVAL AS gpointer, BYVAL AS gsize, BYVAL AS gconstpointer, BYVAL AS gsize, BYVAL AS gsize PTR, BYVAL AS gboolean PTR, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS SoupSocketIOStatus
DECLARE FUNCTION soup_socket_start_proxy_ssl(BYVAL AS SoupSocket PTR, BYVAL AS const char PTR, BYVAL AS GCancellable PTR) AS gboolean
DECLARE FUNCTION soup_socket_start_ssl(BYVAL AS SoupSocket PTR, BYVAL AS GCancellable PTR) AS gboolean
DECLARE FUNCTION soup_socket_write(BYVAL AS SoupSocket PTR, BYVAL AS gconstpointer, BYVAL AS gsize, BYVAL AS gsize PTR, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS SoupSocketIOStatus
TYPE _SoupSocketClass
  AS GObjectClass parent_class
  readable AS SUB CDECL(BYVAL AS SoupSocket PTR)
  writable AS SUB CDECL(BYVAL AS SoupSocket PTR)
  disconnected AS SUB CDECL(BYVAL AS SoupSocket PTR)
  new_connection AS SUB CDECL(BYVAL AS SoupSocket PTR, BYVAL AS SoupSocket PTR)
  _libsoup_reserved1 AS SUB CDECL()
  _libsoup_reserved2 AS SUB CDECL()
  _libsoup_reserved3 AS SUB CDECL()
  _libsoup_reserved4 AS SUB CDECL()
END TYPE
TYPE _SoupURI
  AS const char PTR scheme
  AS char PTR user
  AS char PTR password
  AS char PTR host
  AS guint port
  AS char PTR path
  AS char PTR query
  AS char PTR fragment
END TYPE
DECLARE FUNCTION soup_socket_io_status_get_type() AS GType
#DEFINE SOUP_TYPE_SOCKET_IO_STATUS (soup_socket_io_status_get_type())
DECLARE FUNCTION soup_status_get_type() AS GType
#DEFINE SOUP_TYPE_STATUS (soup_status_get_type())
DECLARE FUNCTION soup_tld_error_get_type() AS GType
#DEFINE SOUP_TYPE_TLD_ERROR (soup_tld_error_get_type())
DECLARE FUNCTION soup_uri_new(BYVAL AS const char PTR) AS SoupURI PTR
DECLARE FUNCTION soup_uri_new_with_base(BYVAL AS SoupURI PTR, BYVAL AS const char PTR) AS SoupURI PTR
DECLARE FUNCTION soup_uri_copy(BYVAL AS SoupURI PTR) AS SoupURI PTR
DECLARE FUNCTION soup_uri_copy_host(BYVAL AS SoupURI PTR) AS SoupURI PTR
DECLARE FUNCTION soup_uri_equal(BYVAL AS SoupURI PTR, BYVAL AS SoupURI PTR) AS gboolean
DECLARE SUB soup_uri_free(BYVAL AS SoupURI PTR)
DECLARE FUNCTION soup_uri_get_fragment(BYVAL AS SoupURI PTR) AS const char PTR
DECLARE FUNCTION soup_uri_get_host(BYVAL AS SoupURI PTR) AS const char PTR
DECLARE FUNCTION soup_uri_get_password(BYVAL AS SoupURI PTR) AS const char PTR
DECLARE FUNCTION soup_uri_get_path(BYVAL AS SoupURI PTR) AS const char PTR
DECLARE FUNCTION soup_uri_get_port(BYVAL AS SoupURI PTR) AS guint
DECLARE FUNCTION soup_uri_get_query(BYVAL AS SoupURI PTR) AS const char PTR
DECLARE FUNCTION soup_uri_get_scheme(BYVAL AS SoupURI PTR) AS const char PTR
DECLARE FUNCTION soup_uri_get_user(BYVAL AS SoupURI PTR) AS const char PTR
DECLARE FUNCTION soup_uri_host_equal(BYVAL AS gconstpointer, BYVAL AS gconstpointer) AS gboolean
DECLARE FUNCTION soup_uri_host_hash(BYVAL AS gconstpointer) AS guint
DECLARE SUB soup_uri_set_fragment(BYVAL AS SoupURI PTR, BYVAL AS const char PTR)
DECLARE SUB soup_uri_set_host(BYVAL AS SoupURI PTR, BYVAL AS const char PTR)
DECLARE SUB soup_uri_set_password(BYVAL AS SoupURI PTR, BYVAL AS const char PTR)
DECLARE SUB soup_uri_set_path(BYVAL AS SoupURI PTR, BYVAL AS const char PTR)
DECLARE SUB soup_uri_set_port(BYVAL AS SoupURI PTR, BYVAL AS guint)
DECLARE SUB soup_uri_set_query(BYVAL AS SoupURI PTR, BYVAL AS const char PTR)
DECLARE SUB soup_uri_set_query_from_fields(BYVAL AS SoupURI PTR, BYVAL AS const char PTR, ...)
DECLARE SUB soup_uri_set_query_from_form(BYVAL AS SoupURI PTR, BYVAL AS GHashTable PTR)
DECLARE SUB soup_uri_set_scheme(BYVAL AS SoupURI PTR, BYVAL AS const char PTR)
DECLARE SUB soup_uri_set_user(BYVAL AS SoupURI PTR, BYVAL AS const char PTR)
DECLARE FUNCTION soup_uri_to_string(BYVAL AS SoupURI PTR, BYVAL AS gboolean) AS char PTR
DECLARE FUNCTION soup_uri_uses_default_port(BYVAL AS SoupURI PTR) AS gboolean
DECLARE FUNCTION soup_uri_decode(BYVAL AS const char PTR) AS char PTR
DECLARE FUNCTION soup_uri_encode(BYVAL AS const char PTR, BYVAL AS const char PTR) AS char PTR
DECLARE FUNCTION soup_uri_normalize(BYVAL AS const char PTR, BYVAL AS const char PTR) AS char PTR
TYPE _SoupWebsocketConnection
  AS GObject parent
  AS SoupWebsocketConnectionPrivate PTR pv
END TYPE
DECLARE FUNCTION soup_websocket_close_code_get_type() AS GType
#DEFINE SOUP_TYPE_WEBSOCKET_CLOSE_CODE (soup_websocket_close_code_get_type())
DECLARE FUNCTION soup_websocket_connection_get_type() AS GType
#DEFINE SOUP_TYPE_WEBSOCKET_CONNECTION (soup_websocket_connection_get_type())
#DEFINE SOUP_WEBSOCKET_CONNECTION(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), SOUP_TYPE_WEBSOCKET_CONNECTION, SoupWebsocketConnection))
#DEFINE SOUP_WEBSOCKET_CONNECTION_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), SOUP_TYPE_WEBSOCKET_CONNECTION, SoupWebsocketConnectionClass))
#DEFINE SOUP_IS_WEBSOCKET_CONNECTION(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), SOUP_TYPE_WEBSOCKET_CONNECTION))
#DEFINE SOUP_IS_CLASS_WEBSOCKET_CONNECTION(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), SOUP_TYPE_WEBSOCKET_CONNECTION))
#DEFINE SOUP_WEBSOCKET_CONNECTION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), SOUP_TYPE_WEBSOCKET_CONNECTION, SoupWebsocketConnectionClass))
DECLARE FUNCTION soup_websocket_connection_new(BYVAL AS GIOStream PTR, BYVAL AS SoupURI PTR, BYVAL AS SoupWebsocketConnectionType, BYVAL AS const char PTR, BYVAL AS const char PTR) AS SoupWebsocketConnection PTR
DECLARE FUNCTION soup_websocket_connection_new_with_extensions(BYVAL AS GIOStream PTR, BYVAL AS SoupURI PTR, BYVAL AS SoupWebsocketConnectionType, BYVAL AS const char PTR, BYVAL AS const char PTR, BYVAL AS GList PTR) AS SoupWebsocketConnection PTR
DECLARE SUB soup_websocket_connection_close(BYVAL AS SoupWebsocketConnection PTR, BYVAL AS gushort, BYVAL AS const char PTR)
DECLARE FUNCTION soup_websocket_connection_get_close_code(BYVAL AS SoupWebsocketConnection PTR) AS gushort
DECLARE FUNCTION soup_websocket_connection_get_close_data(BYVAL AS SoupWebsocketConnection PTR) AS const char PTR
DECLARE FUNCTION soup_websocket_connection_get_connection_type(BYVAL AS SoupWebsocketConnection PTR) AS SoupWebsocketConnectionType
DECLARE FUNCTION soup_websocket_connection_get_extensions(BYVAL AS SoupWebsocketConnection PTR) AS GList PTR
DECLARE FUNCTION soup_websocket_connection_get_io_stream(BYVAL AS SoupWebsocketConnection PTR) AS GIOStream PTR
DECLARE FUNCTION soup_websocket_connection_get_keepalive_interval(BYVAL AS SoupWebsocketConnection PTR) AS guint
DECLARE FUNCTION soup_websocket_connection_get_max_incoming_payload_size(BYVAL AS SoupWebsocketConnection PTR) AS guint64
DECLARE FUNCTION soup_websocket_connection_get_origin(BYVAL AS SoupWebsocketConnection PTR) AS const char PTR
DECLARE FUNCTION soup_websocket_connection_get_protocol(BYVAL AS SoupWebsocketConnection PTR) AS const char PTR
DECLARE FUNCTION soup_websocket_connection_get_state(BYVAL AS SoupWebsocketConnection PTR) AS SoupWebsocketState
DECLARE FUNCTION soup_websocket_connection_get_uri(BYVAL AS SoupWebsocketConnection PTR) AS SoupURI PTR
DECLARE SUB soup_websocket_connection_send_binary(BYVAL AS SoupWebsocketConnection PTR, BYVAL AS gconstpointer, BYVAL AS gsize)
DECLARE SUB soup_websocket_connection_send_message(BYVAL AS SoupWebsocketConnection PTR, BYVAL AS SoupWebsocketDataType, BYVAL AS GBytes PTR)
DECLARE SUB soup_websocket_connection_send_text(BYVAL AS SoupWebsocketConnection PTR, BYVAL AS const char PTR)
DECLARE SUB soup_websocket_connection_set_keepalive_interval(BYVAL AS SoupWebsocketConnection PTR, BYVAL AS guint)
DECLARE SUB soup_websocket_connection_set_max_incoming_payload_size(BYVAL AS SoupWebsocketConnection PTR, BYVAL AS guint64)
TYPE _SoupWebsocketConnectionClass
  AS GObjectClass parent
  message AS SUB CDECL(BYVAL AS SoupWebsocketConnection PTR, BYVAL AS SoupWebsocketDataType, BYVAL AS GBytes PTR)
  error AS SUB CDECL(BYVAL AS SoupWebsocketConnection PTR, BYVAL AS GError PTR)
  closing AS SUB CDECL(BYVAL AS SoupWebsocketConnection PTR)
  closed AS SUB CDECL(BYVAL AS SoupWebsocketConnection PTR)
  pong AS SUB CDECL(BYVAL AS SoupWebsocketConnection PTR, BYVAL AS GBytes PTR)
END TYPE
TYPE _SoupWebsocketExtension
  AS GObject parent
END TYPE
DECLARE FUNCTION soup_websocket_connection_type_get_type() AS GType
#DEFINE SOUP_TYPE_WEBSOCKET_CONNECTION_TYPE (soup_websocket_connection_type_get_type())
DECLARE FUNCTION soup_websocket_data_type_get_type() AS GType
#DEFINE SOUP_TYPE_WEBSOCKET_DATA_TYPE (soup_websocket_data_type_get_type())
DECLARE FUNCTION soup_websocket_error_get_type() AS GType
#DEFINE SOUP_TYPE_WEBSOCKET_ERROR (soup_websocket_error_get_type())
DECLARE FUNCTION soup_websocket_extension_get_type() AS GType
#DEFINE SOUP_TYPE_WEBSOCKET_EXTENSION (soup_websocket_extension_get_type())
#DEFINE SOUP_WEBSOCKET_EXTENSION(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), SOUP_TYPE_WEBSOCKET_EXTENSION, SoupWebsocketExtension))
#DEFINE SOUP_WEBSOCKET_EXTENSION_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), SOUP_TYPE_WEBSOCKET_EXTENSION, SoupWebsocketExtensionClass))
#DEFINE SOUP_IS_WEBSOCKET_EXTENSION(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), SOUP_TYPE_WEBSOCKET_EXTENSION))
#DEFINE SOUP_IS_CLASS_WEBSOCKET_EXTENSION(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), SOUP_TYPE_WEBSOCKET_EXTENSION))
#DEFINE SOUP_WEBSOCKET_EXTENSION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), SOUP_TYPE_WEBSOCKET_EXTENSION, SoupWebsocketExtensionClass))
DECLARE FUNCTION soup_websocket_extension_configure(BYVAL AS SoupWebsocketExtension PTR, BYVAL AS SoupWebsocketConnectionType, BYVAL AS GHashTable PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION soup_websocket_extension_get_request_params(BYVAL AS SoupWebsocketExtension PTR) AS char PTR
DECLARE FUNCTION soup_websocket_extension_get_response_params(BYVAL AS SoupWebsocketExtension PTR) AS char PTR
DECLARE FUNCTION soup_websocket_extension_process_incoming_message(BYVAL AS SoupWebsocketExtension PTR, BYVAL AS guint8 PTR, BYVAL AS GBytes PTR, BYVAL AS GError PTR PTR) AS GBytes PTR
DECLARE FUNCTION soup_websocket_extension_process_outgoing_message(BYVAL AS SoupWebsocketExtension PTR, BYVAL AS guint8 PTR, BYVAL AS GBytes PTR, BYVAL AS GError PTR PTR) AS GBytes PTR
TYPE _SoupWebsocketExtensionClass
  AS GObjectClass parent_class
  AS const char PTR name
  configure AS FUNCTION CDECL(BYVAL AS SoupWebsocketExtension PTR, BYVAL AS SoupWebsocketConnectionType, BYVAL AS GHashTable PTR, BYVAL AS GError PTR PTR) AS gboolean
  get_request_params AS FUNCTION CDECL(BYVAL AS SoupWebsocketExtension PTR) AS char PTR
  get_response_params AS FUNCTION CDECL(BYVAL AS SoupWebsocketExtension PTR) AS char PTR
  process_outgoing_message AS FUNCTION CDECL(BYVAL AS SoupWebsocketExtension PTR, BYVAL AS guint8 PTR, BYVAL AS GBytes PTR, BYVAL AS GError PTR PTR) AS GBytes PTR
  process_incoming_message AS FUNCTION CDECL(BYVAL AS SoupWebsocketExtension PTR, BYVAL AS guint8 PTR, BYVAL AS GBytes PTR, BYVAL AS GError PTR PTR) AS GBytes PTR
  _libsoup_reserved1 AS SUB CDECL()
  _libsoup_reserved2 AS SUB CDECL()
  _libsoup_reserved3 AS SUB CDECL()
  _libsoup_reserved4 AS SUB CDECL()
END TYPE
TYPE _SoupWebsocketExtensionDeflate
  AS SoupWebsocketExtension parent
END TYPE
DECLARE FUNCTION soup_websocket_extension_deflate_get_type() AS GType
#DEFINE SOUP_TYPE_WEBSOCKET_EXTENSION_DEFLATE (soup_websocket_extension_deflate_get_type())
#DEFINE SOUP_WEBSOCKET_EXTENSION_DEFLATE(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), SOUP_TYPE_WEBSOCKET_EXTENSION_DEFLATE, SoupWebsocketExtensionDeflate))
#DEFINE SOUP_WEBSOCKET_EXTENSION_DEFLATE_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), SOUP_TYPE_WEBSOCKET_EXTENSION_DEFLATE, SoupWebsocketExtensionDeflateClass))
#DEFINE SOUP_IS_WEBSOCKET_EXTENSION_DEFLATE(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), SOUP_TYPE_WEBSOCKET_EXTENSION_DEFLATE))
#DEFINE SOUP_IS_CLASS_WEBSOCKET_EXTENSION_DEFLATE(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), SOUP_TYPE_WEBSOCKET_EXTENSION_DEFLATE))
#DEFINE SOUP_WEBSOCKET_EXTENSION_DEFLATE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), SOUP_TYPE_WEBSOCKET_EXTENSION_DEFLATE, SoupWebsocketExtensionDeflateClass))
TYPE _SoupWebsocketExtensionDeflateClass
  AS SoupWebsocketExtensionClass parent_class
END TYPE
TYPE _SoupWebsocketExtensionManager
  AS GObject parent
END TYPE
DECLARE FUNCTION soup_websocket_extension_manager_get_type() AS GType
#DEFINE SOUP_TYPE_WEBSOCKET_EXTENSION_MANAGER (soup_websocket_extension_manager_get_type())
#DEFINE SOUP_WEBSOCKET_EXTENSION_MANAGER(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), SOUP_TYPE_WEBSOCKET_EXTENSION_MANAGER, SoupWebsocketExtensionManager))
#DEFINE SOUP_WEBSOCKET_EXTENSION_MANAGER_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), SOUP_TYPE_WEBSOCKET_EXTENSION_MANAGER, SoupWebsocketExtensionManagerClass))
#DEFINE SOUP_IS_WEBSOCKET_EXTENSION_MANAGER(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), SOUP_TYPE_WEBSOCKET_EXTENSION_MANAGER))
#DEFINE SOUP_IS_CLASS_WEBSOCKET_EXTENSION_MANAGER(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), SOUP_TYPE_WEBSOCKET_EXTENSION_MANAGER))
#DEFINE SOUP_WEBSOCKET_EXTENSION_MANAGER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), SOUP_TYPE_WEBSOCKET_EXTENSION_MANAGER, SoupWebsocketExtensionManagerClass))
TYPE _SoupWebsocketExtensionManagerClass
  AS GObjectClass parent_class
END TYPE
DECLARE FUNCTION soup_websocket_state_get_type() AS GType
#DEFINE SOUP_TYPE_WEBSOCKET_STATE (soup_websocket_state_get_type())
DECLARE FUNCTION soup_xmlrpc_error_get_type() AS GType
#DEFINE SOUP_TYPE_XMLRPC_ERROR (soup_xmlrpc_error_get_type())
DECLARE FUNCTION soup_xmlrpc_fault_get_type() AS GType
#DEFINE SOUP_TYPE_XMLRPC_FAULT (soup_xmlrpc_fault_get_type())
DECLARE SUB soup_xmlrpc_params_free(BYVAL AS SoupXMLRPCParams PTR)
DECLARE FUNCTION soup_xmlrpc_params_parse(BYVAL AS SoupXMLRPCParams PTR, BYVAL AS const char PTR, BYVAL AS GError PTR PTR) AS GVariant PTR
' P_4

DECLARE FUNCTION soup_add_completion(BYVAL AS GMainContext PTR, BYVAL AS GSourceFunc, BYVAL AS gpointer) AS GSource PTR
DECLARE FUNCTION soup_add_idle(BYVAL AS GMainContext PTR, BYVAL AS GSourceFunc, BYVAL AS gpointer) AS GSource PTR
DECLARE FUNCTION soup_add_io_watch(BYVAL AS GMainContext PTR, BYVAL AS GIOChannel PTR, BYVAL AS GIOCondition, BYVAL AS GIOFunc, BYVAL AS gpointer) AS GSource PTR
DECLARE FUNCTION soup_add_timeout(BYVAL AS GMainContext PTR, BYVAL AS guint, BYVAL AS GSourceFunc, BYVAL AS gpointer) AS GSource PTR
DECLARE FUNCTION soup_check_version(BYVAL AS guint, BYVAL AS guint, BYVAL AS guint) AS gboolean
DECLARE SUB soup_cookies_free(BYVAL AS GSList PTR)
DECLARE FUNCTION soup_cookies_from_request(BYVAL AS SoupMessage PTR) AS GSList PTR
DECLARE FUNCTION soup_cookies_from_response(BYVAL AS SoupMessage PTR) AS GSList PTR
DECLARE FUNCTION soup_cookies_to_cookie_header(BYVAL AS GSList PTR) AS char PTR
DECLARE SUB soup_cookies_to_request(BYVAL AS GSList PTR, BYVAL AS SoupMessage PTR)
DECLARE SUB soup_cookies_to_response(BYVAL AS GSList PTR, BYVAL AS SoupMessage PTR)
DECLARE FUNCTION soup_form_decode(BYVAL AS const char PTR) AS GHashTable PTR
DECLARE FUNCTION soup_form_decode_multipart(BYVAL AS SoupMessage PTR, BYVAL AS const char PTR, BYVAL AS char PTR PTR, BYVAL AS char PTR PTR, BYVAL AS SoupBuffer PTR PTR) AS GHashTable PTR
DECLARE FUNCTION soup_form_encode(BYVAL AS const char PTR, ...) AS char PTR
DECLARE FUNCTION soup_form_encode_datalist(BYVAL AS GData PTR PTR) AS char PTR
DECLARE FUNCTION soup_form_encode_hash(BYVAL AS GHashTable PTR) AS char PTR
DECLARE FUNCTION soup_form_encode_valist(BYVAL AS const char PTR, BYVAL AS va_list) AS char PTR
DECLARE FUNCTION soup_form_request_new(BYVAL AS const char PTR, BYVAL AS const char PTR, BYVAL AS const char PTR, ...) AS SoupMessage PTR
DECLARE FUNCTION soup_form_request_new_from_datalist(BYVAL AS const char PTR, BYVAL AS const char PTR, BYVAL AS GData PTR PTR) AS SoupMessage PTR
DECLARE FUNCTION soup_form_request_new_from_hash(BYVAL AS const char PTR, BYVAL AS const char PTR, BYVAL AS GHashTable PTR) AS SoupMessage PTR
DECLARE FUNCTION soup_form_request_new_from_multipart(BYVAL AS const char PTR, BYVAL AS SoupMultipart PTR) AS SoupMessage PTR
DECLARE FUNCTION soup_get_major_version() AS guint
DECLARE FUNCTION soup_get_micro_version() AS guint
DECLARE FUNCTION soup_get_minor_version() AS guint
DECLARE FUNCTION soup_header_contains(BYVAL AS const char PTR, BYVAL AS const char PTR) AS gboolean
DECLARE SUB soup_header_free_list(BYVAL AS GSList PTR)
DECLARE SUB soup_header_free_param_list(BYVAL AS GHashTable PTR)
DECLARE SUB soup_header_g_string_append_param(BYVAL AS GString PTR, BYVAL AS const char PTR, BYVAL AS const char PTR)
DECLARE SUB soup_header_g_string_append_param_quoted(BYVAL AS GString PTR, BYVAL AS const char PTR, BYVAL AS const char PTR)
DECLARE FUNCTION soup_header_parse_list(BYVAL AS const char PTR) AS GSList PTR
DECLARE FUNCTION soup_header_parse_param_list(BYVAL AS const char PTR) AS GHashTable PTR
DECLARE FUNCTION soup_header_parse_param_list_strict(BYVAL AS const char PTR) AS GHashTable PTR
DECLARE FUNCTION soup_header_parse_quality_list(BYVAL AS const char PTR, BYVAL AS GSList PTR PTR) AS GSList PTR
DECLARE FUNCTION soup_header_parse_semi_param_list(BYVAL AS const char PTR) AS GHashTable PTR
DECLARE FUNCTION soup_header_parse_semi_param_list_strict(BYVAL AS const char PTR) AS GHashTable PTR
DECLARE FUNCTION soup_headers_parse(BYVAL AS const char PTR, BYVAL AS gint, BYVAL AS SoupMessageHeaders PTR) AS gboolean
DECLARE FUNCTION soup_headers_parse_request(BYVAL AS const char PTR, BYVAL AS gint, BYVAL AS SoupMessageHeaders PTR, BYVAL AS char PTR PTR, BYVAL AS char PTR PTR, BYVAL AS SoupHTTPVersion PTR) AS guint
DECLARE FUNCTION soup_headers_parse_response(BYVAL AS const char PTR, BYVAL AS gint, BYVAL AS SoupMessageHeaders PTR, BYVAL AS SoupHTTPVersion PTR, BYVAL AS guint PTR, BYVAL AS char PTR PTR) AS gboolean
DECLARE FUNCTION soup_headers_parse_status_line(BYVAL AS const char PTR, BYVAL AS SoupHTTPVersion PTR, BYVAL AS guint PTR, BYVAL AS char PTR PTR) AS gboolean
DECLARE FUNCTION soup_http_error_quark() AS GQuark
DECLARE FUNCTION soup_str_case_equal(BYVAL AS gconstpointer, BYVAL AS gconstpointer) AS gboolean
DECLARE FUNCTION soup_str_case_hash(BYVAL AS gconstpointer) AS guint
DECLARE FUNCTION soup_tld_domain_is_public_suffix(BYVAL AS const char PTR) AS gboolean
DECLARE FUNCTION soup_tld_get_base_domain(BYVAL AS const char PTR, BYVAL AS GError PTR PTR) AS const char PTR
DECLARE SUB soup_value_array_append(BYVAL AS GValueArray PTR, BYVAL AS GType, ...)
DECLARE SUB soup_value_array_append_vals(BYVAL AS GValueArray PTR, BYVAL AS GType, ...)
DECLARE FUNCTION soup_value_array_from_args(BYVAL AS va_list) AS GValueArray PTR
DECLARE FUNCTION soup_value_array_get_nth(BYVAL AS GValueArray PTR, BYVAL AS guint, BYVAL AS GType, ...) AS gboolean
DECLARE SUB soup_value_array_insert(BYVAL AS GValueArray PTR, BYVAL AS guint, BYVAL AS GType, ...)
DECLARE FUNCTION soup_value_array_new() AS GValueArray PTR
DECLARE FUNCTION soup_value_array_new_with_vals(BYVAL AS GType, ...) AS GValueArray PTR
DECLARE FUNCTION soup_value_array_to_args(BYVAL AS GValueArray PTR, BYVAL AS va_list) AS gboolean
DECLARE SUB soup_value_hash_insert(BYVAL AS GHashTable PTR, BYVAL AS const char PTR, BYVAL AS GType, ...)
DECLARE SUB soup_value_hash_insert_vals(BYVAL AS GHashTable PTR, BYVAL AS const char PTR, ...)
DECLARE SUB soup_value_hash_insert_value(BYVAL AS GHashTable PTR, BYVAL AS const char PTR, BYVAL AS GValue PTR)
DECLARE FUNCTION soup_value_hash_lookup(BYVAL AS GHashTable PTR, BYVAL AS const char PTR, BYVAL AS GType, ...) AS gboolean
DECLARE FUNCTION soup_value_hash_lookup_vals(BYVAL AS GHashTable PTR, BYVAL AS const char PTR, ...) AS gboolean
DECLARE FUNCTION soup_value_hash_new() AS GHashTable PTR
DECLARE FUNCTION soup_value_hash_new_with_vals(BYVAL AS const char PTR, ...) AS GHashTable PTR
DECLARE SUB soup_websocket_client_prepare_handshake(BYVAL AS SoupMessage PTR, BYVAL AS const char PTR, BYVAL AS char PTR PTR)
DECLARE SUB soup_websocket_client_prepare_handshake_with_extensions(BYVAL AS SoupMessage PTR, BYVAL AS const char PTR, BYVAL AS char PTR PTR, BYVAL AS GPtrArray PTR)
DECLARE FUNCTION soup_websocket_client_verify_handshake(BYVAL AS SoupMessage PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION soup_websocket_client_verify_handshake_with_extensions(BYVAL AS SoupMessage PTR, BYVAL AS GPtrArray PTR, BYVAL AS GList PTR PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION soup_websocket_server_check_handshake(BYVAL AS SoupMessage PTR, BYVAL AS const char PTR, BYVAL AS char PTR PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION soup_websocket_server_check_handshake_with_extensions(BYVAL AS SoupMessage PTR, BYVAL AS const char PTR, BYVAL AS char PTR PTR, BYVAL AS GPtrArray PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION soup_websocket_server_process_handshake(BYVAL AS SoupMessage PTR, BYVAL AS const char PTR, BYVAL AS char PTR PTR) AS gboolean
DECLARE FUNCTION soup_websocket_server_process_handshake_with_extensions(BYVAL AS SoupMessage PTR, BYVAL AS const char PTR, BYVAL AS char PTR PTR, BYVAL AS GPtrArray PTR, BYVAL AS GList PTR PTR) AS gboolean
DECLARE FUNCTION soup_xmlrpc_build_fault(BYVAL AS gint, BYVAL AS const char PTR, ...) AS char PTR
DECLARE FUNCTION soup_xmlrpc_build_method_call(BYVAL AS const char PTR, BYVAL AS GValue PTR, BYVAL AS gint) AS char PTR
DECLARE FUNCTION soup_xmlrpc_build_method_response(BYVAL AS GValue PTR) AS char PTR
DECLARE FUNCTION soup_xmlrpc_build_request(BYVAL AS const char PTR, BYVAL AS GVariant PTR, BYVAL AS GError PTR PTR) AS char PTR
DECLARE FUNCTION soup_xmlrpc_build_response(BYVAL AS GVariant PTR, BYVAL AS GError PTR PTR) AS char PTR
DECLARE FUNCTION soup_xmlrpc_extract_method_call(BYVAL AS const char PTR, BYVAL AS gint, BYVAL AS char PTR PTR, ...) AS gboolean
DECLARE FUNCTION soup_xmlrpc_extract_method_response(BYVAL AS const char PTR, BYVAL AS gint, BYVAL AS GError PTR PTR, BYVAL AS GType, ...) AS gboolean
DECLARE FUNCTION soup_xmlrpc_message_new(BYVAL AS const char PTR, BYVAL AS const char PTR, BYVAL AS GVariant PTR, BYVAL AS GError PTR PTR) AS SoupMessage PTR
DECLARE SUB soup_xmlrpc_message_set_fault(BYVAL AS SoupMessage PTR, BYVAL AS gint, BYVAL AS const char PTR, ...)
DECLARE FUNCTION soup_xmlrpc_message_set_response(BYVAL AS SoupMessage PTR, BYVAL AS GVariant PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION soup_xmlrpc_parse_method_call(BYVAL AS const char PTR, BYVAL AS gint, BYVAL AS char PTR PTR, BYVAL AS GValueArray PTR PTR) AS gboolean
DECLARE FUNCTION soup_xmlrpc_parse_method_response(BYVAL AS const char PTR, BYVAL AS gint, BYVAL AS GValue PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION soup_xmlrpc_parse_request(BYVAL AS const char PTR, BYVAL AS gint, BYVAL AS SoupXMLRPCParams PTR PTR, BYVAL AS GError PTR PTR) AS char PTR
DECLARE FUNCTION soup_xmlrpc_parse_response(BYVAL AS const char PTR, BYVAL AS gint, BYVAL AS const char PTR, BYVAL AS GError PTR PTR) AS GVariant PTR
DECLARE FUNCTION soup_xmlrpc_request_new(BYVAL AS const char PTR, BYVAL AS const char PTR, ...) AS SoupMessage PTR
DECLARE SUB soup_xmlrpc_set_fault(BYVAL AS SoupMessage PTR, BYVAL AS gint, BYVAL AS const char PTR, ...)
DECLARE SUB soup_xmlrpc_set_response(BYVAL AS SoupMessage PTR, BYVAL AS GType, ...)
DECLARE FUNCTION soup_xmlrpc_variant_get_datetime(BYVAL AS GVariant PTR, BYVAL AS GError PTR PTR) AS SoupDate PTR
DECLARE FUNCTION soup_xmlrpc_variant_new_datetime(BYVAL AS SoupDate PTR) AS GVariant PTR
END EXTERN

