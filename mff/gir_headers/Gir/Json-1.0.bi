'            FreeBasic header file, auto-generated by
'                       ### girtobac ###
' LGPLv2.1 (C) 2013-2022 by Thomas{ doT ]Freiherr[ At ]gmx[ DoT }net
' Auto-translated from file /usr/share/gir-1.0/Json-1.0.gir
#INCLUDE ONCE "_GirToBac-0.0.bi"
' Repository version 1.2
#INCLUDE ONCE "GObject-2.0.bi"
#INCLUDE ONCE "Gio-2.0.bi"
TYPE AS _JsonArray JsonArray
TYPE AS _JsonBuilder JsonBuilder
TYPE AS _JsonBuilderClass JsonBuilderClass
TYPE AS _JsonBuilderPrivate JsonBuilderPrivate
TYPE AS _JsonGenerator JsonGenerator
TYPE AS _JsonGeneratorClass JsonGeneratorClass
TYPE AS _JsonGeneratorPrivate JsonGeneratorPrivate
#DEFINE JSON_MAJOR_VERSION 1
#DEFINE JSON_MICRO_VERSION 4
#DEFINE JSON_MINOR_VERSION 4
TYPE AS _JsonNode JsonNode
TYPE AS LONG JsonNodeType
ENUM
  JSON_NODE_OBJECT = 0
  JSON_NODE_ARRAY = 1
  JSON_NODE_VALUE = 2
  JSON_NODE_NULL = 3
END ENUM
TYPE AS _JsonObject JsonObject
TYPE AS _JsonObjectIter JsonObjectIter
TYPE AS _JsonParser JsonParser
TYPE AS _JsonParserClass JsonParserClass
TYPE AS LONG JsonParserError
ENUM
  JSON_PARSER_ERROR_PARSE = 0
  JSON_PARSER_ERROR_TRAILING_COMMA = 1
  JSON_PARSER_ERROR_MISSING_COMMA = 2
  JSON_PARSER_ERROR_MISSING_COLON = 3
  JSON_PARSER_ERROR_INVALID_BAREWORD = 4
  JSON_PARSER_ERROR_EMPTY_MEMBER_NAME = 5
  JSON_PARSER_ERROR_INVALID_DATA = 6
  JSON_PARSER_ERROR_UNKNOWN = 7
END ENUM
TYPE AS _JsonParserPrivate JsonParserPrivate
TYPE AS _JsonPath JsonPath
TYPE AS _JsonPathClass JsonPathClass
TYPE AS LONG JsonPathError
ENUM
  JSON_PATH_ERROR_INVALID_QUERY = 0
END ENUM
TYPE AS _JsonReader JsonReader
TYPE AS _JsonReaderClass JsonReaderClass
TYPE AS LONG JsonReaderError
ENUM
  JSON_READER_ERROR_NO_ARRAY = 0
  JSON_READER_ERROR_INVALID_INDEX = 1
  JSON_READER_ERROR_NO_OBJECT = 2
  JSON_READER_ERROR_INVALID_MEMBER = 3
  JSON_READER_ERROR_INVALID_NODE = 4
  JSON_READER_ERROR_NO_VALUE = 5
  JSON_READER_ERROR_INVALID_TYPE = 6
END ENUM
TYPE AS _JsonReaderPrivate JsonReaderPrivate
TYPE AS _JsonSerializable JsonSerializable
TYPE AS _JsonSerializableIface JsonSerializableIface
#DEFINE JSON_VERSION_S @!"1.4.4"
EXTERN "C" LIB "json-glib-1.0"
' P_X

TYPE JsonArrayForeach AS SUB CDECL(BYVAL AS JsonArray PTR, BYVAL AS guint, BYVAL AS JsonNode PTR, BYVAL AS gpointer)
TYPE JsonObjectForeach AS SUB CDECL(BYVAL AS JsonObject PTR, BYVAL AS const gchar PTR, BYVAL AS JsonNode PTR, BYVAL AS gpointer)
' P_3

DECLARE FUNCTION json_array_new() AS JsonArray PTR
DECLARE FUNCTION json_array_sized_new(BYVAL AS guint) AS JsonArray PTR
DECLARE SUB json_array_add_array_element(BYVAL AS JsonArray PTR, BYVAL AS JsonArray PTR)
DECLARE SUB json_array_add_boolean_element(BYVAL AS JsonArray PTR, BYVAL AS gboolean)
DECLARE SUB json_array_add_double_element(BYVAL AS JsonArray PTR, BYVAL AS gdouble)
DECLARE SUB json_array_add_element(BYVAL AS JsonArray PTR, BYVAL AS JsonNode PTR)
DECLARE SUB json_array_add_int_element(BYVAL AS JsonArray PTR, BYVAL AS gint64)
DECLARE SUB json_array_add_null_element(BYVAL AS JsonArray PTR)
DECLARE SUB json_array_add_object_element(BYVAL AS JsonArray PTR, BYVAL AS JsonObject PTR)
DECLARE SUB json_array_add_string_element(BYVAL AS JsonArray PTR, BYVAL AS const gchar PTR)
DECLARE FUNCTION json_array_dup_element(BYVAL AS JsonArray PTR, BYVAL AS guint) AS JsonNode PTR
DECLARE FUNCTION json_array_equal(BYVAL AS gconstpointer, BYVAL AS gconstpointer) AS gboolean
DECLARE SUB json_array_foreach_element(BYVAL AS JsonArray PTR, BYVAL AS JsonArrayForeach, BYVAL AS gpointer)
DECLARE FUNCTION json_array_get_array_element(BYVAL AS JsonArray PTR, BYVAL AS guint) AS JsonArray PTR
DECLARE FUNCTION json_array_get_boolean_element(BYVAL AS JsonArray PTR, BYVAL AS guint) AS gboolean
DECLARE FUNCTION json_array_get_double_element(BYVAL AS JsonArray PTR, BYVAL AS guint) AS gdouble
DECLARE FUNCTION json_array_get_element(BYVAL AS JsonArray PTR, BYVAL AS guint) AS JsonNode PTR
DECLARE FUNCTION json_array_get_elements(BYVAL AS JsonArray PTR) AS GList PTR
DECLARE FUNCTION json_array_get_int_element(BYVAL AS JsonArray PTR, BYVAL AS guint) AS gint64
DECLARE FUNCTION json_array_get_length(BYVAL AS JsonArray PTR) AS guint
DECLARE FUNCTION json_array_get_null_element(BYVAL AS JsonArray PTR, BYVAL AS guint) AS gboolean
DECLARE FUNCTION json_array_get_object_element(BYVAL AS JsonArray PTR, BYVAL AS guint) AS JsonObject PTR
DECLARE FUNCTION json_array_get_string_element(BYVAL AS JsonArray PTR, BYVAL AS guint) AS const gchar PTR
DECLARE FUNCTION json_array_hash(BYVAL AS gconstpointer) AS guint
DECLARE FUNCTION json_array_is_immutable(BYVAL AS JsonArray PTR) AS gboolean
DECLARE FUNCTION json_array_ref(BYVAL AS JsonArray PTR) AS JsonArray PTR
DECLARE SUB json_array_remove_element(BYVAL AS JsonArray PTR, BYVAL AS guint)
DECLARE SUB json_array_seal(BYVAL AS JsonArray PTR)
DECLARE SUB json_array_unref(BYVAL AS JsonArray PTR)
TYPE JsonBoxedDeserializeFunc AS FUNCTION CDECL(BYVAL AS JsonNode PTR) AS gpointer
TYPE JsonBoxedSerializeFunc AS FUNCTION CDECL(BYVAL AS gconstpointer) AS JsonNode PTR
TYPE _JsonBuilder
  AS GObject parent_instance
  AS JsonBuilderPrivate PTR priv
END TYPE
DECLARE FUNCTION json_builder_get_type() AS GType
#DEFINE JSON_TYPE_BUILDER (json_builder_get_type())
#DEFINE JSON_BUILDER(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), JSON_TYPE_BUILDER, JsonBuilder))
#DEFINE JSON_BUILDER_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), JSON_TYPE_BUILDER, JsonBuilderClass))
#DEFINE JSON_IS_BUILDER(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), JSON_TYPE_BUILDER))
#DEFINE JSON_IS_CLASS_BUILDER(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), JSON_TYPE_BUILDER))
#DEFINE JSON_BUILDER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), JSON_TYPE_BUILDER, JsonBuilderClass))
DECLARE FUNCTION json_builder_new() AS JsonBuilder PTR
DECLARE FUNCTION json_builder_new_immutable() AS JsonBuilder PTR
DECLARE FUNCTION json_builder_add_boolean_value(BYVAL AS JsonBuilder PTR, BYVAL AS gboolean) AS JsonBuilder PTR
DECLARE FUNCTION json_builder_add_double_value(BYVAL AS JsonBuilder PTR, BYVAL AS gdouble) AS JsonBuilder PTR
DECLARE FUNCTION json_builder_add_int_value(BYVAL AS JsonBuilder PTR, BYVAL AS gint64) AS JsonBuilder PTR
DECLARE FUNCTION json_builder_add_null_value(BYVAL AS JsonBuilder PTR) AS JsonBuilder PTR
DECLARE FUNCTION json_builder_add_string_value(BYVAL AS JsonBuilder PTR, BYVAL AS const gchar PTR) AS JsonBuilder PTR
DECLARE FUNCTION json_builder_add_value(BYVAL AS JsonBuilder PTR, BYVAL AS JsonNode PTR) AS JsonBuilder PTR
DECLARE FUNCTION json_builder_begin_array(BYVAL AS JsonBuilder PTR) AS JsonBuilder PTR
DECLARE FUNCTION json_builder_begin_object(BYVAL AS JsonBuilder PTR) AS JsonBuilder PTR
DECLARE FUNCTION json_builder_end_array(BYVAL AS JsonBuilder PTR) AS JsonBuilder PTR
DECLARE FUNCTION json_builder_end_object(BYVAL AS JsonBuilder PTR) AS JsonBuilder PTR
DECLARE FUNCTION json_builder_get_root(BYVAL AS JsonBuilder PTR) AS JsonNode PTR
DECLARE SUB json_builder_reset(BYVAL AS JsonBuilder PTR)
DECLARE FUNCTION json_builder_set_member_name(BYVAL AS JsonBuilder PTR, BYVAL AS const gchar PTR) AS JsonBuilder PTR
TYPE _JsonBuilderClass
  AS GObjectClass parent_class
  _json_reserved1 AS SUB CDECL()
  _json_reserved2 AS SUB CDECL()
END TYPE
TYPE _JsonGenerator
  AS GObject parent_instance
  AS JsonGeneratorPrivate PTR priv
END TYPE
DECLARE FUNCTION json_generator_get_type() AS GType
#DEFINE JSON_TYPE_GENERATOR (json_generator_get_type())
#DEFINE JSON_GENERATOR(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), JSON_TYPE_GENERATOR, JsonGenerator))
#DEFINE JSON_GENERATOR_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), JSON_TYPE_GENERATOR, JsonGeneratorClass))
#DEFINE JSON_IS_GENERATOR(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), JSON_TYPE_GENERATOR))
#DEFINE JSON_IS_CLASS_GENERATOR(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), JSON_TYPE_GENERATOR))
#DEFINE JSON_GENERATOR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), JSON_TYPE_GENERATOR, JsonGeneratorClass))
DECLARE FUNCTION json_generator_new() AS JsonGenerator PTR
DECLARE FUNCTION json_generator_get_indent(BYVAL AS JsonGenerator PTR) AS guint
DECLARE FUNCTION json_generator_get_indent_char(BYVAL AS JsonGenerator PTR) AS gunichar /'?'/
DECLARE FUNCTION json_generator_get_pretty(BYVAL AS JsonGenerator PTR) AS gboolean
DECLARE FUNCTION json_generator_get_root(BYVAL AS JsonGenerator PTR) AS JsonNode PTR
DECLARE SUB json_generator_set_indent(BYVAL AS JsonGenerator PTR, BYVAL AS guint)
DECLARE SUB json_generator_set_indent_char(BYVAL AS JsonGenerator PTR, BYVAL AS gunichar /'?'/)
DECLARE SUB json_generator_set_pretty(BYVAL AS JsonGenerator PTR, BYVAL AS gboolean)
DECLARE SUB json_generator_set_root(BYVAL AS JsonGenerator PTR, BYVAL AS JsonNode PTR)
DECLARE FUNCTION json_generator_to_data(BYVAL AS JsonGenerator PTR, BYVAL AS gsize PTR) AS gchar PTR
DECLARE FUNCTION json_generator_to_file(BYVAL AS JsonGenerator PTR, BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION json_generator_to_gstring(BYVAL AS JsonGenerator PTR, BYVAL AS GString PTR) AS GString PTR
DECLARE FUNCTION json_generator_to_stream(BYVAL AS JsonGenerator PTR, BYVAL AS GOutputStream PTR, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS gboolean
TYPE _JsonGeneratorClass
  AS GObjectClass parent_class
  _json_reserved1 AS SUB CDECL()
  _json_reserved2 AS SUB CDECL()
  _json_reserved3 AS SUB CDECL()
  _json_reserved4 AS SUB CDECL()
END TYPE
DECLARE FUNCTION json_node_alloc() AS JsonNode PTR
DECLARE FUNCTION json_node_new(BYVAL AS JsonNodeType) AS JsonNode PTR
DECLARE FUNCTION json_node_copy(BYVAL AS JsonNode PTR) AS JsonNode PTR
DECLARE FUNCTION json_node_dup_array(BYVAL AS JsonNode PTR) AS JsonArray PTR
DECLARE FUNCTION json_node_dup_object(BYVAL AS JsonNode PTR) AS JsonObject PTR
DECLARE FUNCTION json_node_dup_string(BYVAL AS JsonNode PTR) AS gchar PTR
DECLARE FUNCTION json_node_equal(BYVAL AS gconstpointer, BYVAL AS gconstpointer) AS gboolean
DECLARE SUB json_node_free(BYVAL AS JsonNode PTR)
DECLARE FUNCTION json_node_get_array(BYVAL AS JsonNode PTR) AS JsonArray PTR
DECLARE FUNCTION json_node_get_boolean(BYVAL AS JsonNode PTR) AS gboolean
DECLARE FUNCTION json_node_get_double(BYVAL AS JsonNode PTR) AS gdouble
DECLARE FUNCTION json_node_get_int(BYVAL AS JsonNode PTR) AS gint64
DECLARE FUNCTION json_node_get_node_type(BYVAL AS JsonNode PTR) AS JsonNodeType
DECLARE FUNCTION json_node_get_object(BYVAL AS JsonNode PTR) AS JsonObject PTR
DECLARE FUNCTION json_node_get_parent(BYVAL AS JsonNode PTR) AS JsonNode PTR
DECLARE FUNCTION json_node_get_string(BYVAL AS JsonNode PTR) AS const gchar PTR
DECLARE SUB json_node_get_value(BYVAL AS JsonNode PTR, BYVAL AS GValue PTR)
DECLARE FUNCTION json_node_get_value_type(BYVAL AS JsonNode PTR) AS GType
DECLARE FUNCTION json_node_hash(BYVAL AS gconstpointer) AS guint
DECLARE FUNCTION json_node_init(BYVAL AS JsonNode PTR, BYVAL AS JsonNodeType) AS JsonNode PTR
DECLARE FUNCTION json_node_init_array(BYVAL AS JsonNode PTR, BYVAL AS JsonArray PTR) AS JsonNode PTR
DECLARE FUNCTION json_node_init_boolean(BYVAL AS JsonNode PTR, BYVAL AS gboolean) AS JsonNode PTR
DECLARE FUNCTION json_node_init_double(BYVAL AS JsonNode PTR, BYVAL AS gdouble) AS JsonNode PTR
DECLARE FUNCTION json_node_init_int(BYVAL AS JsonNode PTR, BYVAL AS gint64) AS JsonNode PTR
DECLARE FUNCTION json_node_init_null(BYVAL AS JsonNode PTR) AS JsonNode PTR
DECLARE FUNCTION json_node_init_object(BYVAL AS JsonNode PTR, BYVAL AS JsonObject PTR) AS JsonNode PTR
DECLARE FUNCTION json_node_init_string(BYVAL AS JsonNode PTR, BYVAL AS const char PTR) AS JsonNode PTR
DECLARE FUNCTION json_node_is_immutable(BYVAL AS JsonNode PTR) AS gboolean
DECLARE FUNCTION json_node_is_null(BYVAL AS JsonNode PTR) AS gboolean
DECLARE FUNCTION json_node_ref(BYVAL AS JsonNode PTR) AS JsonNode PTR
DECLARE SUB json_node_seal(BYVAL AS JsonNode PTR)
DECLARE SUB json_node_set_array(BYVAL AS JsonNode PTR, BYVAL AS JsonArray PTR)
DECLARE SUB json_node_set_boolean(BYVAL AS JsonNode PTR, BYVAL AS gboolean)
DECLARE SUB json_node_set_double(BYVAL AS JsonNode PTR, BYVAL AS gdouble)
DECLARE SUB json_node_set_int(BYVAL AS JsonNode PTR, BYVAL AS gint64)
DECLARE SUB json_node_set_object(BYVAL AS JsonNode PTR, BYVAL AS JsonObject PTR)
DECLARE SUB json_node_set_parent(BYVAL AS JsonNode PTR, BYVAL AS JsonNode PTR)
DECLARE SUB json_node_set_string(BYVAL AS JsonNode PTR, BYVAL AS const gchar PTR)
DECLARE SUB json_node_set_value(BYVAL AS JsonNode PTR, BYVAL AS const GValue PTR)
DECLARE SUB json_node_take_array(BYVAL AS JsonNode PTR, BYVAL AS JsonArray PTR)
DECLARE SUB json_node_take_object(BYVAL AS JsonNode PTR, BYVAL AS JsonObject PTR)
DECLARE FUNCTION json_node_type_name(BYVAL AS JsonNode PTR) AS const gchar PTR
DECLARE SUB json_node_unref(BYVAL AS JsonNode PTR)
DECLARE FUNCTION json_node_type_get_type() AS GType
#DEFINE JSON_TYPE_NODE_TYPE (json_node_type_get_type())
DECLARE FUNCTION json_object_new() AS JsonObject PTR
DECLARE SUB json_object_add_member(BYVAL AS JsonObject PTR, BYVAL AS const gchar PTR, BYVAL AS JsonNode PTR)
DECLARE FUNCTION json_object_dup_member(BYVAL AS JsonObject PTR, BYVAL AS const gchar PTR) AS JsonNode PTR
DECLARE FUNCTION json_object_equal(BYVAL AS gconstpointer, BYVAL AS gconstpointer) AS gboolean
DECLARE SUB json_object_foreach_member(BYVAL AS JsonObject PTR, BYVAL AS JsonObjectForeach, BYVAL AS gpointer)
DECLARE FUNCTION json_object_get_array_member(BYVAL AS JsonObject PTR, BYVAL AS const gchar PTR) AS JsonArray PTR
DECLARE FUNCTION json_object_get_boolean_member(BYVAL AS JsonObject PTR, BYVAL AS const gchar PTR) AS gboolean
DECLARE FUNCTION json_object_get_double_member(BYVAL AS JsonObject PTR, BYVAL AS const gchar PTR) AS gdouble
DECLARE FUNCTION json_object_get_int_member(BYVAL AS JsonObject PTR, BYVAL AS const gchar PTR) AS gint64
DECLARE FUNCTION json_object_get_member(BYVAL AS JsonObject PTR, BYVAL AS const gchar PTR) AS JsonNode PTR
DECLARE FUNCTION json_object_get_members(BYVAL AS JsonObject PTR) AS GList PTR
DECLARE FUNCTION json_object_get_null_member(BYVAL AS JsonObject PTR, BYVAL AS const gchar PTR) AS gboolean
DECLARE FUNCTION json_object_get_object_member(BYVAL AS JsonObject PTR, BYVAL AS const gchar PTR) AS JsonObject PTR
DECLARE FUNCTION json_object_get_size(BYVAL AS JsonObject PTR) AS guint
DECLARE FUNCTION json_object_get_string_member(BYVAL AS JsonObject PTR, BYVAL AS const gchar PTR) AS const gchar PTR
DECLARE FUNCTION json_object_get_values(BYVAL AS JsonObject PTR) AS GList PTR
DECLARE FUNCTION json_object_has_member(BYVAL AS JsonObject PTR, BYVAL AS const gchar PTR) AS gboolean
DECLARE FUNCTION json_object_hash(BYVAL AS gconstpointer) AS guint
DECLARE FUNCTION json_object_is_immutable(BYVAL AS JsonObject PTR) AS gboolean
DECLARE FUNCTION json_object_ref(BYVAL AS JsonObject PTR) AS JsonObject PTR
DECLARE SUB json_object_remove_member(BYVAL AS JsonObject PTR, BYVAL AS const gchar PTR)
DECLARE SUB json_object_seal(BYVAL AS JsonObject PTR)
DECLARE SUB json_object_set_array_member(BYVAL AS JsonObject PTR, BYVAL AS const gchar PTR, BYVAL AS JsonArray PTR)
DECLARE SUB json_object_set_boolean_member(BYVAL AS JsonObject PTR, BYVAL AS const gchar PTR, BYVAL AS gboolean)
DECLARE SUB json_object_set_double_member(BYVAL AS JsonObject PTR, BYVAL AS const gchar PTR, BYVAL AS gdouble)
DECLARE SUB json_object_set_int_member(BYVAL AS JsonObject PTR, BYVAL AS const gchar PTR, BYVAL AS gint64)
DECLARE SUB json_object_set_member(BYVAL AS JsonObject PTR, BYVAL AS const gchar PTR, BYVAL AS JsonNode PTR)
DECLARE SUB json_object_set_null_member(BYVAL AS JsonObject PTR, BYVAL AS const gchar PTR)
DECLARE SUB json_object_set_object_member(BYVAL AS JsonObject PTR, BYVAL AS const gchar PTR, BYVAL AS JsonObject PTR)
DECLARE SUB json_object_set_string_member(BYVAL AS JsonObject PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR)
DECLARE SUB json_object_unref(BYVAL AS JsonObject PTR)
TYPE _JsonObjectIter
  AS gpointer priv_pointer(5)
  AS gint /'int'/ priv_int(1)
  AS gboolean priv_boolean(0)
END TYPE
DECLARE SUB json_object_iter_init(BYVAL AS JsonObjectIter PTR, BYVAL AS JsonObject PTR)
DECLARE FUNCTION json_object_iter_next(BYVAL AS JsonObjectIter PTR, BYVAL AS const gchar PTR PTR, BYVAL AS JsonNode PTR PTR) AS gboolean
TYPE _JsonParser
  AS GObject parent_instance
  AS JsonParserPrivate PTR priv
END TYPE
DECLARE FUNCTION json_parser_get_type() AS GType
#DEFINE JSON_TYPE_PARSER (json_parser_get_type())
#DEFINE JSON_PARSER(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), JSON_TYPE_PARSER, JsonParser))
#DEFINE JSON_PARSER_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), JSON_TYPE_PARSER, JsonParserClass))
#DEFINE JSON_IS_PARSER(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), JSON_TYPE_PARSER))
#DEFINE JSON_IS_CLASS_PARSER(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), JSON_TYPE_PARSER))
#DEFINE JSON_PARSER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), JSON_TYPE_PARSER, JsonParserClass))
DECLARE FUNCTION json_parser_new() AS JsonParser PTR
DECLARE FUNCTION json_parser_new_immutable() AS JsonParser PTR
DECLARE FUNCTION json_parser_get_current_line(BYVAL AS JsonParser PTR) AS guint
DECLARE FUNCTION json_parser_get_current_pos(BYVAL AS JsonParser PTR) AS guint
DECLARE FUNCTION json_parser_get_root(BYVAL AS JsonParser PTR) AS JsonNode PTR
DECLARE FUNCTION json_parser_has_assignment(BYVAL AS JsonParser PTR, BYVAL AS gchar PTR PTR) AS gboolean
DECLARE FUNCTION json_parser_load_from_data(BYVAL AS JsonParser PTR, BYVAL AS const gchar PTR, BYVAL AS gssize, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION json_parser_load_from_file(BYVAL AS JsonParser PTR, BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION json_parser_load_from_stream(BYVAL AS JsonParser PTR, BYVAL AS GInputStream PTR, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE SUB json_parser_load_from_stream_async(BYVAL AS JsonParser PTR, BYVAL AS GInputStream PTR, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
DECLARE FUNCTION json_parser_load_from_stream_finish(BYVAL AS JsonParser PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION json_parser_steal_root(BYVAL AS JsonParser PTR) AS JsonNode PTR
TYPE _JsonParserClass
  AS GObjectClass parent_class
  parse_start AS SUB CDECL(BYVAL AS JsonParser PTR)
  object_start AS SUB CDECL(BYVAL AS JsonParser PTR)
  object_member AS SUB CDECL(BYVAL AS JsonParser PTR, BYVAL AS JsonObject PTR, BYVAL AS const gchar PTR)
  object_end AS SUB CDECL(BYVAL AS JsonParser PTR, BYVAL AS JsonObject PTR)
  array_start AS SUB CDECL(BYVAL AS JsonParser PTR)
  array_element AS SUB CDECL(BYVAL AS JsonParser PTR, BYVAL AS JsonArray PTR, BYVAL AS gint)
  array_end AS SUB CDECL(BYVAL AS JsonParser PTR, BYVAL AS JsonArray PTR)
  parse_end AS SUB CDECL(BYVAL AS JsonParser PTR)
  error AS SUB CDECL(BYVAL AS JsonParser PTR, BYVAL AS const GError PTR)
  _json_reserved1 AS SUB CDECL()
  _json_reserved2 AS SUB CDECL()
  _json_reserved3 AS SUB CDECL()
  _json_reserved4 AS SUB CDECL()
  _json_reserved5 AS SUB CDECL()
  _json_reserved6 AS SUB CDECL()
  _json_reserved7 AS SUB CDECL()
  _json_reserved8 AS SUB CDECL()
END TYPE
DECLARE FUNCTION json_parser_error_get_type() AS GType
#DEFINE JSON_TYPE_PARSER_ERROR (json_parser_error_get_type())
DECLARE FUNCTION json_path_get_type() AS GType
#DEFINE JSON_TYPE_PATH (json_path_get_type())
#DEFINE JSON_PATH(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), JSON_TYPE_PATH, JsonPath))
#DEFINE JSON_PATH_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), JSON_TYPE_PATH, JsonPathClass))
#DEFINE JSON_IS_PATH(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), JSON_TYPE_PATH))
#DEFINE JSON_IS_CLASS_PATH(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), JSON_TYPE_PATH))
#DEFINE JSON_PATH_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), JSON_TYPE_PATH, JsonPathClass))
DECLARE FUNCTION json_path_new() AS JsonPath PTR
DECLARE FUNCTION json_path_query(BYVAL AS const char PTR, BYVAL AS JsonNode PTR, BYVAL AS GError PTR PTR) AS JsonNode PTR
DECLARE FUNCTION json_path_compile(BYVAL AS JsonPath PTR, BYVAL AS const char PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION json_path_match(BYVAL AS JsonPath PTR, BYVAL AS JsonNode PTR) AS JsonNode PTR
TYPE _JsonReader
  AS GObject parent_instance
  AS JsonReaderPrivate PTR priv
END TYPE
DECLARE FUNCTION json_path_error_get_type() AS GType
#DEFINE JSON_TYPE_PATH_ERROR (json_path_error_get_type())
DECLARE FUNCTION json_reader_get_type() AS GType
#DEFINE JSON_TYPE_READER (json_reader_get_type())
#DEFINE JSON_READER(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), JSON_TYPE_READER, JsonReader))
#DEFINE JSON_READER_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), JSON_TYPE_READER, JsonReaderClass))
#DEFINE JSON_IS_READER(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), JSON_TYPE_READER))
#DEFINE JSON_IS_CLASS_READER(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), JSON_TYPE_READER))
#DEFINE JSON_READER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), JSON_TYPE_READER, JsonReaderClass))
DECLARE FUNCTION json_reader_new(BYVAL AS JsonNode PTR) AS JsonReader PTR
DECLARE FUNCTION json_reader_count_elements(BYVAL AS JsonReader PTR) AS gint
DECLARE FUNCTION json_reader_count_members(BYVAL AS JsonReader PTR) AS gint
DECLARE SUB json_reader_end_element(BYVAL AS JsonReader PTR)
DECLARE SUB json_reader_end_member(BYVAL AS JsonReader PTR)
DECLARE FUNCTION json_reader_get_boolean_value(BYVAL AS JsonReader PTR) AS gboolean
DECLARE FUNCTION json_reader_get_double_value(BYVAL AS JsonReader PTR) AS gdouble
DECLARE FUNCTION json_reader_get_error(BYVAL AS JsonReader PTR) AS const GError PTR
DECLARE FUNCTION json_reader_get_int_value(BYVAL AS JsonReader PTR) AS gint64
DECLARE FUNCTION json_reader_get_member_name(BYVAL AS JsonReader PTR) AS const gchar PTR
DECLARE FUNCTION json_reader_get_null_value(BYVAL AS JsonReader PTR) AS gboolean
DECLARE FUNCTION json_reader_get_string_value(BYVAL AS JsonReader PTR) AS const gchar PTR
DECLARE FUNCTION json_reader_get_value(BYVAL AS JsonReader PTR) AS JsonNode PTR
DECLARE FUNCTION json_reader_is_array(BYVAL AS JsonReader PTR) AS gboolean
DECLARE FUNCTION json_reader_is_object(BYVAL AS JsonReader PTR) AS gboolean
DECLARE FUNCTION json_reader_is_value(BYVAL AS JsonReader PTR) AS gboolean
DECLARE FUNCTION json_reader_list_members(BYVAL AS JsonReader PTR) AS gchar PTR PTR
DECLARE FUNCTION json_reader_read_element(BYVAL AS JsonReader PTR, BYVAL AS guint) AS gboolean
DECLARE FUNCTION json_reader_read_member(BYVAL AS JsonReader PTR, BYVAL AS const gchar PTR) AS gboolean
DECLARE SUB json_reader_set_root(BYVAL AS JsonReader PTR, BYVAL AS JsonNode PTR)
TYPE _JsonReaderClass
  AS GObjectClass parent_class
  _json_padding0 AS SUB CDECL()
  _json_padding1 AS SUB CDECL()
  _json_padding2 AS SUB CDECL()
  _json_padding3 AS SUB CDECL()
  _json_padding4 AS SUB CDECL()
END TYPE
DECLARE FUNCTION json_reader_error_get_type() AS GType
#DEFINE JSON_TYPE_READER_ERROR (json_reader_error_get_type())
DECLARE FUNCTION json_serializable_get_type() AS GType
#DEFINE JSON_TYPE_SERIALIZABLE (json_serializable_get_type())
#DEFINE JSON_SERIALIZABLE(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), JSON_TYPE_SERIALIZABLE, JsonSerializable))
#DEFINE JSON_SERIALIZABLE_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), JSON_TYPE_SERIALIZABLE, JsonSerializableIface))
#DEFINE JSON_IS_SERIALIZABLE(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), JSON_TYPE_SERIALIZABLE))
#DEFINE JSON_SERIALIZABLE_GET_IFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE((obj), JSON_TYPE_SERIALIZABLE, JsonSerializableIface))
DECLARE FUNCTION json_serializable_default_deserialize_property(BYVAL AS JsonSerializable PTR, BYVAL AS const gchar PTR, BYVAL AS GValue PTR, BYVAL AS GParamSpec PTR, BYVAL AS JsonNode PTR) AS gboolean
DECLARE FUNCTION json_serializable_default_serialize_property(BYVAL AS JsonSerializable PTR, BYVAL AS const gchar PTR, BYVAL AS const GValue PTR, BYVAL AS GParamSpec PTR) AS JsonNode PTR
DECLARE FUNCTION json_serializable_deserialize_property(BYVAL AS JsonSerializable PTR, BYVAL AS const gchar PTR, BYVAL AS GValue PTR, BYVAL AS GParamSpec PTR, BYVAL AS JsonNode PTR) AS gboolean
DECLARE FUNCTION json_serializable_find_property(BYVAL AS JsonSerializable PTR, BYVAL AS const char PTR) AS GParamSpec PTR
DECLARE SUB json_serializable_get_property(BYVAL AS JsonSerializable PTR, BYVAL AS GParamSpec PTR, BYVAL AS GValue PTR)
DECLARE FUNCTION json_serializable_list_properties(BYVAL AS JsonSerializable PTR, BYVAL AS guint PTR) AS GParamSpec PTR PTR
DECLARE FUNCTION json_serializable_serialize_property(BYVAL AS JsonSerializable PTR, BYVAL AS const gchar PTR, BYVAL AS const GValue PTR, BYVAL AS GParamSpec PTR) AS JsonNode PTR
DECLARE SUB json_serializable_set_property(BYVAL AS JsonSerializable PTR, BYVAL AS GParamSpec PTR, BYVAL AS const GValue PTR)
TYPE _JsonSerializableIface
  AS GTypeInterface g_iface
  serialize_property AS FUNCTION CDECL(BYVAL AS JsonSerializable PTR, BYVAL AS const gchar PTR, BYVAL AS const GValue PTR, BYVAL AS GParamSpec PTR) AS JsonNode PTR
  deserialize_property AS FUNCTION CDECL(BYVAL AS JsonSerializable PTR, BYVAL AS const gchar PTR, BYVAL AS GValue PTR, BYVAL AS GParamSpec PTR, BYVAL AS JsonNode PTR) AS gboolean
  find_property AS FUNCTION CDECL(BYVAL AS JsonSerializable PTR, BYVAL AS const char PTR) AS GParamSpec PTR
  list_properties AS FUNCTION CDECL(BYVAL AS JsonSerializable PTR, BYVAL AS guint PTR) AS GParamSpec PTR PTR
  set_property AS SUB CDECL(BYVAL AS JsonSerializable PTR, BYVAL AS GParamSpec PTR, BYVAL AS const GValue PTR)
  get_property AS SUB CDECL(BYVAL AS JsonSerializable PTR, BYVAL AS GParamSpec PTR, BYVAL AS GValue PTR)
END TYPE
' P_4

DECLARE FUNCTION json_boxed_can_deserialize(BYVAL AS GType, BYVAL AS JsonNodeType) AS gboolean
DECLARE FUNCTION json_boxed_can_serialize(BYVAL AS GType, BYVAL AS JsonNodeType PTR) AS gboolean
DECLARE FUNCTION json_boxed_deserialize(BYVAL AS GType, BYVAL AS JsonNode PTR) AS gpointer
DECLARE SUB json_boxed_register_deserialize_func(BYVAL AS GType, BYVAL AS JsonNodeType, BYVAL AS JsonBoxedDeserializeFunc)
DECLARE SUB json_boxed_register_serialize_func(BYVAL AS GType, BYVAL AS JsonNodeType, BYVAL AS JsonBoxedSerializeFunc)
DECLARE FUNCTION json_boxed_serialize(BYVAL AS GType, BYVAL AS gconstpointer) AS JsonNode PTR
DECLARE FUNCTION json_construct_gobject(BYVAL AS GType, BYVAL AS const gchar PTR, BYVAL AS gsize, BYVAL AS GError PTR PTR) AS GObject PTR
DECLARE FUNCTION json_from_string(BYVAL AS const char PTR, BYVAL AS GError PTR PTR) AS JsonNode PTR
DECLARE FUNCTION json_gobject_deserialize(BYVAL AS GType, BYVAL AS JsonNode PTR) AS GObject PTR
DECLARE FUNCTION json_gobject_from_data(BYVAL AS GType, BYVAL AS const gchar PTR, BYVAL AS gssize, BYVAL AS GError PTR PTR) AS GObject PTR
DECLARE FUNCTION json_gobject_serialize(BYVAL AS GObject PTR) AS JsonNode PTR
DECLARE FUNCTION json_gobject_to_data(BYVAL AS GObject PTR, BYVAL AS gsize PTR) AS gchar PTR
DECLARE FUNCTION json_gvariant_deserialize(BYVAL AS JsonNode PTR, BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR) AS GVariant PTR
DECLARE FUNCTION json_gvariant_deserialize_data(BYVAL AS const gchar PTR, BYVAL AS gssize, BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR) AS GVariant PTR
DECLARE FUNCTION json_gvariant_serialize(BYVAL AS GVariant PTR) AS JsonNode PTR
DECLARE FUNCTION json_gvariant_serialize_data(BYVAL AS GVariant PTR, BYVAL AS gsize PTR) AS gchar PTR
DECLARE FUNCTION json_serialize_gobject(BYVAL AS GObject PTR, BYVAL AS gsize PTR) AS gchar PTR
DECLARE FUNCTION json_string_compare(BYVAL AS gconstpointer, BYVAL AS gconstpointer) AS gint
DECLARE FUNCTION json_string_equal(BYVAL AS gconstpointer, BYVAL AS gconstpointer) AS gboolean
DECLARE FUNCTION json_string_hash(BYVAL AS gconstpointer) AS guint
DECLARE FUNCTION json_to_string(BYVAL AS JsonNode PTR, BYVAL AS gboolean) AS char PTR
END EXTERN

