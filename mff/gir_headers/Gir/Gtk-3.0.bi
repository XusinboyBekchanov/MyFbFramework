'            FreeBasic header file, auto-generated by
'                       ### girtobac ###
' LGPLv2.1 (C) 2013-2022 by Thomas{ doT ]Freiherr[ At ]gmx[ DoT }net
' Auto-translated from file /usr/share/gir-1.0/Gtk-3.0.gir
#INCLUDE ONCE "_GirToBac-0.0.bi"
' Repository version 1.2
#INCLUDE ONCE "Atk-1.0.bi"
#INCLUDE ONCE "Gdk-3.0.bi"
#INCLUDE ONCE "xlib-2.0.bi"
TYPE AS GdkRectangle GtkAllocation
TYPE AS char PTR GtkStock
TYPE AS _GtkAboutDialog GtkAboutDialog
TYPE AS _GtkAboutDialogClass GtkAboutDialogClass
TYPE AS _GtkAboutDialogPrivate GtkAboutDialogPrivate
TYPE AS LONG GtkAccelFlags
ENUM
  GTK_ACCEL_VISIBLE = 1
  GTK_ACCEL_LOCKED = 2
  GTK_ACCEL_MASK = 7
END ENUM
TYPE AS _GtkAccelGroup GtkAccelGroup
TYPE AS _GtkAccelGroupClass GtkAccelGroupClass
TYPE AS _GtkAccelGroupEntry GtkAccelGroupEntry
TYPE AS _GtkAccelGroupPrivate GtkAccelGroupPrivate
TYPE AS _GtkAccelKey GtkAccelKey
TYPE AS _GtkAccelLabel GtkAccelLabel
TYPE AS _GtkAccelLabelClass GtkAccelLabelClass
TYPE AS _GtkAccelLabelPrivate GtkAccelLabelPrivate
TYPE AS _GtkAccelMap GtkAccelMap
TYPE AS _GtkAccelMapClass GtkAccelMapClass
TYPE AS _GtkAccessible GtkAccessible
TYPE AS _GtkAccessibleClass GtkAccessibleClass
TYPE AS _GtkAccessiblePrivate GtkAccessiblePrivate
TYPE AS _GtkAction GtkAction
TYPE AS _GtkActionBar GtkActionBar
TYPE AS _GtkActionBarClass GtkActionBarClass
TYPE AS _GtkActionBarPrivate GtkActionBarPrivate
TYPE AS _GtkActionClass GtkActionClass
TYPE AS _GtkActionEntry GtkActionEntry
TYPE AS _GtkActionGroup GtkActionGroup
TYPE AS _GtkActionGroupClass GtkActionGroupClass
TYPE AS _GtkActionGroupPrivate GtkActionGroupPrivate
TYPE AS _GtkActionPrivate GtkActionPrivate
TYPE AS _GtkActionable GtkActionable
TYPE AS _GtkActionableInterface GtkActionableInterface
TYPE AS _GtkActivatable GtkActivatable
TYPE AS _GtkActivatableIface GtkActivatableIface
TYPE AS _GtkAdjustment GtkAdjustment
TYPE AS _GtkAdjustmentClass GtkAdjustmentClass
TYPE AS _GtkAdjustmentPrivate GtkAdjustmentPrivate
TYPE AS LONG GtkAlign
ENUM
  GTK_ALIGN_FILL = 0
  GTK_ALIGN_START = 1
  GTK_ALIGN_END = 2
  GTK_ALIGN_CENTER = 3
  GTK_ALIGN_BASELINE = 4
END ENUM
TYPE AS _GtkAlignment GtkAlignment
TYPE AS _GtkAlignmentClass GtkAlignmentClass
TYPE AS _GtkAlignmentPrivate GtkAlignmentPrivate
TYPE AS _GtkAppChooser GtkAppChooser
TYPE AS _GtkAppChooserButton GtkAppChooserButton
TYPE AS _GtkAppChooserButtonClass GtkAppChooserButtonClass
TYPE AS _GtkAppChooserButtonPrivate GtkAppChooserButtonPrivate
TYPE AS _GtkAppChooserDialog GtkAppChooserDialog
TYPE AS _GtkAppChooserDialogClass GtkAppChooserDialogClass
TYPE AS _GtkAppChooserDialogPrivate GtkAppChooserDialogPrivate
TYPE AS _GtkAppChooserWidget GtkAppChooserWidget
TYPE AS _GtkAppChooserWidgetClass GtkAppChooserWidgetClass
TYPE AS _GtkAppChooserWidgetPrivate GtkAppChooserWidgetPrivate
TYPE AS _GtkApplication GtkApplication
TYPE AS _GtkApplicationClass GtkApplicationClass
TYPE AS LONG GtkApplicationInhibitFlags
ENUM
  GTK_APPLICATION_INHIBIT_LOGOUT = 1
  GTK_APPLICATION_INHIBIT_SWITCH = 2
  GTK_APPLICATION_INHIBIT_SUSPEND = 4
  GTK_APPLICATION_INHIBIT_IDLE = 8
END ENUM
TYPE AS _GtkApplicationPrivate GtkApplicationPrivate
TYPE AS _GtkApplicationWindow GtkApplicationWindow
TYPE AS _GtkApplicationWindowClass GtkApplicationWindowClass
TYPE AS _GtkApplicationWindowPrivate GtkApplicationWindowPrivate
TYPE AS _GtkArrow GtkArrow
TYPE AS _GtkArrowAccessible GtkArrowAccessible
TYPE AS _GtkArrowAccessibleClass GtkArrowAccessibleClass
TYPE AS _GtkArrowAccessiblePrivate GtkArrowAccessiblePrivate
TYPE AS _GtkArrowClass GtkArrowClass
TYPE AS LONG GtkArrowPlacement
ENUM
  GTK_ARROWS_BOTH = 0
  GTK_ARROWS_START = 1
  GTK_ARROWS_END = 2
END ENUM
TYPE AS _GtkArrowPrivate GtkArrowPrivate
TYPE AS LONG GtkArrowType
ENUM
  GTK_ARROW_UP = 0
  GTK_ARROW_DOWN = 1
  GTK_ARROW_LEFT = 2
  GTK_ARROW_RIGHT = 3
  GTK_ARROW_NONE = 4
END ENUM
TYPE AS _GtkAspectFrame GtkAspectFrame
TYPE AS _GtkAspectFrameClass GtkAspectFrameClass
TYPE AS _GtkAspectFramePrivate GtkAspectFramePrivate
TYPE AS _GtkAssistant GtkAssistant
TYPE AS _GtkAssistantClass GtkAssistantClass
TYPE AS LONG GtkAssistantPageType
ENUM
  GTK_ASSISTANT_PAGE_CONTENT = 0
  GTK_ASSISTANT_PAGE_INTRO = 1
  GTK_ASSISTANT_PAGE_CONFIRM = 2
  GTK_ASSISTANT_PAGE_SUMMARY = 3
  GTK_ASSISTANT_PAGE_PROGRESS = 4
  GTK_ASSISTANT_PAGE_CUSTOM = 5
END ENUM
TYPE AS _GtkAssistantPrivate GtkAssistantPrivate
TYPE AS LONG GtkAttachOptions
ENUM
  GTK_EXPAND = 1
  GTK_SHRINK = 2
  GTK_FILL = 4
END ENUM
#DEFINE GTK_BINARY_AGE 2418
TYPE AS LONG GtkBaselinePosition
ENUM
  GTK_BASELINE_POSITION_TOP = 0
  GTK_BASELINE_POSITION_CENTER = 1
  GTK_BASELINE_POSITION_BOTTOM = 2
END ENUM
TYPE AS _GtkBin GtkBin
TYPE AS _GtkBinClass GtkBinClass
TYPE AS _GtkBinPrivate GtkBinPrivate
TYPE AS _GtkBindingArg GtkBindingArg
TYPE AS _GtkBindingEntry GtkBindingEntry
TYPE AS _GtkBindingSet GtkBindingSet
TYPE AS _GtkBindingSignal GtkBindingSignal
TYPE AS _GtkBooleanCellAccessible GtkBooleanCellAccessible
TYPE AS _GtkBooleanCellAccessibleClass GtkBooleanCellAccessibleClass
TYPE AS _GtkBooleanCellAccessiblePrivate GtkBooleanCellAccessiblePrivate
TYPE AS _GtkBorder GtkBorder
TYPE AS LONG GtkBorderStyle
ENUM
  GTK_BORDER_STYLE_NONE = 0
  GTK_BORDER_STYLE_SOLID = 1
  GTK_BORDER_STYLE_INSET = 2
  GTK_BORDER_STYLE_OUTSET = 3
  GTK_BORDER_STYLE_HIDDEN = 4
  GTK_BORDER_STYLE_DOTTED = 5
  GTK_BORDER_STYLE_DASHED = 6
  GTK_BORDER_STYLE_DOUBLE = 7
  GTK_BORDER_STYLE_GROOVE = 8
  GTK_BORDER_STYLE_RIDGE = 9
END ENUM
TYPE AS _GtkBox GtkBox
TYPE AS _GtkBoxClass GtkBoxClass
TYPE AS _GtkBoxPrivate GtkBoxPrivate
TYPE AS _GtkBuildable GtkBuildable
TYPE AS _GtkBuildableIface GtkBuildableIface
TYPE AS _GtkBuilder GtkBuilder
TYPE AS _GtkBuilderClass GtkBuilderClass
TYPE AS LONG GtkBuilderError
ENUM
  GTK_BUILDER_ERROR_INVALID_TYPE_FUNCTION = 0
  GTK_BUILDER_ERROR_UNHANDLED_TAG = 1
  GTK_BUILDER_ERROR_MISSING_ATTRIBUTE = 2
  GTK_BUILDER_ERROR_INVALID_ATTRIBUTE = 3
  GTK_BUILDER_ERROR_INVALID_TAG = 4
  GTK_BUILDER_ERROR_MISSING_PROPERTY_VALUE = 5
  GTK_BUILDER_ERROR_INVALID_VALUE = 6
  GTK_BUILDER_ERROR_VERSION_MISMATCH = 7
  GTK_BUILDER_ERROR_DUPLICATE_ID = 8
  GTK_BUILDER_ERROR_OBJECT_TYPE_REFUSED = 9
  GTK_BUILDER_ERROR_TEMPLATE_MISMATCH = 10
  GTK_BUILDER_ERROR_INVALID_PROPERTY = 11
  GTK_BUILDER_ERROR_INVALID_SIGNAL = 12
  GTK_BUILDER_ERROR_INVALID_ID = 13
END ENUM
TYPE AS _GtkBuilderPrivate GtkBuilderPrivate
TYPE AS _GtkButton GtkButton
TYPE AS _GtkButtonAccessible GtkButtonAccessible
TYPE AS _GtkButtonAccessibleClass GtkButtonAccessibleClass
TYPE AS _GtkButtonAccessiblePrivate GtkButtonAccessiblePrivate
TYPE AS _GtkButtonBox GtkButtonBox
TYPE AS _GtkButtonBoxClass GtkButtonBoxClass
TYPE AS _GtkButtonBoxPrivate GtkButtonBoxPrivate
TYPE AS LONG GtkButtonBoxStyle
ENUM
  GTK_BUTTONBOX_SPREAD = 1
  GTK_BUTTONBOX_EDGE = 2
  GTK_BUTTONBOX_START = 3
  GTK_BUTTONBOX_END = 4
  GTK_BUTTONBOX_CENTER = 5
  GTK_BUTTONBOX_EXPAND = 6
END ENUM
TYPE AS _GtkButtonClass GtkButtonClass
TYPE AS _GtkButtonPrivate GtkButtonPrivate
TYPE AS LONG GtkButtonRole
ENUM
  GTK_BUTTON_ROLE_NORMAL = 0
  GTK_BUTTON_ROLE_CHECK = 1
  GTK_BUTTON_ROLE_RADIO = 2
END ENUM
TYPE AS LONG GtkButtonsType
ENUM
  GTK_BUTTONS_NONE = 0
  GTK_BUTTONS_OK = 1
  GTK_BUTTONS_CLOSE = 2
  GTK_BUTTONS_CANCEL = 3
  GTK_BUTTONS_YES_NO = 4
  GTK_BUTTONS_OK_CANCEL = 5
END ENUM
TYPE AS _GtkCalendar GtkCalendar
TYPE AS _GtkCalendarClass GtkCalendarClass
TYPE AS LONG GtkCalendarDisplayOptions
ENUM
  GTK_CALENDAR_SHOW_HEADING = 1
  GTK_CALENDAR_SHOW_DAY_NAMES = 2
  GTK_CALENDAR_NO_MONTH_CHANGE = 4
  GTK_CALENDAR_SHOW_WEEK_NUMBERS = 8
  GTK_CALENDAR_SHOW_DETAILS = 32
END ENUM
TYPE AS _GtkCalendarPrivate GtkCalendarPrivate
TYPE AS _GtkCellAccessible GtkCellAccessible
TYPE AS _GtkCellAccessibleClass GtkCellAccessibleClass
TYPE AS _GtkCellAccessibleParent GtkCellAccessibleParent
TYPE AS _GtkCellAccessibleParentIface GtkCellAccessibleParentIface
TYPE AS _GtkCellAccessiblePrivate GtkCellAccessiblePrivate
TYPE AS _GtkCellArea GtkCellArea
TYPE AS _GtkCellAreaBox GtkCellAreaBox
TYPE AS _GtkCellAreaBoxClass GtkCellAreaBoxClass
TYPE AS _GtkCellAreaBoxPrivate GtkCellAreaBoxPrivate
TYPE AS _GtkCellAreaClass GtkCellAreaClass
TYPE AS _GtkCellAreaContext GtkCellAreaContext
TYPE AS _GtkCellAreaContextClass GtkCellAreaContextClass
TYPE AS _GtkCellAreaContextPrivate GtkCellAreaContextPrivate
TYPE AS _GtkCellAreaPrivate GtkCellAreaPrivate
TYPE AS _GtkCellEditable GtkCellEditable
TYPE AS _GtkCellEditableIface GtkCellEditableIface
TYPE AS _GtkCellLayout GtkCellLayout
TYPE AS _GtkCellLayoutIface GtkCellLayoutIface
TYPE AS _GtkCellRenderer GtkCellRenderer
TYPE AS _GtkCellRendererAccel GtkCellRendererAccel
TYPE AS _GtkCellRendererAccelClass GtkCellRendererAccelClass
TYPE AS LONG GtkCellRendererAccelMode
ENUM
  GTK_CELL_RENDERER_ACCEL_MODE_GTK = 0
  GTK_CELL_RENDERER_ACCEL_MODE_OTHER = 1
  GTK_CELL_RENDERER_ACCEL_MODE_MODIFIER_TAP = 2
END ENUM
TYPE AS _GtkCellRendererAccelPrivate GtkCellRendererAccelPrivate
TYPE AS _GtkCellRendererClass GtkCellRendererClass
TYPE AS _GtkCellRendererClassPrivate GtkCellRendererClassPrivate
TYPE AS _GtkCellRendererCombo GtkCellRendererCombo
TYPE AS _GtkCellRendererComboClass GtkCellRendererComboClass
TYPE AS _GtkCellRendererComboPrivate GtkCellRendererComboPrivate
TYPE AS LONG GtkCellRendererMode
ENUM
  GTK_CELL_RENDERER_MODE_INERT = 0
  GTK_CELL_RENDERER_MODE_ACTIVATABLE = 1
  GTK_CELL_RENDERER_MODE_EDITABLE = 2
END ENUM
TYPE AS _GtkCellRendererPixbuf GtkCellRendererPixbuf
TYPE AS _GtkCellRendererPixbufClass GtkCellRendererPixbufClass
TYPE AS _GtkCellRendererPixbufPrivate GtkCellRendererPixbufPrivate
TYPE AS _GtkCellRendererPrivate GtkCellRendererPrivate
TYPE AS _GtkCellRendererProgress GtkCellRendererProgress
TYPE AS _GtkCellRendererProgressClass GtkCellRendererProgressClass
TYPE AS _GtkCellRendererProgressPrivate GtkCellRendererProgressPrivate
TYPE AS _GtkCellRendererSpin GtkCellRendererSpin
TYPE AS _GtkCellRendererSpinClass GtkCellRendererSpinClass
TYPE AS _GtkCellRendererSpinPrivate GtkCellRendererSpinPrivate
TYPE AS _GtkCellRendererSpinner GtkCellRendererSpinner
TYPE AS _GtkCellRendererSpinnerClass GtkCellRendererSpinnerClass
TYPE AS _GtkCellRendererSpinnerPrivate GtkCellRendererSpinnerPrivate
TYPE AS LONG GtkCellRendererState
ENUM
  GTK_CELL_RENDERER_SELECTED = 1
  GTK_CELL_RENDERER_PRELIT = 2
  GTK_CELL_RENDERER_INSENSITIVE = 4
  GTK_CELL_RENDERER_SORTED = 8
  GTK_CELL_RENDERER_FOCUSED = 16
  GTK_CELL_RENDERER_EXPANDABLE = 32
  GTK_CELL_RENDERER_EXPANDED = 64
END ENUM
TYPE AS _GtkCellRendererText GtkCellRendererText
TYPE AS _GtkCellRendererTextClass GtkCellRendererTextClass
TYPE AS _GtkCellRendererTextPrivate GtkCellRendererTextPrivate
TYPE AS _GtkCellRendererToggle GtkCellRendererToggle
TYPE AS _GtkCellRendererToggleClass GtkCellRendererToggleClass
TYPE AS _GtkCellRendererTogglePrivate GtkCellRendererTogglePrivate
TYPE AS _GtkCellView GtkCellView
TYPE AS _GtkCellViewClass GtkCellViewClass
TYPE AS _GtkCellViewPrivate GtkCellViewPrivate
TYPE AS _GtkCheckButton GtkCheckButton
TYPE AS _GtkCheckButtonClass GtkCheckButtonClass
TYPE AS _GtkCheckMenuItem GtkCheckMenuItem
TYPE AS _GtkCheckMenuItemAccessible GtkCheckMenuItemAccessible
TYPE AS _GtkCheckMenuItemAccessibleClass GtkCheckMenuItemAccessibleClass
TYPE AS _GtkCheckMenuItemAccessiblePrivate GtkCheckMenuItemAccessiblePrivate
TYPE AS _GtkCheckMenuItemClass GtkCheckMenuItemClass
TYPE AS _GtkCheckMenuItemPrivate GtkCheckMenuItemPrivate
TYPE AS _GtkClipboard GtkClipboard
TYPE AS _GtkColorButton GtkColorButton
TYPE AS _GtkColorButtonClass GtkColorButtonClass
TYPE AS _GtkColorButtonPrivate GtkColorButtonPrivate
TYPE AS _GtkColorChooser GtkColorChooser
TYPE AS _GtkColorChooserDialog GtkColorChooserDialog
TYPE AS _GtkColorChooserDialogClass GtkColorChooserDialogClass
TYPE AS _GtkColorChooserDialogPrivate GtkColorChooserDialogPrivate
TYPE AS _GtkColorChooserInterface GtkColorChooserInterface
TYPE AS _GtkColorChooserWidget GtkColorChooserWidget
TYPE AS _GtkColorChooserWidgetClass GtkColorChooserWidgetClass
TYPE AS _GtkColorChooserWidgetPrivate GtkColorChooserWidgetPrivate
TYPE AS _GtkColorSelection GtkColorSelection
TYPE AS _GtkColorSelectionClass GtkColorSelectionClass
TYPE AS _GtkColorSelectionDialog GtkColorSelectionDialog
TYPE AS _GtkColorSelectionDialogClass GtkColorSelectionDialogClass
TYPE AS _GtkColorSelectionDialogPrivate GtkColorSelectionDialogPrivate
TYPE AS _GtkColorSelectionPrivate GtkColorSelectionPrivate
TYPE AS _GtkComboBox GtkComboBox
TYPE AS _GtkComboBoxAccessible GtkComboBoxAccessible
TYPE AS _GtkComboBoxAccessibleClass GtkComboBoxAccessibleClass
TYPE AS _GtkComboBoxAccessiblePrivate GtkComboBoxAccessiblePrivate
TYPE AS _GtkComboBoxClass GtkComboBoxClass
TYPE AS _GtkComboBoxPrivate GtkComboBoxPrivate
TYPE AS _GtkComboBoxText GtkComboBoxText
TYPE AS _GtkComboBoxTextClass GtkComboBoxTextClass
TYPE AS _GtkComboBoxTextPrivate GtkComboBoxTextPrivate
TYPE AS _GtkContainer GtkContainer
TYPE AS _GtkContainerAccessible GtkContainerAccessible
TYPE AS _GtkContainerAccessibleClass GtkContainerAccessibleClass
TYPE AS _GtkContainerAccessiblePrivate GtkContainerAccessiblePrivate
TYPE AS _GtkContainerCellAccessible GtkContainerCellAccessible
TYPE AS _GtkContainerCellAccessibleClass GtkContainerCellAccessibleClass
TYPE AS _GtkContainerCellAccessiblePrivate GtkContainerCellAccessiblePrivate
TYPE AS _GtkContainerClass GtkContainerClass
TYPE AS _GtkContainerPrivate GtkContainerPrivate
TYPE AS LONG GtkCornerType
ENUM
  GTK_CORNER_TOP_LEFT = 0
  GTK_CORNER_BOTTOM_LEFT = 1
  GTK_CORNER_TOP_RIGHT = 2
  GTK_CORNER_BOTTOM_RIGHT = 3
END ENUM
TYPE AS _GtkCssProvider GtkCssProvider
TYPE AS _GtkCssProviderClass GtkCssProviderClass
TYPE AS LONG GtkCssProviderError
ENUM
  GTK_CSS_PROVIDER_ERROR_FAILED = 0
  GTK_CSS_PROVIDER_ERROR_SYNTAX = 1
  GTK_CSS_PROVIDER_ERROR_IMPORT = 2
  GTK_CSS_PROVIDER_ERROR_NAME = 3
  GTK_CSS_PROVIDER_ERROR_DEPRECATED = 4
  GTK_CSS_PROVIDER_ERROR_UNKNOWN_VALUE = 5
END ENUM
TYPE AS _GtkCssProviderPrivate GtkCssProviderPrivate
TYPE AS _GtkCssSection GtkCssSection
TYPE AS LONG GtkCssSectionType
ENUM
  GTK_CSS_SECTION_DOCUMENT = 0
  GTK_CSS_SECTION_IMPORT = 1
  GTK_CSS_SECTION_COLOR_DEFINITION = 2
  GTK_CSS_SECTION_BINDING_SET = 3
  GTK_CSS_SECTION_RULESET = 4
  GTK_CSS_SECTION_SELECTOR = 5
  GTK_CSS_SECTION_DECLARATION = 6
  GTK_CSS_SECTION_VALUE = 7
  GTK_CSS_SECTION_KEYFRAMES = 8
END ENUM
TYPE AS LONG GtkDebugFlag
ENUM
  GTK_DEBUG_MISC = 1
  GTK_DEBUG_PLUGSOCKET = 2
  GTK_DEBUG_TEXT = 4
  GTK_DEBUG_TREE = 8
  GTK_DEBUG_UPDATES = 16
  GTK_DEBUG_KEYBINDINGS = 32
  GTK_DEBUG_MULTIHEAD = 64
  GTK_DEBUG_MODULES = 128
  GTK_DEBUG_GEOMETRY = 256
  GTK_DEBUG_ICONTHEME = 512
  GTK_DEBUG_PRINTING = 1024
  GTK_DEBUG_BUILDER = 2048
  GTK_DEBUG_SIZE_REQUEST = 4096
  GTK_DEBUG_NO_CSS_CACHE = 8192
  GTK_DEBUG_BASELINES = 16384
  GTK_DEBUG_PIXEL_CACHE = 32768
  GTK_DEBUG_NO_PIXEL_CACHE = 65536
  GTK_DEBUG_INTERACTIVE = 131072
  GTK_DEBUG_TOUCHSCREEN = 262144
  GTK_DEBUG_ACTIONS = 524288
  GTK_DEBUG_RESIZE = 1048576
  GTK_DEBUG_LAYOUT = 2097152
END ENUM
TYPE AS LONG GtkDeleteType
ENUM
  GTK_DELETE_CHARS = 0
  GTK_DELETE_WORD_ENDS = 1
  GTK_DELETE_WORDS = 2
  GTK_DELETE_DISPLAY_LINES = 3
  GTK_DELETE_DISPLAY_LINE_ENDS = 4
  GTK_DELETE_PARAGRAPH_ENDS = 5
  GTK_DELETE_PARAGRAPHS = 6
  GTK_DELETE_WHITESPACE = 7
END ENUM
TYPE AS LONG GtkDestDefaults
ENUM
  GTK_DEST_DEFAULT_MOTION = 1
  GTK_DEST_DEFAULT_HIGHLIGHT = 2
  GTK_DEST_DEFAULT_DROP = 4
  GTK_DEST_DEFAULT_ALL = 7
END ENUM
TYPE AS _GtkDialog GtkDialog
TYPE AS _GtkDialogClass GtkDialogClass
TYPE AS LONG GtkDialogFlags
ENUM
  GTK_DIALOG_MODAL = 1
  GTK_DIALOG_DESTROY_WITH_PARENT = 2
  GTK_DIALOG_USE_HEADER_BAR = 4
END ENUM
TYPE AS _GtkDialogPrivate GtkDialogPrivate
TYPE AS LONG GtkDirectionType
ENUM
  GTK_DIR_TAB_FORWARD = 0
  GTK_DIR_TAB_BACKWARD = 1
  GTK_DIR_UP = 2
  GTK_DIR_DOWN = 3
  GTK_DIR_LEFT = 4
  GTK_DIR_RIGHT = 5
END ENUM
TYPE AS LONG GtkDragResult
ENUM
  GTK_DRAG_RESULT_SUCCESS = 0
  GTK_DRAG_RESULT_NO_TARGET = 1
  GTK_DRAG_RESULT_USER_CANCELLED = 2
  GTK_DRAG_RESULT_TIMEOUT_EXPIRED = 3
  GTK_DRAG_RESULT_GRAB_BROKEN = 4
  GTK_DRAG_RESULT_ERROR = 5
END ENUM
TYPE AS _GtkDrawingArea GtkDrawingArea
TYPE AS _GtkDrawingAreaClass GtkDrawingAreaClass
TYPE AS _GtkEditable GtkEditable
TYPE AS _GtkEditableInterface GtkEditableInterface
TYPE AS _GtkEntry GtkEntry
TYPE AS _GtkEntryAccessible GtkEntryAccessible
TYPE AS _GtkEntryAccessibleClass GtkEntryAccessibleClass
TYPE AS _GtkEntryAccessiblePrivate GtkEntryAccessiblePrivate
TYPE AS _GtkEntryBuffer GtkEntryBuffer
TYPE AS _GtkEntryBufferClass GtkEntryBufferClass
TYPE AS _GtkEntryBufferPrivate GtkEntryBufferPrivate
TYPE AS _GtkEntryClass GtkEntryClass
TYPE AS _GtkEntryCompletion GtkEntryCompletion
TYPE AS _GtkEntryCompletionClass GtkEntryCompletionClass
TYPE AS _GtkEntryCompletionPrivate GtkEntryCompletionPrivate
TYPE AS _GtkEntryIconAccessible GtkEntryIconAccessible
TYPE AS LONG GtkEntryIconPosition
ENUM
  GTK_ENTRY_ICON_PRIMARY = 0
  GTK_ENTRY_ICON_SECONDARY = 1
END ENUM
TYPE AS _GtkEntryPrivate GtkEntryPrivate
TYPE AS _GtkEventBox GtkEventBox
TYPE AS _GtkEventBoxClass GtkEventBoxClass
TYPE AS _GtkEventBoxPrivate GtkEventBoxPrivate
TYPE AS _GtkEventController GtkEventController
TYPE AS _GtkEventControllerClass GtkEventControllerClass
TYPE AS _GtkEventControllerKey GtkEventControllerKey
TYPE AS _GtkEventControllerKeyClass GtkEventControllerKeyClass
TYPE AS _GtkEventControllerMotion GtkEventControllerMotion
TYPE AS _GtkEventControllerMotionClass GtkEventControllerMotionClass
TYPE AS _GtkEventControllerScroll GtkEventControllerScroll
TYPE AS _GtkEventControllerScrollClass GtkEventControllerScrollClass
TYPE AS LONG GtkEventControllerScrollFlags
ENUM
  GTK_EVENT_CONTROLLER_SCROLL_NONE = 0
  GTK_EVENT_CONTROLLER_SCROLL_VERTICAL = 1
  GTK_EVENT_CONTROLLER_SCROLL_HORIZONTAL = 2
  GTK_EVENT_CONTROLLER_SCROLL_DISCRETE = 4
  GTK_EVENT_CONTROLLER_SCROLL_KINETIC = 8
  GTK_EVENT_CONTROLLER_SCROLL_BOTH_AXES = 3
END ENUM
TYPE AS LONG GtkEventSequenceState
ENUM
  GTK_EVENT_SEQUENCE_NONE = 0
  GTK_EVENT_SEQUENCE_CLAIMED = 1
  GTK_EVENT_SEQUENCE_DENIED = 2
END ENUM
TYPE AS _GtkExpander GtkExpander
TYPE AS _GtkExpanderAccessible GtkExpanderAccessible
TYPE AS _GtkExpanderAccessibleClass GtkExpanderAccessibleClass
TYPE AS _GtkExpanderAccessiblePrivate GtkExpanderAccessiblePrivate
TYPE AS _GtkExpanderClass GtkExpanderClass
TYPE AS _GtkExpanderPrivate GtkExpanderPrivate
TYPE AS LONG GtkExpanderStyle
ENUM
  GTK_EXPANDER_COLLAPSED = 0
  GTK_EXPANDER_SEMI_COLLAPSED = 1
  GTK_EXPANDER_SEMI_EXPANDED = 2
  GTK_EXPANDER_EXPANDED = 3
END ENUM
TYPE AS _GtkFileChooser GtkFileChooser
TYPE AS LONG GtkFileChooserAction
ENUM
  GTK_FILE_CHOOSER_ACTION_OPEN = 0
  GTK_FILE_CHOOSER_ACTION_SAVE = 1
  GTK_FILE_CHOOSER_ACTION_SELECT_FOLDER = 2
  GTK_FILE_CHOOSER_ACTION_CREATE_FOLDER = 3
END ENUM
TYPE AS _GtkFileChooserButton GtkFileChooserButton
TYPE AS _GtkFileChooserButtonClass GtkFileChooserButtonClass
TYPE AS _GtkFileChooserButtonPrivate GtkFileChooserButtonPrivate
TYPE AS LONG GtkFileChooserConfirmation
ENUM
  GTK_FILE_CHOOSER_CONFIRMATION_CONFIRM = 0
  GTK_FILE_CHOOSER_CONFIRMATION_ACCEPT_FILENAME = 1
  GTK_FILE_CHOOSER_CONFIRMATION_SELECT_AGAIN = 2
END ENUM
TYPE AS _GtkFileChooserDialog GtkFileChooserDialog
TYPE AS _GtkFileChooserDialogClass GtkFileChooserDialogClass
TYPE AS _GtkFileChooserDialogPrivate GtkFileChooserDialogPrivate
TYPE AS LONG GtkFileChooserError
ENUM
  GTK_FILE_CHOOSER_ERROR_NONEXISTENT = 0
  GTK_FILE_CHOOSER_ERROR_BAD_FILENAME = 1
  GTK_FILE_CHOOSER_ERROR_ALREADY_EXISTS = 2
  GTK_FILE_CHOOSER_ERROR_INCOMPLETE_HOSTNAME = 3
END ENUM
TYPE AS _GtkFileChooserNative GtkFileChooserNative
TYPE AS _GtkFileChooserNativeClass GtkFileChooserNativeClass
TYPE AS _GtkFileChooserWidget GtkFileChooserWidget
TYPE AS _GtkFileChooserWidgetClass GtkFileChooserWidgetClass
TYPE AS _GtkFileChooserWidgetPrivate GtkFileChooserWidgetPrivate
TYPE AS _GtkFileFilter GtkFileFilter
TYPE AS LONG GtkFileFilterFlags
ENUM
  GTK_FILE_FILTER_FILENAME = 1
  GTK_FILE_FILTER_URI = 2
  GTK_FILE_FILTER_DISPLAY_NAME = 4
  GTK_FILE_FILTER_MIME_TYPE = 8
END ENUM
TYPE AS _GtkFileFilterInfo GtkFileFilterInfo
TYPE AS _GtkFixed GtkFixed
TYPE AS _GtkFixedChild GtkFixedChild
TYPE AS _GtkFixedClass GtkFixedClass
TYPE AS _GtkFixedPrivate GtkFixedPrivate
TYPE AS _GtkFlowBox GtkFlowBox
TYPE AS _GtkFlowBoxAccessible GtkFlowBoxAccessible
TYPE AS _GtkFlowBoxAccessibleClass GtkFlowBoxAccessibleClass
TYPE AS _GtkFlowBoxAccessiblePrivate GtkFlowBoxAccessiblePrivate
TYPE AS _GtkFlowBoxChild GtkFlowBoxChild
TYPE AS _GtkFlowBoxChildAccessible GtkFlowBoxChildAccessible
TYPE AS _GtkFlowBoxChildAccessibleClass GtkFlowBoxChildAccessibleClass
TYPE AS _GtkFlowBoxChildClass GtkFlowBoxChildClass
TYPE AS _GtkFlowBoxClass GtkFlowBoxClass
TYPE AS _GtkFontButton GtkFontButton
TYPE AS _GtkFontButtonClass GtkFontButtonClass
TYPE AS _GtkFontButtonPrivate GtkFontButtonPrivate
TYPE AS _GtkFontChooser GtkFontChooser
TYPE AS _GtkFontChooserDialog GtkFontChooserDialog
TYPE AS _GtkFontChooserDialogClass GtkFontChooserDialogClass
TYPE AS _GtkFontChooserDialogPrivate GtkFontChooserDialogPrivate
TYPE AS _GtkFontChooserIface GtkFontChooserIface
TYPE AS LONG GtkFontChooserLevel
ENUM
  GTK_FONT_CHOOSER_LEVEL_FAMILY = 0
  GTK_FONT_CHOOSER_LEVEL_STYLE = 1
  GTK_FONT_CHOOSER_LEVEL_SIZE = 2
  GTK_FONT_CHOOSER_LEVEL_VARIATIONS = 4
  GTK_FONT_CHOOSER_LEVEL_FEATURES = 8
END ENUM
TYPE AS _GtkFontChooserWidget GtkFontChooserWidget
TYPE AS _GtkFontChooserWidgetClass GtkFontChooserWidgetClass
TYPE AS _GtkFontChooserWidgetPrivate GtkFontChooserWidgetPrivate
TYPE AS _GtkFontSelection GtkFontSelection
TYPE AS _GtkFontSelectionClass GtkFontSelectionClass
TYPE AS _GtkFontSelectionDialog GtkFontSelectionDialog
TYPE AS _GtkFontSelectionDialogClass GtkFontSelectionDialogClass
TYPE AS _GtkFontSelectionDialogPrivate GtkFontSelectionDialogPrivate
TYPE AS _GtkFontSelectionPrivate GtkFontSelectionPrivate
TYPE AS _GtkFrame GtkFrame
TYPE AS _GtkFrameAccessible GtkFrameAccessible
TYPE AS _GtkFrameAccessibleClass GtkFrameAccessibleClass
TYPE AS _GtkFrameAccessiblePrivate GtkFrameAccessiblePrivate
TYPE AS _GtkFrameClass GtkFrameClass
TYPE AS _GtkFramePrivate GtkFramePrivate
TYPE AS _GtkGLArea GtkGLArea
TYPE AS _GtkGLAreaClass GtkGLAreaClass
TYPE AS _GtkGesture GtkGesture
TYPE AS _GtkGestureClass GtkGestureClass
TYPE AS _GtkGestureDrag GtkGestureDrag
TYPE AS _GtkGestureDragClass GtkGestureDragClass
TYPE AS _GtkGestureLongPress GtkGestureLongPress
TYPE AS _GtkGestureLongPressClass GtkGestureLongPressClass
TYPE AS _GtkGestureMultiPress GtkGestureMultiPress
TYPE AS _GtkGestureMultiPressClass GtkGestureMultiPressClass
TYPE AS _GtkGesturePan GtkGesturePan
TYPE AS _GtkGesturePanClass GtkGesturePanClass
TYPE AS _GtkGestureRotate GtkGestureRotate
TYPE AS _GtkGestureRotateClass GtkGestureRotateClass
TYPE AS _GtkGestureSingle GtkGestureSingle
TYPE AS _GtkGestureSingleClass GtkGestureSingleClass
TYPE AS _GtkGestureStylus GtkGestureStylus
TYPE AS _GtkGestureStylusClass GtkGestureStylusClass
TYPE AS _GtkGestureSwipe GtkGestureSwipe
TYPE AS _GtkGestureSwipeClass GtkGestureSwipeClass
TYPE AS _GtkGestureZoom GtkGestureZoom
TYPE AS _GtkGestureZoomClass GtkGestureZoomClass
TYPE AS _GtkGradient GtkGradient
TYPE AS _GtkGrid GtkGrid
TYPE AS _GtkGridClass GtkGridClass
TYPE AS _GtkGridPrivate GtkGridPrivate
TYPE AS _GtkHBox GtkHBox
TYPE AS _GtkHBoxClass GtkHBoxClass
TYPE AS _GtkHButtonBox GtkHButtonBox
TYPE AS _GtkHButtonBoxClass GtkHButtonBoxClass
TYPE AS _GtkHPaned GtkHPaned
TYPE AS _GtkHPanedClass GtkHPanedClass
TYPE AS _GtkHSV GtkHSV
TYPE AS _GtkHSVClass GtkHSVClass
TYPE AS _GtkHSVPrivate GtkHSVPrivate
TYPE AS _GtkHScale GtkHScale
TYPE AS _GtkHScaleClass GtkHScaleClass
TYPE AS _GtkHScrollbar GtkHScrollbar
TYPE AS _GtkHScrollbarClass GtkHScrollbarClass
TYPE AS _GtkHSeparator GtkHSeparator
TYPE AS _GtkHSeparatorClass GtkHSeparatorClass
TYPE AS _GtkHandleBox GtkHandleBox
TYPE AS _GtkHandleBoxClass GtkHandleBoxClass
TYPE AS _GtkHandleBoxPrivate GtkHandleBoxPrivate
TYPE AS _GtkHeaderBar GtkHeaderBar
TYPE AS _GtkHeaderBarAccessible GtkHeaderBarAccessible
TYPE AS _GtkHeaderBarAccessibleClass GtkHeaderBarAccessibleClass
TYPE AS _GtkHeaderBarAccessiblePrivate GtkHeaderBarAccessiblePrivate
TYPE AS _GtkHeaderBarClass GtkHeaderBarClass
TYPE AS _GtkHeaderBarPrivate GtkHeaderBarPrivate
TYPE AS _GtkIMContext GtkIMContext
TYPE AS _GtkIMContextClass GtkIMContextClass
TYPE AS _GtkIMContextInfo GtkIMContextInfo
TYPE AS _GtkIMContextSimple GtkIMContextSimple
TYPE AS _GtkIMContextSimpleClass GtkIMContextSimpleClass
TYPE AS _GtkIMContextSimplePrivate GtkIMContextSimplePrivate
TYPE AS _GtkIMMulticontext GtkIMMulticontext
TYPE AS _GtkIMMulticontextClass GtkIMMulticontextClass
TYPE AS _GtkIMMulticontextPrivate GtkIMMulticontextPrivate
TYPE AS LONG GtkIMPreeditStyle
ENUM
  GTK_IM_PREEDIT_NOTHING = 0
  GTK_IM_PREEDIT_CALLBACK = 1
  GTK_IM_PREEDIT_NONE = 2
END ENUM
TYPE AS LONG GtkIMStatusStyle
ENUM
  GTK_IM_STATUS_NOTHING = 0
  GTK_IM_STATUS_CALLBACK = 1
  GTK_IM_STATUS_NONE = 2
END ENUM
#DEFINE GTK_INPUT_ERROR -1
#DEFINE GTK_INTERFACE_AGE 14
TYPE AS _GtkIconFactory GtkIconFactory
TYPE AS _GtkIconFactoryClass GtkIconFactoryClass
TYPE AS _GtkIconFactoryPrivate GtkIconFactoryPrivate
TYPE AS _GtkIconInfo GtkIconInfo
TYPE AS _GtkIconInfoClass GtkIconInfoClass
TYPE AS LONG GtkIconLookupFlags
ENUM
  GTK_ICON_LOOKUP_NO_SVG = 1
  GTK_ICON_LOOKUP_FORCE_SVG = 2
  GTK_ICON_LOOKUP_USE_BUILTIN = 4
  GTK_ICON_LOOKUP_GENERIC_FALLBACK = 8
  GTK_ICON_LOOKUP_FORCE_SIZE = 16
  GTK_ICON_LOOKUP_FORCE_REGULAR = 32
  GTK_ICON_LOOKUP_FORCE_SYMBOLIC = 64
  GTK_ICON_LOOKUP_DIR_LTR = 128
  GTK_ICON_LOOKUP_DIR_RTL = 256
END ENUM
TYPE AS _GtkIconSet GtkIconSet
TYPE AS LONG GtkIconSize
ENUM
  GTK_ICON_SIZE_INVALID = 0
  GTK_ICON_SIZE_MENU = 1
  GTK_ICON_SIZE_SMALL_TOOLBAR = 2
  GTK_ICON_SIZE_LARGE_TOOLBAR = 3
  GTK_ICON_SIZE_BUTTON = 4
  GTK_ICON_SIZE_DND = 5
  GTK_ICON_SIZE_DIALOG = 6
END ENUM
TYPE AS _GtkIconSource GtkIconSource
TYPE AS _GtkIconTheme GtkIconTheme
TYPE AS _GtkIconThemeClass GtkIconThemeClass
TYPE AS LONG GtkIconThemeError
ENUM
  GTK_ICON_THEME_NOT_FOUND = 0
  GTK_ICON_THEME_FAILED = 1
END ENUM
TYPE AS _GtkIconThemePrivate GtkIconThemePrivate
TYPE AS _GtkIconView GtkIconView
TYPE AS _GtkIconViewAccessible GtkIconViewAccessible
TYPE AS _GtkIconViewAccessibleClass GtkIconViewAccessibleClass
TYPE AS _GtkIconViewAccessiblePrivate GtkIconViewAccessiblePrivate
TYPE AS _GtkIconViewClass GtkIconViewClass
TYPE AS LONG GtkIconViewDropPosition
ENUM
  GTK_ICON_VIEW_NO_DROP = 0
  GTK_ICON_VIEW_DROP_INTO = 1
  GTK_ICON_VIEW_DROP_LEFT = 2
  GTK_ICON_VIEW_DROP_RIGHT = 3
  GTK_ICON_VIEW_DROP_ABOVE = 4
  GTK_ICON_VIEW_DROP_BELOW = 5
END ENUM
TYPE AS _GtkIconViewPrivate GtkIconViewPrivate
TYPE AS _GtkImage GtkImage
TYPE AS _GtkImageAccessible GtkImageAccessible
TYPE AS _GtkImageAccessibleClass GtkImageAccessibleClass
TYPE AS _GtkImageAccessiblePrivate GtkImageAccessiblePrivate
TYPE AS _GtkImageCellAccessible GtkImageCellAccessible
TYPE AS _GtkImageCellAccessibleClass GtkImageCellAccessibleClass
TYPE AS _GtkImageCellAccessiblePrivate GtkImageCellAccessiblePrivate
TYPE AS _GtkImageClass GtkImageClass
TYPE AS _GtkImageMenuItem GtkImageMenuItem
TYPE AS _GtkImageMenuItemClass GtkImageMenuItemClass
TYPE AS _GtkImageMenuItemPrivate GtkImageMenuItemPrivate
TYPE AS _GtkImagePrivate GtkImagePrivate
TYPE AS LONG GtkImageType
ENUM
  GTK_IMAGE_EMPTY = 0
  GTK_IMAGE_PIXBUF = 1
  GTK_IMAGE_STOCK = 2
  GTK_IMAGE_ICON_SET = 3
  GTK_IMAGE_ANIMATION = 4
  GTK_IMAGE_ICON_NAME = 5
  GTK_IMAGE_GICON = 6
  GTK_IMAGE_SURFACE = 7
END ENUM
TYPE AS _GtkInfoBar GtkInfoBar
TYPE AS _GtkInfoBarClass GtkInfoBarClass
TYPE AS _GtkInfoBarPrivate GtkInfoBarPrivate
TYPE AS LONG GtkInputHints
ENUM
  GTK_INPUT_HINT_NONE = 0
  GTK_INPUT_HINT_SPELLCHECK = 1
  GTK_INPUT_HINT_NO_SPELLCHECK = 2
  GTK_INPUT_HINT_WORD_COMPLETION = 4
  GTK_INPUT_HINT_LOWERCASE = 8
  GTK_INPUT_HINT_UPPERCASE_CHARS = 16
  GTK_INPUT_HINT_UPPERCASE_WORDS = 32
  GTK_INPUT_HINT_UPPERCASE_SENTENCES = 64
  GTK_INPUT_HINT_INHIBIT_OSK = 128
  GTK_INPUT_HINT_VERTICAL_WRITING = 256
  GTK_INPUT_HINT_EMOJI = 512
  GTK_INPUT_HINT_NO_EMOJI = 1024
END ENUM
TYPE AS LONG GtkInputPurpose
ENUM
  GTK_INPUT_PURPOSE_FREE_FORM = 0
  GTK_INPUT_PURPOSE_ALPHA = 1
  GTK_INPUT_PURPOSE_DIGITS = 2
  GTK_INPUT_PURPOSE_NUMBER = 3
  GTK_INPUT_PURPOSE_PHONE = 4
  GTK_INPUT_PURPOSE_URL = 5
  GTK_INPUT_PURPOSE_EMAIL = 6
  GTK_INPUT_PURPOSE_NAME = 7
  GTK_INPUT_PURPOSE_PASSWORD = 8
  GTK_INPUT_PURPOSE_PIN = 9
  GTK_INPUT_PURPOSE_TERMINAL = 10
END ENUM
TYPE AS _GtkInvisible GtkInvisible
TYPE AS _GtkInvisibleClass GtkInvisibleClass
TYPE AS _GtkInvisiblePrivate GtkInvisiblePrivate
TYPE AS LONG GtkJunctionSides
ENUM
  GTK_JUNCTION_NONE = 0
  GTK_JUNCTION_CORNER_TOPLEFT = 1
  GTK_JUNCTION_CORNER_TOPRIGHT = 2
  GTK_JUNCTION_CORNER_BOTTOMLEFT = 4
  GTK_JUNCTION_CORNER_BOTTOMRIGHT = 8
  GTK_JUNCTION_TOP = 3
  GTK_JUNCTION_BOTTOM = 12
  GTK_JUNCTION_LEFT = 5
  GTK_JUNCTION_RIGHT = 10
END ENUM
TYPE AS LONG GtkJustification
ENUM
  GTK_JUSTIFY_LEFT = 0
  GTK_JUSTIFY_RIGHT = 1
  GTK_JUSTIFY_CENTER = 2
  GTK_JUSTIFY_FILL = 3
END ENUM
#DEFINE GTK_LEVEL_BAR_OFFSET_FULL @!"full"
#DEFINE GTK_LEVEL_BAR_OFFSET_HIGH @!"high"
#DEFINE GTK_LEVEL_BAR_OFFSET_LOW @!"low"
TYPE AS _GtkLabel GtkLabel
TYPE AS _GtkLabelAccessible GtkLabelAccessible
TYPE AS _GtkLabelAccessibleClass GtkLabelAccessibleClass
TYPE AS _GtkLabelAccessiblePrivate GtkLabelAccessiblePrivate
TYPE AS _GtkLabelClass GtkLabelClass
TYPE AS _GtkLabelPrivate GtkLabelPrivate
TYPE AS _GtkLabelSelectionInfo GtkLabelSelectionInfo
TYPE AS _GtkLayout GtkLayout
TYPE AS _GtkLayoutClass GtkLayoutClass
TYPE AS _GtkLayoutPrivate GtkLayoutPrivate
TYPE AS _GtkLevelBar GtkLevelBar
TYPE AS _GtkLevelBarAccessible GtkLevelBarAccessible
TYPE AS _GtkLevelBarAccessibleClass GtkLevelBarAccessibleClass
TYPE AS _GtkLevelBarAccessiblePrivate GtkLevelBarAccessiblePrivate
TYPE AS _GtkLevelBarClass GtkLevelBarClass
TYPE AS LONG GtkLevelBarMode
ENUM
  GTK_LEVEL_BAR_MODE_CONTINUOUS = 0
  GTK_LEVEL_BAR_MODE_DISCRETE = 1
END ENUM
TYPE AS _GtkLevelBarPrivate GtkLevelBarPrivate
TYPE AS LONG GtkLicense
ENUM
  GTK_LICENSE_UNKNOWN = 0
  GTK_LICENSE_CUSTOM = 1
  GTK_LICENSE_GPL_2_0 = 2
  GTK_LICENSE_GPL_3_0 = 3
  GTK_LICENSE_LGPL_2_1 = 4
  GTK_LICENSE_LGPL_3_0 = 5
  GTK_LICENSE_BSD = 6
  GTK_LICENSE_MIT_X11 = 7
  GTK_LICENSE_ARTISTIC = 8
  GTK_LICENSE_GPL_2_0_ONLY = 9
  GTK_LICENSE_GPL_3_0_ONLY = 10
  GTK_LICENSE_LGPL_2_1_ONLY = 11
  GTK_LICENSE_LGPL_3_0_ONLY = 12
  GTK_LICENSE_AGPL_3_0 = 13
  GTK_LICENSE_AGPL_3_0_ONLY = 14
END ENUM
TYPE AS _GtkLinkButton GtkLinkButton
TYPE AS _GtkLinkButtonAccessible GtkLinkButtonAccessible
TYPE AS _GtkLinkButtonAccessibleClass GtkLinkButtonAccessibleClass
TYPE AS _GtkLinkButtonAccessiblePrivate GtkLinkButtonAccessiblePrivate
TYPE AS _GtkLinkButtonClass GtkLinkButtonClass
TYPE AS _GtkLinkButtonPrivate GtkLinkButtonPrivate
TYPE AS _GtkListBox GtkListBox
TYPE AS _GtkListBoxAccessible GtkListBoxAccessible
TYPE AS _GtkListBoxAccessibleClass GtkListBoxAccessibleClass
TYPE AS _GtkListBoxAccessiblePrivate GtkListBoxAccessiblePrivate
TYPE AS _GtkListBoxClass GtkListBoxClass
TYPE AS _GtkListBoxRow GtkListBoxRow
TYPE AS _GtkListBoxRowAccessible GtkListBoxRowAccessible
TYPE AS _GtkListBoxRowAccessibleClass GtkListBoxRowAccessibleClass
TYPE AS _GtkListBoxRowClass GtkListBoxRowClass
TYPE AS _GtkListStore GtkListStore
TYPE AS _GtkListStoreClass GtkListStoreClass
TYPE AS _GtkListStorePrivate GtkListStorePrivate
TYPE AS _GtkLockButton GtkLockButton
TYPE AS _GtkLockButtonAccessible GtkLockButtonAccessible
TYPE AS _GtkLockButtonAccessibleClass GtkLockButtonAccessibleClass
TYPE AS _GtkLockButtonAccessiblePrivate GtkLockButtonAccessiblePrivate
TYPE AS _GtkLockButtonClass GtkLockButtonClass
TYPE AS _GtkLockButtonPrivate GtkLockButtonPrivate
#DEFINE GTK_MAJOR_VERSION 3
#DEFINE GTK_MAX_COMPOSE_LEN 7
#DEFINE GTK_MICRO_VERSION 18
#DEFINE GTK_MINOR_VERSION 24
TYPE AS _GtkMenu GtkMenu
TYPE AS _GtkMenuAccessible GtkMenuAccessible
TYPE AS _GtkMenuAccessibleClass GtkMenuAccessibleClass
TYPE AS _GtkMenuAccessiblePrivate GtkMenuAccessiblePrivate
TYPE AS _GtkMenuBar GtkMenuBar
TYPE AS _GtkMenuBarClass GtkMenuBarClass
TYPE AS _GtkMenuBarPrivate GtkMenuBarPrivate
TYPE AS _GtkMenuButton GtkMenuButton
TYPE AS _GtkMenuButtonAccessible GtkMenuButtonAccessible
TYPE AS _GtkMenuButtonAccessibleClass GtkMenuButtonAccessibleClass
TYPE AS _GtkMenuButtonAccessiblePrivate GtkMenuButtonAccessiblePrivate
TYPE AS _GtkMenuButtonClass GtkMenuButtonClass
TYPE AS _GtkMenuButtonPrivate GtkMenuButtonPrivate
TYPE AS _GtkMenuClass GtkMenuClass
TYPE AS LONG GtkMenuDirectionType
ENUM
  GTK_MENU_DIR_PARENT = 0
  GTK_MENU_DIR_CHILD = 1
  GTK_MENU_DIR_NEXT = 2
  GTK_MENU_DIR_PREV = 3
END ENUM
TYPE AS _GtkMenuItem GtkMenuItem
TYPE AS _GtkMenuItemAccessible GtkMenuItemAccessible
TYPE AS _GtkMenuItemAccessibleClass GtkMenuItemAccessibleClass
TYPE AS _GtkMenuItemAccessiblePrivate GtkMenuItemAccessiblePrivate
TYPE AS _GtkMenuItemClass GtkMenuItemClass
TYPE AS _GtkMenuItemPrivate GtkMenuItemPrivate
TYPE AS _GtkMenuPrivate GtkMenuPrivate
TYPE AS _GtkMenuShell GtkMenuShell
TYPE AS _GtkMenuShellAccessible GtkMenuShellAccessible
TYPE AS _GtkMenuShellAccessibleClass GtkMenuShellAccessibleClass
TYPE AS _GtkMenuShellAccessiblePrivate GtkMenuShellAccessiblePrivate
TYPE AS _GtkMenuShellClass GtkMenuShellClass
TYPE AS _GtkMenuShellPrivate GtkMenuShellPrivate
TYPE AS _GtkMenuToolButton GtkMenuToolButton
TYPE AS _GtkMenuToolButtonClass GtkMenuToolButtonClass
TYPE AS _GtkMenuToolButtonPrivate GtkMenuToolButtonPrivate
TYPE AS _GtkMessageDialog GtkMessageDialog
TYPE AS _GtkMessageDialogClass GtkMessageDialogClass
TYPE AS _GtkMessageDialogPrivate GtkMessageDialogPrivate
TYPE AS LONG GtkMessageType
ENUM
  GTK_MESSAGE_INFO = 0
  GTK_MESSAGE_WARNING = 1
  GTK_MESSAGE_QUESTION = 2
  GTK_MESSAGE_ERROR = 3
  GTK_MESSAGE_OTHER = 4
END ENUM
TYPE AS _GtkMisc GtkMisc
TYPE AS _GtkMiscClass GtkMiscClass
TYPE AS _GtkMiscPrivate GtkMiscPrivate
TYPE AS _GtkModelButton GtkModelButton
TYPE AS _GtkMountOperation GtkMountOperation
TYPE AS _GtkMountOperationClass GtkMountOperationClass
TYPE AS _GtkMountOperationPrivate GtkMountOperationPrivate
TYPE AS LONG GtkMovementStep
ENUM
  GTK_MOVEMENT_LOGICAL_POSITIONS = 0
  GTK_MOVEMENT_VISUAL_POSITIONS = 1
  GTK_MOVEMENT_WORDS = 2
  GTK_MOVEMENT_DISPLAY_LINES = 3
  GTK_MOVEMENT_DISPLAY_LINE_ENDS = 4
  GTK_MOVEMENT_PARAGRAPHS = 5
  GTK_MOVEMENT_PARAGRAPH_ENDS = 6
  GTK_MOVEMENT_PAGES = 7
  GTK_MOVEMENT_BUFFER_ENDS = 8
  GTK_MOVEMENT_HORIZONTAL_PAGES = 9
END ENUM
TYPE AS _GtkNativeDialog GtkNativeDialog
TYPE AS _GtkNativeDialogClass GtkNativeDialogClass
TYPE AS _GtkNotebook GtkNotebook
TYPE AS _GtkNotebookAccessible GtkNotebookAccessible
TYPE AS _GtkNotebookAccessibleClass GtkNotebookAccessibleClass
TYPE AS _GtkNotebookAccessiblePrivate GtkNotebookAccessiblePrivate
TYPE AS _GtkNotebookClass GtkNotebookClass
TYPE AS _GtkNotebookPageAccessible GtkNotebookPageAccessible
TYPE AS _GtkNotebookPageAccessibleClass GtkNotebookPageAccessibleClass
TYPE AS _GtkNotebookPageAccessiblePrivate GtkNotebookPageAccessiblePrivate
TYPE AS _GtkNotebookPrivate GtkNotebookPrivate
TYPE AS LONG GtkNotebookTab
ENUM
  GTK_NOTEBOOK_TAB_FIRST = 0
  GTK_NOTEBOOK_TAB_LAST = 1
END ENUM
TYPE AS LONG GtkNumberUpLayout
ENUM
  GTK_NUMBER_UP_LAYOUT_LEFT_TO_RIGHT_TOP_TO_BOTTOM = 0
  GTK_NUMBER_UP_LAYOUT_LEFT_TO_RIGHT_BOTTOM_TO_TOP = 1
  GTK_NUMBER_UP_LAYOUT_RIGHT_TO_LEFT_TOP_TO_BOTTOM = 2
  GTK_NUMBER_UP_LAYOUT_RIGHT_TO_LEFT_BOTTOM_TO_TOP = 3
  GTK_NUMBER_UP_LAYOUT_TOP_TO_BOTTOM_LEFT_TO_RIGHT = 4
  GTK_NUMBER_UP_LAYOUT_TOP_TO_BOTTOM_RIGHT_TO_LEFT = 5
  GTK_NUMBER_UP_LAYOUT_BOTTOM_TO_TOP_LEFT_TO_RIGHT = 6
  GTK_NUMBER_UP_LAYOUT_BOTTOM_TO_TOP_RIGHT_TO_LEFT = 7
END ENUM
TYPE AS _GtkNumerableIcon GtkNumerableIcon
TYPE AS _GtkNumerableIconClass GtkNumerableIconClass
TYPE AS _GtkNumerableIconPrivate GtkNumerableIconPrivate
TYPE AS _GtkOffscreenWindow GtkOffscreenWindow
TYPE AS _GtkOffscreenWindowClass GtkOffscreenWindowClass
TYPE AS _GtkOrientable GtkOrientable
TYPE AS _GtkOrientableIface GtkOrientableIface
TYPE AS LONG GtkOrientation
ENUM
  GTK_ORIENTATION_HORIZONTAL = 0
  GTK_ORIENTATION_VERTICAL = 1
END ENUM
TYPE AS _GtkOverlay GtkOverlay
TYPE AS _GtkOverlayClass GtkOverlayClass
TYPE AS _GtkOverlayPrivate GtkOverlayPrivate
#DEFINE GTK_PAPER_NAME_A3 @!"iso_a3"
#DEFINE GTK_PAPER_NAME_A4 @!"iso_a4"
#DEFINE GTK_PAPER_NAME_A5 @!"iso_a5"
#DEFINE GTK_PAPER_NAME_B5 @!"iso_b5"
#DEFINE GTK_PAPER_NAME_EXECUTIVE @!"na_executive"
#DEFINE GTK_PAPER_NAME_LEGAL @!"na_legal"
#DEFINE GTK_PAPER_NAME_LETTER @!"na_letter"
#DEFINE GTK_PATH_PRIO_MASK 15
#DEFINE GTK_PRINT_SETTINGS_COLLATE @!"collate"
#DEFINE GTK_PRINT_SETTINGS_DEFAULT_SOURCE @!"default-source"
#DEFINE GTK_PRINT_SETTINGS_DITHER @!"dither"
#DEFINE GTK_PRINT_SETTINGS_DUPLEX @!"duplex"
#DEFINE GTK_PRINT_SETTINGS_FINISHINGS @!"finishings"
#DEFINE GTK_PRINT_SETTINGS_MEDIA_TYPE @!"media-type"
#DEFINE GTK_PRINT_SETTINGS_NUMBER_UP @!"number-up"
#DEFINE GTK_PRINT_SETTINGS_NUMBER_UP_LAYOUT @!"number-up-layout"
#DEFINE GTK_PRINT_SETTINGS_N_COPIES @!"n-copies"
#DEFINE GTK_PRINT_SETTINGS_ORIENTATION @!"orientation"
#DEFINE GTK_PRINT_SETTINGS_OUTPUT_BASENAME @!"output-basename"
#DEFINE GTK_PRINT_SETTINGS_OUTPUT_BIN @!"output-bin"
#DEFINE GTK_PRINT_SETTINGS_OUTPUT_DIR @!"output-dir"
#DEFINE GTK_PRINT_SETTINGS_OUTPUT_FILE_FORMAT @!"output-file-format"
#DEFINE GTK_PRINT_SETTINGS_OUTPUT_URI @!"output-uri"
#DEFINE GTK_PRINT_SETTINGS_PAGE_RANGES @!"page-ranges"
#DEFINE GTK_PRINT_SETTINGS_PAGE_SET @!"page-set"
#DEFINE GTK_PRINT_SETTINGS_PAPER_FORMAT @!"paper-format"
#DEFINE GTK_PRINT_SETTINGS_PAPER_HEIGHT @!"paper-height"
#DEFINE GTK_PRINT_SETTINGS_PAPER_WIDTH @!"paper-width"
#DEFINE GTK_PRINT_SETTINGS_PRINTER @!"printer"
#DEFINE GTK_PRINT_SETTINGS_PRINTER_LPI @!"printer-lpi"
#DEFINE GTK_PRINT_SETTINGS_PRINT_PAGES @!"print-pages"
#DEFINE GTK_PRINT_SETTINGS_QUALITY @!"quality"
#DEFINE GTK_PRINT_SETTINGS_RESOLUTION @!"resolution"
#DEFINE GTK_PRINT_SETTINGS_RESOLUTION_X @!"resolution-x"
#DEFINE GTK_PRINT_SETTINGS_RESOLUTION_Y @!"resolution-y"
#DEFINE GTK_PRINT_SETTINGS_REVERSE @!"reverse"
#DEFINE GTK_PRINT_SETTINGS_SCALE @!"scale"
#DEFINE GTK_PRINT_SETTINGS_USE_COLOR @!"use-color"
#DEFINE GTK_PRINT_SETTINGS_WIN32_DRIVER_EXTRA @!"win32-driver-extra"
#DEFINE GTK_PRINT_SETTINGS_WIN32_DRIVER_VERSION @!"win32-driver-version"
#DEFINE GTK_PRIORITY_RESIZE 110
TYPE AS LONG GtkPackDirection
ENUM
  GTK_PACK_DIRECTION_LTR = 0
  GTK_PACK_DIRECTION_RTL = 1
  GTK_PACK_DIRECTION_TTB = 2
  GTK_PACK_DIRECTION_BTT = 3
END ENUM
TYPE AS LONG GtkPackType
ENUM
  GTK_PACK_START = 0
  GTK_PACK_END = 1
END ENUM
TYPE AS _GtkPadActionEntry GtkPadActionEntry
TYPE AS LONG GtkPadActionType
ENUM
  GTK_PAD_ACTION_BUTTON = 0
  GTK_PAD_ACTION_RING = 1
  GTK_PAD_ACTION_STRIP = 2
END ENUM
TYPE AS _GtkPadController GtkPadController
TYPE AS _GtkPadControllerClass GtkPadControllerClass
TYPE AS LONG GtkPageOrientation
ENUM
  GTK_PAGE_ORIENTATION_PORTRAIT = 0
  GTK_PAGE_ORIENTATION_LANDSCAPE = 1
  GTK_PAGE_ORIENTATION_REVERSE_PORTRAIT = 2
  GTK_PAGE_ORIENTATION_REVERSE_LANDSCAPE = 3
END ENUM
TYPE AS _GtkPageRange GtkPageRange
TYPE AS LONG GtkPageSet
ENUM
  GTK_PAGE_SET_ALL = 0
  GTK_PAGE_SET_EVEN = 1
  GTK_PAGE_SET_ODD = 2
END ENUM
TYPE AS _GtkPageSetup GtkPageSetup
TYPE AS LONG GtkPanDirection
ENUM
  GTK_PAN_DIRECTION_LEFT = 0
  GTK_PAN_DIRECTION_RIGHT = 1
  GTK_PAN_DIRECTION_UP = 2
  GTK_PAN_DIRECTION_DOWN = 3
END ENUM
TYPE AS _GtkPaned GtkPaned
TYPE AS _GtkPanedAccessible GtkPanedAccessible
TYPE AS _GtkPanedAccessibleClass GtkPanedAccessibleClass
TYPE AS _GtkPanedAccessiblePrivate GtkPanedAccessiblePrivate
TYPE AS _GtkPanedClass GtkPanedClass
TYPE AS _GtkPanedPrivate GtkPanedPrivate
TYPE AS _GtkPaperSize GtkPaperSize
TYPE AS LONG GtkPathPriorityType
ENUM
  GTK_PATH_PRIO_LOWEST = 0
  GTK_PATH_PRIO_GTK = 4
  GTK_PATH_PRIO_APPLICATION = 8
  GTK_PATH_PRIO_THEME = 10
  GTK_PATH_PRIO_RC = 12
  GTK_PATH_PRIO_HIGHEST = 15
END ENUM
TYPE AS LONG GtkPathType
ENUM
  GTK_PATH_WIDGET = 0
  GTK_PATH_WIDGET_CLASS = 1
  GTK_PATH_CLASS = 2
END ENUM
TYPE AS LONG GtkPlacesOpenFlags
ENUM
  GTK_PLACES_OPEN_NORMAL = 1
  GTK_PLACES_OPEN_NEW_TAB = 2
  GTK_PLACES_OPEN_NEW_WINDOW = 4
END ENUM
TYPE AS _GtkPlacesSidebar GtkPlacesSidebar
TYPE AS _GtkPlacesSidebarClass GtkPlacesSidebarClass
TYPE AS _GtkPlug GtkPlug
TYPE AS _GtkPlugClass GtkPlugClass
TYPE AS _GtkPlugPrivate GtkPlugPrivate
TYPE AS LONG GtkPolicyType
ENUM
  GTK_POLICY_ALWAYS = 0
  GTK_POLICY_AUTOMATIC = 1
  GTK_POLICY_NEVER = 2
  GTK_POLICY_EXTERNAL = 3
END ENUM
TYPE AS _GtkPopover GtkPopover
TYPE AS _GtkPopoverAccessible GtkPopoverAccessible
TYPE AS _GtkPopoverAccessibleClass GtkPopoverAccessibleClass
TYPE AS _GtkPopoverClass GtkPopoverClass
TYPE AS LONG GtkPopoverConstraint
ENUM
  GTK_POPOVER_CONSTRAINT_NONE = 0
  GTK_POPOVER_CONSTRAINT_WINDOW = 1
END ENUM
TYPE AS _GtkPopoverMenu GtkPopoverMenu
TYPE AS _GtkPopoverMenuClass GtkPopoverMenuClass
TYPE AS _GtkPopoverPrivate GtkPopoverPrivate
TYPE AS LONG GtkPositionType
ENUM
  GTK_POS_LEFT = 0
  GTK_POS_RIGHT = 1
  GTK_POS_TOP = 2
  GTK_POS_BOTTOM = 3
END ENUM
TYPE AS _GtkPrintContext GtkPrintContext
TYPE AS LONG GtkPrintDuplex
ENUM
  GTK_PRINT_DUPLEX_SIMPLEX = 0
  GTK_PRINT_DUPLEX_HORIZONTAL = 1
  GTK_PRINT_DUPLEX_VERTICAL = 2
END ENUM
TYPE AS LONG GtkPrintError
ENUM
  GTK_PRINT_ERROR_GENERAL = 0
  GTK_PRINT_ERROR_INTERNAL_ERROR = 1
  GTK_PRINT_ERROR_NOMEM = 2
  GTK_PRINT_ERROR_INVALID_FILE = 3
END ENUM
TYPE AS _GtkPrintOperation GtkPrintOperation
TYPE AS LONG GtkPrintOperationAction
ENUM
  GTK_PRINT_OPERATION_ACTION_PRINT_DIALOG = 0
  GTK_PRINT_OPERATION_ACTION_PRINT = 1
  GTK_PRINT_OPERATION_ACTION_PREVIEW = 2
  GTK_PRINT_OPERATION_ACTION_EXPORT = 3
END ENUM
TYPE AS _GtkPrintOperationClass GtkPrintOperationClass
TYPE AS _GtkPrintOperationPreview GtkPrintOperationPreview
TYPE AS _GtkPrintOperationPreviewIface GtkPrintOperationPreviewIface
TYPE AS _GtkPrintOperationPrivate GtkPrintOperationPrivate
TYPE AS LONG GtkPrintOperationResult
ENUM
  GTK_PRINT_OPERATION_RESULT_ERROR = 0
  GTK_PRINT_OPERATION_RESULT_APPLY = 1
  GTK_PRINT_OPERATION_RESULT_CANCEL = 2
  GTK_PRINT_OPERATION_RESULT_IN_PROGRESS = 3
END ENUM
TYPE AS LONG GtkPrintPages
ENUM
  GTK_PRINT_PAGES_ALL = 0
  GTK_PRINT_PAGES_CURRENT = 1
  GTK_PRINT_PAGES_RANGES = 2
  GTK_PRINT_PAGES_SELECTION = 3
END ENUM
TYPE AS LONG GtkPrintQuality
ENUM
  GTK_PRINT_QUALITY_LOW = 0
  GTK_PRINT_QUALITY_NORMAL = 1
  GTK_PRINT_QUALITY_HIGH = 2
  GTK_PRINT_QUALITY_DRAFT = 3
END ENUM
TYPE AS _GtkPrintSettings GtkPrintSettings
TYPE AS LONG GtkPrintStatus
ENUM
  GTK_PRINT_STATUS_INITIAL = 0
  GTK_PRINT_STATUS_PREPARING = 1
  GTK_PRINT_STATUS_GENERATING_DATA = 2
  GTK_PRINT_STATUS_SENDING_DATA = 3
  GTK_PRINT_STATUS_PENDING = 4
  GTK_PRINT_STATUS_PENDING_ISSUE = 5
  GTK_PRINT_STATUS_PRINTING = 6
  GTK_PRINT_STATUS_FINISHED = 7
  GTK_PRINT_STATUS_FINISHED_ABORTED = 8
END ENUM
TYPE AS _GtkProgressBar GtkProgressBar
TYPE AS _GtkProgressBarAccessible GtkProgressBarAccessible
TYPE AS _GtkProgressBarAccessibleClass GtkProgressBarAccessibleClass
TYPE AS _GtkProgressBarAccessiblePrivate GtkProgressBarAccessiblePrivate
TYPE AS _GtkProgressBarClass GtkProgressBarClass
TYPE AS _GtkProgressBarPrivate GtkProgressBarPrivate
TYPE AS LONG GtkPropagationPhase
ENUM
  GTK_PHASE_NONE = 0
  GTK_PHASE_CAPTURE = 1
  GTK_PHASE_BUBBLE = 2
  GTK_PHASE_TARGET = 3
END ENUM
TYPE AS _GtkRadioAction GtkRadioAction
TYPE AS _GtkRadioActionClass GtkRadioActionClass
TYPE AS _GtkRadioActionEntry GtkRadioActionEntry
TYPE AS _GtkRadioActionPrivate GtkRadioActionPrivate
TYPE AS _GtkRadioButton GtkRadioButton
TYPE AS _GtkRadioButtonAccessible GtkRadioButtonAccessible
TYPE AS _GtkRadioButtonAccessibleClass GtkRadioButtonAccessibleClass
TYPE AS _GtkRadioButtonAccessiblePrivate GtkRadioButtonAccessiblePrivate
TYPE AS _GtkRadioButtonClass GtkRadioButtonClass
TYPE AS _GtkRadioButtonPrivate GtkRadioButtonPrivate
TYPE AS _GtkRadioMenuItem GtkRadioMenuItem
TYPE AS _GtkRadioMenuItemAccessible GtkRadioMenuItemAccessible
TYPE AS _GtkRadioMenuItemAccessibleClass GtkRadioMenuItemAccessibleClass
TYPE AS _GtkRadioMenuItemAccessiblePrivate GtkRadioMenuItemAccessiblePrivate
TYPE AS _GtkRadioMenuItemClass GtkRadioMenuItemClass
TYPE AS _GtkRadioMenuItemPrivate GtkRadioMenuItemPrivate
TYPE AS _GtkRadioToolButton GtkRadioToolButton
TYPE AS _GtkRadioToolButtonClass GtkRadioToolButtonClass
TYPE AS _GtkRange GtkRange
TYPE AS _GtkRangeAccessible GtkRangeAccessible
TYPE AS _GtkRangeAccessibleClass GtkRangeAccessibleClass
TYPE AS _GtkRangeAccessiblePrivate GtkRangeAccessiblePrivate
TYPE AS _GtkRangeClass GtkRangeClass
TYPE AS _GtkRangePrivate GtkRangePrivate
TYPE AS _GtkRcContext GtkRcContext
TYPE AS LONG GtkRcFlags
ENUM
  GTK_RC_FG = 1
  GTK_RC_BG = 2
  GTK_RC_TEXT = 4
  GTK_RC_BASE = 8
END ENUM
TYPE AS _GtkRcProperty GtkRcProperty
TYPE AS _GtkRcStyle GtkRcStyle
TYPE AS _GtkRcStyleClass GtkRcStyleClass
TYPE AS LONG GtkRcTokenType
ENUM
  GTK_RC_TOKEN_INVALID = 270
  GTK_RC_TOKEN_INCLUDE = 271
  GTK_RC_TOKEN_NORMAL = 272
  GTK_RC_TOKEN_ACTIVE = 273
  GTK_RC_TOKEN_PRELIGHT = 274
  GTK_RC_TOKEN_SELECTED = 275
  GTK_RC_TOKEN_INSENSITIVE = 276
  GTK_RC_TOKEN_FG = 277
  GTK_RC_TOKEN_BG = 278
  GTK_RC_TOKEN_TEXT = 279
  GTK_RC_TOKEN_BASE = 280
  GTK_RC_TOKEN_XTHICKNESS = 281
  GTK_RC_TOKEN_YTHICKNESS = 282
  GTK_RC_TOKEN_FONT = 283
  GTK_RC_TOKEN_FONTSET = 284
  GTK_RC_TOKEN_FONT_NAME = 285
  GTK_RC_TOKEN_BG_PIXMAP = 286
  GTK_RC_TOKEN_PIXMAP_PATH = 287
  GTK_RC_TOKEN_STYLE = 288
  GTK_RC_TOKEN_BINDING = 289
  GTK_RC_TOKEN_BIND = 290
  GTK_RC_TOKEN_WIDGET = 291
  GTK_RC_TOKEN_WIDGET_CLASS = 292
  GTK_RC_TOKEN_CLASS = 293
  GTK_RC_TOKEN_LOWEST = 294
  GTK_RC_TOKEN_GTK = 295
  GTK_RC_TOKEN_APPLICATION = 296
  GTK_RC_TOKEN_THEME = 297
  GTK_RC_TOKEN_RC = 298
  GTK_RC_TOKEN_HIGHEST = 299
  GTK_RC_TOKEN_ENGINE = 300
  GTK_RC_TOKEN_MODULE_PATH = 301
  GTK_RC_TOKEN_IM_MODULE_PATH = 302
  GTK_RC_TOKEN_IM_MODULE_FILE = 303
  GTK_RC_TOKEN_STOCK = 304
  GTK_RC_TOKEN_LTR = 305
  GTK_RC_TOKEN_RTL = 306
  GTK_RC_TOKEN_COLOR = 307
  GTK_RC_TOKEN_UNBIND = 308
  GTK_RC_TOKEN_LAST = 309
END ENUM
TYPE AS _GtkRecentAction GtkRecentAction
TYPE AS _GtkRecentActionClass GtkRecentActionClass
TYPE AS _GtkRecentActionPrivate GtkRecentActionPrivate
TYPE AS _GtkRecentChooser GtkRecentChooser
TYPE AS _GtkRecentChooserDialog GtkRecentChooserDialog
TYPE AS _GtkRecentChooserDialogClass GtkRecentChooserDialogClass
TYPE AS _GtkRecentChooserDialogPrivate GtkRecentChooserDialogPrivate
TYPE AS LONG GtkRecentChooserError
ENUM
  GTK_RECENT_CHOOSER_ERROR_NOT_FOUND = 0
  GTK_RECENT_CHOOSER_ERROR_INVALID_URI = 1
END ENUM
TYPE AS _GtkRecentChooserIface GtkRecentChooserIface
TYPE AS _GtkRecentChooserMenu GtkRecentChooserMenu
TYPE AS _GtkRecentChooserMenuClass GtkRecentChooserMenuClass
TYPE AS _GtkRecentChooserMenuPrivate GtkRecentChooserMenuPrivate
TYPE AS _GtkRecentChooserWidget GtkRecentChooserWidget
TYPE AS _GtkRecentChooserWidgetClass GtkRecentChooserWidgetClass
TYPE AS _GtkRecentChooserWidgetPrivate GtkRecentChooserWidgetPrivate
TYPE AS _GtkRecentData GtkRecentData
TYPE AS _GtkRecentFilter GtkRecentFilter
TYPE AS LONG GtkRecentFilterFlags
ENUM
  GTK_RECENT_FILTER_URI = 1
  GTK_RECENT_FILTER_DISPLAY_NAME = 2
  GTK_RECENT_FILTER_MIME_TYPE = 4
  GTK_RECENT_FILTER_APPLICATION = 8
  GTK_RECENT_FILTER_GROUP = 16
  GTK_RECENT_FILTER_AGE = 32
END ENUM
TYPE AS _GtkRecentFilterInfo GtkRecentFilterInfo
TYPE AS _GtkRecentInfo GtkRecentInfo
TYPE AS _GtkRecentManager GtkRecentManager
TYPE AS _GtkRecentManagerClass GtkRecentManagerClass
TYPE AS LONG GtkRecentManagerError
ENUM
  GTK_RECENT_MANAGER_ERROR_NOT_FOUND = 0
  GTK_RECENT_MANAGER_ERROR_INVALID_URI = 1
  GTK_RECENT_MANAGER_ERROR_INVALID_ENCODING = 2
  GTK_RECENT_MANAGER_ERROR_NOT_REGISTERED = 3
  GTK_RECENT_MANAGER_ERROR_READ = 4
  GTK_RECENT_MANAGER_ERROR_WRITE = 5
  GTK_RECENT_MANAGER_ERROR_UNKNOWN = 6
END ENUM
TYPE AS _GtkRecentManagerPrivate GtkRecentManagerPrivate
TYPE AS LONG GtkRecentSortType
ENUM
  GTK_RECENT_SORT_NONE = 0
  GTK_RECENT_SORT_MRU = 1
  GTK_RECENT_SORT_LRU = 2
  GTK_RECENT_SORT_CUSTOM = 3
END ENUM
TYPE AS LONG GtkRegionFlags
ENUM
  GTK_REGION_EVEN = 1
  GTK_REGION_ODD = 2
  GTK_REGION_FIRST = 4
  GTK_REGION_LAST = 8
  GTK_REGION_ONLY = 16
  GTK_REGION_SORTED = 32
END ENUM
TYPE AS LONG GtkReliefStyle
ENUM
  GTK_RELIEF_NORMAL = 0
  GTK_RELIEF_HALF = 1
  GTK_RELIEF_NONE = 2
END ENUM
TYPE AS _GtkRendererCellAccessible GtkRendererCellAccessible
TYPE AS _GtkRendererCellAccessibleClass GtkRendererCellAccessibleClass
TYPE AS _GtkRendererCellAccessiblePrivate GtkRendererCellAccessiblePrivate
TYPE AS _GtkRequestedSize GtkRequestedSize
TYPE AS _GtkRequisition GtkRequisition
TYPE AS LONG GtkResizeMode
ENUM
  GTK_RESIZE_PARENT = 0
  GTK_RESIZE_QUEUE = 1
  GTK_RESIZE_IMMEDIATE = 2
END ENUM
TYPE AS LONG GtkResponseType
ENUM
  GTK_RESPONSE_NONE = -1
  GTK_RESPONSE_REJECT = -2
  GTK_RESPONSE_ACCEPT = -3
  GTK_RESPONSE_DELETE_EVENT = -4
  GTK_RESPONSE_OK = -5
  GTK_RESPONSE_CANCEL = -6
  GTK_RESPONSE_CLOSE = -7
  GTK_RESPONSE_YES = -8
  GTK_RESPONSE_NO = -9
  GTK_RESPONSE_APPLY = -10
  GTK_RESPONSE_HELP = -11
END ENUM
TYPE AS _GtkRevealer GtkRevealer
TYPE AS _GtkRevealerClass GtkRevealerClass
TYPE AS LONG GtkRevealerTransitionType
ENUM
  GTK_REVEALER_TRANSITION_TYPE_NONE = 0
  GTK_REVEALER_TRANSITION_TYPE_CROSSFADE = 1
  GTK_REVEALER_TRANSITION_TYPE_SLIDE_RIGHT = 2
  GTK_REVEALER_TRANSITION_TYPE_SLIDE_LEFT = 3
  GTK_REVEALER_TRANSITION_TYPE_SLIDE_UP = 4
  GTK_REVEALER_TRANSITION_TYPE_SLIDE_DOWN = 5
END ENUM
#DEFINE GTK_STOCK_ABOUT @!"gtk-about"
#DEFINE GTK_STOCK_ADD @!"gtk-add"
#DEFINE GTK_STOCK_APPLY @!"gtk-apply"
#DEFINE GTK_STOCK_BOLD @!"gtk-bold"
#DEFINE GTK_STOCK_CANCEL @!"gtk-cancel"
#DEFINE GTK_STOCK_CAPS_LOCK_WARNING @!"gtk-caps-lock-warning"
#DEFINE GTK_STOCK_CDROM @!"gtk-cdrom"
#DEFINE GTK_STOCK_CLEAR @!"gtk-clear"
#DEFINE GTK_STOCK_CLOSE @!"gtk-close"
#DEFINE GTK_STOCK_COLOR_PICKER @!"gtk-color-picker"
#DEFINE GTK_STOCK_CONNECT @!"gtk-connect"
#DEFINE GTK_STOCK_CONVERT @!"gtk-convert"
#DEFINE GTK_STOCK_COPY @!"gtk-copy"
#DEFINE GTK_STOCK_CUT @!"gtk-cut"
#DEFINE GTK_STOCK_DELETE @!"gtk-delete"
#DEFINE GTK_STOCK_DIALOG_AUTHENTICATION @!"gtk-dialog-authentication"
#DEFINE GTK_STOCK_DIALOG_ERROR @!"gtk-dialog-error"
#DEFINE GTK_STOCK_DIALOG_INFO @!"gtk-dialog-info"
#DEFINE GTK_STOCK_DIALOG_QUESTION @!"gtk-dialog-question"
#DEFINE GTK_STOCK_DIALOG_WARNING @!"gtk-dialog-warning"
#DEFINE GTK_STOCK_DIRECTORY @!"gtk-directory"
#DEFINE GTK_STOCK_DISCARD @!"gtk-discard"
#DEFINE GTK_STOCK_DISCONNECT @!"gtk-disconnect"
#DEFINE GTK_STOCK_DND @!"gtk-dnd"
#DEFINE GTK_STOCK_DND_MULTIPLE @!"gtk-dnd-multiple"
#DEFINE GTK_STOCK_EDIT @!"gtk-edit"
#DEFINE GTK_STOCK_EXECUTE @!"gtk-execute"
#DEFINE GTK_STOCK_FILE @!"gtk-file"
#DEFINE GTK_STOCK_FIND @!"gtk-find"
#DEFINE GTK_STOCK_FIND_AND_REPLACE @!"gtk-find-and-replace"
#DEFINE GTK_STOCK_FLOPPY @!"gtk-floppy"
#DEFINE GTK_STOCK_FULLSCREEN @!"gtk-fullscreen"
#DEFINE GTK_STOCK_GOTO_BOTTOM @!"gtk-goto-bottom"
#DEFINE GTK_STOCK_GOTO_FIRST @!"gtk-goto-first"
#DEFINE GTK_STOCK_GOTO_LAST @!"gtk-goto-last"
#DEFINE GTK_STOCK_GOTO_TOP @!"gtk-goto-top"
#DEFINE GTK_STOCK_GO_BACK @!"gtk-go-back"
#DEFINE GTK_STOCK_GO_DOWN @!"gtk-go-down"
#DEFINE GTK_STOCK_GO_FORWARD @!"gtk-go-forward"
#DEFINE GTK_STOCK_GO_UP @!"gtk-go-up"
#DEFINE GTK_STOCK_HARDDISK @!"gtk-harddisk"
#DEFINE GTK_STOCK_HELP @!"gtk-help"
#DEFINE GTK_STOCK_HOME @!"gtk-home"
#DEFINE GTK_STOCK_INDENT @!"gtk-indent"
#DEFINE GTK_STOCK_INDEX @!"gtk-index"
#DEFINE GTK_STOCK_INFO @!"gtk-info"
#DEFINE GTK_STOCK_ITALIC @!"gtk-italic"
#DEFINE GTK_STOCK_JUMP_TO @!"gtk-jump-to"
#DEFINE GTK_STOCK_JUSTIFY_CENTER @!"gtk-justify-center"
#DEFINE GTK_STOCK_JUSTIFY_FILL @!"gtk-justify-fill"
#DEFINE GTK_STOCK_JUSTIFY_LEFT @!"gtk-justify-left"
#DEFINE GTK_STOCK_JUSTIFY_RIGHT @!"gtk-justify-right"
#DEFINE GTK_STOCK_LEAVE_FULLSCREEN @!"gtk-leave-fullscreen"
#DEFINE GTK_STOCK_MEDIA_FORWARD @!"gtk-media-forward"
#DEFINE GTK_STOCK_MEDIA_NEXT @!"gtk-media-next"
#DEFINE GTK_STOCK_MEDIA_PAUSE @!"gtk-media-pause"
#DEFINE GTK_STOCK_MEDIA_PLAY @!"gtk-media-play"
#DEFINE GTK_STOCK_MEDIA_PREVIOUS @!"gtk-media-previous"
#DEFINE GTK_STOCK_MEDIA_RECORD @!"gtk-media-record"
#DEFINE GTK_STOCK_MEDIA_REWIND @!"gtk-media-rewind"
#DEFINE GTK_STOCK_MEDIA_STOP @!"gtk-media-stop"
#DEFINE GTK_STOCK_MISSING_IMAGE @!"gtk-missing-image"
#DEFINE GTK_STOCK_NETWORK @!"gtk-network"
#DEFINE GTK_STOCK_NEW @!"gtk-new"
#DEFINE GTK_STOCK_NO @!"gtk-no"
#DEFINE GTK_STOCK_OK @!"gtk-ok"
#DEFINE GTK_STOCK_OPEN @!"gtk-open"
#DEFINE GTK_STOCK_ORIENTATION_LANDSCAPE @!"gtk-orientation-landscape"
#DEFINE GTK_STOCK_ORIENTATION_PORTRAIT @!"gtk-orientation-portrait"
#DEFINE GTK_STOCK_ORIENTATION_REVERSE_LANDSCAPE @!"gtk-orientation-reverse-landscape"
#DEFINE GTK_STOCK_ORIENTATION_REVERSE_PORTRAIT @!"gtk-orientation-reverse-portrait"
#DEFINE GTK_STOCK_PAGE_SETUP @!"gtk-page-setup"
#DEFINE GTK_STOCK_PASTE @!"gtk-paste"
#DEFINE GTK_STOCK_PREFERENCES @!"gtk-preferences"
#DEFINE GTK_STOCK_PRINT @!"gtk-print"
#DEFINE GTK_STOCK_PRINT_ERROR @!"gtk-print-error"
#DEFINE GTK_STOCK_PRINT_PAUSED @!"gtk-print-paused"
#DEFINE GTK_STOCK_PRINT_PREVIEW @!"gtk-print-preview"
#DEFINE GTK_STOCK_PRINT_REPORT @!"gtk-print-report"
#DEFINE GTK_STOCK_PRINT_WARNING @!"gtk-print-warning"
#DEFINE GTK_STOCK_PROPERTIES @!"gtk-properties"
#DEFINE GTK_STOCK_QUIT @!"gtk-quit"
#DEFINE GTK_STOCK_REDO @!"gtk-redo"
#DEFINE GTK_STOCK_REFRESH @!"gtk-refresh"
#DEFINE GTK_STOCK_REMOVE @!"gtk-remove"
#DEFINE GTK_STOCK_REVERT_TO_SAVED @!"gtk-revert-to-saved"
#DEFINE GTK_STOCK_SAVE @!"gtk-save"
#DEFINE GTK_STOCK_SAVE_AS @!"gtk-save-as"
#DEFINE GTK_STOCK_SELECT_ALL @!"gtk-select-all"
#DEFINE GTK_STOCK_SELECT_COLOR @!"gtk-select-color"
#DEFINE GTK_STOCK_SELECT_FONT @!"gtk-select-font"
#DEFINE GTK_STOCK_SORT_ASCENDING @!"gtk-sort-ascending"
#DEFINE GTK_STOCK_SORT_DESCENDING @!"gtk-sort-descending"
#DEFINE GTK_STOCK_SPELL_CHECK @!"gtk-spell-check"
#DEFINE GTK_STOCK_STOP @!"gtk-stop"
#DEFINE GTK_STOCK_STRIKETHROUGH @!"gtk-strikethrough"
#DEFINE GTK_STOCK_UNDELETE @!"gtk-undelete"
#DEFINE GTK_STOCK_UNDERLINE @!"gtk-underline"
#DEFINE GTK_STOCK_UNDO @!"gtk-undo"
#DEFINE GTK_STOCK_UNINDENT @!"gtk-unindent"
#DEFINE GTK_STOCK_YES @!"gtk-yes"
#DEFINE GTK_STOCK_ZOOM_100 @!"gtk-zoom-100"
#DEFINE GTK_STOCK_ZOOM_FIT @!"gtk-zoom-fit"
#DEFINE GTK_STOCK_ZOOM_IN @!"gtk-zoom-in"
#DEFINE GTK_STOCK_ZOOM_OUT @!"gtk-zoom-out"
#DEFINE GTK_STYLE_CLASS_ACCELERATOR @!"accelerator"
#DEFINE GTK_STYLE_CLASS_ARROW @!"arrow"
#DEFINE GTK_STYLE_CLASS_BACKGROUND @!"background"
#DEFINE GTK_STYLE_CLASS_BOTTOM @!"bottom"
#DEFINE GTK_STYLE_CLASS_BUTTON @!"button"
#DEFINE GTK_STYLE_CLASS_CALENDAR @!"calendar"
#DEFINE GTK_STYLE_CLASS_CELL @!"cell"
#DEFINE GTK_STYLE_CLASS_CHECK @!"check"
#DEFINE GTK_STYLE_CLASS_COMBOBOX_ENTRY @!"combobox-entry"
#DEFINE GTK_STYLE_CLASS_CONTEXT_MENU @!"context-menu"
#DEFINE GTK_STYLE_CLASS_CSD @!"csd"
#DEFINE GTK_STYLE_CLASS_CURSOR_HANDLE @!"cursor-handle"
#DEFINE GTK_STYLE_CLASS_DEFAULT @!"default"
#DEFINE GTK_STYLE_CLASS_DESTRUCTIVE_ACTION @!"destructive-action"
#DEFINE GTK_STYLE_CLASS_DIM_LABEL @!"dim-label"
#DEFINE GTK_STYLE_CLASS_DND @!"dnd"
#DEFINE GTK_STYLE_CLASS_DOCK @!"dock"
#DEFINE GTK_STYLE_CLASS_ENTRY @!"entry"
#DEFINE GTK_STYLE_CLASS_ERROR @!"error"
#DEFINE GTK_STYLE_CLASS_EXPANDER @!"expander"
#DEFINE GTK_STYLE_CLASS_FLAT @!"flat"
#DEFINE GTK_STYLE_CLASS_FRAME @!"frame"
#DEFINE GTK_STYLE_CLASS_GRIP @!"grip"
#DEFINE GTK_STYLE_CLASS_HEADER @!"header"
#DEFINE GTK_STYLE_CLASS_HIGHLIGHT @!"highlight"
#DEFINE GTK_STYLE_CLASS_HORIZONTAL @!"horizontal"
#DEFINE GTK_STYLE_CLASS_IMAGE @!"image"
#DEFINE GTK_STYLE_CLASS_INFO @!"info"
#DEFINE GTK_STYLE_CLASS_INLINE_TOOLBAR @!"inline-toolbar"
#DEFINE GTK_STYLE_CLASS_INSERTION_CURSOR @!"insertion-cursor"
#DEFINE GTK_STYLE_CLASS_LABEL @!"label"
#DEFINE GTK_STYLE_CLASS_LEFT @!"left"
#DEFINE GTK_STYLE_CLASS_LEVEL_BAR @!"level-bar"
#DEFINE GTK_STYLE_CLASS_LINKED @!"linked"
#DEFINE GTK_STYLE_CLASS_LIST @!"list"
#DEFINE GTK_STYLE_CLASS_LIST_ROW @!"list-row"
#DEFINE GTK_STYLE_CLASS_MARK @!"mark"
#DEFINE GTK_STYLE_CLASS_MENU @!"menu"
#DEFINE GTK_STYLE_CLASS_MENUBAR @!"menubar"
#DEFINE GTK_STYLE_CLASS_MENUITEM @!"menuitem"
#DEFINE GTK_STYLE_CLASS_MESSAGE_DIALOG @!"message-dialog"
#DEFINE GTK_STYLE_CLASS_MONOSPACE @!"monospace"
#DEFINE GTK_STYLE_CLASS_NEEDS_ATTENTION @!"needs-attention"
#DEFINE GTK_STYLE_CLASS_NOTEBOOK @!"notebook"
#DEFINE GTK_STYLE_CLASS_OSD @!"osd"
#DEFINE GTK_STYLE_CLASS_OVERSHOOT @!"overshoot"
#DEFINE GTK_STYLE_CLASS_PANE_SEPARATOR @!"pane-separator"
#DEFINE GTK_STYLE_CLASS_PAPER @!"paper"
#DEFINE GTK_STYLE_CLASS_POPOVER @!"popover"
#DEFINE GTK_STYLE_CLASS_POPUP @!"popup"
#DEFINE GTK_STYLE_CLASS_PRIMARY_TOOLBAR @!"primary-toolbar"
#DEFINE GTK_STYLE_CLASS_PROGRESSBAR @!"progressbar"
#DEFINE GTK_STYLE_CLASS_PULSE @!"pulse"
#DEFINE GTK_STYLE_CLASS_QUESTION @!"question"
#DEFINE GTK_STYLE_CLASS_RADIO @!"radio"
#DEFINE GTK_STYLE_CLASS_RAISED @!"raised"
#DEFINE GTK_STYLE_CLASS_READ_ONLY @!"read-only"
#DEFINE GTK_STYLE_CLASS_RIGHT @!"right"
#DEFINE GTK_STYLE_CLASS_RUBBERBAND @!"rubberband"
#DEFINE GTK_STYLE_CLASS_SCALE @!"scale"
#DEFINE GTK_STYLE_CLASS_SCALE_HAS_MARKS_ABOVE @!"scale-has-marks-above"
#DEFINE GTK_STYLE_CLASS_SCALE_HAS_MARKS_BELOW @!"scale-has-marks-below"
#DEFINE GTK_STYLE_CLASS_SCROLLBAR @!"scrollbar"
#DEFINE GTK_STYLE_CLASS_SCROLLBARS_JUNCTION @!"scrollbars-junction"
#DEFINE GTK_STYLE_CLASS_SEPARATOR @!"separator"
#DEFINE GTK_STYLE_CLASS_SIDEBAR @!"sidebar"
#DEFINE GTK_STYLE_CLASS_SLIDER @!"slider"
#DEFINE GTK_STYLE_CLASS_SPINBUTTON @!"spinbutton"
#DEFINE GTK_STYLE_CLASS_SPINNER @!"spinner"
#DEFINE GTK_STYLE_CLASS_STATUSBAR @!"statusbar"
#DEFINE GTK_STYLE_CLASS_SUBTITLE @!"subtitle"
#DEFINE GTK_STYLE_CLASS_SUGGESTED_ACTION @!"suggested-action"
#DEFINE GTK_STYLE_CLASS_TITLE @!"title"
#DEFINE GTK_STYLE_CLASS_TITLEBAR @!"titlebar"
#DEFINE GTK_STYLE_CLASS_TOOLBAR @!"toolbar"
#DEFINE GTK_STYLE_CLASS_TOOLTIP @!"tooltip"
#DEFINE GTK_STYLE_CLASS_TOP @!"top"
#DEFINE GTK_STYLE_CLASS_TOUCH_SELECTION @!"touch-selection"
#DEFINE GTK_STYLE_CLASS_TROUGH @!"trough"
#DEFINE GTK_STYLE_CLASS_UNDERSHOOT @!"undershoot"
#DEFINE GTK_STYLE_CLASS_VERTICAL @!"vertical"
#DEFINE GTK_STYLE_CLASS_VIEW @!"view"
#DEFINE GTK_STYLE_CLASS_WARNING @!"warning"
#DEFINE GTK_STYLE_CLASS_WIDE @!"wide"
#DEFINE GTK_STYLE_PROPERTY_BACKGROUND_COLOR @!"background-color"
#DEFINE GTK_STYLE_PROPERTY_BACKGROUND_IMAGE @!"background-image"
#DEFINE GTK_STYLE_PROPERTY_BORDER_COLOR @!"border-color"
#DEFINE GTK_STYLE_PROPERTY_BORDER_RADIUS @!"border-radius"
#DEFINE GTK_STYLE_PROPERTY_BORDER_STYLE @!"border-style"
#DEFINE GTK_STYLE_PROPERTY_BORDER_WIDTH @!"border-width"
#DEFINE GTK_STYLE_PROPERTY_COLOR @!"color"
#DEFINE GTK_STYLE_PROPERTY_FONT @!"font"
#DEFINE GTK_STYLE_PROPERTY_MARGIN @!"margin"
#DEFINE GTK_STYLE_PROPERTY_PADDING @!"padding"
#DEFINE GTK_STYLE_PROVIDER_PRIORITY_APPLICATION 600
#DEFINE GTK_STYLE_PROVIDER_PRIORITY_FALLBACK 1
#DEFINE GTK_STYLE_PROVIDER_PRIORITY_SETTINGS 400
#DEFINE GTK_STYLE_PROVIDER_PRIORITY_THEME 200
#DEFINE GTK_STYLE_PROVIDER_PRIORITY_USER 800
#DEFINE GTK_STYLE_REGION_COLUMN @!"column"
#DEFINE GTK_STYLE_REGION_COLUMN_HEADER @!"column-header"
#DEFINE GTK_STYLE_REGION_ROW @!"row"
#DEFINE GTK_STYLE_REGION_TAB @!"tab"
TYPE AS _GtkScale GtkScale
TYPE AS _GtkScaleAccessible GtkScaleAccessible
TYPE AS _GtkScaleAccessibleClass GtkScaleAccessibleClass
TYPE AS _GtkScaleAccessiblePrivate GtkScaleAccessiblePrivate
TYPE AS _GtkScaleButton GtkScaleButton
TYPE AS _GtkScaleButtonAccessible GtkScaleButtonAccessible
TYPE AS _GtkScaleButtonAccessibleClass GtkScaleButtonAccessibleClass
TYPE AS _GtkScaleButtonAccessiblePrivate GtkScaleButtonAccessiblePrivate
TYPE AS _GtkScaleButtonClass GtkScaleButtonClass
TYPE AS _GtkScaleButtonPrivate GtkScaleButtonPrivate
TYPE AS _GtkScaleClass GtkScaleClass
TYPE AS _GtkScalePrivate GtkScalePrivate
TYPE AS LONG GtkScrollStep
ENUM
  GTK_SCROLL_STEPS = 0
  GTK_SCROLL_PAGES = 1
  GTK_SCROLL_ENDS = 2
  GTK_SCROLL_HORIZONTAL_STEPS = 3
  GTK_SCROLL_HORIZONTAL_PAGES = 4
  GTK_SCROLL_HORIZONTAL_ENDS = 5
END ENUM
TYPE AS LONG GtkScrollType
ENUM
  GTK_SCROLL_NONE = 0
  GTK_SCROLL_JUMP = 1
  GTK_SCROLL_STEP_BACKWARD = 2
  GTK_SCROLL_STEP_FORWARD = 3
  GTK_SCROLL_PAGE_BACKWARD = 4
  GTK_SCROLL_PAGE_FORWARD = 5
  GTK_SCROLL_STEP_UP = 6
  GTK_SCROLL_STEP_DOWN = 7
  GTK_SCROLL_PAGE_UP = 8
  GTK_SCROLL_PAGE_DOWN = 9
  GTK_SCROLL_STEP_LEFT = 10
  GTK_SCROLL_STEP_RIGHT = 11
  GTK_SCROLL_PAGE_LEFT = 12
  GTK_SCROLL_PAGE_RIGHT = 13
  GTK_SCROLL_START = 14
  GTK_SCROLL_END = 15
END ENUM
TYPE AS _GtkScrollable GtkScrollable
TYPE AS _GtkScrollableInterface GtkScrollableInterface
TYPE AS LONG GtkScrollablePolicy
ENUM
  GTK_SCROLL_MINIMUM = 0
  GTK_SCROLL_NATURAL = 1
END ENUM
TYPE AS _GtkScrollbar GtkScrollbar
TYPE AS _GtkScrollbarClass GtkScrollbarClass
TYPE AS _GtkScrolledWindow GtkScrolledWindow
TYPE AS _GtkScrolledWindowAccessible GtkScrolledWindowAccessible
TYPE AS _GtkScrolledWindowAccessibleClass GtkScrolledWindowAccessibleClass
TYPE AS _GtkScrolledWindowAccessiblePrivate GtkScrolledWindowAccessiblePrivate
TYPE AS _GtkScrolledWindowClass GtkScrolledWindowClass
TYPE AS _GtkScrolledWindowPrivate GtkScrolledWindowPrivate
TYPE AS _GtkSearchBar GtkSearchBar
TYPE AS _GtkSearchBarClass GtkSearchBarClass
TYPE AS _GtkSearchEntry GtkSearchEntry
TYPE AS _GtkSearchEntryClass GtkSearchEntryClass
TYPE AS _GtkSelectionData GtkSelectionData
TYPE AS LONG GtkSelectionMode
ENUM
  GTK_SELECTION_NONE = 0
  GTK_SELECTION_SINGLE = 1
  GTK_SELECTION_BROWSE = 2
  GTK_SELECTION_MULTIPLE = 3
END ENUM
TYPE AS LONG GtkSensitivityType
ENUM
  GTK_SENSITIVITY_AUTO = 0
  GTK_SENSITIVITY_ON = 1
  GTK_SENSITIVITY_OFF = 2
END ENUM
TYPE AS _GtkSeparator GtkSeparator
TYPE AS _GtkSeparatorClass GtkSeparatorClass
TYPE AS _GtkSeparatorMenuItem GtkSeparatorMenuItem
TYPE AS _GtkSeparatorMenuItemClass GtkSeparatorMenuItemClass
TYPE AS _GtkSeparatorPrivate GtkSeparatorPrivate
TYPE AS _GtkSeparatorToolItem GtkSeparatorToolItem
TYPE AS _GtkSeparatorToolItemClass GtkSeparatorToolItemClass
TYPE AS _GtkSeparatorToolItemPrivate GtkSeparatorToolItemPrivate
TYPE AS _GtkSettings GtkSettings
TYPE AS _GtkSettingsClass GtkSettingsClass
TYPE AS _GtkSettingsPrivate GtkSettingsPrivate
TYPE AS _GtkSettingsValue GtkSettingsValue
TYPE AS LONG GtkShadowType
ENUM
  GTK_SHADOW_NONE = 0
  GTK_SHADOW_IN = 1
  GTK_SHADOW_OUT = 2
  GTK_SHADOW_ETCHED_IN = 3
  GTK_SHADOW_ETCHED_OUT = 4
END ENUM
TYPE AS _GtkShortcutLabel GtkShortcutLabel
TYPE AS _GtkShortcutLabelClass GtkShortcutLabelClass
TYPE AS LONG GtkShortcutType
ENUM
  GTK_SHORTCUT_ACCELERATOR = 0
  GTK_SHORTCUT_GESTURE_PINCH = 1
  GTK_SHORTCUT_GESTURE_STRETCH = 2
  GTK_SHORTCUT_GESTURE_ROTATE_CLOCKWISE = 3
  GTK_SHORTCUT_GESTURE_ROTATE_COUNTERCLOCKWISE = 4
  GTK_SHORTCUT_GESTURE_TWO_FINGER_SWIPE_LEFT = 5
  GTK_SHORTCUT_GESTURE_TWO_FINGER_SWIPE_RIGHT = 6
  GTK_SHORTCUT_GESTURE = 7
END ENUM
TYPE AS _GtkShortcutsGroup GtkShortcutsGroup
TYPE AS _GtkShortcutsGroupClass GtkShortcutsGroupClass
TYPE AS _GtkShortcutsSection GtkShortcutsSection
TYPE AS _GtkShortcutsSectionClass GtkShortcutsSectionClass
TYPE AS _GtkShortcutsShortcut GtkShortcutsShortcut
TYPE AS _GtkShortcutsShortcutClass GtkShortcutsShortcutClass
TYPE AS _GtkShortcutsWindow GtkShortcutsWindow
TYPE AS _GtkShortcutsWindowClass GtkShortcutsWindowClass
TYPE AS _GtkSizeGroup GtkSizeGroup
TYPE AS _GtkSizeGroupClass GtkSizeGroupClass
TYPE AS LONG GtkSizeGroupMode
ENUM
  GTK_SIZE_GROUP_NONE = 0
  GTK_SIZE_GROUP_HORIZONTAL = 1
  GTK_SIZE_GROUP_VERTICAL = 2
  GTK_SIZE_GROUP_BOTH = 3
END ENUM
TYPE AS _GtkSizeGroupPrivate GtkSizeGroupPrivate
TYPE AS LONG GtkSizeRequestMode
ENUM
  GTK_SIZE_REQUEST_HEIGHT_FOR_WIDTH = 0
  GTK_SIZE_REQUEST_WIDTH_FOR_HEIGHT = 1
  GTK_SIZE_REQUEST_CONSTANT_SIZE = 2
END ENUM
TYPE AS _GtkSocket GtkSocket
TYPE AS _GtkSocketClass GtkSocketClass
TYPE AS _GtkSocketPrivate GtkSocketPrivate
TYPE AS LONG GtkSortType
ENUM
  GTK_SORT_ASCENDING = 0
  GTK_SORT_DESCENDING = 1
END ENUM
TYPE AS _GtkSpinButton GtkSpinButton
TYPE AS _GtkSpinButtonAccessible GtkSpinButtonAccessible
TYPE AS _GtkSpinButtonAccessibleClass GtkSpinButtonAccessibleClass
TYPE AS _GtkSpinButtonAccessiblePrivate GtkSpinButtonAccessiblePrivate
TYPE AS _GtkSpinButtonClass GtkSpinButtonClass
TYPE AS _GtkSpinButtonPrivate GtkSpinButtonPrivate
TYPE AS LONG GtkSpinButtonUpdatePolicy
ENUM
  GTK_UPDATE_ALWAYS = 0
  GTK_UPDATE_IF_VALID = 1
END ENUM
TYPE AS LONG GtkSpinType
ENUM
  GTK_SPIN_STEP_FORWARD = 0
  GTK_SPIN_STEP_BACKWARD = 1
  GTK_SPIN_PAGE_FORWARD = 2
  GTK_SPIN_PAGE_BACKWARD = 3
  GTK_SPIN_HOME = 4
  GTK_SPIN_END = 5
  GTK_SPIN_USER_DEFINED = 6
END ENUM
TYPE AS _GtkSpinner GtkSpinner
TYPE AS _GtkSpinnerAccessible GtkSpinnerAccessible
TYPE AS _GtkSpinnerAccessibleClass GtkSpinnerAccessibleClass
TYPE AS _GtkSpinnerAccessiblePrivate GtkSpinnerAccessiblePrivate
TYPE AS _GtkSpinnerClass GtkSpinnerClass
TYPE AS _GtkSpinnerPrivate GtkSpinnerPrivate
TYPE AS _GtkStack GtkStack
TYPE AS _GtkStackAccessible GtkStackAccessible
TYPE AS _GtkStackAccessibleClass GtkStackAccessibleClass
TYPE AS _GtkStackClass GtkStackClass
TYPE AS _GtkStackSidebar GtkStackSidebar
TYPE AS _GtkStackSidebarClass GtkStackSidebarClass
TYPE AS _GtkStackSidebarPrivate GtkStackSidebarPrivate
TYPE AS _GtkStackSwitcher GtkStackSwitcher
TYPE AS _GtkStackSwitcherClass GtkStackSwitcherClass
TYPE AS LONG GtkStackTransitionType
ENUM
  GTK_STACK_TRANSITION_TYPE_NONE = 0
  GTK_STACK_TRANSITION_TYPE_CROSSFADE = 1
  GTK_STACK_TRANSITION_TYPE_SLIDE_RIGHT = 2
  GTK_STACK_TRANSITION_TYPE_SLIDE_LEFT = 3
  GTK_STACK_TRANSITION_TYPE_SLIDE_UP = 4
  GTK_STACK_TRANSITION_TYPE_SLIDE_DOWN = 5
  GTK_STACK_TRANSITION_TYPE_SLIDE_LEFT_RIGHT = 6
  GTK_STACK_TRANSITION_TYPE_SLIDE_UP_DOWN = 7
  GTK_STACK_TRANSITION_TYPE_OVER_UP = 8
  GTK_STACK_TRANSITION_TYPE_OVER_DOWN = 9
  GTK_STACK_TRANSITION_TYPE_OVER_LEFT = 10
  GTK_STACK_TRANSITION_TYPE_OVER_RIGHT = 11
  GTK_STACK_TRANSITION_TYPE_UNDER_UP = 12
  GTK_STACK_TRANSITION_TYPE_UNDER_DOWN = 13
  GTK_STACK_TRANSITION_TYPE_UNDER_LEFT = 14
  GTK_STACK_TRANSITION_TYPE_UNDER_RIGHT = 15
  GTK_STACK_TRANSITION_TYPE_OVER_UP_DOWN = 16
  GTK_STACK_TRANSITION_TYPE_OVER_DOWN_UP = 17
  GTK_STACK_TRANSITION_TYPE_OVER_LEFT_RIGHT = 18
  GTK_STACK_TRANSITION_TYPE_OVER_RIGHT_LEFT = 19
END ENUM
TYPE AS LONG GtkStateFlags
ENUM
  GTK_STATE_FLAG_NORMAL = 0
  GTK_STATE_FLAG_ACTIVE = 1
  GTK_STATE_FLAG_PRELIGHT = 2
  GTK_STATE_FLAG_SELECTED = 4
  GTK_STATE_FLAG_INSENSITIVE = 8
  GTK_STATE_FLAG_INCONSISTENT = 16
  GTK_STATE_FLAG_FOCUSED = 32
  GTK_STATE_FLAG_BACKDROP = 64
  GTK_STATE_FLAG_DIR_LTR = 128
  GTK_STATE_FLAG_DIR_RTL = 256
  GTK_STATE_FLAG_LINK = 512
  GTK_STATE_FLAG_VISITED = 1024
  GTK_STATE_FLAG_CHECKED = 2048
  GTK_STATE_FLAG_DROP_ACTIVE = 4096
END ENUM
TYPE AS LONG GtkStateType
ENUM
  GTK_STATE_NORMAL = 0
  GTK_STATE_ACTIVE = 1
  GTK_STATE_PRELIGHT = 2
  GTK_STATE_SELECTED = 3
  GTK_STATE_INSENSITIVE = 4
  GTK_STATE_INCONSISTENT = 5
  GTK_STATE_FOCUSED = 6
END ENUM
TYPE AS _GtkStatusIcon GtkStatusIcon
TYPE AS _GtkStatusIconClass GtkStatusIconClass
TYPE AS _GtkStatusIconPrivate GtkStatusIconPrivate
TYPE AS _GtkStatusbar GtkStatusbar
TYPE AS _GtkStatusbarAccessible GtkStatusbarAccessible
TYPE AS _GtkStatusbarAccessibleClass GtkStatusbarAccessibleClass
TYPE AS _GtkStatusbarAccessiblePrivate GtkStatusbarAccessiblePrivate
TYPE AS _GtkStatusbarClass GtkStatusbarClass
TYPE AS _GtkStatusbarPrivate GtkStatusbarPrivate
TYPE AS _GtkStockItem GtkStockItem
TYPE AS _GtkStyle GtkStyle
TYPE AS _GtkStyleClass GtkStyleClass
TYPE AS _GtkStyleContext GtkStyleContext
TYPE AS _GtkStyleContextClass GtkStyleContextClass
TYPE AS LONG GtkStyleContextPrintFlags
ENUM
  GTK_STYLE_CONTEXT_PRINT_NONE = 0
  GTK_STYLE_CONTEXT_PRINT_RECURSE = 1
  GTK_STYLE_CONTEXT_PRINT_SHOW_STYLE = 2
END ENUM
TYPE AS _GtkStyleContextPrivate GtkStyleContextPrivate
TYPE AS _GtkStyleProperties GtkStyleProperties
TYPE AS _GtkStylePropertiesClass GtkStylePropertiesClass
TYPE AS _GtkStylePropertiesPrivate GtkStylePropertiesPrivate
TYPE AS _GtkStyleProvider GtkStyleProvider
TYPE AS _GtkStyleProviderIface GtkStyleProviderIface
TYPE AS _GtkSwitch GtkSwitch
TYPE AS _GtkSwitchAccessible GtkSwitchAccessible
TYPE AS _GtkSwitchAccessibleClass GtkSwitchAccessibleClass
TYPE AS _GtkSwitchAccessiblePrivate GtkSwitchAccessiblePrivate
TYPE AS _GtkSwitchClass GtkSwitchClass
TYPE AS _GtkSwitchPrivate GtkSwitchPrivate
TYPE AS _GtkSymbolicColor GtkSymbolicColor
#DEFINE GTK_TEXT_VIEW_PRIORITY_VALIDATE 125
#DEFINE GTK_TREE_SORTABLE_DEFAULT_SORT_COLUMN_ID -1
#DEFINE GTK_TREE_SORTABLE_UNSORTED_SORT_COLUMN_ID -2
TYPE AS _GtkTable GtkTable
TYPE AS _GtkTableChild GtkTableChild
TYPE AS _GtkTableClass GtkTableClass
TYPE AS _GtkTablePrivate GtkTablePrivate
TYPE AS _GtkTableRowCol GtkTableRowCol
TYPE AS _GtkTargetEntry GtkTargetEntry
TYPE AS LONG GtkTargetFlags
ENUM
  GTK_TARGET_SAME_APP = 1
  GTK_TARGET_SAME_WIDGET = 2
  GTK_TARGET_OTHER_APP = 4
  GTK_TARGET_OTHER_WIDGET = 8
END ENUM
TYPE AS _GtkTargetList GtkTargetList
TYPE AS _GtkTargetPair GtkTargetPair
TYPE AS _GtkTearoffMenuItem GtkTearoffMenuItem
TYPE AS _GtkTearoffMenuItemClass GtkTearoffMenuItemClass
TYPE AS _GtkTearoffMenuItemPrivate GtkTearoffMenuItemPrivate
TYPE AS _GtkTextAppearance GtkTextAppearance
TYPE AS _GtkTextAttributes GtkTextAttributes
TYPE AS _GtkTextBTree GtkTextBTree
TYPE AS _GtkTextBuffer GtkTextBuffer
TYPE AS _GtkTextBufferClass GtkTextBufferClass
TYPE AS _GtkTextBufferPrivate GtkTextBufferPrivate
TYPE AS LONG GtkTextBufferTargetInfo
ENUM
  GTK_TEXT_BUFFER_TARGET_INFO_BUFFER_CONTENTS = -1
  GTK_TEXT_BUFFER_TARGET_INFO_RICH_TEXT = -2
  GTK_TEXT_BUFFER_TARGET_INFO_TEXT = -3
END ENUM
TYPE AS _GtkTextCellAccessible GtkTextCellAccessible
TYPE AS _GtkTextCellAccessibleClass GtkTextCellAccessibleClass
TYPE AS _GtkTextCellAccessiblePrivate GtkTextCellAccessiblePrivate
TYPE AS _GtkTextChildAnchor GtkTextChildAnchor
TYPE AS _GtkTextChildAnchorClass GtkTextChildAnchorClass
TYPE AS LONG GtkTextDirection
ENUM
  GTK_TEXT_DIR_NONE = 0
  GTK_TEXT_DIR_LTR = 1
  GTK_TEXT_DIR_RTL = 2
END ENUM
TYPE AS LONG GtkTextExtendSelection
ENUM
  GTK_TEXT_EXTEND_SELECTION_WORD = 0
  GTK_TEXT_EXTEND_SELECTION_LINE = 1
END ENUM
TYPE AS _GtkTextIter GtkTextIter
TYPE AS _GtkTextMark GtkTextMark
TYPE AS _GtkTextMarkClass GtkTextMarkClass
TYPE AS LONG GtkTextSearchFlags
ENUM
  GTK_TEXT_SEARCH_VISIBLE_ONLY = 1
  GTK_TEXT_SEARCH_TEXT_ONLY = 2
  GTK_TEXT_SEARCH_CASE_INSENSITIVE = 4
END ENUM
TYPE AS _GtkTextTag GtkTextTag
TYPE AS _GtkTextTagClass GtkTextTagClass
TYPE AS _GtkTextTagPrivate GtkTextTagPrivate
TYPE AS _GtkTextTagTable GtkTextTagTable
TYPE AS _GtkTextTagTableClass GtkTextTagTableClass
TYPE AS _GtkTextTagTablePrivate GtkTextTagTablePrivate
TYPE AS _GtkTextView GtkTextView
TYPE AS _GtkTextViewAccessible GtkTextViewAccessible
TYPE AS _GtkTextViewAccessibleClass GtkTextViewAccessibleClass
TYPE AS _GtkTextViewAccessiblePrivate GtkTextViewAccessiblePrivate
TYPE AS _GtkTextViewClass GtkTextViewClass
TYPE AS LONG GtkTextViewLayer
ENUM
  GTK_TEXT_VIEW_LAYER_BELOW = 0
  GTK_TEXT_VIEW_LAYER_ABOVE = 1
  GTK_TEXT_VIEW_LAYER_BELOW_TEXT = 2
  GTK_TEXT_VIEW_LAYER_ABOVE_TEXT = 3
END ENUM
TYPE AS _GtkTextViewPrivate GtkTextViewPrivate
TYPE AS LONG GtkTextWindowType
ENUM
  GTK_TEXT_WINDOW_PRIVATE = 0
  GTK_TEXT_WINDOW_WIDGET = 1
  GTK_TEXT_WINDOW_TEXT = 2
  GTK_TEXT_WINDOW_LEFT = 3
  GTK_TEXT_WINDOW_RIGHT = 4
  GTK_TEXT_WINDOW_TOP = 5
  GTK_TEXT_WINDOW_BOTTOM = 6
END ENUM
TYPE AS _GtkThemeEngine GtkThemeEngine
TYPE AS _GtkThemingEngine GtkThemingEngine
TYPE AS _GtkThemingEngineClass GtkThemingEngineClass
TYPE AS _GtkThemingEnginePrivate GtkThemingEnginePrivate
TYPE AS _GtkToggleAction GtkToggleAction
TYPE AS _GtkToggleActionClass GtkToggleActionClass
TYPE AS _GtkToggleActionEntry GtkToggleActionEntry
TYPE AS _GtkToggleActionPrivate GtkToggleActionPrivate
TYPE AS _GtkToggleButton GtkToggleButton
TYPE AS _GtkToggleButtonAccessible GtkToggleButtonAccessible
TYPE AS _GtkToggleButtonAccessibleClass GtkToggleButtonAccessibleClass
TYPE AS _GtkToggleButtonAccessiblePrivate GtkToggleButtonAccessiblePrivate
TYPE AS _GtkToggleButtonClass GtkToggleButtonClass
TYPE AS _GtkToggleButtonPrivate GtkToggleButtonPrivate
TYPE AS _GtkToggleToolButton GtkToggleToolButton
TYPE AS _GtkToggleToolButtonClass GtkToggleToolButtonClass
TYPE AS _GtkToggleToolButtonPrivate GtkToggleToolButtonPrivate
TYPE AS _GtkToolButton GtkToolButton
TYPE AS _GtkToolButtonClass GtkToolButtonClass
TYPE AS _GtkToolButtonPrivate GtkToolButtonPrivate
TYPE AS _GtkToolItem GtkToolItem
TYPE AS _GtkToolItemClass GtkToolItemClass
TYPE AS _GtkToolItemGroup GtkToolItemGroup
TYPE AS _GtkToolItemGroupClass GtkToolItemGroupClass
TYPE AS _GtkToolItemGroupPrivate GtkToolItemGroupPrivate
TYPE AS _GtkToolItemPrivate GtkToolItemPrivate
TYPE AS _GtkToolPalette GtkToolPalette
TYPE AS _GtkToolPaletteClass GtkToolPaletteClass
TYPE AS LONG GtkToolPaletteDragTargets
ENUM
  GTK_TOOL_PALETTE_DRAG_ITEMS = 1
  GTK_TOOL_PALETTE_DRAG_GROUPS = 2
END ENUM
TYPE AS _GtkToolPalettePrivate GtkToolPalettePrivate
TYPE AS _GtkToolShell GtkToolShell
TYPE AS _GtkToolShellIface GtkToolShellIface
TYPE AS _GtkToolbar GtkToolbar
TYPE AS _GtkToolbarClass GtkToolbarClass
TYPE AS _GtkToolbarPrivate GtkToolbarPrivate
TYPE AS LONG GtkToolbarSpaceStyle
ENUM
  GTK_TOOLBAR_SPACE_EMPTY = 0
  GTK_TOOLBAR_SPACE_LINE = 1
END ENUM
TYPE AS LONG GtkToolbarStyle
ENUM
  GTK_TOOLBAR_ICONS = 0
  GTK_TOOLBAR_TEXT = 1
  GTK_TOOLBAR_BOTH = 2
  GTK_TOOLBAR_BOTH_HORIZ = 3
END ENUM
TYPE AS _GtkTooltip GtkTooltip
TYPE AS _GtkToplevelAccessible GtkToplevelAccessible
TYPE AS _GtkToplevelAccessibleClass GtkToplevelAccessibleClass
TYPE AS _GtkToplevelAccessiblePrivate GtkToplevelAccessiblePrivate
TYPE AS _GtkTreeDragDest GtkTreeDragDest
TYPE AS _GtkTreeDragDestIface GtkTreeDragDestIface
TYPE AS _GtkTreeDragSource GtkTreeDragSource
TYPE AS _GtkTreeDragSourceIface GtkTreeDragSourceIface
TYPE AS _GtkTreeIter GtkTreeIter
TYPE AS _GtkTreeModel GtkTreeModel
TYPE AS _GtkTreeModelFilter GtkTreeModelFilter
TYPE AS _GtkTreeModelFilterClass GtkTreeModelFilterClass
TYPE AS _GtkTreeModelFilterPrivate GtkTreeModelFilterPrivate
TYPE AS LONG GtkTreeModelFlags
ENUM
  GTK_TREE_MODEL_ITERS_PERSIST = 1
  GTK_TREE_MODEL_LIST_ONLY = 2
END ENUM
TYPE AS _GtkTreeModelIface GtkTreeModelIface
TYPE AS _GtkTreeModelSort GtkTreeModelSort
TYPE AS _GtkTreeModelSortClass GtkTreeModelSortClass
TYPE AS _GtkTreeModelSortPrivate GtkTreeModelSortPrivate
TYPE AS _GtkTreePath GtkTreePath
TYPE AS _GtkTreeRowReference GtkTreeRowReference
TYPE AS _GtkTreeSelection GtkTreeSelection
TYPE AS _GtkTreeSelectionClass GtkTreeSelectionClass
TYPE AS _GtkTreeSelectionPrivate GtkTreeSelectionPrivate
TYPE AS _GtkTreeSortable GtkTreeSortable
TYPE AS _GtkTreeSortableIface GtkTreeSortableIface
TYPE AS _GtkTreeStore GtkTreeStore
TYPE AS _GtkTreeStoreClass GtkTreeStoreClass
TYPE AS _GtkTreeStorePrivate GtkTreeStorePrivate
TYPE AS _GtkTreeView GtkTreeView
TYPE AS _GtkTreeViewAccessible GtkTreeViewAccessible
TYPE AS _GtkTreeViewAccessibleClass GtkTreeViewAccessibleClass
TYPE AS _GtkTreeViewAccessiblePrivate GtkTreeViewAccessiblePrivate
TYPE AS _GtkTreeViewClass GtkTreeViewClass
TYPE AS _GtkTreeViewColumn GtkTreeViewColumn
TYPE AS _GtkTreeViewColumnClass GtkTreeViewColumnClass
TYPE AS _GtkTreeViewColumnPrivate GtkTreeViewColumnPrivate
TYPE AS LONG GtkTreeViewColumnSizing
ENUM
  GTK_TREE_VIEW_COLUMN_GROW_ONLY = 0
  GTK_TREE_VIEW_COLUMN_AUTOSIZE = 1
  GTK_TREE_VIEW_COLUMN_FIXED = 2
END ENUM
TYPE AS LONG GtkTreeViewDropPosition
ENUM
  GTK_TREE_VIEW_DROP_BEFORE = 0
  GTK_TREE_VIEW_DROP_AFTER = 1
  GTK_TREE_VIEW_DROP_INTO_OR_BEFORE = 2
  GTK_TREE_VIEW_DROP_INTO_OR_AFTER = 3
END ENUM
TYPE AS LONG GtkTreeViewGridLines
ENUM
  GTK_TREE_VIEW_GRID_LINES_NONE = 0
  GTK_TREE_VIEW_GRID_LINES_HORIZONTAL = 1
  GTK_TREE_VIEW_GRID_LINES_VERTICAL = 2
  GTK_TREE_VIEW_GRID_LINES_BOTH = 3
END ENUM
TYPE AS _GtkTreeViewPrivate GtkTreeViewPrivate
TYPE AS _GtkUIManager GtkUIManager
TYPE AS _GtkUIManagerClass GtkUIManagerClass
TYPE AS LONG GtkUIManagerItemType
ENUM
  GTK_UI_MANAGER_AUTO = 0
  GTK_UI_MANAGER_MENUBAR = 1
  GTK_UI_MANAGER_MENU = 2
  GTK_UI_MANAGER_TOOLBAR = 4
  GTK_UI_MANAGER_PLACEHOLDER = 8
  GTK_UI_MANAGER_POPUP = 16
  GTK_UI_MANAGER_MENUITEM = 32
  GTK_UI_MANAGER_TOOLITEM = 64
  GTK_UI_MANAGER_SEPARATOR = 128
  GTK_UI_MANAGER_ACCELERATOR = 256
  GTK_UI_MANAGER_POPUP_WITH_ACCELS = 512
END ENUM
TYPE AS _GtkUIManagerPrivate GtkUIManagerPrivate
TYPE AS LONG GtkUnit
ENUM
  GTK_UNIT_NONE = 0
  GTK_UNIT_POINTS = 1
  GTK_UNIT_INCH = 2
  GTK_UNIT_MM = 3
END ENUM
TYPE AS _GtkVBox GtkVBox
TYPE AS _GtkVBoxClass GtkVBoxClass
TYPE AS _GtkVButtonBox GtkVButtonBox
TYPE AS _GtkVButtonBoxClass GtkVButtonBoxClass
TYPE AS _GtkVPaned GtkVPaned
TYPE AS _GtkVPanedClass GtkVPanedClass
TYPE AS _GtkVScale GtkVScale
TYPE AS _GtkVScaleClass GtkVScaleClass
TYPE AS _GtkVScrollbar GtkVScrollbar
TYPE AS _GtkVScrollbarClass GtkVScrollbarClass
TYPE AS _GtkVSeparator GtkVSeparator
TYPE AS _GtkVSeparatorClass GtkVSeparatorClass
TYPE AS _GtkViewport GtkViewport
TYPE AS _GtkViewportClass GtkViewportClass
TYPE AS _GtkViewportPrivate GtkViewportPrivate
TYPE AS _GtkVolumeButton GtkVolumeButton
TYPE AS _GtkVolumeButtonClass GtkVolumeButtonClass
TYPE AS _GtkWidget GtkWidget
TYPE AS _GtkWidgetAccessible GtkWidgetAccessible
TYPE AS _GtkWidgetAccessibleClass GtkWidgetAccessibleClass
TYPE AS _GtkWidgetAccessiblePrivate GtkWidgetAccessiblePrivate
TYPE AS _GtkWidgetClass GtkWidgetClass
TYPE AS _GtkWidgetClassPrivate GtkWidgetClassPrivate
TYPE AS LONG GtkWidgetHelpType
ENUM
  GTK_WIDGET_HELP_TOOLTIP = 0
  GTK_WIDGET_HELP_WHATS_THIS = 1
END ENUM
TYPE AS _GtkWidgetPath GtkWidgetPath
TYPE AS _GtkWidgetPrivate GtkWidgetPrivate
TYPE AS _GtkWindow GtkWindow
TYPE AS _GtkWindowAccessible GtkWindowAccessible
TYPE AS _GtkWindowAccessibleClass GtkWindowAccessibleClass
TYPE AS _GtkWindowAccessiblePrivate GtkWindowAccessiblePrivate
TYPE AS _GtkWindowClass GtkWindowClass
TYPE AS _GtkWindowGeometryInfo GtkWindowGeometryInfo
TYPE AS _GtkWindowGroup GtkWindowGroup
TYPE AS _GtkWindowGroupClass GtkWindowGroupClass
TYPE AS _GtkWindowGroupPrivate GtkWindowGroupPrivate
TYPE AS LONG GtkWindowPosition
ENUM
  GTK_WIN_POS_NONE = 0
  GTK_WIN_POS_CENTER = 1
  GTK_WIN_POS_MOUSE = 2
  GTK_WIN_POS_CENTER_ALWAYS = 3
  GTK_WIN_POS_CENTER_ON_PARENT = 4
END ENUM
TYPE AS _GtkWindowPrivate GtkWindowPrivate
TYPE AS LONG GtkWindowType
ENUM
  GTK_WINDOW_TOPLEVEL = 0
  GTK_WINDOW_POPUP = 1
END ENUM
TYPE AS LONG GtkWrapMode
ENUM
  GTK_WRAP_NONE = 0
  GTK_WRAP_CHAR = 1
  GTK_WRAP_WORD = 2
  GTK_WRAP_WORD_CHAR = 3
END ENUM
EXTERN "C" LIB "gtk-3"
' P_X

TYPE GtkRcPropertyParser AS FUNCTION CDECL(BYVAL AS const GParamSpec PTR, BYVAL AS const GString PTR, BYVAL AS GValue PTR) AS gboolean
TYPE GtkTickCallback AS FUNCTION CDECL(BYVAL AS GtkWidget PTR, BYVAL AS GdkFrameClock PTR, BYVAL AS gpointer) AS gboolean
TYPE GtkBuilderConnectFunc AS SUB CDECL(BYVAL AS GtkBuilder PTR, BYVAL AS GObject PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS GObject PTR, BYVAL AS GConnectFlags, BYVAL AS gpointer)
TYPE _GtkAccessible
  AS AtkObject parent
  AS GtkAccessiblePrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_accessible_get_type() AS GType
#DEFINE GTK_TYPE_ACCESSIBLE (gtk_accessible_get_type())
#DEFINE GTK_ACCESSIBLE(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_ACCESSIBLE, GtkAccessible))
#DEFINE GTK_ACCESSIBLE_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_ACCESSIBLE, GtkAccessibleClass))
#DEFINE GTK_IS_ACCESSIBLE(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_ACCESSIBLE))
#DEFINE GTK_IS_CLASS_ACCESSIBLE(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_ACCESSIBLE))
#DEFINE GTK_ACCESSIBLE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_ACCESSIBLE, GtkAccessibleClass))
DECLARE SUB gtk_accessible_connect_widget_destroyed(BYVAL AS GtkAccessible PTR)
DECLARE FUNCTION gtk_accessible_get_widget(BYVAL AS GtkAccessible PTR) AS GtkWidget PTR
DECLARE SUB gtk_accessible_set_widget(BYVAL AS GtkAccessible PTR, BYVAL AS GtkWidget PTR)
TYPE _GtkAccessibleClass
  AS AtkObjectClass parent_class
  connect_widget_destroyed AS SUB CDECL(BYVAL AS GtkAccessible PTR)
  widget_set AS SUB CDECL(BYVAL AS GtkAccessible PTR)
  widget_unset AS SUB CDECL(BYVAL AS GtkAccessible PTR)
  _gtk_reserved3 AS SUB CDECL()
  _gtk_reserved4 AS SUB CDECL()
END TYPE
TYPE _GtkWidget
  AS GInitiallyUnowned parent_instance
  AS GtkWidgetPrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_widget_get_type() AS GType
#DEFINE GTK_TYPE_WIDGET (gtk_widget_get_type())
#DEFINE GTK_WIDGET(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_WIDGET, GtkWidget))
#DEFINE GTK_WIDGET_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_WIDGET, GtkWidgetClass))
#DEFINE GTK_IS_WIDGET(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_WIDGET))
#DEFINE GTK_IS_CLASS_WIDGET(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_WIDGET))
#DEFINE GTK_WIDGET_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_WIDGET, GtkWidgetClass))
DECLARE FUNCTION gtk_widget_new(BYVAL AS GType, BYVAL AS const gchar PTR, ...) AS GtkWidget PTR
DECLARE FUNCTION gtk_widget_get_default_direction() AS GtkTextDirection
DECLARE FUNCTION gtk_widget_get_default_style() AS GtkStyle PTR
DECLARE SUB gtk_widget_pop_composite_child()
DECLARE SUB gtk_widget_push_composite_child()
DECLARE SUB gtk_widget_set_default_direction(BYVAL AS GtkTextDirection)
DECLARE FUNCTION gtk_widget_activate(BYVAL AS GtkWidget PTR) AS gboolean
DECLARE SUB gtk_widget_add_accelerator(BYVAL AS GtkWidget PTR, BYVAL AS const gchar PTR, BYVAL AS GtkAccelGroup PTR, BYVAL AS guint, BYVAL AS GdkModifierType, BYVAL AS GtkAccelFlags)
DECLARE SUB gtk_widget_add_device_events(BYVAL AS GtkWidget PTR, BYVAL AS GdkDevice PTR, BYVAL AS GdkEventMask)
DECLARE SUB gtk_widget_add_events(BYVAL AS GtkWidget PTR, BYVAL AS gint)
DECLARE SUB gtk_widget_add_mnemonic_label(BYVAL AS GtkWidget PTR, BYVAL AS GtkWidget PTR)
DECLARE FUNCTION gtk_widget_add_tick_callback(BYVAL AS GtkWidget PTR, BYVAL AS GtkTickCallback, BYVAL AS gpointer, BYVAL AS GDestroyNotify) AS guint
DECLARE FUNCTION gtk_widget_can_activate_accel(BYVAL AS GtkWidget PTR, BYVAL AS guint) AS gboolean
DECLARE FUNCTION gtk_widget_child_focus(BYVAL AS GtkWidget PTR, BYVAL AS GtkDirectionType) AS gboolean
DECLARE SUB gtk_widget_child_notify(BYVAL AS GtkWidget PTR, BYVAL AS const gchar PTR)
DECLARE SUB gtk_widget_class_path(BYVAL AS GtkWidget PTR, BYVAL AS guint PTR, BYVAL AS gchar PTR PTR, BYVAL AS gchar PTR PTR)
DECLARE FUNCTION gtk_widget_compute_expand(BYVAL AS GtkWidget PTR, BYVAL AS GtkOrientation) AS gboolean
DECLARE FUNCTION gtk_widget_create_pango_context(BYVAL AS GtkWidget PTR) AS PangoContext PTR
DECLARE FUNCTION gtk_widget_create_pango_layout(BYVAL AS GtkWidget PTR, BYVAL AS const gchar PTR) AS PangoLayout PTR
DECLARE SUB gtk_widget_destroy(BYVAL AS GtkWidget PTR)
DECLARE SUB gtk_widget_destroyed(BYVAL AS GtkWidget PTR, BYVAL AS GtkWidget PTR PTR)
DECLARE FUNCTION gtk_widget_device_is_shadowed(BYVAL AS GtkWidget PTR, BYVAL AS GdkDevice PTR) AS gboolean
DECLARE FUNCTION gtk_drag_begin(BYVAL AS GtkWidget PTR, BYVAL AS GtkTargetList PTR, BYVAL AS GdkDragAction, BYVAL AS gint, BYVAL AS GdkEvent PTR) AS GdkDragContext PTR
DECLARE FUNCTION gtk_drag_begin_with_coordinates(BYVAL AS GtkWidget PTR, BYVAL AS GtkTargetList PTR, BYVAL AS GdkDragAction, BYVAL AS gint, BYVAL AS GdkEvent PTR, BYVAL AS gint, BYVAL AS gint) AS GdkDragContext PTR
DECLARE FUNCTION gtk_drag_check_threshold(BYVAL AS GtkWidget PTR, BYVAL AS gint, BYVAL AS gint, BYVAL AS gint, BYVAL AS gint) AS gboolean
DECLARE SUB gtk_drag_dest_add_image_targets(BYVAL AS GtkWidget PTR)
DECLARE SUB gtk_drag_dest_add_text_targets(BYVAL AS GtkWidget PTR)
DECLARE SUB gtk_drag_dest_add_uri_targets(BYVAL AS GtkWidget PTR)
DECLARE FUNCTION gtk_drag_dest_find_target(BYVAL AS GtkWidget PTR, BYVAL AS GdkDragContext PTR, BYVAL AS GtkTargetList PTR) AS any ptr /'GdkAtom'/
DECLARE FUNCTION gtk_drag_dest_get_target_list(BYVAL AS GtkWidget PTR) AS GtkTargetList PTR
DECLARE FUNCTION gtk_drag_dest_get_track_motion(BYVAL AS GtkWidget PTR) AS gboolean
DECLARE SUB gtk_drag_dest_set(BYVAL AS GtkWidget PTR, BYVAL AS GtkDestDefaults, BYVAL AS const GtkTargetEntry PTR, BYVAL AS gint, BYVAL AS GdkDragAction)
DECLARE SUB gtk_drag_dest_set_proxy(BYVAL AS GtkWidget PTR, BYVAL AS GdkWindow PTR, BYVAL AS GdkDragProtocol, BYVAL AS gboolean)
DECLARE SUB gtk_drag_dest_set_target_list(BYVAL AS GtkWidget PTR, BYVAL AS GtkTargetList PTR)
DECLARE SUB gtk_drag_dest_set_track_motion(BYVAL AS GtkWidget PTR, BYVAL AS gboolean)
DECLARE SUB gtk_drag_dest_unset(BYVAL AS GtkWidget PTR)
DECLARE SUB gtk_drag_get_data(BYVAL AS GtkWidget PTR, BYVAL AS GdkDragContext PTR, BYVAL AS any ptr /'GdkAtom'/, BYVAL AS guint32)
DECLARE SUB gtk_drag_highlight(BYVAL AS GtkWidget PTR)
DECLARE SUB gtk_drag_source_add_image_targets(BYVAL AS GtkWidget PTR)
DECLARE SUB gtk_drag_source_add_text_targets(BYVAL AS GtkWidget PTR)
DECLARE SUB gtk_drag_source_add_uri_targets(BYVAL AS GtkWidget PTR)
DECLARE FUNCTION gtk_drag_source_get_target_list(BYVAL AS GtkWidget PTR) AS GtkTargetList PTR
DECLARE SUB gtk_drag_source_set(BYVAL AS GtkWidget PTR, BYVAL AS GdkModifierType, BYVAL AS const GtkTargetEntry PTR, BYVAL AS gint, BYVAL AS GdkDragAction)
DECLARE SUB gtk_drag_source_set_icon_gicon(BYVAL AS GtkWidget PTR, BYVAL AS GIcon PTR)
DECLARE SUB gtk_drag_source_set_icon_name(BYVAL AS GtkWidget PTR, BYVAL AS const gchar PTR)
DECLARE SUB gtk_drag_source_set_icon_pixbuf(BYVAL AS GtkWidget PTR, BYVAL AS GdkPixbuf PTR)
DECLARE SUB gtk_drag_source_set_icon_stock(BYVAL AS GtkWidget PTR, BYVAL AS const gchar PTR)
DECLARE SUB gtk_drag_source_set_target_list(BYVAL AS GtkWidget PTR, BYVAL AS GtkTargetList PTR)
DECLARE SUB gtk_drag_source_unset(BYVAL AS GtkWidget PTR)
DECLARE SUB gtk_drag_unhighlight(BYVAL AS GtkWidget PTR)
DECLARE SUB gtk_widget_draw(BYVAL AS GtkWidget PTR, BYVAL AS cairo_t PTR)
DECLARE SUB gtk_widget_ensure_style(BYVAL AS GtkWidget PTR)
DECLARE SUB gtk_widget_error_bell(BYVAL AS GtkWidget PTR)
DECLARE FUNCTION gtk_widget_event(BYVAL AS GtkWidget PTR, BYVAL AS GdkEvent PTR) AS gboolean
DECLARE SUB gtk_widget_freeze_child_notify(BYVAL AS GtkWidget PTR)
DECLARE FUNCTION gtk_widget_get_accessible(BYVAL AS GtkWidget PTR) AS AtkObject PTR
DECLARE FUNCTION gtk_widget_get_action_group(BYVAL AS GtkWidget PTR, BYVAL AS const gchar PTR) AS GActionGroup PTR
DECLARE FUNCTION gtk_widget_get_allocated_baseline(BYVAL AS GtkWidget PTR) AS gint /'int'/
DECLARE FUNCTION gtk_widget_get_allocated_height(BYVAL AS GtkWidget PTR) AS gint /'int'/
DECLARE SUB gtk_widget_get_allocated_size(BYVAL AS GtkWidget PTR, BYVAL AS GtkAllocation PTR, BYVAL AS gint /'int'/ PTR)
DECLARE FUNCTION gtk_widget_get_allocated_width(BYVAL AS GtkWidget PTR) AS gint /'int'/
DECLARE SUB gtk_widget_get_allocation(BYVAL AS GtkWidget PTR, BYVAL AS GtkAllocation PTR)
DECLARE FUNCTION gtk_widget_get_ancestor(BYVAL AS GtkWidget PTR, BYVAL AS GType) AS GtkWidget PTR
DECLARE FUNCTION gtk_widget_get_app_paintable(BYVAL AS GtkWidget PTR) AS gboolean
DECLARE FUNCTION gtk_widget_get_can_default(BYVAL AS GtkWidget PTR) AS gboolean
DECLARE FUNCTION gtk_widget_get_can_focus(BYVAL AS GtkWidget PTR) AS gboolean
DECLARE SUB gtk_widget_get_child_requisition(BYVAL AS GtkWidget PTR, BYVAL AS GtkRequisition PTR)
DECLARE FUNCTION gtk_widget_get_child_visible(BYVAL AS GtkWidget PTR) AS gboolean
DECLARE SUB gtk_widget_get_clip(BYVAL AS GtkWidget PTR, BYVAL AS GtkAllocation PTR)
DECLARE FUNCTION gtk_widget_get_clipboard(BYVAL AS GtkWidget PTR, BYVAL AS any ptr /'GdkAtom'/) AS GtkClipboard PTR
DECLARE FUNCTION gtk_widget_get_composite_name(BYVAL AS GtkWidget PTR) AS gchar PTR
DECLARE FUNCTION gtk_widget_get_device_enabled(BYVAL AS GtkWidget PTR, BYVAL AS GdkDevice PTR) AS gboolean
DECLARE FUNCTION gtk_widget_get_device_events(BYVAL AS GtkWidget PTR, BYVAL AS GdkDevice PTR) AS GdkEventMask
DECLARE FUNCTION gtk_widget_get_direction(BYVAL AS GtkWidget PTR) AS GtkTextDirection
DECLARE FUNCTION gtk_widget_get_display(BYVAL AS GtkWidget PTR) AS GdkDisplay PTR
DECLARE FUNCTION gtk_widget_get_double_buffered(BYVAL AS GtkWidget PTR) AS gboolean
DECLARE FUNCTION gtk_widget_get_events(BYVAL AS GtkWidget PTR) AS gint
DECLARE FUNCTION gtk_widget_get_focus_on_click(BYVAL AS GtkWidget PTR) AS gboolean
DECLARE FUNCTION gtk_widget_get_font_map(BYVAL AS GtkWidget PTR) AS PangoFontMap PTR
DECLARE FUNCTION gtk_widget_get_font_options(BYVAL AS GtkWidget PTR) AS const cairo_font_options_t PTR
DECLARE FUNCTION gtk_widget_get_frame_clock(BYVAL AS GtkWidget PTR) AS GdkFrameClock PTR
DECLARE FUNCTION gtk_widget_get_halign(BYVAL AS GtkWidget PTR) AS GtkAlign
DECLARE FUNCTION gtk_widget_get_has_tooltip(BYVAL AS GtkWidget PTR) AS gboolean
DECLARE FUNCTION gtk_widget_get_has_window(BYVAL AS GtkWidget PTR) AS gboolean
DECLARE FUNCTION gtk_widget_get_hexpand(BYVAL AS GtkWidget PTR) AS gboolean
DECLARE FUNCTION gtk_widget_get_hexpand_set(BYVAL AS GtkWidget PTR) AS gboolean
DECLARE FUNCTION gtk_widget_get_mapped(BYVAL AS GtkWidget PTR) AS gboolean
DECLARE FUNCTION gtk_widget_get_margin_bottom(BYVAL AS GtkWidget PTR) AS gint
DECLARE FUNCTION gtk_widget_get_margin_end(BYVAL AS GtkWidget PTR) AS gint
DECLARE FUNCTION gtk_widget_get_margin_left(BYVAL AS GtkWidget PTR) AS gint
DECLARE FUNCTION gtk_widget_get_margin_right(BYVAL AS GtkWidget PTR) AS gint
DECLARE FUNCTION gtk_widget_get_margin_start(BYVAL AS GtkWidget PTR) AS gint
DECLARE FUNCTION gtk_widget_get_margin_top(BYVAL AS GtkWidget PTR) AS gint
DECLARE FUNCTION gtk_widget_get_modifier_mask(BYVAL AS GtkWidget PTR, BYVAL AS GdkModifierIntent) AS GdkModifierType
DECLARE FUNCTION gtk_widget_get_modifier_style(BYVAL AS GtkWidget PTR) AS GtkRcStyle PTR
DECLARE FUNCTION gtk_widget_get_name(BYVAL AS GtkWidget PTR) AS const gchar PTR
DECLARE FUNCTION gtk_widget_get_no_show_all(BYVAL AS GtkWidget PTR) AS gboolean
DECLARE FUNCTION gtk_widget_get_opacity(BYVAL AS GtkWidget PTR) AS double
DECLARE FUNCTION gtk_widget_get_pango_context(BYVAL AS GtkWidget PTR) AS PangoContext PTR
DECLARE FUNCTION gtk_widget_get_parent(BYVAL AS GtkWidget PTR) AS GtkWidget PTR
DECLARE FUNCTION gtk_widget_get_parent_window(BYVAL AS GtkWidget PTR) AS GdkWindow PTR
DECLARE FUNCTION gtk_widget_get_path(BYVAL AS GtkWidget PTR) AS GtkWidgetPath PTR
DECLARE SUB gtk_widget_get_pointer(BYVAL AS GtkWidget PTR, BYVAL AS gint PTR, BYVAL AS gint PTR)
DECLARE SUB gtk_widget_get_preferred_height(BYVAL AS GtkWidget PTR, BYVAL AS gint PTR, BYVAL AS gint PTR)
DECLARE SUB gtk_widget_get_preferred_height_and_baseline_for_width(BYVAL AS GtkWidget PTR, BYVAL AS gint, BYVAL AS gint PTR, BYVAL AS gint PTR, BYVAL AS gint PTR, BYVAL AS gint PTR)
DECLARE SUB gtk_widget_get_preferred_height_for_width(BYVAL AS GtkWidget PTR, BYVAL AS gint, BYVAL AS gint PTR, BYVAL AS gint PTR)
DECLARE SUB gtk_widget_get_preferred_size(BYVAL AS GtkWidget PTR, BYVAL AS GtkRequisition PTR, BYVAL AS GtkRequisition PTR)
DECLARE SUB gtk_widget_get_preferred_width(BYVAL AS GtkWidget PTR, BYVAL AS gint PTR, BYVAL AS gint PTR)
DECLARE SUB gtk_widget_get_preferred_width_for_height(BYVAL AS GtkWidget PTR, BYVAL AS gint, BYVAL AS gint PTR, BYVAL AS gint PTR)
DECLARE FUNCTION gtk_widget_get_realized(BYVAL AS GtkWidget PTR) AS gboolean
DECLARE FUNCTION gtk_widget_get_receives_default(BYVAL AS GtkWidget PTR) AS gboolean
DECLARE FUNCTION gtk_widget_get_request_mode(BYVAL AS GtkWidget PTR) AS GtkSizeRequestMode
DECLARE SUB gtk_widget_get_requisition(BYVAL AS GtkWidget PTR, BYVAL AS GtkRequisition PTR)
DECLARE FUNCTION gtk_widget_get_root_window(BYVAL AS GtkWidget PTR) AS GdkWindow PTR
DECLARE FUNCTION gtk_widget_get_scale_factor(BYVAL AS GtkWidget PTR) AS gint
DECLARE FUNCTION gtk_widget_get_screen(BYVAL AS GtkWidget PTR) AS GdkScreen PTR
DECLARE FUNCTION gtk_widget_get_sensitive(BYVAL AS GtkWidget PTR) AS gboolean
DECLARE FUNCTION gtk_widget_get_settings(BYVAL AS GtkWidget PTR) AS GtkSettings PTR
DECLARE SUB gtk_widget_get_size_request(BYVAL AS GtkWidget PTR, BYVAL AS gint PTR, BYVAL AS gint PTR)
DECLARE FUNCTION gtk_widget_get_state(BYVAL AS GtkWidget PTR) AS GtkStateType
DECLARE FUNCTION gtk_widget_get_state_flags(BYVAL AS GtkWidget PTR) AS GtkStateFlags
DECLARE FUNCTION gtk_widget_get_style(BYVAL AS GtkWidget PTR) AS GtkStyle PTR
DECLARE FUNCTION gtk_widget_get_style_context(BYVAL AS GtkWidget PTR) AS GtkStyleContext PTR
DECLARE FUNCTION gtk_widget_get_support_multidevice(BYVAL AS GtkWidget PTR) AS gboolean
DECLARE FUNCTION gtk_widget_get_template_child(BYVAL AS GtkWidget PTR, BYVAL AS GType, BYVAL AS const gchar PTR) AS GObject PTR
DECLARE FUNCTION gtk_widget_get_tooltip_markup(BYVAL AS GtkWidget PTR) AS gchar PTR
DECLARE FUNCTION gtk_widget_get_tooltip_text(BYVAL AS GtkWidget PTR) AS gchar PTR
DECLARE FUNCTION gtk_widget_get_tooltip_window(BYVAL AS GtkWidget PTR) AS GtkWindow PTR
DECLARE FUNCTION gtk_widget_get_toplevel(BYVAL AS GtkWidget PTR) AS GtkWidget PTR
DECLARE FUNCTION gtk_widget_get_valign(BYVAL AS GtkWidget PTR) AS GtkAlign
DECLARE FUNCTION gtk_widget_get_valign_with_baseline(BYVAL AS GtkWidget PTR) AS GtkAlign
DECLARE FUNCTION gtk_widget_get_vexpand(BYVAL AS GtkWidget PTR) AS gboolean
DECLARE FUNCTION gtk_widget_get_vexpand_set(BYVAL AS GtkWidget PTR) AS gboolean
DECLARE FUNCTION gtk_widget_get_visible(BYVAL AS GtkWidget PTR) AS gboolean
DECLARE FUNCTION gtk_widget_get_visual(BYVAL AS GtkWidget PTR) AS GdkVisual PTR
DECLARE FUNCTION gtk_widget_get_window(BYVAL AS GtkWidget PTR) AS GdkWindow PTR
DECLARE SUB gtk_grab_add(BYVAL AS GtkWidget PTR)
DECLARE SUB gtk_widget_grab_default(BYVAL AS GtkWidget PTR)
DECLARE SUB gtk_widget_grab_focus(BYVAL AS GtkWidget PTR)
DECLARE SUB gtk_grab_remove(BYVAL AS GtkWidget PTR)
DECLARE FUNCTION gtk_widget_has_default(BYVAL AS GtkWidget PTR) AS gboolean
DECLARE FUNCTION gtk_widget_has_focus(BYVAL AS GtkWidget PTR) AS gboolean
DECLARE FUNCTION gtk_widget_has_grab(BYVAL AS GtkWidget PTR) AS gboolean
DECLARE FUNCTION gtk_widget_has_rc_style(BYVAL AS GtkWidget PTR) AS gboolean
DECLARE FUNCTION gtk_widget_has_screen(BYVAL AS GtkWidget PTR) AS gboolean
DECLARE FUNCTION gtk_widget_has_visible_focus(BYVAL AS GtkWidget PTR) AS gboolean
DECLARE SUB gtk_widget_hide(BYVAL AS GtkWidget PTR)
DECLARE FUNCTION gtk_widget_hide_on_delete(BYVAL AS GtkWidget PTR) AS gboolean
DECLARE FUNCTION gtk_widget_in_destruction(BYVAL AS GtkWidget PTR) AS gboolean
DECLARE SUB gtk_widget_init_template(BYVAL AS GtkWidget PTR)
DECLARE SUB gtk_widget_input_shape_combine_region(BYVAL AS GtkWidget PTR, BYVAL AS cairo_region_t PTR)
DECLARE SUB gtk_widget_insert_action_group(BYVAL AS GtkWidget PTR, BYVAL AS const gchar PTR, BYVAL AS GActionGroup PTR)
DECLARE FUNCTION gtk_widget_intersect(BYVAL AS GtkWidget PTR, BYVAL AS const GdkRectangle PTR, BYVAL AS GdkRectangle PTR) AS gboolean
DECLARE FUNCTION gtk_widget_is_ancestor(BYVAL AS GtkWidget PTR, BYVAL AS GtkWidget PTR) AS gboolean
DECLARE FUNCTION gtk_widget_is_composited(BYVAL AS GtkWidget PTR) AS gboolean
DECLARE FUNCTION gtk_widget_is_drawable(BYVAL AS GtkWidget PTR) AS gboolean
DECLARE FUNCTION gtk_widget_is_focus(BYVAL AS GtkWidget PTR) AS gboolean
DECLARE FUNCTION gtk_widget_is_sensitive(BYVAL AS GtkWidget PTR) AS gboolean
DECLARE FUNCTION gtk_widget_is_toplevel(BYVAL AS GtkWidget PTR) AS gboolean
DECLARE FUNCTION gtk_widget_is_visible(BYVAL AS GtkWidget PTR) AS gboolean
DECLARE FUNCTION gtk_widget_keynav_failed(BYVAL AS GtkWidget PTR, BYVAL AS GtkDirectionType) AS gboolean
DECLARE FUNCTION gtk_widget_list_accel_closures(BYVAL AS GtkWidget PTR) AS GList PTR
DECLARE FUNCTION gtk_widget_list_action_prefixes(BYVAL AS GtkWidget PTR) AS const gchar PTR PTR
DECLARE FUNCTION gtk_widget_list_mnemonic_labels(BYVAL AS GtkWidget PTR) AS GList PTR
DECLARE SUB gtk_widget_map(BYVAL AS GtkWidget PTR)
DECLARE FUNCTION gtk_widget_mnemonic_activate(BYVAL AS GtkWidget PTR, BYVAL AS gboolean) AS gboolean
DECLARE SUB gtk_widget_modify_base(BYVAL AS GtkWidget PTR, BYVAL AS GtkStateType, BYVAL AS const GdkColor PTR)
DECLARE SUB gtk_widget_modify_bg(BYVAL AS GtkWidget PTR, BYVAL AS GtkStateType, BYVAL AS const GdkColor PTR)
DECLARE SUB gtk_widget_modify_cursor(BYVAL AS GtkWidget PTR, BYVAL AS const GdkColor PTR, BYVAL AS const GdkColor PTR)
DECLARE SUB gtk_widget_modify_fg(BYVAL AS GtkWidget PTR, BYVAL AS GtkStateType, BYVAL AS const GdkColor PTR)
DECLARE SUB gtk_widget_modify_font(BYVAL AS GtkWidget PTR, BYVAL AS PangoFontDescription PTR)
DECLARE SUB gtk_widget_modify_style(BYVAL AS GtkWidget PTR, BYVAL AS GtkRcStyle PTR)
DECLARE SUB gtk_widget_modify_text(BYVAL AS GtkWidget PTR, BYVAL AS GtkStateType, BYVAL AS const GdkColor PTR)
DECLARE SUB gtk_widget_override_background_color(BYVAL AS GtkWidget PTR, BYVAL AS GtkStateFlags, BYVAL AS const GdkRGBA PTR)
DECLARE SUB gtk_widget_override_color(BYVAL AS GtkWidget PTR, BYVAL AS GtkStateFlags, BYVAL AS const GdkRGBA PTR)
DECLARE SUB gtk_widget_override_cursor(BYVAL AS GtkWidget PTR, BYVAL AS const GdkRGBA PTR, BYVAL AS const GdkRGBA PTR)
DECLARE SUB gtk_widget_override_font(BYVAL AS GtkWidget PTR, BYVAL AS const PangoFontDescription PTR)
DECLARE SUB gtk_widget_override_symbolic_color(BYVAL AS GtkWidget PTR, BYVAL AS const gchar PTR, BYVAL AS const GdkRGBA PTR)
DECLARE SUB gtk_widget_path(BYVAL AS GtkWidget PTR, BYVAL AS guint PTR, BYVAL AS gchar PTR PTR, BYVAL AS gchar PTR PTR)
DECLARE SUB gtk_widget_queue_allocate(BYVAL AS GtkWidget PTR)
DECLARE SUB gtk_widget_queue_compute_expand(BYVAL AS GtkWidget PTR)
DECLARE SUB gtk_widget_queue_draw(BYVAL AS GtkWidget PTR)
DECLARE SUB gtk_widget_queue_draw_area(BYVAL AS GtkWidget PTR, BYVAL AS gint, BYVAL AS gint, BYVAL AS gint, BYVAL AS gint)
DECLARE SUB gtk_widget_queue_draw_region(BYVAL AS GtkWidget PTR, BYVAL AS const cairo_region_t PTR)
DECLARE SUB gtk_widget_queue_resize(BYVAL AS GtkWidget PTR)
DECLARE SUB gtk_widget_queue_resize_no_redraw(BYVAL AS GtkWidget PTR)
DECLARE SUB gtk_widget_realize(BYVAL AS GtkWidget PTR)
DECLARE FUNCTION gtk_widget_region_intersect(BYVAL AS GtkWidget PTR, BYVAL AS const cairo_region_t PTR) AS cairo_region_t PTR
DECLARE SUB gtk_widget_register_window(BYVAL AS GtkWidget PTR, BYVAL AS GdkWindow PTR)
DECLARE FUNCTION gtk_widget_remove_accelerator(BYVAL AS GtkWidget PTR, BYVAL AS GtkAccelGroup PTR, BYVAL AS guint, BYVAL AS GdkModifierType) AS gboolean
DECLARE SUB gtk_widget_remove_mnemonic_label(BYVAL AS GtkWidget PTR, BYVAL AS GtkWidget PTR)
DECLARE SUB gtk_widget_remove_tick_callback(BYVAL AS GtkWidget PTR, BYVAL AS guint)
DECLARE FUNCTION gtk_widget_render_icon(BYVAL AS GtkWidget PTR, BYVAL AS const gchar PTR, BYVAL AS GtkIconSize, BYVAL AS const gchar PTR) AS GdkPixbuf PTR
DECLARE FUNCTION gtk_widget_render_icon_pixbuf(BYVAL AS GtkWidget PTR, BYVAL AS const gchar PTR, BYVAL AS GtkIconSize) AS GdkPixbuf PTR
DECLARE SUB gtk_widget_reparent(BYVAL AS GtkWidget PTR, BYVAL AS GtkWidget PTR)
DECLARE SUB gtk_widget_reset_rc_styles(BYVAL AS GtkWidget PTR)
DECLARE SUB gtk_widget_reset_style(BYVAL AS GtkWidget PTR)
DECLARE FUNCTION gtk_widget_send_expose(BYVAL AS GtkWidget PTR, BYVAL AS GdkEvent PTR) AS gint
DECLARE FUNCTION gtk_widget_send_focus_change(BYVAL AS GtkWidget PTR, BYVAL AS GdkEvent PTR) AS gboolean
DECLARE SUB gtk_widget_set_accel_path(BYVAL AS GtkWidget PTR, BYVAL AS const gchar PTR, BYVAL AS GtkAccelGroup PTR)
DECLARE SUB gtk_widget_set_allocation(BYVAL AS GtkWidget PTR, BYVAL AS const GtkAllocation PTR)
DECLARE SUB gtk_widget_set_app_paintable(BYVAL AS GtkWidget PTR, BYVAL AS gboolean)
DECLARE SUB gtk_widget_set_can_default(BYVAL AS GtkWidget PTR, BYVAL AS gboolean)
DECLARE SUB gtk_widget_set_can_focus(BYVAL AS GtkWidget PTR, BYVAL AS gboolean)
DECLARE SUB gtk_widget_set_child_visible(BYVAL AS GtkWidget PTR, BYVAL AS gboolean)
DECLARE SUB gtk_widget_set_clip(BYVAL AS GtkWidget PTR, BYVAL AS const GtkAllocation PTR)
DECLARE SUB gtk_widget_set_composite_name(BYVAL AS GtkWidget PTR, BYVAL AS const gchar PTR)
DECLARE SUB gtk_widget_set_device_enabled(BYVAL AS GtkWidget PTR, BYVAL AS GdkDevice PTR, BYVAL AS gboolean)
DECLARE SUB gtk_widget_set_device_events(BYVAL AS GtkWidget PTR, BYVAL AS GdkDevice PTR, BYVAL AS GdkEventMask)
DECLARE SUB gtk_widget_set_direction(BYVAL AS GtkWidget PTR, BYVAL AS GtkTextDirection)
DECLARE SUB gtk_widget_set_double_buffered(BYVAL AS GtkWidget PTR, BYVAL AS gboolean)
DECLARE SUB gtk_widget_set_events(BYVAL AS GtkWidget PTR, BYVAL AS gint)
DECLARE SUB gtk_widget_set_focus_on_click(BYVAL AS GtkWidget PTR, BYVAL AS gboolean)
DECLARE SUB gtk_widget_set_font_map(BYVAL AS GtkWidget PTR, BYVAL AS PangoFontMap PTR)
DECLARE SUB gtk_widget_set_font_options(BYVAL AS GtkWidget PTR, BYVAL AS const cairo_font_options_t PTR)
DECLARE SUB gtk_widget_set_halign(BYVAL AS GtkWidget PTR, BYVAL AS GtkAlign)
DECLARE SUB gtk_widget_set_has_tooltip(BYVAL AS GtkWidget PTR, BYVAL AS gboolean)
DECLARE SUB gtk_widget_set_has_window(BYVAL AS GtkWidget PTR, BYVAL AS gboolean)
DECLARE SUB gtk_widget_set_hexpand(BYVAL AS GtkWidget PTR, BYVAL AS gboolean)
DECLARE SUB gtk_widget_set_hexpand_set(BYVAL AS GtkWidget PTR, BYVAL AS gboolean)
DECLARE SUB gtk_widget_set_mapped(BYVAL AS GtkWidget PTR, BYVAL AS gboolean)
DECLARE SUB gtk_widget_set_margin_bottom(BYVAL AS GtkWidget PTR, BYVAL AS gint)
DECLARE SUB gtk_widget_set_margin_end(BYVAL AS GtkWidget PTR, BYVAL AS gint)
DECLARE SUB gtk_widget_set_margin_left(BYVAL AS GtkWidget PTR, BYVAL AS gint)
DECLARE SUB gtk_widget_set_margin_right(BYVAL AS GtkWidget PTR, BYVAL AS gint)
DECLARE SUB gtk_widget_set_margin_start(BYVAL AS GtkWidget PTR, BYVAL AS gint)
DECLARE SUB gtk_widget_set_margin_top(BYVAL AS GtkWidget PTR, BYVAL AS gint)
DECLARE SUB gtk_widget_set_name(BYVAL AS GtkWidget PTR, BYVAL AS const gchar PTR)
DECLARE SUB gtk_widget_set_no_show_all(BYVAL AS GtkWidget PTR, BYVAL AS gboolean)
DECLARE SUB gtk_widget_set_opacity(BYVAL AS GtkWidget PTR, BYVAL AS double)
DECLARE SUB gtk_widget_set_parent(BYVAL AS GtkWidget PTR, BYVAL AS GtkWidget PTR)
DECLARE SUB gtk_widget_set_parent_window(BYVAL AS GtkWidget PTR, BYVAL AS GdkWindow PTR)
DECLARE SUB gtk_widget_set_realized(BYVAL AS GtkWidget PTR, BYVAL AS gboolean)
DECLARE SUB gtk_widget_set_receives_default(BYVAL AS GtkWidget PTR, BYVAL AS gboolean)
DECLARE SUB gtk_widget_set_redraw_on_allocate(BYVAL AS GtkWidget PTR, BYVAL AS gboolean)
DECLARE SUB gtk_widget_set_sensitive(BYVAL AS GtkWidget PTR, BYVAL AS gboolean)
DECLARE SUB gtk_widget_set_size_request(BYVAL AS GtkWidget PTR, BYVAL AS gint, BYVAL AS gint)
DECLARE SUB gtk_widget_set_state(BYVAL AS GtkWidget PTR, BYVAL AS GtkStateType)
DECLARE SUB gtk_widget_set_state_flags(BYVAL AS GtkWidget PTR, BYVAL AS GtkStateFlags, BYVAL AS gboolean)
DECLARE SUB gtk_widget_set_style(BYVAL AS GtkWidget PTR, BYVAL AS GtkStyle PTR)
DECLARE SUB gtk_widget_set_support_multidevice(BYVAL AS GtkWidget PTR, BYVAL AS gboolean)
DECLARE SUB gtk_widget_set_tooltip_markup(BYVAL AS GtkWidget PTR, BYVAL AS const gchar PTR)
DECLARE SUB gtk_widget_set_tooltip_text(BYVAL AS GtkWidget PTR, BYVAL AS const gchar PTR)
DECLARE SUB gtk_widget_set_tooltip_window(BYVAL AS GtkWidget PTR, BYVAL AS GtkWindow PTR)
DECLARE SUB gtk_widget_set_valign(BYVAL AS GtkWidget PTR, BYVAL AS GtkAlign)
DECLARE SUB gtk_widget_set_vexpand(BYVAL AS GtkWidget PTR, BYVAL AS gboolean)
DECLARE SUB gtk_widget_set_vexpand_set(BYVAL AS GtkWidget PTR, BYVAL AS gboolean)
DECLARE SUB gtk_widget_set_visible(BYVAL AS GtkWidget PTR, BYVAL AS gboolean)
DECLARE SUB gtk_widget_set_visual(BYVAL AS GtkWidget PTR, BYVAL AS GdkVisual PTR)
DECLARE SUB gtk_widget_set_window(BYVAL AS GtkWidget PTR, BYVAL AS GdkWindow PTR)
DECLARE SUB gtk_widget_shape_combine_region(BYVAL AS GtkWidget PTR, BYVAL AS cairo_region_t PTR)
DECLARE SUB gtk_widget_show(BYVAL AS GtkWidget PTR)
DECLARE SUB gtk_widget_show_all(BYVAL AS GtkWidget PTR)
DECLARE SUB gtk_widget_show_now(BYVAL AS GtkWidget PTR)
DECLARE SUB gtk_widget_size_allocate(BYVAL AS GtkWidget PTR, BYVAL AS GtkAllocation PTR)
DECLARE SUB gtk_widget_size_allocate_with_baseline(BYVAL AS GtkWidget PTR, BYVAL AS GtkAllocation PTR, BYVAL AS gint)
DECLARE SUB gtk_widget_size_request(BYVAL AS GtkWidget PTR, BYVAL AS GtkRequisition PTR)
DECLARE SUB gtk_widget_style_attach(BYVAL AS GtkWidget PTR)
DECLARE SUB gtk_widget_style_get(BYVAL AS GtkWidget PTR, BYVAL AS const gchar PTR, ...)
DECLARE SUB gtk_widget_style_get_property(BYVAL AS GtkWidget PTR, BYVAL AS const gchar PTR, BYVAL AS GValue PTR)
DECLARE SUB gtk_widget_style_get_valist(BYVAL AS GtkWidget PTR, BYVAL AS const gchar PTR, BYVAL AS va_list)
DECLARE SUB gtk_widget_thaw_child_notify(BYVAL AS GtkWidget PTR)
DECLARE FUNCTION gtk_widget_translate_coordinates(BYVAL AS GtkWidget PTR, BYVAL AS GtkWidget PTR, BYVAL AS gint, BYVAL AS gint, BYVAL AS gint PTR, BYVAL AS gint PTR) AS gboolean
DECLARE SUB gtk_widget_trigger_tooltip_query(BYVAL AS GtkWidget PTR)
DECLARE SUB gtk_widget_unmap(BYVAL AS GtkWidget PTR)
DECLARE SUB gtk_widget_unparent(BYVAL AS GtkWidget PTR)
DECLARE SUB gtk_widget_unrealize(BYVAL AS GtkWidget PTR)
DECLARE SUB gtk_widget_unregister_window(BYVAL AS GtkWidget PTR, BYVAL AS GdkWindow PTR)
DECLARE SUB gtk_widget_unset_state_flags(BYVAL AS GtkWidget PTR, BYVAL AS GtkStateFlags)
TYPE _GtkWidgetClass
  AS GInitiallyUnownedClass parent_class
  AS guint activate_signal
  dispatch_child_properties_changed AS SUB CDECL(BYVAL AS GtkWidget PTR, BYVAL AS guint, BYVAL AS GParamSpec PTR PTR)
  destroy AS SUB CDECL(BYVAL AS GtkWidget PTR)
  show AS SUB CDECL(BYVAL AS GtkWidget PTR)
  show_all AS SUB CDECL(BYVAL AS GtkWidget PTR)
  hide AS SUB CDECL(BYVAL AS GtkWidget PTR)
  map AS SUB CDECL(BYVAL AS GtkWidget PTR)
  unmap AS SUB CDECL(BYVAL AS GtkWidget PTR)
  realize AS SUB CDECL(BYVAL AS GtkWidget PTR)
  unrealize AS SUB CDECL(BYVAL AS GtkWidget PTR)
  size_allocate AS SUB CDECL(BYVAL AS GtkWidget PTR, BYVAL AS GtkAllocation PTR)
  state_changed AS SUB CDECL(BYVAL AS GtkWidget PTR, BYVAL AS GtkStateType)
  state_flags_changed AS SUB CDECL(BYVAL AS GtkWidget PTR, BYVAL AS GtkStateFlags)
  parent_set AS SUB CDECL(BYVAL AS GtkWidget PTR, BYVAL AS GtkWidget PTR)
  hierarchy_changed AS SUB CDECL(BYVAL AS GtkWidget PTR, BYVAL AS GtkWidget PTR)
  style_set AS SUB CDECL(BYVAL AS GtkWidget PTR, BYVAL AS GtkStyle PTR)
  direction_changed AS SUB CDECL(BYVAL AS GtkWidget PTR, BYVAL AS GtkTextDirection)
  grab_notify AS SUB CDECL(BYVAL AS GtkWidget PTR, BYVAL AS gboolean)
  child_notify AS SUB CDECL(BYVAL AS GtkWidget PTR, BYVAL AS GParamSpec PTR)
  draw AS FUNCTION CDECL(BYVAL AS GtkWidget PTR, BYVAL AS cairo_t PTR) AS gboolean
  get_request_mode AS FUNCTION CDECL(BYVAL AS GtkWidget PTR) AS GtkSizeRequestMode
  get_preferred_height AS SUB CDECL(BYVAL AS GtkWidget PTR, BYVAL AS gint PTR, BYVAL AS gint PTR)
  get_preferred_width_for_height AS SUB CDECL(BYVAL AS GtkWidget PTR, BYVAL AS gint, BYVAL AS gint PTR, BYVAL AS gint PTR)
  get_preferred_width AS SUB CDECL(BYVAL AS GtkWidget PTR, BYVAL AS gint PTR, BYVAL AS gint PTR)
  get_preferred_height_for_width AS SUB CDECL(BYVAL AS GtkWidget PTR, BYVAL AS gint, BYVAL AS gint PTR, BYVAL AS gint PTR)
  mnemonic_activate AS FUNCTION CDECL(BYVAL AS GtkWidget PTR, BYVAL AS gboolean) AS gboolean
  grab_focus AS SUB CDECL(BYVAL AS GtkWidget PTR)
  focus AS FUNCTION CDECL(BYVAL AS GtkWidget PTR, BYVAL AS GtkDirectionType) AS gboolean
  move_focus AS SUB CDECL(BYVAL AS GtkWidget PTR, BYVAL AS GtkDirectionType)
  keynav_failed AS FUNCTION CDECL(BYVAL AS GtkWidget PTR, BYVAL AS GtkDirectionType) AS gboolean
  event AS FUNCTION CDECL(BYVAL AS GtkWidget PTR, BYVAL AS GdkEvent PTR) AS gboolean
  button_press_event AS FUNCTION CDECL(BYVAL AS GtkWidget PTR, BYVAL AS GdkEventButton PTR) AS gboolean
  button_release_event AS FUNCTION CDECL(BYVAL AS GtkWidget PTR, BYVAL AS GdkEventButton PTR) AS gboolean
  scroll_event AS FUNCTION CDECL(BYVAL AS GtkWidget PTR, BYVAL AS GdkEventScroll PTR) AS gboolean
  motion_notify_event AS FUNCTION CDECL(BYVAL AS GtkWidget PTR, BYVAL AS GdkEventMotion PTR) AS gboolean
  delete_event AS FUNCTION CDECL(BYVAL AS GtkWidget PTR, BYVAL AS GdkEventAny PTR) AS gboolean
  destroy_event AS FUNCTION CDECL(BYVAL AS GtkWidget PTR, BYVAL AS GdkEventAny PTR) AS gboolean
  key_press_event AS FUNCTION CDECL(BYVAL AS GtkWidget PTR, BYVAL AS GdkEventKey PTR) AS gboolean
  key_release_event AS FUNCTION CDECL(BYVAL AS GtkWidget PTR, BYVAL AS GdkEventKey PTR) AS gboolean
  enter_notify_event AS FUNCTION CDECL(BYVAL AS GtkWidget PTR, BYVAL AS GdkEventCrossing PTR) AS gboolean
  leave_notify_event AS FUNCTION CDECL(BYVAL AS GtkWidget PTR, BYVAL AS GdkEventCrossing PTR) AS gboolean
  configure_event AS FUNCTION CDECL(BYVAL AS GtkWidget PTR, BYVAL AS GdkEventConfigure PTR) AS gboolean
  focus_in_event AS FUNCTION CDECL(BYVAL AS GtkWidget PTR, BYVAL AS GdkEventFocus PTR) AS gboolean
  focus_out_event AS FUNCTION CDECL(BYVAL AS GtkWidget PTR, BYVAL AS GdkEventFocus PTR) AS gboolean
  map_event AS FUNCTION CDECL(BYVAL AS GtkWidget PTR, BYVAL AS GdkEventAny PTR) AS gboolean
  unmap_event AS FUNCTION CDECL(BYVAL AS GtkWidget PTR, BYVAL AS GdkEventAny PTR) AS gboolean
  property_notify_event AS FUNCTION CDECL(BYVAL AS GtkWidget PTR, BYVAL AS GdkEventProperty PTR) AS gboolean
  selection_clear_event AS FUNCTION CDECL(BYVAL AS GtkWidget PTR, BYVAL AS GdkEventSelection PTR) AS gboolean
  selection_request_event AS FUNCTION CDECL(BYVAL AS GtkWidget PTR, BYVAL AS GdkEventSelection PTR) AS gboolean
  selection_notify_event AS FUNCTION CDECL(BYVAL AS GtkWidget PTR, BYVAL AS GdkEventSelection PTR) AS gboolean
  proximity_in_event AS FUNCTION CDECL(BYVAL AS GtkWidget PTR, BYVAL AS GdkEventProximity PTR) AS gboolean
  proximity_out_event AS FUNCTION CDECL(BYVAL AS GtkWidget PTR, BYVAL AS GdkEventProximity PTR) AS gboolean
  visibility_notify_event AS FUNCTION CDECL(BYVAL AS GtkWidget PTR, BYVAL AS GdkEventVisibility PTR) AS gboolean
  window_state_event AS FUNCTION CDECL(BYVAL AS GtkWidget PTR, BYVAL AS GdkEventWindowState PTR) AS gboolean
  damage_event AS FUNCTION CDECL(BYVAL AS GtkWidget PTR, BYVAL AS GdkEventExpose PTR) AS gboolean
  grab_broken_event AS FUNCTION CDECL(BYVAL AS GtkWidget PTR, BYVAL AS GdkEventGrabBroken PTR) AS gboolean
  selection_get AS SUB CDECL(BYVAL AS GtkWidget PTR, BYVAL AS GtkSelectionData PTR, BYVAL AS guint, BYVAL AS guint)
  selection_received AS SUB CDECL(BYVAL AS GtkWidget PTR, BYVAL AS GtkSelectionData PTR, BYVAL AS guint)
  drag_begin AS SUB CDECL(BYVAL AS GtkWidget PTR, BYVAL AS GdkDragContext PTR)
  drag_end AS SUB CDECL(BYVAL AS GtkWidget PTR, BYVAL AS GdkDragContext PTR)
  drag_data_get AS SUB CDECL(BYVAL AS GtkWidget PTR, BYVAL AS GdkDragContext PTR, BYVAL AS GtkSelectionData PTR, BYVAL AS guint, BYVAL AS guint)
  drag_data_delete AS SUB CDECL(BYVAL AS GtkWidget PTR, BYVAL AS GdkDragContext PTR)
  drag_leave AS SUB CDECL(BYVAL AS GtkWidget PTR, BYVAL AS GdkDragContext PTR, BYVAL AS guint)
  drag_motion AS FUNCTION CDECL(BYVAL AS GtkWidget PTR, BYVAL AS GdkDragContext PTR, BYVAL AS gint, BYVAL AS gint, BYVAL AS guint) AS gboolean
  drag_drop AS FUNCTION CDECL(BYVAL AS GtkWidget PTR, BYVAL AS GdkDragContext PTR, BYVAL AS gint, BYVAL AS gint, BYVAL AS guint) AS gboolean
  drag_data_received AS SUB CDECL(BYVAL AS GtkWidget PTR, BYVAL AS GdkDragContext PTR, BYVAL AS gint, BYVAL AS gint, BYVAL AS GtkSelectionData PTR, BYVAL AS guint, BYVAL AS guint)
  drag_failed AS FUNCTION CDECL(BYVAL AS GtkWidget PTR, BYVAL AS GdkDragContext PTR, BYVAL AS GtkDragResult) AS gboolean
  popup_menu AS FUNCTION CDECL(BYVAL AS GtkWidget PTR) AS gboolean
  show_help AS FUNCTION CDECL(BYVAL AS GtkWidget PTR, BYVAL AS GtkWidgetHelpType) AS gboolean
  get_accessible AS FUNCTION CDECL(BYVAL AS GtkWidget PTR) AS AtkObject PTR
  screen_changed AS SUB CDECL(BYVAL AS GtkWidget PTR, BYVAL AS GdkScreen PTR)
  can_activate_accel AS FUNCTION CDECL(BYVAL AS GtkWidget PTR, BYVAL AS guint) AS gboolean
  composited_changed AS SUB CDECL(BYVAL AS GtkWidget PTR)
  query_tooltip AS FUNCTION CDECL(BYVAL AS GtkWidget PTR, BYVAL AS gint, BYVAL AS gint, BYVAL AS gboolean, BYVAL AS GtkTooltip PTR) AS gboolean
  compute_expand AS SUB CDECL(BYVAL AS GtkWidget PTR, BYVAL AS gboolean PTR, BYVAL AS gboolean PTR)
  adjust_size_request AS SUB CDECL(BYVAL AS GtkWidget PTR, BYVAL AS GtkOrientation, BYVAL AS gint PTR, BYVAL AS gint PTR)
  adjust_size_allocation AS SUB CDECL(BYVAL AS GtkWidget PTR, BYVAL AS GtkOrientation, BYVAL AS gint PTR, BYVAL AS gint PTR, BYVAL AS gint PTR, BYVAL AS gint PTR)
  style_updated AS SUB CDECL(BYVAL AS GtkWidget PTR)
  touch_event AS FUNCTION CDECL(BYVAL AS GtkWidget PTR, BYVAL AS GdkEventTouch PTR) AS gboolean
  get_preferred_height_and_baseline_for_width AS SUB CDECL(BYVAL AS GtkWidget PTR, BYVAL AS gint, BYVAL AS gint PTR, BYVAL AS gint PTR, BYVAL AS gint PTR, BYVAL AS gint PTR)
  adjust_baseline_request AS SUB CDECL(BYVAL AS GtkWidget PTR, BYVAL AS gint PTR, BYVAL AS gint PTR)
  adjust_baseline_allocation AS SUB CDECL(BYVAL AS GtkWidget PTR, BYVAL AS gint PTR)
  queue_draw_region AS SUB CDECL(BYVAL AS GtkWidget PTR, BYVAL AS const cairo_region_t PTR)
  AS GtkWidgetClassPrivate PTR priv
  _gtk_reserved6 AS SUB CDECL()
  _gtk_reserved7 AS SUB CDECL()
END TYPE
DECLARE SUB gtk_widget_class_bind_template_callback_full(BYVAL AS GtkWidgetClass PTR, BYVAL AS const gchar PTR, BYVAL AS GCallback)
DECLARE SUB gtk_widget_class_bind_template_child_full(BYVAL AS GtkWidgetClass PTR, BYVAL AS const gchar PTR, BYVAL AS gboolean, BYVAL AS gssize)
DECLARE FUNCTION gtk_widget_class_find_style_property(BYVAL AS GtkWidgetClass PTR, BYVAL AS const gchar PTR) AS GParamSpec PTR
DECLARE FUNCTION gtk_widget_class_get_css_name(BYVAL AS GtkWidgetClass PTR) AS const char PTR
DECLARE SUB gtk_widget_class_install_style_property(BYVAL AS GtkWidgetClass PTR, BYVAL AS GParamSpec PTR)
DECLARE SUB gtk_widget_class_install_style_property_parser(BYVAL AS GtkWidgetClass PTR, BYVAL AS GParamSpec PTR, BYVAL AS GtkRcPropertyParser)
DECLARE FUNCTION gtk_widget_class_list_style_properties(BYVAL AS GtkWidgetClass PTR, BYVAL AS guint PTR) AS GParamSpec PTR PTR
DECLARE SUB gtk_widget_class_set_accessible_role(BYVAL AS GtkWidgetClass PTR, BYVAL AS AtkRole)
DECLARE SUB gtk_widget_class_set_accessible_type(BYVAL AS GtkWidgetClass PTR, BYVAL AS GType)
DECLARE SUB gtk_widget_class_set_connect_func(BYVAL AS GtkWidgetClass PTR, BYVAL AS GtkBuilderConnectFunc, BYVAL AS gpointer, BYVAL AS GDestroyNotify)
DECLARE SUB gtk_widget_class_set_css_name(BYVAL AS GtkWidgetClass PTR, BYVAL AS const char PTR)
DECLARE SUB gtk_widget_class_set_template(BYVAL AS GtkWidgetClass PTR, BYVAL AS GBytes PTR)
DECLARE SUB gtk_widget_class_set_template_from_resource(BYVAL AS GtkWidgetClass PTR, BYVAL AS const gchar PTR)
TYPE _GtkWidgetAccessible
  AS GtkAccessible parent
  AS GtkWidgetAccessiblePrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_widget_accessible_get_type() AS GType
#DEFINE GTK_TYPE_WIDGET_ACCESSIBLE (gtk_widget_accessible_get_type())
#DEFINE GTK_WIDGET_ACCESSIBLE(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_WIDGET_ACCESSIBLE, GtkWidgetAccessible))
#DEFINE GTK_WIDGET_ACCESSIBLE_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_WIDGET_ACCESSIBLE, GtkWidgetAccessibleClass))
#DEFINE GTK_IS_WIDGET_ACCESSIBLE(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_WIDGET_ACCESSIBLE))
#DEFINE GTK_IS_CLASS_WIDGET_ACCESSIBLE(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_WIDGET_ACCESSIBLE))
#DEFINE GTK_WIDGET_ACCESSIBLE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_WIDGET_ACCESSIBLE, GtkWidgetAccessibleClass))
TYPE _GtkWidgetAccessibleClass
  AS GtkAccessibleClass parent_class
  notify_gtk AS SUB CDECL(BYVAL AS GObject PTR, BYVAL AS GParamSpec PTR)
END TYPE
TYPE GtkCallback AS SUB CDECL(BYVAL AS GtkWidget PTR, BYVAL AS gpointer)
TYPE _GtkContainer
  AS GtkWidget widget
  AS GtkContainerPrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_container_get_type() AS GType
#DEFINE GTK_TYPE_CONTAINER (gtk_container_get_type())
#DEFINE GTK_CONTAINER(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_CONTAINER, GtkContainer))
#DEFINE GTK_CONTAINER_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_CONTAINER, GtkContainerClass))
#DEFINE GTK_IS_CONTAINER(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_CONTAINER))
#DEFINE GTK_IS_CLASS_CONTAINER(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_CONTAINER))
#DEFINE GTK_CONTAINER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_CONTAINER, GtkContainerClass))
DECLARE SUB gtk_container_add(BYVAL AS GtkContainer PTR, BYVAL AS GtkWidget PTR)
DECLARE SUB gtk_container_add_with_properties(BYVAL AS GtkContainer PTR, BYVAL AS GtkWidget PTR, BYVAL AS const gchar PTR, ...)
DECLARE SUB gtk_container_check_resize(BYVAL AS GtkContainer PTR)
DECLARE SUB gtk_container_child_get(BYVAL AS GtkContainer PTR, BYVAL AS GtkWidget PTR, BYVAL AS const gchar PTR, ...)
DECLARE SUB gtk_container_child_get_property(BYVAL AS GtkContainer PTR, BYVAL AS GtkWidget PTR, BYVAL AS const gchar PTR, BYVAL AS GValue PTR)
DECLARE SUB gtk_container_child_get_valist(BYVAL AS GtkContainer PTR, BYVAL AS GtkWidget PTR, BYVAL AS const gchar PTR, BYVAL AS va_list)
DECLARE SUB gtk_container_child_notify(BYVAL AS GtkContainer PTR, BYVAL AS GtkWidget PTR, BYVAL AS const gchar PTR)
DECLARE SUB gtk_container_child_notify_by_pspec(BYVAL AS GtkContainer PTR, BYVAL AS GtkWidget PTR, BYVAL AS GParamSpec PTR)
DECLARE SUB gtk_container_child_set(BYVAL AS GtkContainer PTR, BYVAL AS GtkWidget PTR, BYVAL AS const gchar PTR, ...)
DECLARE SUB gtk_container_child_set_property(BYVAL AS GtkContainer PTR, BYVAL AS GtkWidget PTR, BYVAL AS const gchar PTR, BYVAL AS const GValue PTR)
DECLARE SUB gtk_container_child_set_valist(BYVAL AS GtkContainer PTR, BYVAL AS GtkWidget PTR, BYVAL AS const gchar PTR, BYVAL AS va_list)
DECLARE FUNCTION gtk_container_child_type(BYVAL AS GtkContainer PTR) AS GType
DECLARE SUB gtk_container_forall(BYVAL AS GtkContainer PTR, BYVAL AS GtkCallback, BYVAL AS gpointer)
DECLARE SUB gtk_container_foreach(BYVAL AS GtkContainer PTR, BYVAL AS GtkCallback, BYVAL AS gpointer)
DECLARE FUNCTION gtk_container_get_border_width(BYVAL AS GtkContainer PTR) AS guint
DECLARE FUNCTION gtk_container_get_children(BYVAL AS GtkContainer PTR) AS GList PTR
DECLARE FUNCTION gtk_container_get_focus_chain(BYVAL AS GtkContainer PTR, BYVAL AS GList PTR PTR) AS gboolean
DECLARE FUNCTION gtk_container_get_focus_child(BYVAL AS GtkContainer PTR) AS GtkWidget PTR
DECLARE FUNCTION gtk_container_get_focus_hadjustment(BYVAL AS GtkContainer PTR) AS GtkAdjustment PTR
DECLARE FUNCTION gtk_container_get_focus_vadjustment(BYVAL AS GtkContainer PTR) AS GtkAdjustment PTR
DECLARE FUNCTION gtk_container_get_path_for_child(BYVAL AS GtkContainer PTR, BYVAL AS GtkWidget PTR) AS GtkWidgetPath PTR
DECLARE FUNCTION gtk_container_get_resize_mode(BYVAL AS GtkContainer PTR) AS GtkResizeMode
DECLARE SUB gtk_container_propagate_draw(BYVAL AS GtkContainer PTR, BYVAL AS GtkWidget PTR, BYVAL AS cairo_t PTR)
DECLARE SUB gtk_container_remove(BYVAL AS GtkContainer PTR, BYVAL AS GtkWidget PTR)
DECLARE SUB gtk_container_resize_children(BYVAL AS GtkContainer PTR)
DECLARE SUB gtk_container_set_border_width(BYVAL AS GtkContainer PTR, BYVAL AS guint)
DECLARE SUB gtk_container_set_focus_chain(BYVAL AS GtkContainer PTR, BYVAL AS GList PTR)
DECLARE SUB gtk_container_set_focus_child(BYVAL AS GtkContainer PTR, BYVAL AS GtkWidget PTR)
DECLARE SUB gtk_container_set_focus_hadjustment(BYVAL AS GtkContainer PTR, BYVAL AS GtkAdjustment PTR)
DECLARE SUB gtk_container_set_focus_vadjustment(BYVAL AS GtkContainer PTR, BYVAL AS GtkAdjustment PTR)
DECLARE SUB gtk_container_set_reallocate_redraws(BYVAL AS GtkContainer PTR, BYVAL AS gboolean)
DECLARE SUB gtk_container_set_resize_mode(BYVAL AS GtkContainer PTR, BYVAL AS GtkResizeMode)
DECLARE SUB gtk_container_unset_focus_chain(BYVAL AS GtkContainer PTR)
TYPE _GtkContainerClass
  AS GtkWidgetClass parent_class
  add AS SUB CDECL(BYVAL AS GtkContainer PTR, BYVAL AS GtkWidget PTR)
  remove AS SUB CDECL(BYVAL AS GtkContainer PTR, BYVAL AS GtkWidget PTR)
  check_resize AS SUB CDECL(BYVAL AS GtkContainer PTR)
  forall AS SUB CDECL(BYVAL AS GtkContainer PTR, BYVAL AS gboolean, BYVAL AS GtkCallback, BYVAL AS gpointer)
  set_focus_child AS SUB CDECL(BYVAL AS GtkContainer PTR, BYVAL AS GtkWidget PTR)
  child_type AS FUNCTION CDECL(BYVAL AS GtkContainer PTR) AS GType
  composite_name AS FUNCTION CDECL(BYVAL AS GtkContainer PTR, BYVAL AS GtkWidget PTR) AS gchar PTR
  set_child_property AS SUB CDECL(BYVAL AS GtkContainer PTR, BYVAL AS GtkWidget PTR, BYVAL AS guint, BYVAL AS const GValue PTR, BYVAL AS GParamSpec PTR)
  get_child_property AS SUB CDECL(BYVAL AS GtkContainer PTR, BYVAL AS GtkWidget PTR, BYVAL AS guint, BYVAL AS GValue PTR, BYVAL AS GParamSpec PTR)
  get_path_for_child AS FUNCTION CDECL(BYVAL AS GtkContainer PTR, BYVAL AS GtkWidget PTR) AS GtkWidgetPath PTR
  AS guint /'unsigned int'/ _handle_border_width : 1
  _gtk_reserved1 AS SUB CDECL()
  _gtk_reserved2 AS SUB CDECL()
  _gtk_reserved3 AS SUB CDECL()
  _gtk_reserved4 AS SUB CDECL()
  _gtk_reserved5 AS SUB CDECL()
  _gtk_reserved6 AS SUB CDECL()
  _gtk_reserved7 AS SUB CDECL()
  _gtk_reserved8 AS SUB CDECL()
END TYPE
DECLARE FUNCTION gtk_container_class_find_child_property(BYVAL AS GObjectClass PTR, BYVAL AS const gchar PTR) AS GParamSpec PTR
DECLARE SUB gtk_container_class_handle_border_width(BYVAL AS GtkContainerClass PTR)
DECLARE SUB gtk_container_class_install_child_properties(BYVAL AS GtkContainerClass PTR, BYVAL AS guint, BYVAL AS GParamSpec PTR PTR)
DECLARE SUB gtk_container_class_install_child_property(BYVAL AS GtkContainerClass PTR, BYVAL AS guint, BYVAL AS GParamSpec PTR)
DECLARE FUNCTION gtk_container_class_list_child_properties(BYVAL AS GObjectClass PTR, BYVAL AS guint PTR) AS GParamSpec PTR PTR
TYPE _GtkBin
  AS GtkContainer container
  AS GtkBinPrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_bin_get_type() AS GType
#DEFINE GTK_TYPE_BIN (gtk_bin_get_type())
#DEFINE GTK_BIN(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_BIN, GtkBin))
#DEFINE GTK_BIN_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_BIN, GtkBinClass))
#DEFINE GTK_IS_BIN(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_BIN))
#DEFINE GTK_IS_CLASS_BIN(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_BIN))
#DEFINE GTK_BIN_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_BIN, GtkBinClass))
DECLARE FUNCTION gtk_bin_get_child(BYVAL AS GtkBin PTR) AS GtkWidget PTR
TYPE _GtkBinClass
  AS GtkContainerClass parent_class
  _gtk_reserved1 AS SUB CDECL()
  _gtk_reserved2 AS SUB CDECL()
  _gtk_reserved3 AS SUB CDECL()
  _gtk_reserved4 AS SUB CDECL()
END TYPE
TYPE _GtkWindow
  AS GtkBin bin
  AS GtkWindowPrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_window_get_type() AS GType
#DEFINE GTK_TYPE_WINDOW (gtk_window_get_type())
#DEFINE GTK_WINDOW(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_WINDOW, GtkWindow))
#DEFINE GTK_WINDOW_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_WINDOW, GtkWindowClass))
#DEFINE GTK_IS_WINDOW(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_WINDOW))
#DEFINE GTK_IS_CLASS_WINDOW(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_WINDOW))
#DEFINE GTK_WINDOW_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_WINDOW, GtkWindowClass))
DECLARE FUNCTION gtk_window_new(BYVAL AS GtkWindowType) AS GtkWidget PTR
DECLARE FUNCTION gtk_window_get_default_icon_list() AS GList PTR
DECLARE FUNCTION gtk_window_get_default_icon_name() AS const gchar PTR
DECLARE FUNCTION gtk_window_list_toplevels() AS GList PTR
DECLARE SUB gtk_window_set_auto_startup_notification(BYVAL AS gboolean)
DECLARE SUB gtk_window_set_default_icon(BYVAL AS GdkPixbuf PTR)
DECLARE FUNCTION gtk_window_set_default_icon_from_file(BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE SUB gtk_window_set_default_icon_list(BYVAL AS GList PTR)
DECLARE SUB gtk_window_set_default_icon_name(BYVAL AS const gchar PTR)
DECLARE SUB gtk_window_set_interactive_debugging(BYVAL AS gboolean)
DECLARE FUNCTION gtk_window_activate_default(BYVAL AS GtkWindow PTR) AS gboolean
DECLARE FUNCTION gtk_window_activate_focus(BYVAL AS GtkWindow PTR) AS gboolean
DECLARE FUNCTION gtk_window_activate_key(BYVAL AS GtkWindow PTR, BYVAL AS GdkEventKey PTR) AS gboolean
DECLARE SUB gtk_window_add_accel_group(BYVAL AS GtkWindow PTR, BYVAL AS GtkAccelGroup PTR)
DECLARE SUB gtk_window_add_mnemonic(BYVAL AS GtkWindow PTR, BYVAL AS guint, BYVAL AS GtkWidget PTR)
DECLARE SUB gtk_window_begin_move_drag(BYVAL AS GtkWindow PTR, BYVAL AS gint, BYVAL AS gint, BYVAL AS gint, BYVAL AS guint32)
DECLARE SUB gtk_window_begin_resize_drag(BYVAL AS GtkWindow PTR, BYVAL AS GdkWindowEdge, BYVAL AS gint, BYVAL AS gint, BYVAL AS gint, BYVAL AS guint32)
DECLARE SUB gtk_window_close(BYVAL AS GtkWindow PTR)
DECLARE SUB gtk_window_deiconify(BYVAL AS GtkWindow PTR)
DECLARE SUB gtk_window_fullscreen(BYVAL AS GtkWindow PTR)
DECLARE SUB gtk_window_fullscreen_on_monitor(BYVAL AS GtkWindow PTR, BYVAL AS GdkScreen PTR, BYVAL AS gint)
DECLARE FUNCTION gtk_window_get_accept_focus(BYVAL AS GtkWindow PTR) AS gboolean
DECLARE FUNCTION gtk_window_get_application(BYVAL AS GtkWindow PTR) AS GtkApplication PTR
DECLARE FUNCTION gtk_window_get_attached_to(BYVAL AS GtkWindow PTR) AS GtkWidget PTR
DECLARE FUNCTION gtk_window_get_decorated(BYVAL AS GtkWindow PTR) AS gboolean
DECLARE SUB gtk_window_get_default_size(BYVAL AS GtkWindow PTR, BYVAL AS gint PTR, BYVAL AS gint PTR)
DECLARE FUNCTION gtk_window_get_default_widget(BYVAL AS GtkWindow PTR) AS GtkWidget PTR
DECLARE FUNCTION gtk_window_get_deletable(BYVAL AS GtkWindow PTR) AS gboolean
DECLARE FUNCTION gtk_window_get_destroy_with_parent(BYVAL AS GtkWindow PTR) AS gboolean
DECLARE FUNCTION gtk_window_get_focus(BYVAL AS GtkWindow PTR) AS GtkWidget PTR
DECLARE FUNCTION gtk_window_get_focus_on_map(BYVAL AS GtkWindow PTR) AS gboolean
DECLARE FUNCTION gtk_window_get_focus_visible(BYVAL AS GtkWindow PTR) AS gboolean
DECLARE FUNCTION gtk_window_get_gravity(BYVAL AS GtkWindow PTR) AS GdkGravity
DECLARE FUNCTION gtk_window_get_group(BYVAL AS GtkWindow PTR) AS GtkWindowGroup PTR
DECLARE FUNCTION gtk_window_get_has_resize_grip(BYVAL AS GtkWindow PTR) AS gboolean
DECLARE FUNCTION gtk_window_get_hide_titlebar_when_maximized(BYVAL AS GtkWindow PTR) AS gboolean
DECLARE FUNCTION gtk_window_get_icon(BYVAL AS GtkWindow PTR) AS GdkPixbuf PTR
DECLARE FUNCTION gtk_window_get_icon_list(BYVAL AS GtkWindow PTR) AS GList PTR
DECLARE FUNCTION gtk_window_get_icon_name(BYVAL AS GtkWindow PTR) AS const gchar PTR
DECLARE FUNCTION gtk_window_get_mnemonic_modifier(BYVAL AS GtkWindow PTR) AS GdkModifierType
DECLARE FUNCTION gtk_window_get_mnemonics_visible(BYVAL AS GtkWindow PTR) AS gboolean
DECLARE FUNCTION gtk_window_get_modal(BYVAL AS GtkWindow PTR) AS gboolean
DECLARE FUNCTION gtk_window_get_opacity(BYVAL AS GtkWindow PTR) AS gdouble
DECLARE SUB gtk_window_get_position(BYVAL AS GtkWindow PTR, BYVAL AS gint PTR, BYVAL AS gint PTR)
DECLARE FUNCTION gtk_window_get_resizable(BYVAL AS GtkWindow PTR) AS gboolean
DECLARE FUNCTION gtk_window_get_resize_grip_area(BYVAL AS GtkWindow PTR, BYVAL AS GdkRectangle PTR) AS gboolean
DECLARE FUNCTION gtk_window_get_role(BYVAL AS GtkWindow PTR) AS const gchar PTR
DECLARE FUNCTION gtk_window_get_screen(BYVAL AS GtkWindow PTR) AS GdkScreen PTR
DECLARE SUB gtk_window_get_size(BYVAL AS GtkWindow PTR, BYVAL AS gint PTR, BYVAL AS gint PTR)
DECLARE FUNCTION gtk_window_get_skip_pager_hint(BYVAL AS GtkWindow PTR) AS gboolean
DECLARE FUNCTION gtk_window_get_skip_taskbar_hint(BYVAL AS GtkWindow PTR) AS gboolean
DECLARE FUNCTION gtk_window_get_title(BYVAL AS GtkWindow PTR) AS const gchar PTR
DECLARE FUNCTION gtk_window_get_titlebar(BYVAL AS GtkWindow PTR) AS GtkWidget PTR
DECLARE FUNCTION gtk_window_get_transient_for(BYVAL AS GtkWindow PTR) AS GtkWindow PTR
DECLARE FUNCTION gtk_window_get_type_hint(BYVAL AS GtkWindow PTR) AS GdkWindowTypeHint
DECLARE FUNCTION gtk_window_get_urgency_hint(BYVAL AS GtkWindow PTR) AS gboolean
DECLARE FUNCTION gtk_window_get_window_type(BYVAL AS GtkWindow PTR) AS GtkWindowType
DECLARE FUNCTION gtk_window_has_group(BYVAL AS GtkWindow PTR) AS gboolean
DECLARE FUNCTION gtk_window_has_toplevel_focus(BYVAL AS GtkWindow PTR) AS gboolean
DECLARE SUB gtk_window_iconify(BYVAL AS GtkWindow PTR)
DECLARE FUNCTION gtk_window_is_active(BYVAL AS GtkWindow PTR) AS gboolean
DECLARE FUNCTION gtk_window_is_maximized(BYVAL AS GtkWindow PTR) AS gboolean
DECLARE SUB gtk_window_maximize(BYVAL AS GtkWindow PTR)
DECLARE FUNCTION gtk_window_mnemonic_activate(BYVAL AS GtkWindow PTR, BYVAL AS guint, BYVAL AS GdkModifierType) AS gboolean
DECLARE SUB gtk_window_move(BYVAL AS GtkWindow PTR, BYVAL AS gint, BYVAL AS gint)
DECLARE FUNCTION gtk_window_parse_geometry(BYVAL AS GtkWindow PTR, BYVAL AS const gchar PTR) AS gboolean
DECLARE SUB gtk_window_present(BYVAL AS GtkWindow PTR)
DECLARE SUB gtk_window_present_with_time(BYVAL AS GtkWindow PTR, BYVAL AS guint32)
DECLARE FUNCTION gtk_window_propagate_key_event(BYVAL AS GtkWindow PTR, BYVAL AS GdkEventKey PTR) AS gboolean
DECLARE SUB gtk_window_remove_accel_group(BYVAL AS GtkWindow PTR, BYVAL AS GtkAccelGroup PTR)
DECLARE SUB gtk_window_remove_mnemonic(BYVAL AS GtkWindow PTR, BYVAL AS guint, BYVAL AS GtkWidget PTR)
DECLARE SUB gtk_window_reshow_with_initial_size(BYVAL AS GtkWindow PTR)
DECLARE SUB gtk_window_resize(BYVAL AS GtkWindow PTR, BYVAL AS gint, BYVAL AS gint)
DECLARE FUNCTION gtk_window_resize_grip_is_visible(BYVAL AS GtkWindow PTR) AS gboolean
DECLARE SUB gtk_window_resize_to_geometry(BYVAL AS GtkWindow PTR, BYVAL AS gint, BYVAL AS gint)
DECLARE SUB gtk_window_set_accept_focus(BYVAL AS GtkWindow PTR, BYVAL AS gboolean)
DECLARE SUB gtk_window_set_application(BYVAL AS GtkWindow PTR, BYVAL AS GtkApplication PTR)
DECLARE SUB gtk_window_set_attached_to(BYVAL AS GtkWindow PTR, BYVAL AS GtkWidget PTR)
DECLARE SUB gtk_window_set_decorated(BYVAL AS GtkWindow PTR, BYVAL AS gboolean)
DECLARE SUB gtk_window_set_default(BYVAL AS GtkWindow PTR, BYVAL AS GtkWidget PTR)
DECLARE SUB gtk_window_set_default_geometry(BYVAL AS GtkWindow PTR, BYVAL AS gint, BYVAL AS gint)
DECLARE SUB gtk_window_set_default_size(BYVAL AS GtkWindow PTR, BYVAL AS gint, BYVAL AS gint)
DECLARE SUB gtk_window_set_deletable(BYVAL AS GtkWindow PTR, BYVAL AS gboolean)
DECLARE SUB gtk_window_set_destroy_with_parent(BYVAL AS GtkWindow PTR, BYVAL AS gboolean)
DECLARE SUB gtk_window_set_focus(BYVAL AS GtkWindow PTR, BYVAL AS GtkWidget PTR)
DECLARE SUB gtk_window_set_focus_on_map(BYVAL AS GtkWindow PTR, BYVAL AS gboolean)
DECLARE SUB gtk_window_set_focus_visible(BYVAL AS GtkWindow PTR, BYVAL AS gboolean)
DECLARE SUB gtk_window_set_geometry_hints(BYVAL AS GtkWindow PTR, BYVAL AS GtkWidget PTR, BYVAL AS GdkGeometry PTR, BYVAL AS GdkWindowHints)
DECLARE SUB gtk_window_set_gravity(BYVAL AS GtkWindow PTR, BYVAL AS GdkGravity)
DECLARE SUB gtk_window_set_has_resize_grip(BYVAL AS GtkWindow PTR, BYVAL AS gboolean)
DECLARE SUB gtk_window_set_has_user_ref_count(BYVAL AS GtkWindow PTR, BYVAL AS gboolean)
DECLARE SUB gtk_window_set_hide_titlebar_when_maximized(BYVAL AS GtkWindow PTR, BYVAL AS gboolean)
DECLARE SUB gtk_window_set_icon(BYVAL AS GtkWindow PTR, BYVAL AS GdkPixbuf PTR)
DECLARE FUNCTION gtk_window_set_icon_from_file(BYVAL AS GtkWindow PTR, BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE SUB gtk_window_set_icon_list(BYVAL AS GtkWindow PTR, BYVAL AS GList PTR)
DECLARE SUB gtk_window_set_icon_name(BYVAL AS GtkWindow PTR, BYVAL AS const gchar PTR)
DECLARE SUB gtk_window_set_keep_above(BYVAL AS GtkWindow PTR, BYVAL AS gboolean)
DECLARE SUB gtk_window_set_keep_below(BYVAL AS GtkWindow PTR, BYVAL AS gboolean)
DECLARE SUB gtk_window_set_mnemonic_modifier(BYVAL AS GtkWindow PTR, BYVAL AS GdkModifierType)
DECLARE SUB gtk_window_set_mnemonics_visible(BYVAL AS GtkWindow PTR, BYVAL AS gboolean)
DECLARE SUB gtk_window_set_modal(BYVAL AS GtkWindow PTR, BYVAL AS gboolean)
DECLARE SUB gtk_window_set_opacity(BYVAL AS GtkWindow PTR, BYVAL AS gdouble)
DECLARE SUB gtk_window_set_position(BYVAL AS GtkWindow PTR, BYVAL AS GtkWindowPosition)
DECLARE SUB gtk_window_set_resizable(BYVAL AS GtkWindow PTR, BYVAL AS gboolean)
DECLARE SUB gtk_window_set_role(BYVAL AS GtkWindow PTR, BYVAL AS const gchar PTR)
DECLARE SUB gtk_window_set_screen(BYVAL AS GtkWindow PTR, BYVAL AS GdkScreen PTR)
DECLARE SUB gtk_window_set_skip_pager_hint(BYVAL AS GtkWindow PTR, BYVAL AS gboolean)
DECLARE SUB gtk_window_set_skip_taskbar_hint(BYVAL AS GtkWindow PTR, BYVAL AS gboolean)
DECLARE SUB gtk_window_set_startup_id(BYVAL AS GtkWindow PTR, BYVAL AS const gchar PTR)
DECLARE SUB gtk_window_set_title(BYVAL AS GtkWindow PTR, BYVAL AS const gchar PTR)
DECLARE SUB gtk_window_set_titlebar(BYVAL AS GtkWindow PTR, BYVAL AS GtkWidget PTR)
DECLARE SUB gtk_window_set_transient_for(BYVAL AS GtkWindow PTR, BYVAL AS GtkWindow PTR)
DECLARE SUB gtk_window_set_type_hint(BYVAL AS GtkWindow PTR, BYVAL AS GdkWindowTypeHint)
DECLARE SUB gtk_window_set_urgency_hint(BYVAL AS GtkWindow PTR, BYVAL AS gboolean)
DECLARE SUB gtk_window_set_wmclass(BYVAL AS GtkWindow PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR)
DECLARE SUB gtk_window_stick(BYVAL AS GtkWindow PTR)
DECLARE SUB gtk_window_unfullscreen(BYVAL AS GtkWindow PTR)
DECLARE SUB gtk_window_unmaximize(BYVAL AS GtkWindow PTR)
DECLARE SUB gtk_window_unstick(BYVAL AS GtkWindow PTR)
TYPE _GtkWindowClass
  AS GtkBinClass parent_class
  set_focus AS SUB CDECL(BYVAL AS GtkWindow PTR, BYVAL AS GtkWidget PTR)
  activate_focus AS SUB CDECL(BYVAL AS GtkWindow PTR)
  activate_default AS SUB CDECL(BYVAL AS GtkWindow PTR)
  keys_changed AS SUB CDECL(BYVAL AS GtkWindow PTR)
  enable_debugging AS FUNCTION CDECL(BYVAL AS GtkWindow PTR, BYVAL AS gboolean) AS gboolean
  _gtk_reserved1 AS SUB CDECL()
  _gtk_reserved2 AS SUB CDECL()
  _gtk_reserved3 AS SUB CDECL()
END TYPE
TYPE _GtkDialog
  AS GtkWindow window
  AS GtkDialogPrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_dialog_get_type() AS GType
#DEFINE GTK_TYPE_DIALOG (gtk_dialog_get_type())
#DEFINE GTK_DIALOG(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_DIALOG, GtkDialog))
#DEFINE GTK_DIALOG_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_DIALOG, GtkDialogClass))
#DEFINE GTK_IS_DIALOG(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_DIALOG))
#DEFINE GTK_IS_CLASS_DIALOG(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_DIALOG))
#DEFINE GTK_DIALOG_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_DIALOG, GtkDialogClass))
DECLARE FUNCTION gtk_dialog_new() AS GtkWidget PTR
DECLARE FUNCTION gtk_dialog_new_with_buttons(BYVAL AS const gchar PTR, BYVAL AS GtkWindow PTR, BYVAL AS GtkDialogFlags, BYVAL AS const gchar PTR, ...) AS GtkWidget PTR
DECLARE SUB gtk_dialog_add_action_widget(BYVAL AS GtkDialog PTR, BYVAL AS GtkWidget PTR, BYVAL AS gint)
DECLARE FUNCTION gtk_dialog_add_button(BYVAL AS GtkDialog PTR, BYVAL AS const gchar PTR, BYVAL AS gint) AS GtkWidget PTR
DECLARE SUB gtk_dialog_add_buttons(BYVAL AS GtkDialog PTR, BYVAL AS const gchar PTR, ...)
DECLARE FUNCTION gtk_dialog_get_action_area(BYVAL AS GtkDialog PTR) AS GtkWidget PTR
DECLARE FUNCTION gtk_dialog_get_content_area(BYVAL AS GtkDialog PTR) AS GtkWidget PTR
DECLARE FUNCTION gtk_dialog_get_header_bar(BYVAL AS GtkDialog PTR) AS GtkWidget PTR
DECLARE FUNCTION gtk_dialog_get_response_for_widget(BYVAL AS GtkDialog PTR, BYVAL AS GtkWidget PTR) AS gint
DECLARE FUNCTION gtk_dialog_get_widget_for_response(BYVAL AS GtkDialog PTR, BYVAL AS gint) AS GtkWidget PTR
DECLARE SUB gtk_dialog_response(BYVAL AS GtkDialog PTR, BYVAL AS gint)
DECLARE FUNCTION gtk_dialog_run(BYVAL AS GtkDialog PTR) AS gint
DECLARE SUB gtk_dialog_set_alternative_button_order(BYVAL AS GtkDialog PTR, BYVAL AS gint, ...)
DECLARE SUB gtk_dialog_set_alternative_button_order_from_array(BYVAL AS GtkDialog PTR, BYVAL AS gint, BYVAL AS gint PTR)
DECLARE SUB gtk_dialog_set_default_response(BYVAL AS GtkDialog PTR, BYVAL AS gint)
DECLARE SUB gtk_dialog_set_response_sensitive(BYVAL AS GtkDialog PTR, BYVAL AS gint, BYVAL AS gboolean)
TYPE _GtkDialogClass
  AS GtkWindowClass parent_class
  response AS SUB CDECL(BYVAL AS GtkDialog PTR, BYVAL AS gint)
  close AS SUB CDECL(BYVAL AS GtkDialog PTR)
  _gtk_reserved1 AS SUB CDECL()
  _gtk_reserved2 AS SUB CDECL()
  _gtk_reserved3 AS SUB CDECL()
  _gtk_reserved4 AS SUB CDECL()
END TYPE
TYPE GtkAccelGroupFindFunc AS FUNCTION CDECL(BYVAL AS GtkAccelKey PTR, BYVAL AS GClosure PTR, BYVAL AS gpointer) AS gboolean
TYPE GtkAccelMapForeach AS SUB CDECL(BYVAL AS gpointer, BYVAL AS const gchar PTR, BYVAL AS guint, BYVAL AS GdkModifierType, BYVAL AS gboolean)
TYPE GtkTranslateFunc AS FUNCTION CDECL(BYVAL AS const gchar PTR, BYVAL AS gpointer) AS gchar PTR
TYPE _GtkAccelKey
  AS guint accel_key
  AS GdkModifierType accel_mods
  AS guint accel_flags : 16
END TYPE
TYPE _GtkMisc
  AS GtkWidget widget
  AS GtkMiscPrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_misc_get_type() AS GType
#DEFINE GTK_TYPE_MISC (gtk_misc_get_type())
#DEFINE GTK_MISC(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_MISC, GtkMisc))
#DEFINE GTK_MISC_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_MISC, GtkMiscClass))
#DEFINE GTK_IS_MISC(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_MISC))
#DEFINE GTK_IS_CLASS_MISC(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_MISC))
#DEFINE GTK_MISC_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_MISC, GtkMiscClass))
DECLARE SUB gtk_misc_get_alignment(BYVAL AS GtkMisc PTR, BYVAL AS gfloat PTR, BYVAL AS gfloat PTR)
DECLARE SUB gtk_misc_get_padding(BYVAL AS GtkMisc PTR, BYVAL AS gint PTR, BYVAL AS gint PTR)
DECLARE SUB gtk_misc_set_alignment(BYVAL AS GtkMisc PTR, BYVAL AS gfloat, BYVAL AS gfloat)
DECLARE SUB gtk_misc_set_padding(BYVAL AS GtkMisc PTR, BYVAL AS gint, BYVAL AS gint)
TYPE _GtkMiscClass
  AS GtkWidgetClass parent_class
  _gtk_reserved1 AS SUB CDECL()
  _gtk_reserved2 AS SUB CDECL()
  _gtk_reserved3 AS SUB CDECL()
  _gtk_reserved4 AS SUB CDECL()
END TYPE
TYPE _GtkLabel
  AS GtkMisc misc
  AS GtkLabelPrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_label_get_type() AS GType
#DEFINE GTK_TYPE_LABEL (gtk_label_get_type())
#DEFINE GTK_LABEL(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_LABEL, GtkLabel))
#DEFINE GTK_LABEL_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_LABEL, GtkLabelClass))
#DEFINE GTK_IS_LABEL(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_LABEL))
#DEFINE GTK_IS_CLASS_LABEL(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_LABEL))
#DEFINE GTK_LABEL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_LABEL, GtkLabelClass))
DECLARE FUNCTION gtk_label_new(BYVAL AS const gchar PTR) AS GtkWidget PTR
DECLARE FUNCTION gtk_label_new_with_mnemonic(BYVAL AS const gchar PTR) AS GtkWidget PTR
DECLARE FUNCTION gtk_label_get_angle(BYVAL AS GtkLabel PTR) AS gdouble
DECLARE FUNCTION gtk_label_get_attributes(BYVAL AS GtkLabel PTR) AS PangoAttrList PTR
DECLARE FUNCTION gtk_label_get_current_uri(BYVAL AS GtkLabel PTR) AS const gchar PTR
DECLARE FUNCTION gtk_label_get_ellipsize(BYVAL AS GtkLabel PTR) AS PangoEllipsizeMode
DECLARE FUNCTION gtk_label_get_justify(BYVAL AS GtkLabel PTR) AS GtkJustification
DECLARE FUNCTION gtk_label_get_label(BYVAL AS GtkLabel PTR) AS const gchar PTR
DECLARE FUNCTION gtk_label_get_layout(BYVAL AS GtkLabel PTR) AS PangoLayout PTR
DECLARE SUB gtk_label_get_layout_offsets(BYVAL AS GtkLabel PTR, BYVAL AS gint PTR, BYVAL AS gint PTR)
DECLARE FUNCTION gtk_label_get_line_wrap(BYVAL AS GtkLabel PTR) AS gboolean
DECLARE FUNCTION gtk_label_get_line_wrap_mode(BYVAL AS GtkLabel PTR) AS PangoWrapMode
DECLARE FUNCTION gtk_label_get_lines(BYVAL AS GtkLabel PTR) AS gint
DECLARE FUNCTION gtk_label_get_max_width_chars(BYVAL AS GtkLabel PTR) AS gint
DECLARE FUNCTION gtk_label_get_mnemonic_keyval(BYVAL AS GtkLabel PTR) AS guint
DECLARE FUNCTION gtk_label_get_mnemonic_widget(BYVAL AS GtkLabel PTR) AS GtkWidget PTR
DECLARE FUNCTION gtk_label_get_selectable(BYVAL AS GtkLabel PTR) AS gboolean
DECLARE FUNCTION gtk_label_get_selection_bounds(BYVAL AS GtkLabel PTR, BYVAL AS gint PTR, BYVAL AS gint PTR) AS gboolean
DECLARE FUNCTION gtk_label_get_single_line_mode(BYVAL AS GtkLabel PTR) AS gboolean
DECLARE FUNCTION gtk_label_get_text(BYVAL AS GtkLabel PTR) AS const gchar PTR
DECLARE FUNCTION gtk_label_get_track_visited_links(BYVAL AS GtkLabel PTR) AS gboolean
DECLARE FUNCTION gtk_label_get_use_markup(BYVAL AS GtkLabel PTR) AS gboolean
DECLARE FUNCTION gtk_label_get_use_underline(BYVAL AS GtkLabel PTR) AS gboolean
DECLARE FUNCTION gtk_label_get_width_chars(BYVAL AS GtkLabel PTR) AS gint
DECLARE FUNCTION gtk_label_get_xalign(BYVAL AS GtkLabel PTR) AS gfloat
DECLARE FUNCTION gtk_label_get_yalign(BYVAL AS GtkLabel PTR) AS gfloat
DECLARE SUB gtk_label_select_region(BYVAL AS GtkLabel PTR, BYVAL AS gint, BYVAL AS gint)
DECLARE SUB gtk_label_set_angle(BYVAL AS GtkLabel PTR, BYVAL AS gdouble)
DECLARE SUB gtk_label_set_attributes(BYVAL AS GtkLabel PTR, BYVAL AS PangoAttrList PTR)
DECLARE SUB gtk_label_set_ellipsize(BYVAL AS GtkLabel PTR, BYVAL AS PangoEllipsizeMode)
DECLARE SUB gtk_label_set_justify(BYVAL AS GtkLabel PTR, BYVAL AS GtkJustification)
DECLARE SUB gtk_label_set_label(BYVAL AS GtkLabel PTR, BYVAL AS const gchar PTR)
DECLARE SUB gtk_label_set_line_wrap(BYVAL AS GtkLabel PTR, BYVAL AS gboolean)
DECLARE SUB gtk_label_set_line_wrap_mode(BYVAL AS GtkLabel PTR, BYVAL AS PangoWrapMode)
DECLARE SUB gtk_label_set_lines(BYVAL AS GtkLabel PTR, BYVAL AS gint)
DECLARE SUB gtk_label_set_markup(BYVAL AS GtkLabel PTR, BYVAL AS const gchar PTR)
DECLARE SUB gtk_label_set_markup_with_mnemonic(BYVAL AS GtkLabel PTR, BYVAL AS const gchar PTR)
DECLARE SUB gtk_label_set_max_width_chars(BYVAL AS GtkLabel PTR, BYVAL AS gint)
DECLARE SUB gtk_label_set_mnemonic_widget(BYVAL AS GtkLabel PTR, BYVAL AS GtkWidget PTR)
DECLARE SUB gtk_label_set_pattern(BYVAL AS GtkLabel PTR, BYVAL AS const gchar PTR)
DECLARE SUB gtk_label_set_selectable(BYVAL AS GtkLabel PTR, BYVAL AS gboolean)
DECLARE SUB gtk_label_set_single_line_mode(BYVAL AS GtkLabel PTR, BYVAL AS gboolean)
DECLARE SUB gtk_label_set_text(BYVAL AS GtkLabel PTR, BYVAL AS const gchar PTR)
DECLARE SUB gtk_label_set_text_with_mnemonic(BYVAL AS GtkLabel PTR, BYVAL AS const gchar PTR)
DECLARE SUB gtk_label_set_track_visited_links(BYVAL AS GtkLabel PTR, BYVAL AS gboolean)
DECLARE SUB gtk_label_set_use_markup(BYVAL AS GtkLabel PTR, BYVAL AS gboolean)
DECLARE SUB gtk_label_set_use_underline(BYVAL AS GtkLabel PTR, BYVAL AS gboolean)
DECLARE SUB gtk_label_set_width_chars(BYVAL AS GtkLabel PTR, BYVAL AS gint)
DECLARE SUB gtk_label_set_xalign(BYVAL AS GtkLabel PTR, BYVAL AS gfloat)
DECLARE SUB gtk_label_set_yalign(BYVAL AS GtkLabel PTR, BYVAL AS gfloat)
TYPE _GtkLabelClass
  AS GtkMiscClass parent_class
  move_cursor AS SUB CDECL(BYVAL AS GtkLabel PTR, BYVAL AS GtkMovementStep, BYVAL AS gint, BYVAL AS gboolean)
  copy_clipboard AS SUB CDECL(BYVAL AS GtkLabel PTR)
  populate_popup AS SUB CDECL(BYVAL AS GtkLabel PTR, BYVAL AS GtkMenu PTR)
  activate_link AS FUNCTION CDECL(BYVAL AS GtkLabel PTR, BYVAL AS const gchar PTR) AS gboolean
  _gtk_reserved1 AS SUB CDECL()
  _gtk_reserved2 AS SUB CDECL()
  _gtk_reserved3 AS SUB CDECL()
  _gtk_reserved4 AS SUB CDECL()
  _gtk_reserved5 AS SUB CDECL()
  _gtk_reserved6 AS SUB CDECL()
  _gtk_reserved7 AS SUB CDECL()
  _gtk_reserved8 AS SUB CDECL()
END TYPE
TYPE GtkTreeViewRowSeparatorFunc AS FUNCTION CDECL(BYVAL AS GtkTreeModel PTR, BYVAL AS GtkTreeIter PTR, BYVAL AS gpointer) AS gboolean
TYPE _GtkComboBox
  AS GtkBin parent_instance
  AS GtkComboBoxPrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_combo_box_get_type() AS GType
#DEFINE GTK_TYPE_COMBO_BOX (gtk_combo_box_get_type())
#DEFINE GTK_COMBO_BOX(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_COMBO_BOX, GtkComboBox))
#DEFINE GTK_COMBO_BOX_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_COMBO_BOX, GtkComboBoxClass))
#DEFINE GTK_IS_COMBO_BOX(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_COMBO_BOX))
#DEFINE GTK_IS_CLASS_COMBO_BOX(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_COMBO_BOX))
#DEFINE GTK_COMBO_BOX_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_COMBO_BOX, GtkComboBoxClass))
DECLARE FUNCTION gtk_combo_box_new() AS GtkWidget PTR
DECLARE FUNCTION gtk_combo_box_new_with_area(BYVAL AS GtkCellArea PTR) AS GtkWidget PTR
DECLARE FUNCTION gtk_combo_box_new_with_area_and_entry(BYVAL AS GtkCellArea PTR) AS GtkWidget PTR
DECLARE FUNCTION gtk_combo_box_new_with_entry() AS GtkWidget PTR
DECLARE FUNCTION gtk_combo_box_new_with_model(BYVAL AS GtkTreeModel PTR) AS GtkWidget PTR
DECLARE FUNCTION gtk_combo_box_new_with_model_and_entry(BYVAL AS GtkTreeModel PTR) AS GtkWidget PTR
DECLARE FUNCTION gtk_combo_box_get_active(BYVAL AS GtkComboBox PTR) AS gint
DECLARE FUNCTION gtk_combo_box_get_active_id(BYVAL AS GtkComboBox PTR) AS const gchar PTR
DECLARE FUNCTION gtk_combo_box_get_active_iter(BYVAL AS GtkComboBox PTR, BYVAL AS GtkTreeIter PTR) AS gboolean
DECLARE FUNCTION gtk_combo_box_get_add_tearoffs(BYVAL AS GtkComboBox PTR) AS gboolean
DECLARE FUNCTION gtk_combo_box_get_button_sensitivity(BYVAL AS GtkComboBox PTR) AS GtkSensitivityType
DECLARE FUNCTION gtk_combo_box_get_column_span_column(BYVAL AS GtkComboBox PTR) AS gint
DECLARE FUNCTION gtk_combo_box_get_entry_text_column(BYVAL AS GtkComboBox PTR) AS gint
DECLARE FUNCTION gtk_combo_box_get_focus_on_click(BYVAL AS GtkComboBox PTR) AS gboolean
DECLARE FUNCTION gtk_combo_box_get_has_entry(BYVAL AS GtkComboBox PTR) AS gboolean
DECLARE FUNCTION gtk_combo_box_get_id_column(BYVAL AS GtkComboBox PTR) AS gint
DECLARE FUNCTION gtk_combo_box_get_model(BYVAL AS GtkComboBox PTR) AS GtkTreeModel PTR
DECLARE FUNCTION gtk_combo_box_get_popup_accessible(BYVAL AS GtkComboBox PTR) AS AtkObject PTR
DECLARE FUNCTION gtk_combo_box_get_popup_fixed_width(BYVAL AS GtkComboBox PTR) AS gboolean
DECLARE FUNCTION gtk_combo_box_get_row_separator_func(BYVAL AS GtkComboBox PTR) AS GtkTreeViewRowSeparatorFunc
DECLARE FUNCTION gtk_combo_box_get_row_span_column(BYVAL AS GtkComboBox PTR) AS gint
DECLARE FUNCTION gtk_combo_box_get_title(BYVAL AS GtkComboBox PTR) AS const gchar PTR
DECLARE FUNCTION gtk_combo_box_get_wrap_width(BYVAL AS GtkComboBox PTR) AS gint
DECLARE SUB gtk_combo_box_popdown(BYVAL AS GtkComboBox PTR)
DECLARE SUB gtk_combo_box_popup(BYVAL AS GtkComboBox PTR)
DECLARE SUB gtk_combo_box_popup_for_device(BYVAL AS GtkComboBox PTR, BYVAL AS GdkDevice PTR)
DECLARE SUB gtk_combo_box_set_active(BYVAL AS GtkComboBox PTR, BYVAL AS gint)
DECLARE FUNCTION gtk_combo_box_set_active_id(BYVAL AS GtkComboBox PTR, BYVAL AS const gchar PTR) AS gboolean
DECLARE SUB gtk_combo_box_set_active_iter(BYVAL AS GtkComboBox PTR, BYVAL AS GtkTreeIter PTR)
DECLARE SUB gtk_combo_box_set_add_tearoffs(BYVAL AS GtkComboBox PTR, BYVAL AS gboolean)
DECLARE SUB gtk_combo_box_set_button_sensitivity(BYVAL AS GtkComboBox PTR, BYVAL AS GtkSensitivityType)
DECLARE SUB gtk_combo_box_set_column_span_column(BYVAL AS GtkComboBox PTR, BYVAL AS gint)
DECLARE SUB gtk_combo_box_set_entry_text_column(BYVAL AS GtkComboBox PTR, BYVAL AS gint)
DECLARE SUB gtk_combo_box_set_focus_on_click(BYVAL AS GtkComboBox PTR, BYVAL AS gboolean)
DECLARE SUB gtk_combo_box_set_id_column(BYVAL AS GtkComboBox PTR, BYVAL AS gint)
DECLARE SUB gtk_combo_box_set_model(BYVAL AS GtkComboBox PTR, BYVAL AS GtkTreeModel PTR)
DECLARE SUB gtk_combo_box_set_popup_fixed_width(BYVAL AS GtkComboBox PTR, BYVAL AS gboolean)
DECLARE SUB gtk_combo_box_set_row_separator_func(BYVAL AS GtkComboBox PTR, BYVAL AS GtkTreeViewRowSeparatorFunc, BYVAL AS gpointer, BYVAL AS GDestroyNotify)
DECLARE SUB gtk_combo_box_set_row_span_column(BYVAL AS GtkComboBox PTR, BYVAL AS gint)
DECLARE SUB gtk_combo_box_set_title(BYVAL AS GtkComboBox PTR, BYVAL AS const gchar PTR)
DECLARE SUB gtk_combo_box_set_wrap_width(BYVAL AS GtkComboBox PTR, BYVAL AS gint)
TYPE _GtkComboBoxClass
  AS GtkBinClass parent_class
  changed AS SUB CDECL(BYVAL AS GtkComboBox PTR)
  format_entry_text AS FUNCTION CDECL(BYVAL AS GtkComboBox PTR, BYVAL AS const gchar PTR) AS gchar PTR
  _gtk_reserved1 AS SUB CDECL()
  _gtk_reserved2 AS SUB CDECL()
  _gtk_reserved3 AS SUB CDECL()
END TYPE
TYPE _GtkBox
  AS GtkContainer container
  AS GtkBoxPrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_box_get_type() AS GType
#DEFINE GTK_TYPE_BOX (gtk_box_get_type())
#DEFINE GTK_BOX(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_BOX, GtkBox))
#DEFINE GTK_BOX_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_BOX, GtkBoxClass))
#DEFINE GTK_IS_BOX(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_BOX))
#DEFINE GTK_IS_CLASS_BOX(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_BOX))
#DEFINE GTK_BOX_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_BOX, GtkBoxClass))
DECLARE FUNCTION gtk_box_new(BYVAL AS GtkOrientation, BYVAL AS gint) AS GtkWidget PTR
DECLARE FUNCTION gtk_box_get_baseline_position(BYVAL AS GtkBox PTR) AS GtkBaselinePosition
DECLARE FUNCTION gtk_box_get_center_widget(BYVAL AS GtkBox PTR) AS GtkWidget PTR
DECLARE FUNCTION gtk_box_get_homogeneous(BYVAL AS GtkBox PTR) AS gboolean
DECLARE FUNCTION gtk_box_get_spacing(BYVAL AS GtkBox PTR) AS gint
DECLARE SUB gtk_box_pack_end(BYVAL AS GtkBox PTR, BYVAL AS GtkWidget PTR, BYVAL AS gboolean, BYVAL AS gboolean, BYVAL AS guint)
DECLARE SUB gtk_box_pack_start(BYVAL AS GtkBox PTR, BYVAL AS GtkWidget PTR, BYVAL AS gboolean, BYVAL AS gboolean, BYVAL AS guint)
DECLARE SUB gtk_box_query_child_packing(BYVAL AS GtkBox PTR, BYVAL AS GtkWidget PTR, BYVAL AS gboolean PTR, BYVAL AS gboolean PTR, BYVAL AS guint PTR, BYVAL AS GtkPackType PTR)
DECLARE SUB gtk_box_reorder_child(BYVAL AS GtkBox PTR, BYVAL AS GtkWidget PTR, BYVAL AS gint)
DECLARE SUB gtk_box_set_baseline_position(BYVAL AS GtkBox PTR, BYVAL AS GtkBaselinePosition)
DECLARE SUB gtk_box_set_center_widget(BYVAL AS GtkBox PTR, BYVAL AS GtkWidget PTR)
DECLARE SUB gtk_box_set_child_packing(BYVAL AS GtkBox PTR, BYVAL AS GtkWidget PTR, BYVAL AS gboolean, BYVAL AS gboolean, BYVAL AS guint, BYVAL AS GtkPackType)
DECLARE SUB gtk_box_set_homogeneous(BYVAL AS GtkBox PTR, BYVAL AS gboolean)
DECLARE SUB gtk_box_set_spacing(BYVAL AS GtkBox PTR, BYVAL AS gint)
TYPE _GtkBoxClass
  AS GtkContainerClass parent_class
  _gtk_reserved1 AS SUB CDECL()
  _gtk_reserved2 AS SUB CDECL()
  _gtk_reserved3 AS SUB CDECL()
  _gtk_reserved4 AS SUB CDECL()
END TYPE
TYPE _GtkFrame
  AS GtkBin bin
  AS GtkFramePrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_frame_get_type() AS GType
#DEFINE GTK_TYPE_FRAME (gtk_frame_get_type())
#DEFINE GTK_FRAME(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_FRAME, GtkFrame))
#DEFINE GTK_FRAME_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_FRAME, GtkFrameClass))
#DEFINE GTK_IS_FRAME(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_FRAME))
#DEFINE GTK_IS_CLASS_FRAME(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_FRAME))
#DEFINE GTK_FRAME_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_FRAME, GtkFrameClass))
DECLARE FUNCTION gtk_frame_new(BYVAL AS const gchar PTR) AS GtkWidget PTR
DECLARE FUNCTION gtk_frame_get_label(BYVAL AS GtkFrame PTR) AS const gchar PTR
DECLARE SUB gtk_frame_get_label_align(BYVAL AS GtkFrame PTR, BYVAL AS gfloat PTR, BYVAL AS gfloat PTR)
DECLARE FUNCTION gtk_frame_get_label_widget(BYVAL AS GtkFrame PTR) AS GtkWidget PTR
DECLARE FUNCTION gtk_frame_get_shadow_type(BYVAL AS GtkFrame PTR) AS GtkShadowType
DECLARE SUB gtk_frame_set_label(BYVAL AS GtkFrame PTR, BYVAL AS const gchar PTR)
DECLARE SUB gtk_frame_set_label_align(BYVAL AS GtkFrame PTR, BYVAL AS gfloat, BYVAL AS gfloat)
DECLARE SUB gtk_frame_set_label_widget(BYVAL AS GtkFrame PTR, BYVAL AS GtkWidget PTR)
DECLARE SUB gtk_frame_set_shadow_type(BYVAL AS GtkFrame PTR, BYVAL AS GtkShadowType)
TYPE _GtkFrameClass
  AS GtkBinClass parent_class
  compute_child_allocation AS SUB CDECL(BYVAL AS GtkFrame PTR, BYVAL AS GtkAllocation PTR)
  _gtk_reserved1 AS SUB CDECL()
  _gtk_reserved2 AS SUB CDECL()
  _gtk_reserved3 AS SUB CDECL()
  _gtk_reserved4 AS SUB CDECL()
END TYPE
TYPE GtkAssistantPageFunc AS FUNCTION CDECL(BYVAL AS gint, BYVAL AS gpointer) AS gint
TYPE GtkCalendarDetailFunc AS FUNCTION CDECL(BYVAL AS GtkCalendar PTR, BYVAL AS guint, BYVAL AS guint, BYVAL AS guint, BYVAL AS gpointer) AS gchar PTR
TYPE GtkCellCallback AS FUNCTION CDECL(BYVAL AS GtkCellRenderer PTR, BYVAL AS gpointer) AS gboolean
TYPE _GtkCellRenderer
  AS GInitiallyUnowned parent_instance
  AS GtkCellRendererPrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_cell_renderer_get_type() AS GType
#DEFINE GTK_TYPE_CELL_RENDERER (gtk_cell_renderer_get_type())
#DEFINE GTK_CELL_RENDERER(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_CELL_RENDERER, GtkCellRenderer))
#DEFINE GTK_CELL_RENDERER_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_CELL_RENDERER, GtkCellRendererClass))
#DEFINE GTK_IS_CELL_RENDERER(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_CELL_RENDERER))
#DEFINE GTK_IS_CLASS_CELL_RENDERER(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_CELL_RENDERER))
#DEFINE GTK_CELL_RENDERER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_CELL_RENDERER, GtkCellRendererClass))
DECLARE FUNCTION gtk_cell_renderer_activate(BYVAL AS GtkCellRenderer PTR, BYVAL AS GdkEvent PTR, BYVAL AS GtkWidget PTR, BYVAL AS const gchar PTR, BYVAL AS const GdkRectangle PTR, BYVAL AS const GdkRectangle PTR, BYVAL AS GtkCellRendererState) AS gboolean
DECLARE SUB gtk_cell_renderer_get_aligned_area(BYVAL AS GtkCellRenderer PTR, BYVAL AS GtkWidget PTR, BYVAL AS GtkCellRendererState, BYVAL AS const GdkRectangle PTR, BYVAL AS GdkRectangle PTR)
DECLARE SUB gtk_cell_renderer_get_alignment(BYVAL AS GtkCellRenderer PTR, BYVAL AS gfloat PTR, BYVAL AS gfloat PTR)
DECLARE SUB gtk_cell_renderer_get_fixed_size(BYVAL AS GtkCellRenderer PTR, BYVAL AS gint PTR, BYVAL AS gint PTR)
DECLARE SUB gtk_cell_renderer_get_padding(BYVAL AS GtkCellRenderer PTR, BYVAL AS gint PTR, BYVAL AS gint PTR)
DECLARE SUB gtk_cell_renderer_get_preferred_height(BYVAL AS GtkCellRenderer PTR, BYVAL AS GtkWidget PTR, BYVAL AS gint PTR, BYVAL AS gint PTR)
DECLARE SUB gtk_cell_renderer_get_preferred_height_for_width(BYVAL AS GtkCellRenderer PTR, BYVAL AS GtkWidget PTR, BYVAL AS gint, BYVAL AS gint PTR, BYVAL AS gint PTR)
DECLARE SUB gtk_cell_renderer_get_preferred_size(BYVAL AS GtkCellRenderer PTR, BYVAL AS GtkWidget PTR, BYVAL AS GtkRequisition PTR, BYVAL AS GtkRequisition PTR)
DECLARE SUB gtk_cell_renderer_get_preferred_width(BYVAL AS GtkCellRenderer PTR, BYVAL AS GtkWidget PTR, BYVAL AS gint PTR, BYVAL AS gint PTR)
DECLARE SUB gtk_cell_renderer_get_preferred_width_for_height(BYVAL AS GtkCellRenderer PTR, BYVAL AS GtkWidget PTR, BYVAL AS gint, BYVAL AS gint PTR, BYVAL AS gint PTR)
DECLARE FUNCTION gtk_cell_renderer_get_request_mode(BYVAL AS GtkCellRenderer PTR) AS GtkSizeRequestMode
DECLARE FUNCTION gtk_cell_renderer_get_sensitive(BYVAL AS GtkCellRenderer PTR) AS gboolean
DECLARE SUB gtk_cell_renderer_get_size(BYVAL AS GtkCellRenderer PTR, BYVAL AS GtkWidget PTR, BYVAL AS const GdkRectangle PTR, BYVAL AS gint PTR, BYVAL AS gint PTR, BYVAL AS gint PTR, BYVAL AS gint PTR)
DECLARE FUNCTION gtk_cell_renderer_get_state(BYVAL AS GtkCellRenderer PTR, BYVAL AS GtkWidget PTR, BYVAL AS GtkCellRendererState) AS GtkStateFlags
DECLARE FUNCTION gtk_cell_renderer_get_visible(BYVAL AS GtkCellRenderer PTR) AS gboolean
DECLARE FUNCTION gtk_cell_renderer_is_activatable(BYVAL AS GtkCellRenderer PTR) AS gboolean
DECLARE SUB gtk_cell_renderer_render(BYVAL AS GtkCellRenderer PTR, BYVAL AS cairo_t PTR, BYVAL AS GtkWidget PTR, BYVAL AS const GdkRectangle PTR, BYVAL AS const GdkRectangle PTR, BYVAL AS GtkCellRendererState)
DECLARE SUB gtk_cell_renderer_set_alignment(BYVAL AS GtkCellRenderer PTR, BYVAL AS gfloat, BYVAL AS gfloat)
DECLARE SUB gtk_cell_renderer_set_fixed_size(BYVAL AS GtkCellRenderer PTR, BYVAL AS gint, BYVAL AS gint)
DECLARE SUB gtk_cell_renderer_set_padding(BYVAL AS GtkCellRenderer PTR, BYVAL AS gint, BYVAL AS gint)
DECLARE SUB gtk_cell_renderer_set_sensitive(BYVAL AS GtkCellRenderer PTR, BYVAL AS gboolean)
DECLARE SUB gtk_cell_renderer_set_visible(BYVAL AS GtkCellRenderer PTR, BYVAL AS gboolean)
DECLARE FUNCTION gtk_cell_renderer_start_editing(BYVAL AS GtkCellRenderer PTR, BYVAL AS GdkEvent PTR, BYVAL AS GtkWidget PTR, BYVAL AS const gchar PTR, BYVAL AS const GdkRectangle PTR, BYVAL AS const GdkRectangle PTR, BYVAL AS GtkCellRendererState) AS GtkCellEditable PTR
DECLARE SUB gtk_cell_renderer_stop_editing(BYVAL AS GtkCellRenderer PTR, BYVAL AS gboolean)
TYPE _GtkCellRendererClass
  AS GInitiallyUnownedClass parent_class
  get_request_mode AS FUNCTION CDECL(BYVAL AS GtkCellRenderer PTR) AS GtkSizeRequestMode
  get_preferred_width AS SUB CDECL(BYVAL AS GtkCellRenderer PTR, BYVAL AS GtkWidget PTR, BYVAL AS gint PTR, BYVAL AS gint PTR)
  get_preferred_height_for_width AS SUB CDECL(BYVAL AS GtkCellRenderer PTR, BYVAL AS GtkWidget PTR, BYVAL AS gint, BYVAL AS gint PTR, BYVAL AS gint PTR)
  get_preferred_height AS SUB CDECL(BYVAL AS GtkCellRenderer PTR, BYVAL AS GtkWidget PTR, BYVAL AS gint PTR, BYVAL AS gint PTR)
  get_preferred_width_for_height AS SUB CDECL(BYVAL AS GtkCellRenderer PTR, BYVAL AS GtkWidget PTR, BYVAL AS gint, BYVAL AS gint PTR, BYVAL AS gint PTR)
  get_aligned_area AS SUB CDECL(BYVAL AS GtkCellRenderer PTR, BYVAL AS GtkWidget PTR, BYVAL AS GtkCellRendererState, BYVAL AS const GdkRectangle PTR, BYVAL AS GdkRectangle PTR)
  get_size AS SUB CDECL(BYVAL AS GtkCellRenderer PTR, BYVAL AS GtkWidget PTR, BYVAL AS const GdkRectangle PTR, BYVAL AS gint PTR, BYVAL AS gint PTR, BYVAL AS gint PTR, BYVAL AS gint PTR)
  render AS SUB CDECL(BYVAL AS GtkCellRenderer PTR, BYVAL AS cairo_t PTR, BYVAL AS GtkWidget PTR, BYVAL AS const GdkRectangle PTR, BYVAL AS const GdkRectangle PTR, BYVAL AS GtkCellRendererState)
  activate AS FUNCTION CDECL(BYVAL AS GtkCellRenderer PTR, BYVAL AS GdkEvent PTR, BYVAL AS GtkWidget PTR, BYVAL AS const gchar PTR, BYVAL AS const GdkRectangle PTR, BYVAL AS const GdkRectangle PTR, BYVAL AS GtkCellRendererState) AS gboolean
  start_editing AS FUNCTION CDECL(BYVAL AS GtkCellRenderer PTR, BYVAL AS GdkEvent PTR, BYVAL AS GtkWidget PTR, BYVAL AS const gchar PTR, BYVAL AS const GdkRectangle PTR, BYVAL AS const GdkRectangle PTR, BYVAL AS GtkCellRendererState) AS GtkCellEditable PTR
  editing_canceled AS SUB CDECL(BYVAL AS GtkCellRenderer PTR)
  editing_started AS SUB CDECL(BYVAL AS GtkCellRenderer PTR, BYVAL AS GtkCellEditable PTR, BYVAL AS const gchar PTR)
  AS GtkCellRendererClassPrivate PTR priv
  _gtk_reserved2 AS SUB CDECL()
  _gtk_reserved3 AS SUB CDECL()
  _gtk_reserved4 AS SUB CDECL()
END TYPE
DECLARE SUB gtk_cell_renderer_class_set_accessible_type(BYVAL AS GtkCellRendererClass PTR, BYVAL AS GType)
TYPE GtkCellAllocCallback AS FUNCTION CDECL(BYVAL AS GtkCellRenderer PTR, BYVAL AS const GdkRectangle PTR, BYVAL AS const GdkRectangle PTR, BYVAL AS gpointer) AS gboolean
TYPE _GtkCellAreaClass
  AS GInitiallyUnownedClass parent_class
  add AS SUB CDECL(BYVAL AS GtkCellArea PTR, BYVAL AS GtkCellRenderer PTR)
  remove AS SUB CDECL(BYVAL AS GtkCellArea PTR, BYVAL AS GtkCellRenderer PTR)
  foreach AS SUB CDECL(BYVAL AS GtkCellArea PTR, BYVAL AS GtkCellCallback, BYVAL AS gpointer)
  foreach_alloc AS SUB CDECL(BYVAL AS GtkCellArea PTR, BYVAL AS GtkCellAreaContext PTR, BYVAL AS GtkWidget PTR, BYVAL AS const GdkRectangle PTR, BYVAL AS const GdkRectangle PTR, BYVAL AS GtkCellAllocCallback, BYVAL AS gpointer)
  event AS FUNCTION CDECL(BYVAL AS GtkCellArea PTR, BYVAL AS GtkCellAreaContext PTR, BYVAL AS GtkWidget PTR, BYVAL AS GdkEvent PTR, BYVAL AS const GdkRectangle PTR, BYVAL AS GtkCellRendererState) AS gint
  render AS SUB CDECL(BYVAL AS GtkCellArea PTR, BYVAL AS GtkCellAreaContext PTR, BYVAL AS GtkWidget PTR, BYVAL AS cairo_t PTR, BYVAL AS const GdkRectangle PTR, BYVAL AS const GdkRectangle PTR, BYVAL AS GtkCellRendererState, BYVAL AS gboolean)
  apply_attributes AS SUB CDECL(BYVAL AS GtkCellArea PTR, BYVAL AS GtkTreeModel PTR, BYVAL AS GtkTreeIter PTR, BYVAL AS gboolean, BYVAL AS gboolean)
  create_context AS FUNCTION CDECL(BYVAL AS GtkCellArea PTR) AS GtkCellAreaContext PTR
  copy_context AS FUNCTION CDECL(BYVAL AS GtkCellArea PTR, BYVAL AS GtkCellAreaContext PTR) AS GtkCellAreaContext PTR
  get_request_mode AS FUNCTION CDECL(BYVAL AS GtkCellArea PTR) AS GtkSizeRequestMode
  get_preferred_width AS SUB CDECL(BYVAL AS GtkCellArea PTR, BYVAL AS GtkCellAreaContext PTR, BYVAL AS GtkWidget PTR, BYVAL AS gint PTR, BYVAL AS gint PTR)
  get_preferred_height_for_width AS SUB CDECL(BYVAL AS GtkCellArea PTR, BYVAL AS GtkCellAreaContext PTR, BYVAL AS GtkWidget PTR, BYVAL AS gint, BYVAL AS gint PTR, BYVAL AS gint PTR)
  get_preferred_height AS SUB CDECL(BYVAL AS GtkCellArea PTR, BYVAL AS GtkCellAreaContext PTR, BYVAL AS GtkWidget PTR, BYVAL AS gint PTR, BYVAL AS gint PTR)
  get_preferred_width_for_height AS SUB CDECL(BYVAL AS GtkCellArea PTR, BYVAL AS GtkCellAreaContext PTR, BYVAL AS GtkWidget PTR, BYVAL AS gint, BYVAL AS gint PTR, BYVAL AS gint PTR)
  set_cell_property AS SUB CDECL(BYVAL AS GtkCellArea PTR, BYVAL AS GtkCellRenderer PTR, BYVAL AS guint, BYVAL AS const GValue PTR, BYVAL AS GParamSpec PTR)
  get_cell_property AS SUB CDECL(BYVAL AS GtkCellArea PTR, BYVAL AS GtkCellRenderer PTR, BYVAL AS guint, BYVAL AS GValue PTR, BYVAL AS GParamSpec PTR)
  focus AS FUNCTION CDECL(BYVAL AS GtkCellArea PTR, BYVAL AS GtkDirectionType) AS gboolean
  is_activatable AS FUNCTION CDECL(BYVAL AS GtkCellArea PTR) AS gboolean
  activate AS FUNCTION CDECL(BYVAL AS GtkCellArea PTR, BYVAL AS GtkCellAreaContext PTR, BYVAL AS GtkWidget PTR, BYVAL AS const GdkRectangle PTR, BYVAL AS GtkCellRendererState, BYVAL AS gboolean) AS gboolean
  _gtk_reserved1 AS SUB CDECL()
  _gtk_reserved2 AS SUB CDECL()
  _gtk_reserved3 AS SUB CDECL()
  _gtk_reserved4 AS SUB CDECL()
  _gtk_reserved5 AS SUB CDECL()
  _gtk_reserved6 AS SUB CDECL()
  _gtk_reserved7 AS SUB CDECL()
  _gtk_reserved8 AS SUB CDECL()
END TYPE
DECLARE FUNCTION gtk_cell_area_class_find_cell_property(BYVAL AS GtkCellAreaClass PTR, BYVAL AS const gchar PTR) AS GParamSpec PTR
DECLARE SUB gtk_cell_area_class_install_cell_property(BYVAL AS GtkCellAreaClass PTR, BYVAL AS guint, BYVAL AS GParamSpec PTR)
DECLARE FUNCTION gtk_cell_area_class_list_cell_properties(BYVAL AS GtkCellAreaClass PTR, BYVAL AS guint PTR) AS GParamSpec PTR PTR
TYPE GtkCellLayoutDataFunc AS SUB CDECL(BYVAL AS GtkCellLayout PTR, BYVAL AS GtkCellRenderer PTR, BYVAL AS GtkTreeModel PTR, BYVAL AS GtkTreeIter PTR, BYVAL AS gpointer)
TYPE _GtkCellRendererText
  AS GtkCellRenderer parent
  AS GtkCellRendererTextPrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_cell_renderer_text_get_type() AS GType
#DEFINE GTK_TYPE_CELL_RENDERER_TEXT (gtk_cell_renderer_text_get_type())
#DEFINE GTK_CELL_RENDERER_TEXT(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_CELL_RENDERER_TEXT, GtkCellRendererText))
#DEFINE GTK_CELL_RENDERER_TEXT_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_CELL_RENDERER_TEXT, GtkCellRendererTextClass))
#DEFINE GTK_IS_CELL_RENDERER_TEXT(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_CELL_RENDERER_TEXT))
#DEFINE GTK_IS_CLASS_CELL_RENDERER_TEXT(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_CELL_RENDERER_TEXT))
#DEFINE GTK_CELL_RENDERER_TEXT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_CELL_RENDERER_TEXT, GtkCellRendererTextClass))
DECLARE FUNCTION gtk_cell_renderer_text_new() AS GtkCellRenderer PTR
DECLARE SUB gtk_cell_renderer_text_set_fixed_height_from_font(BYVAL AS GtkCellRendererText PTR, BYVAL AS gint)
TYPE _GtkCellRendererTextClass
  AS GtkCellRendererClass parent_class
  edited AS SUB CDECL(BYVAL AS GtkCellRendererText PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR)
  _gtk_reserved1 AS SUB CDECL()
  _gtk_reserved2 AS SUB CDECL()
  _gtk_reserved3 AS SUB CDECL()
  _gtk_reserved4 AS SUB CDECL()
END TYPE
TYPE _GtkButton
  AS GtkBin bin
  AS GtkButtonPrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_button_get_type() AS GType
#DEFINE GTK_TYPE_BUTTON (gtk_button_get_type())
#DEFINE GTK_BUTTON(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_BUTTON, GtkButton))
#DEFINE GTK_BUTTON_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_BUTTON, GtkButtonClass))
#DEFINE GTK_IS_BUTTON(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_BUTTON))
#DEFINE GTK_IS_CLASS_BUTTON(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_BUTTON))
#DEFINE GTK_BUTTON_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_BUTTON, GtkButtonClass))
DECLARE FUNCTION gtk_button_new() AS GtkWidget PTR
DECLARE FUNCTION gtk_button_new_from_icon_name(BYVAL AS const gchar PTR, BYVAL AS GtkIconSize) AS GtkWidget PTR
DECLARE FUNCTION gtk_button_new_from_stock(BYVAL AS const gchar PTR) AS GtkWidget PTR
DECLARE FUNCTION gtk_button_new_with_label(BYVAL AS const gchar PTR) AS GtkWidget PTR
DECLARE FUNCTION gtk_button_new_with_mnemonic(BYVAL AS const gchar PTR) AS GtkWidget PTR
DECLARE SUB gtk_button_clicked(BYVAL AS GtkButton PTR)
DECLARE SUB gtk_button_enter(BYVAL AS GtkButton PTR)
DECLARE SUB gtk_button_get_alignment(BYVAL AS GtkButton PTR, BYVAL AS gfloat PTR, BYVAL AS gfloat PTR)
DECLARE FUNCTION gtk_button_get_always_show_image(BYVAL AS GtkButton PTR) AS gboolean
DECLARE FUNCTION gtk_button_get_event_window(BYVAL AS GtkButton PTR) AS GdkWindow PTR
DECLARE FUNCTION gtk_button_get_focus_on_click(BYVAL AS GtkButton PTR) AS gboolean
DECLARE FUNCTION gtk_button_get_image(BYVAL AS GtkButton PTR) AS GtkWidget PTR
DECLARE FUNCTION gtk_button_get_image_position(BYVAL AS GtkButton PTR) AS GtkPositionType
DECLARE FUNCTION gtk_button_get_label(BYVAL AS GtkButton PTR) AS const gchar PTR
DECLARE FUNCTION gtk_button_get_relief(BYVAL AS GtkButton PTR) AS GtkReliefStyle
DECLARE FUNCTION gtk_button_get_use_stock(BYVAL AS GtkButton PTR) AS gboolean
DECLARE FUNCTION gtk_button_get_use_underline(BYVAL AS GtkButton PTR) AS gboolean
DECLARE SUB gtk_button_leave(BYVAL AS GtkButton PTR)
DECLARE SUB gtk_button_pressed(BYVAL AS GtkButton PTR)
DECLARE SUB gtk_button_released(BYVAL AS GtkButton PTR)
DECLARE SUB gtk_button_set_alignment(BYVAL AS GtkButton PTR, BYVAL AS gfloat, BYVAL AS gfloat)
DECLARE SUB gtk_button_set_always_show_image(BYVAL AS GtkButton PTR, BYVAL AS gboolean)
DECLARE SUB gtk_button_set_focus_on_click(BYVAL AS GtkButton PTR, BYVAL AS gboolean)
DECLARE SUB gtk_button_set_image(BYVAL AS GtkButton PTR, BYVAL AS GtkWidget PTR)
DECLARE SUB gtk_button_set_image_position(BYVAL AS GtkButton PTR, BYVAL AS GtkPositionType)
DECLARE SUB gtk_button_set_label(BYVAL AS GtkButton PTR, BYVAL AS const gchar PTR)
DECLARE SUB gtk_button_set_relief(BYVAL AS GtkButton PTR, BYVAL AS GtkReliefStyle)
DECLARE SUB gtk_button_set_use_stock(BYVAL AS GtkButton PTR, BYVAL AS gboolean)
DECLARE SUB gtk_button_set_use_underline(BYVAL AS GtkButton PTR, BYVAL AS gboolean)
TYPE _GtkButtonClass
  AS GtkBinClass parent_class
  pressed AS SUB CDECL(BYVAL AS GtkButton PTR)
  released AS SUB CDECL(BYVAL AS GtkButton PTR)
  clicked AS SUB CDECL(BYVAL AS GtkButton PTR)
  enter AS SUB CDECL(BYVAL AS GtkButton PTR)
  leave AS SUB CDECL(BYVAL AS GtkButton PTR)
  activate AS SUB CDECL(BYVAL AS GtkButton PTR)
  _gtk_reserved1 AS SUB CDECL()
  _gtk_reserved2 AS SUB CDECL()
  _gtk_reserved3 AS SUB CDECL()
  _gtk_reserved4 AS SUB CDECL()
END TYPE
TYPE _GtkToggleButton
  AS GtkButton button
  AS GtkToggleButtonPrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_toggle_button_get_type() AS GType
#DEFINE GTK_TYPE_TOGGLE_BUTTON (gtk_toggle_button_get_type())
#DEFINE GTK_TOGGLE_BUTTON(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_TOGGLE_BUTTON, GtkToggleButton))
#DEFINE GTK_TOGGLE_BUTTON_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_TOGGLE_BUTTON, GtkToggleButtonClass))
#DEFINE GTK_IS_TOGGLE_BUTTON(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_TOGGLE_BUTTON))
#DEFINE GTK_IS_CLASS_TOGGLE_BUTTON(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_TOGGLE_BUTTON))
#DEFINE GTK_TOGGLE_BUTTON_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_TOGGLE_BUTTON, GtkToggleButtonClass))
DECLARE FUNCTION gtk_toggle_button_new() AS GtkWidget PTR
DECLARE FUNCTION gtk_toggle_button_new_with_label(BYVAL AS const gchar PTR) AS GtkWidget PTR
DECLARE FUNCTION gtk_toggle_button_new_with_mnemonic(BYVAL AS const gchar PTR) AS GtkWidget PTR
DECLARE FUNCTION gtk_toggle_button_get_active(BYVAL AS GtkToggleButton PTR) AS gboolean
DECLARE FUNCTION gtk_toggle_button_get_inconsistent(BYVAL AS GtkToggleButton PTR) AS gboolean
DECLARE FUNCTION gtk_toggle_button_get_mode(BYVAL AS GtkToggleButton PTR) AS gboolean
DECLARE SUB gtk_toggle_button_set_active(BYVAL AS GtkToggleButton PTR, BYVAL AS gboolean)
DECLARE SUB gtk_toggle_button_set_inconsistent(BYVAL AS GtkToggleButton PTR, BYVAL AS gboolean)
DECLARE SUB gtk_toggle_button_set_mode(BYVAL AS GtkToggleButton PTR, BYVAL AS gboolean)
DECLARE SUB gtk_toggle_button_toggled(BYVAL AS GtkToggleButton PTR)
TYPE _GtkToggleButtonClass
  AS GtkButtonClass parent_class
  toggled AS SUB CDECL(BYVAL AS GtkToggleButton PTR)
  _gtk_reserved1 AS SUB CDECL()
  _gtk_reserved2 AS SUB CDECL()
  _gtk_reserved3 AS SUB CDECL()
  _gtk_reserved4 AS SUB CDECL()
END TYPE
TYPE GtkClipboardReceivedFunc AS SUB CDECL(BYVAL AS GtkClipboard PTR, BYVAL AS GtkSelectionData PTR, BYVAL AS gpointer)
TYPE GtkClipboardImageReceivedFunc AS SUB CDECL(BYVAL AS GtkClipboard PTR, BYVAL AS GdkPixbuf PTR, BYVAL AS gpointer)
TYPE GtkClipboardRichTextReceivedFunc AS SUB CDECL(BYVAL AS GtkClipboard PTR, BYVAL AS any ptr /'GdkAtom'/, BYVAL AS const guint8 PTR, BYVAL AS gsize, BYVAL AS gpointer)
TYPE GtkClipboardTargetsReceivedFunc AS SUB CDECL(BYVAL AS GtkClipboard PTR, BYVAL AS any ptr /'GdkAtom'/ PTR, BYVAL AS gint, BYVAL AS gpointer)
TYPE GtkClipboardTextReceivedFunc AS SUB CDECL(BYVAL AS GtkClipboard PTR, BYVAL AS const gchar PTR, BYVAL AS gpointer)
TYPE GtkClipboardURIReceivedFunc AS SUB CDECL(BYVAL AS GtkClipboard PTR, BYVAL AS gchar PTR PTR, BYVAL AS gpointer)
TYPE GtkClipboardGetFunc AS SUB CDECL(BYVAL AS GtkClipboard PTR, BYVAL AS GtkSelectionData PTR, BYVAL AS guint, BYVAL AS gpointer)
TYPE GtkClipboardClearFunc AS SUB CDECL(BYVAL AS GtkClipboard PTR, BYVAL AS gpointer)
TYPE _GtkMenuItem
  AS GtkBin bin
  AS GtkMenuItemPrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_menu_item_get_type() AS GType
#DEFINE GTK_TYPE_MENU_ITEM (gtk_menu_item_get_type())
#DEFINE GTK_MENU_ITEM(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_MENU_ITEM, GtkMenuItem))
#DEFINE GTK_MENU_ITEM_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_MENU_ITEM, GtkMenuItemClass))
#DEFINE GTK_IS_MENU_ITEM(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_MENU_ITEM))
#DEFINE GTK_IS_CLASS_MENU_ITEM(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_MENU_ITEM))
#DEFINE GTK_MENU_ITEM_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_MENU_ITEM, GtkMenuItemClass))
DECLARE FUNCTION gtk_menu_item_new() AS GtkWidget PTR
DECLARE FUNCTION gtk_menu_item_new_with_label(BYVAL AS const gchar PTR) AS GtkWidget PTR
DECLARE FUNCTION gtk_menu_item_new_with_mnemonic(BYVAL AS const gchar PTR) AS GtkWidget PTR
DECLARE SUB gtk_menu_item_activate(BYVAL AS GtkMenuItem PTR)
DECLARE SUB gtk_menu_item_deselect(BYVAL AS GtkMenuItem PTR)
DECLARE FUNCTION gtk_menu_item_get_accel_path(BYVAL AS GtkMenuItem PTR) AS const gchar PTR
DECLARE FUNCTION gtk_menu_item_get_label(BYVAL AS GtkMenuItem PTR) AS const gchar PTR
DECLARE FUNCTION gtk_menu_item_get_reserve_indicator(BYVAL AS GtkMenuItem PTR) AS gboolean
DECLARE FUNCTION gtk_menu_item_get_right_justified(BYVAL AS GtkMenuItem PTR) AS gboolean
DECLARE FUNCTION gtk_menu_item_get_submenu(BYVAL AS GtkMenuItem PTR) AS GtkWidget PTR
DECLARE FUNCTION gtk_menu_item_get_use_underline(BYVAL AS GtkMenuItem PTR) AS gboolean
DECLARE SUB gtk_menu_item_select(BYVAL AS GtkMenuItem PTR)
DECLARE SUB gtk_menu_item_set_accel_path(BYVAL AS GtkMenuItem PTR, BYVAL AS const gchar PTR)
DECLARE SUB gtk_menu_item_set_label(BYVAL AS GtkMenuItem PTR, BYVAL AS const gchar PTR)
DECLARE SUB gtk_menu_item_set_reserve_indicator(BYVAL AS GtkMenuItem PTR, BYVAL AS gboolean)
DECLARE SUB gtk_menu_item_set_right_justified(BYVAL AS GtkMenuItem PTR, BYVAL AS gboolean)
DECLARE SUB gtk_menu_item_set_submenu(BYVAL AS GtkMenuItem PTR, BYVAL AS GtkWidget PTR)
DECLARE SUB gtk_menu_item_set_use_underline(BYVAL AS GtkMenuItem PTR, BYVAL AS gboolean)
DECLARE SUB gtk_menu_item_toggle_size_allocate(BYVAL AS GtkMenuItem PTR, BYVAL AS gint)
DECLARE SUB gtk_menu_item_toggle_size_request(BYVAL AS GtkMenuItem PTR, BYVAL AS gint PTR)
TYPE _GtkMenuItemClass
  AS GtkBinClass parent_class
  AS guint hide_on_activate : 1
  activate AS SUB CDECL(BYVAL AS GtkMenuItem PTR)
  activate_item AS SUB CDECL(BYVAL AS GtkMenuItem PTR)
  toggle_size_request AS SUB CDECL(BYVAL AS GtkMenuItem PTR, BYVAL AS gint PTR)
  toggle_size_allocate AS SUB CDECL(BYVAL AS GtkMenuItem PTR, BYVAL AS gint)
  set_label AS SUB CDECL(BYVAL AS GtkMenuItem PTR, BYVAL AS const gchar PTR)
  get_label AS FUNCTION CDECL(BYVAL AS GtkMenuItem PTR) AS const gchar PTR
  select AS SUB CDECL(BYVAL AS GtkMenuItem PTR)
  deselect AS SUB CDECL(BYVAL AS GtkMenuItem PTR)
  _gtk_reserved1 AS SUB CDECL()
  _gtk_reserved2 AS SUB CDECL()
  _gtk_reserved3 AS SUB CDECL()
  _gtk_reserved4 AS SUB CDECL()
END TYPE
TYPE GtkColorSelectionChangePaletteWithScreenFunc AS SUB CDECL(BYVAL AS GdkScreen PTR, BYVAL AS const GdkColor PTR, BYVAL AS gint)
TYPE GtkEntryCompletionMatchFunc AS FUNCTION CDECL(BYVAL AS GtkEntryCompletion PTR, BYVAL AS const gchar PTR, BYVAL AS GtkTreeIter PTR, BYVAL AS gpointer) AS gboolean
TYPE GtkFileFilterFunc AS FUNCTION CDECL(BYVAL AS const GtkFileFilterInfo PTR, BYVAL AS gpointer) AS gboolean
TYPE GtkFontFilterFunc AS FUNCTION CDECL(BYVAL AS const PangoFontFamily PTR, BYVAL AS const PangoFontFace PTR, BYVAL AS gpointer) AS gboolean
TYPE _GtkPaned
  AS GtkContainer container
  AS GtkPanedPrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_paned_get_type() AS GType
#DEFINE GTK_TYPE_PANED (gtk_paned_get_type())
#DEFINE GTK_PANED(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_PANED, GtkPaned))
#DEFINE GTK_PANED_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_PANED, GtkPanedClass))
#DEFINE GTK_IS_PANED(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_PANED))
#DEFINE GTK_IS_CLASS_PANED(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_PANED))
#DEFINE GTK_PANED_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_PANED, GtkPanedClass))
DECLARE FUNCTION gtk_paned_new(BYVAL AS GtkOrientation) AS GtkWidget PTR
DECLARE SUB gtk_paned_add1(BYVAL AS GtkPaned PTR, BYVAL AS GtkWidget PTR)
DECLARE SUB gtk_paned_add2(BYVAL AS GtkPaned PTR, BYVAL AS GtkWidget PTR)
DECLARE FUNCTION gtk_paned_get_child1(BYVAL AS GtkPaned PTR) AS GtkWidget PTR
DECLARE FUNCTION gtk_paned_get_child2(BYVAL AS GtkPaned PTR) AS GtkWidget PTR
DECLARE FUNCTION gtk_paned_get_handle_window(BYVAL AS GtkPaned PTR) AS GdkWindow PTR
DECLARE FUNCTION gtk_paned_get_position(BYVAL AS GtkPaned PTR) AS gint
DECLARE FUNCTION gtk_paned_get_wide_handle(BYVAL AS GtkPaned PTR) AS gboolean
DECLARE SUB gtk_paned_pack1(BYVAL AS GtkPaned PTR, BYVAL AS GtkWidget PTR, BYVAL AS gboolean, BYVAL AS gboolean)
DECLARE SUB gtk_paned_pack2(BYVAL AS GtkPaned PTR, BYVAL AS GtkWidget PTR, BYVAL AS gboolean, BYVAL AS gboolean)
DECLARE SUB gtk_paned_set_position(BYVAL AS GtkPaned PTR, BYVAL AS gint)
DECLARE SUB gtk_paned_set_wide_handle(BYVAL AS GtkPaned PTR, BYVAL AS gboolean)
TYPE _GtkPanedClass
  AS GtkContainerClass parent_class
  cycle_child_focus AS FUNCTION CDECL(BYVAL AS GtkPaned PTR, BYVAL AS gboolean) AS gboolean
  toggle_handle_focus AS FUNCTION CDECL(BYVAL AS GtkPaned PTR) AS gboolean
  move_handle AS FUNCTION CDECL(BYVAL AS GtkPaned PTR, BYVAL AS GtkScrollType) AS gboolean
  cycle_handle_focus AS FUNCTION CDECL(BYVAL AS GtkPaned PTR, BYVAL AS gboolean) AS gboolean
  accept_position AS FUNCTION CDECL(BYVAL AS GtkPaned PTR) AS gboolean
  cancel_position AS FUNCTION CDECL(BYVAL AS GtkPaned PTR) AS gboolean
  _gtk_reserved1 AS SUB CDECL()
  _gtk_reserved2 AS SUB CDECL()
  _gtk_reserved3 AS SUB CDECL()
  _gtk_reserved4 AS SUB CDECL()
END TYPE
TYPE _GtkRange
  AS GtkWidget widget
  AS GtkRangePrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_range_get_type() AS GType
#DEFINE GTK_TYPE_RANGE (gtk_range_get_type())
#DEFINE GTK_RANGE(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_RANGE, GtkRange))
#DEFINE GTK_RANGE_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_RANGE, GtkRangeClass))
#DEFINE GTK_IS_RANGE(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_RANGE))
#DEFINE GTK_IS_CLASS_RANGE(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_RANGE))
#DEFINE GTK_RANGE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_RANGE, GtkRangeClass))
DECLARE FUNCTION gtk_range_get_adjustment(BYVAL AS GtkRange PTR) AS GtkAdjustment PTR
DECLARE FUNCTION gtk_range_get_fill_level(BYVAL AS GtkRange PTR) AS gdouble
DECLARE FUNCTION gtk_range_get_flippable(BYVAL AS GtkRange PTR) AS gboolean
DECLARE FUNCTION gtk_range_get_inverted(BYVAL AS GtkRange PTR) AS gboolean
DECLARE FUNCTION gtk_range_get_lower_stepper_sensitivity(BYVAL AS GtkRange PTR) AS GtkSensitivityType
DECLARE FUNCTION gtk_range_get_min_slider_size(BYVAL AS GtkRange PTR) AS gint
DECLARE SUB gtk_range_get_range_rect(BYVAL AS GtkRange PTR, BYVAL AS GdkRectangle PTR)
DECLARE FUNCTION gtk_range_get_restrict_to_fill_level(BYVAL AS GtkRange PTR) AS gboolean
DECLARE FUNCTION gtk_range_get_round_digits(BYVAL AS GtkRange PTR) AS gint
DECLARE FUNCTION gtk_range_get_show_fill_level(BYVAL AS GtkRange PTR) AS gboolean
DECLARE SUB gtk_range_get_slider_range(BYVAL AS GtkRange PTR, BYVAL AS gint PTR, BYVAL AS gint PTR)
DECLARE FUNCTION gtk_range_get_slider_size_fixed(BYVAL AS GtkRange PTR) AS gboolean
DECLARE FUNCTION gtk_range_get_upper_stepper_sensitivity(BYVAL AS GtkRange PTR) AS GtkSensitivityType
DECLARE FUNCTION gtk_range_get_value(BYVAL AS GtkRange PTR) AS gdouble
DECLARE SUB gtk_range_set_adjustment(BYVAL AS GtkRange PTR, BYVAL AS GtkAdjustment PTR)
DECLARE SUB gtk_range_set_fill_level(BYVAL AS GtkRange PTR, BYVAL AS gdouble)
DECLARE SUB gtk_range_set_flippable(BYVAL AS GtkRange PTR, BYVAL AS gboolean)
DECLARE SUB gtk_range_set_increments(BYVAL AS GtkRange PTR, BYVAL AS gdouble, BYVAL AS gdouble)
DECLARE SUB gtk_range_set_inverted(BYVAL AS GtkRange PTR, BYVAL AS gboolean)
DECLARE SUB gtk_range_set_lower_stepper_sensitivity(BYVAL AS GtkRange PTR, BYVAL AS GtkSensitivityType)
DECLARE SUB gtk_range_set_min_slider_size(BYVAL AS GtkRange PTR, BYVAL AS gint)
DECLARE SUB gtk_range_set_range(BYVAL AS GtkRange PTR, BYVAL AS gdouble, BYVAL AS gdouble)
DECLARE SUB gtk_range_set_restrict_to_fill_level(BYVAL AS GtkRange PTR, BYVAL AS gboolean)
DECLARE SUB gtk_range_set_round_digits(BYVAL AS GtkRange PTR, BYVAL AS gint)
DECLARE SUB gtk_range_set_show_fill_level(BYVAL AS GtkRange PTR, BYVAL AS gboolean)
DECLARE SUB gtk_range_set_slider_size_fixed(BYVAL AS GtkRange PTR, BYVAL AS gboolean)
DECLARE SUB gtk_range_set_upper_stepper_sensitivity(BYVAL AS GtkRange PTR, BYVAL AS GtkSensitivityType)
DECLARE SUB gtk_range_set_value(BYVAL AS GtkRange PTR, BYVAL AS gdouble)
TYPE _GtkRangeClass
  AS GtkWidgetClass parent_class
  AS gchar PTR slider_detail
  AS gchar PTR stepper_detail
  value_changed AS SUB CDECL(BYVAL AS GtkRange PTR)
  adjust_bounds AS SUB CDECL(BYVAL AS GtkRange PTR, BYVAL AS gdouble)
  move_slider AS SUB CDECL(BYVAL AS GtkRange PTR, BYVAL AS GtkScrollType)
  get_range_border AS SUB CDECL(BYVAL AS GtkRange PTR, BYVAL AS GtkBorder PTR)
  change_value AS FUNCTION CDECL(BYVAL AS GtkRange PTR, BYVAL AS GtkScrollType, BYVAL AS gdouble) AS gboolean
  get_range_size_request AS SUB CDECL(BYVAL AS GtkRange PTR, BYVAL AS GtkOrientation, BYVAL AS gint PTR, BYVAL AS gint PTR)
  _gtk_reserved1 AS SUB CDECL()
  _gtk_reserved2 AS SUB CDECL()
  _gtk_reserved3 AS SUB CDECL()
END TYPE
TYPE _GtkScale
  AS GtkRange range
  AS GtkScalePrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_scale_get_type() AS GType
#DEFINE GTK_TYPE_SCALE (gtk_scale_get_type())
#DEFINE GTK_SCALE(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_SCALE, GtkScale))
#DEFINE GTK_SCALE_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_SCALE, GtkScaleClass))
#DEFINE GTK_IS_SCALE(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_SCALE))
#DEFINE GTK_IS_CLASS_SCALE(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_SCALE))
#DEFINE GTK_SCALE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_SCALE, GtkScaleClass))
DECLARE FUNCTION gtk_scale_new(BYVAL AS GtkOrientation, BYVAL AS GtkAdjustment PTR) AS GtkWidget PTR
DECLARE FUNCTION gtk_scale_new_with_range(BYVAL AS GtkOrientation, BYVAL AS gdouble, BYVAL AS gdouble, BYVAL AS gdouble) AS GtkWidget PTR
DECLARE SUB gtk_scale_add_mark(BYVAL AS GtkScale PTR, BYVAL AS gdouble, BYVAL AS GtkPositionType, BYVAL AS const gchar PTR)
DECLARE SUB gtk_scale_clear_marks(BYVAL AS GtkScale PTR)
DECLARE FUNCTION gtk_scale_get_digits(BYVAL AS GtkScale PTR) AS gint
DECLARE FUNCTION gtk_scale_get_draw_value(BYVAL AS GtkScale PTR) AS gboolean
DECLARE FUNCTION gtk_scale_get_has_origin(BYVAL AS GtkScale PTR) AS gboolean
DECLARE FUNCTION gtk_scale_get_layout(BYVAL AS GtkScale PTR) AS PangoLayout PTR
DECLARE SUB gtk_scale_get_layout_offsets(BYVAL AS GtkScale PTR, BYVAL AS gint PTR, BYVAL AS gint PTR)
DECLARE FUNCTION gtk_scale_get_value_pos(BYVAL AS GtkScale PTR) AS GtkPositionType
DECLARE SUB gtk_scale_set_digits(BYVAL AS GtkScale PTR, BYVAL AS gint)
DECLARE SUB gtk_scale_set_draw_value(BYVAL AS GtkScale PTR, BYVAL AS gboolean)
DECLARE SUB gtk_scale_set_has_origin(BYVAL AS GtkScale PTR, BYVAL AS gboolean)
DECLARE SUB gtk_scale_set_value_pos(BYVAL AS GtkScale PTR, BYVAL AS GtkPositionType)
TYPE _GtkScaleClass
  AS GtkRangeClass parent_class
  format_value AS FUNCTION CDECL(BYVAL AS GtkScale PTR, BYVAL AS gdouble) AS gchar PTR
  draw_value AS SUB CDECL(BYVAL AS GtkScale PTR)
  get_layout_offsets AS SUB CDECL(BYVAL AS GtkScale PTR, BYVAL AS gint PTR, BYVAL AS gint PTR)
  _gtk_reserved1 AS SUB CDECL()
  _gtk_reserved2 AS SUB CDECL()
  _gtk_reserved3 AS SUB CDECL()
  _gtk_reserved4 AS SUB CDECL()
END TYPE
TYPE _GtkScrollbar
  AS GtkRange range
END TYPE
DECLARE FUNCTION gtk_scrollbar_get_type() AS GType
#DEFINE GTK_TYPE_SCROLLBAR (gtk_scrollbar_get_type())
#DEFINE GTK_SCROLLBAR(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_SCROLLBAR, GtkScrollbar))
#DEFINE GTK_SCROLLBAR_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_SCROLLBAR, GtkScrollbarClass))
#DEFINE GTK_IS_SCROLLBAR(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_SCROLLBAR))
#DEFINE GTK_IS_CLASS_SCROLLBAR(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_SCROLLBAR))
#DEFINE GTK_SCROLLBAR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_SCROLLBAR, GtkScrollbarClass))
DECLARE FUNCTION gtk_scrollbar_new(BYVAL AS GtkOrientation, BYVAL AS GtkAdjustment PTR) AS GtkWidget PTR
TYPE _GtkScrollbarClass
  AS GtkRangeClass parent_class
  _gtk_reserved1 AS SUB CDECL()
  _gtk_reserved2 AS SUB CDECL()
  _gtk_reserved3 AS SUB CDECL()
  _gtk_reserved4 AS SUB CDECL()
END TYPE
TYPE _GtkSeparator
  AS GtkWidget widget
  AS GtkSeparatorPrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_separator_get_type() AS GType
#DEFINE GTK_TYPE_SEPARATOR (gtk_separator_get_type())
#DEFINE GTK_SEPARATOR(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_SEPARATOR, GtkSeparator))
#DEFINE GTK_SEPARATOR_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_SEPARATOR, GtkSeparatorClass))
#DEFINE GTK_IS_SEPARATOR(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_SEPARATOR))
#DEFINE GTK_IS_CLASS_SEPARATOR(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_SEPARATOR))
#DEFINE GTK_SEPARATOR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_SEPARATOR, GtkSeparatorClass))
DECLARE FUNCTION gtk_separator_new(BYVAL AS GtkOrientation) AS GtkWidget PTR
TYPE _GtkSeparatorClass
  AS GtkWidgetClass parent_class
  _gtk_reserved1 AS SUB CDECL()
  _gtk_reserved2 AS SUB CDECL()
  _gtk_reserved3 AS SUB CDECL()
  _gtk_reserved4 AS SUB CDECL()
END TYPE
TYPE GtkIconViewForeachFunc AS SUB CDECL(BYVAL AS GtkIconView PTR, BYVAL AS GtkTreePath PTR, BYVAL AS gpointer)
TYPE _GtkMenuShell
  AS GtkContainer container
  AS GtkMenuShellPrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_menu_shell_get_type() AS GType
#DEFINE GTK_TYPE_MENU_SHELL (gtk_menu_shell_get_type())
#DEFINE GTK_MENU_SHELL(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_MENU_SHELL, GtkMenuShell))
#DEFINE GTK_MENU_SHELL_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_MENU_SHELL, GtkMenuShellClass))
#DEFINE GTK_IS_MENU_SHELL(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_MENU_SHELL))
#DEFINE GTK_IS_CLASS_MENU_SHELL(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_MENU_SHELL))
#DEFINE GTK_MENU_SHELL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_MENU_SHELL, GtkMenuShellClass))
DECLARE SUB gtk_menu_shell_activate_item(BYVAL AS GtkMenuShell PTR, BYVAL AS GtkWidget PTR, BYVAL AS gboolean)
DECLARE SUB gtk_menu_shell_append(BYVAL AS GtkMenuShell PTR, BYVAL AS GtkWidget PTR)
DECLARE SUB gtk_menu_shell_bind_model(BYVAL AS GtkMenuShell PTR, BYVAL AS GMenuModel PTR, BYVAL AS const gchar PTR, BYVAL AS gboolean)
DECLARE SUB gtk_menu_shell_cancel(BYVAL AS GtkMenuShell PTR)
DECLARE SUB gtk_menu_shell_deactivate(BYVAL AS GtkMenuShell PTR)
DECLARE SUB gtk_menu_shell_deselect(BYVAL AS GtkMenuShell PTR)
DECLARE FUNCTION gtk_menu_shell_get_parent_shell(BYVAL AS GtkMenuShell PTR) AS GtkWidget PTR
DECLARE FUNCTION gtk_menu_shell_get_selected_item(BYVAL AS GtkMenuShell PTR) AS GtkWidget PTR
DECLARE FUNCTION gtk_menu_shell_get_take_focus(BYVAL AS GtkMenuShell PTR) AS gboolean
DECLARE SUB gtk_menu_shell_insert(BYVAL AS GtkMenuShell PTR, BYVAL AS GtkWidget PTR, BYVAL AS gint)
DECLARE SUB gtk_menu_shell_prepend(BYVAL AS GtkMenuShell PTR, BYVAL AS GtkWidget PTR)
DECLARE SUB gtk_menu_shell_select_first(BYVAL AS GtkMenuShell PTR, BYVAL AS gboolean)
DECLARE SUB gtk_menu_shell_select_item(BYVAL AS GtkMenuShell PTR, BYVAL AS GtkWidget PTR)
DECLARE SUB gtk_menu_shell_set_take_focus(BYVAL AS GtkMenuShell PTR, BYVAL AS gboolean)
TYPE _GtkMenuShellClass
  AS GtkContainerClass parent_class
  AS guint submenu_placement : 1
  deactivate AS SUB CDECL(BYVAL AS GtkMenuShell PTR)
  selection_done AS SUB CDECL(BYVAL AS GtkMenuShell PTR)
  move_current AS SUB CDECL(BYVAL AS GtkMenuShell PTR, BYVAL AS GtkMenuDirectionType)
  activate_current AS SUB CDECL(BYVAL AS GtkMenuShell PTR, BYVAL AS gboolean)
  cancel AS SUB CDECL(BYVAL AS GtkMenuShell PTR)
  select_item AS SUB CDECL(BYVAL AS GtkMenuShell PTR, BYVAL AS GtkWidget PTR)
  insert AS SUB CDECL(BYVAL AS GtkMenuShell PTR, BYVAL AS GtkWidget PTR, BYVAL AS gint)
  get_popup_delay AS FUNCTION CDECL(BYVAL AS GtkMenuShell PTR) AS gint
  move_selected AS FUNCTION CDECL(BYVAL AS GtkMenuShell PTR, BYVAL AS gint) AS gboolean
  _gtk_reserved1 AS SUB CDECL()
  _gtk_reserved2 AS SUB CDECL()
  _gtk_reserved3 AS SUB CDECL()
  _gtk_reserved4 AS SUB CDECL()
END TYPE
TYPE GtkMenuDetachFunc AS SUB CDECL(BYVAL AS GtkWidget PTR, BYVAL AS GtkMenu PTR)
TYPE GtkMenuPositionFunc AS SUB CDECL(BYVAL AS GtkMenu PTR, BYVAL AS gint PTR, BYVAL AS gint PTR, BYVAL AS gboolean PTR, BYVAL AS gpointer)
TYPE _GtkToolItem
  AS GtkBin parent
  AS GtkToolItemPrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_tool_item_get_type() AS GType
#DEFINE GTK_TYPE_TOOL_ITEM (gtk_tool_item_get_type())
#DEFINE GTK_TOOL_ITEM(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_TOOL_ITEM, GtkToolItem))
#DEFINE GTK_TOOL_ITEM_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_TOOL_ITEM, GtkToolItemClass))
#DEFINE GTK_IS_TOOL_ITEM(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_TOOL_ITEM))
#DEFINE GTK_IS_CLASS_TOOL_ITEM(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_TOOL_ITEM))
#DEFINE GTK_TOOL_ITEM_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_TOOL_ITEM, GtkToolItemClass))
DECLARE FUNCTION gtk_tool_item_new() AS GtkToolItem PTR
DECLARE FUNCTION gtk_tool_item_get_ellipsize_mode(BYVAL AS GtkToolItem PTR) AS PangoEllipsizeMode
DECLARE FUNCTION gtk_tool_item_get_expand(BYVAL AS GtkToolItem PTR) AS gboolean
DECLARE FUNCTION gtk_tool_item_get_homogeneous(BYVAL AS GtkToolItem PTR) AS gboolean
DECLARE FUNCTION gtk_tool_item_get_icon_size(BYVAL AS GtkToolItem PTR) AS GtkIconSize
DECLARE FUNCTION gtk_tool_item_get_is_important(BYVAL AS GtkToolItem PTR) AS gboolean
DECLARE FUNCTION gtk_tool_item_get_orientation(BYVAL AS GtkToolItem PTR) AS GtkOrientation
DECLARE FUNCTION gtk_tool_item_get_proxy_menu_item(BYVAL AS GtkToolItem PTR, BYVAL AS const gchar PTR) AS GtkWidget PTR
DECLARE FUNCTION gtk_tool_item_get_relief_style(BYVAL AS GtkToolItem PTR) AS GtkReliefStyle
DECLARE FUNCTION gtk_tool_item_get_text_alignment(BYVAL AS GtkToolItem PTR) AS gfloat
DECLARE FUNCTION gtk_tool_item_get_text_orientation(BYVAL AS GtkToolItem PTR) AS GtkOrientation
DECLARE FUNCTION gtk_tool_item_get_text_size_group(BYVAL AS GtkToolItem PTR) AS GtkSizeGroup PTR
DECLARE FUNCTION gtk_tool_item_get_toolbar_style(BYVAL AS GtkToolItem PTR) AS GtkToolbarStyle
DECLARE FUNCTION gtk_tool_item_get_use_drag_window(BYVAL AS GtkToolItem PTR) AS gboolean
DECLARE FUNCTION gtk_tool_item_get_visible_horizontal(BYVAL AS GtkToolItem PTR) AS gboolean
DECLARE FUNCTION gtk_tool_item_get_visible_vertical(BYVAL AS GtkToolItem PTR) AS gboolean
DECLARE SUB gtk_tool_item_rebuild_menu(BYVAL AS GtkToolItem PTR)
DECLARE FUNCTION gtk_tool_item_retrieve_proxy_menu_item(BYVAL AS GtkToolItem PTR) AS GtkWidget PTR
DECLARE SUB gtk_tool_item_set_expand(BYVAL AS GtkToolItem PTR, BYVAL AS gboolean)
DECLARE SUB gtk_tool_item_set_homogeneous(BYVAL AS GtkToolItem PTR, BYVAL AS gboolean)
DECLARE SUB gtk_tool_item_set_is_important(BYVAL AS GtkToolItem PTR, BYVAL AS gboolean)
DECLARE SUB gtk_tool_item_set_proxy_menu_item(BYVAL AS GtkToolItem PTR, BYVAL AS const gchar PTR, BYVAL AS GtkWidget PTR)
DECLARE SUB gtk_tool_item_set_tooltip_markup(BYVAL AS GtkToolItem PTR, BYVAL AS const gchar PTR)
DECLARE SUB gtk_tool_item_set_tooltip_text(BYVAL AS GtkToolItem PTR, BYVAL AS const gchar PTR)
DECLARE SUB gtk_tool_item_set_use_drag_window(BYVAL AS GtkToolItem PTR, BYVAL AS gboolean)
DECLARE SUB gtk_tool_item_set_visible_horizontal(BYVAL AS GtkToolItem PTR, BYVAL AS gboolean)
DECLARE SUB gtk_tool_item_set_visible_vertical(BYVAL AS GtkToolItem PTR, BYVAL AS gboolean)
DECLARE SUB gtk_tool_item_toolbar_reconfigured(BYVAL AS GtkToolItem PTR)
TYPE _GtkToolItemClass
  AS GtkBinClass parent_class
  create_menu_proxy AS FUNCTION CDECL(BYVAL AS GtkToolItem PTR) AS gboolean
  toolbar_reconfigured AS SUB CDECL(BYVAL AS GtkToolItem PTR)
  _gtk_reserved1 AS SUB CDECL()
  _gtk_reserved2 AS SUB CDECL()
  _gtk_reserved3 AS SUB CDECL()
  _gtk_reserved4 AS SUB CDECL()
END TYPE
TYPE _GtkToolButton
  AS GtkToolItem parent
  AS GtkToolButtonPrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_tool_button_get_type() AS GType
#DEFINE GTK_TYPE_TOOL_BUTTON (gtk_tool_button_get_type())
#DEFINE GTK_TOOL_BUTTON(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_TOOL_BUTTON, GtkToolButton))
#DEFINE GTK_TOOL_BUTTON_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_TOOL_BUTTON, GtkToolButtonClass))
#DEFINE GTK_IS_TOOL_BUTTON(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_TOOL_BUTTON))
#DEFINE GTK_IS_CLASS_TOOL_BUTTON(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_TOOL_BUTTON))
#DEFINE GTK_TOOL_BUTTON_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_TOOL_BUTTON, GtkToolButtonClass))
DECLARE FUNCTION gtk_tool_button_new(BYVAL AS GtkWidget PTR, BYVAL AS const gchar PTR) AS GtkToolItem PTR
DECLARE FUNCTION gtk_tool_button_new_from_stock(BYVAL AS const gchar PTR) AS GtkToolItem PTR
DECLARE FUNCTION gtk_tool_button_get_icon_name(BYVAL AS GtkToolButton PTR) AS const gchar PTR
DECLARE FUNCTION gtk_tool_button_get_icon_widget(BYVAL AS GtkToolButton PTR) AS GtkWidget PTR
DECLARE FUNCTION gtk_tool_button_get_label(BYVAL AS GtkToolButton PTR) AS const gchar PTR
DECLARE FUNCTION gtk_tool_button_get_label_widget(BYVAL AS GtkToolButton PTR) AS GtkWidget PTR
DECLARE FUNCTION gtk_tool_button_get_stock_id(BYVAL AS GtkToolButton PTR) AS const gchar PTR
DECLARE FUNCTION gtk_tool_button_get_use_underline(BYVAL AS GtkToolButton PTR) AS gboolean
DECLARE SUB gtk_tool_button_set_icon_name(BYVAL AS GtkToolButton PTR, BYVAL AS const gchar PTR)
DECLARE SUB gtk_tool_button_set_icon_widget(BYVAL AS GtkToolButton PTR, BYVAL AS GtkWidget PTR)
DECLARE SUB gtk_tool_button_set_label(BYVAL AS GtkToolButton PTR, BYVAL AS const gchar PTR)
DECLARE SUB gtk_tool_button_set_label_widget(BYVAL AS GtkToolButton PTR, BYVAL AS GtkWidget PTR)
DECLARE SUB gtk_tool_button_set_stock_id(BYVAL AS GtkToolButton PTR, BYVAL AS const gchar PTR)
DECLARE SUB gtk_tool_button_set_use_underline(BYVAL AS GtkToolButton PTR, BYVAL AS gboolean)
TYPE _GtkToolButtonClass
  AS GtkToolItemClass parent_class
  AS GType button_type
  clicked AS SUB CDECL(BYVAL AS GtkToolButton PTR)
  _gtk_reserved1 AS SUB CDECL()
  _gtk_reserved2 AS SUB CDECL()
  _gtk_reserved3 AS SUB CDECL()
  _gtk_reserved4 AS SUB CDECL()
END TYPE
TYPE GtkPrintSettingsFunc AS SUB CDECL(BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS gpointer)
TYPE _GtkAction
  AS GObject object
  AS GtkActionPrivate PTR private_data
END TYPE
DECLARE FUNCTION gtk_action_get_type() AS GType
#DEFINE GTK_TYPE_ACTION (gtk_action_get_type())
#DEFINE GTK_ACTION(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_ACTION, GtkAction))
#DEFINE GTK_ACTION_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_ACTION, GtkActionClass))
#DEFINE GTK_IS_ACTION(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_ACTION))
#DEFINE GTK_IS_CLASS_ACTION(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_ACTION))
#DEFINE GTK_ACTION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_ACTION, GtkActionClass))
DECLARE FUNCTION gtk_action_new(BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR) AS GtkAction PTR
DECLARE SUB gtk_action_activate(BYVAL AS GtkAction PTR)
DECLARE SUB gtk_action_block_activate(BYVAL AS GtkAction PTR)
DECLARE SUB gtk_action_connect_accelerator(BYVAL AS GtkAction PTR)
DECLARE FUNCTION gtk_action_create_icon(BYVAL AS GtkAction PTR, BYVAL AS GtkIconSize) AS GtkWidget PTR
DECLARE FUNCTION gtk_action_create_menu(BYVAL AS GtkAction PTR) AS GtkWidget PTR
DECLARE FUNCTION gtk_action_create_menu_item(BYVAL AS GtkAction PTR) AS GtkWidget PTR
DECLARE FUNCTION gtk_action_create_tool_item(BYVAL AS GtkAction PTR) AS GtkWidget PTR
DECLARE SUB gtk_action_disconnect_accelerator(BYVAL AS GtkAction PTR)
DECLARE FUNCTION gtk_action_get_accel_closure(BYVAL AS GtkAction PTR) AS GClosure PTR
DECLARE FUNCTION gtk_action_get_accel_path(BYVAL AS GtkAction PTR) AS const gchar PTR
DECLARE FUNCTION gtk_action_get_always_show_image(BYVAL AS GtkAction PTR) AS gboolean
DECLARE FUNCTION gtk_action_get_gicon(BYVAL AS GtkAction PTR) AS GIcon PTR
DECLARE FUNCTION gtk_action_get_icon_name(BYVAL AS GtkAction PTR) AS const gchar PTR
DECLARE FUNCTION gtk_action_get_is_important(BYVAL AS GtkAction PTR) AS gboolean
DECLARE FUNCTION gtk_action_get_label(BYVAL AS GtkAction PTR) AS const gchar PTR
DECLARE FUNCTION gtk_action_get_name(BYVAL AS GtkAction PTR) AS const gchar PTR
DECLARE FUNCTION gtk_action_get_proxies(BYVAL AS GtkAction PTR) AS GSList PTR
DECLARE FUNCTION gtk_action_get_sensitive(BYVAL AS GtkAction PTR) AS gboolean
DECLARE FUNCTION gtk_action_get_short_label(BYVAL AS GtkAction PTR) AS const gchar PTR
DECLARE FUNCTION gtk_action_get_stock_id(BYVAL AS GtkAction PTR) AS const gchar PTR
DECLARE FUNCTION gtk_action_get_tooltip(BYVAL AS GtkAction PTR) AS const gchar PTR
DECLARE FUNCTION gtk_action_get_visible(BYVAL AS GtkAction PTR) AS gboolean
DECLARE FUNCTION gtk_action_get_visible_horizontal(BYVAL AS GtkAction PTR) AS gboolean
DECLARE FUNCTION gtk_action_get_visible_vertical(BYVAL AS GtkAction PTR) AS gboolean
DECLARE FUNCTION gtk_action_is_sensitive(BYVAL AS GtkAction PTR) AS gboolean
DECLARE FUNCTION gtk_action_is_visible(BYVAL AS GtkAction PTR) AS gboolean
DECLARE SUB gtk_action_set_accel_group(BYVAL AS GtkAction PTR, BYVAL AS GtkAccelGroup PTR)
DECLARE SUB gtk_action_set_accel_path(BYVAL AS GtkAction PTR, BYVAL AS const gchar PTR)
DECLARE SUB gtk_action_set_always_show_image(BYVAL AS GtkAction PTR, BYVAL AS gboolean)
DECLARE SUB gtk_action_set_gicon(BYVAL AS GtkAction PTR, BYVAL AS GIcon PTR)
DECLARE SUB gtk_action_set_icon_name(BYVAL AS GtkAction PTR, BYVAL AS const gchar PTR)
DECLARE SUB gtk_action_set_is_important(BYVAL AS GtkAction PTR, BYVAL AS gboolean)
DECLARE SUB gtk_action_set_label(BYVAL AS GtkAction PTR, BYVAL AS const gchar PTR)
DECLARE SUB gtk_action_set_sensitive(BYVAL AS GtkAction PTR, BYVAL AS gboolean)
DECLARE SUB gtk_action_set_short_label(BYVAL AS GtkAction PTR, BYVAL AS const gchar PTR)
DECLARE SUB gtk_action_set_stock_id(BYVAL AS GtkAction PTR, BYVAL AS const gchar PTR)
DECLARE SUB gtk_action_set_tooltip(BYVAL AS GtkAction PTR, BYVAL AS const gchar PTR)
DECLARE SUB gtk_action_set_visible(BYVAL AS GtkAction PTR, BYVAL AS gboolean)
DECLARE SUB gtk_action_set_visible_horizontal(BYVAL AS GtkAction PTR, BYVAL AS gboolean)
DECLARE SUB gtk_action_set_visible_vertical(BYVAL AS GtkAction PTR, BYVAL AS gboolean)
DECLARE SUB gtk_action_unblock_activate(BYVAL AS GtkAction PTR)
TYPE _GtkActionClass
  AS GObjectClass parent_class
  activate AS SUB CDECL(BYVAL AS GtkAction PTR)
  AS GType menu_item_type
  AS GType toolbar_item_type
  create_menu_item AS FUNCTION CDECL(BYVAL AS GtkAction PTR) AS GtkWidget PTR
  create_tool_item AS FUNCTION CDECL(BYVAL AS GtkAction PTR) AS GtkWidget PTR
  connect_proxy AS SUB CDECL(BYVAL AS GtkAction PTR, BYVAL AS GtkWidget PTR)
  disconnect_proxy AS SUB CDECL(BYVAL AS GtkAction PTR, BYVAL AS GtkWidget PTR)
  create_menu AS FUNCTION CDECL(BYVAL AS GtkAction PTR) AS GtkWidget PTR
  _gtk_reserved1 AS SUB CDECL()
  _gtk_reserved2 AS SUB CDECL()
  _gtk_reserved3 AS SUB CDECL()
  _gtk_reserved4 AS SUB CDECL()
END TYPE
TYPE _GtkToggleAction
  AS GtkAction parent
  AS GtkToggleActionPrivate PTR private_data
END TYPE
DECLARE FUNCTION gtk_toggle_action_get_type() AS GType
#DEFINE GTK_TYPE_TOGGLE_ACTION (gtk_toggle_action_get_type())
#DEFINE GTK_TOGGLE_ACTION(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_TOGGLE_ACTION, GtkToggleAction))
#DEFINE GTK_TOGGLE_ACTION_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_TOGGLE_ACTION, GtkToggleActionClass))
#DEFINE GTK_IS_TOGGLE_ACTION(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_TOGGLE_ACTION))
#DEFINE GTK_IS_CLASS_TOGGLE_ACTION(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_TOGGLE_ACTION))
#DEFINE GTK_TOGGLE_ACTION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_TOGGLE_ACTION, GtkToggleActionClass))
DECLARE FUNCTION gtk_toggle_action_new(BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR) AS GtkToggleAction PTR
DECLARE FUNCTION gtk_toggle_action_get_active(BYVAL AS GtkToggleAction PTR) AS gboolean
DECLARE FUNCTION gtk_toggle_action_get_draw_as_radio(BYVAL AS GtkToggleAction PTR) AS gboolean
DECLARE SUB gtk_toggle_action_set_active(BYVAL AS GtkToggleAction PTR, BYVAL AS gboolean)
DECLARE SUB gtk_toggle_action_set_draw_as_radio(BYVAL AS GtkToggleAction PTR, BYVAL AS gboolean)
DECLARE SUB gtk_toggle_action_toggled(BYVAL AS GtkToggleAction PTR)
TYPE _GtkToggleActionClass
  AS GtkActionClass parent_class
  toggled AS SUB CDECL(BYVAL AS GtkToggleAction PTR)
  _gtk_reserved1 AS SUB CDECL()
  _gtk_reserved2 AS SUB CDECL()
  _gtk_reserved3 AS SUB CDECL()
  _gtk_reserved4 AS SUB CDECL()
END TYPE
TYPE _GtkToggleToolButton
  AS GtkToolButton parent
  AS GtkToggleToolButtonPrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_toggle_tool_button_get_type() AS GType
#DEFINE GTK_TYPE_TOGGLE_TOOL_BUTTON (gtk_toggle_tool_button_get_type())
#DEFINE GTK_TOGGLE_TOOL_BUTTON(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_TOGGLE_TOOL_BUTTON, GtkToggleToolButton))
#DEFINE GTK_TOGGLE_TOOL_BUTTON_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_TOGGLE_TOOL_BUTTON, GtkToggleToolButtonClass))
#DEFINE GTK_IS_TOGGLE_TOOL_BUTTON(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_TOGGLE_TOOL_BUTTON))
#DEFINE GTK_IS_CLASS_TOGGLE_TOOL_BUTTON(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_TOGGLE_TOOL_BUTTON))
#DEFINE GTK_TOGGLE_TOOL_BUTTON_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_TOGGLE_TOOL_BUTTON, GtkToggleToolButtonClass))
DECLARE FUNCTION gtk_toggle_tool_button_new() AS GtkToolItem PTR
DECLARE FUNCTION gtk_toggle_tool_button_new_from_stock(BYVAL AS const gchar PTR) AS GtkToolItem PTR
DECLARE FUNCTION gtk_toggle_tool_button_get_active(BYVAL AS GtkToggleToolButton PTR) AS gboolean
DECLARE SUB gtk_toggle_tool_button_set_active(BYVAL AS GtkToggleToolButton PTR, BYVAL AS gboolean)
TYPE _GtkToggleToolButtonClass
  AS GtkToolButtonClass parent_class
  toggled AS SUB CDECL(BYVAL AS GtkToggleToolButton PTR)
  _gtk_reserved1 AS SUB CDECL()
  _gtk_reserved2 AS SUB CDECL()
  _gtk_reserved3 AS SUB CDECL()
  _gtk_reserved4 AS SUB CDECL()
END TYPE
TYPE GtkRecentSortFunc AS FUNCTION CDECL(BYVAL AS GtkRecentInfo PTR, BYVAL AS GtkRecentInfo PTR, BYVAL AS gpointer) AS gint
TYPE GtkRecentFilterFunc AS FUNCTION CDECL(BYVAL AS const GtkRecentFilterInfo PTR, BYVAL AS gpointer) AS gboolean
TYPE GtkStylePropertyParser AS FUNCTION CDECL(BYVAL AS const gchar PTR, BYVAL AS GValue PTR) AS gboolean
TYPE GtkTextBufferDeserializeFunc AS FUNCTION CDECL(BYVAL AS GtkTextBuffer PTR, BYVAL AS GtkTextBuffer PTR, BYVAL AS GtkTextIter PTR, BYVAL AS const guint8 PTR, BYVAL AS gsize, BYVAL AS gboolean, BYVAL AS gpointer) AS gboolean
TYPE GtkTextBufferSerializeFunc AS FUNCTION CDECL(BYVAL AS GtkTextBuffer PTR, BYVAL AS GtkTextBuffer PTR, BYVAL AS const GtkTextIter PTR, BYVAL AS const GtkTextIter PTR, BYVAL AS gsize PTR, BYVAL AS gpointer) AS guint8 PTR
TYPE GtkTextTagTableForeach AS SUB CDECL(BYVAL AS GtkTextTag PTR, BYVAL AS gpointer)
TYPE GtkTreeModelForeachFunc AS FUNCTION CDECL(BYVAL AS GtkTreeModel PTR, BYVAL AS GtkTreePath PTR, BYVAL AS GtkTreeIter PTR, BYVAL AS gpointer) AS gboolean
TYPE GtkTreeModelFilterModifyFunc AS SUB CDECL(BYVAL AS GtkTreeModel PTR, BYVAL AS GtkTreeIter PTR, BYVAL AS GValue PTR, BYVAL AS gint, BYVAL AS gpointer)
TYPE GtkTreeModelFilterVisibleFunc AS FUNCTION CDECL(BYVAL AS GtkTreeModel PTR, BYVAL AS GtkTreeIter PTR, BYVAL AS gpointer) AS gboolean
TYPE GtkTreeSelectionFunc AS FUNCTION CDECL(BYVAL AS GtkTreeSelection PTR, BYVAL AS GtkTreeModel PTR, BYVAL AS GtkTreePath PTR, BYVAL AS gboolean, BYVAL AS gpointer) AS gboolean
TYPE GtkTreeSelectionForeachFunc AS SUB CDECL(BYVAL AS GtkTreeModel PTR, BYVAL AS GtkTreePath PTR, BYVAL AS GtkTreeIter PTR, BYVAL AS gpointer)
TYPE GtkTreeViewSearchEqualFunc AS FUNCTION CDECL(BYVAL AS GtkTreeModel PTR, BYVAL AS gint, BYVAL AS const gchar PTR, BYVAL AS GtkTreeIter PTR, BYVAL AS gpointer) AS gboolean
TYPE GtkTreeViewSearchPositionFunc AS SUB CDECL(BYVAL AS GtkTreeView PTR, BYVAL AS GtkWidget PTR, BYVAL AS gpointer)
TYPE GtkTreeViewMappingFunc AS SUB CDECL(BYVAL AS GtkTreeView PTR, BYVAL AS GtkTreePath PTR, BYVAL AS gpointer)
TYPE GtkTreeViewColumnDropFunc AS FUNCTION CDECL(BYVAL AS GtkTreeView PTR, BYVAL AS GtkTreeViewColumn PTR, BYVAL AS GtkTreeViewColumn PTR, BYVAL AS GtkTreeViewColumn PTR, BYVAL AS gpointer) AS gboolean
TYPE GtkListBoxFilterFunc AS FUNCTION CDECL(BYVAL AS GtkListBoxRow PTR, BYVAL AS gpointer) AS gboolean
TYPE GtkListBoxUpdateHeaderFunc AS SUB CDECL(BYVAL AS GtkListBoxRow PTR, BYVAL AS GtkListBoxRow PTR, BYVAL AS gpointer)
TYPE GtkListBoxSortFunc AS FUNCTION CDECL(BYVAL AS GtkListBoxRow PTR, BYVAL AS GtkListBoxRow PTR, BYVAL AS gpointer) AS gint
TYPE _GtkCellAccessible
  AS GtkAccessible parent
  AS GtkCellAccessiblePrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_cell_accessible_get_type() AS GType
#DEFINE GTK_TYPE_CELL_ACCESSIBLE (gtk_cell_accessible_get_type())
#DEFINE GTK_CELL_ACCESSIBLE(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_CELL_ACCESSIBLE, GtkCellAccessible))
#DEFINE GTK_CELL_ACCESSIBLE_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_CELL_ACCESSIBLE, GtkCellAccessibleClass))
#DEFINE GTK_IS_CELL_ACCESSIBLE(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_CELL_ACCESSIBLE))
#DEFINE GTK_IS_CLASS_CELL_ACCESSIBLE(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_CELL_ACCESSIBLE))
#DEFINE GTK_CELL_ACCESSIBLE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_CELL_ACCESSIBLE, GtkCellAccessibleClass))
TYPE _GtkCellAccessibleClass
  AS GtkAccessibleClass parent_class
  update_cache AS SUB CDECL(BYVAL AS GtkCellAccessible PTR, BYVAL AS gboolean)
END TYPE
TYPE _GtkRendererCellAccessible
  AS GtkCellAccessible parent
  AS GtkRendererCellAccessiblePrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_renderer_cell_accessible_get_type() AS GType
#DEFINE GTK_TYPE_RENDERER_CELL_ACCESSIBLE (gtk_renderer_cell_accessible_get_type())
#DEFINE GTK_RENDERER_CELL_ACCESSIBLE(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_RENDERER_CELL_ACCESSIBLE, GtkRendererCellAccessible))
#DEFINE GTK_RENDERER_CELL_ACCESSIBLE_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_RENDERER_CELL_ACCESSIBLE, GtkRendererCellAccessibleClass))
#DEFINE GTK_IS_RENDERER_CELL_ACCESSIBLE(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_RENDERER_CELL_ACCESSIBLE))
#DEFINE GTK_IS_CLASS_RENDERER_CELL_ACCESSIBLE(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_RENDERER_CELL_ACCESSIBLE))
#DEFINE GTK_RENDERER_CELL_ACCESSIBLE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_RENDERER_CELL_ACCESSIBLE, GtkRendererCellAccessibleClass))
DECLARE FUNCTION gtk_renderer_cell_accessible_new(BYVAL AS GtkCellRenderer PTR) AS AtkObject PTR
TYPE _GtkRendererCellAccessibleClass
  AS GtkCellAccessibleClass parent_class
END TYPE
TYPE _GtkContainerAccessible
  AS GtkWidgetAccessible parent
  AS GtkContainerAccessiblePrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_container_accessible_get_type() AS GType
#DEFINE GTK_TYPE_CONTAINER_ACCESSIBLE (gtk_container_accessible_get_type())
#DEFINE GTK_CONTAINER_ACCESSIBLE(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_CONTAINER_ACCESSIBLE, GtkContainerAccessible))
#DEFINE GTK_CONTAINER_ACCESSIBLE_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_CONTAINER_ACCESSIBLE, GtkContainerAccessibleClass))
#DEFINE GTK_IS_CONTAINER_ACCESSIBLE(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_CONTAINER_ACCESSIBLE))
#DEFINE GTK_IS_CLASS_CONTAINER_ACCESSIBLE(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_CONTAINER_ACCESSIBLE))
#DEFINE GTK_CONTAINER_ACCESSIBLE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_CONTAINER_ACCESSIBLE, GtkContainerAccessibleClass))
TYPE _GtkContainerAccessibleClass
  AS GtkWidgetAccessibleClass parent_class
  add_gtk AS FUNCTION CDECL(BYVAL AS GtkContainer PTR, BYVAL AS GtkWidget PTR, BYVAL AS gpointer) AS gint
  remove_gtk AS FUNCTION CDECL(BYVAL AS GtkContainer PTR, BYVAL AS GtkWidget PTR, BYVAL AS gpointer) AS gint
END TYPE
TYPE _GtkMenuItemAccessible
  AS GtkContainerAccessible parent
  AS GtkMenuItemAccessiblePrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_menu_item_accessible_get_type() AS GType
#DEFINE GTK_TYPE_MENU_ITEM_ACCESSIBLE (gtk_menu_item_accessible_get_type())
#DEFINE GTK_MENU_ITEM_ACCESSIBLE(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_MENU_ITEM_ACCESSIBLE, GtkMenuItemAccessible))
#DEFINE GTK_MENU_ITEM_ACCESSIBLE_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_MENU_ITEM_ACCESSIBLE, GtkMenuItemAccessibleClass))
#DEFINE GTK_IS_MENU_ITEM_ACCESSIBLE(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_MENU_ITEM_ACCESSIBLE))
#DEFINE GTK_IS_CLASS_MENU_ITEM_ACCESSIBLE(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_MENU_ITEM_ACCESSIBLE))
#DEFINE GTK_MENU_ITEM_ACCESSIBLE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_MENU_ITEM_ACCESSIBLE, GtkMenuItemAccessibleClass))
TYPE _GtkMenuItemAccessibleClass
  AS GtkContainerAccessibleClass parent_class
END TYPE
TYPE GtkFlowBoxCreateWidgetFunc AS FUNCTION CDECL(BYVAL AS gpointer, BYVAL AS gpointer) AS GtkWidget PTR
TYPE GtkFlowBoxForeachFunc AS SUB CDECL(BYVAL AS GtkFlowBox PTR, BYVAL AS GtkFlowBoxChild PTR, BYVAL AS gpointer)
TYPE GtkFlowBoxFilterFunc AS FUNCTION CDECL(BYVAL AS GtkFlowBoxChild PTR, BYVAL AS gpointer) AS gboolean
TYPE GtkFlowBoxSortFunc AS FUNCTION CDECL(BYVAL AS GtkFlowBoxChild PTR, BYVAL AS GtkFlowBoxChild PTR, BYVAL AS gpointer) AS gint
TYPE GtkListBoxCreateWidgetFunc AS FUNCTION CDECL(BYVAL AS gpointer, BYVAL AS gpointer) AS GtkWidget PTR
TYPE GtkListBoxForeachFunc AS SUB CDECL(BYVAL AS GtkListBox PTR, BYVAL AS GtkListBoxRow PTR, BYVAL AS gpointer)
TYPE _GtkButtonAccessible
  AS GtkContainerAccessible parent
  AS GtkButtonAccessiblePrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_button_accessible_get_type() AS GType
#DEFINE GTK_TYPE_BUTTON_ACCESSIBLE (gtk_button_accessible_get_type())
#DEFINE GTK_BUTTON_ACCESSIBLE(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_BUTTON_ACCESSIBLE, GtkButtonAccessible))
#DEFINE GTK_BUTTON_ACCESSIBLE_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_BUTTON_ACCESSIBLE, GtkButtonAccessibleClass))
#DEFINE GTK_IS_BUTTON_ACCESSIBLE(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_BUTTON_ACCESSIBLE))
#DEFINE GTK_IS_CLASS_BUTTON_ACCESSIBLE(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_BUTTON_ACCESSIBLE))
#DEFINE GTK_BUTTON_ACCESSIBLE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_BUTTON_ACCESSIBLE, GtkButtonAccessibleClass))
TYPE _GtkButtonAccessibleClass
  AS GtkContainerAccessibleClass parent_class
END TYPE
TYPE _GtkMenuShellAccessible
  AS GtkContainerAccessible parent
  AS GtkMenuShellAccessiblePrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_menu_shell_accessible_get_type() AS GType
#DEFINE GTK_TYPE_MENU_SHELL_ACCESSIBLE (gtk_menu_shell_accessible_get_type())
#DEFINE GTK_MENU_SHELL_ACCESSIBLE(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_MENU_SHELL_ACCESSIBLE, GtkMenuShellAccessible))
#DEFINE GTK_MENU_SHELL_ACCESSIBLE_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_MENU_SHELL_ACCESSIBLE, GtkMenuShellAccessibleClass))
#DEFINE GTK_IS_MENU_SHELL_ACCESSIBLE(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_MENU_SHELL_ACCESSIBLE))
#DEFINE GTK_IS_CLASS_MENU_SHELL_ACCESSIBLE(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_MENU_SHELL_ACCESSIBLE))
#DEFINE GTK_MENU_SHELL_ACCESSIBLE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_MENU_SHELL_ACCESSIBLE, GtkMenuShellAccessibleClass))
TYPE _GtkMenuShellAccessibleClass
  AS GtkContainerAccessibleClass parent_class
END TYPE
TYPE _GtkToggleButtonAccessible
  AS GtkButtonAccessible parent
  AS GtkToggleButtonAccessiblePrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_toggle_button_accessible_get_type() AS GType
#DEFINE GTK_TYPE_TOGGLE_BUTTON_ACCESSIBLE (gtk_toggle_button_accessible_get_type())
#DEFINE GTK_TOGGLE_BUTTON_ACCESSIBLE(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_TOGGLE_BUTTON_ACCESSIBLE, GtkToggleButtonAccessible))
#DEFINE GTK_TOGGLE_BUTTON_ACCESSIBLE_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_TOGGLE_BUTTON_ACCESSIBLE, GtkToggleButtonAccessibleClass))
#DEFINE GTK_IS_TOGGLE_BUTTON_ACCESSIBLE(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_TOGGLE_BUTTON_ACCESSIBLE))
#DEFINE GTK_IS_CLASS_TOGGLE_BUTTON_ACCESSIBLE(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_TOGGLE_BUTTON_ACCESSIBLE))
#DEFINE GTK_TOGGLE_BUTTON_ACCESSIBLE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_TOGGLE_BUTTON_ACCESSIBLE, GtkToggleButtonAccessibleClass))
TYPE _GtkToggleButtonAccessibleClass
  AS GtkButtonAccessibleClass parent_class
END TYPE
TYPE _GtkNativeDialogClass
  AS GObjectClass parent_class
  response AS SUB CDECL(BYVAL AS GtkNativeDialog PTR, BYVAL AS gint)
  show AS SUB CDECL(BYVAL AS GtkNativeDialog PTR)
  hide AS SUB CDECL(BYVAL AS GtkNativeDialog PTR)
  _gtk_reserved1 AS SUB CDECL()
  _gtk_reserved2 AS SUB CDECL()
  _gtk_reserved3 AS SUB CDECL()
  _gtk_reserved4 AS SUB CDECL()
END TYPE
' P_3

TYPE _GtkAboutDialog
  AS GtkDialog parent_instance
  AS GtkAboutDialogPrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_about_dialog_get_type() AS GType
#DEFINE GTK_TYPE_ABOUT_DIALOG (gtk_about_dialog_get_type())
#DEFINE GTK_ABOUT_DIALOG(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_ABOUT_DIALOG, GtkAboutDialog))
#DEFINE GTK_ABOUT_DIALOG_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_ABOUT_DIALOG, GtkAboutDialogClass))
#DEFINE GTK_IS_ABOUT_DIALOG(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_ABOUT_DIALOG))
#DEFINE GTK_IS_CLASS_ABOUT_DIALOG(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_ABOUT_DIALOG))
#DEFINE GTK_ABOUT_DIALOG_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_ABOUT_DIALOG, GtkAboutDialogClass))
DECLARE FUNCTION gtk_about_dialog_new() AS GtkWidget PTR
DECLARE SUB gtk_about_dialog_add_credit_section(BYVAL AS GtkAboutDialog PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR PTR)
DECLARE FUNCTION gtk_about_dialog_get_artists(BYVAL AS GtkAboutDialog PTR) AS const gchar ptr const /'const gchar* const'/ PTR
DECLARE FUNCTION gtk_about_dialog_get_authors(BYVAL AS GtkAboutDialog PTR) AS const gchar ptr const /'const gchar* const'/ PTR
DECLARE FUNCTION gtk_about_dialog_get_comments(BYVAL AS GtkAboutDialog PTR) AS const gchar PTR
DECLARE FUNCTION gtk_about_dialog_get_copyright(BYVAL AS GtkAboutDialog PTR) AS const gchar PTR
DECLARE FUNCTION gtk_about_dialog_get_documenters(BYVAL AS GtkAboutDialog PTR) AS const gchar ptr const /'const gchar* const'/ PTR
DECLARE FUNCTION gtk_about_dialog_get_license(BYVAL AS GtkAboutDialog PTR) AS const gchar PTR
DECLARE FUNCTION gtk_about_dialog_get_license_type(BYVAL AS GtkAboutDialog PTR) AS GtkLicense
DECLARE FUNCTION gtk_about_dialog_get_logo(BYVAL AS GtkAboutDialog PTR) AS GdkPixbuf PTR
DECLARE FUNCTION gtk_about_dialog_get_logo_icon_name(BYVAL AS GtkAboutDialog PTR) AS const gchar PTR
DECLARE FUNCTION gtk_about_dialog_get_program_name(BYVAL AS GtkAboutDialog PTR) AS const gchar PTR
DECLARE FUNCTION gtk_about_dialog_get_translator_credits(BYVAL AS GtkAboutDialog PTR) AS const gchar PTR
DECLARE FUNCTION gtk_about_dialog_get_version(BYVAL AS GtkAboutDialog PTR) AS const gchar PTR
DECLARE FUNCTION gtk_about_dialog_get_website(BYVAL AS GtkAboutDialog PTR) AS const gchar PTR
DECLARE FUNCTION gtk_about_dialog_get_website_label(BYVAL AS GtkAboutDialog PTR) AS const gchar PTR
DECLARE FUNCTION gtk_about_dialog_get_wrap_license(BYVAL AS GtkAboutDialog PTR) AS gboolean
DECLARE SUB gtk_about_dialog_set_artists(BYVAL AS GtkAboutDialog PTR, BYVAL AS const gchar PTR PTR)
DECLARE SUB gtk_about_dialog_set_authors(BYVAL AS GtkAboutDialog PTR, BYVAL AS const gchar PTR PTR)
DECLARE SUB gtk_about_dialog_set_comments(BYVAL AS GtkAboutDialog PTR, BYVAL AS const gchar PTR)
DECLARE SUB gtk_about_dialog_set_copyright(BYVAL AS GtkAboutDialog PTR, BYVAL AS const gchar PTR)
DECLARE SUB gtk_about_dialog_set_documenters(BYVAL AS GtkAboutDialog PTR, BYVAL AS const gchar PTR PTR)
DECLARE SUB gtk_about_dialog_set_license(BYVAL AS GtkAboutDialog PTR, BYVAL AS const gchar PTR)
DECLARE SUB gtk_about_dialog_set_license_type(BYVAL AS GtkAboutDialog PTR, BYVAL AS GtkLicense)
DECLARE SUB gtk_about_dialog_set_logo(BYVAL AS GtkAboutDialog PTR, BYVAL AS GdkPixbuf PTR)
DECLARE SUB gtk_about_dialog_set_logo_icon_name(BYVAL AS GtkAboutDialog PTR, BYVAL AS const gchar PTR)
DECLARE SUB gtk_about_dialog_set_program_name(BYVAL AS GtkAboutDialog PTR, BYVAL AS const gchar PTR)
DECLARE SUB gtk_about_dialog_set_translator_credits(BYVAL AS GtkAboutDialog PTR, BYVAL AS const gchar PTR)
DECLARE SUB gtk_about_dialog_set_version(BYVAL AS GtkAboutDialog PTR, BYVAL AS const gchar PTR)
DECLARE SUB gtk_about_dialog_set_website(BYVAL AS GtkAboutDialog PTR, BYVAL AS const gchar PTR)
DECLARE SUB gtk_about_dialog_set_website_label(BYVAL AS GtkAboutDialog PTR, BYVAL AS const gchar PTR)
DECLARE SUB gtk_about_dialog_set_wrap_license(BYVAL AS GtkAboutDialog PTR, BYVAL AS gboolean)
TYPE _GtkAboutDialogClass
  AS GtkDialogClass parent_class
  activate_link AS FUNCTION CDECL(BYVAL AS GtkAboutDialog PTR, BYVAL AS const gchar PTR) AS gboolean
  _gtk_reserved1 AS SUB CDECL()
  _gtk_reserved2 AS SUB CDECL()
  _gtk_reserved3 AS SUB CDECL()
  _gtk_reserved4 AS SUB CDECL()
END TYPE
TYPE _GtkAccelGroup
  AS GObject parent
  AS GtkAccelGroupPrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_accel_group_get_type() AS GType
#DEFINE GTK_TYPE_ACCEL_GROUP (gtk_accel_group_get_type())
#DEFINE GTK_ACCEL_GROUP(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_ACCEL_GROUP, GtkAccelGroup))
#DEFINE GTK_ACCEL_GROUP_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_ACCEL_GROUP, GtkAccelGroupClass))
#DEFINE GTK_IS_ACCEL_GROUP(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_ACCEL_GROUP))
#DEFINE GTK_IS_CLASS_ACCEL_GROUP(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_ACCEL_GROUP))
#DEFINE GTK_ACCEL_GROUP_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_ACCEL_GROUP, GtkAccelGroupClass))
DECLARE FUNCTION gtk_accel_group_new() AS GtkAccelGroup PTR
DECLARE FUNCTION gtk_accel_group_from_accel_closure(BYVAL AS GClosure PTR) AS GtkAccelGroup PTR
DECLARE FUNCTION gtk_accel_group_activate(BYVAL AS GtkAccelGroup PTR, BYVAL AS GQuark, BYVAL AS GObject PTR, BYVAL AS guint, BYVAL AS GdkModifierType) AS gboolean
DECLARE SUB gtk_accel_group_connect(BYVAL AS GtkAccelGroup PTR, BYVAL AS guint, BYVAL AS GdkModifierType, BYVAL AS GtkAccelFlags, BYVAL AS GClosure PTR)
DECLARE SUB gtk_accel_group_connect_by_path(BYVAL AS GtkAccelGroup PTR, BYVAL AS const gchar PTR, BYVAL AS GClosure PTR)
DECLARE FUNCTION gtk_accel_group_disconnect(BYVAL AS GtkAccelGroup PTR, BYVAL AS GClosure PTR) AS gboolean
DECLARE FUNCTION gtk_accel_group_disconnect_key(BYVAL AS GtkAccelGroup PTR, BYVAL AS guint, BYVAL AS GdkModifierType) AS gboolean
DECLARE FUNCTION gtk_accel_group_find(BYVAL AS GtkAccelGroup PTR, BYVAL AS GtkAccelGroupFindFunc, BYVAL AS gpointer) AS GtkAccelKey PTR
DECLARE FUNCTION gtk_accel_group_get_is_locked(BYVAL AS GtkAccelGroup PTR) AS gboolean
DECLARE FUNCTION gtk_accel_group_get_modifier_mask(BYVAL AS GtkAccelGroup PTR) AS GdkModifierType
DECLARE SUB gtk_accel_group_lock(BYVAL AS GtkAccelGroup PTR)
DECLARE FUNCTION gtk_accel_group_query(BYVAL AS GtkAccelGroup PTR, BYVAL AS guint, BYVAL AS GdkModifierType, BYVAL AS guint PTR) AS GtkAccelGroupEntry PTR
DECLARE SUB gtk_accel_group_unlock(BYVAL AS GtkAccelGroup PTR)
TYPE GtkAccelGroupActivate AS FUNCTION CDECL(BYVAL AS GtkAccelGroup PTR, BYVAL AS GObject PTR, BYVAL AS guint, BYVAL AS GdkModifierType) AS gboolean
TYPE _GtkAccelGroupClass
  AS GObjectClass parent_class
  accel_changed AS SUB CDECL(BYVAL AS GtkAccelGroup PTR, BYVAL AS guint, BYVAL AS GdkModifierType, BYVAL AS GClosure PTR)
  _gtk_reserved1 AS SUB CDECL()
  _gtk_reserved2 AS SUB CDECL()
  _gtk_reserved3 AS SUB CDECL()
  _gtk_reserved4 AS SUB CDECL()
END TYPE
TYPE _GtkAccelGroupEntry
  AS GtkAccelKey key
  AS GClosure PTR closure
  AS GQuark accel_path_quark
END TYPE
TYPE _GtkAccelLabel
  AS GtkLabel label
  AS GtkAccelLabelPrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_accel_label_get_type() AS GType
#DEFINE GTK_TYPE_ACCEL_LABEL (gtk_accel_label_get_type())
#DEFINE GTK_ACCEL_LABEL(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_ACCEL_LABEL, GtkAccelLabel))
#DEFINE GTK_ACCEL_LABEL_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_ACCEL_LABEL, GtkAccelLabelClass))
#DEFINE GTK_IS_ACCEL_LABEL(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_ACCEL_LABEL))
#DEFINE GTK_IS_CLASS_ACCEL_LABEL(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_ACCEL_LABEL))
#DEFINE GTK_ACCEL_LABEL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_ACCEL_LABEL, GtkAccelLabelClass))
DECLARE FUNCTION gtk_accel_label_new(BYVAL AS const gchar PTR) AS GtkWidget PTR
DECLARE SUB gtk_accel_label_get_accel(BYVAL AS GtkAccelLabel PTR, BYVAL AS guint PTR, BYVAL AS GdkModifierType PTR)
DECLARE FUNCTION gtk_accel_label_get_accel_widget(BYVAL AS GtkAccelLabel PTR) AS GtkWidget PTR
DECLARE FUNCTION gtk_accel_label_get_accel_width(BYVAL AS GtkAccelLabel PTR) AS guint
DECLARE FUNCTION gtk_accel_label_refetch(BYVAL AS GtkAccelLabel PTR) AS gboolean
DECLARE SUB gtk_accel_label_set_accel(BYVAL AS GtkAccelLabel PTR, BYVAL AS guint, BYVAL AS GdkModifierType)
DECLARE SUB gtk_accel_label_set_accel_closure(BYVAL AS GtkAccelLabel PTR, BYVAL AS GClosure PTR)
DECLARE SUB gtk_accel_label_set_accel_widget(BYVAL AS GtkAccelLabel PTR, BYVAL AS GtkWidget PTR)
TYPE _GtkAccelLabelClass
  AS GtkLabelClass parent_class
  AS gchar PTR signal_quote1
  AS gchar PTR signal_quote2
  AS gchar PTR mod_name_shift
  AS gchar PTR mod_name_control
  AS gchar PTR mod_name_alt
  AS gchar PTR mod_separator
  _gtk_reserved1 AS SUB CDECL()
  _gtk_reserved2 AS SUB CDECL()
  _gtk_reserved3 AS SUB CDECL()
  _gtk_reserved4 AS SUB CDECL()
END TYPE
DECLARE FUNCTION gtk_accel_map_get_type() AS GType
#DEFINE GTK_TYPE_ACCEL_MAP (gtk_accel_map_get_type())
#DEFINE GTK_ACCEL_MAP(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_ACCEL_MAP, GtkAccelMap))
#DEFINE GTK_ACCEL_MAP_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_ACCEL_MAP, GtkAccelMapClass))
#DEFINE GTK_IS_ACCEL_MAP(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_ACCEL_MAP))
#DEFINE GTK_IS_CLASS_ACCEL_MAP(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_ACCEL_MAP))
#DEFINE GTK_ACCEL_MAP_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_ACCEL_MAP, GtkAccelMapClass))
DECLARE SUB gtk_accel_map_add_entry(BYVAL AS const gchar PTR, BYVAL AS guint, BYVAL AS GdkModifierType)
DECLARE SUB gtk_accel_map_add_filter(BYVAL AS const gchar PTR)
DECLARE FUNCTION gtk_accel_map_change_entry(BYVAL AS const gchar PTR, BYVAL AS guint, BYVAL AS GdkModifierType, BYVAL AS gboolean) AS gboolean
DECLARE SUB gtk_accel_map_foreach(BYVAL AS gpointer, BYVAL AS GtkAccelMapForeach)
DECLARE SUB gtk_accel_map_foreach_unfiltered(BYVAL AS gpointer, BYVAL AS GtkAccelMapForeach)
DECLARE FUNCTION gtk_accel_map_get() AS GtkAccelMap PTR
DECLARE SUB gtk_accel_map_load(BYVAL AS const gchar PTR)
DECLARE SUB gtk_accel_map_load_fd(BYVAL AS gint)
DECLARE SUB gtk_accel_map_load_scanner(BYVAL AS GScanner PTR)
DECLARE SUB gtk_accel_map_lock_path(BYVAL AS const gchar PTR)
DECLARE FUNCTION gtk_accel_map_lookup_entry(BYVAL AS const gchar PTR, BYVAL AS GtkAccelKey PTR) AS gboolean
DECLARE SUB gtk_accel_map_save(BYVAL AS const gchar PTR)
DECLARE SUB gtk_accel_map_save_fd(BYVAL AS gint)
DECLARE SUB gtk_accel_map_unlock_path(BYVAL AS const gchar PTR)
TYPE _GtkActionBar
  AS GtkBin bin
END TYPE
DECLARE FUNCTION gtk_action_bar_get_type() AS GType
#DEFINE GTK_TYPE_ACTION_BAR (gtk_action_bar_get_type())
#DEFINE GTK_ACTION_BAR(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_ACTION_BAR, GtkActionBar))
#DEFINE GTK_ACTION_BAR_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_ACTION_BAR, GtkActionBarClass))
#DEFINE GTK_IS_ACTION_BAR(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_ACTION_BAR))
#DEFINE GTK_IS_CLASS_ACTION_BAR(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_ACTION_BAR))
#DEFINE GTK_ACTION_BAR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_ACTION_BAR, GtkActionBarClass))
DECLARE FUNCTION gtk_action_bar_new() AS GtkWidget PTR
DECLARE FUNCTION gtk_action_bar_get_center_widget(BYVAL AS GtkActionBar PTR) AS GtkWidget PTR
DECLARE SUB gtk_action_bar_pack_end(BYVAL AS GtkActionBar PTR, BYVAL AS GtkWidget PTR)
DECLARE SUB gtk_action_bar_pack_start(BYVAL AS GtkActionBar PTR, BYVAL AS GtkWidget PTR)
DECLARE SUB gtk_action_bar_set_center_widget(BYVAL AS GtkActionBar PTR, BYVAL AS GtkWidget PTR)
TYPE _GtkActionBarClass
  AS GtkBinClass parent_class
  _gtk_reserved1 AS SUB CDECL()
  _gtk_reserved2 AS SUB CDECL()
  _gtk_reserved3 AS SUB CDECL()
  _gtk_reserved4 AS SUB CDECL()
END TYPE
TYPE _GtkActionEntry
  AS const gchar PTR name
  AS const gchar PTR stock_id
  AS const gchar PTR label
  AS const gchar PTR accelerator
  AS const gchar PTR tooltip
  AS GCallback callback
END TYPE
TYPE _GtkActionGroup
  AS GObject parent
  AS GtkActionGroupPrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_action_group_get_type() AS GType
#DEFINE GTK_TYPE_ACTION_GROUP (gtk_action_group_get_type())
#DEFINE GTK_ACTION_GROUP(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_ACTION_GROUP, GtkActionGroup))
#DEFINE GTK_ACTION_GROUP_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_ACTION_GROUP, GtkActionGroupClass))
#DEFINE GTK_IS_ACTION_GROUP(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_ACTION_GROUP))
#DEFINE GTK_IS_CLASS_ACTION_GROUP(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_ACTION_GROUP))
#DEFINE GTK_ACTION_GROUP_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_ACTION_GROUP, GtkActionGroupClass))
DECLARE FUNCTION gtk_action_group_new(BYVAL AS const gchar PTR) AS GtkActionGroup PTR
DECLARE SUB gtk_action_group_add_action(BYVAL AS GtkActionGroup PTR, BYVAL AS GtkAction PTR)
DECLARE SUB gtk_action_group_add_action_with_accel(BYVAL AS GtkActionGroup PTR, BYVAL AS GtkAction PTR, BYVAL AS const gchar PTR)
DECLARE SUB gtk_action_group_add_actions(BYVAL AS GtkActionGroup PTR, BYVAL AS const GtkActionEntry PTR, BYVAL AS guint, BYVAL AS gpointer)
DECLARE SUB gtk_action_group_add_actions_full(BYVAL AS GtkActionGroup PTR, BYVAL AS const GtkActionEntry PTR, BYVAL AS guint, BYVAL AS gpointer, BYVAL AS GDestroyNotify)
DECLARE SUB gtk_action_group_add_radio_actions(BYVAL AS GtkActionGroup PTR, BYVAL AS const GtkRadioActionEntry PTR, BYVAL AS guint, BYVAL AS gint, BYVAL AS GCallback, BYVAL AS gpointer)
DECLARE SUB gtk_action_group_add_radio_actions_full(BYVAL AS GtkActionGroup PTR, BYVAL AS const GtkRadioActionEntry PTR, BYVAL AS guint, BYVAL AS gint, BYVAL AS GCallback, BYVAL AS gpointer, BYVAL AS GDestroyNotify)
DECLARE SUB gtk_action_group_add_toggle_actions(BYVAL AS GtkActionGroup PTR, BYVAL AS const GtkToggleActionEntry PTR, BYVAL AS guint, BYVAL AS gpointer)
DECLARE SUB gtk_action_group_add_toggle_actions_full(BYVAL AS GtkActionGroup PTR, BYVAL AS const GtkToggleActionEntry PTR, BYVAL AS guint, BYVAL AS gpointer, BYVAL AS GDestroyNotify)
DECLARE FUNCTION gtk_action_group_get_accel_group(BYVAL AS GtkActionGroup PTR) AS GtkAccelGroup PTR
DECLARE FUNCTION gtk_action_group_get_action(BYVAL AS GtkActionGroup PTR, BYVAL AS const gchar PTR) AS GtkAction PTR
DECLARE FUNCTION gtk_action_group_get_name(BYVAL AS GtkActionGroup PTR) AS const gchar PTR
DECLARE FUNCTION gtk_action_group_get_sensitive(BYVAL AS GtkActionGroup PTR) AS gboolean
DECLARE FUNCTION gtk_action_group_get_visible(BYVAL AS GtkActionGroup PTR) AS gboolean
DECLARE FUNCTION gtk_action_group_list_actions(BYVAL AS GtkActionGroup PTR) AS GList PTR
DECLARE SUB gtk_action_group_remove_action(BYVAL AS GtkActionGroup PTR, BYVAL AS GtkAction PTR)
DECLARE SUB gtk_action_group_set_accel_group(BYVAL AS GtkActionGroup PTR, BYVAL AS GtkAccelGroup PTR)
DECLARE SUB gtk_action_group_set_sensitive(BYVAL AS GtkActionGroup PTR, BYVAL AS gboolean)
DECLARE SUB gtk_action_group_set_translate_func(BYVAL AS GtkActionGroup PTR, BYVAL AS GtkTranslateFunc, BYVAL AS gpointer, BYVAL AS GDestroyNotify)
DECLARE SUB gtk_action_group_set_translation_domain(BYVAL AS GtkActionGroup PTR, BYVAL AS const gchar PTR)
DECLARE SUB gtk_action_group_set_visible(BYVAL AS GtkActionGroup PTR, BYVAL AS gboolean)
DECLARE FUNCTION gtk_action_group_translate_string(BYVAL AS GtkActionGroup PTR, BYVAL AS const gchar PTR) AS const gchar PTR
TYPE _GtkActionGroupClass
  AS GObjectClass parent_class
  get_action AS FUNCTION CDECL(BYVAL AS GtkActionGroup PTR, BYVAL AS const gchar PTR) AS GtkAction PTR
  _gtk_reserved1 AS SUB CDECL()
  _gtk_reserved2 AS SUB CDECL()
  _gtk_reserved3 AS SUB CDECL()
  _gtk_reserved4 AS SUB CDECL()
END TYPE
DECLARE FUNCTION gtk_actionable_get_type() AS GType
#DEFINE GTK_TYPE_ACTIONABLE (gtk_actionable_get_type())
#DEFINE GTK_ACTIONABLE(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_ACTIONABLE, GtkActionable))
#DEFINE GTK_ACTIONABLE_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_ACTIONABLE, GtkActionableInterface))
#DEFINE GTK_IS_ACTIONABLE(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_ACTIONABLE))
#DEFINE GTK_ACTIONABLE_GET_IFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE((obj), GTK_TYPE_ACTIONABLE, GtkActionableInterface))
DECLARE FUNCTION gtk_actionable_get_action_name(BYVAL AS GtkActionable PTR) AS const gchar PTR
DECLARE FUNCTION gtk_actionable_get_action_target_value(BYVAL AS GtkActionable PTR) AS GVariant PTR
DECLARE SUB gtk_actionable_set_action_name(BYVAL AS GtkActionable PTR, BYVAL AS const gchar PTR)
DECLARE SUB gtk_actionable_set_action_target(BYVAL AS GtkActionable PTR, BYVAL AS const gchar PTR, ...)
DECLARE SUB gtk_actionable_set_action_target_value(BYVAL AS GtkActionable PTR, BYVAL AS GVariant PTR)
DECLARE SUB gtk_actionable_set_detailed_action_name(BYVAL AS GtkActionable PTR, BYVAL AS const gchar PTR)
TYPE _GtkActionableInterface
  AS GTypeInterface g_iface
  get_action_name AS FUNCTION CDECL(BYVAL AS GtkActionable PTR) AS const gchar PTR
  set_action_name AS SUB CDECL(BYVAL AS GtkActionable PTR, BYVAL AS const gchar PTR)
  get_action_target_value AS FUNCTION CDECL(BYVAL AS GtkActionable PTR) AS GVariant PTR
  set_action_target_value AS SUB CDECL(BYVAL AS GtkActionable PTR, BYVAL AS GVariant PTR)
END TYPE
DECLARE FUNCTION gtk_activatable_get_type() AS GType
#DEFINE GTK_TYPE_ACTIVATABLE (gtk_activatable_get_type())
#DEFINE GTK_ACTIVATABLE(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_ACTIVATABLE, GtkActivatable))
#DEFINE GTK_ACTIVATABLE_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_ACTIVATABLE, GtkActivatableIface))
#DEFINE GTK_IS_ACTIVATABLE(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_ACTIVATABLE))
#DEFINE GTK_ACTIVATABLE_GET_IFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE((obj), GTK_TYPE_ACTIVATABLE, GtkActivatableIface))
DECLARE SUB gtk_activatable_do_set_related_action(BYVAL AS GtkActivatable PTR, BYVAL AS GtkAction PTR)
DECLARE FUNCTION gtk_activatable_get_related_action(BYVAL AS GtkActivatable PTR) AS GtkAction PTR
DECLARE FUNCTION gtk_activatable_get_use_action_appearance(BYVAL AS GtkActivatable PTR) AS gboolean
DECLARE SUB gtk_activatable_set_related_action(BYVAL AS GtkActivatable PTR, BYVAL AS GtkAction PTR)
DECLARE SUB gtk_activatable_set_use_action_appearance(BYVAL AS GtkActivatable PTR, BYVAL AS gboolean)
DECLARE SUB gtk_activatable_sync_action_properties(BYVAL AS GtkActivatable PTR, BYVAL AS GtkAction PTR)
TYPE _GtkActivatableIface
  AS GTypeInterface g_iface
  update AS SUB CDECL(BYVAL AS GtkActivatable PTR, BYVAL AS GtkAction PTR, BYVAL AS const gchar PTR)
  sync_action_properties AS SUB CDECL(BYVAL AS GtkActivatable PTR, BYVAL AS GtkAction PTR)
END TYPE
TYPE _GtkAdjustment
  AS GInitiallyUnowned parent_instance
  AS GtkAdjustmentPrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_adjustment_get_type() AS GType
#DEFINE GTK_TYPE_ADJUSTMENT (gtk_adjustment_get_type())
#DEFINE GTK_ADJUSTMENT(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_ADJUSTMENT, GtkAdjustment))
#DEFINE GTK_ADJUSTMENT_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_ADJUSTMENT, GtkAdjustmentClass))
#DEFINE GTK_IS_ADJUSTMENT(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_ADJUSTMENT))
#DEFINE GTK_IS_CLASS_ADJUSTMENT(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_ADJUSTMENT))
#DEFINE GTK_ADJUSTMENT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_ADJUSTMENT, GtkAdjustmentClass))
DECLARE FUNCTION gtk_adjustment_new(BYVAL AS gdouble, BYVAL AS gdouble, BYVAL AS gdouble, BYVAL AS gdouble, BYVAL AS gdouble, BYVAL AS gdouble) AS GtkAdjustment PTR
DECLARE SUB gtk_adjustment_changed(BYVAL AS GtkAdjustment PTR)
DECLARE SUB gtk_adjustment_clamp_page(BYVAL AS GtkAdjustment PTR, BYVAL AS gdouble, BYVAL AS gdouble)
DECLARE SUB gtk_adjustment_configure(BYVAL AS GtkAdjustment PTR, BYVAL AS gdouble, BYVAL AS gdouble, BYVAL AS gdouble, BYVAL AS gdouble, BYVAL AS gdouble, BYVAL AS gdouble)
DECLARE FUNCTION gtk_adjustment_get_lower(BYVAL AS GtkAdjustment PTR) AS gdouble
DECLARE FUNCTION gtk_adjustment_get_minimum_increment(BYVAL AS GtkAdjustment PTR) AS gdouble
DECLARE FUNCTION gtk_adjustment_get_page_increment(BYVAL AS GtkAdjustment PTR) AS gdouble
DECLARE FUNCTION gtk_adjustment_get_page_size(BYVAL AS GtkAdjustment PTR) AS gdouble
DECLARE FUNCTION gtk_adjustment_get_step_increment(BYVAL AS GtkAdjustment PTR) AS gdouble
DECLARE FUNCTION gtk_adjustment_get_upper(BYVAL AS GtkAdjustment PTR) AS gdouble
DECLARE FUNCTION gtk_adjustment_get_value(BYVAL AS GtkAdjustment PTR) AS gdouble
DECLARE SUB gtk_adjustment_set_lower(BYVAL AS GtkAdjustment PTR, BYVAL AS gdouble)
DECLARE SUB gtk_adjustment_set_page_increment(BYVAL AS GtkAdjustment PTR, BYVAL AS gdouble)
DECLARE SUB gtk_adjustment_set_page_size(BYVAL AS GtkAdjustment PTR, BYVAL AS gdouble)
DECLARE SUB gtk_adjustment_set_step_increment(BYVAL AS GtkAdjustment PTR, BYVAL AS gdouble)
DECLARE SUB gtk_adjustment_set_upper(BYVAL AS GtkAdjustment PTR, BYVAL AS gdouble)
DECLARE SUB gtk_adjustment_set_value(BYVAL AS GtkAdjustment PTR, BYVAL AS gdouble)
DECLARE SUB gtk_adjustment_value_changed(BYVAL AS GtkAdjustment PTR)
TYPE _GtkAdjustmentClass
  AS GInitiallyUnownedClass parent_class
  changed AS SUB CDECL(BYVAL AS GtkAdjustment PTR)
  value_changed AS SUB CDECL(BYVAL AS GtkAdjustment PTR)
  _gtk_reserved1 AS SUB CDECL()
  _gtk_reserved2 AS SUB CDECL()
  _gtk_reserved3 AS SUB CDECL()
  _gtk_reserved4 AS SUB CDECL()
END TYPE
TYPE _GtkAlignment
  AS GtkBin bin
  AS GtkAlignmentPrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_align_get_type() AS GType
#DEFINE GTK_TYPE_ALIGN (gtk_align_get_type())
DECLARE FUNCTION gtk_alignment_get_type() AS GType
#DEFINE GTK_TYPE_ALIGNMENT (gtk_alignment_get_type())
#DEFINE GTK_ALIGNMENT(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_ALIGNMENT, GtkAlignment))
#DEFINE GTK_ALIGNMENT_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_ALIGNMENT, GtkAlignmentClass))
#DEFINE GTK_IS_ALIGNMENT(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_ALIGNMENT))
#DEFINE GTK_IS_CLASS_ALIGNMENT(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_ALIGNMENT))
#DEFINE GTK_ALIGNMENT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_ALIGNMENT, GtkAlignmentClass))
DECLARE FUNCTION gtk_alignment_new(BYVAL AS gfloat, BYVAL AS gfloat, BYVAL AS gfloat, BYVAL AS gfloat) AS GtkWidget PTR
DECLARE SUB gtk_alignment_get_padding(BYVAL AS GtkAlignment PTR, BYVAL AS guint PTR, BYVAL AS guint PTR, BYVAL AS guint PTR, BYVAL AS guint PTR)
DECLARE SUB gtk_alignment_set(BYVAL AS GtkAlignment PTR, BYVAL AS gfloat, BYVAL AS gfloat, BYVAL AS gfloat, BYVAL AS gfloat)
DECLARE SUB gtk_alignment_set_padding(BYVAL AS GtkAlignment PTR, BYVAL AS guint, BYVAL AS guint, BYVAL AS guint, BYVAL AS guint)
TYPE _GtkAlignmentClass
  AS GtkBinClass parent_class
  _gtk_reserved1 AS SUB CDECL()
  _gtk_reserved2 AS SUB CDECL()
  _gtk_reserved3 AS SUB CDECL()
  _gtk_reserved4 AS SUB CDECL()
END TYPE
DECLARE FUNCTION gtk_app_chooser_get_type() AS GType
#DEFINE GTK_TYPE_APP_CHOOSER (gtk_app_chooser_get_type())
#DEFINE GTK_APP_CHOOSER(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_APP_CHOOSER, GtkAppChooser))
#DEFINE GTK_APP_CHOOSER_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_APP_CHOOSER, Gtk))
#DEFINE GTK_IS_APP_CHOOSER(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_APP_CHOOSER))
#DEFINE GTK_APP_CHOOSER_GET_IFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE((obj), GTK_TYPE_APP_CHOOSER, Gtk))
DECLARE FUNCTION gtk_app_chooser_get_app_info(BYVAL AS GtkAppChooser PTR) AS GAppInfo PTR
DECLARE FUNCTION gtk_app_chooser_get_content_type(BYVAL AS GtkAppChooser PTR) AS gchar PTR
DECLARE SUB gtk_app_chooser_refresh(BYVAL AS GtkAppChooser PTR)
TYPE _GtkAppChooserButton
  AS GtkComboBox parent
  AS GtkAppChooserButtonPrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_app_chooser_button_get_type() AS GType
#DEFINE GTK_TYPE_APP_CHOOSER_BUTTON (gtk_app_chooser_button_get_type())
#DEFINE GTK_APP_CHOOSER_BUTTON(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_APP_CHOOSER_BUTTON, GtkAppChooserButton))
#DEFINE GTK_APP_CHOOSER_BUTTON_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_APP_CHOOSER_BUTTON, GtkAppChooserButtonClass))
#DEFINE GTK_IS_APP_CHOOSER_BUTTON(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_APP_CHOOSER_BUTTON))
#DEFINE GTK_IS_CLASS_APP_CHOOSER_BUTTON(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_APP_CHOOSER_BUTTON))
#DEFINE GTK_APP_CHOOSER_BUTTON_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_APP_CHOOSER_BUTTON, GtkAppChooserButtonClass))
DECLARE FUNCTION gtk_app_chooser_button_new(BYVAL AS const gchar PTR) AS GtkWidget PTR
DECLARE SUB gtk_app_chooser_button_append_custom_item(BYVAL AS GtkAppChooserButton PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS GIcon PTR)
DECLARE SUB gtk_app_chooser_button_append_separator(BYVAL AS GtkAppChooserButton PTR)
DECLARE FUNCTION gtk_app_chooser_button_get_heading(BYVAL AS GtkAppChooserButton PTR) AS const gchar PTR
DECLARE FUNCTION gtk_app_chooser_button_get_show_default_item(BYVAL AS GtkAppChooserButton PTR) AS gboolean
DECLARE FUNCTION gtk_app_chooser_button_get_show_dialog_item(BYVAL AS GtkAppChooserButton PTR) AS gboolean
DECLARE SUB gtk_app_chooser_button_set_active_custom_item(BYVAL AS GtkAppChooserButton PTR, BYVAL AS const gchar PTR)
DECLARE SUB gtk_app_chooser_button_set_heading(BYVAL AS GtkAppChooserButton PTR, BYVAL AS const gchar PTR)
DECLARE SUB gtk_app_chooser_button_set_show_default_item(BYVAL AS GtkAppChooserButton PTR, BYVAL AS gboolean)
DECLARE SUB gtk_app_chooser_button_set_show_dialog_item(BYVAL AS GtkAppChooserButton PTR, BYVAL AS gboolean)
TYPE _GtkAppChooserButtonClass
  AS GtkComboBoxClass parent_class
  custom_item_activated AS SUB CDECL(BYVAL AS GtkAppChooserButton PTR, BYVAL AS const gchar PTR)
  AS gpointer padding(15)
END TYPE
TYPE _GtkAppChooserDialog
  AS GtkDialog parent
  AS GtkAppChooserDialogPrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_app_chooser_dialog_get_type() AS GType
#DEFINE GTK_TYPE_APP_CHOOSER_DIALOG (gtk_app_chooser_dialog_get_type())
#DEFINE GTK_APP_CHOOSER_DIALOG(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_APP_CHOOSER_DIALOG, GtkAppChooserDialog))
#DEFINE GTK_APP_CHOOSER_DIALOG_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_APP_CHOOSER_DIALOG, GtkAppChooserDialogClass))
#DEFINE GTK_IS_APP_CHOOSER_DIALOG(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_APP_CHOOSER_DIALOG))
#DEFINE GTK_IS_CLASS_APP_CHOOSER_DIALOG(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_APP_CHOOSER_DIALOG))
#DEFINE GTK_APP_CHOOSER_DIALOG_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_APP_CHOOSER_DIALOG, GtkAppChooserDialogClass))
DECLARE FUNCTION gtk_app_chooser_dialog_new(BYVAL AS GtkWindow PTR, BYVAL AS GtkDialogFlags, BYVAL AS GFile PTR) AS GtkWidget PTR
DECLARE FUNCTION gtk_app_chooser_dialog_new_for_content_type(BYVAL AS GtkWindow PTR, BYVAL AS GtkDialogFlags, BYVAL AS const gchar PTR) AS GtkWidget PTR
DECLARE FUNCTION gtk_app_chooser_dialog_get_heading(BYVAL AS GtkAppChooserDialog PTR) AS const gchar PTR
DECLARE FUNCTION gtk_app_chooser_dialog_get_widget(BYVAL AS GtkAppChooserDialog PTR) AS GtkWidget PTR
DECLARE SUB gtk_app_chooser_dialog_set_heading(BYVAL AS GtkAppChooserDialog PTR, BYVAL AS const gchar PTR)
TYPE _GtkAppChooserDialogClass
  AS GtkDialogClass parent_class
  AS gpointer padding(15)
END TYPE
TYPE _GtkAppChooserWidget
  AS GtkBox parent
  AS GtkAppChooserWidgetPrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_app_chooser_widget_get_type() AS GType
#DEFINE GTK_TYPE_APP_CHOOSER_WIDGET (gtk_app_chooser_widget_get_type())
#DEFINE GTK_APP_CHOOSER_WIDGET(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_APP_CHOOSER_WIDGET, GtkAppChooserWidget))
#DEFINE GTK_APP_CHOOSER_WIDGET_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_APP_CHOOSER_WIDGET, GtkAppChooserWidgetClass))
#DEFINE GTK_IS_APP_CHOOSER_WIDGET(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_APP_CHOOSER_WIDGET))
#DEFINE GTK_IS_CLASS_APP_CHOOSER_WIDGET(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_APP_CHOOSER_WIDGET))
#DEFINE GTK_APP_CHOOSER_WIDGET_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_APP_CHOOSER_WIDGET, GtkAppChooserWidgetClass))
DECLARE FUNCTION gtk_app_chooser_widget_new(BYVAL AS const gchar PTR) AS GtkWidget PTR
DECLARE FUNCTION gtk_app_chooser_widget_get_default_text(BYVAL AS GtkAppChooserWidget PTR) AS const gchar PTR
DECLARE FUNCTION gtk_app_chooser_widget_get_show_all(BYVAL AS GtkAppChooserWidget PTR) AS gboolean
DECLARE FUNCTION gtk_app_chooser_widget_get_show_default(BYVAL AS GtkAppChooserWidget PTR) AS gboolean
DECLARE FUNCTION gtk_app_chooser_widget_get_show_fallback(BYVAL AS GtkAppChooserWidget PTR) AS gboolean
DECLARE FUNCTION gtk_app_chooser_widget_get_show_other(BYVAL AS GtkAppChooserWidget PTR) AS gboolean
DECLARE FUNCTION gtk_app_chooser_widget_get_show_recommended(BYVAL AS GtkAppChooserWidget PTR) AS gboolean
DECLARE SUB gtk_app_chooser_widget_set_default_text(BYVAL AS GtkAppChooserWidget PTR, BYVAL AS const gchar PTR)
DECLARE SUB gtk_app_chooser_widget_set_show_all(BYVAL AS GtkAppChooserWidget PTR, BYVAL AS gboolean)
DECLARE SUB gtk_app_chooser_widget_set_show_default(BYVAL AS GtkAppChooserWidget PTR, BYVAL AS gboolean)
DECLARE SUB gtk_app_chooser_widget_set_show_fallback(BYVAL AS GtkAppChooserWidget PTR, BYVAL AS gboolean)
DECLARE SUB gtk_app_chooser_widget_set_show_other(BYVAL AS GtkAppChooserWidget PTR, BYVAL AS gboolean)
DECLARE SUB gtk_app_chooser_widget_set_show_recommended(BYVAL AS GtkAppChooserWidget PTR, BYVAL AS gboolean)
TYPE _GtkAppChooserWidgetClass
  AS GtkBoxClass parent_class
  application_selected AS SUB CDECL(BYVAL AS GtkAppChooserWidget PTR, BYVAL AS GAppInfo PTR)
  application_activated AS SUB CDECL(BYVAL AS GtkAppChooserWidget PTR, BYVAL AS GAppInfo PTR)
  populate_popup AS SUB CDECL(BYVAL AS GtkAppChooserWidget PTR, BYVAL AS GtkMenu PTR, BYVAL AS GAppInfo PTR)
  AS gpointer padding(15)
END TYPE
TYPE _GtkApplication
  AS GApplication parent
  AS GtkApplicationPrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_application_get_type() AS GType
#DEFINE GTK_TYPE_APPLICATION (gtk_application_get_type())
#DEFINE GTK_APPLICATION(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_APPLICATION, GtkApplication))
#DEFINE GTK_APPLICATION_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_APPLICATION, GtkApplicationClass))
#DEFINE GTK_IS_APPLICATION(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_APPLICATION))
#DEFINE GTK_IS_CLASS_APPLICATION(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_APPLICATION))
#DEFINE GTK_APPLICATION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_APPLICATION, GtkApplicationClass))
DECLARE FUNCTION gtk_application_new(BYVAL AS const gchar PTR, BYVAL AS GApplicationFlags) AS GtkApplication PTR
DECLARE SUB gtk_application_add_accelerator(BYVAL AS GtkApplication PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS GVariant PTR)
DECLARE SUB gtk_application_add_window(BYVAL AS GtkApplication PTR, BYVAL AS GtkWindow PTR)
DECLARE FUNCTION gtk_application_get_accels_for_action(BYVAL AS GtkApplication PTR, BYVAL AS const gchar PTR) AS gchar PTR PTR
DECLARE FUNCTION gtk_application_get_actions_for_accel(BYVAL AS GtkApplication PTR, BYVAL AS const gchar PTR) AS gchar PTR PTR
DECLARE FUNCTION gtk_application_get_active_window(BYVAL AS GtkApplication PTR) AS GtkWindow PTR
DECLARE FUNCTION gtk_application_get_app_menu(BYVAL AS GtkApplication PTR) AS GMenuModel PTR
DECLARE FUNCTION gtk_application_get_menu_by_id(BYVAL AS GtkApplication PTR, BYVAL AS const gchar PTR) AS GMenu PTR
DECLARE FUNCTION gtk_application_get_menubar(BYVAL AS GtkApplication PTR) AS GMenuModel PTR
DECLARE FUNCTION gtk_application_get_window_by_id(BYVAL AS GtkApplication PTR, BYVAL AS guint) AS GtkWindow PTR
DECLARE FUNCTION gtk_application_get_windows(BYVAL AS GtkApplication PTR) AS GList PTR
DECLARE FUNCTION gtk_application_inhibit(BYVAL AS GtkApplication PTR, BYVAL AS GtkWindow PTR, BYVAL AS GtkApplicationInhibitFlags, BYVAL AS const gchar PTR) AS guint
DECLARE FUNCTION gtk_application_is_inhibited(BYVAL AS GtkApplication PTR, BYVAL AS GtkApplicationInhibitFlags) AS gboolean
DECLARE FUNCTION gtk_application_list_action_descriptions(BYVAL AS GtkApplication PTR) AS gchar PTR PTR
DECLARE FUNCTION gtk_application_prefers_app_menu(BYVAL AS GtkApplication PTR) AS gboolean
DECLARE SUB gtk_application_remove_accelerator(BYVAL AS GtkApplication PTR, BYVAL AS const gchar PTR, BYVAL AS GVariant PTR)
DECLARE SUB gtk_application_remove_window(BYVAL AS GtkApplication PTR, BYVAL AS GtkWindow PTR)
DECLARE SUB gtk_application_set_accels_for_action(BYVAL AS GtkApplication PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar ptr const /'const gchar* const'/ PTR)
DECLARE SUB gtk_application_set_app_menu(BYVAL AS GtkApplication PTR, BYVAL AS GMenuModel PTR)
DECLARE SUB gtk_application_set_menubar(BYVAL AS GtkApplication PTR, BYVAL AS GMenuModel PTR)
DECLARE SUB gtk_application_uninhibit(BYVAL AS GtkApplication PTR, BYVAL AS guint)
TYPE _GtkApplicationClass
  AS GApplicationClass parent_class
  window_added AS SUB CDECL(BYVAL AS GtkApplication PTR, BYVAL AS GtkWindow PTR)
  window_removed AS SUB CDECL(BYVAL AS GtkApplication PTR, BYVAL AS GtkWindow PTR)
  AS gpointer padding(11)
END TYPE
TYPE _GtkApplicationWindow
  AS GtkWindow parent_instance
  AS GtkApplicationWindowPrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_application_window_get_type() AS GType
#DEFINE GTK_TYPE_APPLICATION_WINDOW (gtk_application_window_get_type())
#DEFINE GTK_APPLICATION_WINDOW(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_APPLICATION_WINDOW, GtkApplicationWindow))
#DEFINE GTK_APPLICATION_WINDOW_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_APPLICATION_WINDOW, GtkApplicationWindowClass))
#DEFINE GTK_IS_APPLICATION_WINDOW(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_APPLICATION_WINDOW))
#DEFINE GTK_IS_CLASS_APPLICATION_WINDOW(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_APPLICATION_WINDOW))
#DEFINE GTK_APPLICATION_WINDOW_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_APPLICATION_WINDOW, GtkApplicationWindowClass))
DECLARE FUNCTION gtk_application_window_new(BYVAL AS GtkApplication PTR) AS GtkWidget PTR
DECLARE FUNCTION gtk_application_window_get_help_overlay(BYVAL AS GtkApplicationWindow PTR) AS GtkShortcutsWindow PTR
DECLARE FUNCTION gtk_application_window_get_id(BYVAL AS GtkApplicationWindow PTR) AS guint
DECLARE FUNCTION gtk_application_window_get_show_menubar(BYVAL AS GtkApplicationWindow PTR) AS gboolean
DECLARE SUB gtk_application_window_set_help_overlay(BYVAL AS GtkApplicationWindow PTR, BYVAL AS GtkShortcutsWindow PTR)
DECLARE SUB gtk_application_window_set_show_menubar(BYVAL AS GtkApplicationWindow PTR, BYVAL AS gboolean)
TYPE _GtkApplicationWindowClass
  AS GtkWindowClass parent_class
  AS gpointer padding(13)
END TYPE
TYPE _GtkArrow
  AS GtkMisc misc
  AS GtkArrowPrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_arrow_get_type() AS GType
#DEFINE GTK_TYPE_ARROW (gtk_arrow_get_type())
#DEFINE GTK_ARROW(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_ARROW, GtkArrow))
#DEFINE GTK_ARROW_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_ARROW, GtkArrowClass))
#DEFINE GTK_IS_ARROW(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_ARROW))
#DEFINE GTK_IS_CLASS_ARROW(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_ARROW))
#DEFINE GTK_ARROW_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_ARROW, GtkArrowClass))
DECLARE FUNCTION gtk_arrow_new(BYVAL AS GtkArrowType, BYVAL AS GtkShadowType) AS GtkWidget PTR
DECLARE SUB gtk_arrow_set(BYVAL AS GtkArrow PTR, BYVAL AS GtkArrowType, BYVAL AS GtkShadowType)
TYPE _GtkArrowAccessible
  AS GtkWidgetAccessible parent
  AS GtkArrowAccessiblePrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_arrow_accessible_get_type() AS GType
#DEFINE GTK_TYPE_ARROW_ACCESSIBLE (gtk_arrow_accessible_get_type())
#DEFINE GTK_ARROW_ACCESSIBLE(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_ARROW_ACCESSIBLE, GtkArrowAccessible))
#DEFINE GTK_ARROW_ACCESSIBLE_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_ARROW_ACCESSIBLE, GtkArrowAccessibleClass))
#DEFINE GTK_IS_ARROW_ACCESSIBLE(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_ARROW_ACCESSIBLE))
#DEFINE GTK_IS_CLASS_ARROW_ACCESSIBLE(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_ARROW_ACCESSIBLE))
#DEFINE GTK_ARROW_ACCESSIBLE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_ARROW_ACCESSIBLE, GtkArrowAccessibleClass))
TYPE _GtkArrowAccessibleClass
  AS GtkWidgetAccessibleClass parent_class
END TYPE
TYPE _GtkArrowClass
  AS GtkMiscClass parent_class
  _gtk_reserved1 AS SUB CDECL()
  _gtk_reserved2 AS SUB CDECL()
  _gtk_reserved3 AS SUB CDECL()
  _gtk_reserved4 AS SUB CDECL()
END TYPE
DECLARE FUNCTION gtk_arrow_placement_get_type() AS GType
#DEFINE GTK_TYPE_ARROW_PLACEMENT (gtk_arrow_placement_get_type())
TYPE _GtkAspectFrame
  AS GtkFrame frame
  AS GtkAspectFramePrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_arrow_type_get_type() AS GType
#DEFINE GTK_TYPE_ARROW_TYPE (gtk_arrow_type_get_type())
DECLARE FUNCTION gtk_aspect_frame_get_type() AS GType
#DEFINE GTK_TYPE_ASPECT_FRAME (gtk_aspect_frame_get_type())
#DEFINE GTK_ASPECT_FRAME(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_ASPECT_FRAME, GtkAspectFrame))
#DEFINE GTK_ASPECT_FRAME_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_ASPECT_FRAME, GtkAspectFrameClass))
#DEFINE GTK_IS_ASPECT_FRAME(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_ASPECT_FRAME))
#DEFINE GTK_IS_CLASS_ASPECT_FRAME(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_ASPECT_FRAME))
#DEFINE GTK_ASPECT_FRAME_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_ASPECT_FRAME, GtkAspectFrameClass))
DECLARE FUNCTION gtk_aspect_frame_new(BYVAL AS const gchar PTR, BYVAL AS gfloat, BYVAL AS gfloat, BYVAL AS gfloat, BYVAL AS gboolean) AS GtkWidget PTR
DECLARE SUB gtk_aspect_frame_set(BYVAL AS GtkAspectFrame PTR, BYVAL AS gfloat, BYVAL AS gfloat, BYVAL AS gfloat, BYVAL AS gboolean)
TYPE _GtkAspectFrameClass
  AS GtkFrameClass parent_class
  _gtk_reserved1 AS SUB CDECL()
  _gtk_reserved2 AS SUB CDECL()
  _gtk_reserved3 AS SUB CDECL()
  _gtk_reserved4 AS SUB CDECL()
END TYPE
TYPE _GtkAssistant
  AS GtkWindow parent
  AS GtkAssistantPrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_assistant_get_type() AS GType
#DEFINE GTK_TYPE_ASSISTANT (gtk_assistant_get_type())
#DEFINE GTK_ASSISTANT(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_ASSISTANT, GtkAssistant))
#DEFINE GTK_ASSISTANT_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_ASSISTANT, GtkAssistantClass))
#DEFINE GTK_IS_ASSISTANT(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_ASSISTANT))
#DEFINE GTK_IS_CLASS_ASSISTANT(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_ASSISTANT))
#DEFINE GTK_ASSISTANT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_ASSISTANT, GtkAssistantClass))
DECLARE FUNCTION gtk_assistant_new() AS GtkWidget PTR
DECLARE SUB gtk_assistant_add_action_widget(BYVAL AS GtkAssistant PTR, BYVAL AS GtkWidget PTR)
DECLARE FUNCTION gtk_assistant_append_page(BYVAL AS GtkAssistant PTR, BYVAL AS GtkWidget PTR) AS gint
DECLARE SUB gtk_assistant_commit(BYVAL AS GtkAssistant PTR)
DECLARE FUNCTION gtk_assistant_get_current_page(BYVAL AS GtkAssistant PTR) AS gint
DECLARE FUNCTION gtk_assistant_get_n_pages(BYVAL AS GtkAssistant PTR) AS gint
DECLARE FUNCTION gtk_assistant_get_nth_page(BYVAL AS GtkAssistant PTR, BYVAL AS gint) AS GtkWidget PTR
DECLARE FUNCTION gtk_assistant_get_page_complete(BYVAL AS GtkAssistant PTR, BYVAL AS GtkWidget PTR) AS gboolean
DECLARE FUNCTION gtk_assistant_get_page_has_padding(BYVAL AS GtkAssistant PTR, BYVAL AS GtkWidget PTR) AS gboolean
DECLARE FUNCTION gtk_assistant_get_page_header_image(BYVAL AS GtkAssistant PTR, BYVAL AS GtkWidget PTR) AS GdkPixbuf PTR
DECLARE FUNCTION gtk_assistant_get_page_side_image(BYVAL AS GtkAssistant PTR, BYVAL AS GtkWidget PTR) AS GdkPixbuf PTR
DECLARE FUNCTION gtk_assistant_get_page_title(BYVAL AS GtkAssistant PTR, BYVAL AS GtkWidget PTR) AS const gchar PTR
DECLARE FUNCTION gtk_assistant_get_page_type(BYVAL AS GtkAssistant PTR, BYVAL AS GtkWidget PTR) AS GtkAssistantPageType
DECLARE FUNCTION gtk_assistant_insert_page(BYVAL AS GtkAssistant PTR, BYVAL AS GtkWidget PTR, BYVAL AS gint) AS gint
DECLARE SUB gtk_assistant_next_page(BYVAL AS GtkAssistant PTR)
DECLARE FUNCTION gtk_assistant_prepend_page(BYVAL AS GtkAssistant PTR, BYVAL AS GtkWidget PTR) AS gint
DECLARE SUB gtk_assistant_previous_page(BYVAL AS GtkAssistant PTR)
DECLARE SUB gtk_assistant_remove_action_widget(BYVAL AS GtkAssistant PTR, BYVAL AS GtkWidget PTR)
DECLARE SUB gtk_assistant_remove_page(BYVAL AS GtkAssistant PTR, BYVAL AS gint)
DECLARE SUB gtk_assistant_set_current_page(BYVAL AS GtkAssistant PTR, BYVAL AS gint)
DECLARE SUB gtk_assistant_set_forward_page_func(BYVAL AS GtkAssistant PTR, BYVAL AS GtkAssistantPageFunc, BYVAL AS gpointer, BYVAL AS GDestroyNotify)
DECLARE SUB gtk_assistant_set_page_complete(BYVAL AS GtkAssistant PTR, BYVAL AS GtkWidget PTR, BYVAL AS gboolean)
DECLARE SUB gtk_assistant_set_page_has_padding(BYVAL AS GtkAssistant PTR, BYVAL AS GtkWidget PTR, BYVAL AS gboolean)
DECLARE SUB gtk_assistant_set_page_header_image(BYVAL AS GtkAssistant PTR, BYVAL AS GtkWidget PTR, BYVAL AS GdkPixbuf PTR)
DECLARE SUB gtk_assistant_set_page_side_image(BYVAL AS GtkAssistant PTR, BYVAL AS GtkWidget PTR, BYVAL AS GdkPixbuf PTR)
DECLARE SUB gtk_assistant_set_page_title(BYVAL AS GtkAssistant PTR, BYVAL AS GtkWidget PTR, BYVAL AS const gchar PTR)
DECLARE SUB gtk_assistant_set_page_type(BYVAL AS GtkAssistant PTR, BYVAL AS GtkWidget PTR, BYVAL AS GtkAssistantPageType)
DECLARE SUB gtk_assistant_update_buttons_state(BYVAL AS GtkAssistant PTR)
TYPE _GtkAssistantClass
  AS GtkWindowClass parent_class
  prepare AS SUB CDECL(BYVAL AS GtkAssistant PTR, BYVAL AS GtkWidget PTR)
  apply AS SUB CDECL(BYVAL AS GtkAssistant PTR)
  close AS SUB CDECL(BYVAL AS GtkAssistant PTR)
  cancel AS SUB CDECL(BYVAL AS GtkAssistant PTR)
  _gtk_reserved1 AS SUB CDECL()
  _gtk_reserved2 AS SUB CDECL()
  _gtk_reserved3 AS SUB CDECL()
  _gtk_reserved4 AS SUB CDECL()
  _gtk_reserved5 AS SUB CDECL()
END TYPE
DECLARE FUNCTION gtk_assistant_page_type_get_type() AS GType
#DEFINE GTK_TYPE_ASSISTANT_PAGE_TYPE (gtk_assistant_page_type_get_type())
DECLARE FUNCTION gtk_baseline_position_get_type() AS GType
#DEFINE GTK_TYPE_BASELINE_POSITION (gtk_baseline_position_get_type())
TYPE _GtkBindingArg
  AS GType arg_type
END TYPE
TYPE _GtkBindingEntry
  AS guint keyval
  AS GdkModifierType modifiers
  AS GtkBindingSet PTR binding_set
  AS guint destroyed : 1
  AS guint in_emission : 1
  AS guint marks_unbound : 1
  AS GtkBindingEntry PTR set_next
  AS GtkBindingEntry PTR hash_next
  AS GtkBindingSignal PTR signals
END TYPE
DECLARE SUB gtk_binding_entry_add_signal(BYVAL AS GtkBindingSet PTR, BYVAL AS guint, BYVAL AS GdkModifierType, BYVAL AS const gchar PTR, BYVAL AS guint, ...)
DECLARE FUNCTION gtk_binding_entry_add_signal_from_string(BYVAL AS GtkBindingSet PTR, BYVAL AS const gchar PTR) AS GTokenType
DECLARE SUB gtk_binding_entry_add_signall(BYVAL AS GtkBindingSet PTR, BYVAL AS guint, BYVAL AS GdkModifierType, BYVAL AS const gchar PTR, BYVAL AS GSList PTR)
DECLARE SUB gtk_binding_entry_remove(BYVAL AS GtkBindingSet PTR, BYVAL AS guint, BYVAL AS GdkModifierType)
DECLARE SUB gtk_binding_entry_skip(BYVAL AS GtkBindingSet PTR, BYVAL AS guint, BYVAL AS GdkModifierType)
TYPE _GtkBindingSet
  AS gchar PTR set_name
  AS gint priority
  AS GSList PTR widget_path_pspecs
  AS GSList PTR widget_class_pspecs
  AS GSList PTR class_branch_pspecs
  AS GtkBindingEntry PTR entries
  AS GtkBindingEntry PTR current
  AS guint parsed : 1
END TYPE
DECLARE FUNCTION gtk_binding_set_activate(BYVAL AS GtkBindingSet PTR, BYVAL AS guint, BYVAL AS GdkModifierType, BYVAL AS GObject PTR) AS gboolean
DECLARE SUB gtk_binding_set_add_path(BYVAL AS GtkBindingSet PTR, BYVAL AS GtkPathType, BYVAL AS const gchar PTR, BYVAL AS GtkPathPriorityType)
DECLARE FUNCTION gtk_binding_set_by_class(BYVAL AS gpointer) AS GtkBindingSet PTR
DECLARE FUNCTION gtk_binding_set_find(BYVAL AS const gchar PTR) AS GtkBindingSet PTR
DECLARE FUNCTION gtk_binding_set_new(BYVAL AS const gchar PTR) AS GtkBindingSet PTR
TYPE _GtkBindingSignal
  AS GtkBindingSignal PTR next
  AS gchar PTR signal_name
  AS guint n_args
  AS GtkBindingArg args(1)
END TYPE
TYPE _GtkBooleanCellAccessible
  AS GtkRendererCellAccessible parent
  AS GtkBooleanCellAccessiblePrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_boolean_cell_accessible_get_type() AS GType
#DEFINE GTK_TYPE_BOOLEAN_CELL_ACCESSIBLE (gtk_boolean_cell_accessible_get_type())
#DEFINE GTK_BOOLEAN_CELL_ACCESSIBLE(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_BOOLEAN_CELL_ACCESSIBLE, GtkBooleanCellAccessible))
#DEFINE GTK_BOOLEAN_CELL_ACCESSIBLE_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_BOOLEAN_CELL_ACCESSIBLE, GtkBooleanCellAccessibleClass))
#DEFINE GTK_IS_BOOLEAN_CELL_ACCESSIBLE(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_BOOLEAN_CELL_ACCESSIBLE))
#DEFINE GTK_IS_CLASS_BOOLEAN_CELL_ACCESSIBLE(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_BOOLEAN_CELL_ACCESSIBLE))
#DEFINE GTK_BOOLEAN_CELL_ACCESSIBLE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_BOOLEAN_CELL_ACCESSIBLE, GtkBooleanCellAccessibleClass))
TYPE _GtkBooleanCellAccessibleClass
  AS GtkRendererCellAccessibleClass parent_class
END TYPE
TYPE _GtkBorder
  AS gint16 left
  AS gint16 right
  AS gint16 top
  AS gint16 bottom
END TYPE
DECLARE FUNCTION gtk_border_new() AS GtkBorder PTR
DECLARE FUNCTION gtk_border_copy(BYVAL AS const GtkBorder PTR) AS GtkBorder PTR
DECLARE SUB gtk_border_free(BYVAL AS GtkBorder PTR)
DECLARE FUNCTION gtk_border_style_get_type() AS GType
#DEFINE GTK_TYPE_BORDER_STYLE (gtk_border_style_get_type())
DECLARE FUNCTION gtk_buildable_get_type() AS GType
#DEFINE GTK_TYPE_BUILDABLE (gtk_buildable_get_type())
#DEFINE GTK_BUILDABLE(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_BUILDABLE, GtkBuildable))
#DEFINE GTK_BUILDABLE_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_BUILDABLE, GtkBuildableIface))
#DEFINE GTK_IS_BUILDABLE(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_BUILDABLE))
#DEFINE GTK_BUILDABLE_GET_IFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE((obj), GTK_TYPE_BUILDABLE, GtkBuildableIface))
DECLARE SUB gtk_buildable_add_child(BYVAL AS GtkBuildable PTR, BYVAL AS GtkBuilder PTR, BYVAL AS GObject PTR, BYVAL AS const gchar PTR)
DECLARE FUNCTION gtk_buildable_construct_child(BYVAL AS GtkBuildable PTR, BYVAL AS GtkBuilder PTR, BYVAL AS const gchar PTR) AS GObject PTR
DECLARE SUB gtk_buildable_custom_finished(BYVAL AS GtkBuildable PTR, BYVAL AS GtkBuilder PTR, BYVAL AS GObject PTR, BYVAL AS const gchar PTR, BYVAL AS gpointer)
DECLARE SUB gtk_buildable_custom_tag_end(BYVAL AS GtkBuildable PTR, BYVAL AS GtkBuilder PTR, BYVAL AS GObject PTR, BYVAL AS const gchar PTR, BYVAL AS gpointer PTR)
DECLARE FUNCTION gtk_buildable_custom_tag_start(BYVAL AS GtkBuildable PTR, BYVAL AS GtkBuilder PTR, BYVAL AS GObject PTR, BYVAL AS const gchar PTR, BYVAL AS GMarkupParser PTR, BYVAL AS gpointer PTR) AS gboolean
DECLARE FUNCTION gtk_buildable_get_internal_child(BYVAL AS GtkBuildable PTR, BYVAL AS GtkBuilder PTR, BYVAL AS const gchar PTR) AS GObject PTR
DECLARE FUNCTION gtk_buildable_get_name(BYVAL AS GtkBuildable PTR) AS const gchar PTR
DECLARE SUB gtk_buildable_parser_finished(BYVAL AS GtkBuildable PTR, BYVAL AS GtkBuilder PTR)
DECLARE SUB gtk_buildable_set_buildable_property(BYVAL AS GtkBuildable PTR, BYVAL AS GtkBuilder PTR, BYVAL AS const gchar PTR, BYVAL AS const GValue PTR)
DECLARE SUB gtk_buildable_set_name(BYVAL AS GtkBuildable PTR, BYVAL AS const gchar PTR)
TYPE _GtkBuildableIface
  AS GTypeInterface g_iface
  set_name AS SUB CDECL(BYVAL AS GtkBuildable PTR, BYVAL AS const gchar PTR)
  get_name AS FUNCTION CDECL(BYVAL AS GtkBuildable PTR) AS const gchar PTR
  add_child AS SUB CDECL(BYVAL AS GtkBuildable PTR, BYVAL AS GtkBuilder PTR, BYVAL AS GObject PTR, BYVAL AS const gchar PTR)
  set_buildable_property AS SUB CDECL(BYVAL AS GtkBuildable PTR, BYVAL AS GtkBuilder PTR, BYVAL AS const gchar PTR, BYVAL AS const GValue PTR)
  construct_child AS FUNCTION CDECL(BYVAL AS GtkBuildable PTR, BYVAL AS GtkBuilder PTR, BYVAL AS const gchar PTR) AS GObject PTR
  custom_tag_start AS FUNCTION CDECL(BYVAL AS GtkBuildable PTR, BYVAL AS GtkBuilder PTR, BYVAL AS GObject PTR, BYVAL AS const gchar PTR, BYVAL AS GMarkupParser PTR, BYVAL AS gpointer PTR) AS gboolean
  custom_tag_end AS SUB CDECL(BYVAL AS GtkBuildable PTR, BYVAL AS GtkBuilder PTR, BYVAL AS GObject PTR, BYVAL AS const gchar PTR, BYVAL AS gpointer PTR)
  custom_finished AS SUB CDECL(BYVAL AS GtkBuildable PTR, BYVAL AS GtkBuilder PTR, BYVAL AS GObject PTR, BYVAL AS const gchar PTR, BYVAL AS gpointer)
  parser_finished AS SUB CDECL(BYVAL AS GtkBuildable PTR, BYVAL AS GtkBuilder PTR)
  get_internal_child AS FUNCTION CDECL(BYVAL AS GtkBuildable PTR, BYVAL AS GtkBuilder PTR, BYVAL AS const gchar PTR) AS GObject PTR
END TYPE
TYPE _GtkBuilder
  AS GObject parent_instance
  AS GtkBuilderPrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_builder_get_type() AS GType
#DEFINE GTK_TYPE_BUILDER (gtk_builder_get_type())
#DEFINE GTK_BUILDER(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_BUILDER, GtkBuilder))
#DEFINE GTK_BUILDER_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_BUILDER, GtkBuilderClass))
#DEFINE GTK_IS_BUILDER(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_BUILDER))
#DEFINE GTK_IS_CLASS_BUILDER(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_BUILDER))
#DEFINE GTK_BUILDER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_BUILDER, GtkBuilderClass))
DECLARE FUNCTION gtk_builder_new() AS GtkBuilder PTR
DECLARE FUNCTION gtk_builder_new_from_file(BYVAL AS const gchar PTR) AS GtkBuilder PTR
DECLARE FUNCTION gtk_builder_new_from_resource(BYVAL AS const gchar PTR) AS GtkBuilder PTR
DECLARE FUNCTION gtk_builder_new_from_string(BYVAL AS const gchar PTR, BYVAL AS gssize) AS GtkBuilder PTR
DECLARE SUB gtk_builder_add_callback_symbol(BYVAL AS GtkBuilder PTR, BYVAL AS const gchar PTR, BYVAL AS GCallback)
DECLARE SUB gtk_builder_add_callback_symbols(BYVAL AS GtkBuilder PTR, BYVAL AS const gchar PTR, BYVAL AS GCallback, ...)
DECLARE FUNCTION gtk_builder_add_from_file(BYVAL AS GtkBuilder PTR, BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR) AS guint
DECLARE FUNCTION gtk_builder_add_from_resource(BYVAL AS GtkBuilder PTR, BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR) AS guint
DECLARE FUNCTION gtk_builder_add_from_string(BYVAL AS GtkBuilder PTR, BYVAL AS const gchar PTR, BYVAL AS gsize, BYVAL AS GError PTR PTR) AS guint
DECLARE FUNCTION gtk_builder_add_objects_from_file(BYVAL AS GtkBuilder PTR, BYVAL AS const gchar PTR, BYVAL AS gchar PTR PTR, BYVAL AS GError PTR PTR) AS guint
DECLARE FUNCTION gtk_builder_add_objects_from_resource(BYVAL AS GtkBuilder PTR, BYVAL AS const gchar PTR, BYVAL AS gchar PTR PTR, BYVAL AS GError PTR PTR) AS guint
DECLARE FUNCTION gtk_builder_add_objects_from_string(BYVAL AS GtkBuilder PTR, BYVAL AS const gchar PTR, BYVAL AS gsize, BYVAL AS gchar PTR PTR, BYVAL AS GError PTR PTR) AS guint
DECLARE SUB gtk_builder_connect_signals(BYVAL AS GtkBuilder PTR, BYVAL AS gpointer)
DECLARE SUB gtk_builder_connect_signals_full(BYVAL AS GtkBuilder PTR, BYVAL AS GtkBuilderConnectFunc, BYVAL AS gpointer)
DECLARE SUB gtk_builder_expose_object(BYVAL AS GtkBuilder PTR, BYVAL AS const gchar PTR, BYVAL AS GObject PTR)
DECLARE FUNCTION gtk_builder_extend_with_template(BYVAL AS GtkBuilder PTR, BYVAL AS GtkWidget PTR, BYVAL AS GType, BYVAL AS const gchar PTR, BYVAL AS gsize, BYVAL AS GError PTR PTR) AS guint
DECLARE FUNCTION gtk_builder_get_application(BYVAL AS GtkBuilder PTR) AS GtkApplication PTR
DECLARE FUNCTION gtk_builder_get_object(BYVAL AS GtkBuilder PTR, BYVAL AS const gchar PTR) AS GObject PTR
DECLARE FUNCTION gtk_builder_get_objects(BYVAL AS GtkBuilder PTR) AS GSList PTR
DECLARE FUNCTION gtk_builder_get_translation_domain(BYVAL AS GtkBuilder PTR) AS const gchar PTR
DECLARE FUNCTION gtk_builder_get_type_from_name(BYVAL AS GtkBuilder PTR, BYVAL AS const char PTR) AS GType
DECLARE FUNCTION gtk_builder_lookup_callback_symbol(BYVAL AS GtkBuilder PTR, BYVAL AS const gchar PTR) AS GCallback
DECLARE SUB gtk_builder_set_application(BYVAL AS GtkBuilder PTR, BYVAL AS GtkApplication PTR)
DECLARE SUB gtk_builder_set_translation_domain(BYVAL AS GtkBuilder PTR, BYVAL AS const gchar PTR)
DECLARE FUNCTION gtk_builder_value_from_string(BYVAL AS GtkBuilder PTR, BYVAL AS GParamSpec PTR, BYVAL AS const gchar PTR, BYVAL AS GValue PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION gtk_builder_value_from_string_type(BYVAL AS GtkBuilder PTR, BYVAL AS GType, BYVAL AS const gchar PTR, BYVAL AS GValue PTR, BYVAL AS GError PTR PTR) AS gboolean
TYPE _GtkBuilderClass
  AS GObjectClass parent_class
  get_type_from_name AS FUNCTION CDECL(BYVAL AS GtkBuilder PTR, BYVAL AS const char PTR) AS GType
  _gtk_reserved1 AS SUB CDECL()
  _gtk_reserved2 AS SUB CDECL()
  _gtk_reserved3 AS SUB CDECL()
  _gtk_reserved4 AS SUB CDECL()
  _gtk_reserved5 AS SUB CDECL()
  _gtk_reserved6 AS SUB CDECL()
  _gtk_reserved7 AS SUB CDECL()
  _gtk_reserved8 AS SUB CDECL()
END TYPE
DECLARE FUNCTION gtk_builder_error_get_type() AS GType
#DEFINE GTK_TYPE_BUILDER_ERROR (gtk_builder_error_get_type())
TYPE _GtkButtonBox
  AS GtkBox box
  AS GtkButtonBoxPrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_button_box_get_type() AS GType
#DEFINE GTK_TYPE_BUTTON_BOX (gtk_button_box_get_type())
#DEFINE GTK_BUTTON_BOX(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_BUTTON_BOX, GtkButtonBox))
#DEFINE GTK_BUTTON_BOX_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_BUTTON_BOX, GtkButtonBoxClass))
#DEFINE GTK_IS_BUTTON_BOX(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_BUTTON_BOX))
#DEFINE GTK_IS_CLASS_BUTTON_BOX(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_BUTTON_BOX))
#DEFINE GTK_BUTTON_BOX_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_BUTTON_BOX, GtkButtonBoxClass))
DECLARE FUNCTION gtk_button_box_new(BYVAL AS GtkOrientation) AS GtkWidget PTR
DECLARE FUNCTION gtk_button_box_get_child_non_homogeneous(BYVAL AS GtkButtonBox PTR, BYVAL AS GtkWidget PTR) AS gboolean
DECLARE FUNCTION gtk_button_box_get_child_secondary(BYVAL AS GtkButtonBox PTR, BYVAL AS GtkWidget PTR) AS gboolean
DECLARE FUNCTION gtk_button_box_get_layout(BYVAL AS GtkButtonBox PTR) AS GtkButtonBoxStyle
DECLARE SUB gtk_button_box_set_child_non_homogeneous(BYVAL AS GtkButtonBox PTR, BYVAL AS GtkWidget PTR, BYVAL AS gboolean)
DECLARE SUB gtk_button_box_set_child_secondary(BYVAL AS GtkButtonBox PTR, BYVAL AS GtkWidget PTR, BYVAL AS gboolean)
DECLARE SUB gtk_button_box_set_layout(BYVAL AS GtkButtonBox PTR, BYVAL AS GtkButtonBoxStyle)
TYPE _GtkButtonBoxClass
  AS GtkBoxClass parent_class
  _gtk_reserved1 AS SUB CDECL()
  _gtk_reserved2 AS SUB CDECL()
  _gtk_reserved3 AS SUB CDECL()
  _gtk_reserved4 AS SUB CDECL()
END TYPE
DECLARE FUNCTION gtk_button_box_style_get_type() AS GType
#DEFINE GTK_TYPE_BUTTON_BOX_STYLE (gtk_button_box_style_get_type())
TYPE _GtkCalendar
  AS GtkWidget widget
  AS GtkCalendarPrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_button_role_get_type() AS GType
#DEFINE GTK_TYPE_BUTTON_ROLE (gtk_button_role_get_type())
DECLARE FUNCTION gtk_buttons_type_get_type() AS GType
#DEFINE GTK_TYPE_BUTTONS_TYPE (gtk_buttons_type_get_type())
DECLARE FUNCTION gtk_calendar_get_type() AS GType
#DEFINE GTK_TYPE_CALENDAR (gtk_calendar_get_type())
#DEFINE GTK_CALENDAR(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_CALENDAR, GtkCalendar))
#DEFINE GTK_CALENDAR_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_CALENDAR, GtkCalendarClass))
#DEFINE GTK_IS_CALENDAR(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_CALENDAR))
#DEFINE GTK_IS_CLASS_CALENDAR(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_CALENDAR))
#DEFINE GTK_CALENDAR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_CALENDAR, GtkCalendarClass))
DECLARE FUNCTION gtk_calendar_new() AS GtkWidget PTR
DECLARE SUB gtk_calendar_clear_marks(BYVAL AS GtkCalendar PTR)
DECLARE SUB gtk_calendar_get_date(BYVAL AS GtkCalendar PTR, BYVAL AS guint PTR, BYVAL AS guint PTR, BYVAL AS guint PTR)
DECLARE FUNCTION gtk_calendar_get_day_is_marked(BYVAL AS GtkCalendar PTR, BYVAL AS guint) AS gboolean
DECLARE FUNCTION gtk_calendar_get_detail_height_rows(BYVAL AS GtkCalendar PTR) AS gint
DECLARE FUNCTION gtk_calendar_get_detail_width_chars(BYVAL AS GtkCalendar PTR) AS gint
DECLARE FUNCTION gtk_calendar_get_display_options(BYVAL AS GtkCalendar PTR) AS GtkCalendarDisplayOptions
DECLARE SUB gtk_calendar_mark_day(BYVAL AS GtkCalendar PTR, BYVAL AS guint)
DECLARE SUB gtk_calendar_select_day(BYVAL AS GtkCalendar PTR, BYVAL AS guint)
DECLARE SUB gtk_calendar_select_month(BYVAL AS GtkCalendar PTR, BYVAL AS guint, BYVAL AS guint)
DECLARE SUB gtk_calendar_set_detail_func(BYVAL AS GtkCalendar PTR, BYVAL AS GtkCalendarDetailFunc, BYVAL AS gpointer, BYVAL AS GDestroyNotify)
DECLARE SUB gtk_calendar_set_detail_height_rows(BYVAL AS GtkCalendar PTR, BYVAL AS gint)
DECLARE SUB gtk_calendar_set_detail_width_chars(BYVAL AS GtkCalendar PTR, BYVAL AS gint)
DECLARE SUB gtk_calendar_set_display_options(BYVAL AS GtkCalendar PTR, BYVAL AS GtkCalendarDisplayOptions)
DECLARE SUB gtk_calendar_unmark_day(BYVAL AS GtkCalendar PTR, BYVAL AS guint)
TYPE _GtkCalendarClass
  AS GtkWidgetClass parent_class
  month_changed AS SUB CDECL(BYVAL AS GtkCalendar PTR)
  day_selected AS SUB CDECL(BYVAL AS GtkCalendar PTR)
  day_selected_double_click AS SUB CDECL(BYVAL AS GtkCalendar PTR)
  prev_month AS SUB CDECL(BYVAL AS GtkCalendar PTR)
  next_month AS SUB CDECL(BYVAL AS GtkCalendar PTR)
  prev_year AS SUB CDECL(BYVAL AS GtkCalendar PTR)
  next_year AS SUB CDECL(BYVAL AS GtkCalendar PTR)
  _gtk_reserved1 AS SUB CDECL()
  _gtk_reserved2 AS SUB CDECL()
  _gtk_reserved3 AS SUB CDECL()
  _gtk_reserved4 AS SUB CDECL()
END TYPE
DECLARE FUNCTION gtk_cell_accessible_parent_get_type() AS GType
#DEFINE GTK_TYPE_CELL_ACCESSIBLE_PARENT (gtk_cell_accessible_parent_get_type())
#DEFINE GTK_CELL_ACCESSIBLE_PARENT(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_CELL_ACCESSIBLE_PARENT, GtkCellAccessibleParent))
#DEFINE GTK_CELL_ACCESSIBLE_PARENT_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_CELL_ACCESSIBLE_PARENT, GtkCellAccessibleParentIface))
#DEFINE GTK_IS_CELL_ACCESSIBLE_PARENT(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_CELL_ACCESSIBLE_PARENT))
#DEFINE GTK_CELL_ACCESSIBLE_PARENT_GET_IFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE((obj), GTK_TYPE_CELL_ACCESSIBLE_PARENT, GtkCellAccessibleParentIface))
DECLARE SUB gtk_cell_accessible_parent_activate(BYVAL AS GtkCellAccessibleParent PTR, BYVAL AS GtkCellAccessible PTR)
DECLARE SUB gtk_cell_accessible_parent_edit(BYVAL AS GtkCellAccessibleParent PTR, BYVAL AS GtkCellAccessible PTR)
DECLARE SUB gtk_cell_accessible_parent_expand_collapse(BYVAL AS GtkCellAccessibleParent PTR, BYVAL AS GtkCellAccessible PTR)
DECLARE SUB gtk_cell_accessible_parent_get_cell_area(BYVAL AS GtkCellAccessibleParent PTR, BYVAL AS GtkCellAccessible PTR, BYVAL AS GdkRectangle PTR)
DECLARE SUB gtk_cell_accessible_parent_get_cell_extents(BYVAL AS GtkCellAccessibleParent PTR, BYVAL AS GtkCellAccessible PTR, BYVAL AS gint PTR, BYVAL AS gint PTR, BYVAL AS gint PTR, BYVAL AS gint PTR, BYVAL AS AtkCoordType)
DECLARE SUB gtk_cell_accessible_parent_get_cell_position(BYVAL AS GtkCellAccessibleParent PTR, BYVAL AS GtkCellAccessible PTR, BYVAL AS gint PTR, BYVAL AS gint PTR)
DECLARE FUNCTION gtk_cell_accessible_parent_get_child_index(BYVAL AS GtkCellAccessibleParent PTR, BYVAL AS GtkCellAccessible PTR) AS gint /'int'/
DECLARE FUNCTION gtk_cell_accessible_parent_get_column_header_cells(BYVAL AS GtkCellAccessibleParent PTR, BYVAL AS GtkCellAccessible PTR) AS GPtrArray PTR
DECLARE FUNCTION gtk_cell_accessible_parent_get_renderer_state(BYVAL AS GtkCellAccessibleParent PTR, BYVAL AS GtkCellAccessible PTR) AS GtkCellRendererState
DECLARE FUNCTION gtk_cell_accessible_parent_get_row_header_cells(BYVAL AS GtkCellAccessibleParent PTR, BYVAL AS GtkCellAccessible PTR) AS GPtrArray PTR
DECLARE FUNCTION gtk_cell_accessible_parent_grab_focus(BYVAL AS GtkCellAccessibleParent PTR, BYVAL AS GtkCellAccessible PTR) AS gboolean
DECLARE SUB gtk_cell_accessible_parent_update_relationset(BYVAL AS GtkCellAccessibleParent PTR, BYVAL AS GtkCellAccessible PTR, BYVAL AS AtkRelationSet PTR)
TYPE _GtkCellAccessibleParentIface
  AS GTypeInterface parent
  get_cell_extents AS SUB CDECL(BYVAL AS GtkCellAccessibleParent PTR, BYVAL AS GtkCellAccessible PTR, BYVAL AS gint PTR, BYVAL AS gint PTR, BYVAL AS gint PTR, BYVAL AS gint PTR, BYVAL AS AtkCoordType)
  get_cell_area AS SUB CDECL(BYVAL AS GtkCellAccessibleParent PTR, BYVAL AS GtkCellAccessible PTR, BYVAL AS GdkRectangle PTR)
  grab_focus AS FUNCTION CDECL(BYVAL AS GtkCellAccessibleParent PTR, BYVAL AS GtkCellAccessible PTR) AS gboolean
  get_child_index AS FUNCTION CDECL(BYVAL AS GtkCellAccessibleParent PTR, BYVAL AS GtkCellAccessible PTR) AS gint /'int'/
  get_renderer_state AS FUNCTION CDECL(BYVAL AS GtkCellAccessibleParent PTR, BYVAL AS GtkCellAccessible PTR) AS GtkCellRendererState
  expand_collapse AS SUB CDECL(BYVAL AS GtkCellAccessibleParent PTR, BYVAL AS GtkCellAccessible PTR)
  activate AS SUB CDECL(BYVAL AS GtkCellAccessibleParent PTR, BYVAL AS GtkCellAccessible PTR)
  edit AS SUB CDECL(BYVAL AS GtkCellAccessibleParent PTR, BYVAL AS GtkCellAccessible PTR)
  update_relationset AS SUB CDECL(BYVAL AS GtkCellAccessibleParent PTR, BYVAL AS GtkCellAccessible PTR, BYVAL AS AtkRelationSet PTR)
  get_cell_position AS SUB CDECL(BYVAL AS GtkCellAccessibleParent PTR, BYVAL AS GtkCellAccessible PTR, BYVAL AS gint PTR, BYVAL AS gint PTR)
  get_column_header_cells AS FUNCTION CDECL(BYVAL AS GtkCellAccessibleParent PTR, BYVAL AS GtkCellAccessible PTR) AS GPtrArray PTR
  get_row_header_cells AS FUNCTION CDECL(BYVAL AS GtkCellAccessibleParent PTR, BYVAL AS GtkCellAccessible PTR) AS GPtrArray PTR
END TYPE
TYPE _GtkCellArea
  AS GInitiallyUnowned parent_instance
  AS GtkCellAreaPrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_cell_area_get_type() AS GType
#DEFINE GTK_TYPE_CELL_AREA (gtk_cell_area_get_type())
#DEFINE GTK_CELL_AREA(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_CELL_AREA, GtkCellArea))
#DEFINE GTK_CELL_AREA_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_CELL_AREA, GtkCellAreaClass))
#DEFINE GTK_IS_CELL_AREA(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_CELL_AREA))
#DEFINE GTK_IS_CLASS_CELL_AREA(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_CELL_AREA))
#DEFINE GTK_CELL_AREA_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_CELL_AREA, GtkCellAreaClass))
DECLARE FUNCTION gtk_cell_area_activate(BYVAL AS GtkCellArea PTR, BYVAL AS GtkCellAreaContext PTR, BYVAL AS GtkWidget PTR, BYVAL AS const GdkRectangle PTR, BYVAL AS GtkCellRendererState, BYVAL AS gboolean) AS gboolean
DECLARE FUNCTION gtk_cell_area_activate_cell(BYVAL AS GtkCellArea PTR, BYVAL AS GtkWidget PTR, BYVAL AS GtkCellRenderer PTR, BYVAL AS GdkEvent PTR, BYVAL AS const GdkRectangle PTR, BYVAL AS GtkCellRendererState) AS gboolean
DECLARE SUB gtk_cell_area_add(BYVAL AS GtkCellArea PTR, BYVAL AS GtkCellRenderer PTR)
DECLARE SUB gtk_cell_area_add_focus_sibling(BYVAL AS GtkCellArea PTR, BYVAL AS GtkCellRenderer PTR, BYVAL AS GtkCellRenderer PTR)
DECLARE SUB gtk_cell_area_add_with_properties(BYVAL AS GtkCellArea PTR, BYVAL AS GtkCellRenderer PTR, BYVAL AS const gchar PTR, ...)
DECLARE SUB gtk_cell_area_apply_attributes(BYVAL AS GtkCellArea PTR, BYVAL AS GtkTreeModel PTR, BYVAL AS GtkTreeIter PTR, BYVAL AS gboolean, BYVAL AS gboolean)
DECLARE SUB gtk_cell_area_attribute_connect(BYVAL AS GtkCellArea PTR, BYVAL AS GtkCellRenderer PTR, BYVAL AS const gchar PTR, BYVAL AS gint)
DECLARE SUB gtk_cell_area_attribute_disconnect(BYVAL AS GtkCellArea PTR, BYVAL AS GtkCellRenderer PTR, BYVAL AS const gchar PTR)
DECLARE FUNCTION gtk_cell_area_attribute_get_column(BYVAL AS GtkCellArea PTR, BYVAL AS GtkCellRenderer PTR, BYVAL AS const gchar PTR) AS gint
DECLARE SUB gtk_cell_area_cell_get(BYVAL AS GtkCellArea PTR, BYVAL AS GtkCellRenderer PTR, BYVAL AS const gchar PTR, ...)
DECLARE SUB gtk_cell_area_cell_get_property(BYVAL AS GtkCellArea PTR, BYVAL AS GtkCellRenderer PTR, BYVAL AS const gchar PTR, BYVAL AS GValue PTR)
DECLARE SUB gtk_cell_area_cell_get_valist(BYVAL AS GtkCellArea PTR, BYVAL AS GtkCellRenderer PTR, BYVAL AS const gchar PTR, BYVAL AS va_list)
DECLARE SUB gtk_cell_area_cell_set(BYVAL AS GtkCellArea PTR, BYVAL AS GtkCellRenderer PTR, BYVAL AS const gchar PTR, ...)
DECLARE SUB gtk_cell_area_cell_set_property(BYVAL AS GtkCellArea PTR, BYVAL AS GtkCellRenderer PTR, BYVAL AS const gchar PTR, BYVAL AS const GValue PTR)
DECLARE SUB gtk_cell_area_cell_set_valist(BYVAL AS GtkCellArea PTR, BYVAL AS GtkCellRenderer PTR, BYVAL AS const gchar PTR, BYVAL AS va_list)
DECLARE FUNCTION gtk_cell_area_copy_context(BYVAL AS GtkCellArea PTR, BYVAL AS GtkCellAreaContext PTR) AS GtkCellAreaContext PTR
DECLARE FUNCTION gtk_cell_area_create_context(BYVAL AS GtkCellArea PTR) AS GtkCellAreaContext PTR
DECLARE FUNCTION gtk_cell_area_event(BYVAL AS GtkCellArea PTR, BYVAL AS GtkCellAreaContext PTR, BYVAL AS GtkWidget PTR, BYVAL AS GdkEvent PTR, BYVAL AS const GdkRectangle PTR, BYVAL AS GtkCellRendererState) AS gint
DECLARE FUNCTION gtk_cell_area_focus(BYVAL AS GtkCellArea PTR, BYVAL AS GtkDirectionType) AS gboolean
DECLARE SUB gtk_cell_area_foreach(BYVAL AS GtkCellArea PTR, BYVAL AS GtkCellCallback, BYVAL AS gpointer)
DECLARE SUB gtk_cell_area_foreach_alloc(BYVAL AS GtkCellArea PTR, BYVAL AS GtkCellAreaContext PTR, BYVAL AS GtkWidget PTR, BYVAL AS const GdkRectangle PTR, BYVAL AS const GdkRectangle PTR, BYVAL AS GtkCellAllocCallback, BYVAL AS gpointer)
DECLARE SUB gtk_cell_area_get_cell_allocation(BYVAL AS GtkCellArea PTR, BYVAL AS GtkCellAreaContext PTR, BYVAL AS GtkWidget PTR, BYVAL AS GtkCellRenderer PTR, BYVAL AS const GdkRectangle PTR, BYVAL AS GdkRectangle PTR)
DECLARE FUNCTION gtk_cell_area_get_cell_at_position(BYVAL AS GtkCellArea PTR, BYVAL AS GtkCellAreaContext PTR, BYVAL AS GtkWidget PTR, BYVAL AS const GdkRectangle PTR, BYVAL AS gint, BYVAL AS gint, BYVAL AS GdkRectangle PTR) AS GtkCellRenderer PTR
DECLARE FUNCTION gtk_cell_area_get_current_path_string(BYVAL AS GtkCellArea PTR) AS const gchar PTR
DECLARE FUNCTION gtk_cell_area_get_edit_widget(BYVAL AS GtkCellArea PTR) AS GtkCellEditable PTR
DECLARE FUNCTION gtk_cell_area_get_edited_cell(BYVAL AS GtkCellArea PTR) AS GtkCellRenderer PTR
DECLARE FUNCTION gtk_cell_area_get_focus_cell(BYVAL AS GtkCellArea PTR) AS GtkCellRenderer PTR
DECLARE FUNCTION gtk_cell_area_get_focus_from_sibling(BYVAL AS GtkCellArea PTR, BYVAL AS GtkCellRenderer PTR) AS GtkCellRenderer PTR
DECLARE FUNCTION gtk_cell_area_get_focus_siblings(BYVAL AS GtkCellArea PTR, BYVAL AS GtkCellRenderer PTR) AS const GList PTR
DECLARE SUB gtk_cell_area_get_preferred_height(BYVAL AS GtkCellArea PTR, BYVAL AS GtkCellAreaContext PTR, BYVAL AS GtkWidget PTR, BYVAL AS gint PTR, BYVAL AS gint PTR)
DECLARE SUB gtk_cell_area_get_preferred_height_for_width(BYVAL AS GtkCellArea PTR, BYVAL AS GtkCellAreaContext PTR, BYVAL AS GtkWidget PTR, BYVAL AS gint, BYVAL AS gint PTR, BYVAL AS gint PTR)
DECLARE SUB gtk_cell_area_get_preferred_width(BYVAL AS GtkCellArea PTR, BYVAL AS GtkCellAreaContext PTR, BYVAL AS GtkWidget PTR, BYVAL AS gint PTR, BYVAL AS gint PTR)
DECLARE SUB gtk_cell_area_get_preferred_width_for_height(BYVAL AS GtkCellArea PTR, BYVAL AS GtkCellAreaContext PTR, BYVAL AS GtkWidget PTR, BYVAL AS gint, BYVAL AS gint PTR, BYVAL AS gint PTR)
DECLARE FUNCTION gtk_cell_area_get_request_mode(BYVAL AS GtkCellArea PTR) AS GtkSizeRequestMode
DECLARE FUNCTION gtk_cell_area_has_renderer(BYVAL AS GtkCellArea PTR, BYVAL AS GtkCellRenderer PTR) AS gboolean
DECLARE SUB gtk_cell_area_inner_cell_area(BYVAL AS GtkCellArea PTR, BYVAL AS GtkWidget PTR, BYVAL AS const GdkRectangle PTR, BYVAL AS GdkRectangle PTR)
DECLARE FUNCTION gtk_cell_area_is_activatable(BYVAL AS GtkCellArea PTR) AS gboolean
DECLARE FUNCTION gtk_cell_area_is_focus_sibling(BYVAL AS GtkCellArea PTR, BYVAL AS GtkCellRenderer PTR, BYVAL AS GtkCellRenderer PTR) AS gboolean
DECLARE SUB gtk_cell_area_remove(BYVAL AS GtkCellArea PTR, BYVAL AS GtkCellRenderer PTR)
DECLARE SUB gtk_cell_area_remove_focus_sibling(BYVAL AS GtkCellArea PTR, BYVAL AS GtkCellRenderer PTR, BYVAL AS GtkCellRenderer PTR)
DECLARE SUB gtk_cell_area_render(BYVAL AS GtkCellArea PTR, BYVAL AS GtkCellAreaContext PTR, BYVAL AS GtkWidget PTR, BYVAL AS cairo_t PTR, BYVAL AS const GdkRectangle PTR, BYVAL AS const GdkRectangle PTR, BYVAL AS GtkCellRendererState, BYVAL AS gboolean)
DECLARE SUB gtk_cell_area_request_renderer(BYVAL AS GtkCellArea PTR, BYVAL AS GtkCellRenderer PTR, BYVAL AS GtkOrientation, BYVAL AS GtkWidget PTR, BYVAL AS gint, BYVAL AS gint PTR, BYVAL AS gint PTR)
DECLARE SUB gtk_cell_area_set_focus_cell(BYVAL AS GtkCellArea PTR, BYVAL AS GtkCellRenderer PTR)
DECLARE SUB gtk_cell_area_stop_editing(BYVAL AS GtkCellArea PTR, BYVAL AS gboolean)
TYPE _GtkCellAreaBox
  AS GtkCellArea parent_instance
  AS GtkCellAreaBoxPrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_cell_area_box_get_type() AS GType
#DEFINE GTK_TYPE_CELL_AREA_BOX (gtk_cell_area_box_get_type())
#DEFINE GTK_CELL_AREA_BOX(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_CELL_AREA_BOX, GtkCellAreaBox))
#DEFINE GTK_CELL_AREA_BOX_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_CELL_AREA_BOX, GtkCellAreaBoxClass))
#DEFINE GTK_IS_CELL_AREA_BOX(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_CELL_AREA_BOX))
#DEFINE GTK_IS_CLASS_CELL_AREA_BOX(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_CELL_AREA_BOX))
#DEFINE GTK_CELL_AREA_BOX_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_CELL_AREA_BOX, GtkCellAreaBoxClass))
DECLARE FUNCTION gtk_cell_area_box_new() AS GtkCellArea PTR
DECLARE FUNCTION gtk_cell_area_box_get_spacing(BYVAL AS GtkCellAreaBox PTR) AS gint
DECLARE SUB gtk_cell_area_box_pack_end(BYVAL AS GtkCellAreaBox PTR, BYVAL AS GtkCellRenderer PTR, BYVAL AS gboolean, BYVAL AS gboolean, BYVAL AS gboolean)
DECLARE SUB gtk_cell_area_box_pack_start(BYVAL AS GtkCellAreaBox PTR, BYVAL AS GtkCellRenderer PTR, BYVAL AS gboolean, BYVAL AS gboolean, BYVAL AS gboolean)
DECLARE SUB gtk_cell_area_box_set_spacing(BYVAL AS GtkCellAreaBox PTR, BYVAL AS gint)
TYPE _GtkCellAreaBoxClass
  AS GtkCellAreaClass parent_class
  _gtk_reserved1 AS SUB CDECL()
  _gtk_reserved2 AS SUB CDECL()
  _gtk_reserved3 AS SUB CDECL()
  _gtk_reserved4 AS SUB CDECL()
END TYPE
TYPE _GtkCellAreaContext
  AS GObject parent_instance
  AS GtkCellAreaContextPrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_cell_area_context_get_type() AS GType
#DEFINE GTK_TYPE_CELL_AREA_CONTEXT (gtk_cell_area_context_get_type())
#DEFINE GTK_CELL_AREA_CONTEXT(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_CELL_AREA_CONTEXT, GtkCellAreaContext))
#DEFINE GTK_CELL_AREA_CONTEXT_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_CELL_AREA_CONTEXT, GtkCellAreaContextClass))
#DEFINE GTK_IS_CELL_AREA_CONTEXT(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_CELL_AREA_CONTEXT))
#DEFINE GTK_IS_CLASS_CELL_AREA_CONTEXT(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_CELL_AREA_CONTEXT))
#DEFINE GTK_CELL_AREA_CONTEXT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_CELL_AREA_CONTEXT, GtkCellAreaContextClass))
DECLARE SUB gtk_cell_area_context_allocate(BYVAL AS GtkCellAreaContext PTR, BYVAL AS gint, BYVAL AS gint)
DECLARE SUB gtk_cell_area_context_get_allocation(BYVAL AS GtkCellAreaContext PTR, BYVAL AS gint PTR, BYVAL AS gint PTR)
DECLARE FUNCTION gtk_cell_area_context_get_area(BYVAL AS GtkCellAreaContext PTR) AS GtkCellArea PTR
DECLARE SUB gtk_cell_area_context_get_preferred_height(BYVAL AS GtkCellAreaContext PTR, BYVAL AS gint PTR, BYVAL AS gint PTR)
DECLARE SUB gtk_cell_area_context_get_preferred_height_for_width(BYVAL AS GtkCellAreaContext PTR, BYVAL AS gint, BYVAL AS gint PTR, BYVAL AS gint PTR)
DECLARE SUB gtk_cell_area_context_get_preferred_width(BYVAL AS GtkCellAreaContext PTR, BYVAL AS gint PTR, BYVAL AS gint PTR)
DECLARE SUB gtk_cell_area_context_get_preferred_width_for_height(BYVAL AS GtkCellAreaContext PTR, BYVAL AS gint, BYVAL AS gint PTR, BYVAL AS gint PTR)
DECLARE SUB gtk_cell_area_context_push_preferred_height(BYVAL AS GtkCellAreaContext PTR, BYVAL AS gint, BYVAL AS gint)
DECLARE SUB gtk_cell_area_context_push_preferred_width(BYVAL AS GtkCellAreaContext PTR, BYVAL AS gint, BYVAL AS gint)
DECLARE SUB gtk_cell_area_context_reset(BYVAL AS GtkCellAreaContext PTR)
TYPE _GtkCellAreaContextClass
  AS GObjectClass parent_class
  allocate AS SUB CDECL(BYVAL AS GtkCellAreaContext PTR, BYVAL AS gint, BYVAL AS gint)
  reset AS SUB CDECL(BYVAL AS GtkCellAreaContext PTR)
  get_preferred_height_for_width AS SUB CDECL(BYVAL AS GtkCellAreaContext PTR, BYVAL AS gint, BYVAL AS gint PTR, BYVAL AS gint PTR)
  get_preferred_width_for_height AS SUB CDECL(BYVAL AS GtkCellAreaContext PTR, BYVAL AS gint, BYVAL AS gint PTR, BYVAL AS gint PTR)
  _gtk_reserved1 AS SUB CDECL()
  _gtk_reserved2 AS SUB CDECL()
  _gtk_reserved3 AS SUB CDECL()
  _gtk_reserved4 AS SUB CDECL()
  _gtk_reserved5 AS SUB CDECL()
  _gtk_reserved6 AS SUB CDECL()
END TYPE
DECLARE FUNCTION gtk_cell_editable_get_type() AS GType
#DEFINE GTK_TYPE_CELL_EDITABLE (gtk_cell_editable_get_type())
#DEFINE GTK_CELL_EDITABLE(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_CELL_EDITABLE, GtkCellEditable))
#DEFINE GTK_CELL_EDITABLE_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_CELL_EDITABLE, GtkCellEditableIface))
#DEFINE GTK_IS_CELL_EDITABLE(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_CELL_EDITABLE))
#DEFINE GTK_CELL_EDITABLE_GET_IFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE((obj), GTK_TYPE_CELL_EDITABLE, GtkCellEditableIface))
DECLARE SUB gtk_cell_editable_editing_done(BYVAL AS GtkCellEditable PTR)
DECLARE SUB gtk_cell_editable_remove_widget(BYVAL AS GtkCellEditable PTR)
DECLARE SUB gtk_cell_editable_start_editing(BYVAL AS GtkCellEditable PTR, BYVAL AS GdkEvent PTR)
TYPE _GtkCellEditableIface
  AS GTypeInterface g_iface
  editing_done AS SUB CDECL(BYVAL AS GtkCellEditable PTR)
  remove_widget AS SUB CDECL(BYVAL AS GtkCellEditable PTR)
  start_editing AS SUB CDECL(BYVAL AS GtkCellEditable PTR, BYVAL AS GdkEvent PTR)
END TYPE
DECLARE FUNCTION gtk_cell_layout_get_type() AS GType
#DEFINE GTK_TYPE_CELL_LAYOUT (gtk_cell_layout_get_type())
#DEFINE GTK_CELL_LAYOUT(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_CELL_LAYOUT, GtkCellLayout))
#DEFINE GTK_CELL_LAYOUT_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_CELL_LAYOUT, GtkCellLayoutIface))
#DEFINE GTK_IS_CELL_LAYOUT(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_CELL_LAYOUT))
#DEFINE GTK_CELL_LAYOUT_GET_IFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE((obj), GTK_TYPE_CELL_LAYOUT, GtkCellLayoutIface))
DECLARE SUB gtk_cell_layout_add_attribute(BYVAL AS GtkCellLayout PTR, BYVAL AS GtkCellRenderer PTR, BYVAL AS const gchar PTR, BYVAL AS gint)
DECLARE SUB gtk_cell_layout_clear(BYVAL AS GtkCellLayout PTR)
DECLARE SUB gtk_cell_layout_clear_attributes(BYVAL AS GtkCellLayout PTR, BYVAL AS GtkCellRenderer PTR)
DECLARE FUNCTION gtk_cell_layout_get_area(BYVAL AS GtkCellLayout PTR) AS GtkCellArea PTR
DECLARE FUNCTION gtk_cell_layout_get_cells(BYVAL AS GtkCellLayout PTR) AS GList PTR
DECLARE SUB gtk_cell_layout_pack_end(BYVAL AS GtkCellLayout PTR, BYVAL AS GtkCellRenderer PTR, BYVAL AS gboolean)
DECLARE SUB gtk_cell_layout_pack_start(BYVAL AS GtkCellLayout PTR, BYVAL AS GtkCellRenderer PTR, BYVAL AS gboolean)
DECLARE SUB gtk_cell_layout_reorder(BYVAL AS GtkCellLayout PTR, BYVAL AS GtkCellRenderer PTR, BYVAL AS gint)
DECLARE SUB gtk_cell_layout_set_attributes(BYVAL AS GtkCellLayout PTR, BYVAL AS GtkCellRenderer PTR, ...)
DECLARE SUB gtk_cell_layout_set_cell_data_func(BYVAL AS GtkCellLayout PTR, BYVAL AS GtkCellRenderer PTR, BYVAL AS GtkCellLayoutDataFunc, BYVAL AS gpointer, BYVAL AS GDestroyNotify)
TYPE _GtkCellLayoutIface
  AS GTypeInterface g_iface
  pack_start AS SUB CDECL(BYVAL AS GtkCellLayout PTR, BYVAL AS GtkCellRenderer PTR, BYVAL AS gboolean)
  pack_end AS SUB CDECL(BYVAL AS GtkCellLayout PTR, BYVAL AS GtkCellRenderer PTR, BYVAL AS gboolean)
  clear AS SUB CDECL(BYVAL AS GtkCellLayout PTR)
  add_attribute AS SUB CDECL(BYVAL AS GtkCellLayout PTR, BYVAL AS GtkCellRenderer PTR, BYVAL AS const gchar PTR, BYVAL AS gint)
  set_cell_data_func AS SUB CDECL(BYVAL AS GtkCellLayout PTR, BYVAL AS GtkCellRenderer PTR, BYVAL AS GtkCellLayoutDataFunc, BYVAL AS gpointer, BYVAL AS GDestroyNotify)
  clear_attributes AS SUB CDECL(BYVAL AS GtkCellLayout PTR, BYVAL AS GtkCellRenderer PTR)
  reorder AS SUB CDECL(BYVAL AS GtkCellLayout PTR, BYVAL AS GtkCellRenderer PTR, BYVAL AS gint)
  get_cells AS FUNCTION CDECL(BYVAL AS GtkCellLayout PTR) AS GList PTR
  get_area AS FUNCTION CDECL(BYVAL AS GtkCellLayout PTR) AS GtkCellArea PTR
END TYPE
TYPE _GtkCellRendererAccel
  AS GtkCellRendererText parent
  AS GtkCellRendererAccelPrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_cell_renderer_accel_get_type() AS GType
#DEFINE GTK_TYPE_CELL_RENDERER_ACCEL (gtk_cell_renderer_accel_get_type())
#DEFINE GTK_CELL_RENDERER_ACCEL(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_CELL_RENDERER_ACCEL, GtkCellRendererAccel))
#DEFINE GTK_CELL_RENDERER_ACCEL_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_CELL_RENDERER_ACCEL, GtkCellRendererAccelClass))
#DEFINE GTK_IS_CELL_RENDERER_ACCEL(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_CELL_RENDERER_ACCEL))
#DEFINE GTK_IS_CLASS_CELL_RENDERER_ACCEL(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_CELL_RENDERER_ACCEL))
#DEFINE GTK_CELL_RENDERER_ACCEL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_CELL_RENDERER_ACCEL, GtkCellRendererAccelClass))
DECLARE FUNCTION gtk_cell_renderer_accel_new() AS GtkCellRenderer PTR
TYPE _GtkCellRendererAccelClass
  AS GtkCellRendererTextClass parent_class
  accel_edited AS SUB CDECL(BYVAL AS GtkCellRendererAccel PTR, BYVAL AS const gchar PTR, BYVAL AS guint, BYVAL AS GdkModifierType, BYVAL AS guint)
  accel_cleared AS SUB CDECL(BYVAL AS GtkCellRendererAccel PTR, BYVAL AS const gchar PTR)
  _gtk_reserved0 AS SUB CDECL()
  _gtk_reserved1 AS SUB CDECL()
  _gtk_reserved2 AS SUB CDECL()
  _gtk_reserved3 AS SUB CDECL()
  _gtk_reserved4 AS SUB CDECL()
END TYPE
DECLARE FUNCTION gtk_cell_renderer_accel_mode_get_type() AS GType
#DEFINE GTK_TYPE_CELL_RENDERER_ACCEL_MODE (gtk_cell_renderer_accel_mode_get_type())
TYPE _GtkCellRendererCombo
  AS GtkCellRendererText parent
  AS GtkCellRendererComboPrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_cell_renderer_combo_get_type() AS GType
#DEFINE GTK_TYPE_CELL_RENDERER_COMBO (gtk_cell_renderer_combo_get_type())
#DEFINE GTK_CELL_RENDERER_COMBO(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_CELL_RENDERER_COMBO, GtkCellRendererCombo))
#DEFINE GTK_CELL_RENDERER_COMBO_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_CELL_RENDERER_COMBO, GtkCellRendererComboClass))
#DEFINE GTK_IS_CELL_RENDERER_COMBO(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_CELL_RENDERER_COMBO))
#DEFINE GTK_IS_CLASS_CELL_RENDERER_COMBO(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_CELL_RENDERER_COMBO))
#DEFINE GTK_CELL_RENDERER_COMBO_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_CELL_RENDERER_COMBO, GtkCellRendererComboClass))
DECLARE FUNCTION gtk_cell_renderer_combo_new() AS GtkCellRenderer PTR
TYPE _GtkCellRendererComboClass
  AS GtkCellRendererTextClass parent
  _gtk_reserved1 AS SUB CDECL()
  _gtk_reserved2 AS SUB CDECL()
  _gtk_reserved3 AS SUB CDECL()
  _gtk_reserved4 AS SUB CDECL()
END TYPE
TYPE _GtkCellRendererPixbuf
  AS GtkCellRenderer parent
  AS GtkCellRendererPixbufPrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_cell_renderer_mode_get_type() AS GType
#DEFINE GTK_TYPE_CELL_RENDERER_MODE (gtk_cell_renderer_mode_get_type())
DECLARE FUNCTION gtk_cell_renderer_pixbuf_get_type() AS GType
#DEFINE GTK_TYPE_CELL_RENDERER_PIXBUF (gtk_cell_renderer_pixbuf_get_type())
#DEFINE GTK_CELL_RENDERER_PIXBUF(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_CELL_RENDERER_PIXBUF, GtkCellRendererPixbuf))
#DEFINE GTK_CELL_RENDERER_PIXBUF_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_CELL_RENDERER_PIXBUF, GtkCellRendererPixbufClass))
#DEFINE GTK_IS_CELL_RENDERER_PIXBUF(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_CELL_RENDERER_PIXBUF))
#DEFINE GTK_IS_CLASS_CELL_RENDERER_PIXBUF(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_CELL_RENDERER_PIXBUF))
#DEFINE GTK_CELL_RENDERER_PIXBUF_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_CELL_RENDERER_PIXBUF, GtkCellRendererPixbufClass))
DECLARE FUNCTION gtk_cell_renderer_pixbuf_new() AS GtkCellRenderer PTR
TYPE _GtkCellRendererPixbufClass
  AS GtkCellRendererClass parent_class
  _gtk_reserved1 AS SUB CDECL()
  _gtk_reserved2 AS SUB CDECL()
  _gtk_reserved3 AS SUB CDECL()
  _gtk_reserved4 AS SUB CDECL()
END TYPE
TYPE _GtkCellRendererProgress
  AS GtkCellRenderer parent_instance
  AS GtkCellRendererProgressPrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_cell_renderer_progress_get_type() AS GType
#DEFINE GTK_TYPE_CELL_RENDERER_PROGRESS (gtk_cell_renderer_progress_get_type())
#DEFINE GTK_CELL_RENDERER_PROGRESS(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_CELL_RENDERER_PROGRESS, GtkCellRendererProgress))
#DEFINE GTK_CELL_RENDERER_PROGRESS_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_CELL_RENDERER_PROGRESS, GtkCellRendererProgressClass))
#DEFINE GTK_IS_CELL_RENDERER_PROGRESS(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_CELL_RENDERER_PROGRESS))
#DEFINE GTK_IS_CLASS_CELL_RENDERER_PROGRESS(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_CELL_RENDERER_PROGRESS))
#DEFINE GTK_CELL_RENDERER_PROGRESS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_CELL_RENDERER_PROGRESS, GtkCellRendererProgressClass))
DECLARE FUNCTION gtk_cell_renderer_progress_new() AS GtkCellRenderer PTR
TYPE _GtkCellRendererProgressClass
  AS GtkCellRendererClass parent_class
  _gtk_reserved1 AS SUB CDECL()
  _gtk_reserved2 AS SUB CDECL()
  _gtk_reserved3 AS SUB CDECL()
  _gtk_reserved4 AS SUB CDECL()
END TYPE
TYPE _GtkCellRendererSpin
  AS GtkCellRendererText parent
  AS GtkCellRendererSpinPrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_cell_renderer_spin_get_type() AS GType
#DEFINE GTK_TYPE_CELL_RENDERER_SPIN (gtk_cell_renderer_spin_get_type())
#DEFINE GTK_CELL_RENDERER_SPIN(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_CELL_RENDERER_SPIN, GtkCellRendererSpin))
#DEFINE GTK_CELL_RENDERER_SPIN_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_CELL_RENDERER_SPIN, GtkCellRendererSpinClass))
#DEFINE GTK_IS_CELL_RENDERER_SPIN(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_CELL_RENDERER_SPIN))
#DEFINE GTK_IS_CLASS_CELL_RENDERER_SPIN(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_CELL_RENDERER_SPIN))
#DEFINE GTK_CELL_RENDERER_SPIN_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_CELL_RENDERER_SPIN, GtkCellRendererSpinClass))
DECLARE FUNCTION gtk_cell_renderer_spin_new() AS GtkCellRenderer PTR
TYPE _GtkCellRendererSpinClass
  AS GtkCellRendererTextClass parent
  _gtk_reserved1 AS SUB CDECL()
  _gtk_reserved2 AS SUB CDECL()
  _gtk_reserved3 AS SUB CDECL()
  _gtk_reserved4 AS SUB CDECL()
END TYPE
TYPE _GtkCellRendererSpinner
  AS GtkCellRenderer parent
  AS GtkCellRendererSpinnerPrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_cell_renderer_spinner_get_type() AS GType
#DEFINE GTK_TYPE_CELL_RENDERER_SPINNER (gtk_cell_renderer_spinner_get_type())
#DEFINE GTK_CELL_RENDERER_SPINNER(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_CELL_RENDERER_SPINNER, GtkCellRendererSpinner))
#DEFINE GTK_CELL_RENDERER_SPINNER_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_CELL_RENDERER_SPINNER, GtkCellRendererSpinnerClass))
#DEFINE GTK_IS_CELL_RENDERER_SPINNER(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_CELL_RENDERER_SPINNER))
#DEFINE GTK_IS_CLASS_CELL_RENDERER_SPINNER(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_CELL_RENDERER_SPINNER))
#DEFINE GTK_CELL_RENDERER_SPINNER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_CELL_RENDERER_SPINNER, GtkCellRendererSpinnerClass))
DECLARE FUNCTION gtk_cell_renderer_spinner_new() AS GtkCellRenderer PTR
TYPE _GtkCellRendererSpinnerClass
  AS GtkCellRendererClass parent_class
  _gtk_reserved1 AS SUB CDECL()
  _gtk_reserved2 AS SUB CDECL()
  _gtk_reserved3 AS SUB CDECL()
  _gtk_reserved4 AS SUB CDECL()
END TYPE
TYPE _GtkCellRendererToggle
  AS GtkCellRenderer parent
  AS GtkCellRendererTogglePrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_cell_renderer_toggle_get_type() AS GType
#DEFINE GTK_TYPE_CELL_RENDERER_TOGGLE (gtk_cell_renderer_toggle_get_type())
#DEFINE GTK_CELL_RENDERER_TOGGLE(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_CELL_RENDERER_TOGGLE, GtkCellRendererToggle))
#DEFINE GTK_CELL_RENDERER_TOGGLE_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_CELL_RENDERER_TOGGLE, GtkCellRendererToggleClass))
#DEFINE GTK_IS_CELL_RENDERER_TOGGLE(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_CELL_RENDERER_TOGGLE))
#DEFINE GTK_IS_CLASS_CELL_RENDERER_TOGGLE(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_CELL_RENDERER_TOGGLE))
#DEFINE GTK_CELL_RENDERER_TOGGLE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_CELL_RENDERER_TOGGLE, GtkCellRendererToggleClass))
DECLARE FUNCTION gtk_cell_renderer_toggle_new() AS GtkCellRenderer PTR
DECLARE FUNCTION gtk_cell_renderer_toggle_get_activatable(BYVAL AS GtkCellRendererToggle PTR) AS gboolean
DECLARE FUNCTION gtk_cell_renderer_toggle_get_active(BYVAL AS GtkCellRendererToggle PTR) AS gboolean
DECLARE FUNCTION gtk_cell_renderer_toggle_get_radio(BYVAL AS GtkCellRendererToggle PTR) AS gboolean
DECLARE SUB gtk_cell_renderer_toggle_set_activatable(BYVAL AS GtkCellRendererToggle PTR, BYVAL AS gboolean)
DECLARE SUB gtk_cell_renderer_toggle_set_active(BYVAL AS GtkCellRendererToggle PTR, BYVAL AS gboolean)
DECLARE SUB gtk_cell_renderer_toggle_set_radio(BYVAL AS GtkCellRendererToggle PTR, BYVAL AS gboolean)
TYPE _GtkCellRendererToggleClass
  AS GtkCellRendererClass parent_class
  toggled AS SUB CDECL(BYVAL AS GtkCellRendererToggle PTR, BYVAL AS const gchar PTR)
  _gtk_reserved1 AS SUB CDECL()
  _gtk_reserved2 AS SUB CDECL()
  _gtk_reserved3 AS SUB CDECL()
  _gtk_reserved4 AS SUB CDECL()
END TYPE
TYPE _GtkCellView
  AS GtkWidget parent_instance
  AS GtkCellViewPrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_cell_view_get_type() AS GType
#DEFINE GTK_TYPE_CELL_VIEW (gtk_cell_view_get_type())
#DEFINE GTK_CELL_VIEW(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_CELL_VIEW, GtkCellView))
#DEFINE GTK_CELL_VIEW_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_CELL_VIEW, GtkCellViewClass))
#DEFINE GTK_IS_CELL_VIEW(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_CELL_VIEW))
#DEFINE GTK_IS_CLASS_CELL_VIEW(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_CELL_VIEW))
#DEFINE GTK_CELL_VIEW_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_CELL_VIEW, GtkCellViewClass))
DECLARE FUNCTION gtk_cell_view_new() AS GtkWidget PTR
DECLARE FUNCTION gtk_cell_view_new_with_context(BYVAL AS GtkCellArea PTR, BYVAL AS GtkCellAreaContext PTR) AS GtkWidget PTR
DECLARE FUNCTION gtk_cell_view_new_with_markup(BYVAL AS const gchar PTR) AS GtkWidget PTR
DECLARE FUNCTION gtk_cell_view_new_with_pixbuf(BYVAL AS GdkPixbuf PTR) AS GtkWidget PTR
DECLARE FUNCTION gtk_cell_view_new_with_text(BYVAL AS const gchar PTR) AS GtkWidget PTR
DECLARE FUNCTION gtk_cell_view_get_displayed_row(BYVAL AS GtkCellView PTR) AS GtkTreePath PTR
DECLARE FUNCTION gtk_cell_view_get_draw_sensitive(BYVAL AS GtkCellView PTR) AS gboolean
DECLARE FUNCTION gtk_cell_view_get_fit_model(BYVAL AS GtkCellView PTR) AS gboolean
DECLARE FUNCTION gtk_cell_view_get_model(BYVAL AS GtkCellView PTR) AS GtkTreeModel PTR
DECLARE FUNCTION gtk_cell_view_get_size_of_row(BYVAL AS GtkCellView PTR, BYVAL AS GtkTreePath PTR, BYVAL AS GtkRequisition PTR) AS gboolean
DECLARE SUB gtk_cell_view_set_background_color(BYVAL AS GtkCellView PTR, BYVAL AS const GdkColor PTR)
DECLARE SUB gtk_cell_view_set_background_rgba(BYVAL AS GtkCellView PTR, BYVAL AS const GdkRGBA PTR)
DECLARE SUB gtk_cell_view_set_displayed_row(BYVAL AS GtkCellView PTR, BYVAL AS GtkTreePath PTR)
DECLARE SUB gtk_cell_view_set_draw_sensitive(BYVAL AS GtkCellView PTR, BYVAL AS gboolean)
DECLARE SUB gtk_cell_view_set_fit_model(BYVAL AS GtkCellView PTR, BYVAL AS gboolean)
DECLARE SUB gtk_cell_view_set_model(BYVAL AS GtkCellView PTR, BYVAL AS GtkTreeModel PTR)
TYPE _GtkCellViewClass
  AS GtkWidgetClass parent_class
  _gtk_reserved1 AS SUB CDECL()
  _gtk_reserved2 AS SUB CDECL()
  _gtk_reserved3 AS SUB CDECL()
  _gtk_reserved4 AS SUB CDECL()
END TYPE
TYPE _GtkCheckButton
  AS GtkToggleButton toggle_button
END TYPE
DECLARE FUNCTION gtk_check_button_get_type() AS GType
#DEFINE GTK_TYPE_CHECK_BUTTON (gtk_check_button_get_type())
#DEFINE GTK_CHECK_BUTTON(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_CHECK_BUTTON, GtkCheckButton))
#DEFINE GTK_CHECK_BUTTON_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_CHECK_BUTTON, GtkCheckButtonClass))
#DEFINE GTK_IS_CHECK_BUTTON(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_CHECK_BUTTON))
#DEFINE GTK_IS_CLASS_CHECK_BUTTON(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_CHECK_BUTTON))
#DEFINE GTK_CHECK_BUTTON_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_CHECK_BUTTON, GtkCheckButtonClass))
DECLARE FUNCTION gtk_check_button_new() AS GtkWidget PTR
DECLARE FUNCTION gtk_check_button_new_with_label(BYVAL AS const gchar PTR) AS GtkWidget PTR
DECLARE FUNCTION gtk_check_button_new_with_mnemonic(BYVAL AS const gchar PTR) AS GtkWidget PTR
TYPE _GtkCheckButtonClass
  AS GtkToggleButtonClass parent_class
  draw_indicator AS SUB CDECL(BYVAL AS GtkCheckButton PTR, BYVAL AS cairo_t PTR)
  _gtk_reserved1 AS SUB CDECL()
  _gtk_reserved2 AS SUB CDECL()
  _gtk_reserved3 AS SUB CDECL()
  _gtk_reserved4 AS SUB CDECL()
END TYPE
TYPE _GtkCheckMenuItem
  AS GtkMenuItem menu_item
  AS GtkCheckMenuItemPrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_check_menu_item_get_type() AS GType
#DEFINE GTK_TYPE_CHECK_MENU_ITEM (gtk_check_menu_item_get_type())
#DEFINE GTK_CHECK_MENU_ITEM(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_CHECK_MENU_ITEM, GtkCheckMenuItem))
#DEFINE GTK_CHECK_MENU_ITEM_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_CHECK_MENU_ITEM, GtkCheckMenuItemClass))
#DEFINE GTK_IS_CHECK_MENU_ITEM(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_CHECK_MENU_ITEM))
#DEFINE GTK_IS_CLASS_CHECK_MENU_ITEM(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_CHECK_MENU_ITEM))
#DEFINE GTK_CHECK_MENU_ITEM_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_CHECK_MENU_ITEM, GtkCheckMenuItemClass))
DECLARE FUNCTION gtk_check_menu_item_new() AS GtkWidget PTR
DECLARE FUNCTION gtk_check_menu_item_new_with_label(BYVAL AS const gchar PTR) AS GtkWidget PTR
DECLARE FUNCTION gtk_check_menu_item_new_with_mnemonic(BYVAL AS const gchar PTR) AS GtkWidget PTR
DECLARE FUNCTION gtk_check_menu_item_get_active(BYVAL AS GtkCheckMenuItem PTR) AS gboolean
DECLARE FUNCTION gtk_check_menu_item_get_draw_as_radio(BYVAL AS GtkCheckMenuItem PTR) AS gboolean
DECLARE FUNCTION gtk_check_menu_item_get_inconsistent(BYVAL AS GtkCheckMenuItem PTR) AS gboolean
DECLARE SUB gtk_check_menu_item_set_active(BYVAL AS GtkCheckMenuItem PTR, BYVAL AS gboolean)
DECLARE SUB gtk_check_menu_item_set_draw_as_radio(BYVAL AS GtkCheckMenuItem PTR, BYVAL AS gboolean)
DECLARE SUB gtk_check_menu_item_set_inconsistent(BYVAL AS GtkCheckMenuItem PTR, BYVAL AS gboolean)
DECLARE SUB gtk_check_menu_item_toggled(BYVAL AS GtkCheckMenuItem PTR)
TYPE _GtkCheckMenuItemAccessible
  AS GtkMenuItemAccessible parent
  AS GtkCheckMenuItemAccessiblePrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_check_menu_item_accessible_get_type() AS GType
#DEFINE GTK_TYPE_CHECK_MENU_ITEM_ACCESSIBLE (gtk_check_menu_item_accessible_get_type())
#DEFINE GTK_CHECK_MENU_ITEM_ACCESSIBLE(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_CHECK_MENU_ITEM_ACCESSIBLE, GtkCheckMenuItemAccessible))
#DEFINE GTK_CHECK_MENU_ITEM_ACCESSIBLE_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_CHECK_MENU_ITEM_ACCESSIBLE, GtkCheckMenuItemAccessibleClass))
#DEFINE GTK_IS_CHECK_MENU_ITEM_ACCESSIBLE(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_CHECK_MENU_ITEM_ACCESSIBLE))
#DEFINE GTK_IS_CLASS_CHECK_MENU_ITEM_ACCESSIBLE(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_CHECK_MENU_ITEM_ACCESSIBLE))
#DEFINE GTK_CHECK_MENU_ITEM_ACCESSIBLE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_CHECK_MENU_ITEM_ACCESSIBLE, GtkCheckMenuItemAccessibleClass))
TYPE _GtkCheckMenuItemAccessibleClass
  AS GtkMenuItemAccessibleClass parent_class
END TYPE
TYPE _GtkCheckMenuItemClass
  AS GtkMenuItemClass parent_class
  toggled AS SUB CDECL(BYVAL AS GtkCheckMenuItem PTR)
  draw_indicator AS SUB CDECL(BYVAL AS GtkCheckMenuItem PTR, BYVAL AS cairo_t PTR)
  _gtk_reserved1 AS SUB CDECL()
  _gtk_reserved2 AS SUB CDECL()
  _gtk_reserved3 AS SUB CDECL()
  _gtk_reserved4 AS SUB CDECL()
END TYPE
DECLARE FUNCTION gtk_clipboard_get_type() AS GType
#DEFINE GTK_TYPE_CLIPBOARD (gtk_clipboard_get_type())
#DEFINE GTK_CLIPBOARD(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_CLIPBOARD, GtkClipboard))
#DEFINE GTK_CLIPBOARD_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_CLIPBOARD, Gtk))
#DEFINE GTK_IS_CLIPBOARD(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_CLIPBOARD))
#DEFINE GTK_IS_CLASS_CLIPBOARD(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_CLIPBOARD))
#DEFINE GTK_CLIPBOARD_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_CLIPBOARD, Gtk))
DECLARE FUNCTION gtk_clipboard_get(BYVAL AS any ptr /'GdkAtom'/) AS GtkClipboard PTR
DECLARE FUNCTION gtk_clipboard_get_default(BYVAL AS GdkDisplay PTR) AS GtkClipboard PTR
DECLARE FUNCTION gtk_clipboard_get_for_display(BYVAL AS GdkDisplay PTR, BYVAL AS any ptr /'GdkAtom'/) AS GtkClipboard PTR
DECLARE SUB gtk_clipboard_clear(BYVAL AS GtkClipboard PTR)
DECLARE FUNCTION gtk_clipboard_get_display(BYVAL AS GtkClipboard PTR) AS GdkDisplay PTR
DECLARE FUNCTION gtk_clipboard_get_owner(BYVAL AS GtkClipboard PTR) AS GObject PTR
DECLARE FUNCTION gtk_clipboard_get_selection(BYVAL AS GtkClipboard PTR) AS any ptr /'GdkAtom'/
DECLARE SUB gtk_clipboard_request_contents(BYVAL AS GtkClipboard PTR, BYVAL AS any ptr /'GdkAtom'/, BYVAL AS GtkClipboardReceivedFunc, BYVAL AS gpointer)
DECLARE SUB gtk_clipboard_request_image(BYVAL AS GtkClipboard PTR, BYVAL AS GtkClipboardImageReceivedFunc, BYVAL AS gpointer)
DECLARE SUB gtk_clipboard_request_rich_text(BYVAL AS GtkClipboard PTR, BYVAL AS GtkTextBuffer PTR, BYVAL AS GtkClipboardRichTextReceivedFunc, BYVAL AS gpointer)
DECLARE SUB gtk_clipboard_request_targets(BYVAL AS GtkClipboard PTR, BYVAL AS GtkClipboardTargetsReceivedFunc, BYVAL AS gpointer)
DECLARE SUB gtk_clipboard_request_text(BYVAL AS GtkClipboard PTR, BYVAL AS GtkClipboardTextReceivedFunc, BYVAL AS gpointer)
DECLARE SUB gtk_clipboard_request_uris(BYVAL AS GtkClipboard PTR, BYVAL AS GtkClipboardURIReceivedFunc, BYVAL AS gpointer)
DECLARE SUB gtk_clipboard_set_can_store(BYVAL AS GtkClipboard PTR, BYVAL AS const GtkTargetEntry PTR, BYVAL AS gint)
DECLARE SUB gtk_clipboard_set_image(BYVAL AS GtkClipboard PTR, BYVAL AS GdkPixbuf PTR)
DECLARE SUB gtk_clipboard_set_text(BYVAL AS GtkClipboard PTR, BYVAL AS const gchar PTR, BYVAL AS gint)
DECLARE FUNCTION gtk_clipboard_set_with_data(BYVAL AS GtkClipboard PTR, BYVAL AS const GtkTargetEntry PTR, BYVAL AS guint, BYVAL AS GtkClipboardGetFunc, BYVAL AS GtkClipboardClearFunc, BYVAL AS gpointer) AS gboolean
DECLARE FUNCTION gtk_clipboard_set_with_owner(BYVAL AS GtkClipboard PTR, BYVAL AS const GtkTargetEntry PTR, BYVAL AS guint, BYVAL AS GtkClipboardGetFunc, BYVAL AS GtkClipboardClearFunc, BYVAL AS GObject PTR) AS gboolean
DECLARE SUB gtk_clipboard_store(BYVAL AS GtkClipboard PTR)
DECLARE FUNCTION gtk_clipboard_wait_for_contents(BYVAL AS GtkClipboard PTR, BYVAL AS any ptr /'GdkAtom'/) AS GtkSelectionData PTR
DECLARE FUNCTION gtk_clipboard_wait_for_image(BYVAL AS GtkClipboard PTR) AS GdkPixbuf PTR
DECLARE FUNCTION gtk_clipboard_wait_for_rich_text(BYVAL AS GtkClipboard PTR, BYVAL AS GtkTextBuffer PTR, BYVAL AS any ptr /'GdkAtom'/ PTR, BYVAL AS gsize PTR) AS guint8 PTR
DECLARE FUNCTION gtk_clipboard_wait_for_targets(BYVAL AS GtkClipboard PTR, BYVAL AS any ptr /'GdkAtom'/ PTR PTR, BYVAL AS gint PTR) AS gboolean
DECLARE FUNCTION gtk_clipboard_wait_for_text(BYVAL AS GtkClipboard PTR) AS gchar PTR
DECLARE FUNCTION gtk_clipboard_wait_for_uris(BYVAL AS GtkClipboard PTR) AS gchar PTR PTR
DECLARE FUNCTION gtk_clipboard_wait_is_image_available(BYVAL AS GtkClipboard PTR) AS gboolean
DECLARE FUNCTION gtk_clipboard_wait_is_rich_text_available(BYVAL AS GtkClipboard PTR, BYVAL AS GtkTextBuffer PTR) AS gboolean
DECLARE FUNCTION gtk_clipboard_wait_is_target_available(BYVAL AS GtkClipboard PTR, BYVAL AS any ptr /'GdkAtom'/) AS gboolean
DECLARE FUNCTION gtk_clipboard_wait_is_text_available(BYVAL AS GtkClipboard PTR) AS gboolean
DECLARE FUNCTION gtk_clipboard_wait_is_uris_available(BYVAL AS GtkClipboard PTR) AS gboolean
TYPE _GtkColorButton
  AS GtkButton button
  AS GtkColorButtonPrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_color_button_get_type() AS GType
#DEFINE GTK_TYPE_COLOR_BUTTON (gtk_color_button_get_type())
#DEFINE GTK_COLOR_BUTTON(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_COLOR_BUTTON, GtkColorButton))
#DEFINE GTK_COLOR_BUTTON_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_COLOR_BUTTON, GtkColorButtonClass))
#DEFINE GTK_IS_COLOR_BUTTON(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_COLOR_BUTTON))
#DEFINE GTK_IS_CLASS_COLOR_BUTTON(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_COLOR_BUTTON))
#DEFINE GTK_COLOR_BUTTON_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_COLOR_BUTTON, GtkColorButtonClass))
DECLARE FUNCTION gtk_color_button_new() AS GtkWidget PTR
DECLARE FUNCTION gtk_color_button_new_with_color(BYVAL AS const GdkColor PTR) AS GtkWidget PTR
DECLARE FUNCTION gtk_color_button_new_with_rgba(BYVAL AS const GdkRGBA PTR) AS GtkWidget PTR
DECLARE FUNCTION gtk_color_button_get_alpha(BYVAL AS GtkColorButton PTR) AS guint16
DECLARE SUB gtk_color_button_get_color(BYVAL AS GtkColorButton PTR, BYVAL AS GdkColor PTR)
DECLARE SUB gtk_color_button_get_rgba(BYVAL AS GtkColorButton PTR, BYVAL AS GdkRGBA PTR)
DECLARE FUNCTION gtk_color_button_get_title(BYVAL AS GtkColorButton PTR) AS const gchar PTR
DECLARE FUNCTION gtk_color_button_get_use_alpha(BYVAL AS GtkColorButton PTR) AS gboolean
DECLARE SUB gtk_color_button_set_alpha(BYVAL AS GtkColorButton PTR, BYVAL AS guint16)
DECLARE SUB gtk_color_button_set_color(BYVAL AS GtkColorButton PTR, BYVAL AS const GdkColor PTR)
DECLARE SUB gtk_color_button_set_rgba(BYVAL AS GtkColorButton PTR, BYVAL AS const GdkRGBA PTR)
DECLARE SUB gtk_color_button_set_title(BYVAL AS GtkColorButton PTR, BYVAL AS const gchar PTR)
DECLARE SUB gtk_color_button_set_use_alpha(BYVAL AS GtkColorButton PTR, BYVAL AS gboolean)
TYPE _GtkColorButtonClass
  AS GtkButtonClass parent_class
  color_set AS SUB CDECL(BYVAL AS GtkColorButton PTR)
  _gtk_reserved1 AS SUB CDECL()
  _gtk_reserved2 AS SUB CDECL()
  _gtk_reserved3 AS SUB CDECL()
  _gtk_reserved4 AS SUB CDECL()
END TYPE
DECLARE FUNCTION gtk_color_chooser_get_type() AS GType
#DEFINE GTK_TYPE_COLOR_CHOOSER (gtk_color_chooser_get_type())
#DEFINE GTK_COLOR_CHOOSER(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_COLOR_CHOOSER, GtkColorChooser))
#DEFINE GTK_COLOR_CHOOSER_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_COLOR_CHOOSER, GtkColorChooserInterface))
#DEFINE GTK_IS_COLOR_CHOOSER(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_COLOR_CHOOSER))
#DEFINE GTK_COLOR_CHOOSER_GET_IFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE((obj), GTK_TYPE_COLOR_CHOOSER, GtkColorChooserInterface))
DECLARE SUB gtk_color_chooser_add_palette(BYVAL AS GtkColorChooser PTR, BYVAL AS GtkOrientation, BYVAL AS gint, BYVAL AS gint, BYVAL AS GdkRGBA PTR)
DECLARE SUB gtk_color_chooser_get_rgba(BYVAL AS GtkColorChooser PTR, BYVAL AS GdkRGBA PTR)
DECLARE FUNCTION gtk_color_chooser_get_use_alpha(BYVAL AS GtkColorChooser PTR) AS gboolean
DECLARE SUB gtk_color_chooser_set_rgba(BYVAL AS GtkColorChooser PTR, BYVAL AS const GdkRGBA PTR)
DECLARE SUB gtk_color_chooser_set_use_alpha(BYVAL AS GtkColorChooser PTR, BYVAL AS gboolean)
TYPE _GtkColorChooserDialog
  AS GtkDialog parent_instance
  AS GtkColorChooserDialogPrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_color_chooser_dialog_get_type() AS GType
#DEFINE GTK_TYPE_COLOR_CHOOSER_DIALOG (gtk_color_chooser_dialog_get_type())
#DEFINE GTK_COLOR_CHOOSER_DIALOG(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_COLOR_CHOOSER_DIALOG, GtkColorChooserDialog))
#DEFINE GTK_COLOR_CHOOSER_DIALOG_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_COLOR_CHOOSER_DIALOG, GtkColorChooserDialogClass))
#DEFINE GTK_IS_COLOR_CHOOSER_DIALOG(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_COLOR_CHOOSER_DIALOG))
#DEFINE GTK_IS_CLASS_COLOR_CHOOSER_DIALOG(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_COLOR_CHOOSER_DIALOG))
#DEFINE GTK_COLOR_CHOOSER_DIALOG_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_COLOR_CHOOSER_DIALOG, GtkColorChooserDialogClass))
DECLARE FUNCTION gtk_color_chooser_dialog_new(BYVAL AS const gchar PTR, BYVAL AS GtkWindow PTR) AS GtkWidget PTR
TYPE _GtkColorChooserDialogClass
  AS GtkDialogClass parent_class
  _gtk_reserved1 AS SUB CDECL()
  _gtk_reserved2 AS SUB CDECL()
  _gtk_reserved3 AS SUB CDECL()
  _gtk_reserved4 AS SUB CDECL()
END TYPE
TYPE _GtkColorChooserInterface
  AS GTypeInterface base_interface
  get_rgba AS SUB CDECL(BYVAL AS GtkColorChooser PTR, BYVAL AS GdkRGBA PTR)
  set_rgba AS SUB CDECL(BYVAL AS GtkColorChooser PTR, BYVAL AS const GdkRGBA PTR)
  add_palette AS SUB CDECL(BYVAL AS GtkColorChooser PTR, BYVAL AS GtkOrientation, BYVAL AS gint, BYVAL AS gint, BYVAL AS GdkRGBA PTR)
  color_activated AS SUB CDECL(BYVAL AS GtkColorChooser PTR, BYVAL AS const GdkRGBA PTR)
  AS gpointer padding(11)
END TYPE
TYPE _GtkColorChooserWidget
  AS GtkBox parent_instance
  AS GtkColorChooserWidgetPrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_color_chooser_widget_get_type() AS GType
#DEFINE GTK_TYPE_COLOR_CHOOSER_WIDGET (gtk_color_chooser_widget_get_type())
#DEFINE GTK_COLOR_CHOOSER_WIDGET(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_COLOR_CHOOSER_WIDGET, GtkColorChooserWidget))
#DEFINE GTK_COLOR_CHOOSER_WIDGET_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_COLOR_CHOOSER_WIDGET, GtkColorChooserWidgetClass))
#DEFINE GTK_IS_COLOR_CHOOSER_WIDGET(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_COLOR_CHOOSER_WIDGET))
#DEFINE GTK_IS_CLASS_COLOR_CHOOSER_WIDGET(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_COLOR_CHOOSER_WIDGET))
#DEFINE GTK_COLOR_CHOOSER_WIDGET_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_COLOR_CHOOSER_WIDGET, GtkColorChooserWidgetClass))
DECLARE FUNCTION gtk_color_chooser_widget_new() AS GtkWidget PTR
TYPE _GtkColorChooserWidgetClass
  AS GtkBoxClass parent_class
  _gtk_reserved1 AS SUB CDECL()
  _gtk_reserved2 AS SUB CDECL()
  _gtk_reserved3 AS SUB CDECL()
  _gtk_reserved4 AS SUB CDECL()
  _gtk_reserved5 AS SUB CDECL()
  _gtk_reserved6 AS SUB CDECL()
  _gtk_reserved7 AS SUB CDECL()
  _gtk_reserved8 AS SUB CDECL()
END TYPE
TYPE _GtkColorSelection
  AS GtkBox parent_instance
  AS GtkColorSelectionPrivate PTR private_data
END TYPE
DECLARE FUNCTION gtk_color_selection_get_type() AS GType
#DEFINE GTK_TYPE_COLOR_SELECTION (gtk_color_selection_get_type())
#DEFINE GTK_COLOR_SELECTION(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_COLOR_SELECTION, GtkColorSelection))
#DEFINE GTK_COLOR_SELECTION_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_COLOR_SELECTION, GtkColorSelectionClass))
#DEFINE GTK_IS_COLOR_SELECTION(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_COLOR_SELECTION))
#DEFINE GTK_IS_CLASS_COLOR_SELECTION(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_COLOR_SELECTION))
#DEFINE GTK_COLOR_SELECTION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_COLOR_SELECTION, GtkColorSelectionClass))
DECLARE FUNCTION gtk_color_selection_new() AS GtkWidget PTR
DECLARE FUNCTION gtk_color_selection_palette_from_string(BYVAL AS const gchar PTR, BYVAL AS GdkColor PTR PTR, BYVAL AS gint PTR) AS gboolean
DECLARE FUNCTION gtk_color_selection_palette_to_string(BYVAL AS const GdkColor PTR, BYVAL AS gint) AS gchar PTR
DECLARE FUNCTION gtk_color_selection_set_change_palette_with_screen_hook(BYVAL AS GtkColorSelectionChangePaletteWithScreenFunc) AS GtkColorSelectionChangePaletteWithScreenFunc
DECLARE FUNCTION gtk_color_selection_get_current_alpha(BYVAL AS GtkColorSelection PTR) AS guint16
DECLARE SUB gtk_color_selection_get_current_color(BYVAL AS GtkColorSelection PTR, BYVAL AS GdkColor PTR)
DECLARE SUB gtk_color_selection_get_current_rgba(BYVAL AS GtkColorSelection PTR, BYVAL AS GdkRGBA PTR)
DECLARE FUNCTION gtk_color_selection_get_has_opacity_control(BYVAL AS GtkColorSelection PTR) AS gboolean
DECLARE FUNCTION gtk_color_selection_get_has_palette(BYVAL AS GtkColorSelection PTR) AS gboolean
DECLARE FUNCTION gtk_color_selection_get_previous_alpha(BYVAL AS GtkColorSelection PTR) AS guint16
DECLARE SUB gtk_color_selection_get_previous_color(BYVAL AS GtkColorSelection PTR, BYVAL AS GdkColor PTR)
DECLARE SUB gtk_color_selection_get_previous_rgba(BYVAL AS GtkColorSelection PTR, BYVAL AS GdkRGBA PTR)
DECLARE FUNCTION gtk_color_selection_is_adjusting(BYVAL AS GtkColorSelection PTR) AS gboolean
DECLARE SUB gtk_color_selection_set_current_alpha(BYVAL AS GtkColorSelection PTR, BYVAL AS guint16)
DECLARE SUB gtk_color_selection_set_current_color(BYVAL AS GtkColorSelection PTR, BYVAL AS const GdkColor PTR)
DECLARE SUB gtk_color_selection_set_current_rgba(BYVAL AS GtkColorSelection PTR, BYVAL AS const GdkRGBA PTR)
DECLARE SUB gtk_color_selection_set_has_opacity_control(BYVAL AS GtkColorSelection PTR, BYVAL AS gboolean)
DECLARE SUB gtk_color_selection_set_has_palette(BYVAL AS GtkColorSelection PTR, BYVAL AS gboolean)
DECLARE SUB gtk_color_selection_set_previous_alpha(BYVAL AS GtkColorSelection PTR, BYVAL AS guint16)
DECLARE SUB gtk_color_selection_set_previous_color(BYVAL AS GtkColorSelection PTR, BYVAL AS const GdkColor PTR)
DECLARE SUB gtk_color_selection_set_previous_rgba(BYVAL AS GtkColorSelection PTR, BYVAL AS const GdkRGBA PTR)
TYPE GtkColorSelectionChangePaletteFunc AS SUB CDECL(BYVAL AS const GdkColor PTR, BYVAL AS gint)
TYPE _GtkColorSelectionClass
  AS GtkBoxClass parent_class
  color_changed AS SUB CDECL(BYVAL AS GtkColorSelection PTR)
  _gtk_reserved1 AS SUB CDECL()
  _gtk_reserved2 AS SUB CDECL()
  _gtk_reserved3 AS SUB CDECL()
  _gtk_reserved4 AS SUB CDECL()
END TYPE
TYPE _GtkColorSelectionDialog
  AS GtkDialog parent_instance
  AS GtkColorSelectionDialogPrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_color_selection_dialog_get_type() AS GType
#DEFINE GTK_TYPE_COLOR_SELECTION_DIALOG (gtk_color_selection_dialog_get_type())
#DEFINE GTK_COLOR_SELECTION_DIALOG(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_COLOR_SELECTION_DIALOG, GtkColorSelectionDialog))
#DEFINE GTK_COLOR_SELECTION_DIALOG_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_COLOR_SELECTION_DIALOG, GtkColorSelectionDialogClass))
#DEFINE GTK_IS_COLOR_SELECTION_DIALOG(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_COLOR_SELECTION_DIALOG))
#DEFINE GTK_IS_CLASS_COLOR_SELECTION_DIALOG(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_COLOR_SELECTION_DIALOG))
#DEFINE GTK_COLOR_SELECTION_DIALOG_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_COLOR_SELECTION_DIALOG, GtkColorSelectionDialogClass))
DECLARE FUNCTION gtk_color_selection_dialog_new(BYVAL AS const gchar PTR) AS GtkWidget PTR
DECLARE FUNCTION gtk_color_selection_dialog_get_color_selection(BYVAL AS GtkColorSelectionDialog PTR) AS GtkWidget PTR
TYPE _GtkColorSelectionDialogClass
  AS GtkDialogClass parent_class
  _gtk_reserved1 AS SUB CDECL()
  _gtk_reserved2 AS SUB CDECL()
  _gtk_reserved3 AS SUB CDECL()
  _gtk_reserved4 AS SUB CDECL()
END TYPE
TYPE _GtkComboBoxAccessible
  AS GtkContainerAccessible parent
  AS GtkComboBoxAccessiblePrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_combo_box_accessible_get_type() AS GType
#DEFINE GTK_TYPE_COMBO_BOX_ACCESSIBLE (gtk_combo_box_accessible_get_type())
#DEFINE GTK_COMBO_BOX_ACCESSIBLE(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_COMBO_BOX_ACCESSIBLE, GtkComboBoxAccessible))
#DEFINE GTK_COMBO_BOX_ACCESSIBLE_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_COMBO_BOX_ACCESSIBLE, GtkComboBoxAccessibleClass))
#DEFINE GTK_IS_COMBO_BOX_ACCESSIBLE(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_COMBO_BOX_ACCESSIBLE))
#DEFINE GTK_IS_CLASS_COMBO_BOX_ACCESSIBLE(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_COMBO_BOX_ACCESSIBLE))
#DEFINE GTK_COMBO_BOX_ACCESSIBLE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_COMBO_BOX_ACCESSIBLE, GtkComboBoxAccessibleClass))
TYPE _GtkComboBoxAccessibleClass
  AS GtkContainerAccessibleClass parent_class
END TYPE
TYPE _GtkComboBoxText
  AS GtkComboBox parent_instance
  AS GtkComboBoxTextPrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_combo_box_text_get_type() AS GType
#DEFINE GTK_TYPE_COMBO_BOX_TEXT (gtk_combo_box_text_get_type())
#DEFINE GTK_COMBO_BOX_TEXT(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_COMBO_BOX_TEXT, GtkComboBoxText))
#DEFINE GTK_COMBO_BOX_TEXT_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_COMBO_BOX_TEXT, GtkComboBoxTextClass))
#DEFINE GTK_IS_COMBO_BOX_TEXT(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_COMBO_BOX_TEXT))
#DEFINE GTK_IS_CLASS_COMBO_BOX_TEXT(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_COMBO_BOX_TEXT))
#DEFINE GTK_COMBO_BOX_TEXT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_COMBO_BOX_TEXT, GtkComboBoxTextClass))
DECLARE FUNCTION gtk_combo_box_text_new() AS GtkWidget PTR
DECLARE FUNCTION gtk_combo_box_text_new_with_entry() AS GtkWidget PTR
DECLARE SUB gtk_combo_box_text_append(BYVAL AS GtkComboBoxText PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR)
DECLARE SUB gtk_combo_box_text_append_text(BYVAL AS GtkComboBoxText PTR, BYVAL AS const gchar PTR)
DECLARE FUNCTION gtk_combo_box_text_get_active_text(BYVAL AS GtkComboBoxText PTR) AS gchar PTR
DECLARE SUB gtk_combo_box_text_insert(BYVAL AS GtkComboBoxText PTR, BYVAL AS gint, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR)
DECLARE SUB gtk_combo_box_text_insert_text(BYVAL AS GtkComboBoxText PTR, BYVAL AS gint, BYVAL AS const gchar PTR)
DECLARE SUB gtk_combo_box_text_prepend(BYVAL AS GtkComboBoxText PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR)
DECLARE SUB gtk_combo_box_text_prepend_text(BYVAL AS GtkComboBoxText PTR, BYVAL AS const gchar PTR)
DECLARE SUB gtk_combo_box_text_remove(BYVAL AS GtkComboBoxText PTR, BYVAL AS gint)
DECLARE SUB gtk_combo_box_text_remove_all(BYVAL AS GtkComboBoxText PTR)
TYPE _GtkComboBoxTextClass
  AS GtkComboBoxClass parent_class
  _gtk_reserved1 AS SUB CDECL()
  _gtk_reserved2 AS SUB CDECL()
  _gtk_reserved3 AS SUB CDECL()
  _gtk_reserved4 AS SUB CDECL()
END TYPE
TYPE _GtkContainerCellAccessible
  AS GtkCellAccessible parent
  AS GtkContainerCellAccessiblePrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_container_cell_accessible_get_type() AS GType
#DEFINE GTK_TYPE_CONTAINER_CELL_ACCESSIBLE (gtk_container_cell_accessible_get_type())
#DEFINE GTK_CONTAINER_CELL_ACCESSIBLE(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_CONTAINER_CELL_ACCESSIBLE, GtkContainerCellAccessible))
#DEFINE GTK_CONTAINER_CELL_ACCESSIBLE_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_CONTAINER_CELL_ACCESSIBLE, GtkContainerCellAccessibleClass))
#DEFINE GTK_IS_CONTAINER_CELL_ACCESSIBLE(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_CONTAINER_CELL_ACCESSIBLE))
#DEFINE GTK_IS_CLASS_CONTAINER_CELL_ACCESSIBLE(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_CONTAINER_CELL_ACCESSIBLE))
#DEFINE GTK_CONTAINER_CELL_ACCESSIBLE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_CONTAINER_CELL_ACCESSIBLE, GtkContainerCellAccessibleClass))
DECLARE FUNCTION gtk_container_cell_accessible_new() AS GtkContainerCellAccessible PTR
DECLARE SUB gtk_container_cell_accessible_add_child(BYVAL AS GtkContainerCellAccessible PTR, BYVAL AS GtkCellAccessible PTR)
DECLARE FUNCTION gtk_container_cell_accessible_get_children(BYVAL AS GtkContainerCellAccessible PTR) AS GList PTR
DECLARE SUB gtk_container_cell_accessible_remove_child(BYVAL AS GtkContainerCellAccessible PTR, BYVAL AS GtkCellAccessible PTR)
TYPE _GtkContainerCellAccessibleClass
  AS GtkCellAccessibleClass parent_class
END TYPE
TYPE _GtkCssProvider
  AS GObject parent_instance
  AS GtkCssProviderPrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_corner_type_get_type() AS GType
#DEFINE GTK_TYPE_CORNER_TYPE (gtk_corner_type_get_type())
DECLARE FUNCTION gtk_css_provider_get_type() AS GType
#DEFINE GTK_TYPE_CSS_PROVIDER (gtk_css_provider_get_type())
#DEFINE GTK_CSS_PROVIDER(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_CSS_PROVIDER, GtkCssProvider))
#DEFINE GTK_CSS_PROVIDER_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_CSS_PROVIDER, GtkCssProviderClass))
#DEFINE GTK_IS_CSS_PROVIDER(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_CSS_PROVIDER))
#DEFINE GTK_IS_CLASS_CSS_PROVIDER(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_CSS_PROVIDER))
#DEFINE GTK_CSS_PROVIDER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_CSS_PROVIDER, GtkCssProviderClass))
DECLARE FUNCTION gtk_css_provider_new() AS GtkCssProvider PTR
DECLARE FUNCTION gtk_css_provider_get_default() AS GtkCssProvider PTR
DECLARE FUNCTION gtk_css_provider_get_named(BYVAL AS const gchar PTR, BYVAL AS const gchar PTR) AS GtkCssProvider PTR
DECLARE FUNCTION gtk_css_provider_load_from_data(BYVAL AS GtkCssProvider PTR, BYVAL AS const gchar PTR, BYVAL AS gssize, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION gtk_css_provider_load_from_file(BYVAL AS GtkCssProvider PTR, BYVAL AS GFile PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION gtk_css_provider_load_from_path(BYVAL AS GtkCssProvider PTR, BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE SUB gtk_css_provider_load_from_resource(BYVAL AS GtkCssProvider PTR, BYVAL AS const gchar PTR)
DECLARE FUNCTION gtk_css_provider_to_string(BYVAL AS GtkCssProvider PTR) AS char PTR
TYPE _GtkCssProviderClass
  AS GObjectClass parent_class
  parsing_error AS SUB CDECL(BYVAL AS GtkCssProvider PTR, BYVAL AS GtkCssSection PTR, BYVAL AS const GError PTR)
  _gtk_reserved2 AS SUB CDECL()
  _gtk_reserved3 AS SUB CDECL()
  _gtk_reserved4 AS SUB CDECL()
END TYPE
DECLARE FUNCTION gtk_css_provider_error_get_type() AS GType
#DEFINE GTK_TYPE_CSS_PROVIDER_ERROR (gtk_css_provider_error_get_type())
DECLARE FUNCTION gtk_css_section_get_end_line(BYVAL AS const GtkCssSection PTR) AS guint
DECLARE FUNCTION gtk_css_section_get_end_position(BYVAL AS const GtkCssSection PTR) AS guint
DECLARE FUNCTION gtk_css_section_get_file(BYVAL AS const GtkCssSection PTR) AS GFile PTR
DECLARE FUNCTION gtk_css_section_get_parent(BYVAL AS const GtkCssSection PTR) AS GtkCssSection PTR
DECLARE FUNCTION gtk_css_section_get_section_type(BYVAL AS const GtkCssSection PTR) AS GtkCssSectionType
DECLARE FUNCTION gtk_css_section_get_start_line(BYVAL AS const GtkCssSection PTR) AS guint
DECLARE FUNCTION gtk_css_section_get_start_position(BYVAL AS const GtkCssSection PTR) AS guint
DECLARE FUNCTION gtk_css_section_ref(BYVAL AS GtkCssSection PTR) AS GtkCssSection PTR
DECLARE SUB gtk_css_section_unref(BYVAL AS GtkCssSection PTR)
DECLARE FUNCTION gtk_css_section_type_get_type() AS GType
#DEFINE GTK_TYPE_CSS_SECTION_TYPE (gtk_css_section_type_get_type())
DECLARE FUNCTION gtk_delete_type_get_type() AS GType
#DEFINE GTK_TYPE_DELETE_TYPE (gtk_delete_type_get_type())
TYPE _GtkDrawingArea
  AS GtkWidget widget
  AS gpointer dummy
END TYPE
DECLARE FUNCTION gtk_direction_type_get_type() AS GType
#DEFINE GTK_TYPE_DIRECTION_TYPE (gtk_direction_type_get_type())
DECLARE FUNCTION gtk_drag_result_get_type() AS GType
#DEFINE GTK_TYPE_DRAG_RESULT (gtk_drag_result_get_type())
DECLARE FUNCTION gtk_drawing_area_get_type() AS GType
#DEFINE GTK_TYPE_DRAWING_AREA (gtk_drawing_area_get_type())
#DEFINE GTK_DRAWING_AREA(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_DRAWING_AREA, GtkDrawingArea))
#DEFINE GTK_DRAWING_AREA_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_DRAWING_AREA, GtkDrawingAreaClass))
#DEFINE GTK_IS_DRAWING_AREA(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_DRAWING_AREA))
#DEFINE GTK_IS_CLASS_DRAWING_AREA(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_DRAWING_AREA))
#DEFINE GTK_DRAWING_AREA_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_DRAWING_AREA, GtkDrawingAreaClass))
DECLARE FUNCTION gtk_drawing_area_new() AS GtkWidget PTR
TYPE _GtkDrawingAreaClass
  AS GtkWidgetClass parent_class
  _gtk_reserved1 AS SUB CDECL()
  _gtk_reserved2 AS SUB CDECL()
  _gtk_reserved3 AS SUB CDECL()
  _gtk_reserved4 AS SUB CDECL()
END TYPE
DECLARE FUNCTION gtk_editable_get_type() AS GType
#DEFINE GTK_TYPE_EDITABLE (gtk_editable_get_type())
#DEFINE GTK_EDITABLE(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_EDITABLE, GtkEditable))
#DEFINE GTK_EDITABLE_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_EDITABLE, GtkEditableInterface))
#DEFINE GTK_IS_EDITABLE(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_EDITABLE))
#DEFINE GTK_EDITABLE_GET_IFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE((obj), GTK_TYPE_EDITABLE, GtkEditableInterface))
DECLARE SUB gtk_editable_copy_clipboard(BYVAL AS GtkEditable PTR)
DECLARE SUB gtk_editable_cut_clipboard(BYVAL AS GtkEditable PTR)
DECLARE SUB gtk_editable_delete_selection(BYVAL AS GtkEditable PTR)
DECLARE SUB gtk_editable_delete_text(BYVAL AS GtkEditable PTR, BYVAL AS gint, BYVAL AS gint)
DECLARE FUNCTION gtk_editable_get_chars(BYVAL AS GtkEditable PTR, BYVAL AS gint, BYVAL AS gint) AS gchar PTR
DECLARE FUNCTION gtk_editable_get_editable(BYVAL AS GtkEditable PTR) AS gboolean
DECLARE FUNCTION gtk_editable_get_position(BYVAL AS GtkEditable PTR) AS gint
DECLARE FUNCTION gtk_editable_get_selection_bounds(BYVAL AS GtkEditable PTR, BYVAL AS gint PTR, BYVAL AS gint PTR) AS gboolean
DECLARE SUB gtk_editable_insert_text(BYVAL AS GtkEditable PTR, BYVAL AS const gchar PTR, BYVAL AS gint, BYVAL AS gint PTR)
DECLARE SUB gtk_editable_paste_clipboard(BYVAL AS GtkEditable PTR)
DECLARE SUB gtk_editable_select_region(BYVAL AS GtkEditable PTR, BYVAL AS gint, BYVAL AS gint)
DECLARE SUB gtk_editable_set_editable(BYVAL AS GtkEditable PTR, BYVAL AS gboolean)
DECLARE SUB gtk_editable_set_position(BYVAL AS GtkEditable PTR, BYVAL AS gint)
TYPE _GtkEditableInterface
  AS GTypeInterface base_iface
  insert_text AS SUB CDECL(BYVAL AS GtkEditable PTR, BYVAL AS const gchar PTR, BYVAL AS gint, BYVAL AS gint PTR)
  delete_text AS SUB CDECL(BYVAL AS GtkEditable PTR, BYVAL AS gint, BYVAL AS gint)
  changed AS SUB CDECL(BYVAL AS GtkEditable PTR)
  do_insert_text AS SUB CDECL(BYVAL AS GtkEditable PTR, BYVAL AS const gchar PTR, BYVAL AS gint, BYVAL AS gint PTR)
  do_delete_text AS SUB CDECL(BYVAL AS GtkEditable PTR, BYVAL AS gint, BYVAL AS gint)
  get_chars AS FUNCTION CDECL(BYVAL AS GtkEditable PTR, BYVAL AS gint, BYVAL AS gint) AS gchar PTR
  set_selection_bounds AS SUB CDECL(BYVAL AS GtkEditable PTR, BYVAL AS gint, BYVAL AS gint)
  get_selection_bounds AS FUNCTION CDECL(BYVAL AS GtkEditable PTR, BYVAL AS gint PTR, BYVAL AS gint PTR) AS gboolean
  set_position AS SUB CDECL(BYVAL AS GtkEditable PTR, BYVAL AS gint)
  get_position AS FUNCTION CDECL(BYVAL AS GtkEditable PTR) AS gint
END TYPE
TYPE _GtkEntry
  AS GtkWidget parent_instance
  AS GtkEntryPrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_entry_get_type() AS GType
#DEFINE GTK_TYPE_ENTRY (gtk_entry_get_type())
#DEFINE GTK_ENTRY(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_ENTRY, GtkEntry))
#DEFINE GTK_ENTRY_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_ENTRY, GtkEntryClass))
#DEFINE GTK_IS_ENTRY(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_ENTRY))
#DEFINE GTK_IS_CLASS_ENTRY(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_ENTRY))
#DEFINE GTK_ENTRY_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_ENTRY, GtkEntryClass))
DECLARE FUNCTION gtk_entry_new() AS GtkWidget PTR
DECLARE FUNCTION gtk_entry_new_with_buffer(BYVAL AS GtkEntryBuffer PTR) AS GtkWidget PTR
DECLARE FUNCTION gtk_entry_get_activates_default(BYVAL AS GtkEntry PTR) AS gboolean
DECLARE FUNCTION gtk_entry_get_alignment(BYVAL AS GtkEntry PTR) AS gfloat
DECLARE FUNCTION gtk_entry_get_attributes(BYVAL AS GtkEntry PTR) AS PangoAttrList PTR
DECLARE FUNCTION gtk_entry_get_buffer(BYVAL AS GtkEntry PTR) AS GtkEntryBuffer PTR
DECLARE FUNCTION gtk_entry_get_completion(BYVAL AS GtkEntry PTR) AS GtkEntryCompletion PTR
DECLARE FUNCTION gtk_entry_get_current_icon_drag_source(BYVAL AS GtkEntry PTR) AS gint
DECLARE FUNCTION gtk_entry_get_cursor_hadjustment(BYVAL AS GtkEntry PTR) AS GtkAdjustment PTR
DECLARE FUNCTION gtk_entry_get_has_frame(BYVAL AS GtkEntry PTR) AS gboolean
DECLARE FUNCTION gtk_entry_get_icon_activatable(BYVAL AS GtkEntry PTR, BYVAL AS GtkEntryIconPosition) AS gboolean
DECLARE SUB gtk_entry_get_icon_area(BYVAL AS GtkEntry PTR, BYVAL AS GtkEntryIconPosition, BYVAL AS GdkRectangle PTR)
DECLARE FUNCTION gtk_entry_get_icon_at_pos(BYVAL AS GtkEntry PTR, BYVAL AS gint, BYVAL AS gint) AS gint
DECLARE FUNCTION gtk_entry_get_icon_gicon(BYVAL AS GtkEntry PTR, BYVAL AS GtkEntryIconPosition) AS GIcon PTR
DECLARE FUNCTION gtk_entry_get_icon_name(BYVAL AS GtkEntry PTR, BYVAL AS GtkEntryIconPosition) AS const gchar PTR
DECLARE FUNCTION gtk_entry_get_icon_pixbuf(BYVAL AS GtkEntry PTR, BYVAL AS GtkEntryIconPosition) AS GdkPixbuf PTR
DECLARE FUNCTION gtk_entry_get_icon_sensitive(BYVAL AS GtkEntry PTR, BYVAL AS GtkEntryIconPosition) AS gboolean
DECLARE FUNCTION gtk_entry_get_icon_stock(BYVAL AS GtkEntry PTR, BYVAL AS GtkEntryIconPosition) AS const gchar PTR
DECLARE FUNCTION gtk_entry_get_icon_storage_type(BYVAL AS GtkEntry PTR, BYVAL AS GtkEntryIconPosition) AS GtkImageType
DECLARE FUNCTION gtk_entry_get_icon_tooltip_markup(BYVAL AS GtkEntry PTR, BYVAL AS GtkEntryIconPosition) AS gchar PTR
DECLARE FUNCTION gtk_entry_get_icon_tooltip_text(BYVAL AS GtkEntry PTR, BYVAL AS GtkEntryIconPosition) AS gchar PTR
DECLARE FUNCTION gtk_entry_get_inner_border(BYVAL AS GtkEntry PTR) AS const GtkBorder PTR
DECLARE FUNCTION gtk_entry_get_input_hints(BYVAL AS GtkEntry PTR) AS GtkInputHints
DECLARE FUNCTION gtk_entry_get_input_purpose(BYVAL AS GtkEntry PTR) AS GtkInputPurpose
DECLARE FUNCTION gtk_entry_get_invisible_char(BYVAL AS GtkEntry PTR) AS gunichar
DECLARE FUNCTION gtk_entry_get_layout(BYVAL AS GtkEntry PTR) AS PangoLayout PTR
DECLARE SUB gtk_entry_get_layout_offsets(BYVAL AS GtkEntry PTR, BYVAL AS gint PTR, BYVAL AS gint PTR)
DECLARE FUNCTION gtk_entry_get_max_length(BYVAL AS GtkEntry PTR) AS gint
DECLARE FUNCTION gtk_entry_get_max_width_chars(BYVAL AS GtkEntry PTR) AS gint
DECLARE FUNCTION gtk_entry_get_overwrite_mode(BYVAL AS GtkEntry PTR) AS gboolean
DECLARE FUNCTION gtk_entry_get_placeholder_text(BYVAL AS GtkEntry PTR) AS const gchar PTR
DECLARE FUNCTION gtk_entry_get_progress_fraction(BYVAL AS GtkEntry PTR) AS gdouble
DECLARE FUNCTION gtk_entry_get_progress_pulse_step(BYVAL AS GtkEntry PTR) AS gdouble
DECLARE FUNCTION gtk_entry_get_tabs(BYVAL AS GtkEntry PTR) AS PangoTabArray PTR
DECLARE FUNCTION gtk_entry_get_text(BYVAL AS GtkEntry PTR) AS const gchar PTR
DECLARE SUB gtk_entry_get_text_area(BYVAL AS GtkEntry PTR, BYVAL AS GdkRectangle PTR)
DECLARE FUNCTION gtk_entry_get_text_length(BYVAL AS GtkEntry PTR) AS guint16
DECLARE FUNCTION gtk_entry_get_visibility(BYVAL AS GtkEntry PTR) AS gboolean
DECLARE FUNCTION gtk_entry_get_width_chars(BYVAL AS GtkEntry PTR) AS gint
DECLARE SUB gtk_entry_grab_focus_without_selecting(BYVAL AS GtkEntry PTR)
DECLARE FUNCTION gtk_entry_im_context_filter_keypress(BYVAL AS GtkEntry PTR, BYVAL AS GdkEventKey PTR) AS gboolean
DECLARE FUNCTION gtk_entry_layout_index_to_text_index(BYVAL AS GtkEntry PTR, BYVAL AS gint) AS gint
DECLARE SUB gtk_entry_progress_pulse(BYVAL AS GtkEntry PTR)
DECLARE SUB gtk_entry_reset_im_context(BYVAL AS GtkEntry PTR)
DECLARE SUB gtk_entry_set_activates_default(BYVAL AS GtkEntry PTR, BYVAL AS gboolean)
DECLARE SUB gtk_entry_set_alignment(BYVAL AS GtkEntry PTR, BYVAL AS gfloat)
DECLARE SUB gtk_entry_set_attributes(BYVAL AS GtkEntry PTR, BYVAL AS PangoAttrList PTR)
DECLARE SUB gtk_entry_set_buffer(BYVAL AS GtkEntry PTR, BYVAL AS GtkEntryBuffer PTR)
DECLARE SUB gtk_entry_set_completion(BYVAL AS GtkEntry PTR, BYVAL AS GtkEntryCompletion PTR)
DECLARE SUB gtk_entry_set_cursor_hadjustment(BYVAL AS GtkEntry PTR, BYVAL AS GtkAdjustment PTR)
DECLARE SUB gtk_entry_set_has_frame(BYVAL AS GtkEntry PTR, BYVAL AS gboolean)
DECLARE SUB gtk_entry_set_icon_activatable(BYVAL AS GtkEntry PTR, BYVAL AS GtkEntryIconPosition, BYVAL AS gboolean)
DECLARE SUB gtk_entry_set_icon_drag_source(BYVAL AS GtkEntry PTR, BYVAL AS GtkEntryIconPosition, BYVAL AS GtkTargetList PTR, BYVAL AS GdkDragAction)
DECLARE SUB gtk_entry_set_icon_from_gicon(BYVAL AS GtkEntry PTR, BYVAL AS GtkEntryIconPosition, BYVAL AS GIcon PTR)
DECLARE SUB gtk_entry_set_icon_from_icon_name(BYVAL AS GtkEntry PTR, BYVAL AS GtkEntryIconPosition, BYVAL AS const gchar PTR)
DECLARE SUB gtk_entry_set_icon_from_pixbuf(BYVAL AS GtkEntry PTR, BYVAL AS GtkEntryIconPosition, BYVAL AS GdkPixbuf PTR)
DECLARE SUB gtk_entry_set_icon_from_stock(BYVAL AS GtkEntry PTR, BYVAL AS GtkEntryIconPosition, BYVAL AS const gchar PTR)
DECLARE SUB gtk_entry_set_icon_sensitive(BYVAL AS GtkEntry PTR, BYVAL AS GtkEntryIconPosition, BYVAL AS gboolean)
DECLARE SUB gtk_entry_set_icon_tooltip_markup(BYVAL AS GtkEntry PTR, BYVAL AS GtkEntryIconPosition, BYVAL AS const gchar PTR)
DECLARE SUB gtk_entry_set_icon_tooltip_text(BYVAL AS GtkEntry PTR, BYVAL AS GtkEntryIconPosition, BYVAL AS const gchar PTR)
DECLARE SUB gtk_entry_set_inner_border(BYVAL AS GtkEntry PTR, BYVAL AS const GtkBorder PTR)
DECLARE SUB gtk_entry_set_input_hints(BYVAL AS GtkEntry PTR, BYVAL AS GtkInputHints)
DECLARE SUB gtk_entry_set_input_purpose(BYVAL AS GtkEntry PTR, BYVAL AS GtkInputPurpose)
DECLARE SUB gtk_entry_set_invisible_char(BYVAL AS GtkEntry PTR, BYVAL AS gunichar)
DECLARE SUB gtk_entry_set_max_length(BYVAL AS GtkEntry PTR, BYVAL AS gint)
DECLARE SUB gtk_entry_set_max_width_chars(BYVAL AS GtkEntry PTR, BYVAL AS gint)
DECLARE SUB gtk_entry_set_overwrite_mode(BYVAL AS GtkEntry PTR, BYVAL AS gboolean)
DECLARE SUB gtk_entry_set_placeholder_text(BYVAL AS GtkEntry PTR, BYVAL AS const gchar PTR)
DECLARE SUB gtk_entry_set_progress_fraction(BYVAL AS GtkEntry PTR, BYVAL AS gdouble)
DECLARE SUB gtk_entry_set_progress_pulse_step(BYVAL AS GtkEntry PTR, BYVAL AS gdouble)
DECLARE SUB gtk_entry_set_tabs(BYVAL AS GtkEntry PTR, BYVAL AS PangoTabArray PTR)
DECLARE SUB gtk_entry_set_text(BYVAL AS GtkEntry PTR, BYVAL AS const gchar PTR)
DECLARE SUB gtk_entry_set_visibility(BYVAL AS GtkEntry PTR, BYVAL AS gboolean)
DECLARE SUB gtk_entry_set_width_chars(BYVAL AS GtkEntry PTR, BYVAL AS gint)
DECLARE FUNCTION gtk_entry_text_index_to_layout_index(BYVAL AS GtkEntry PTR, BYVAL AS gint) AS gint
DECLARE SUB gtk_entry_unset_invisible_char(BYVAL AS GtkEntry PTR)
TYPE _GtkEntryAccessible
  AS GtkWidgetAccessible parent
  AS GtkEntryAccessiblePrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_entry_accessible_get_type() AS GType
#DEFINE GTK_TYPE_ENTRY_ACCESSIBLE (gtk_entry_accessible_get_type())
#DEFINE GTK_ENTRY_ACCESSIBLE(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_ENTRY_ACCESSIBLE, GtkEntryAccessible))
#DEFINE GTK_ENTRY_ACCESSIBLE_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_ENTRY_ACCESSIBLE, GtkEntryAccessibleClass))
#DEFINE GTK_IS_ENTRY_ACCESSIBLE(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_ENTRY_ACCESSIBLE))
#DEFINE GTK_IS_CLASS_ENTRY_ACCESSIBLE(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_ENTRY_ACCESSIBLE))
#DEFINE GTK_ENTRY_ACCESSIBLE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_ENTRY_ACCESSIBLE, GtkEntryAccessibleClass))
TYPE _GtkEntryAccessibleClass
  AS GtkWidgetAccessibleClass parent_class
END TYPE
TYPE _GtkEntryBuffer
  AS GObject parent_instance
  AS GtkEntryBufferPrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_entry_buffer_get_type() AS GType
#DEFINE GTK_TYPE_ENTRY_BUFFER (gtk_entry_buffer_get_type())
#DEFINE GTK_ENTRY_BUFFER(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_ENTRY_BUFFER, GtkEntryBuffer))
#DEFINE GTK_ENTRY_BUFFER_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_ENTRY_BUFFER, GtkEntryBufferClass))
#DEFINE GTK_IS_ENTRY_BUFFER(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_ENTRY_BUFFER))
#DEFINE GTK_IS_CLASS_ENTRY_BUFFER(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_ENTRY_BUFFER))
#DEFINE GTK_ENTRY_BUFFER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_ENTRY_BUFFER, GtkEntryBufferClass))
DECLARE FUNCTION gtk_entry_buffer_new(BYVAL AS const gchar PTR, BYVAL AS gint) AS GtkEntryBuffer PTR
DECLARE FUNCTION gtk_entry_buffer_delete_text(BYVAL AS GtkEntryBuffer PTR, BYVAL AS guint, BYVAL AS gint) AS guint
DECLARE SUB gtk_entry_buffer_emit_deleted_text(BYVAL AS GtkEntryBuffer PTR, BYVAL AS guint, BYVAL AS guint)
DECLARE SUB gtk_entry_buffer_emit_inserted_text(BYVAL AS GtkEntryBuffer PTR, BYVAL AS guint, BYVAL AS const gchar PTR, BYVAL AS guint)
DECLARE FUNCTION gtk_entry_buffer_get_bytes(BYVAL AS GtkEntryBuffer PTR) AS gsize
DECLARE FUNCTION gtk_entry_buffer_get_length(BYVAL AS GtkEntryBuffer PTR) AS guint
DECLARE FUNCTION gtk_entry_buffer_get_max_length(BYVAL AS GtkEntryBuffer PTR) AS gint
DECLARE FUNCTION gtk_entry_buffer_get_text(BYVAL AS GtkEntryBuffer PTR) AS const gchar PTR
DECLARE FUNCTION gtk_entry_buffer_insert_text(BYVAL AS GtkEntryBuffer PTR, BYVAL AS guint, BYVAL AS const gchar PTR, BYVAL AS gint) AS guint
DECLARE SUB gtk_entry_buffer_set_max_length(BYVAL AS GtkEntryBuffer PTR, BYVAL AS gint)
DECLARE SUB gtk_entry_buffer_set_text(BYVAL AS GtkEntryBuffer PTR, BYVAL AS const gchar PTR, BYVAL AS gint)
TYPE _GtkEntryBufferClass
  AS GObjectClass parent_class
  inserted_text AS SUB CDECL(BYVAL AS GtkEntryBuffer PTR, BYVAL AS guint, BYVAL AS const gchar PTR, BYVAL AS guint)
  deleted_text AS SUB CDECL(BYVAL AS GtkEntryBuffer PTR, BYVAL AS guint, BYVAL AS guint)
  get_text AS FUNCTION CDECL(BYVAL AS GtkEntryBuffer PTR, BYVAL AS gsize PTR) AS const gchar PTR
  get_length AS FUNCTION CDECL(BYVAL AS GtkEntryBuffer PTR) AS guint
  insert_text AS FUNCTION CDECL(BYVAL AS GtkEntryBuffer PTR, BYVAL AS guint, BYVAL AS const gchar PTR, BYVAL AS guint) AS guint
  delete_text AS FUNCTION CDECL(BYVAL AS GtkEntryBuffer PTR, BYVAL AS guint, BYVAL AS guint) AS guint
  _gtk_reserved1 AS SUB CDECL()
  _gtk_reserved2 AS SUB CDECL()
  _gtk_reserved3 AS SUB CDECL()
  _gtk_reserved4 AS SUB CDECL()
  _gtk_reserved5 AS SUB CDECL()
  _gtk_reserved6 AS SUB CDECL()
  _gtk_reserved7 AS SUB CDECL()
  _gtk_reserved8 AS SUB CDECL()
END TYPE
TYPE _GtkEntryClass
  AS GtkWidgetClass parent_class
  populate_popup AS SUB CDECL(BYVAL AS GtkEntry PTR, BYVAL AS GtkWidget PTR)
  activate AS SUB CDECL(BYVAL AS GtkEntry PTR)
  move_cursor AS SUB CDECL(BYVAL AS GtkEntry PTR, BYVAL AS GtkMovementStep, BYVAL AS gint, BYVAL AS gboolean)
  insert_at_cursor AS SUB CDECL(BYVAL AS GtkEntry PTR, BYVAL AS const gchar PTR)
  delete_from_cursor AS SUB CDECL(BYVAL AS GtkEntry PTR, BYVAL AS GtkDeleteType, BYVAL AS gint)
  backspace AS SUB CDECL(BYVAL AS GtkEntry PTR)
  cut_clipboard AS SUB CDECL(BYVAL AS GtkEntry PTR)
  copy_clipboard AS SUB CDECL(BYVAL AS GtkEntry PTR)
  paste_clipboard AS SUB CDECL(BYVAL AS GtkEntry PTR)
  toggle_overwrite AS SUB CDECL(BYVAL AS GtkEntry PTR)
  get_text_area_size AS SUB CDECL(BYVAL AS GtkEntry PTR, BYVAL AS gint PTR, BYVAL AS gint PTR, BYVAL AS gint PTR, BYVAL AS gint PTR)
  get_frame_size AS SUB CDECL(BYVAL AS GtkEntry PTR, BYVAL AS gint PTR, BYVAL AS gint PTR, BYVAL AS gint PTR, BYVAL AS gint PTR)
  insert_emoji AS SUB CDECL(BYVAL AS GtkEntry PTR)
  _gtk_reserved1 AS SUB CDECL()
  _gtk_reserved2 AS SUB CDECL()
  _gtk_reserved3 AS SUB CDECL()
  _gtk_reserved4 AS SUB CDECL()
  _gtk_reserved5 AS SUB CDECL()
  _gtk_reserved6 AS SUB CDECL()
END TYPE
TYPE _GtkEntryCompletion
  AS GObject parent_instance
  AS GtkEntryCompletionPrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_entry_completion_get_type() AS GType
#DEFINE GTK_TYPE_ENTRY_COMPLETION (gtk_entry_completion_get_type())
#DEFINE GTK_ENTRY_COMPLETION(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_ENTRY_COMPLETION, GtkEntryCompletion))
#DEFINE GTK_ENTRY_COMPLETION_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_ENTRY_COMPLETION, GtkEntryCompletionClass))
#DEFINE GTK_IS_ENTRY_COMPLETION(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_ENTRY_COMPLETION))
#DEFINE GTK_IS_CLASS_ENTRY_COMPLETION(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_ENTRY_COMPLETION))
#DEFINE GTK_ENTRY_COMPLETION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_ENTRY_COMPLETION, GtkEntryCompletionClass))
DECLARE FUNCTION gtk_entry_completion_new() AS GtkEntryCompletion PTR
DECLARE FUNCTION gtk_entry_completion_new_with_area(BYVAL AS GtkCellArea PTR) AS GtkEntryCompletion PTR
DECLARE SUB gtk_entry_completion_complete(BYVAL AS GtkEntryCompletion PTR)
DECLARE FUNCTION gtk_entry_completion_compute_prefix(BYVAL AS GtkEntryCompletion PTR, BYVAL AS const char PTR) AS gchar PTR
DECLARE SUB gtk_entry_completion_delete_action(BYVAL AS GtkEntryCompletion PTR, BYVAL AS gint)
DECLARE FUNCTION gtk_entry_completion_get_completion_prefix(BYVAL AS GtkEntryCompletion PTR) AS const gchar PTR
DECLARE FUNCTION gtk_entry_completion_get_entry(BYVAL AS GtkEntryCompletion PTR) AS GtkWidget PTR
DECLARE FUNCTION gtk_entry_completion_get_inline_completion(BYVAL AS GtkEntryCompletion PTR) AS gboolean
DECLARE FUNCTION gtk_entry_completion_get_inline_selection(BYVAL AS GtkEntryCompletion PTR) AS gboolean
DECLARE FUNCTION gtk_entry_completion_get_minimum_key_length(BYVAL AS GtkEntryCompletion PTR) AS gint
DECLARE FUNCTION gtk_entry_completion_get_model(BYVAL AS GtkEntryCompletion PTR) AS GtkTreeModel PTR
DECLARE FUNCTION gtk_entry_completion_get_popup_completion(BYVAL AS GtkEntryCompletion PTR) AS gboolean
DECLARE FUNCTION gtk_entry_completion_get_popup_set_width(BYVAL AS GtkEntryCompletion PTR) AS gboolean
DECLARE FUNCTION gtk_entry_completion_get_popup_single_match(BYVAL AS GtkEntryCompletion PTR) AS gboolean
DECLARE FUNCTION gtk_entry_completion_get_text_column(BYVAL AS GtkEntryCompletion PTR) AS gint
DECLARE SUB gtk_entry_completion_insert_action_markup(BYVAL AS GtkEntryCompletion PTR, BYVAL AS gint, BYVAL AS const gchar PTR)
DECLARE SUB gtk_entry_completion_insert_action_text(BYVAL AS GtkEntryCompletion PTR, BYVAL AS gint, BYVAL AS const gchar PTR)
DECLARE SUB gtk_entry_completion_insert_prefix(BYVAL AS GtkEntryCompletion PTR)
DECLARE SUB gtk_entry_completion_set_inline_completion(BYVAL AS GtkEntryCompletion PTR, BYVAL AS gboolean)
DECLARE SUB gtk_entry_completion_set_inline_selection(BYVAL AS GtkEntryCompletion PTR, BYVAL AS gboolean)
DECLARE SUB gtk_entry_completion_set_match_func(BYVAL AS GtkEntryCompletion PTR, BYVAL AS GtkEntryCompletionMatchFunc, BYVAL AS gpointer, BYVAL AS GDestroyNotify)
DECLARE SUB gtk_entry_completion_set_minimum_key_length(BYVAL AS GtkEntryCompletion PTR, BYVAL AS gint)
DECLARE SUB gtk_entry_completion_set_model(BYVAL AS GtkEntryCompletion PTR, BYVAL AS GtkTreeModel PTR)
DECLARE SUB gtk_entry_completion_set_popup_completion(BYVAL AS GtkEntryCompletion PTR, BYVAL AS gboolean)
DECLARE SUB gtk_entry_completion_set_popup_set_width(BYVAL AS GtkEntryCompletion PTR, BYVAL AS gboolean)
DECLARE SUB gtk_entry_completion_set_popup_single_match(BYVAL AS GtkEntryCompletion PTR, BYVAL AS gboolean)
DECLARE SUB gtk_entry_completion_set_text_column(BYVAL AS GtkEntryCompletion PTR, BYVAL AS gint)
TYPE _GtkEntryCompletionClass
  AS GObjectClass parent_class
  match_selected AS FUNCTION CDECL(BYVAL AS GtkEntryCompletion PTR, BYVAL AS GtkTreeModel PTR, BYVAL AS GtkTreeIter PTR) AS gboolean
  action_activated AS SUB CDECL(BYVAL AS GtkEntryCompletion PTR, BYVAL AS gint)
  insert_prefix AS FUNCTION CDECL(BYVAL AS GtkEntryCompletion PTR, BYVAL AS const gchar PTR) AS gboolean
  cursor_on_match AS FUNCTION CDECL(BYVAL AS GtkEntryCompletion PTR, BYVAL AS GtkTreeModel PTR, BYVAL AS GtkTreeIter PTR) AS gboolean
  no_matches AS SUB CDECL(BYVAL AS GtkEntryCompletion PTR)
  _gtk_reserved0 AS SUB CDECL()
  _gtk_reserved1 AS SUB CDECL()
  _gtk_reserved2 AS SUB CDECL()
END TYPE
DECLARE FUNCTION gtk_entry_icon_accessible_get_type() AS GType
#DEFINE GTK_TYPE_ENTRY_ICON_ACCESSIBLE (gtk_entry_icon_accessible_get_type())
#DEFINE GTK_ENTRY_ICON_ACCESSIBLE(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_ENTRY_ICON_ACCESSIBLE, GtkEntryIconAccessible))
#DEFINE GTK_ENTRY_ICON_ACCESSIBLE_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_ENTRY_ICON_ACCESSIBLE, Gtk))
#DEFINE GTK_IS_ENTRY_ICON_ACCESSIBLE(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_ENTRY_ICON_ACCESSIBLE))
#DEFINE GTK_IS_CLASS_ENTRY_ICON_ACCESSIBLE(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_ENTRY_ICON_ACCESSIBLE))
#DEFINE GTK_ENTRY_ICON_ACCESSIBLE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_ENTRY_ICON_ACCESSIBLE, Gtk))
DECLARE FUNCTION gtk_entry_icon_position_get_type() AS GType
#DEFINE GTK_TYPE_ENTRY_ICON_POSITION (gtk_entry_icon_position_get_type())
TYPE _GtkEventBox
  AS GtkBin bin
  AS GtkEventBoxPrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_event_box_get_type() AS GType
#DEFINE GTK_TYPE_EVENT_BOX (gtk_event_box_get_type())
#DEFINE GTK_EVENT_BOX(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_EVENT_BOX, GtkEventBox))
#DEFINE GTK_EVENT_BOX_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_EVENT_BOX, GtkEventBoxClass))
#DEFINE GTK_IS_EVENT_BOX(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_EVENT_BOX))
#DEFINE GTK_IS_CLASS_EVENT_BOX(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_EVENT_BOX))
#DEFINE GTK_EVENT_BOX_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_EVENT_BOX, GtkEventBoxClass))
DECLARE FUNCTION gtk_event_box_new() AS GtkWidget PTR
DECLARE FUNCTION gtk_event_box_get_above_child(BYVAL AS GtkEventBox PTR) AS gboolean
DECLARE FUNCTION gtk_event_box_get_visible_window(BYVAL AS GtkEventBox PTR) AS gboolean
DECLARE SUB gtk_event_box_set_above_child(BYVAL AS GtkEventBox PTR, BYVAL AS gboolean)
DECLARE SUB gtk_event_box_set_visible_window(BYVAL AS GtkEventBox PTR, BYVAL AS gboolean)
TYPE _GtkEventBoxClass
  AS GtkBinClass parent_class
  _gtk_reserved1 AS SUB CDECL()
  _gtk_reserved2 AS SUB CDECL()
  _gtk_reserved3 AS SUB CDECL()
  _gtk_reserved4 AS SUB CDECL()
END TYPE
DECLARE FUNCTION gtk_event_controller_get_type() AS GType
#DEFINE GTK_TYPE_EVENT_CONTROLLER (gtk_event_controller_get_type())
#DEFINE GTK_EVENT_CONTROLLER(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_EVENT_CONTROLLER, GtkEventController))
#DEFINE GTK_EVENT_CONTROLLER_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_EVENT_CONTROLLER, GtkEventControllerClass))
#DEFINE GTK_IS_EVENT_CONTROLLER(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_EVENT_CONTROLLER))
#DEFINE GTK_IS_CLASS_EVENT_CONTROLLER(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_EVENT_CONTROLLER))
#DEFINE GTK_EVENT_CONTROLLER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_EVENT_CONTROLLER, GtkEventControllerClass))
DECLARE FUNCTION gtk_event_controller_get_propagation_phase(BYVAL AS GtkEventController PTR) AS GtkPropagationPhase
DECLARE FUNCTION gtk_event_controller_get_widget(BYVAL AS GtkEventController PTR) AS GtkWidget PTR
DECLARE FUNCTION gtk_event_controller_handle_event(BYVAL AS GtkEventController PTR, BYVAL AS const GdkEvent PTR) AS gboolean
DECLARE SUB gtk_event_controller_reset(BYVAL AS GtkEventController PTR)
DECLARE SUB gtk_event_controller_set_propagation_phase(BYVAL AS GtkEventController PTR, BYVAL AS GtkPropagationPhase)
DECLARE FUNCTION gtk_event_controller_key_get_type() AS GType
#DEFINE GTK_TYPE_EVENT_CONTROLLER_KEY (gtk_event_controller_key_get_type())
#DEFINE GTK_EVENT_CONTROLLER_KEY(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_EVENT_CONTROLLER_KEY, GtkEventControllerKey))
#DEFINE GTK_EVENT_CONTROLLER_KEY_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_EVENT_CONTROLLER_KEY, GtkEventControllerKeyClass))
#DEFINE GTK_IS_EVENT_CONTROLLER_KEY(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_EVENT_CONTROLLER_KEY))
#DEFINE GTK_IS_CLASS_EVENT_CONTROLLER_KEY(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_EVENT_CONTROLLER_KEY))
#DEFINE GTK_EVENT_CONTROLLER_KEY_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_EVENT_CONTROLLER_KEY, GtkEventControllerKeyClass))
DECLARE FUNCTION gtk_event_controller_key_new(BYVAL AS GtkWidget PTR) AS GtkEventController PTR
DECLARE FUNCTION gtk_event_controller_key_forward(BYVAL AS GtkEventControllerKey PTR, BYVAL AS GtkWidget PTR) AS gboolean
DECLARE FUNCTION gtk_event_controller_key_get_group(BYVAL AS GtkEventControllerKey PTR) AS guint
DECLARE FUNCTION gtk_event_controller_key_get_im_context(BYVAL AS GtkEventControllerKey PTR) AS GtkIMContext PTR
DECLARE SUB gtk_event_controller_key_set_im_context(BYVAL AS GtkEventControllerKey PTR, BYVAL AS GtkIMContext PTR)
DECLARE FUNCTION gtk_event_controller_motion_get_type() AS GType
#DEFINE GTK_TYPE_EVENT_CONTROLLER_MOTION (gtk_event_controller_motion_get_type())
#DEFINE GTK_EVENT_CONTROLLER_MOTION(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_EVENT_CONTROLLER_MOTION, GtkEventControllerMotion))
#DEFINE GTK_EVENT_CONTROLLER_MOTION_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_EVENT_CONTROLLER_MOTION, GtkEventControllerMotionClass))
#DEFINE GTK_IS_EVENT_CONTROLLER_MOTION(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_EVENT_CONTROLLER_MOTION))
#DEFINE GTK_IS_CLASS_EVENT_CONTROLLER_MOTION(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_EVENT_CONTROLLER_MOTION))
#DEFINE GTK_EVENT_CONTROLLER_MOTION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_EVENT_CONTROLLER_MOTION, GtkEventControllerMotionClass))
DECLARE FUNCTION gtk_event_controller_motion_new(BYVAL AS GtkWidget PTR) AS GtkEventController PTR
DECLARE FUNCTION gtk_event_controller_scroll_get_type() AS GType
#DEFINE GTK_TYPE_EVENT_CONTROLLER_SCROLL (gtk_event_controller_scroll_get_type())
#DEFINE GTK_EVENT_CONTROLLER_SCROLL(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_EVENT_CONTROLLER_SCROLL, GtkEventControllerScroll))
#DEFINE GTK_EVENT_CONTROLLER_SCROLL_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_EVENT_CONTROLLER_SCROLL, GtkEventControllerScrollClass))
#DEFINE GTK_IS_EVENT_CONTROLLER_SCROLL(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_EVENT_CONTROLLER_SCROLL))
#DEFINE GTK_IS_CLASS_EVENT_CONTROLLER_SCROLL(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_EVENT_CONTROLLER_SCROLL))
#DEFINE GTK_EVENT_CONTROLLER_SCROLL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_EVENT_CONTROLLER_SCROLL, GtkEventControllerScrollClass))
DECLARE FUNCTION gtk_event_controller_scroll_new(BYVAL AS GtkWidget PTR, BYVAL AS GtkEventControllerScrollFlags) AS GtkEventController PTR
DECLARE FUNCTION gtk_event_controller_scroll_get_flags(BYVAL AS GtkEventControllerScroll PTR) AS GtkEventControllerScrollFlags
DECLARE SUB gtk_event_controller_scroll_set_flags(BYVAL AS GtkEventControllerScroll PTR, BYVAL AS GtkEventControllerScrollFlags)
TYPE _GtkExpander
  AS GtkBin bin
  AS GtkExpanderPrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_event_sequence_state_get_type() AS GType
#DEFINE GTK_TYPE_EVENT_SEQUENCE_STATE (gtk_event_sequence_state_get_type())
DECLARE FUNCTION gtk_expander_get_type() AS GType
#DEFINE GTK_TYPE_EXPANDER (gtk_expander_get_type())
#DEFINE GTK_EXPANDER(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_EXPANDER, GtkExpander))
#DEFINE GTK_EXPANDER_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_EXPANDER, GtkExpanderClass))
#DEFINE GTK_IS_EXPANDER(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_EXPANDER))
#DEFINE GTK_IS_CLASS_EXPANDER(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_EXPANDER))
#DEFINE GTK_EXPANDER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_EXPANDER, GtkExpanderClass))
DECLARE FUNCTION gtk_expander_new(BYVAL AS const gchar PTR) AS GtkWidget PTR
DECLARE FUNCTION gtk_expander_new_with_mnemonic(BYVAL AS const gchar PTR) AS GtkWidget PTR
DECLARE FUNCTION gtk_expander_get_expanded(BYVAL AS GtkExpander PTR) AS gboolean
DECLARE FUNCTION gtk_expander_get_label(BYVAL AS GtkExpander PTR) AS const gchar PTR
DECLARE FUNCTION gtk_expander_get_label_fill(BYVAL AS GtkExpander PTR) AS gboolean
DECLARE FUNCTION gtk_expander_get_label_widget(BYVAL AS GtkExpander PTR) AS GtkWidget PTR
DECLARE FUNCTION gtk_expander_get_resize_toplevel(BYVAL AS GtkExpander PTR) AS gboolean
DECLARE FUNCTION gtk_expander_get_spacing(BYVAL AS GtkExpander PTR) AS gint
DECLARE FUNCTION gtk_expander_get_use_markup(BYVAL AS GtkExpander PTR) AS gboolean
DECLARE FUNCTION gtk_expander_get_use_underline(BYVAL AS GtkExpander PTR) AS gboolean
DECLARE SUB gtk_expander_set_expanded(BYVAL AS GtkExpander PTR, BYVAL AS gboolean)
DECLARE SUB gtk_expander_set_label(BYVAL AS GtkExpander PTR, BYVAL AS const gchar PTR)
DECLARE SUB gtk_expander_set_label_fill(BYVAL AS GtkExpander PTR, BYVAL AS gboolean)
DECLARE SUB gtk_expander_set_label_widget(BYVAL AS GtkExpander PTR, BYVAL AS GtkWidget PTR)
DECLARE SUB gtk_expander_set_resize_toplevel(BYVAL AS GtkExpander PTR, BYVAL AS gboolean)
DECLARE SUB gtk_expander_set_spacing(BYVAL AS GtkExpander PTR, BYVAL AS gint)
DECLARE SUB gtk_expander_set_use_markup(BYVAL AS GtkExpander PTR, BYVAL AS gboolean)
DECLARE SUB gtk_expander_set_use_underline(BYVAL AS GtkExpander PTR, BYVAL AS gboolean)
TYPE _GtkExpanderAccessible
  AS GtkContainerAccessible parent
  AS GtkExpanderAccessiblePrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_expander_accessible_get_type() AS GType
#DEFINE GTK_TYPE_EXPANDER_ACCESSIBLE (gtk_expander_accessible_get_type())
#DEFINE GTK_EXPANDER_ACCESSIBLE(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_EXPANDER_ACCESSIBLE, GtkExpanderAccessible))
#DEFINE GTK_EXPANDER_ACCESSIBLE_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_EXPANDER_ACCESSIBLE, GtkExpanderAccessibleClass))
#DEFINE GTK_IS_EXPANDER_ACCESSIBLE(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_EXPANDER_ACCESSIBLE))
#DEFINE GTK_IS_CLASS_EXPANDER_ACCESSIBLE(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_EXPANDER_ACCESSIBLE))
#DEFINE GTK_EXPANDER_ACCESSIBLE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_EXPANDER_ACCESSIBLE, GtkExpanderAccessibleClass))
TYPE _GtkExpanderAccessibleClass
  AS GtkContainerAccessibleClass parent_class
END TYPE
TYPE _GtkExpanderClass
  AS GtkBinClass parent_class
  activate AS SUB CDECL(BYVAL AS GtkExpander PTR)
  _gtk_reserved1 AS SUB CDECL()
  _gtk_reserved2 AS SUB CDECL()
  _gtk_reserved3 AS SUB CDECL()
  _gtk_reserved4 AS SUB CDECL()
END TYPE
DECLARE FUNCTION gtk_expander_style_get_type() AS GType
#DEFINE GTK_TYPE_EXPANDER_STYLE (gtk_expander_style_get_type())
DECLARE FUNCTION gtk_file_chooser_get_type() AS GType
#DEFINE GTK_TYPE_FILE_CHOOSER (gtk_file_chooser_get_type())
#DEFINE GTK_FILE_CHOOSER(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_FILE_CHOOSER, GtkFileChooser))
#DEFINE GTK_FILE_CHOOSER_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_FILE_CHOOSER, Gtk))
#DEFINE GTK_IS_FILE_CHOOSER(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_FILE_CHOOSER))
#DEFINE GTK_FILE_CHOOSER_GET_IFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE((obj), GTK_TYPE_FILE_CHOOSER, Gtk))
DECLARE SUB gtk_file_chooser_add_choice(BYVAL AS GtkFileChooser PTR, BYVAL AS const char PTR, BYVAL AS const char PTR, BYVAL AS const char PTR PTR, BYVAL AS const char PTR PTR)
DECLARE SUB gtk_file_chooser_add_filter(BYVAL AS GtkFileChooser PTR, BYVAL AS GtkFileFilter PTR)
DECLARE FUNCTION gtk_file_chooser_add_shortcut_folder(BYVAL AS GtkFileChooser PTR, BYVAL AS const char PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION gtk_file_chooser_add_shortcut_folder_uri(BYVAL AS GtkFileChooser PTR, BYVAL AS const char PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION gtk_file_chooser_get_action(BYVAL AS GtkFileChooser PTR) AS GtkFileChooserAction
DECLARE FUNCTION gtk_file_chooser_get_choice(BYVAL AS GtkFileChooser PTR, BYVAL AS const char PTR) AS const char PTR
DECLARE FUNCTION gtk_file_chooser_get_create_folders(BYVAL AS GtkFileChooser PTR) AS gboolean
DECLARE FUNCTION gtk_file_chooser_get_current_folder(BYVAL AS GtkFileChooser PTR) AS gchar PTR
DECLARE FUNCTION gtk_file_chooser_get_current_folder_file(BYVAL AS GtkFileChooser PTR) AS GFile PTR
DECLARE FUNCTION gtk_file_chooser_get_current_folder_uri(BYVAL AS GtkFileChooser PTR) AS gchar PTR
DECLARE FUNCTION gtk_file_chooser_get_current_name(BYVAL AS GtkFileChooser PTR) AS gchar PTR
DECLARE FUNCTION gtk_file_chooser_get_do_overwrite_confirmation(BYVAL AS GtkFileChooser PTR) AS gboolean
DECLARE FUNCTION gtk_file_chooser_get_extra_widget(BYVAL AS GtkFileChooser PTR) AS GtkWidget PTR
DECLARE FUNCTION gtk_file_chooser_get_file(BYVAL AS GtkFileChooser PTR) AS GFile PTR
DECLARE FUNCTION gtk_file_chooser_get_filename(BYVAL AS GtkFileChooser PTR) AS gchar PTR
DECLARE FUNCTION gtk_file_chooser_get_filenames(BYVAL AS GtkFileChooser PTR) AS GSList PTR
DECLARE FUNCTION gtk_file_chooser_get_files(BYVAL AS GtkFileChooser PTR) AS GSList PTR
DECLARE FUNCTION gtk_file_chooser_get_filter(BYVAL AS GtkFileChooser PTR) AS GtkFileFilter PTR
DECLARE FUNCTION gtk_file_chooser_get_local_only(BYVAL AS GtkFileChooser PTR) AS gboolean
DECLARE FUNCTION gtk_file_chooser_get_preview_file(BYVAL AS GtkFileChooser PTR) AS GFile PTR
DECLARE FUNCTION gtk_file_chooser_get_preview_filename(BYVAL AS GtkFileChooser PTR) AS char PTR
DECLARE FUNCTION gtk_file_chooser_get_preview_uri(BYVAL AS GtkFileChooser PTR) AS char PTR
DECLARE FUNCTION gtk_file_chooser_get_preview_widget(BYVAL AS GtkFileChooser PTR) AS GtkWidget PTR
DECLARE FUNCTION gtk_file_chooser_get_preview_widget_active(BYVAL AS GtkFileChooser PTR) AS gboolean
DECLARE FUNCTION gtk_file_chooser_get_select_multiple(BYVAL AS GtkFileChooser PTR) AS gboolean
DECLARE FUNCTION gtk_file_chooser_get_show_hidden(BYVAL AS GtkFileChooser PTR) AS gboolean
DECLARE FUNCTION gtk_file_chooser_get_uri(BYVAL AS GtkFileChooser PTR) AS gchar PTR
DECLARE FUNCTION gtk_file_chooser_get_uris(BYVAL AS GtkFileChooser PTR) AS GSList PTR
DECLARE FUNCTION gtk_file_chooser_get_use_preview_label(BYVAL AS GtkFileChooser PTR) AS gboolean
DECLARE FUNCTION gtk_file_chooser_list_filters(BYVAL AS GtkFileChooser PTR) AS GSList PTR
DECLARE FUNCTION gtk_file_chooser_list_shortcut_folder_uris(BYVAL AS GtkFileChooser PTR) AS GSList PTR
DECLARE FUNCTION gtk_file_chooser_list_shortcut_folders(BYVAL AS GtkFileChooser PTR) AS GSList PTR
DECLARE SUB gtk_file_chooser_remove_choice(BYVAL AS GtkFileChooser PTR, BYVAL AS const char PTR)
DECLARE SUB gtk_file_chooser_remove_filter(BYVAL AS GtkFileChooser PTR, BYVAL AS GtkFileFilter PTR)
DECLARE FUNCTION gtk_file_chooser_remove_shortcut_folder(BYVAL AS GtkFileChooser PTR, BYVAL AS const char PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION gtk_file_chooser_remove_shortcut_folder_uri(BYVAL AS GtkFileChooser PTR, BYVAL AS const char PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE SUB gtk_file_chooser_select_all(BYVAL AS GtkFileChooser PTR)
DECLARE FUNCTION gtk_file_chooser_select_file(BYVAL AS GtkFileChooser PTR, BYVAL AS GFile PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION gtk_file_chooser_select_filename(BYVAL AS GtkFileChooser PTR, BYVAL AS const char PTR) AS gboolean
DECLARE FUNCTION gtk_file_chooser_select_uri(BYVAL AS GtkFileChooser PTR, BYVAL AS const char PTR) AS gboolean
DECLARE SUB gtk_file_chooser_set_action(BYVAL AS GtkFileChooser PTR, BYVAL AS GtkFileChooserAction)
DECLARE SUB gtk_file_chooser_set_choice(BYVAL AS GtkFileChooser PTR, BYVAL AS const char PTR, BYVAL AS const char PTR)
DECLARE SUB gtk_file_chooser_set_create_folders(BYVAL AS GtkFileChooser PTR, BYVAL AS gboolean)
DECLARE FUNCTION gtk_file_chooser_set_current_folder(BYVAL AS GtkFileChooser PTR, BYVAL AS const gchar PTR) AS gboolean
DECLARE FUNCTION gtk_file_chooser_set_current_folder_file(BYVAL AS GtkFileChooser PTR, BYVAL AS GFile PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION gtk_file_chooser_set_current_folder_uri(BYVAL AS GtkFileChooser PTR, BYVAL AS const gchar PTR) AS gboolean
DECLARE SUB gtk_file_chooser_set_current_name(BYVAL AS GtkFileChooser PTR, BYVAL AS const gchar PTR)
DECLARE SUB gtk_file_chooser_set_do_overwrite_confirmation(BYVAL AS GtkFileChooser PTR, BYVAL AS gboolean)
DECLARE SUB gtk_file_chooser_set_extra_widget(BYVAL AS GtkFileChooser PTR, BYVAL AS GtkWidget PTR)
DECLARE FUNCTION gtk_file_chooser_set_file(BYVAL AS GtkFileChooser PTR, BYVAL AS GFile PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION gtk_file_chooser_set_filename(BYVAL AS GtkFileChooser PTR, BYVAL AS const char PTR) AS gboolean
DECLARE SUB gtk_file_chooser_set_filter(BYVAL AS GtkFileChooser PTR, BYVAL AS GtkFileFilter PTR)
DECLARE SUB gtk_file_chooser_set_local_only(BYVAL AS GtkFileChooser PTR, BYVAL AS gboolean)
DECLARE SUB gtk_file_chooser_set_preview_widget(BYVAL AS GtkFileChooser PTR, BYVAL AS GtkWidget PTR)
DECLARE SUB gtk_file_chooser_set_preview_widget_active(BYVAL AS GtkFileChooser PTR, BYVAL AS gboolean)
DECLARE SUB gtk_file_chooser_set_select_multiple(BYVAL AS GtkFileChooser PTR, BYVAL AS gboolean)
DECLARE SUB gtk_file_chooser_set_show_hidden(BYVAL AS GtkFileChooser PTR, BYVAL AS gboolean)
DECLARE FUNCTION gtk_file_chooser_set_uri(BYVAL AS GtkFileChooser PTR, BYVAL AS const char PTR) AS gboolean
DECLARE SUB gtk_file_chooser_set_use_preview_label(BYVAL AS GtkFileChooser PTR, BYVAL AS gboolean)
DECLARE SUB gtk_file_chooser_unselect_all(BYVAL AS GtkFileChooser PTR)
DECLARE SUB gtk_file_chooser_unselect_file(BYVAL AS GtkFileChooser PTR, BYVAL AS GFile PTR)
DECLARE SUB gtk_file_chooser_unselect_filename(BYVAL AS GtkFileChooser PTR, BYVAL AS const char PTR)
DECLARE SUB gtk_file_chooser_unselect_uri(BYVAL AS GtkFileChooser PTR, BYVAL AS const char PTR)
TYPE _GtkFileChooserButton
  AS GtkBox parent
  AS GtkFileChooserButtonPrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_file_chooser_action_get_type() AS GType
#DEFINE GTK_TYPE_FILE_CHOOSER_ACTION (gtk_file_chooser_action_get_type())
DECLARE FUNCTION gtk_file_chooser_button_get_type() AS GType
#DEFINE GTK_TYPE_FILE_CHOOSER_BUTTON (gtk_file_chooser_button_get_type())
#DEFINE GTK_FILE_CHOOSER_BUTTON(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_FILE_CHOOSER_BUTTON, GtkFileChooserButton))
#DEFINE GTK_FILE_CHOOSER_BUTTON_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_FILE_CHOOSER_BUTTON, GtkFileChooserButtonClass))
#DEFINE GTK_IS_FILE_CHOOSER_BUTTON(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_FILE_CHOOSER_BUTTON))
#DEFINE GTK_IS_CLASS_FILE_CHOOSER_BUTTON(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_FILE_CHOOSER_BUTTON))
#DEFINE GTK_FILE_CHOOSER_BUTTON_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_FILE_CHOOSER_BUTTON, GtkFileChooserButtonClass))
DECLARE FUNCTION gtk_file_chooser_button_new(BYVAL AS const gchar PTR, BYVAL AS GtkFileChooserAction) AS GtkWidget PTR
DECLARE FUNCTION gtk_file_chooser_button_new_with_dialog(BYVAL AS GtkWidget PTR) AS GtkWidget PTR
DECLARE FUNCTION gtk_file_chooser_button_get_focus_on_click(BYVAL AS GtkFileChooserButton PTR) AS gboolean
DECLARE FUNCTION gtk_file_chooser_button_get_title(BYVAL AS GtkFileChooserButton PTR) AS const gchar PTR
DECLARE FUNCTION gtk_file_chooser_button_get_width_chars(BYVAL AS GtkFileChooserButton PTR) AS gint
DECLARE SUB gtk_file_chooser_button_set_focus_on_click(BYVAL AS GtkFileChooserButton PTR, BYVAL AS gboolean)
DECLARE SUB gtk_file_chooser_button_set_title(BYVAL AS GtkFileChooserButton PTR, BYVAL AS const gchar PTR)
DECLARE SUB gtk_file_chooser_button_set_width_chars(BYVAL AS GtkFileChooserButton PTR, BYVAL AS gint)
TYPE _GtkFileChooserButtonClass
  AS GtkBoxClass parent_class
  file_set AS SUB CDECL(BYVAL AS GtkFileChooserButton PTR)
  __gtk_reserved1 AS SUB CDECL()
  __gtk_reserved2 AS SUB CDECL()
  __gtk_reserved3 AS SUB CDECL()
  __gtk_reserved4 AS SUB CDECL()
END TYPE
TYPE _GtkFileChooserDialog
  AS GtkDialog parent_instance
  AS GtkFileChooserDialogPrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_file_chooser_confirmation_get_type() AS GType
#DEFINE GTK_TYPE_FILE_CHOOSER_CONFIRMATION (gtk_file_chooser_confirmation_get_type())
DECLARE FUNCTION gtk_file_chooser_dialog_get_type() AS GType
#DEFINE GTK_TYPE_FILE_CHOOSER_DIALOG (gtk_file_chooser_dialog_get_type())
#DEFINE GTK_FILE_CHOOSER_DIALOG(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_FILE_CHOOSER_DIALOG, GtkFileChooserDialog))
#DEFINE GTK_FILE_CHOOSER_DIALOG_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_FILE_CHOOSER_DIALOG, GtkFileChooserDialogClass))
#DEFINE GTK_IS_FILE_CHOOSER_DIALOG(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_FILE_CHOOSER_DIALOG))
#DEFINE GTK_IS_CLASS_FILE_CHOOSER_DIALOG(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_FILE_CHOOSER_DIALOG))
#DEFINE GTK_FILE_CHOOSER_DIALOG_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_FILE_CHOOSER_DIALOG, GtkFileChooserDialogClass))
DECLARE FUNCTION gtk_file_chooser_dialog_new(BYVAL AS const gchar PTR, BYVAL AS GtkWindow PTR, BYVAL AS GtkFileChooserAction, BYVAL AS const gchar PTR, ...) AS GtkWidget PTR
TYPE _GtkFileChooserDialogClass
  AS GtkDialogClass parent_class
  _gtk_reserved1 AS SUB CDECL()
  _gtk_reserved2 AS SUB CDECL()
  _gtk_reserved3 AS SUB CDECL()
  _gtk_reserved4 AS SUB CDECL()
END TYPE
DECLARE FUNCTION gtk_file_chooser_error_get_type() AS GType
#DEFINE GTK_TYPE_FILE_CHOOSER_ERROR (gtk_file_chooser_error_get_type())
DECLARE FUNCTION gtk_file_chooser_native_get_type() AS GType
#DEFINE GTK_TYPE_FILE_CHOOSER_NATIVE (gtk_file_chooser_native_get_type())
#DEFINE GTK_FILE_CHOOSER_NATIVE(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_FILE_CHOOSER_NATIVE, GtkFileChooserNative))
#DEFINE GTK_FILE_CHOOSER_NATIVE_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_FILE_CHOOSER_NATIVE, GtkFileChooserNativeClass))
#DEFINE GTK_IS_FILE_CHOOSER_NATIVE(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_FILE_CHOOSER_NATIVE))
#DEFINE GTK_IS_CLASS_FILE_CHOOSER_NATIVE(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_FILE_CHOOSER_NATIVE))
#DEFINE GTK_FILE_CHOOSER_NATIVE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_FILE_CHOOSER_NATIVE, GtkFileChooserNativeClass))
DECLARE FUNCTION gtk_file_chooser_native_new(BYVAL AS const gchar PTR, BYVAL AS GtkWindow PTR, BYVAL AS GtkFileChooserAction, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR) AS GtkFileChooserNative PTR
DECLARE FUNCTION gtk_file_chooser_native_get_accept_label(BYVAL AS GtkFileChooserNative PTR) AS const char PTR
DECLARE FUNCTION gtk_file_chooser_native_get_cancel_label(BYVAL AS GtkFileChooserNative PTR) AS const char PTR
DECLARE SUB gtk_file_chooser_native_set_accept_label(BYVAL AS GtkFileChooserNative PTR, BYVAL AS const char PTR)
DECLARE SUB gtk_file_chooser_native_set_cancel_label(BYVAL AS GtkFileChooserNative PTR, BYVAL AS const char PTR)
TYPE _GtkFileChooserNativeClass
  AS GtkNativeDialogClass parent_class
END TYPE
TYPE _GtkFileChooserWidget
  AS GtkBox parent_instance
  AS GtkFileChooserWidgetPrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_file_chooser_widget_get_type() AS GType
#DEFINE GTK_TYPE_FILE_CHOOSER_WIDGET (gtk_file_chooser_widget_get_type())
#DEFINE GTK_FILE_CHOOSER_WIDGET(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_FILE_CHOOSER_WIDGET, GtkFileChooserWidget))
#DEFINE GTK_FILE_CHOOSER_WIDGET_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_FILE_CHOOSER_WIDGET, GtkFileChooserWidgetClass))
#DEFINE GTK_IS_FILE_CHOOSER_WIDGET(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_FILE_CHOOSER_WIDGET))
#DEFINE GTK_IS_CLASS_FILE_CHOOSER_WIDGET(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_FILE_CHOOSER_WIDGET))
#DEFINE GTK_FILE_CHOOSER_WIDGET_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_FILE_CHOOSER_WIDGET, GtkFileChooserWidgetClass))
DECLARE FUNCTION gtk_file_chooser_widget_new(BYVAL AS GtkFileChooserAction) AS GtkWidget PTR
TYPE _GtkFileChooserWidgetClass
  AS GtkBoxClass parent_class
  _gtk_reserved1 AS SUB CDECL()
  _gtk_reserved2 AS SUB CDECL()
  _gtk_reserved3 AS SUB CDECL()
  _gtk_reserved4 AS SUB CDECL()
END TYPE
DECLARE FUNCTION gtk_file_filter_get_type() AS GType
#DEFINE GTK_TYPE_FILE_FILTER (gtk_file_filter_get_type())
#DEFINE GTK_FILE_FILTER(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_FILE_FILTER, GtkFileFilter))
#DEFINE GTK_FILE_FILTER_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_FILE_FILTER, Gtk))
#DEFINE GTK_IS_FILE_FILTER(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_FILE_FILTER))
#DEFINE GTK_IS_CLASS_FILE_FILTER(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_FILE_FILTER))
#DEFINE GTK_FILE_FILTER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_FILE_FILTER, Gtk))
DECLARE FUNCTION gtk_file_filter_new() AS GtkFileFilter PTR
DECLARE FUNCTION gtk_file_filter_new_from_gvariant(BYVAL AS GVariant PTR) AS GtkFileFilter PTR
DECLARE SUB gtk_file_filter_add_custom(BYVAL AS GtkFileFilter PTR, BYVAL AS GtkFileFilterFlags, BYVAL AS GtkFileFilterFunc, BYVAL AS gpointer, BYVAL AS GDestroyNotify)
DECLARE SUB gtk_file_filter_add_mime_type(BYVAL AS GtkFileFilter PTR, BYVAL AS const gchar PTR)
DECLARE SUB gtk_file_filter_add_pattern(BYVAL AS GtkFileFilter PTR, BYVAL AS const gchar PTR)
DECLARE SUB gtk_file_filter_add_pixbuf_formats(BYVAL AS GtkFileFilter PTR)
DECLARE FUNCTION gtk_file_filter_filter(BYVAL AS GtkFileFilter PTR, BYVAL AS const GtkFileFilterInfo PTR) AS gboolean
DECLARE FUNCTION gtk_file_filter_get_name(BYVAL AS GtkFileFilter PTR) AS const gchar PTR
DECLARE FUNCTION gtk_file_filter_get_needed(BYVAL AS GtkFileFilter PTR) AS GtkFileFilterFlags
DECLARE SUB gtk_file_filter_set_name(BYVAL AS GtkFileFilter PTR, BYVAL AS const gchar PTR)
DECLARE FUNCTION gtk_file_filter_to_gvariant(BYVAL AS GtkFileFilter PTR) AS GVariant PTR
TYPE _GtkFileFilterInfo
  AS GtkFileFilterFlags contains
  AS const gchar PTR filename
  AS const gchar PTR uri
  AS const gchar PTR display_name
  AS const gchar PTR mime_type
END TYPE
TYPE _GtkFixed
  AS GtkContainer container
  AS GtkFixedPrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_fixed_get_type() AS GType
#DEFINE GTK_TYPE_FIXED (gtk_fixed_get_type())
#DEFINE GTK_FIXED(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_FIXED, GtkFixed))
#DEFINE GTK_FIXED_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_FIXED, GtkFixedClass))
#DEFINE GTK_IS_FIXED(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_FIXED))
#DEFINE GTK_IS_CLASS_FIXED(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_FIXED))
#DEFINE GTK_FIXED_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_FIXED, GtkFixedClass))
DECLARE FUNCTION gtk_fixed_new() AS GtkWidget PTR
DECLARE SUB gtk_fixed_move(BYVAL AS GtkFixed PTR, BYVAL AS GtkWidget PTR, BYVAL AS gint, BYVAL AS gint)
DECLARE SUB gtk_fixed_put(BYVAL AS GtkFixed PTR, BYVAL AS GtkWidget PTR, BYVAL AS gint, BYVAL AS gint)
TYPE _GtkFixedChild
  AS GtkWidget PTR widget
  AS gint x
  AS gint y
END TYPE
TYPE _GtkFixedClass
  AS GtkContainerClass parent_class
  _gtk_reserved1 AS SUB CDECL()
  _gtk_reserved2 AS SUB CDECL()
  _gtk_reserved3 AS SUB CDECL()
  _gtk_reserved4 AS SUB CDECL()
END TYPE
TYPE _GtkFlowBox
  AS GtkContainer container
END TYPE
DECLARE FUNCTION gtk_flow_box_get_type() AS GType
#DEFINE GTK_TYPE_FLOW_BOX (gtk_flow_box_get_type())
#DEFINE GTK_FLOW_BOX(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_FLOW_BOX, GtkFlowBox))
#DEFINE GTK_FLOW_BOX_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_FLOW_BOX, GtkFlowBoxClass))
#DEFINE GTK_IS_FLOW_BOX(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_FLOW_BOX))
#DEFINE GTK_IS_CLASS_FLOW_BOX(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_FLOW_BOX))
#DEFINE GTK_FLOW_BOX_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_FLOW_BOX, GtkFlowBoxClass))
DECLARE FUNCTION gtk_flow_box_new() AS GtkWidget PTR
DECLARE SUB gtk_flow_box_bind_model(BYVAL AS GtkFlowBox PTR, BYVAL AS GListModel PTR, BYVAL AS GtkFlowBoxCreateWidgetFunc, BYVAL AS gpointer, BYVAL AS GDestroyNotify)
DECLARE FUNCTION gtk_flow_box_get_activate_on_single_click(BYVAL AS GtkFlowBox PTR) AS gboolean
DECLARE FUNCTION gtk_flow_box_get_child_at_index(BYVAL AS GtkFlowBox PTR, BYVAL AS gint) AS GtkFlowBoxChild PTR
DECLARE FUNCTION gtk_flow_box_get_child_at_pos(BYVAL AS GtkFlowBox PTR, BYVAL AS gint, BYVAL AS gint) AS GtkFlowBoxChild PTR
DECLARE FUNCTION gtk_flow_box_get_column_spacing(BYVAL AS GtkFlowBox PTR) AS guint
DECLARE FUNCTION gtk_flow_box_get_homogeneous(BYVAL AS GtkFlowBox PTR) AS gboolean
DECLARE FUNCTION gtk_flow_box_get_max_children_per_line(BYVAL AS GtkFlowBox PTR) AS guint
DECLARE FUNCTION gtk_flow_box_get_min_children_per_line(BYVAL AS GtkFlowBox PTR) AS guint
DECLARE FUNCTION gtk_flow_box_get_row_spacing(BYVAL AS GtkFlowBox PTR) AS guint
DECLARE FUNCTION gtk_flow_box_get_selected_children(BYVAL AS GtkFlowBox PTR) AS GList PTR
DECLARE FUNCTION gtk_flow_box_get_selection_mode(BYVAL AS GtkFlowBox PTR) AS GtkSelectionMode
DECLARE SUB gtk_flow_box_insert(BYVAL AS GtkFlowBox PTR, BYVAL AS GtkWidget PTR, BYVAL AS gint)
DECLARE SUB gtk_flow_box_invalidate_filter(BYVAL AS GtkFlowBox PTR)
DECLARE SUB gtk_flow_box_invalidate_sort(BYVAL AS GtkFlowBox PTR)
DECLARE SUB gtk_flow_box_select_all(BYVAL AS GtkFlowBox PTR)
DECLARE SUB gtk_flow_box_select_child(BYVAL AS GtkFlowBox PTR, BYVAL AS GtkFlowBoxChild PTR)
DECLARE SUB gtk_flow_box_selected_foreach(BYVAL AS GtkFlowBox PTR, BYVAL AS GtkFlowBoxForeachFunc, BYVAL AS gpointer)
DECLARE SUB gtk_flow_box_set_activate_on_single_click(BYVAL AS GtkFlowBox PTR, BYVAL AS gboolean)
DECLARE SUB gtk_flow_box_set_column_spacing(BYVAL AS GtkFlowBox PTR, BYVAL AS guint)
DECLARE SUB gtk_flow_box_set_filter_func(BYVAL AS GtkFlowBox PTR, BYVAL AS GtkFlowBoxFilterFunc, BYVAL AS gpointer, BYVAL AS GDestroyNotify)
DECLARE SUB gtk_flow_box_set_hadjustment(BYVAL AS GtkFlowBox PTR, BYVAL AS GtkAdjustment PTR)
DECLARE SUB gtk_flow_box_set_homogeneous(BYVAL AS GtkFlowBox PTR, BYVAL AS gboolean)
DECLARE SUB gtk_flow_box_set_max_children_per_line(BYVAL AS GtkFlowBox PTR, BYVAL AS guint)
DECLARE SUB gtk_flow_box_set_min_children_per_line(BYVAL AS GtkFlowBox PTR, BYVAL AS guint)
DECLARE SUB gtk_flow_box_set_row_spacing(BYVAL AS GtkFlowBox PTR, BYVAL AS guint)
DECLARE SUB gtk_flow_box_set_selection_mode(BYVAL AS GtkFlowBox PTR, BYVAL AS GtkSelectionMode)
DECLARE SUB gtk_flow_box_set_sort_func(BYVAL AS GtkFlowBox PTR, BYVAL AS GtkFlowBoxSortFunc, BYVAL AS gpointer, BYVAL AS GDestroyNotify)
DECLARE SUB gtk_flow_box_set_vadjustment(BYVAL AS GtkFlowBox PTR, BYVAL AS GtkAdjustment PTR)
DECLARE SUB gtk_flow_box_unselect_all(BYVAL AS GtkFlowBox PTR)
DECLARE SUB gtk_flow_box_unselect_child(BYVAL AS GtkFlowBox PTR, BYVAL AS GtkFlowBoxChild PTR)
TYPE _GtkFlowBoxAccessible
  AS GtkContainerAccessible parent
  AS GtkFlowBoxAccessiblePrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_flow_box_accessible_get_type() AS GType
#DEFINE GTK_TYPE_FLOW_BOX_ACCESSIBLE (gtk_flow_box_accessible_get_type())
#DEFINE GTK_FLOW_BOX_ACCESSIBLE(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_FLOW_BOX_ACCESSIBLE, GtkFlowBoxAccessible))
#DEFINE GTK_FLOW_BOX_ACCESSIBLE_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_FLOW_BOX_ACCESSIBLE, GtkFlowBoxAccessibleClass))
#DEFINE GTK_IS_FLOW_BOX_ACCESSIBLE(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_FLOW_BOX_ACCESSIBLE))
#DEFINE GTK_IS_CLASS_FLOW_BOX_ACCESSIBLE(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_FLOW_BOX_ACCESSIBLE))
#DEFINE GTK_FLOW_BOX_ACCESSIBLE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_FLOW_BOX_ACCESSIBLE, GtkFlowBoxAccessibleClass))
TYPE _GtkFlowBoxAccessibleClass
  AS GtkContainerAccessibleClass parent_class
END TYPE
TYPE _GtkFlowBoxChild
  AS GtkBin parent_instance
END TYPE
DECLARE FUNCTION gtk_flow_box_child_get_type() AS GType
#DEFINE GTK_TYPE_FLOW_BOX_CHILD (gtk_flow_box_child_get_type())
#DEFINE GTK_FLOW_BOX_CHILD(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_FLOW_BOX_CHILD, GtkFlowBoxChild))
#DEFINE GTK_FLOW_BOX_CHILD_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_FLOW_BOX_CHILD, GtkFlowBoxChildClass))
#DEFINE GTK_IS_FLOW_BOX_CHILD(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_FLOW_BOX_CHILD))
#DEFINE GTK_IS_CLASS_FLOW_BOX_CHILD(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_FLOW_BOX_CHILD))
#DEFINE GTK_FLOW_BOX_CHILD_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_FLOW_BOX_CHILD, GtkFlowBoxChildClass))
DECLARE FUNCTION gtk_flow_box_child_new() AS GtkWidget PTR
DECLARE SUB gtk_flow_box_child_changed(BYVAL AS GtkFlowBoxChild PTR)
DECLARE FUNCTION gtk_flow_box_child_get_index(BYVAL AS GtkFlowBoxChild PTR) AS gint
DECLARE FUNCTION gtk_flow_box_child_is_selected(BYVAL AS GtkFlowBoxChild PTR) AS gboolean
TYPE _GtkFlowBoxChildAccessible
  AS GtkContainerAccessible parent
END TYPE
DECLARE FUNCTION gtk_flow_box_child_accessible_get_type() AS GType
#DEFINE GTK_TYPE_FLOW_BOX_CHILD_ACCESSIBLE (gtk_flow_box_child_accessible_get_type())
#DEFINE GTK_FLOW_BOX_CHILD_ACCESSIBLE(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_FLOW_BOX_CHILD_ACCESSIBLE, GtkFlowBoxChildAccessible))
#DEFINE GTK_FLOW_BOX_CHILD_ACCESSIBLE_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_FLOW_BOX_CHILD_ACCESSIBLE, GtkFlowBoxChildAccessibleClass))
#DEFINE GTK_IS_FLOW_BOX_CHILD_ACCESSIBLE(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_FLOW_BOX_CHILD_ACCESSIBLE))
#DEFINE GTK_IS_CLASS_FLOW_BOX_CHILD_ACCESSIBLE(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_FLOW_BOX_CHILD_ACCESSIBLE))
#DEFINE GTK_FLOW_BOX_CHILD_ACCESSIBLE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_FLOW_BOX_CHILD_ACCESSIBLE, GtkFlowBoxChildAccessibleClass))
TYPE _GtkFlowBoxChildAccessibleClass
  AS GtkContainerAccessibleClass parent_class
END TYPE
TYPE _GtkFlowBoxChildClass
  AS GtkBinClass parent_class
  activate AS SUB CDECL(BYVAL AS GtkFlowBoxChild PTR)
  _gtk_reserved1 AS SUB CDECL()
  _gtk_reserved2 AS SUB CDECL()
END TYPE
TYPE _GtkFlowBoxClass
  AS GtkContainerClass parent_class
  child_activated AS SUB CDECL(BYVAL AS GtkFlowBox PTR, BYVAL AS GtkFlowBoxChild PTR)
  selected_children_changed AS SUB CDECL(BYVAL AS GtkFlowBox PTR)
  activate_cursor_child AS SUB CDECL(BYVAL AS GtkFlowBox PTR)
  toggle_cursor_child AS SUB CDECL(BYVAL AS GtkFlowBox PTR)
  move_cursor AS FUNCTION CDECL(BYVAL AS GtkFlowBox PTR, BYVAL AS GtkMovementStep, BYVAL AS gint) AS gboolean
  select_all AS SUB CDECL(BYVAL AS GtkFlowBox PTR)
  unselect_all AS SUB CDECL(BYVAL AS GtkFlowBox PTR)
  _gtk_reserved1 AS SUB CDECL()
  _gtk_reserved2 AS SUB CDECL()
  _gtk_reserved3 AS SUB CDECL()
  _gtk_reserved4 AS SUB CDECL()
  _gtk_reserved5 AS SUB CDECL()
  _gtk_reserved6 AS SUB CDECL()
END TYPE
TYPE _GtkFontButton
  AS GtkButton button
  AS GtkFontButtonPrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_font_button_get_type() AS GType
#DEFINE GTK_TYPE_FONT_BUTTON (gtk_font_button_get_type())
#DEFINE GTK_FONT_BUTTON(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_FONT_BUTTON, GtkFontButton))
#DEFINE GTK_FONT_BUTTON_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_FONT_BUTTON, GtkFontButtonClass))
#DEFINE GTK_IS_FONT_BUTTON(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_FONT_BUTTON))
#DEFINE GTK_IS_CLASS_FONT_BUTTON(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_FONT_BUTTON))
#DEFINE GTK_FONT_BUTTON_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_FONT_BUTTON, GtkFontButtonClass))
DECLARE FUNCTION gtk_font_button_new() AS GtkWidget PTR
DECLARE FUNCTION gtk_font_button_new_with_font(BYVAL AS const gchar PTR) AS GtkWidget PTR
DECLARE FUNCTION gtk_font_button_get_font_name(BYVAL AS GtkFontButton PTR) AS const gchar PTR
DECLARE FUNCTION gtk_font_button_get_show_size(BYVAL AS GtkFontButton PTR) AS gboolean
DECLARE FUNCTION gtk_font_button_get_show_style(BYVAL AS GtkFontButton PTR) AS gboolean
DECLARE FUNCTION gtk_font_button_get_title(BYVAL AS GtkFontButton PTR) AS const gchar PTR
DECLARE FUNCTION gtk_font_button_get_use_font(BYVAL AS GtkFontButton PTR) AS gboolean
DECLARE FUNCTION gtk_font_button_get_use_size(BYVAL AS GtkFontButton PTR) AS gboolean
DECLARE FUNCTION gtk_font_button_set_font_name(BYVAL AS GtkFontButton PTR, BYVAL AS const gchar PTR) AS gboolean
DECLARE SUB gtk_font_button_set_show_size(BYVAL AS GtkFontButton PTR, BYVAL AS gboolean)
DECLARE SUB gtk_font_button_set_show_style(BYVAL AS GtkFontButton PTR, BYVAL AS gboolean)
DECLARE SUB gtk_font_button_set_title(BYVAL AS GtkFontButton PTR, BYVAL AS const gchar PTR)
DECLARE SUB gtk_font_button_set_use_font(BYVAL AS GtkFontButton PTR, BYVAL AS gboolean)
DECLARE SUB gtk_font_button_set_use_size(BYVAL AS GtkFontButton PTR, BYVAL AS gboolean)
TYPE _GtkFontButtonClass
  AS GtkButtonClass parent_class
  font_set AS SUB CDECL(BYVAL AS GtkFontButton PTR)
  _gtk_reserved1 AS SUB CDECL()
  _gtk_reserved2 AS SUB CDECL()
  _gtk_reserved3 AS SUB CDECL()
  _gtk_reserved4 AS SUB CDECL()
END TYPE
DECLARE FUNCTION gtk_font_chooser_get_type() AS GType
#DEFINE GTK_TYPE_FONT_CHOOSER (gtk_font_chooser_get_type())
#DEFINE GTK_FONT_CHOOSER(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_FONT_CHOOSER, GtkFontChooser))
#DEFINE GTK_FONT_CHOOSER_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_FONT_CHOOSER, GtkFontChooserIface))
#DEFINE GTK_IS_FONT_CHOOSER(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_FONT_CHOOSER))
#DEFINE GTK_FONT_CHOOSER_GET_IFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE((obj), GTK_TYPE_FONT_CHOOSER, GtkFontChooserIface))
DECLARE FUNCTION gtk_font_chooser_get_font(BYVAL AS GtkFontChooser PTR) AS gchar PTR
DECLARE FUNCTION gtk_font_chooser_get_font_desc(BYVAL AS GtkFontChooser PTR) AS PangoFontDescription PTR
DECLARE FUNCTION gtk_font_chooser_get_font_face(BYVAL AS GtkFontChooser PTR) AS PangoFontFace PTR
DECLARE FUNCTION gtk_font_chooser_get_font_family(BYVAL AS GtkFontChooser PTR) AS PangoFontFamily PTR
DECLARE FUNCTION gtk_font_chooser_get_font_features(BYVAL AS GtkFontChooser PTR) AS char PTR
DECLARE FUNCTION gtk_font_chooser_get_font_map(BYVAL AS GtkFontChooser PTR) AS PangoFontMap PTR
DECLARE FUNCTION gtk_font_chooser_get_font_size(BYVAL AS GtkFontChooser PTR) AS gint
DECLARE FUNCTION gtk_font_chooser_get_language(BYVAL AS GtkFontChooser PTR) AS char PTR
DECLARE FUNCTION gtk_font_chooser_get_level(BYVAL AS GtkFontChooser PTR) AS GtkFontChooserLevel
DECLARE FUNCTION gtk_font_chooser_get_preview_text(BYVAL AS GtkFontChooser PTR) AS gchar PTR
DECLARE FUNCTION gtk_font_chooser_get_show_preview_entry(BYVAL AS GtkFontChooser PTR) AS gboolean
DECLARE SUB gtk_font_chooser_set_filter_func(BYVAL AS GtkFontChooser PTR, BYVAL AS GtkFontFilterFunc, BYVAL AS gpointer, BYVAL AS GDestroyNotify)
DECLARE SUB gtk_font_chooser_set_font(BYVAL AS GtkFontChooser PTR, BYVAL AS const gchar PTR)
DECLARE SUB gtk_font_chooser_set_font_desc(BYVAL AS GtkFontChooser PTR, BYVAL AS const PangoFontDescription PTR)
DECLARE SUB gtk_font_chooser_set_font_map(BYVAL AS GtkFontChooser PTR, BYVAL AS PangoFontMap PTR)
DECLARE SUB gtk_font_chooser_set_language(BYVAL AS GtkFontChooser PTR, BYVAL AS const char PTR)
DECLARE SUB gtk_font_chooser_set_level(BYVAL AS GtkFontChooser PTR, BYVAL AS GtkFontChooserLevel)
DECLARE SUB gtk_font_chooser_set_preview_text(BYVAL AS GtkFontChooser PTR, BYVAL AS const gchar PTR)
DECLARE SUB gtk_font_chooser_set_show_preview_entry(BYVAL AS GtkFontChooser PTR, BYVAL AS gboolean)
TYPE _GtkFontChooserDialog
  AS GtkDialog parent_instance
  AS GtkFontChooserDialogPrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_font_chooser_dialog_get_type() AS GType
#DEFINE GTK_TYPE_FONT_CHOOSER_DIALOG (gtk_font_chooser_dialog_get_type())
#DEFINE GTK_FONT_CHOOSER_DIALOG(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_FONT_CHOOSER_DIALOG, GtkFontChooserDialog))
#DEFINE GTK_FONT_CHOOSER_DIALOG_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_FONT_CHOOSER_DIALOG, GtkFontChooserDialogClass))
#DEFINE GTK_IS_FONT_CHOOSER_DIALOG(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_FONT_CHOOSER_DIALOG))
#DEFINE GTK_IS_CLASS_FONT_CHOOSER_DIALOG(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_FONT_CHOOSER_DIALOG))
#DEFINE GTK_FONT_CHOOSER_DIALOG_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_FONT_CHOOSER_DIALOG, GtkFontChooserDialogClass))
DECLARE FUNCTION gtk_font_chooser_dialog_new(BYVAL AS const gchar PTR, BYVAL AS GtkWindow PTR) AS GtkWidget PTR
TYPE _GtkFontChooserDialogClass
  AS GtkDialogClass parent_class
  _gtk_reserved1 AS SUB CDECL()
  _gtk_reserved2 AS SUB CDECL()
  _gtk_reserved3 AS SUB CDECL()
  _gtk_reserved4 AS SUB CDECL()
END TYPE
TYPE _GtkFontChooserIface
  AS GTypeInterface base_iface
  get_font_family AS FUNCTION CDECL(BYVAL AS GtkFontChooser PTR) AS PangoFontFamily PTR
  get_font_face AS FUNCTION CDECL(BYVAL AS GtkFontChooser PTR) AS PangoFontFace PTR
  get_font_size AS FUNCTION CDECL(BYVAL AS GtkFontChooser PTR) AS gint
  set_filter_func AS SUB CDECL(BYVAL AS GtkFontChooser PTR, BYVAL AS GtkFontFilterFunc, BYVAL AS gpointer, BYVAL AS GDestroyNotify)
  font_activated AS SUB CDECL(BYVAL AS GtkFontChooser PTR, BYVAL AS const gchar PTR)
  set_font_map AS SUB CDECL(BYVAL AS GtkFontChooser PTR, BYVAL AS PangoFontMap PTR)
  get_font_map AS FUNCTION CDECL(BYVAL AS GtkFontChooser PTR) AS PangoFontMap PTR
  AS gpointer padding(9)
END TYPE
TYPE _GtkFontChooserWidget
  AS GtkBox parent_instance
  AS GtkFontChooserWidgetPrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_font_chooser_widget_get_type() AS GType
#DEFINE GTK_TYPE_FONT_CHOOSER_WIDGET (gtk_font_chooser_widget_get_type())
#DEFINE GTK_FONT_CHOOSER_WIDGET(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_FONT_CHOOSER_WIDGET, GtkFontChooserWidget))
#DEFINE GTK_FONT_CHOOSER_WIDGET_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_FONT_CHOOSER_WIDGET, GtkFontChooserWidgetClass))
#DEFINE GTK_IS_FONT_CHOOSER_WIDGET(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_FONT_CHOOSER_WIDGET))
#DEFINE GTK_IS_CLASS_FONT_CHOOSER_WIDGET(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_FONT_CHOOSER_WIDGET))
#DEFINE GTK_FONT_CHOOSER_WIDGET_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_FONT_CHOOSER_WIDGET, GtkFontChooserWidgetClass))
DECLARE FUNCTION gtk_font_chooser_widget_new() AS GtkWidget PTR
TYPE _GtkFontChooserWidgetClass
  AS GtkBoxClass parent_class
  _gtk_reserved1 AS SUB CDECL()
  _gtk_reserved2 AS SUB CDECL()
  _gtk_reserved3 AS SUB CDECL()
  _gtk_reserved4 AS SUB CDECL()
  _gtk_reserved5 AS SUB CDECL()
  _gtk_reserved6 AS SUB CDECL()
  _gtk_reserved7 AS SUB CDECL()
  _gtk_reserved8 AS SUB CDECL()
END TYPE
TYPE _GtkFontSelection
  AS GtkBox parent_instance
  AS GtkFontSelectionPrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_font_selection_get_type() AS GType
#DEFINE GTK_TYPE_FONT_SELECTION (gtk_font_selection_get_type())
#DEFINE GTK_FONT_SELECTION(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_FONT_SELECTION, GtkFontSelection))
#DEFINE GTK_FONT_SELECTION_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_FONT_SELECTION, GtkFontSelectionClass))
#DEFINE GTK_IS_FONT_SELECTION(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_FONT_SELECTION))
#DEFINE GTK_IS_CLASS_FONT_SELECTION(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_FONT_SELECTION))
#DEFINE GTK_FONT_SELECTION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_FONT_SELECTION, GtkFontSelectionClass))
DECLARE FUNCTION gtk_font_selection_new() AS GtkWidget PTR
DECLARE FUNCTION gtk_font_selection_get_face(BYVAL AS GtkFontSelection PTR) AS PangoFontFace PTR
DECLARE FUNCTION gtk_font_selection_get_face_list(BYVAL AS GtkFontSelection PTR) AS GtkWidget PTR
DECLARE FUNCTION gtk_font_selection_get_family(BYVAL AS GtkFontSelection PTR) AS PangoFontFamily PTR
DECLARE FUNCTION gtk_font_selection_get_family_list(BYVAL AS GtkFontSelection PTR) AS GtkWidget PTR
DECLARE FUNCTION gtk_font_selection_get_font_name(BYVAL AS GtkFontSelection PTR) AS gchar PTR
DECLARE FUNCTION gtk_font_selection_get_preview_entry(BYVAL AS GtkFontSelection PTR) AS GtkWidget PTR
DECLARE FUNCTION gtk_font_selection_get_preview_text(BYVAL AS GtkFontSelection PTR) AS const gchar PTR
DECLARE FUNCTION gtk_font_selection_get_size(BYVAL AS GtkFontSelection PTR) AS gint
DECLARE FUNCTION gtk_font_selection_get_size_entry(BYVAL AS GtkFontSelection PTR) AS GtkWidget PTR
DECLARE FUNCTION gtk_font_selection_get_size_list(BYVAL AS GtkFontSelection PTR) AS GtkWidget PTR
DECLARE FUNCTION gtk_font_selection_set_font_name(BYVAL AS GtkFontSelection PTR, BYVAL AS const gchar PTR) AS gboolean
DECLARE SUB gtk_font_selection_set_preview_text(BYVAL AS GtkFontSelection PTR, BYVAL AS const gchar PTR)
TYPE _GtkFontSelectionClass
  AS GtkBoxClass parent_class
  _gtk_reserved1 AS SUB CDECL()
  _gtk_reserved2 AS SUB CDECL()
  _gtk_reserved3 AS SUB CDECL()
  _gtk_reserved4 AS SUB CDECL()
END TYPE
TYPE _GtkFontSelectionDialog
  AS GtkDialog parent_instance
  AS GtkFontSelectionDialogPrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_font_selection_dialog_get_type() AS GType
#DEFINE GTK_TYPE_FONT_SELECTION_DIALOG (gtk_font_selection_dialog_get_type())
#DEFINE GTK_FONT_SELECTION_DIALOG(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_FONT_SELECTION_DIALOG, GtkFontSelectionDialog))
#DEFINE GTK_FONT_SELECTION_DIALOG_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_FONT_SELECTION_DIALOG, GtkFontSelectionDialogClass))
#DEFINE GTK_IS_FONT_SELECTION_DIALOG(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_FONT_SELECTION_DIALOG))
#DEFINE GTK_IS_CLASS_FONT_SELECTION_DIALOG(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_FONT_SELECTION_DIALOG))
#DEFINE GTK_FONT_SELECTION_DIALOG_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_FONT_SELECTION_DIALOG, GtkFontSelectionDialogClass))
DECLARE FUNCTION gtk_font_selection_dialog_new(BYVAL AS const gchar PTR) AS GtkWidget PTR
DECLARE FUNCTION gtk_font_selection_dialog_get_cancel_button(BYVAL AS GtkFontSelectionDialog PTR) AS GtkWidget PTR
DECLARE FUNCTION gtk_font_selection_dialog_get_font_name(BYVAL AS GtkFontSelectionDialog PTR) AS gchar PTR
DECLARE FUNCTION gtk_font_selection_dialog_get_font_selection(BYVAL AS GtkFontSelectionDialog PTR) AS GtkWidget PTR
DECLARE FUNCTION gtk_font_selection_dialog_get_ok_button(BYVAL AS GtkFontSelectionDialog PTR) AS GtkWidget PTR
DECLARE FUNCTION gtk_font_selection_dialog_get_preview_text(BYVAL AS GtkFontSelectionDialog PTR) AS const gchar PTR
DECLARE FUNCTION gtk_font_selection_dialog_set_font_name(BYVAL AS GtkFontSelectionDialog PTR, BYVAL AS const gchar PTR) AS gboolean
DECLARE SUB gtk_font_selection_dialog_set_preview_text(BYVAL AS GtkFontSelectionDialog PTR, BYVAL AS const gchar PTR)
TYPE _GtkFontSelectionDialogClass
  AS GtkDialogClass parent_class
  _gtk_reserved1 AS SUB CDECL()
  _gtk_reserved2 AS SUB CDECL()
  _gtk_reserved3 AS SUB CDECL()
  _gtk_reserved4 AS SUB CDECL()
END TYPE
TYPE _GtkFrameAccessible
  AS GtkContainerAccessible parent
  AS GtkFrameAccessiblePrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_frame_accessible_get_type() AS GType
#DEFINE GTK_TYPE_FRAME_ACCESSIBLE (gtk_frame_accessible_get_type())
#DEFINE GTK_FRAME_ACCESSIBLE(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_FRAME_ACCESSIBLE, GtkFrameAccessible))
#DEFINE GTK_FRAME_ACCESSIBLE_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_FRAME_ACCESSIBLE, GtkFrameAccessibleClass))
#DEFINE GTK_IS_FRAME_ACCESSIBLE(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_FRAME_ACCESSIBLE))
#DEFINE GTK_IS_CLASS_FRAME_ACCESSIBLE(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_FRAME_ACCESSIBLE))
#DEFINE GTK_FRAME_ACCESSIBLE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_FRAME_ACCESSIBLE, GtkFrameAccessibleClass))
TYPE _GtkFrameAccessibleClass
  AS GtkContainerAccessibleClass parent_class
END TYPE
TYPE _GtkGLArea
  AS GtkWidget parent_instance
END TYPE
DECLARE FUNCTION gtk_gl_area_get_type() AS GType
#DEFINE GTK_TYPE_GL_AREA (gtk_gl_area_get_type())
#DEFINE GTK_GL_AREA(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_GL_AREA, GtkGLArea))
#DEFINE GTK_GL_AREA_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_GL_AREA, GtkGLAreaClass))
#DEFINE GTK_IS_GL_AREA(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_GL_AREA))
#DEFINE GTK_IS_CLASS_GL_AREA(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_GL_AREA))
#DEFINE GTK_GL_AREA_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_GL_AREA, GtkGLAreaClass))
DECLARE FUNCTION gtk_gl_area_new() AS GtkWidget PTR
DECLARE SUB gtk_gl_area_attach_buffers(BYVAL AS GtkGLArea PTR)
DECLARE FUNCTION gtk_gl_area_get_auto_render(BYVAL AS GtkGLArea PTR) AS gboolean
DECLARE FUNCTION gtk_gl_area_get_context(BYVAL AS GtkGLArea PTR) AS GdkGLContext PTR
DECLARE FUNCTION gtk_gl_area_get_error(BYVAL AS GtkGLArea PTR) AS GError PTR
DECLARE FUNCTION gtk_gl_area_get_has_alpha(BYVAL AS GtkGLArea PTR) AS gboolean
DECLARE FUNCTION gtk_gl_area_get_has_depth_buffer(BYVAL AS GtkGLArea PTR) AS gboolean
DECLARE FUNCTION gtk_gl_area_get_has_stencil_buffer(BYVAL AS GtkGLArea PTR) AS gboolean
DECLARE SUB gtk_gl_area_get_required_version(BYVAL AS GtkGLArea PTR, BYVAL AS gint PTR, BYVAL AS gint PTR)
DECLARE FUNCTION gtk_gl_area_get_use_es(BYVAL AS GtkGLArea PTR) AS gboolean
DECLARE SUB gtk_gl_area_make_current(BYVAL AS GtkGLArea PTR)
DECLARE SUB gtk_gl_area_queue_render(BYVAL AS GtkGLArea PTR)
DECLARE SUB gtk_gl_area_set_auto_render(BYVAL AS GtkGLArea PTR, BYVAL AS gboolean)
DECLARE SUB gtk_gl_area_set_error(BYVAL AS GtkGLArea PTR, BYVAL AS const GError PTR)
DECLARE SUB gtk_gl_area_set_has_alpha(BYVAL AS GtkGLArea PTR, BYVAL AS gboolean)
DECLARE SUB gtk_gl_area_set_has_depth_buffer(BYVAL AS GtkGLArea PTR, BYVAL AS gboolean)
DECLARE SUB gtk_gl_area_set_has_stencil_buffer(BYVAL AS GtkGLArea PTR, BYVAL AS gboolean)
DECLARE SUB gtk_gl_area_set_required_version(BYVAL AS GtkGLArea PTR, BYVAL AS gint, BYVAL AS gint)
DECLARE SUB gtk_gl_area_set_use_es(BYVAL AS GtkGLArea PTR, BYVAL AS gboolean)
TYPE _GtkGLAreaClass
  AS GtkWidgetClass parent_class
  render AS FUNCTION CDECL(BYVAL AS GtkGLArea PTR, BYVAL AS GdkGLContext PTR) AS gboolean
  resize AS SUB CDECL(BYVAL AS GtkGLArea PTR, BYVAL AS gint /'int'/, BYVAL AS gint /'int'/)
  create_context AS FUNCTION CDECL(BYVAL AS GtkGLArea PTR) AS GdkGLContext PTR
  AS gpointer _padding(5)
END TYPE
DECLARE FUNCTION gtk_gesture_get_type() AS GType
#DEFINE GTK_TYPE_GESTURE (gtk_gesture_get_type())
#DEFINE GTK_GESTURE(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_GESTURE, GtkGesture))
#DEFINE GTK_GESTURE_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_GESTURE, GtkGestureClass))
#DEFINE GTK_IS_GESTURE(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_GESTURE))
#DEFINE GTK_IS_CLASS_GESTURE(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_GESTURE))
#DEFINE GTK_GESTURE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_GESTURE, GtkGestureClass))
DECLARE FUNCTION gtk_gesture_get_bounding_box(BYVAL AS GtkGesture PTR, BYVAL AS GdkRectangle PTR) AS gboolean
DECLARE FUNCTION gtk_gesture_get_bounding_box_center(BYVAL AS GtkGesture PTR, BYVAL AS gdouble PTR, BYVAL AS gdouble PTR) AS gboolean
DECLARE FUNCTION gtk_gesture_get_device(BYVAL AS GtkGesture PTR) AS GdkDevice PTR
DECLARE FUNCTION gtk_gesture_get_group(BYVAL AS GtkGesture PTR) AS GList PTR
DECLARE FUNCTION gtk_gesture_get_last_event(BYVAL AS GtkGesture PTR, BYVAL AS GdkEventSequence PTR) AS const GdkEvent PTR
DECLARE FUNCTION gtk_gesture_get_last_updated_sequence(BYVAL AS GtkGesture PTR) AS GdkEventSequence PTR
DECLARE FUNCTION gtk_gesture_get_point(BYVAL AS GtkGesture PTR, BYVAL AS GdkEventSequence PTR, BYVAL AS gdouble PTR, BYVAL AS gdouble PTR) AS gboolean
DECLARE FUNCTION gtk_gesture_get_sequence_state(BYVAL AS GtkGesture PTR, BYVAL AS GdkEventSequence PTR) AS GtkEventSequenceState
DECLARE FUNCTION gtk_gesture_get_sequences(BYVAL AS GtkGesture PTR) AS GList PTR
DECLARE FUNCTION gtk_gesture_get_window(BYVAL AS GtkGesture PTR) AS GdkWindow PTR
DECLARE SUB gtk_gesture_group(BYVAL AS GtkGesture PTR, BYVAL AS GtkGesture PTR)
DECLARE FUNCTION gtk_gesture_handles_sequence(BYVAL AS GtkGesture PTR, BYVAL AS GdkEventSequence PTR) AS gboolean
DECLARE FUNCTION gtk_gesture_is_active(BYVAL AS GtkGesture PTR) AS gboolean
DECLARE FUNCTION gtk_gesture_is_grouped_with(BYVAL AS GtkGesture PTR, BYVAL AS GtkGesture PTR) AS gboolean
DECLARE FUNCTION gtk_gesture_is_recognized(BYVAL AS GtkGesture PTR) AS gboolean
DECLARE FUNCTION gtk_gesture_set_sequence_state(BYVAL AS GtkGesture PTR, BYVAL AS GdkEventSequence PTR, BYVAL AS GtkEventSequenceState) AS gboolean
DECLARE FUNCTION gtk_gesture_set_state(BYVAL AS GtkGesture PTR, BYVAL AS GtkEventSequenceState) AS gboolean
DECLARE SUB gtk_gesture_set_window(BYVAL AS GtkGesture PTR, BYVAL AS GdkWindow PTR)
DECLARE SUB gtk_gesture_ungroup(BYVAL AS GtkGesture PTR)
DECLARE FUNCTION gtk_gesture_drag_get_type() AS GType
#DEFINE GTK_TYPE_GESTURE_DRAG (gtk_gesture_drag_get_type())
#DEFINE GTK_GESTURE_DRAG(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_GESTURE_DRAG, GtkGestureDrag))
#DEFINE GTK_GESTURE_DRAG_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_GESTURE_DRAG, GtkGestureDragClass))
#DEFINE GTK_IS_GESTURE_DRAG(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_GESTURE_DRAG))
#DEFINE GTK_IS_CLASS_GESTURE_DRAG(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_GESTURE_DRAG))
#DEFINE GTK_GESTURE_DRAG_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_GESTURE_DRAG, GtkGestureDragClass))
DECLARE FUNCTION gtk_gesture_drag_new(BYVAL AS GtkWidget PTR) AS GtkGesture PTR
DECLARE FUNCTION gtk_gesture_drag_get_offset(BYVAL AS GtkGestureDrag PTR, BYVAL AS gdouble PTR, BYVAL AS gdouble PTR) AS gboolean
DECLARE FUNCTION gtk_gesture_drag_get_start_point(BYVAL AS GtkGestureDrag PTR, BYVAL AS gdouble PTR, BYVAL AS gdouble PTR) AS gboolean
DECLARE FUNCTION gtk_gesture_long_press_get_type() AS GType
#DEFINE GTK_TYPE_GESTURE_LONG_PRESS (gtk_gesture_long_press_get_type())
#DEFINE GTK_GESTURE_LONG_PRESS(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_GESTURE_LONG_PRESS, GtkGestureLongPress))
#DEFINE GTK_GESTURE_LONG_PRESS_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_GESTURE_LONG_PRESS, GtkGestureLongPressClass))
#DEFINE GTK_IS_GESTURE_LONG_PRESS(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_GESTURE_LONG_PRESS))
#DEFINE GTK_IS_CLASS_GESTURE_LONG_PRESS(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_GESTURE_LONG_PRESS))
#DEFINE GTK_GESTURE_LONG_PRESS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_GESTURE_LONG_PRESS, GtkGestureLongPressClass))
DECLARE FUNCTION gtk_gesture_long_press_new(BYVAL AS GtkWidget PTR) AS GtkGesture PTR
DECLARE FUNCTION gtk_gesture_multi_press_get_type() AS GType
#DEFINE GTK_TYPE_GESTURE_MULTI_PRESS (gtk_gesture_multi_press_get_type())
#DEFINE GTK_GESTURE_MULTI_PRESS(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_GESTURE_MULTI_PRESS, GtkGestureMultiPress))
#DEFINE GTK_GESTURE_MULTI_PRESS_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_GESTURE_MULTI_PRESS, GtkGestureMultiPressClass))
#DEFINE GTK_IS_GESTURE_MULTI_PRESS(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_GESTURE_MULTI_PRESS))
#DEFINE GTK_IS_CLASS_GESTURE_MULTI_PRESS(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_GESTURE_MULTI_PRESS))
#DEFINE GTK_GESTURE_MULTI_PRESS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_GESTURE_MULTI_PRESS, GtkGestureMultiPressClass))
DECLARE FUNCTION gtk_gesture_multi_press_new(BYVAL AS GtkWidget PTR) AS GtkGesture PTR
DECLARE FUNCTION gtk_gesture_multi_press_get_area(BYVAL AS GtkGestureMultiPress PTR, BYVAL AS GdkRectangle PTR) AS gboolean
DECLARE SUB gtk_gesture_multi_press_set_area(BYVAL AS GtkGestureMultiPress PTR, BYVAL AS const GdkRectangle PTR)
DECLARE FUNCTION gtk_gesture_pan_get_type() AS GType
#DEFINE GTK_TYPE_GESTURE_PAN (gtk_gesture_pan_get_type())
#DEFINE GTK_GESTURE_PAN(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_GESTURE_PAN, GtkGesturePan))
#DEFINE GTK_GESTURE_PAN_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_GESTURE_PAN, GtkGesturePanClass))
#DEFINE GTK_IS_GESTURE_PAN(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_GESTURE_PAN))
#DEFINE GTK_IS_CLASS_GESTURE_PAN(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_GESTURE_PAN))
#DEFINE GTK_GESTURE_PAN_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_GESTURE_PAN, GtkGesturePanClass))
DECLARE FUNCTION gtk_gesture_pan_new(BYVAL AS GtkWidget PTR, BYVAL AS GtkOrientation) AS GtkGesture PTR
DECLARE FUNCTION gtk_gesture_pan_get_orientation(BYVAL AS GtkGesturePan PTR) AS GtkOrientation
DECLARE SUB gtk_gesture_pan_set_orientation(BYVAL AS GtkGesturePan PTR, BYVAL AS GtkOrientation)
DECLARE FUNCTION gtk_gesture_rotate_get_type() AS GType
#DEFINE GTK_TYPE_GESTURE_ROTATE (gtk_gesture_rotate_get_type())
#DEFINE GTK_GESTURE_ROTATE(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_GESTURE_ROTATE, GtkGestureRotate))
#DEFINE GTK_GESTURE_ROTATE_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_GESTURE_ROTATE, GtkGestureRotateClass))
#DEFINE GTK_IS_GESTURE_ROTATE(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_GESTURE_ROTATE))
#DEFINE GTK_IS_CLASS_GESTURE_ROTATE(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_GESTURE_ROTATE))
#DEFINE GTK_GESTURE_ROTATE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_GESTURE_ROTATE, GtkGestureRotateClass))
DECLARE FUNCTION gtk_gesture_rotate_new(BYVAL AS GtkWidget PTR) AS GtkGesture PTR
DECLARE FUNCTION gtk_gesture_rotate_get_angle_delta(BYVAL AS GtkGestureRotate PTR) AS gdouble
DECLARE FUNCTION gtk_gesture_single_get_type() AS GType
#DEFINE GTK_TYPE_GESTURE_SINGLE (gtk_gesture_single_get_type())
#DEFINE GTK_GESTURE_SINGLE(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_GESTURE_SINGLE, GtkGestureSingle))
#DEFINE GTK_GESTURE_SINGLE_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_GESTURE_SINGLE, GtkGestureSingleClass))
#DEFINE GTK_IS_GESTURE_SINGLE(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_GESTURE_SINGLE))
#DEFINE GTK_IS_CLASS_GESTURE_SINGLE(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_GESTURE_SINGLE))
#DEFINE GTK_GESTURE_SINGLE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_GESTURE_SINGLE, GtkGestureSingleClass))
DECLARE FUNCTION gtk_gesture_single_get_button(BYVAL AS GtkGestureSingle PTR) AS guint
DECLARE FUNCTION gtk_gesture_single_get_current_button(BYVAL AS GtkGestureSingle PTR) AS guint
DECLARE FUNCTION gtk_gesture_single_get_current_sequence(BYVAL AS GtkGestureSingle PTR) AS GdkEventSequence PTR
DECLARE FUNCTION gtk_gesture_single_get_exclusive(BYVAL AS GtkGestureSingle PTR) AS gboolean
DECLARE FUNCTION gtk_gesture_single_get_touch_only(BYVAL AS GtkGestureSingle PTR) AS gboolean
DECLARE SUB gtk_gesture_single_set_button(BYVAL AS GtkGestureSingle PTR, BYVAL AS guint)
DECLARE SUB gtk_gesture_single_set_exclusive(BYVAL AS GtkGestureSingle PTR, BYVAL AS gboolean)
DECLARE SUB gtk_gesture_single_set_touch_only(BYVAL AS GtkGestureSingle PTR, BYVAL AS gboolean)
DECLARE FUNCTION gtk_gesture_stylus_get_type() AS GType
#DEFINE GTK_TYPE_GESTURE_STYLUS (gtk_gesture_stylus_get_type())
#DEFINE GTK_GESTURE_STYLUS(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_GESTURE_STYLUS, GtkGestureStylus))
#DEFINE GTK_GESTURE_STYLUS_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_GESTURE_STYLUS, GtkGestureStylusClass))
#DEFINE GTK_IS_GESTURE_STYLUS(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_GESTURE_STYLUS))
#DEFINE GTK_IS_CLASS_GESTURE_STYLUS(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_GESTURE_STYLUS))
#DEFINE GTK_GESTURE_STYLUS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_GESTURE_STYLUS, GtkGestureStylusClass))
DECLARE FUNCTION gtk_gesture_stylus_new(BYVAL AS GtkWidget PTR) AS GtkGesture PTR
DECLARE FUNCTION gtk_gesture_stylus_get_axes(BYVAL AS GtkGestureStylus PTR, BYVAL AS GdkAxisUse PTR, BYVAL AS gdouble PTR PTR) AS gboolean
DECLARE FUNCTION gtk_gesture_stylus_get_axis(BYVAL AS GtkGestureStylus PTR, BYVAL AS GdkAxisUse, BYVAL AS gdouble PTR) AS gboolean
DECLARE FUNCTION gtk_gesture_stylus_get_device_tool(BYVAL AS GtkGestureStylus PTR) AS GdkDeviceTool PTR
DECLARE FUNCTION gtk_gesture_swipe_get_type() AS GType
#DEFINE GTK_TYPE_GESTURE_SWIPE (gtk_gesture_swipe_get_type())
#DEFINE GTK_GESTURE_SWIPE(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_GESTURE_SWIPE, GtkGestureSwipe))
#DEFINE GTK_GESTURE_SWIPE_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_GESTURE_SWIPE, GtkGestureSwipeClass))
#DEFINE GTK_IS_GESTURE_SWIPE(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_GESTURE_SWIPE))
#DEFINE GTK_IS_CLASS_GESTURE_SWIPE(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_GESTURE_SWIPE))
#DEFINE GTK_GESTURE_SWIPE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_GESTURE_SWIPE, GtkGestureSwipeClass))
DECLARE FUNCTION gtk_gesture_swipe_new(BYVAL AS GtkWidget PTR) AS GtkGesture PTR
DECLARE FUNCTION gtk_gesture_swipe_get_velocity(BYVAL AS GtkGestureSwipe PTR, BYVAL AS gdouble PTR, BYVAL AS gdouble PTR) AS gboolean
DECLARE FUNCTION gtk_gesture_zoom_get_type() AS GType
#DEFINE GTK_TYPE_GESTURE_ZOOM (gtk_gesture_zoom_get_type())
#DEFINE GTK_GESTURE_ZOOM(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_GESTURE_ZOOM, GtkGestureZoom))
#DEFINE GTK_GESTURE_ZOOM_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_GESTURE_ZOOM, GtkGestureZoomClass))
#DEFINE GTK_IS_GESTURE_ZOOM(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_GESTURE_ZOOM))
#DEFINE GTK_IS_CLASS_GESTURE_ZOOM(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_GESTURE_ZOOM))
#DEFINE GTK_GESTURE_ZOOM_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_GESTURE_ZOOM, GtkGestureZoomClass))
DECLARE FUNCTION gtk_gesture_zoom_new(BYVAL AS GtkWidget PTR) AS GtkGesture PTR
DECLARE FUNCTION gtk_gesture_zoom_get_scale_delta(BYVAL AS GtkGestureZoom PTR) AS gdouble
DECLARE FUNCTION gtk_gradient_new_linear(BYVAL AS gdouble, BYVAL AS gdouble, BYVAL AS gdouble, BYVAL AS gdouble) AS GtkGradient PTR
DECLARE FUNCTION gtk_gradient_new_radial(BYVAL AS gdouble, BYVAL AS gdouble, BYVAL AS gdouble, BYVAL AS gdouble, BYVAL AS gdouble, BYVAL AS gdouble) AS GtkGradient PTR
DECLARE SUB gtk_gradient_add_color_stop(BYVAL AS GtkGradient PTR, BYVAL AS gdouble, BYVAL AS GtkSymbolicColor PTR)
DECLARE FUNCTION gtk_gradient_ref(BYVAL AS GtkGradient PTR) AS GtkGradient PTR
DECLARE FUNCTION gtk_gradient_resolve(BYVAL AS GtkGradient PTR, BYVAL AS GtkStyleProperties PTR, BYVAL AS cairo_pattern_t PTR PTR) AS gboolean
DECLARE FUNCTION gtk_gradient_resolve_for_context(BYVAL AS GtkGradient PTR, BYVAL AS GtkStyleContext PTR) AS cairo_pattern_t PTR
DECLARE FUNCTION gtk_gradient_to_string(BYVAL AS GtkGradient PTR) AS char PTR
DECLARE SUB gtk_gradient_unref(BYVAL AS GtkGradient PTR)
TYPE _GtkGrid
  AS GtkContainer container
  AS GtkGridPrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_grid_get_type() AS GType
#DEFINE GTK_TYPE_GRID (gtk_grid_get_type())
#DEFINE GTK_GRID(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_GRID, GtkGrid))
#DEFINE GTK_GRID_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_GRID, GtkGridClass))
#DEFINE GTK_IS_GRID(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_GRID))
#DEFINE GTK_IS_CLASS_GRID(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_GRID))
#DEFINE GTK_GRID_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_GRID, GtkGridClass))
DECLARE FUNCTION gtk_grid_new() AS GtkWidget PTR
DECLARE SUB gtk_grid_attach(BYVAL AS GtkGrid PTR, BYVAL AS GtkWidget PTR, BYVAL AS gint, BYVAL AS gint, BYVAL AS gint, BYVAL AS gint)
DECLARE SUB gtk_grid_attach_next_to(BYVAL AS GtkGrid PTR, BYVAL AS GtkWidget PTR, BYVAL AS GtkWidget PTR, BYVAL AS GtkPositionType, BYVAL AS gint, BYVAL AS gint)
DECLARE FUNCTION gtk_grid_get_baseline_row(BYVAL AS GtkGrid PTR) AS gint
DECLARE FUNCTION gtk_grid_get_child_at(BYVAL AS GtkGrid PTR, BYVAL AS gint, BYVAL AS gint) AS GtkWidget PTR
DECLARE FUNCTION gtk_grid_get_column_homogeneous(BYVAL AS GtkGrid PTR) AS gboolean
DECLARE FUNCTION gtk_grid_get_column_spacing(BYVAL AS GtkGrid PTR) AS guint
DECLARE FUNCTION gtk_grid_get_row_baseline_position(BYVAL AS GtkGrid PTR, BYVAL AS gint) AS GtkBaselinePosition
DECLARE FUNCTION gtk_grid_get_row_homogeneous(BYVAL AS GtkGrid PTR) AS gboolean
DECLARE FUNCTION gtk_grid_get_row_spacing(BYVAL AS GtkGrid PTR) AS guint
DECLARE SUB gtk_grid_insert_column(BYVAL AS GtkGrid PTR, BYVAL AS gint)
DECLARE SUB gtk_grid_insert_next_to(BYVAL AS GtkGrid PTR, BYVAL AS GtkWidget PTR, BYVAL AS GtkPositionType)
DECLARE SUB gtk_grid_insert_row(BYVAL AS GtkGrid PTR, BYVAL AS gint)
DECLARE SUB gtk_grid_remove_column(BYVAL AS GtkGrid PTR, BYVAL AS gint)
DECLARE SUB gtk_grid_remove_row(BYVAL AS GtkGrid PTR, BYVAL AS gint)
DECLARE SUB gtk_grid_set_baseline_row(BYVAL AS GtkGrid PTR, BYVAL AS gint)
DECLARE SUB gtk_grid_set_column_homogeneous(BYVAL AS GtkGrid PTR, BYVAL AS gboolean)
DECLARE SUB gtk_grid_set_column_spacing(BYVAL AS GtkGrid PTR, BYVAL AS guint)
DECLARE SUB gtk_grid_set_row_baseline_position(BYVAL AS GtkGrid PTR, BYVAL AS gint, BYVAL AS GtkBaselinePosition)
DECLARE SUB gtk_grid_set_row_homogeneous(BYVAL AS GtkGrid PTR, BYVAL AS gboolean)
DECLARE SUB gtk_grid_set_row_spacing(BYVAL AS GtkGrid PTR, BYVAL AS guint)
TYPE _GtkGridClass
  AS GtkContainerClass parent_class
  _gtk_reserved1 AS SUB CDECL()
  _gtk_reserved2 AS SUB CDECL()
  _gtk_reserved3 AS SUB CDECL()
  _gtk_reserved4 AS SUB CDECL()
  _gtk_reserved5 AS SUB CDECL()
  _gtk_reserved6 AS SUB CDECL()
  _gtk_reserved7 AS SUB CDECL()
  _gtk_reserved8 AS SUB CDECL()
END TYPE
TYPE _GtkHBox
  AS GtkBox box
END TYPE
DECLARE FUNCTION gtk_hbox_get_type() AS GType
#DEFINE GTK_TYPE_HBOX (gtk_hbox_get_type())
#DEFINE GTK_HBOX(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_HBOX, GtkHBox))
#DEFINE GTK_HBOX_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_HBOX, GtkHBoxClass))
#DEFINE GTK_IS_HBOX(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_HBOX))
#DEFINE GTK_IS_CLASS_HBOX(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_HBOX))
#DEFINE GTK_HBOX_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_HBOX, GtkHBoxClass))
DECLARE FUNCTION gtk_hbox_new(BYVAL AS gboolean, BYVAL AS gint) AS GtkWidget PTR
TYPE _GtkHBoxClass
  AS GtkBoxClass parent_class
END TYPE
TYPE _GtkHButtonBox
  AS GtkButtonBox button_box
END TYPE
DECLARE FUNCTION gtk_hbutton_box_get_type() AS GType
#DEFINE GTK_TYPE_HBUTTON_BOX (gtk_hbutton_box_get_type())
#DEFINE GTK_HBUTTON_BOX(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_HBUTTON_BOX, GtkHButtonBox))
#DEFINE GTK_HBUTTON_BOX_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_HBUTTON_BOX, GtkHButtonBoxClass))
#DEFINE GTK_IS_HBUTTON_BOX(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_HBUTTON_BOX))
#DEFINE GTK_IS_CLASS_HBUTTON_BOX(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_HBUTTON_BOX))
#DEFINE GTK_HBUTTON_BOX_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_HBUTTON_BOX, GtkHButtonBoxClass))
DECLARE FUNCTION gtk_hbutton_box_new() AS GtkWidget PTR
TYPE _GtkHButtonBoxClass
  AS GtkButtonBoxClass parent_class
END TYPE
TYPE _GtkHPaned
  AS GtkPaned paned
END TYPE
DECLARE FUNCTION gtk_hpaned_get_type() AS GType
#DEFINE GTK_TYPE_HPANED (gtk_hpaned_get_type())
#DEFINE GTK_HPANED(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_HPANED, GtkHPaned))
#DEFINE GTK_HPANED_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_HPANED, GtkHPanedClass))
#DEFINE GTK_IS_HPANED(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_HPANED))
#DEFINE GTK_IS_CLASS_HPANED(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_HPANED))
#DEFINE GTK_HPANED_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_HPANED, GtkHPanedClass))
DECLARE FUNCTION gtk_hpaned_new() AS GtkWidget PTR
TYPE _GtkHPanedClass
  AS GtkPanedClass parent_class
END TYPE
TYPE _GtkHSV
  AS GtkWidget parent_instance
  AS GtkHSVPrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_hsv_get_type() AS GType
#DEFINE GTK_TYPE_HSV (gtk_hsv_get_type())
#DEFINE GTK_HSV(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_HSV, GtkHSV))
#DEFINE GTK_HSV_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_HSV, GtkHSVClass))
#DEFINE GTK_IS_HSV(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_HSV))
#DEFINE GTK_IS_CLASS_HSV(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_HSV))
#DEFINE GTK_HSV_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_HSV, GtkHSVClass))
DECLARE FUNCTION gtk_hsv_new() AS GtkWidget PTR
DECLARE SUB gtk_hsv_to_rgb(BYVAL AS gdouble, BYVAL AS gdouble, BYVAL AS gdouble, BYVAL AS gdouble PTR, BYVAL AS gdouble PTR, BYVAL AS gdouble PTR)
DECLARE SUB gtk_hsv_get_color(BYVAL AS GtkHSV PTR, BYVAL AS gdouble PTR, BYVAL AS gdouble PTR, BYVAL AS gdouble PTR)
DECLARE SUB gtk_hsv_get_metrics(BYVAL AS GtkHSV PTR, BYVAL AS gint PTR, BYVAL AS gint PTR)
DECLARE FUNCTION gtk_hsv_is_adjusting(BYVAL AS GtkHSV PTR) AS gboolean
DECLARE SUB gtk_hsv_set_color(BYVAL AS GtkHSV PTR, BYVAL AS double, BYVAL AS double, BYVAL AS double)
DECLARE SUB gtk_hsv_set_metrics(BYVAL AS GtkHSV PTR, BYVAL AS gint, BYVAL AS gint)
TYPE _GtkHSVClass
  AS GtkWidgetClass parent_class
  changed AS SUB CDECL(BYVAL AS GtkHSV PTR)
  move AS SUB CDECL(BYVAL AS GtkHSV PTR, BYVAL AS GtkDirectionType)
  _gtk_reserved1 AS SUB CDECL()
  _gtk_reserved2 AS SUB CDECL()
  _gtk_reserved3 AS SUB CDECL()
  _gtk_reserved4 AS SUB CDECL()
END TYPE
TYPE _GtkHScale
  AS GtkScale scale
END TYPE
DECLARE FUNCTION gtk_hscale_get_type() AS GType
#DEFINE GTK_TYPE_HSCALE (gtk_hscale_get_type())
#DEFINE GTK_HSCALE(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_HSCALE, GtkHScale))
#DEFINE GTK_HSCALE_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_HSCALE, GtkHScaleClass))
#DEFINE GTK_IS_HSCALE(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_HSCALE))
#DEFINE GTK_IS_CLASS_HSCALE(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_HSCALE))
#DEFINE GTK_HSCALE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_HSCALE, GtkHScaleClass))
DECLARE FUNCTION gtk_hscale_new(BYVAL AS GtkAdjustment PTR) AS GtkWidget PTR
DECLARE FUNCTION gtk_hscale_new_with_range(BYVAL AS gdouble, BYVAL AS gdouble, BYVAL AS gdouble) AS GtkWidget PTR
TYPE _GtkHScaleClass
  AS GtkScaleClass parent_class
END TYPE
TYPE _GtkHScrollbar
  AS GtkScrollbar scrollbar
END TYPE
DECLARE FUNCTION gtk_hscrollbar_get_type() AS GType
#DEFINE GTK_TYPE_HSCROLLBAR (gtk_hscrollbar_get_type())
#DEFINE GTK_HSCROLLBAR(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_HSCROLLBAR, GtkHScrollbar))
#DEFINE GTK_HSCROLLBAR_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_HSCROLLBAR, GtkHScrollbarClass))
#DEFINE GTK_IS_HSCROLLBAR(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_HSCROLLBAR))
#DEFINE GTK_IS_CLASS_HSCROLLBAR(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_HSCROLLBAR))
#DEFINE GTK_HSCROLLBAR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_HSCROLLBAR, GtkHScrollbarClass))
DECLARE FUNCTION gtk_hscrollbar_new(BYVAL AS GtkAdjustment PTR) AS GtkWidget PTR
TYPE _GtkHScrollbarClass
  AS GtkScrollbarClass parent_class
END TYPE
TYPE _GtkHSeparator
  AS GtkSeparator separator
END TYPE
DECLARE FUNCTION gtk_hseparator_get_type() AS GType
#DEFINE GTK_TYPE_HSEPARATOR (gtk_hseparator_get_type())
#DEFINE GTK_HSEPARATOR(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_HSEPARATOR, GtkHSeparator))
#DEFINE GTK_HSEPARATOR_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_HSEPARATOR, GtkHSeparatorClass))
#DEFINE GTK_IS_HSEPARATOR(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_HSEPARATOR))
#DEFINE GTK_IS_CLASS_HSEPARATOR(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_HSEPARATOR))
#DEFINE GTK_HSEPARATOR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_HSEPARATOR, GtkHSeparatorClass))
DECLARE FUNCTION gtk_hseparator_new() AS GtkWidget PTR
TYPE _GtkHSeparatorClass
  AS GtkSeparatorClass parent_class
END TYPE
TYPE _GtkHandleBox
  AS GtkBin bin
  AS GtkHandleBoxPrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_handle_box_get_type() AS GType
#DEFINE GTK_TYPE_HANDLE_BOX (gtk_handle_box_get_type())
#DEFINE GTK_HANDLE_BOX(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_HANDLE_BOX, GtkHandleBox))
#DEFINE GTK_HANDLE_BOX_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_HANDLE_BOX, GtkHandleBoxClass))
#DEFINE GTK_IS_HANDLE_BOX(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_HANDLE_BOX))
#DEFINE GTK_IS_CLASS_HANDLE_BOX(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_HANDLE_BOX))
#DEFINE GTK_HANDLE_BOX_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_HANDLE_BOX, GtkHandleBoxClass))
DECLARE FUNCTION gtk_handle_box_new() AS GtkWidget PTR
DECLARE FUNCTION gtk_handle_box_get_child_detached(BYVAL AS GtkHandleBox PTR) AS gboolean
DECLARE FUNCTION gtk_handle_box_get_handle_position(BYVAL AS GtkHandleBox PTR) AS GtkPositionType
DECLARE FUNCTION gtk_handle_box_get_shadow_type(BYVAL AS GtkHandleBox PTR) AS GtkShadowType
DECLARE FUNCTION gtk_handle_box_get_snap_edge(BYVAL AS GtkHandleBox PTR) AS GtkPositionType
DECLARE SUB gtk_handle_box_set_handle_position(BYVAL AS GtkHandleBox PTR, BYVAL AS GtkPositionType)
DECLARE SUB gtk_handle_box_set_shadow_type(BYVAL AS GtkHandleBox PTR, BYVAL AS GtkShadowType)
DECLARE SUB gtk_handle_box_set_snap_edge(BYVAL AS GtkHandleBox PTR, BYVAL AS GtkPositionType)
TYPE _GtkHandleBoxClass
  AS GtkBinClass parent_class
  child_attached AS SUB CDECL(BYVAL AS GtkHandleBox PTR, BYVAL AS GtkWidget PTR)
  child_detached AS SUB CDECL(BYVAL AS GtkHandleBox PTR, BYVAL AS GtkWidget PTR)
  _gtk_reserved1 AS SUB CDECL()
  _gtk_reserved2 AS SUB CDECL()
  _gtk_reserved3 AS SUB CDECL()
  _gtk_reserved4 AS SUB CDECL()
END TYPE
TYPE _GtkHeaderBar
  AS GtkContainer container
END TYPE
DECLARE FUNCTION gtk_header_bar_get_type() AS GType
#DEFINE GTK_TYPE_HEADER_BAR (gtk_header_bar_get_type())
#DEFINE GTK_HEADER_BAR(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_HEADER_BAR, GtkHeaderBar))
#DEFINE GTK_HEADER_BAR_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_HEADER_BAR, GtkHeaderBarClass))
#DEFINE GTK_IS_HEADER_BAR(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_HEADER_BAR))
#DEFINE GTK_IS_CLASS_HEADER_BAR(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_HEADER_BAR))
#DEFINE GTK_HEADER_BAR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_HEADER_BAR, GtkHeaderBarClass))
DECLARE FUNCTION gtk_header_bar_new() AS GtkWidget PTR
DECLARE FUNCTION gtk_header_bar_get_custom_title(BYVAL AS GtkHeaderBar PTR) AS GtkWidget PTR
DECLARE FUNCTION gtk_header_bar_get_decoration_layout(BYVAL AS GtkHeaderBar PTR) AS const gchar PTR
DECLARE FUNCTION gtk_header_bar_get_has_subtitle(BYVAL AS GtkHeaderBar PTR) AS gboolean
DECLARE FUNCTION gtk_header_bar_get_show_close_button(BYVAL AS GtkHeaderBar PTR) AS gboolean
DECLARE FUNCTION gtk_header_bar_get_subtitle(BYVAL AS GtkHeaderBar PTR) AS const gchar PTR
DECLARE FUNCTION gtk_header_bar_get_title(BYVAL AS GtkHeaderBar PTR) AS const gchar PTR
DECLARE SUB gtk_header_bar_pack_end(BYVAL AS GtkHeaderBar PTR, BYVAL AS GtkWidget PTR)
DECLARE SUB gtk_header_bar_pack_start(BYVAL AS GtkHeaderBar PTR, BYVAL AS GtkWidget PTR)
DECLARE SUB gtk_header_bar_set_custom_title(BYVAL AS GtkHeaderBar PTR, BYVAL AS GtkWidget PTR)
DECLARE SUB gtk_header_bar_set_decoration_layout(BYVAL AS GtkHeaderBar PTR, BYVAL AS const gchar PTR)
DECLARE SUB gtk_header_bar_set_has_subtitle(BYVAL AS GtkHeaderBar PTR, BYVAL AS gboolean)
DECLARE SUB gtk_header_bar_set_show_close_button(BYVAL AS GtkHeaderBar PTR, BYVAL AS gboolean)
DECLARE SUB gtk_header_bar_set_subtitle(BYVAL AS GtkHeaderBar PTR, BYVAL AS const gchar PTR)
DECLARE SUB gtk_header_bar_set_title(BYVAL AS GtkHeaderBar PTR, BYVAL AS const gchar PTR)
TYPE _GtkHeaderBarAccessible
  AS GtkContainerAccessible parent
END TYPE
DECLARE FUNCTION gtk_header_bar_accessible_get_type() AS GType
#DEFINE GTK_TYPE_HEADER_BAR_ACCESSIBLE (gtk_header_bar_accessible_get_type())
#DEFINE GTK_HEADER_BAR_ACCESSIBLE(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_HEADER_BAR_ACCESSIBLE, GtkHeaderBarAccessible))
#DEFINE GTK_HEADER_BAR_ACCESSIBLE_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_HEADER_BAR_ACCESSIBLE, GtkHeaderBarAccessibleClass))
#DEFINE GTK_IS_HEADER_BAR_ACCESSIBLE(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_HEADER_BAR_ACCESSIBLE))
#DEFINE GTK_IS_CLASS_HEADER_BAR_ACCESSIBLE(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_HEADER_BAR_ACCESSIBLE))
#DEFINE GTK_HEADER_BAR_ACCESSIBLE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_HEADER_BAR_ACCESSIBLE, GtkHeaderBarAccessibleClass))
TYPE _GtkHeaderBarAccessibleClass
  AS GtkContainerAccessibleClass parent_class
END TYPE
TYPE _GtkHeaderBarClass
  AS GtkContainerClass parent_class
  _gtk_reserved1 AS SUB CDECL()
  _gtk_reserved2 AS SUB CDECL()
  _gtk_reserved3 AS SUB CDECL()
  _gtk_reserved4 AS SUB CDECL()
END TYPE
TYPE _GtkIMContext
  AS GObject parent_instance
END TYPE
DECLARE FUNCTION gtk_im_context_get_type() AS GType
#DEFINE GTK_TYPE_IM_CONTEXT (gtk_im_context_get_type())
#DEFINE GTK_IM_CONTEXT(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_IM_CONTEXT, GtkIMContext))
#DEFINE GTK_IM_CONTEXT_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_IM_CONTEXT, GtkIMContextClass))
#DEFINE GTK_IS_IM_CONTEXT(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_IM_CONTEXT))
#DEFINE GTK_IS_CLASS_IM_CONTEXT(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_IM_CONTEXT))
#DEFINE GTK_IM_CONTEXT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_IM_CONTEXT, GtkIMContextClass))
DECLARE FUNCTION gtk_im_context_delete_surrounding(BYVAL AS GtkIMContext PTR, BYVAL AS gint, BYVAL AS gint) AS gboolean
DECLARE FUNCTION gtk_im_context_filter_keypress(BYVAL AS GtkIMContext PTR, BYVAL AS GdkEventKey PTR) AS gboolean
DECLARE SUB gtk_im_context_focus_in(BYVAL AS GtkIMContext PTR)
DECLARE SUB gtk_im_context_focus_out(BYVAL AS GtkIMContext PTR)
DECLARE SUB gtk_im_context_get_preedit_string(BYVAL AS GtkIMContext PTR, BYVAL AS gchar PTR PTR, BYVAL AS PangoAttrList PTR PTR, BYVAL AS gint PTR)
DECLARE FUNCTION gtk_im_context_get_surrounding(BYVAL AS GtkIMContext PTR, BYVAL AS gchar PTR PTR, BYVAL AS gint PTR) AS gboolean
DECLARE SUB gtk_im_context_reset(BYVAL AS GtkIMContext PTR)
DECLARE SUB gtk_im_context_set_client_window(BYVAL AS GtkIMContext PTR, BYVAL AS GdkWindow PTR)
DECLARE SUB gtk_im_context_set_cursor_location(BYVAL AS GtkIMContext PTR, BYVAL AS const GdkRectangle PTR)
DECLARE SUB gtk_im_context_set_surrounding(BYVAL AS GtkIMContext PTR, BYVAL AS const gchar PTR, BYVAL AS gint, BYVAL AS gint)
DECLARE SUB gtk_im_context_set_use_preedit(BYVAL AS GtkIMContext PTR, BYVAL AS gboolean)
TYPE _GtkIMContextClass
  AS GObjectClass parent_class
  preedit_start AS SUB CDECL(BYVAL AS GtkIMContext PTR)
  preedit_end AS SUB CDECL(BYVAL AS GtkIMContext PTR)
  preedit_changed AS SUB CDECL(BYVAL AS GtkIMContext PTR)
  commit AS SUB CDECL(BYVAL AS GtkIMContext PTR, BYVAL AS const gchar PTR)
  retrieve_surrounding AS FUNCTION CDECL(BYVAL AS GtkIMContext PTR) AS gboolean
  delete_surrounding AS FUNCTION CDECL(BYVAL AS GtkIMContext PTR, BYVAL AS gint, BYVAL AS gint) AS gboolean
  set_client_window AS SUB CDECL(BYVAL AS GtkIMContext PTR, BYVAL AS GdkWindow PTR)
  get_preedit_string AS SUB CDECL(BYVAL AS GtkIMContext PTR, BYVAL AS gchar PTR PTR, BYVAL AS PangoAttrList PTR PTR, BYVAL AS gint PTR)
  filter_keypress AS FUNCTION CDECL(BYVAL AS GtkIMContext PTR, BYVAL AS GdkEventKey PTR) AS gboolean
  focus_in AS SUB CDECL(BYVAL AS GtkIMContext PTR)
  focus_out AS SUB CDECL(BYVAL AS GtkIMContext PTR)
  reset AS SUB CDECL(BYVAL AS GtkIMContext PTR)
  set_cursor_location AS SUB CDECL(BYVAL AS GtkIMContext PTR, BYVAL AS GdkRectangle PTR)
  set_use_preedit AS SUB CDECL(BYVAL AS GtkIMContext PTR, BYVAL AS gboolean)
  set_surrounding AS SUB CDECL(BYVAL AS GtkIMContext PTR, BYVAL AS const gchar PTR, BYVAL AS gint, BYVAL AS gint)
  get_surrounding AS FUNCTION CDECL(BYVAL AS GtkIMContext PTR, BYVAL AS gchar PTR PTR, BYVAL AS gint PTR) AS gboolean
  _gtk_reserved1 AS SUB CDECL()
  _gtk_reserved2 AS SUB CDECL()
  _gtk_reserved3 AS SUB CDECL()
  _gtk_reserved4 AS SUB CDECL()
  _gtk_reserved5 AS SUB CDECL()
  _gtk_reserved6 AS SUB CDECL()
END TYPE
TYPE _GtkIMContextInfo
  AS const gchar PTR context_id
  AS const gchar PTR context_name
  AS const gchar PTR domain
  AS const gchar PTR domain_dirname
  AS const gchar PTR default_locales
END TYPE
TYPE _GtkIMContextSimple
  AS GtkIMContext object
  AS GtkIMContextSimplePrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_im_context_simple_get_type() AS GType
#DEFINE GTK_TYPE_IM_CONTEXT_SIMPLE (gtk_im_context_simple_get_type())
#DEFINE GTK_IM_CONTEXT_SIMPLE(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_IM_CONTEXT_SIMPLE, GtkIMContextSimple))
#DEFINE GTK_IM_CONTEXT_SIMPLE_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_IM_CONTEXT_SIMPLE, GtkIMContextSimpleClass))
#DEFINE GTK_IS_IM_CONTEXT_SIMPLE(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_IM_CONTEXT_SIMPLE))
#DEFINE GTK_IS_CLASS_IM_CONTEXT_SIMPLE(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_IM_CONTEXT_SIMPLE))
#DEFINE GTK_IM_CONTEXT_SIMPLE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_IM_CONTEXT_SIMPLE, GtkIMContextSimpleClass))
DECLARE FUNCTION gtk_im_context_simple_new() AS GtkIMContext PTR
DECLARE SUB gtk_im_context_simple_add_compose_file(BYVAL AS GtkIMContextSimple PTR, BYVAL AS const gchar PTR)
DECLARE SUB gtk_im_context_simple_add_table(BYVAL AS GtkIMContextSimple PTR, BYVAL AS guint16 PTR, BYVAL AS gint, BYVAL AS gint)
TYPE _GtkIMContextSimpleClass
  AS GtkIMContextClass parent_class
END TYPE
TYPE _GtkIMMulticontext
  AS GtkIMContext object
  AS GtkIMMulticontextPrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_im_multicontext_get_type() AS GType
#DEFINE GTK_TYPE_IM_MULTICONTEXT (gtk_im_multicontext_get_type())
#DEFINE GTK_IM_MULTICONTEXT(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_IM_MULTICONTEXT, GtkIMMulticontext))
#DEFINE GTK_IM_MULTICONTEXT_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_IM_MULTICONTEXT, GtkIMMulticontextClass))
#DEFINE GTK_IS_IM_MULTICONTEXT(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_IM_MULTICONTEXT))
#DEFINE GTK_IS_CLASS_IM_MULTICONTEXT(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_IM_MULTICONTEXT))
#DEFINE GTK_IM_MULTICONTEXT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_IM_MULTICONTEXT, GtkIMMulticontextClass))
DECLARE FUNCTION gtk_im_multicontext_new() AS GtkIMContext PTR
DECLARE SUB gtk_im_multicontext_append_menuitems(BYVAL AS GtkIMMulticontext PTR, BYVAL AS GtkMenuShell PTR)
DECLARE FUNCTION gtk_im_multicontext_get_context_id(BYVAL AS GtkIMMulticontext PTR) AS const char PTR
DECLARE SUB gtk_im_multicontext_set_context_id(BYVAL AS GtkIMMulticontext PTR, BYVAL AS const char PTR)
TYPE _GtkIMMulticontextClass
  AS GtkIMContextClass parent_class
  _gtk_reserved1 AS SUB CDECL()
  _gtk_reserved2 AS SUB CDECL()
  _gtk_reserved3 AS SUB CDECL()
  _gtk_reserved4 AS SUB CDECL()
END TYPE
TYPE _GtkIconFactory
  AS GObject parent_instance
  AS GtkIconFactoryPrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_im_preedit_style_get_type() AS GType
#DEFINE GTK_TYPE_IM_PREEDIT_STYLE (gtk_im_preedit_style_get_type())
DECLARE FUNCTION gtk_im_status_style_get_type() AS GType
#DEFINE GTK_TYPE_IM_STATUS_STYLE (gtk_im_status_style_get_type())
DECLARE FUNCTION gtk_icon_factory_get_type() AS GType
#DEFINE GTK_TYPE_ICON_FACTORY (gtk_icon_factory_get_type())
#DEFINE GTK_ICON_FACTORY(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_ICON_FACTORY, GtkIconFactory))
#DEFINE GTK_ICON_FACTORY_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_ICON_FACTORY, GtkIconFactoryClass))
#DEFINE GTK_IS_ICON_FACTORY(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_ICON_FACTORY))
#DEFINE GTK_IS_CLASS_ICON_FACTORY(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_ICON_FACTORY))
#DEFINE GTK_ICON_FACTORY_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_ICON_FACTORY, GtkIconFactoryClass))
DECLARE FUNCTION gtk_icon_factory_new() AS GtkIconFactory PTR
DECLARE FUNCTION gtk_icon_factory_lookup_default(BYVAL AS const gchar PTR) AS GtkIconSet PTR
DECLARE SUB gtk_icon_factory_add(BYVAL AS GtkIconFactory PTR, BYVAL AS const gchar PTR, BYVAL AS GtkIconSet PTR)
DECLARE SUB gtk_icon_factory_add_default(BYVAL AS GtkIconFactory PTR)
DECLARE FUNCTION gtk_icon_factory_lookup(BYVAL AS GtkIconFactory PTR, BYVAL AS const gchar PTR) AS GtkIconSet PTR
DECLARE SUB gtk_icon_factory_remove_default(BYVAL AS GtkIconFactory PTR)
TYPE _GtkIconFactoryClass
  AS GObjectClass parent_class
  _gtk_reserved1 AS SUB CDECL()
  _gtk_reserved2 AS SUB CDECL()
  _gtk_reserved3 AS SUB CDECL()
  _gtk_reserved4 AS SUB CDECL()
END TYPE
DECLARE FUNCTION gtk_icon_info_get_type() AS GType
#DEFINE GTK_TYPE_ICON_INFO (gtk_icon_info_get_type())
#DEFINE GTK_ICON_INFO(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_ICON_INFO, GtkIconInfo))
#DEFINE GTK_ICON_INFO_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_ICON_INFO, GtkIconInfoClass))
#DEFINE GTK_IS_ICON_INFO(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_ICON_INFO))
#DEFINE GTK_IS_CLASS_ICON_INFO(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_ICON_INFO))
#DEFINE GTK_ICON_INFO_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_ICON_INFO, GtkIconInfoClass))
DECLARE FUNCTION gtk_icon_info_new_for_pixbuf(BYVAL AS GtkIconTheme PTR, BYVAL AS GdkPixbuf PTR) AS GtkIconInfo PTR
DECLARE FUNCTION gtk_icon_info_copy(BYVAL AS GtkIconInfo PTR) AS GtkIconInfo PTR
DECLARE SUB gtk_icon_info_free(BYVAL AS GtkIconInfo PTR)
DECLARE FUNCTION gtk_icon_info_get_attach_points(BYVAL AS GtkIconInfo PTR, BYVAL AS GdkPoint PTR PTR, BYVAL AS gint PTR) AS gboolean
DECLARE FUNCTION gtk_icon_info_get_base_scale(BYVAL AS GtkIconInfo PTR) AS gint
DECLARE FUNCTION gtk_icon_info_get_base_size(BYVAL AS GtkIconInfo PTR) AS gint
DECLARE FUNCTION gtk_icon_info_get_builtin_pixbuf(BYVAL AS GtkIconInfo PTR) AS GdkPixbuf PTR
DECLARE FUNCTION gtk_icon_info_get_display_name(BYVAL AS GtkIconInfo PTR) AS const gchar PTR
DECLARE FUNCTION gtk_icon_info_get_embedded_rect(BYVAL AS GtkIconInfo PTR, BYVAL AS GdkRectangle PTR) AS gboolean
DECLARE FUNCTION gtk_icon_info_get_filename(BYVAL AS GtkIconInfo PTR) AS const gchar PTR
DECLARE FUNCTION gtk_icon_info_is_symbolic(BYVAL AS GtkIconInfo PTR) AS gboolean
DECLARE FUNCTION gtk_icon_info_load_icon(BYVAL AS GtkIconInfo PTR, BYVAL AS GError PTR PTR) AS GdkPixbuf PTR
DECLARE SUB gtk_icon_info_load_icon_async(BYVAL AS GtkIconInfo PTR, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
DECLARE FUNCTION gtk_icon_info_load_icon_finish(BYVAL AS GtkIconInfo PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS GdkPixbuf PTR
DECLARE FUNCTION gtk_icon_info_load_surface(BYVAL AS GtkIconInfo PTR, BYVAL AS GdkWindow PTR, BYVAL AS GError PTR PTR) AS cairo_surface_t PTR
DECLARE FUNCTION gtk_icon_info_load_symbolic(BYVAL AS GtkIconInfo PTR, BYVAL AS const GdkRGBA PTR, BYVAL AS const GdkRGBA PTR, BYVAL AS const GdkRGBA PTR, BYVAL AS const GdkRGBA PTR, BYVAL AS gboolean PTR, BYVAL AS GError PTR PTR) AS GdkPixbuf PTR
DECLARE SUB gtk_icon_info_load_symbolic_async(BYVAL AS GtkIconInfo PTR, BYVAL AS const GdkRGBA PTR, BYVAL AS const GdkRGBA PTR, BYVAL AS const GdkRGBA PTR, BYVAL AS const GdkRGBA PTR, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
DECLARE FUNCTION gtk_icon_info_load_symbolic_finish(BYVAL AS GtkIconInfo PTR, BYVAL AS GAsyncResult PTR, BYVAL AS gboolean PTR, BYVAL AS GError PTR PTR) AS GdkPixbuf PTR
DECLARE FUNCTION gtk_icon_info_load_symbolic_for_context(BYVAL AS GtkIconInfo PTR, BYVAL AS GtkStyleContext PTR, BYVAL AS gboolean PTR, BYVAL AS GError PTR PTR) AS GdkPixbuf PTR
DECLARE SUB gtk_icon_info_load_symbolic_for_context_async(BYVAL AS GtkIconInfo PTR, BYVAL AS GtkStyleContext PTR, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
DECLARE FUNCTION gtk_icon_info_load_symbolic_for_context_finish(BYVAL AS GtkIconInfo PTR, BYVAL AS GAsyncResult PTR, BYVAL AS gboolean PTR, BYVAL AS GError PTR PTR) AS GdkPixbuf PTR
DECLARE FUNCTION gtk_icon_info_load_symbolic_for_style(BYVAL AS GtkIconInfo PTR, BYVAL AS GtkStyle PTR, BYVAL AS GtkStateType, BYVAL AS gboolean PTR, BYVAL AS GError PTR PTR) AS GdkPixbuf PTR
DECLARE SUB gtk_icon_info_set_raw_coordinates(BYVAL AS GtkIconInfo PTR, BYVAL AS gboolean)
DECLARE FUNCTION gtk_icon_set_new() AS GtkIconSet PTR
DECLARE FUNCTION gtk_icon_set_new_from_pixbuf(BYVAL AS GdkPixbuf PTR) AS GtkIconSet PTR
DECLARE SUB gtk_icon_set_add_source(BYVAL AS GtkIconSet PTR, BYVAL AS const GtkIconSource PTR)
DECLARE FUNCTION gtk_icon_set_copy(BYVAL AS GtkIconSet PTR) AS GtkIconSet PTR
DECLARE SUB gtk_icon_set_get_sizes(BYVAL AS GtkIconSet PTR, BYVAL AS GtkIconSize PTR PTR, BYVAL AS gint PTR)
DECLARE FUNCTION gtk_icon_set_ref(BYVAL AS GtkIconSet PTR) AS GtkIconSet PTR
DECLARE FUNCTION gtk_icon_set_render_icon(BYVAL AS GtkIconSet PTR, BYVAL AS GtkStyle PTR, BYVAL AS GtkTextDirection, BYVAL AS GtkStateType, BYVAL AS GtkIconSize, BYVAL AS GtkWidget PTR, BYVAL AS const gchar PTR) AS GdkPixbuf PTR
DECLARE FUNCTION gtk_icon_set_render_icon_pixbuf(BYVAL AS GtkIconSet PTR, BYVAL AS GtkStyleContext PTR, BYVAL AS GtkIconSize) AS GdkPixbuf PTR
DECLARE FUNCTION gtk_icon_set_render_icon_surface(BYVAL AS GtkIconSet PTR, BYVAL AS GtkStyleContext PTR, BYVAL AS GtkIconSize, BYVAL AS gint /'int'/, BYVAL AS GdkWindow PTR) AS cairo_surface_t PTR
DECLARE SUB gtk_icon_set_unref(BYVAL AS GtkIconSet PTR)
DECLARE FUNCTION gtk_icon_size_get_type() AS GType
#DEFINE GTK_TYPE_ICON_SIZE (gtk_icon_size_get_type())
DECLARE FUNCTION gtk_icon_source_new() AS GtkIconSource PTR
DECLARE FUNCTION gtk_icon_source_copy(BYVAL AS const GtkIconSource PTR) AS GtkIconSource PTR
DECLARE SUB gtk_icon_source_free(BYVAL AS GtkIconSource PTR)
DECLARE FUNCTION gtk_icon_source_get_direction(BYVAL AS const GtkIconSource PTR) AS GtkTextDirection
DECLARE FUNCTION gtk_icon_source_get_direction_wildcarded(BYVAL AS const GtkIconSource PTR) AS gboolean
DECLARE FUNCTION gtk_icon_source_get_filename(BYVAL AS const GtkIconSource PTR) AS const gchar PTR
DECLARE FUNCTION gtk_icon_source_get_icon_name(BYVAL AS const GtkIconSource PTR) AS const gchar PTR
DECLARE FUNCTION gtk_icon_source_get_pixbuf(BYVAL AS const GtkIconSource PTR) AS GdkPixbuf PTR
DECLARE FUNCTION gtk_icon_source_get_size(BYVAL AS const GtkIconSource PTR) AS GtkIconSize
DECLARE FUNCTION gtk_icon_source_get_size_wildcarded(BYVAL AS const GtkIconSource PTR) AS gboolean
DECLARE FUNCTION gtk_icon_source_get_state(BYVAL AS const GtkIconSource PTR) AS GtkStateType
DECLARE FUNCTION gtk_icon_source_get_state_wildcarded(BYVAL AS const GtkIconSource PTR) AS gboolean
DECLARE SUB gtk_icon_source_set_direction(BYVAL AS GtkIconSource PTR, BYVAL AS GtkTextDirection)
DECLARE SUB gtk_icon_source_set_direction_wildcarded(BYVAL AS GtkIconSource PTR, BYVAL AS gboolean)
DECLARE SUB gtk_icon_source_set_filename(BYVAL AS GtkIconSource PTR, BYVAL AS const gchar PTR)
DECLARE SUB gtk_icon_source_set_icon_name(BYVAL AS GtkIconSource PTR, BYVAL AS const gchar PTR)
DECLARE SUB gtk_icon_source_set_pixbuf(BYVAL AS GtkIconSource PTR, BYVAL AS GdkPixbuf PTR)
DECLARE SUB gtk_icon_source_set_size(BYVAL AS GtkIconSource PTR, BYVAL AS GtkIconSize)
DECLARE SUB gtk_icon_source_set_size_wildcarded(BYVAL AS GtkIconSource PTR, BYVAL AS gboolean)
DECLARE SUB gtk_icon_source_set_state(BYVAL AS GtkIconSource PTR, BYVAL AS GtkStateType)
DECLARE SUB gtk_icon_source_set_state_wildcarded(BYVAL AS GtkIconSource PTR, BYVAL AS gboolean)
TYPE _GtkIconTheme
  AS GObject parent_instance
  AS GtkIconThemePrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_icon_theme_get_type() AS GType
#DEFINE GTK_TYPE_ICON_THEME (gtk_icon_theme_get_type())
#DEFINE GTK_ICON_THEME(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_ICON_THEME, GtkIconTheme))
#DEFINE GTK_ICON_THEME_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_ICON_THEME, GtkIconThemeClass))
#DEFINE GTK_IS_ICON_THEME(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_ICON_THEME))
#DEFINE GTK_IS_CLASS_ICON_THEME(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_ICON_THEME))
#DEFINE GTK_ICON_THEME_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_ICON_THEME, GtkIconThemeClass))
DECLARE FUNCTION gtk_icon_theme_new() AS GtkIconTheme PTR
DECLARE SUB gtk_icon_theme_add_builtin_icon(BYVAL AS const gchar PTR, BYVAL AS gint, BYVAL AS GdkPixbuf PTR)
DECLARE FUNCTION gtk_icon_theme_get_default() AS GtkIconTheme PTR
DECLARE FUNCTION gtk_icon_theme_get_for_screen(BYVAL AS GdkScreen PTR) AS GtkIconTheme PTR
DECLARE SUB gtk_icon_theme_add_resource_path(BYVAL AS GtkIconTheme PTR, BYVAL AS const gchar PTR)
DECLARE SUB gtk_icon_theme_append_search_path(BYVAL AS GtkIconTheme PTR, BYVAL AS const gchar PTR)
DECLARE FUNCTION gtk_icon_theme_choose_icon(BYVAL AS GtkIconTheme PTR, BYVAL AS const gchar PTR PTR, BYVAL AS gint, BYVAL AS GtkIconLookupFlags) AS GtkIconInfo PTR
DECLARE FUNCTION gtk_icon_theme_choose_icon_for_scale(BYVAL AS GtkIconTheme PTR, BYVAL AS const gchar PTR PTR, BYVAL AS gint, BYVAL AS gint, BYVAL AS GtkIconLookupFlags) AS GtkIconInfo PTR
DECLARE FUNCTION gtk_icon_theme_get_example_icon_name(BYVAL AS GtkIconTheme PTR) AS char PTR
DECLARE FUNCTION gtk_icon_theme_get_icon_sizes(BYVAL AS GtkIconTheme PTR, BYVAL AS const gchar PTR) AS gint PTR
DECLARE SUB gtk_icon_theme_get_search_path(BYVAL AS GtkIconTheme PTR, BYVAL AS gchar PTR PTR PTR, BYVAL AS gint PTR)
DECLARE FUNCTION gtk_icon_theme_has_icon(BYVAL AS GtkIconTheme PTR, BYVAL AS const gchar PTR) AS gboolean
DECLARE FUNCTION gtk_icon_theme_list_contexts(BYVAL AS GtkIconTheme PTR) AS GList PTR
DECLARE FUNCTION gtk_icon_theme_list_icons(BYVAL AS GtkIconTheme PTR, BYVAL AS const gchar PTR) AS GList PTR
DECLARE FUNCTION gtk_icon_theme_load_icon(BYVAL AS GtkIconTheme PTR, BYVAL AS const gchar PTR, BYVAL AS gint, BYVAL AS GtkIconLookupFlags, BYVAL AS GError PTR PTR) AS GdkPixbuf PTR
DECLARE FUNCTION gtk_icon_theme_load_icon_for_scale(BYVAL AS GtkIconTheme PTR, BYVAL AS const gchar PTR, BYVAL AS gint, BYVAL AS gint, BYVAL AS GtkIconLookupFlags, BYVAL AS GError PTR PTR) AS GdkPixbuf PTR
DECLARE FUNCTION gtk_icon_theme_load_surface(BYVAL AS GtkIconTheme PTR, BYVAL AS const gchar PTR, BYVAL AS gint, BYVAL AS gint, BYVAL AS GdkWindow PTR, BYVAL AS GtkIconLookupFlags, BYVAL AS GError PTR PTR) AS cairo_surface_t PTR
DECLARE FUNCTION gtk_icon_theme_lookup_by_gicon(BYVAL AS GtkIconTheme PTR, BYVAL AS GIcon PTR, BYVAL AS gint, BYVAL AS GtkIconLookupFlags) AS GtkIconInfo PTR
DECLARE FUNCTION gtk_icon_theme_lookup_by_gicon_for_scale(BYVAL AS GtkIconTheme PTR, BYVAL AS GIcon PTR, BYVAL AS gint, BYVAL AS gint, BYVAL AS GtkIconLookupFlags) AS GtkIconInfo PTR
DECLARE FUNCTION gtk_icon_theme_lookup_icon(BYVAL AS GtkIconTheme PTR, BYVAL AS const gchar PTR, BYVAL AS gint, BYVAL AS GtkIconLookupFlags) AS GtkIconInfo PTR
DECLARE FUNCTION gtk_icon_theme_lookup_icon_for_scale(BYVAL AS GtkIconTheme PTR, BYVAL AS const gchar PTR, BYVAL AS gint, BYVAL AS gint, BYVAL AS GtkIconLookupFlags) AS GtkIconInfo PTR
DECLARE SUB gtk_icon_theme_prepend_search_path(BYVAL AS GtkIconTheme PTR, BYVAL AS const gchar PTR)
DECLARE FUNCTION gtk_icon_theme_rescan_if_needed(BYVAL AS GtkIconTheme PTR) AS gboolean
DECLARE SUB gtk_icon_theme_set_custom_theme(BYVAL AS GtkIconTheme PTR, BYVAL AS const gchar PTR)
DECLARE SUB gtk_icon_theme_set_screen(BYVAL AS GtkIconTheme PTR, BYVAL AS GdkScreen PTR)
DECLARE SUB gtk_icon_theme_set_search_path(BYVAL AS GtkIconTheme PTR, BYVAL AS const gchar PTR PTR, BYVAL AS gint)
TYPE _GtkIconThemeClass
  AS GObjectClass parent_class
  changed AS SUB CDECL(BYVAL AS GtkIconTheme PTR)
  _gtk_reserved1 AS SUB CDECL()
  _gtk_reserved2 AS SUB CDECL()
  _gtk_reserved3 AS SUB CDECL()
  _gtk_reserved4 AS SUB CDECL()
END TYPE
DECLARE FUNCTION gtk_icon_theme_error_get_type() AS GType
#DEFINE GTK_TYPE_ICON_THEME_ERROR (gtk_icon_theme_error_get_type())
TYPE _GtkIconView
  AS GtkContainer parent
  AS GtkIconViewPrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_icon_view_get_type() AS GType
#DEFINE GTK_TYPE_ICON_VIEW (gtk_icon_view_get_type())
#DEFINE GTK_ICON_VIEW(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_ICON_VIEW, GtkIconView))
#DEFINE GTK_ICON_VIEW_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_ICON_VIEW, GtkIconViewClass))
#DEFINE GTK_IS_ICON_VIEW(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_ICON_VIEW))
#DEFINE GTK_IS_CLASS_ICON_VIEW(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_ICON_VIEW))
#DEFINE GTK_ICON_VIEW_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_ICON_VIEW, GtkIconViewClass))
DECLARE FUNCTION gtk_icon_view_new() AS GtkWidget PTR
DECLARE FUNCTION gtk_icon_view_new_with_area(BYVAL AS GtkCellArea PTR) AS GtkWidget PTR
DECLARE FUNCTION gtk_icon_view_new_with_model(BYVAL AS GtkTreeModel PTR) AS GtkWidget PTR
DECLARE SUB gtk_icon_view_convert_widget_to_bin_window_coords(BYVAL AS GtkIconView PTR, BYVAL AS gint, BYVAL AS gint, BYVAL AS gint PTR, BYVAL AS gint PTR)
DECLARE FUNCTION gtk_icon_view_create_drag_icon(BYVAL AS GtkIconView PTR, BYVAL AS GtkTreePath PTR) AS cairo_surface_t PTR
DECLARE SUB gtk_icon_view_enable_model_drag_dest(BYVAL AS GtkIconView PTR, BYVAL AS const GtkTargetEntry PTR, BYVAL AS gint, BYVAL AS GdkDragAction)
DECLARE SUB gtk_icon_view_enable_model_drag_source(BYVAL AS GtkIconView PTR, BYVAL AS GdkModifierType, BYVAL AS const GtkTargetEntry PTR, BYVAL AS gint, BYVAL AS GdkDragAction)
DECLARE FUNCTION gtk_icon_view_get_activate_on_single_click(BYVAL AS GtkIconView PTR) AS gboolean
DECLARE FUNCTION gtk_icon_view_get_cell_rect(BYVAL AS GtkIconView PTR, BYVAL AS GtkTreePath PTR, BYVAL AS GtkCellRenderer PTR, BYVAL AS GdkRectangle PTR) AS gboolean
DECLARE FUNCTION gtk_icon_view_get_column_spacing(BYVAL AS GtkIconView PTR) AS gint
DECLARE FUNCTION gtk_icon_view_get_columns(BYVAL AS GtkIconView PTR) AS gint
DECLARE FUNCTION gtk_icon_view_get_cursor(BYVAL AS GtkIconView PTR, BYVAL AS GtkTreePath PTR PTR, BYVAL AS GtkCellRenderer PTR PTR) AS gboolean
DECLARE FUNCTION gtk_icon_view_get_dest_item_at_pos(BYVAL AS GtkIconView PTR, BYVAL AS gint, BYVAL AS gint, BYVAL AS GtkTreePath PTR PTR, BYVAL AS GtkIconViewDropPosition PTR) AS gboolean
DECLARE SUB gtk_icon_view_get_drag_dest_item(BYVAL AS GtkIconView PTR, BYVAL AS GtkTreePath PTR PTR, BYVAL AS GtkIconViewDropPosition PTR)
DECLARE FUNCTION gtk_icon_view_get_item_at_pos(BYVAL AS GtkIconView PTR, BYVAL AS gint, BYVAL AS gint, BYVAL AS GtkTreePath PTR PTR, BYVAL AS GtkCellRenderer PTR PTR) AS gboolean
DECLARE FUNCTION gtk_icon_view_get_item_column(BYVAL AS GtkIconView PTR, BYVAL AS GtkTreePath PTR) AS gint
DECLARE FUNCTION gtk_icon_view_get_item_orientation(BYVAL AS GtkIconView PTR) AS GtkOrientation
DECLARE FUNCTION gtk_icon_view_get_item_padding(BYVAL AS GtkIconView PTR) AS gint
DECLARE FUNCTION gtk_icon_view_get_item_row(BYVAL AS GtkIconView PTR, BYVAL AS GtkTreePath PTR) AS gint
DECLARE FUNCTION gtk_icon_view_get_item_width(BYVAL AS GtkIconView PTR) AS gint
DECLARE FUNCTION gtk_icon_view_get_margin(BYVAL AS GtkIconView PTR) AS gint
DECLARE FUNCTION gtk_icon_view_get_markup_column(BYVAL AS GtkIconView PTR) AS gint
DECLARE FUNCTION gtk_icon_view_get_model(BYVAL AS GtkIconView PTR) AS GtkTreeModel PTR
DECLARE FUNCTION gtk_icon_view_get_path_at_pos(BYVAL AS GtkIconView PTR, BYVAL AS gint, BYVAL AS gint) AS GtkTreePath PTR
DECLARE FUNCTION gtk_icon_view_get_pixbuf_column(BYVAL AS GtkIconView PTR) AS gint
DECLARE FUNCTION gtk_icon_view_get_reorderable(BYVAL AS GtkIconView PTR) AS gboolean
DECLARE FUNCTION gtk_icon_view_get_row_spacing(BYVAL AS GtkIconView PTR) AS gint
DECLARE FUNCTION gtk_icon_view_get_selected_items(BYVAL AS GtkIconView PTR) AS GList PTR
DECLARE FUNCTION gtk_icon_view_get_selection_mode(BYVAL AS GtkIconView PTR) AS GtkSelectionMode
DECLARE FUNCTION gtk_icon_view_get_spacing(BYVAL AS GtkIconView PTR) AS gint
DECLARE FUNCTION gtk_icon_view_get_text_column(BYVAL AS GtkIconView PTR) AS gint
DECLARE FUNCTION gtk_icon_view_get_tooltip_column(BYVAL AS GtkIconView PTR) AS gint
DECLARE FUNCTION gtk_icon_view_get_tooltip_context(BYVAL AS GtkIconView PTR, BYVAL AS gint PTR, BYVAL AS gint PTR, BYVAL AS gboolean, BYVAL AS GtkTreeModel PTR PTR, BYVAL AS GtkTreePath PTR PTR, BYVAL AS GtkTreeIter PTR) AS gboolean
DECLARE FUNCTION gtk_icon_view_get_visible_range(BYVAL AS GtkIconView PTR, BYVAL AS GtkTreePath PTR PTR, BYVAL AS GtkTreePath PTR PTR) AS gboolean
DECLARE SUB gtk_icon_view_item_activated(BYVAL AS GtkIconView PTR, BYVAL AS GtkTreePath PTR)
DECLARE FUNCTION gtk_icon_view_path_is_selected(BYVAL AS GtkIconView PTR, BYVAL AS GtkTreePath PTR) AS gboolean
DECLARE SUB gtk_icon_view_scroll_to_path(BYVAL AS GtkIconView PTR, BYVAL AS GtkTreePath PTR, BYVAL AS gboolean, BYVAL AS gfloat, BYVAL AS gfloat)
DECLARE SUB gtk_icon_view_select_all(BYVAL AS GtkIconView PTR)
DECLARE SUB gtk_icon_view_select_path(BYVAL AS GtkIconView PTR, BYVAL AS GtkTreePath PTR)
DECLARE SUB gtk_icon_view_selected_foreach(BYVAL AS GtkIconView PTR, BYVAL AS GtkIconViewForeachFunc, BYVAL AS gpointer)
DECLARE SUB gtk_icon_view_set_activate_on_single_click(BYVAL AS GtkIconView PTR, BYVAL AS gboolean)
DECLARE SUB gtk_icon_view_set_column_spacing(BYVAL AS GtkIconView PTR, BYVAL AS gint)
DECLARE SUB gtk_icon_view_set_columns(BYVAL AS GtkIconView PTR, BYVAL AS gint)
DECLARE SUB gtk_icon_view_set_cursor(BYVAL AS GtkIconView PTR, BYVAL AS GtkTreePath PTR, BYVAL AS GtkCellRenderer PTR, BYVAL AS gboolean)
DECLARE SUB gtk_icon_view_set_drag_dest_item(BYVAL AS GtkIconView PTR, BYVAL AS GtkTreePath PTR, BYVAL AS GtkIconViewDropPosition)
DECLARE SUB gtk_icon_view_set_item_orientation(BYVAL AS GtkIconView PTR, BYVAL AS GtkOrientation)
DECLARE SUB gtk_icon_view_set_item_padding(BYVAL AS GtkIconView PTR, BYVAL AS gint)
DECLARE SUB gtk_icon_view_set_item_width(BYVAL AS GtkIconView PTR, BYVAL AS gint)
DECLARE SUB gtk_icon_view_set_margin(BYVAL AS GtkIconView PTR, BYVAL AS gint)
DECLARE SUB gtk_icon_view_set_markup_column(BYVAL AS GtkIconView PTR, BYVAL AS gint)
DECLARE SUB gtk_icon_view_set_model(BYVAL AS GtkIconView PTR, BYVAL AS GtkTreeModel PTR)
DECLARE SUB gtk_icon_view_set_pixbuf_column(BYVAL AS GtkIconView PTR, BYVAL AS gint)
DECLARE SUB gtk_icon_view_set_reorderable(BYVAL AS GtkIconView PTR, BYVAL AS gboolean)
DECLARE SUB gtk_icon_view_set_row_spacing(BYVAL AS GtkIconView PTR, BYVAL AS gint)
DECLARE SUB gtk_icon_view_set_selection_mode(BYVAL AS GtkIconView PTR, BYVAL AS GtkSelectionMode)
DECLARE SUB gtk_icon_view_set_spacing(BYVAL AS GtkIconView PTR, BYVAL AS gint)
DECLARE SUB gtk_icon_view_set_text_column(BYVAL AS GtkIconView PTR, BYVAL AS gint)
DECLARE SUB gtk_icon_view_set_tooltip_cell(BYVAL AS GtkIconView PTR, BYVAL AS GtkTooltip PTR, BYVAL AS GtkTreePath PTR, BYVAL AS GtkCellRenderer PTR)
DECLARE SUB gtk_icon_view_set_tooltip_column(BYVAL AS GtkIconView PTR, BYVAL AS gint)
DECLARE SUB gtk_icon_view_set_tooltip_item(BYVAL AS GtkIconView PTR, BYVAL AS GtkTooltip PTR, BYVAL AS GtkTreePath PTR)
DECLARE SUB gtk_icon_view_unselect_all(BYVAL AS GtkIconView PTR)
DECLARE SUB gtk_icon_view_unselect_path(BYVAL AS GtkIconView PTR, BYVAL AS GtkTreePath PTR)
DECLARE SUB gtk_icon_view_unset_model_drag_dest(BYVAL AS GtkIconView PTR)
DECLARE SUB gtk_icon_view_unset_model_drag_source(BYVAL AS GtkIconView PTR)
TYPE _GtkIconViewAccessible
  AS GtkContainerAccessible parent
  AS GtkIconViewAccessiblePrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_icon_view_accessible_get_type() AS GType
#DEFINE GTK_TYPE_ICON_VIEW_ACCESSIBLE (gtk_icon_view_accessible_get_type())
#DEFINE GTK_ICON_VIEW_ACCESSIBLE(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_ICON_VIEW_ACCESSIBLE, GtkIconViewAccessible))
#DEFINE GTK_ICON_VIEW_ACCESSIBLE_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_ICON_VIEW_ACCESSIBLE, GtkIconViewAccessibleClass))
#DEFINE GTK_IS_ICON_VIEW_ACCESSIBLE(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_ICON_VIEW_ACCESSIBLE))
#DEFINE GTK_IS_CLASS_ICON_VIEW_ACCESSIBLE(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_ICON_VIEW_ACCESSIBLE))
#DEFINE GTK_ICON_VIEW_ACCESSIBLE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_ICON_VIEW_ACCESSIBLE, GtkIconViewAccessibleClass))
TYPE _GtkIconViewAccessibleClass
  AS GtkContainerAccessibleClass parent_class
END TYPE
TYPE _GtkIconViewClass
  AS GtkContainerClass parent_class
  item_activated AS SUB CDECL(BYVAL AS GtkIconView PTR, BYVAL AS GtkTreePath PTR)
  selection_changed AS SUB CDECL(BYVAL AS GtkIconView PTR)
  select_all AS SUB CDECL(BYVAL AS GtkIconView PTR)
  unselect_all AS SUB CDECL(BYVAL AS GtkIconView PTR)
  select_cursor_item AS SUB CDECL(BYVAL AS GtkIconView PTR)
  toggle_cursor_item AS SUB CDECL(BYVAL AS GtkIconView PTR)
  move_cursor AS FUNCTION CDECL(BYVAL AS GtkIconView PTR, BYVAL AS GtkMovementStep, BYVAL AS gint) AS gboolean
  activate_cursor_item AS FUNCTION CDECL(BYVAL AS GtkIconView PTR) AS gboolean
  _gtk_reserved1 AS SUB CDECL()
  _gtk_reserved2 AS SUB CDECL()
  _gtk_reserved3 AS SUB CDECL()
  _gtk_reserved4 AS SUB CDECL()
END TYPE
DECLARE FUNCTION gtk_icon_view_drop_position_get_type() AS GType
#DEFINE GTK_TYPE_ICON_VIEW_DROP_POSITION (gtk_icon_view_drop_position_get_type())
TYPE _GtkImage
  AS GtkMisc misc
  AS GtkImagePrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_image_get_type() AS GType
#DEFINE GTK_TYPE_IMAGE (gtk_image_get_type())
#DEFINE GTK_IMAGE(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_IMAGE, GtkImage))
#DEFINE GTK_IMAGE_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_IMAGE, GtkImageClass))
#DEFINE GTK_IS_IMAGE(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_IMAGE))
#DEFINE GTK_IS_CLASS_IMAGE(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_IMAGE))
#DEFINE GTK_IMAGE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_IMAGE, GtkImageClass))
DECLARE FUNCTION gtk_image_new() AS GtkWidget PTR
DECLARE FUNCTION gtk_image_new_from_animation(BYVAL AS GdkPixbufAnimation PTR) AS GtkWidget PTR
DECLARE FUNCTION gtk_image_new_from_file(BYVAL AS const gchar PTR) AS GtkWidget PTR
DECLARE FUNCTION gtk_image_new_from_gicon(BYVAL AS GIcon PTR, BYVAL AS GtkIconSize) AS GtkWidget PTR
DECLARE FUNCTION gtk_image_new_from_icon_name(BYVAL AS const gchar PTR, BYVAL AS GtkIconSize) AS GtkWidget PTR
DECLARE FUNCTION gtk_image_new_from_icon_set(BYVAL AS GtkIconSet PTR, BYVAL AS GtkIconSize) AS GtkWidget PTR
DECLARE FUNCTION gtk_image_new_from_pixbuf(BYVAL AS GdkPixbuf PTR) AS GtkWidget PTR
DECLARE FUNCTION gtk_image_new_from_resource(BYVAL AS const gchar PTR) AS GtkWidget PTR
DECLARE FUNCTION gtk_image_new_from_stock(BYVAL AS const gchar PTR, BYVAL AS GtkIconSize) AS GtkWidget PTR
DECLARE FUNCTION gtk_image_new_from_surface(BYVAL AS cairo_surface_t PTR) AS GtkWidget PTR
DECLARE SUB gtk_image_clear(BYVAL AS GtkImage PTR)
DECLARE FUNCTION gtk_image_get_animation(BYVAL AS GtkImage PTR) AS GdkPixbufAnimation PTR
DECLARE SUB gtk_image_get_gicon(BYVAL AS GtkImage PTR, BYVAL AS GIcon PTR PTR, BYVAL AS GtkIconSize PTR)
DECLARE SUB gtk_image_get_icon_name(BYVAL AS GtkImage PTR, BYVAL AS const gchar PTR PTR, BYVAL AS GtkIconSize PTR)
DECLARE SUB gtk_image_get_icon_set(BYVAL AS GtkImage PTR, BYVAL AS GtkIconSet PTR PTR, BYVAL AS GtkIconSize PTR)
DECLARE FUNCTION gtk_image_get_pixbuf(BYVAL AS GtkImage PTR) AS GdkPixbuf PTR
DECLARE FUNCTION gtk_image_get_pixel_size(BYVAL AS GtkImage PTR) AS gint
DECLARE SUB gtk_image_get_stock(BYVAL AS GtkImage PTR, BYVAL AS gchar PTR PTR, BYVAL AS GtkIconSize PTR)
DECLARE FUNCTION gtk_image_get_storage_type(BYVAL AS GtkImage PTR) AS GtkImageType
DECLARE SUB gtk_image_set_from_animation(BYVAL AS GtkImage PTR, BYVAL AS GdkPixbufAnimation PTR)
DECLARE SUB gtk_image_set_from_file(BYVAL AS GtkImage PTR, BYVAL AS const gchar PTR)
DECLARE SUB gtk_image_set_from_gicon(BYVAL AS GtkImage PTR, BYVAL AS GIcon PTR, BYVAL AS GtkIconSize)
DECLARE SUB gtk_image_set_from_icon_name(BYVAL AS GtkImage PTR, BYVAL AS const gchar PTR, BYVAL AS GtkIconSize)
DECLARE SUB gtk_image_set_from_icon_set(BYVAL AS GtkImage PTR, BYVAL AS GtkIconSet PTR, BYVAL AS GtkIconSize)
DECLARE SUB gtk_image_set_from_pixbuf(BYVAL AS GtkImage PTR, BYVAL AS GdkPixbuf PTR)
DECLARE SUB gtk_image_set_from_resource(BYVAL AS GtkImage PTR, BYVAL AS const gchar PTR)
DECLARE SUB gtk_image_set_from_stock(BYVAL AS GtkImage PTR, BYVAL AS const gchar PTR, BYVAL AS GtkIconSize)
DECLARE SUB gtk_image_set_from_surface(BYVAL AS GtkImage PTR, BYVAL AS cairo_surface_t PTR)
DECLARE SUB gtk_image_set_pixel_size(BYVAL AS GtkImage PTR, BYVAL AS gint)
TYPE _GtkImageAccessible
  AS GtkWidgetAccessible parent
  AS GtkImageAccessiblePrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_image_accessible_get_type() AS GType
#DEFINE GTK_TYPE_IMAGE_ACCESSIBLE (gtk_image_accessible_get_type())
#DEFINE GTK_IMAGE_ACCESSIBLE(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_IMAGE_ACCESSIBLE, GtkImageAccessible))
#DEFINE GTK_IMAGE_ACCESSIBLE_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_IMAGE_ACCESSIBLE, GtkImageAccessibleClass))
#DEFINE GTK_IS_IMAGE_ACCESSIBLE(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_IMAGE_ACCESSIBLE))
#DEFINE GTK_IS_CLASS_IMAGE_ACCESSIBLE(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_IMAGE_ACCESSIBLE))
#DEFINE GTK_IMAGE_ACCESSIBLE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_IMAGE_ACCESSIBLE, GtkImageAccessibleClass))
TYPE _GtkImageAccessibleClass
  AS GtkWidgetAccessibleClass parent_class
END TYPE
TYPE _GtkImageCellAccessible
  AS GtkRendererCellAccessible parent
  AS GtkImageCellAccessiblePrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_image_cell_accessible_get_type() AS GType
#DEFINE GTK_TYPE_IMAGE_CELL_ACCESSIBLE (gtk_image_cell_accessible_get_type())
#DEFINE GTK_IMAGE_CELL_ACCESSIBLE(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_IMAGE_CELL_ACCESSIBLE, GtkImageCellAccessible))
#DEFINE GTK_IMAGE_CELL_ACCESSIBLE_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_IMAGE_CELL_ACCESSIBLE, GtkImageCellAccessibleClass))
#DEFINE GTK_IS_IMAGE_CELL_ACCESSIBLE(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_IMAGE_CELL_ACCESSIBLE))
#DEFINE GTK_IS_CLASS_IMAGE_CELL_ACCESSIBLE(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_IMAGE_CELL_ACCESSIBLE))
#DEFINE GTK_IMAGE_CELL_ACCESSIBLE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_IMAGE_CELL_ACCESSIBLE, GtkImageCellAccessibleClass))
TYPE _GtkImageCellAccessibleClass
  AS GtkRendererCellAccessibleClass parent_class
END TYPE
TYPE _GtkImageClass
  AS GtkMiscClass parent_class
  _gtk_reserved1 AS SUB CDECL()
  _gtk_reserved2 AS SUB CDECL()
  _gtk_reserved3 AS SUB CDECL()
  _gtk_reserved4 AS SUB CDECL()
END TYPE
TYPE _GtkImageMenuItem
  AS GtkMenuItem menu_item
  AS GtkImageMenuItemPrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_image_menu_item_get_type() AS GType
#DEFINE GTK_TYPE_IMAGE_MENU_ITEM (gtk_image_menu_item_get_type())
#DEFINE GTK_IMAGE_MENU_ITEM(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_IMAGE_MENU_ITEM, GtkImageMenuItem))
#DEFINE GTK_IMAGE_MENU_ITEM_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_IMAGE_MENU_ITEM, GtkImageMenuItemClass))
#DEFINE GTK_IS_IMAGE_MENU_ITEM(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_IMAGE_MENU_ITEM))
#DEFINE GTK_IS_CLASS_IMAGE_MENU_ITEM(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_IMAGE_MENU_ITEM))
#DEFINE GTK_IMAGE_MENU_ITEM_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_IMAGE_MENU_ITEM, GtkImageMenuItemClass))
DECLARE FUNCTION gtk_image_menu_item_new() AS GtkWidget PTR
DECLARE FUNCTION gtk_image_menu_item_new_from_stock(BYVAL AS const gchar PTR, BYVAL AS GtkAccelGroup PTR) AS GtkWidget PTR
DECLARE FUNCTION gtk_image_menu_item_new_with_label(BYVAL AS const gchar PTR) AS GtkWidget PTR
DECLARE FUNCTION gtk_image_menu_item_new_with_mnemonic(BYVAL AS const gchar PTR) AS GtkWidget PTR
DECLARE FUNCTION gtk_image_menu_item_get_always_show_image(BYVAL AS GtkImageMenuItem PTR) AS gboolean
DECLARE FUNCTION gtk_image_menu_item_get_image(BYVAL AS GtkImageMenuItem PTR) AS GtkWidget PTR
DECLARE FUNCTION gtk_image_menu_item_get_use_stock(BYVAL AS GtkImageMenuItem PTR) AS gboolean
DECLARE SUB gtk_image_menu_item_set_accel_group(BYVAL AS GtkImageMenuItem PTR, BYVAL AS GtkAccelGroup PTR)
DECLARE SUB gtk_image_menu_item_set_always_show_image(BYVAL AS GtkImageMenuItem PTR, BYVAL AS gboolean)
DECLARE SUB gtk_image_menu_item_set_image(BYVAL AS GtkImageMenuItem PTR, BYVAL AS GtkWidget PTR)
DECLARE SUB gtk_image_menu_item_set_use_stock(BYVAL AS GtkImageMenuItem PTR, BYVAL AS gboolean)
TYPE _GtkImageMenuItemClass
  AS GtkMenuItemClass parent_class
  _gtk_reserved1 AS SUB CDECL()
  _gtk_reserved2 AS SUB CDECL()
  _gtk_reserved3 AS SUB CDECL()
  _gtk_reserved4 AS SUB CDECL()
END TYPE
TYPE _GtkInfoBar
  AS GtkBox parent
  AS GtkInfoBarPrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_image_type_get_type() AS GType
#DEFINE GTK_TYPE_IMAGE_TYPE (gtk_image_type_get_type())
DECLARE FUNCTION gtk_info_bar_get_type() AS GType
#DEFINE GTK_TYPE_INFO_BAR (gtk_info_bar_get_type())
#DEFINE GTK_INFO_BAR(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_INFO_BAR, GtkInfoBar))
#DEFINE GTK_INFO_BAR_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_INFO_BAR, GtkInfoBarClass))
#DEFINE GTK_IS_INFO_BAR(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_INFO_BAR))
#DEFINE GTK_IS_CLASS_INFO_BAR(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_INFO_BAR))
#DEFINE GTK_INFO_BAR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_INFO_BAR, GtkInfoBarClass))
DECLARE FUNCTION gtk_info_bar_new() AS GtkWidget PTR
DECLARE FUNCTION gtk_info_bar_new_with_buttons(BYVAL AS const gchar PTR, ...) AS GtkWidget PTR
DECLARE SUB gtk_info_bar_add_action_widget(BYVAL AS GtkInfoBar PTR, BYVAL AS GtkWidget PTR, BYVAL AS gint)
DECLARE FUNCTION gtk_info_bar_add_button(BYVAL AS GtkInfoBar PTR, BYVAL AS const gchar PTR, BYVAL AS gint) AS GtkWidget PTR
DECLARE SUB gtk_info_bar_add_buttons(BYVAL AS GtkInfoBar PTR, BYVAL AS const gchar PTR, ...)
DECLARE FUNCTION gtk_info_bar_get_action_area(BYVAL AS GtkInfoBar PTR) AS GtkWidget PTR
DECLARE FUNCTION gtk_info_bar_get_content_area(BYVAL AS GtkInfoBar PTR) AS GtkWidget PTR
DECLARE FUNCTION gtk_info_bar_get_message_type(BYVAL AS GtkInfoBar PTR) AS GtkMessageType
DECLARE FUNCTION gtk_info_bar_get_revealed(BYVAL AS GtkInfoBar PTR) AS gboolean
DECLARE FUNCTION gtk_info_bar_get_show_close_button(BYVAL AS GtkInfoBar PTR) AS gboolean
DECLARE SUB gtk_info_bar_response(BYVAL AS GtkInfoBar PTR, BYVAL AS gint)
DECLARE SUB gtk_info_bar_set_default_response(BYVAL AS GtkInfoBar PTR, BYVAL AS gint)
DECLARE SUB gtk_info_bar_set_message_type(BYVAL AS GtkInfoBar PTR, BYVAL AS GtkMessageType)
DECLARE SUB gtk_info_bar_set_response_sensitive(BYVAL AS GtkInfoBar PTR, BYVAL AS gint, BYVAL AS gboolean)
DECLARE SUB gtk_info_bar_set_revealed(BYVAL AS GtkInfoBar PTR, BYVAL AS gboolean)
DECLARE SUB gtk_info_bar_set_show_close_button(BYVAL AS GtkInfoBar PTR, BYVAL AS gboolean)
TYPE _GtkInfoBarClass
  AS GtkBoxClass parent_class
  response AS SUB CDECL(BYVAL AS GtkInfoBar PTR, BYVAL AS gint)
  close AS SUB CDECL(BYVAL AS GtkInfoBar PTR)
  _gtk_reserved1 AS SUB CDECL()
  _gtk_reserved2 AS SUB CDECL()
  _gtk_reserved3 AS SUB CDECL()
  _gtk_reserved4 AS SUB CDECL()
END TYPE
TYPE _GtkInvisible
  AS GtkWidget widget
  AS GtkInvisiblePrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_input_purpose_get_type() AS GType
#DEFINE GTK_TYPE_INPUT_PURPOSE (gtk_input_purpose_get_type())
DECLARE FUNCTION gtk_invisible_get_type() AS GType
#DEFINE GTK_TYPE_INVISIBLE (gtk_invisible_get_type())
#DEFINE GTK_INVISIBLE(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_INVISIBLE, GtkInvisible))
#DEFINE GTK_INVISIBLE_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_INVISIBLE, GtkInvisibleClass))
#DEFINE GTK_IS_INVISIBLE(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_INVISIBLE))
#DEFINE GTK_IS_CLASS_INVISIBLE(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_INVISIBLE))
#DEFINE GTK_INVISIBLE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_INVISIBLE, GtkInvisibleClass))
DECLARE FUNCTION gtk_invisible_new() AS GtkWidget PTR
DECLARE FUNCTION gtk_invisible_new_for_screen(BYVAL AS GdkScreen PTR) AS GtkWidget PTR
DECLARE FUNCTION gtk_invisible_get_screen(BYVAL AS GtkInvisible PTR) AS GdkScreen PTR
DECLARE SUB gtk_invisible_set_screen(BYVAL AS GtkInvisible PTR, BYVAL AS GdkScreen PTR)
TYPE _GtkInvisibleClass
  AS GtkWidgetClass parent_class
  _gtk_reserved1 AS SUB CDECL()
  _gtk_reserved2 AS SUB CDECL()
  _gtk_reserved3 AS SUB CDECL()
  _gtk_reserved4 AS SUB CDECL()
END TYPE
TYPE GtkKeySnoopFunc AS FUNCTION CDECL(BYVAL AS GtkWidget PTR, BYVAL AS GdkEventKey PTR, BYVAL AS gpointer) AS gint
TYPE _GtkLabelAccessible
  AS GtkWidgetAccessible parent
  AS GtkLabelAccessiblePrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_justification_get_type() AS GType
#DEFINE GTK_TYPE_JUSTIFICATION (gtk_justification_get_type())
DECLARE FUNCTION gtk_label_accessible_get_type() AS GType
#DEFINE GTK_TYPE_LABEL_ACCESSIBLE (gtk_label_accessible_get_type())
#DEFINE GTK_LABEL_ACCESSIBLE(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_LABEL_ACCESSIBLE, GtkLabelAccessible))
#DEFINE GTK_LABEL_ACCESSIBLE_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_LABEL_ACCESSIBLE, GtkLabelAccessibleClass))
#DEFINE GTK_IS_LABEL_ACCESSIBLE(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_LABEL_ACCESSIBLE))
#DEFINE GTK_IS_CLASS_LABEL_ACCESSIBLE(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_LABEL_ACCESSIBLE))
#DEFINE GTK_LABEL_ACCESSIBLE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_LABEL_ACCESSIBLE, GtkLabelAccessibleClass))
TYPE _GtkLabelAccessibleClass
  AS GtkWidgetAccessibleClass parent_class
END TYPE
TYPE _GtkLayout
  AS GtkContainer container
  AS GtkLayoutPrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_layout_get_type() AS GType
#DEFINE GTK_TYPE_LAYOUT (gtk_layout_get_type())
#DEFINE GTK_LAYOUT(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_LAYOUT, GtkLayout))
#DEFINE GTK_LAYOUT_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_LAYOUT, GtkLayoutClass))
#DEFINE GTK_IS_LAYOUT(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_LAYOUT))
#DEFINE GTK_IS_CLASS_LAYOUT(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_LAYOUT))
#DEFINE GTK_LAYOUT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_LAYOUT, GtkLayoutClass))
DECLARE FUNCTION gtk_layout_new(BYVAL AS GtkAdjustment PTR, BYVAL AS GtkAdjustment PTR) AS GtkWidget PTR
DECLARE FUNCTION gtk_layout_get_bin_window(BYVAL AS GtkLayout PTR) AS GdkWindow PTR
DECLARE FUNCTION gtk_layout_get_hadjustment(BYVAL AS GtkLayout PTR) AS GtkAdjustment PTR
DECLARE SUB gtk_layout_get_size(BYVAL AS GtkLayout PTR, BYVAL AS guint PTR, BYVAL AS guint PTR)
DECLARE FUNCTION gtk_layout_get_vadjustment(BYVAL AS GtkLayout PTR) AS GtkAdjustment PTR
DECLARE SUB gtk_layout_move(BYVAL AS GtkLayout PTR, BYVAL AS GtkWidget PTR, BYVAL AS gint, BYVAL AS gint)
DECLARE SUB gtk_layout_put(BYVAL AS GtkLayout PTR, BYVAL AS GtkWidget PTR, BYVAL AS gint, BYVAL AS gint)
DECLARE SUB gtk_layout_set_hadjustment(BYVAL AS GtkLayout PTR, BYVAL AS GtkAdjustment PTR)
DECLARE SUB gtk_layout_set_size(BYVAL AS GtkLayout PTR, BYVAL AS guint, BYVAL AS guint)
DECLARE SUB gtk_layout_set_vadjustment(BYVAL AS GtkLayout PTR, BYVAL AS GtkAdjustment PTR)
TYPE _GtkLayoutClass
  AS GtkContainerClass parent_class
  _gtk_reserved1 AS SUB CDECL()
  _gtk_reserved2 AS SUB CDECL()
  _gtk_reserved3 AS SUB CDECL()
  _gtk_reserved4 AS SUB CDECL()
END TYPE
TYPE _GtkLevelBar
  AS GtkWidget parent
  AS GtkLevelBarPrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_level_bar_get_type() AS GType
#DEFINE GTK_TYPE_LEVEL_BAR (gtk_level_bar_get_type())
#DEFINE GTK_LEVEL_BAR(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_LEVEL_BAR, GtkLevelBar))
#DEFINE GTK_LEVEL_BAR_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_LEVEL_BAR, GtkLevelBarClass))
#DEFINE GTK_IS_LEVEL_BAR(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_LEVEL_BAR))
#DEFINE GTK_IS_CLASS_LEVEL_BAR(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_LEVEL_BAR))
#DEFINE GTK_LEVEL_BAR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_LEVEL_BAR, GtkLevelBarClass))
DECLARE FUNCTION gtk_level_bar_new() AS GtkWidget PTR
DECLARE FUNCTION gtk_level_bar_new_for_interval(BYVAL AS gdouble, BYVAL AS gdouble) AS GtkWidget PTR
DECLARE SUB gtk_level_bar_add_offset_value(BYVAL AS GtkLevelBar PTR, BYVAL AS const gchar PTR, BYVAL AS gdouble)
DECLARE FUNCTION gtk_level_bar_get_inverted(BYVAL AS GtkLevelBar PTR) AS gboolean
DECLARE FUNCTION gtk_level_bar_get_max_value(BYVAL AS GtkLevelBar PTR) AS gdouble
DECLARE FUNCTION gtk_level_bar_get_min_value(BYVAL AS GtkLevelBar PTR) AS gdouble
DECLARE FUNCTION gtk_level_bar_get_mode(BYVAL AS GtkLevelBar PTR) AS GtkLevelBarMode
DECLARE FUNCTION gtk_level_bar_get_offset_value(BYVAL AS GtkLevelBar PTR, BYVAL AS const gchar PTR, BYVAL AS gdouble PTR) AS gboolean
DECLARE FUNCTION gtk_level_bar_get_value(BYVAL AS GtkLevelBar PTR) AS gdouble
DECLARE SUB gtk_level_bar_remove_offset_value(BYVAL AS GtkLevelBar PTR, BYVAL AS const gchar PTR)
DECLARE SUB gtk_level_bar_set_inverted(BYVAL AS GtkLevelBar PTR, BYVAL AS gboolean)
DECLARE SUB gtk_level_bar_set_max_value(BYVAL AS GtkLevelBar PTR, BYVAL AS gdouble)
DECLARE SUB gtk_level_bar_set_min_value(BYVAL AS GtkLevelBar PTR, BYVAL AS gdouble)
DECLARE SUB gtk_level_bar_set_mode(BYVAL AS GtkLevelBar PTR, BYVAL AS GtkLevelBarMode)
DECLARE SUB gtk_level_bar_set_value(BYVAL AS GtkLevelBar PTR, BYVAL AS gdouble)
TYPE _GtkLevelBarAccessible
  AS GtkWidgetAccessible parent
  AS GtkLevelBarAccessiblePrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_level_bar_accessible_get_type() AS GType
#DEFINE GTK_TYPE_LEVEL_BAR_ACCESSIBLE (gtk_level_bar_accessible_get_type())
#DEFINE GTK_LEVEL_BAR_ACCESSIBLE(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_LEVEL_BAR_ACCESSIBLE, GtkLevelBarAccessible))
#DEFINE GTK_LEVEL_BAR_ACCESSIBLE_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_LEVEL_BAR_ACCESSIBLE, GtkLevelBarAccessibleClass))
#DEFINE GTK_IS_LEVEL_BAR_ACCESSIBLE(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_LEVEL_BAR_ACCESSIBLE))
#DEFINE GTK_IS_CLASS_LEVEL_BAR_ACCESSIBLE(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_LEVEL_BAR_ACCESSIBLE))
#DEFINE GTK_LEVEL_BAR_ACCESSIBLE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_LEVEL_BAR_ACCESSIBLE, GtkLevelBarAccessibleClass))
TYPE _GtkLevelBarAccessibleClass
  AS GtkWidgetAccessibleClass parent_class
END TYPE
TYPE _GtkLevelBarClass
  AS GtkWidgetClass parent_class
  offset_changed AS SUB CDECL(BYVAL AS GtkLevelBar PTR, BYVAL AS const gchar PTR)
  AS gpointer padding(15)
END TYPE
DECLARE FUNCTION gtk_level_bar_mode_get_type() AS GType
#DEFINE GTK_TYPE_LEVEL_BAR_MODE (gtk_level_bar_mode_get_type())
TYPE _GtkLinkButton
  AS GtkButton parent_instance
  AS GtkLinkButtonPrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_license_get_type() AS GType
#DEFINE GTK_TYPE_LICENSE (gtk_license_get_type())
DECLARE FUNCTION gtk_link_button_get_type() AS GType
#DEFINE GTK_TYPE_LINK_BUTTON (gtk_link_button_get_type())
#DEFINE GTK_LINK_BUTTON(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_LINK_BUTTON, GtkLinkButton))
#DEFINE GTK_LINK_BUTTON_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_LINK_BUTTON, GtkLinkButtonClass))
#DEFINE GTK_IS_LINK_BUTTON(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_LINK_BUTTON))
#DEFINE GTK_IS_CLASS_LINK_BUTTON(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_LINK_BUTTON))
#DEFINE GTK_LINK_BUTTON_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_LINK_BUTTON, GtkLinkButtonClass))
DECLARE FUNCTION gtk_link_button_new(BYVAL AS const gchar PTR) AS GtkWidget PTR
DECLARE FUNCTION gtk_link_button_new_with_label(BYVAL AS const gchar PTR, BYVAL AS const gchar PTR) AS GtkWidget PTR
DECLARE FUNCTION gtk_link_button_get_uri(BYVAL AS GtkLinkButton PTR) AS const gchar PTR
DECLARE FUNCTION gtk_link_button_get_visited(BYVAL AS GtkLinkButton PTR) AS gboolean
DECLARE SUB gtk_link_button_set_uri(BYVAL AS GtkLinkButton PTR, BYVAL AS const gchar PTR)
DECLARE SUB gtk_link_button_set_visited(BYVAL AS GtkLinkButton PTR, BYVAL AS gboolean)
TYPE _GtkLinkButtonAccessible
  AS GtkButtonAccessible parent
  AS GtkLinkButtonAccessiblePrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_link_button_accessible_get_type() AS GType
#DEFINE GTK_TYPE_LINK_BUTTON_ACCESSIBLE (gtk_link_button_accessible_get_type())
#DEFINE GTK_LINK_BUTTON_ACCESSIBLE(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_LINK_BUTTON_ACCESSIBLE, GtkLinkButtonAccessible))
#DEFINE GTK_LINK_BUTTON_ACCESSIBLE_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_LINK_BUTTON_ACCESSIBLE, GtkLinkButtonAccessibleClass))
#DEFINE GTK_IS_LINK_BUTTON_ACCESSIBLE(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_LINK_BUTTON_ACCESSIBLE))
#DEFINE GTK_IS_CLASS_LINK_BUTTON_ACCESSIBLE(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_LINK_BUTTON_ACCESSIBLE))
#DEFINE GTK_LINK_BUTTON_ACCESSIBLE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_LINK_BUTTON_ACCESSIBLE, GtkLinkButtonAccessibleClass))
TYPE _GtkLinkButtonAccessibleClass
  AS GtkButtonAccessibleClass parent_class
END TYPE
TYPE _GtkLinkButtonClass
  AS GtkButtonClass parent_class
  activate_link AS FUNCTION CDECL(BYVAL AS GtkLinkButton PTR) AS gboolean
  _gtk_padding1 AS SUB CDECL()
  _gtk_padding2 AS SUB CDECL()
  _gtk_padding3 AS SUB CDECL()
  _gtk_padding4 AS SUB CDECL()
END TYPE
TYPE _GtkListBox
  AS GtkContainer parent_instance
END TYPE
DECLARE FUNCTION gtk_list_box_get_type() AS GType
#DEFINE GTK_TYPE_LIST_BOX (gtk_list_box_get_type())
#DEFINE GTK_LIST_BOX(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_LIST_BOX, GtkListBox))
#DEFINE GTK_LIST_BOX_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_LIST_BOX, GtkListBoxClass))
#DEFINE GTK_IS_LIST_BOX(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_LIST_BOX))
#DEFINE GTK_IS_CLASS_LIST_BOX(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_LIST_BOX))
#DEFINE GTK_LIST_BOX_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_LIST_BOX, GtkListBoxClass))
DECLARE FUNCTION gtk_list_box_new() AS GtkWidget PTR
DECLARE SUB gtk_list_box_bind_model(BYVAL AS GtkListBox PTR, BYVAL AS GListModel PTR, BYVAL AS GtkListBoxCreateWidgetFunc, BYVAL AS gpointer, BYVAL AS GDestroyNotify)
DECLARE SUB gtk_list_box_drag_highlight_row(BYVAL AS GtkListBox PTR, BYVAL AS GtkListBoxRow PTR)
DECLARE SUB gtk_list_box_drag_unhighlight_row(BYVAL AS GtkListBox PTR)
DECLARE FUNCTION gtk_list_box_get_activate_on_single_click(BYVAL AS GtkListBox PTR) AS gboolean
DECLARE FUNCTION gtk_list_box_get_adjustment(BYVAL AS GtkListBox PTR) AS GtkAdjustment PTR
DECLARE FUNCTION gtk_list_box_get_row_at_index(BYVAL AS GtkListBox PTR, BYVAL AS gint) AS GtkListBoxRow PTR
DECLARE FUNCTION gtk_list_box_get_row_at_y(BYVAL AS GtkListBox PTR, BYVAL AS gint) AS GtkListBoxRow PTR
DECLARE FUNCTION gtk_list_box_get_selected_row(BYVAL AS GtkListBox PTR) AS GtkListBoxRow PTR
DECLARE FUNCTION gtk_list_box_get_selected_rows(BYVAL AS GtkListBox PTR) AS GList PTR
DECLARE FUNCTION gtk_list_box_get_selection_mode(BYVAL AS GtkListBox PTR) AS GtkSelectionMode
DECLARE SUB gtk_list_box_insert(BYVAL AS GtkListBox PTR, BYVAL AS GtkWidget PTR, BYVAL AS gint)
DECLARE SUB gtk_list_box_invalidate_filter(BYVAL AS GtkListBox PTR)
DECLARE SUB gtk_list_box_invalidate_headers(BYVAL AS GtkListBox PTR)
DECLARE SUB gtk_list_box_invalidate_sort(BYVAL AS GtkListBox PTR)
DECLARE SUB gtk_list_box_prepend(BYVAL AS GtkListBox PTR, BYVAL AS GtkWidget PTR)
DECLARE SUB gtk_list_box_select_all(BYVAL AS GtkListBox PTR)
DECLARE SUB gtk_list_box_select_row(BYVAL AS GtkListBox PTR, BYVAL AS GtkListBoxRow PTR)
DECLARE SUB gtk_list_box_selected_foreach(BYVAL AS GtkListBox PTR, BYVAL AS GtkListBoxForeachFunc, BYVAL AS gpointer)
DECLARE SUB gtk_list_box_set_activate_on_single_click(BYVAL AS GtkListBox PTR, BYVAL AS gboolean)
DECLARE SUB gtk_list_box_set_adjustment(BYVAL AS GtkListBox PTR, BYVAL AS GtkAdjustment PTR)
DECLARE SUB gtk_list_box_set_filter_func(BYVAL AS GtkListBox PTR, BYVAL AS GtkListBoxFilterFunc, BYVAL AS gpointer, BYVAL AS GDestroyNotify)
DECLARE SUB gtk_list_box_set_header_func(BYVAL AS GtkListBox PTR, BYVAL AS GtkListBoxUpdateHeaderFunc, BYVAL AS gpointer, BYVAL AS GDestroyNotify)
DECLARE SUB gtk_list_box_set_placeholder(BYVAL AS GtkListBox PTR, BYVAL AS GtkWidget PTR)
DECLARE SUB gtk_list_box_set_selection_mode(BYVAL AS GtkListBox PTR, BYVAL AS GtkSelectionMode)
DECLARE SUB gtk_list_box_set_sort_func(BYVAL AS GtkListBox PTR, BYVAL AS GtkListBoxSortFunc, BYVAL AS gpointer, BYVAL AS GDestroyNotify)
DECLARE SUB gtk_list_box_unselect_all(BYVAL AS GtkListBox PTR)
DECLARE SUB gtk_list_box_unselect_row(BYVAL AS GtkListBox PTR, BYVAL AS GtkListBoxRow PTR)
TYPE _GtkListBoxAccessible
  AS GtkContainerAccessible parent
  AS GtkListBoxAccessiblePrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_list_box_accessible_get_type() AS GType
#DEFINE GTK_TYPE_LIST_BOX_ACCESSIBLE (gtk_list_box_accessible_get_type())
#DEFINE GTK_LIST_BOX_ACCESSIBLE(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_LIST_BOX_ACCESSIBLE, GtkListBoxAccessible))
#DEFINE GTK_LIST_BOX_ACCESSIBLE_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_LIST_BOX_ACCESSIBLE, GtkListBoxAccessibleClass))
#DEFINE GTK_IS_LIST_BOX_ACCESSIBLE(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_LIST_BOX_ACCESSIBLE))
#DEFINE GTK_IS_CLASS_LIST_BOX_ACCESSIBLE(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_LIST_BOX_ACCESSIBLE))
#DEFINE GTK_LIST_BOX_ACCESSIBLE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_LIST_BOX_ACCESSIBLE, GtkListBoxAccessibleClass))
TYPE _GtkListBoxAccessibleClass
  AS GtkContainerAccessibleClass parent_class
END TYPE
TYPE _GtkListBoxClass
  AS GtkContainerClass parent_class
  row_selected AS SUB CDECL(BYVAL AS GtkListBox PTR, BYVAL AS GtkListBoxRow PTR)
  row_activated AS SUB CDECL(BYVAL AS GtkListBox PTR, BYVAL AS GtkListBoxRow PTR)
  activate_cursor_row AS SUB CDECL(BYVAL AS GtkListBox PTR)
  toggle_cursor_row AS SUB CDECL(BYVAL AS GtkListBox PTR)
  move_cursor AS SUB CDECL(BYVAL AS GtkListBox PTR, BYVAL AS GtkMovementStep, BYVAL AS gint)
  selected_rows_changed AS SUB CDECL(BYVAL AS GtkListBox PTR)
  select_all AS SUB CDECL(BYVAL AS GtkListBox PTR)
  unselect_all AS SUB CDECL(BYVAL AS GtkListBox PTR)
  _gtk_reserved1 AS SUB CDECL()
  _gtk_reserved2 AS SUB CDECL()
  _gtk_reserved3 AS SUB CDECL()
END TYPE
TYPE _GtkListBoxRow
  AS GtkBin parent_instance
END TYPE
DECLARE FUNCTION gtk_list_box_row_get_type() AS GType
#DEFINE GTK_TYPE_LIST_BOX_ROW (gtk_list_box_row_get_type())
#DEFINE GTK_LIST_BOX_ROW(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_LIST_BOX_ROW, GtkListBoxRow))
#DEFINE GTK_LIST_BOX_ROW_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_LIST_BOX_ROW, GtkListBoxRowClass))
#DEFINE GTK_IS_LIST_BOX_ROW(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_LIST_BOX_ROW))
#DEFINE GTK_IS_CLASS_LIST_BOX_ROW(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_LIST_BOX_ROW))
#DEFINE GTK_LIST_BOX_ROW_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_LIST_BOX_ROW, GtkListBoxRowClass))
DECLARE FUNCTION gtk_list_box_row_new() AS GtkWidget PTR
DECLARE SUB gtk_list_box_row_changed(BYVAL AS GtkListBoxRow PTR)
DECLARE FUNCTION gtk_list_box_row_get_activatable(BYVAL AS GtkListBoxRow PTR) AS gboolean
DECLARE FUNCTION gtk_list_box_row_get_header(BYVAL AS GtkListBoxRow PTR) AS GtkWidget PTR
DECLARE FUNCTION gtk_list_box_row_get_index(BYVAL AS GtkListBoxRow PTR) AS gint
DECLARE FUNCTION gtk_list_box_row_get_selectable(BYVAL AS GtkListBoxRow PTR) AS gboolean
DECLARE FUNCTION gtk_list_box_row_is_selected(BYVAL AS GtkListBoxRow PTR) AS gboolean
DECLARE SUB gtk_list_box_row_set_activatable(BYVAL AS GtkListBoxRow PTR, BYVAL AS gboolean)
DECLARE SUB gtk_list_box_row_set_header(BYVAL AS GtkListBoxRow PTR, BYVAL AS GtkWidget PTR)
DECLARE SUB gtk_list_box_row_set_selectable(BYVAL AS GtkListBoxRow PTR, BYVAL AS gboolean)
TYPE _GtkListBoxRowAccessible
  AS GtkContainerAccessible parent
END TYPE
DECLARE FUNCTION gtk_list_box_row_accessible_get_type() AS GType
#DEFINE GTK_TYPE_LIST_BOX_ROW_ACCESSIBLE (gtk_list_box_row_accessible_get_type())
#DEFINE GTK_LIST_BOX_ROW_ACCESSIBLE(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_LIST_BOX_ROW_ACCESSIBLE, GtkListBoxRowAccessible))
#DEFINE GTK_LIST_BOX_ROW_ACCESSIBLE_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_LIST_BOX_ROW_ACCESSIBLE, GtkListBoxRowAccessibleClass))
#DEFINE GTK_IS_LIST_BOX_ROW_ACCESSIBLE(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_LIST_BOX_ROW_ACCESSIBLE))
#DEFINE GTK_IS_CLASS_LIST_BOX_ROW_ACCESSIBLE(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_LIST_BOX_ROW_ACCESSIBLE))
#DEFINE GTK_LIST_BOX_ROW_ACCESSIBLE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_LIST_BOX_ROW_ACCESSIBLE, GtkListBoxRowAccessibleClass))
TYPE _GtkListBoxRowAccessibleClass
  AS GtkContainerAccessibleClass parent_class
END TYPE
TYPE _GtkListBoxRowClass
  AS GtkBinClass parent_class
  activate AS SUB CDECL(BYVAL AS GtkListBoxRow PTR)
  _gtk_reserved1 AS SUB CDECL()
  _gtk_reserved2 AS SUB CDECL()
END TYPE
TYPE _GtkListStore
  AS GObject parent
  AS GtkListStorePrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_list_store_get_type() AS GType
#DEFINE GTK_TYPE_LIST_STORE (gtk_list_store_get_type())
#DEFINE GTK_LIST_STORE(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_LIST_STORE, GtkListStore))
#DEFINE GTK_LIST_STORE_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_LIST_STORE, GtkListStoreClass))
#DEFINE GTK_IS_LIST_STORE(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_LIST_STORE))
#DEFINE GTK_IS_CLASS_LIST_STORE(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_LIST_STORE))
#DEFINE GTK_LIST_STORE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_LIST_STORE, GtkListStoreClass))
DECLARE FUNCTION gtk_list_store_new(BYVAL AS gint, ...) AS GtkListStore PTR
DECLARE FUNCTION gtk_list_store_newv(BYVAL AS gint, BYVAL AS GType PTR) AS GtkListStore PTR
DECLARE SUB gtk_list_store_append(BYVAL AS GtkListStore PTR, BYVAL AS GtkTreeIter PTR)
DECLARE SUB gtk_list_store_clear(BYVAL AS GtkListStore PTR)
DECLARE SUB gtk_list_store_insert(BYVAL AS GtkListStore PTR, BYVAL AS GtkTreeIter PTR, BYVAL AS gint)
DECLARE SUB gtk_list_store_insert_after(BYVAL AS GtkListStore PTR, BYVAL AS GtkTreeIter PTR, BYVAL AS GtkTreeIter PTR)
DECLARE SUB gtk_list_store_insert_before(BYVAL AS GtkListStore PTR, BYVAL AS GtkTreeIter PTR, BYVAL AS GtkTreeIter PTR)
DECLARE SUB gtk_list_store_insert_with_values(BYVAL AS GtkListStore PTR, BYVAL AS GtkTreeIter PTR, BYVAL AS gint, ...)
DECLARE SUB gtk_list_store_insert_with_valuesv(BYVAL AS GtkListStore PTR, BYVAL AS GtkTreeIter PTR, BYVAL AS gint, BYVAL AS gint PTR, BYVAL AS GValue PTR, BYVAL AS gint)
DECLARE FUNCTION gtk_list_store_iter_is_valid(BYVAL AS GtkListStore PTR, BYVAL AS GtkTreeIter PTR) AS gboolean
DECLARE SUB gtk_list_store_move_after(BYVAL AS GtkListStore PTR, BYVAL AS GtkTreeIter PTR, BYVAL AS GtkTreeIter PTR)
DECLARE SUB gtk_list_store_move_before(BYVAL AS GtkListStore PTR, BYVAL AS GtkTreeIter PTR, BYVAL AS GtkTreeIter PTR)
DECLARE SUB gtk_list_store_prepend(BYVAL AS GtkListStore PTR, BYVAL AS GtkTreeIter PTR)
DECLARE FUNCTION gtk_list_store_remove(BYVAL AS GtkListStore PTR, BYVAL AS GtkTreeIter PTR) AS gboolean
DECLARE SUB gtk_list_store_reorder(BYVAL AS GtkListStore PTR, BYVAL AS gint PTR)
DECLARE SUB gtk_list_store_set(BYVAL AS GtkListStore PTR, BYVAL AS GtkTreeIter PTR, ...)
DECLARE SUB gtk_list_store_set_column_types(BYVAL AS GtkListStore PTR, BYVAL AS gint, BYVAL AS GType PTR)
DECLARE SUB gtk_list_store_set_valist(BYVAL AS GtkListStore PTR, BYVAL AS GtkTreeIter PTR, BYVAL AS va_list)
DECLARE SUB gtk_list_store_set_value(BYVAL AS GtkListStore PTR, BYVAL AS GtkTreeIter PTR, BYVAL AS gint, BYVAL AS GValue PTR)
DECLARE SUB gtk_list_store_set_valuesv(BYVAL AS GtkListStore PTR, BYVAL AS GtkTreeIter PTR, BYVAL AS gint PTR, BYVAL AS GValue PTR, BYVAL AS gint)
DECLARE SUB gtk_list_store_swap(BYVAL AS GtkListStore PTR, BYVAL AS GtkTreeIter PTR, BYVAL AS GtkTreeIter PTR)
TYPE _GtkListStoreClass
  AS GObjectClass parent_class
  _gtk_reserved1 AS SUB CDECL()
  _gtk_reserved2 AS SUB CDECL()
  _gtk_reserved3 AS SUB CDECL()
  _gtk_reserved4 AS SUB CDECL()
END TYPE
TYPE _GtkLockButton
  AS GtkButton parent
  AS GtkLockButtonPrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_lock_button_get_type() AS GType
#DEFINE GTK_TYPE_LOCK_BUTTON (gtk_lock_button_get_type())
#DEFINE GTK_LOCK_BUTTON(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_LOCK_BUTTON, GtkLockButton))
#DEFINE GTK_LOCK_BUTTON_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_LOCK_BUTTON, GtkLockButtonClass))
#DEFINE GTK_IS_LOCK_BUTTON(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_LOCK_BUTTON))
#DEFINE GTK_IS_CLASS_LOCK_BUTTON(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_LOCK_BUTTON))
#DEFINE GTK_LOCK_BUTTON_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_LOCK_BUTTON, GtkLockButtonClass))
DECLARE FUNCTION gtk_lock_button_new(BYVAL AS GPermission PTR) AS GtkWidget PTR
DECLARE FUNCTION gtk_lock_button_get_permission(BYVAL AS GtkLockButton PTR) AS GPermission PTR
DECLARE SUB gtk_lock_button_set_permission(BYVAL AS GtkLockButton PTR, BYVAL AS GPermission PTR)
TYPE _GtkLockButtonAccessible
  AS GtkButtonAccessible parent
  AS GtkLockButtonAccessiblePrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_lock_button_accessible_get_type() AS GType
#DEFINE GTK_TYPE_LOCK_BUTTON_ACCESSIBLE (gtk_lock_button_accessible_get_type())
#DEFINE GTK_LOCK_BUTTON_ACCESSIBLE(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_LOCK_BUTTON_ACCESSIBLE, GtkLockButtonAccessible))
#DEFINE GTK_LOCK_BUTTON_ACCESSIBLE_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_LOCK_BUTTON_ACCESSIBLE, GtkLockButtonAccessibleClass))
#DEFINE GTK_IS_LOCK_BUTTON_ACCESSIBLE(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_LOCK_BUTTON_ACCESSIBLE))
#DEFINE GTK_IS_CLASS_LOCK_BUTTON_ACCESSIBLE(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_LOCK_BUTTON_ACCESSIBLE))
#DEFINE GTK_LOCK_BUTTON_ACCESSIBLE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_LOCK_BUTTON_ACCESSIBLE, GtkLockButtonAccessibleClass))
TYPE _GtkLockButtonAccessibleClass
  AS GtkButtonAccessibleClass parent_class
END TYPE
TYPE _GtkLockButtonClass
  AS GtkButtonClass parent_class
  reserved0 AS SUB CDECL()
  reserved1 AS SUB CDECL()
  reserved2 AS SUB CDECL()
  reserved3 AS SUB CDECL()
  reserved4 AS SUB CDECL()
  reserved5 AS SUB CDECL()
  reserved6 AS SUB CDECL()
  reserved7 AS SUB CDECL()
END TYPE
TYPE _GtkMenu
  AS GtkMenuShell menu_shell
  AS GtkMenuPrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_menu_get_type() AS GType
#DEFINE GTK_TYPE_MENU (gtk_menu_get_type())
#DEFINE GTK_MENU(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_MENU, GtkMenu))
#DEFINE GTK_MENU_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_MENU, GtkMenuClass))
#DEFINE GTK_IS_MENU(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_MENU))
#DEFINE GTK_IS_CLASS_MENU(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_MENU))
#DEFINE GTK_MENU_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_MENU, GtkMenuClass))
DECLARE FUNCTION gtk_menu_new() AS GtkWidget PTR
DECLARE FUNCTION gtk_menu_new_from_model(BYVAL AS GMenuModel PTR) AS GtkWidget PTR
DECLARE FUNCTION gtk_menu_get_for_attach_widget(BYVAL AS GtkWidget PTR) AS GList PTR
DECLARE SUB gtk_menu_attach(BYVAL AS GtkMenu PTR, BYVAL AS GtkWidget PTR, BYVAL AS guint, BYVAL AS guint, BYVAL AS guint, BYVAL AS guint)
DECLARE SUB gtk_menu_attach_to_widget(BYVAL AS GtkMenu PTR, BYVAL AS GtkWidget PTR, BYVAL AS GtkMenuDetachFunc)
DECLARE SUB gtk_menu_detach(BYVAL AS GtkMenu PTR)
DECLARE FUNCTION gtk_menu_get_accel_group(BYVAL AS GtkMenu PTR) AS GtkAccelGroup PTR
DECLARE FUNCTION gtk_menu_get_accel_path(BYVAL AS GtkMenu PTR) AS const gchar PTR
DECLARE FUNCTION gtk_menu_get_active(BYVAL AS GtkMenu PTR) AS GtkWidget PTR
DECLARE FUNCTION gtk_menu_get_attach_widget(BYVAL AS GtkMenu PTR) AS GtkWidget PTR
DECLARE FUNCTION gtk_menu_get_monitor(BYVAL AS GtkMenu PTR) AS gint
DECLARE FUNCTION gtk_menu_get_reserve_toggle_size(BYVAL AS GtkMenu PTR) AS gboolean
DECLARE FUNCTION gtk_menu_get_tearoff_state(BYVAL AS GtkMenu PTR) AS gboolean
DECLARE FUNCTION gtk_menu_get_title(BYVAL AS GtkMenu PTR) AS const gchar PTR
DECLARE SUB gtk_menu_place_on_monitor(BYVAL AS GtkMenu PTR, BYVAL AS GdkMonitor PTR)
DECLARE SUB gtk_menu_popdown(BYVAL AS GtkMenu PTR)
DECLARE SUB gtk_menu_popup(BYVAL AS GtkMenu PTR, BYVAL AS GtkWidget PTR, BYVAL AS GtkWidget PTR, BYVAL AS GtkMenuPositionFunc, BYVAL AS gpointer, BYVAL AS guint, BYVAL AS guint32)
DECLARE SUB gtk_menu_popup_at_pointer(BYVAL AS GtkMenu PTR, BYVAL AS const GdkEvent PTR)
DECLARE SUB gtk_menu_popup_at_rect(BYVAL AS GtkMenu PTR, BYVAL AS GdkWindow PTR, BYVAL AS const GdkRectangle PTR, BYVAL AS GdkGravity, BYVAL AS GdkGravity, BYVAL AS const GdkEvent PTR)
DECLARE SUB gtk_menu_popup_at_widget(BYVAL AS GtkMenu PTR, BYVAL AS GtkWidget PTR, BYVAL AS GdkGravity, BYVAL AS GdkGravity, BYVAL AS const GdkEvent PTR)
DECLARE SUB gtk_menu_popup_for_device(BYVAL AS GtkMenu PTR, BYVAL AS GdkDevice PTR, BYVAL AS GtkWidget PTR, BYVAL AS GtkWidget PTR, BYVAL AS GtkMenuPositionFunc, BYVAL AS gpointer, BYVAL AS GDestroyNotify, BYVAL AS guint, BYVAL AS guint32)
DECLARE SUB gtk_menu_reorder_child(BYVAL AS GtkMenu PTR, BYVAL AS GtkWidget PTR, BYVAL AS gint)
DECLARE SUB gtk_menu_reposition(BYVAL AS GtkMenu PTR)
DECLARE SUB gtk_menu_set_accel_group(BYVAL AS GtkMenu PTR, BYVAL AS GtkAccelGroup PTR)
DECLARE SUB gtk_menu_set_accel_path(BYVAL AS GtkMenu PTR, BYVAL AS const gchar PTR)
DECLARE SUB gtk_menu_set_active(BYVAL AS GtkMenu PTR, BYVAL AS guint)
DECLARE SUB gtk_menu_set_monitor(BYVAL AS GtkMenu PTR, BYVAL AS gint)
DECLARE SUB gtk_menu_set_reserve_toggle_size(BYVAL AS GtkMenu PTR, BYVAL AS gboolean)
DECLARE SUB gtk_menu_set_screen(BYVAL AS GtkMenu PTR, BYVAL AS GdkScreen PTR)
DECLARE SUB gtk_menu_set_tearoff_state(BYVAL AS GtkMenu PTR, BYVAL AS gboolean)
DECLARE SUB gtk_menu_set_title(BYVAL AS GtkMenu PTR, BYVAL AS const gchar PTR)
TYPE _GtkMenuAccessible
  AS GtkMenuShellAccessible parent
  AS GtkMenuAccessiblePrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_menu_accessible_get_type() AS GType
#DEFINE GTK_TYPE_MENU_ACCESSIBLE (gtk_menu_accessible_get_type())
#DEFINE GTK_MENU_ACCESSIBLE(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_MENU_ACCESSIBLE, GtkMenuAccessible))
#DEFINE GTK_MENU_ACCESSIBLE_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_MENU_ACCESSIBLE, GtkMenuAccessibleClass))
#DEFINE GTK_IS_MENU_ACCESSIBLE(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_MENU_ACCESSIBLE))
#DEFINE GTK_IS_CLASS_MENU_ACCESSIBLE(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_MENU_ACCESSIBLE))
#DEFINE GTK_MENU_ACCESSIBLE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_MENU_ACCESSIBLE, GtkMenuAccessibleClass))
TYPE _GtkMenuAccessibleClass
  AS GtkMenuShellAccessibleClass parent_class
END TYPE
TYPE _GtkMenuBar
  AS GtkMenuShell menu_shell
  AS GtkMenuBarPrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_menu_bar_get_type() AS GType
#DEFINE GTK_TYPE_MENU_BAR (gtk_menu_bar_get_type())
#DEFINE GTK_MENU_BAR(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_MENU_BAR, GtkMenuBar))
#DEFINE GTK_MENU_BAR_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_MENU_BAR, GtkMenuBarClass))
#DEFINE GTK_IS_MENU_BAR(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_MENU_BAR))
#DEFINE GTK_IS_CLASS_MENU_BAR(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_MENU_BAR))
#DEFINE GTK_MENU_BAR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_MENU_BAR, GtkMenuBarClass))
DECLARE FUNCTION gtk_menu_bar_new() AS GtkWidget PTR
DECLARE FUNCTION gtk_menu_bar_new_from_model(BYVAL AS GMenuModel PTR) AS GtkWidget PTR
DECLARE FUNCTION gtk_menu_bar_get_child_pack_direction(BYVAL AS GtkMenuBar PTR) AS GtkPackDirection
DECLARE FUNCTION gtk_menu_bar_get_pack_direction(BYVAL AS GtkMenuBar PTR) AS GtkPackDirection
DECLARE SUB gtk_menu_bar_set_child_pack_direction(BYVAL AS GtkMenuBar PTR, BYVAL AS GtkPackDirection)
DECLARE SUB gtk_menu_bar_set_pack_direction(BYVAL AS GtkMenuBar PTR, BYVAL AS GtkPackDirection)
TYPE _GtkMenuBarClass
  AS GtkMenuShellClass parent_class
  _gtk_reserved1 AS SUB CDECL()
  _gtk_reserved2 AS SUB CDECL()
  _gtk_reserved3 AS SUB CDECL()
  _gtk_reserved4 AS SUB CDECL()
END TYPE
TYPE _GtkMenuButton
  AS GtkToggleButton parent
  AS GtkMenuButtonPrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_menu_button_get_type() AS GType
#DEFINE GTK_TYPE_MENU_BUTTON (gtk_menu_button_get_type())
#DEFINE GTK_MENU_BUTTON(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_MENU_BUTTON, GtkMenuButton))
#DEFINE GTK_MENU_BUTTON_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_MENU_BUTTON, GtkMenuButtonClass))
#DEFINE GTK_IS_MENU_BUTTON(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_MENU_BUTTON))
#DEFINE GTK_IS_CLASS_MENU_BUTTON(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_MENU_BUTTON))
#DEFINE GTK_MENU_BUTTON_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_MENU_BUTTON, GtkMenuButtonClass))
DECLARE FUNCTION gtk_menu_button_new() AS GtkWidget PTR
DECLARE FUNCTION gtk_menu_button_get_align_widget(BYVAL AS GtkMenuButton PTR) AS GtkWidget PTR
DECLARE FUNCTION gtk_menu_button_get_direction(BYVAL AS GtkMenuButton PTR) AS GtkArrowType
DECLARE FUNCTION gtk_menu_button_get_menu_model(BYVAL AS GtkMenuButton PTR) AS GMenuModel PTR
DECLARE FUNCTION gtk_menu_button_get_popover(BYVAL AS GtkMenuButton PTR) AS GtkPopover PTR
DECLARE FUNCTION gtk_menu_button_get_popup(BYVAL AS GtkMenuButton PTR) AS GtkMenu PTR
DECLARE FUNCTION gtk_menu_button_get_use_popover(BYVAL AS GtkMenuButton PTR) AS gboolean
DECLARE SUB gtk_menu_button_set_align_widget(BYVAL AS GtkMenuButton PTR, BYVAL AS GtkWidget PTR)
DECLARE SUB gtk_menu_button_set_direction(BYVAL AS GtkMenuButton PTR, BYVAL AS GtkArrowType)
DECLARE SUB gtk_menu_button_set_menu_model(BYVAL AS GtkMenuButton PTR, BYVAL AS GMenuModel PTR)
DECLARE SUB gtk_menu_button_set_popover(BYVAL AS GtkMenuButton PTR, BYVAL AS GtkWidget PTR)
DECLARE SUB gtk_menu_button_set_popup(BYVAL AS GtkMenuButton PTR, BYVAL AS GtkWidget PTR)
DECLARE SUB gtk_menu_button_set_use_popover(BYVAL AS GtkMenuButton PTR, BYVAL AS gboolean)
TYPE _GtkMenuButtonAccessible
  AS GtkToggleButtonAccessible parent
  AS GtkMenuButtonAccessiblePrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_menu_button_accessible_get_type() AS GType
#DEFINE GTK_TYPE_MENU_BUTTON_ACCESSIBLE (gtk_menu_button_accessible_get_type())
#DEFINE GTK_MENU_BUTTON_ACCESSIBLE(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_MENU_BUTTON_ACCESSIBLE, GtkMenuButtonAccessible))
#DEFINE GTK_MENU_BUTTON_ACCESSIBLE_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_MENU_BUTTON_ACCESSIBLE, GtkMenuButtonAccessibleClass))
#DEFINE GTK_IS_MENU_BUTTON_ACCESSIBLE(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_MENU_BUTTON_ACCESSIBLE))
#DEFINE GTK_IS_CLASS_MENU_BUTTON_ACCESSIBLE(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_MENU_BUTTON_ACCESSIBLE))
#DEFINE GTK_MENU_BUTTON_ACCESSIBLE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_MENU_BUTTON_ACCESSIBLE, GtkMenuButtonAccessibleClass))
TYPE _GtkMenuButtonAccessibleClass
  AS GtkToggleButtonAccessibleClass parent_class
END TYPE
TYPE _GtkMenuButtonClass
  AS GtkToggleButtonClass parent_class
  _gtk_reserved1 AS SUB CDECL()
  _gtk_reserved2 AS SUB CDECL()
  _gtk_reserved3 AS SUB CDECL()
  _gtk_reserved4 AS SUB CDECL()
END TYPE
TYPE _GtkMenuClass
  AS GtkMenuShellClass parent_class
  _gtk_reserved1 AS SUB CDECL()
  _gtk_reserved2 AS SUB CDECL()
  _gtk_reserved3 AS SUB CDECL()
  _gtk_reserved4 AS SUB CDECL()
END TYPE
DECLARE FUNCTION gtk_menu_direction_type_get_type() AS GType
#DEFINE GTK_TYPE_MENU_DIRECTION_TYPE (gtk_menu_direction_type_get_type())
TYPE _GtkMenuToolButton
  AS GtkToolButton parent
  AS GtkMenuToolButtonPrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_menu_tool_button_get_type() AS GType
#DEFINE GTK_TYPE_MENU_TOOL_BUTTON (gtk_menu_tool_button_get_type())
#DEFINE GTK_MENU_TOOL_BUTTON(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_MENU_TOOL_BUTTON, GtkMenuToolButton))
#DEFINE GTK_MENU_TOOL_BUTTON_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_MENU_TOOL_BUTTON, GtkMenuToolButtonClass))
#DEFINE GTK_IS_MENU_TOOL_BUTTON(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_MENU_TOOL_BUTTON))
#DEFINE GTK_IS_CLASS_MENU_TOOL_BUTTON(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_MENU_TOOL_BUTTON))
#DEFINE GTK_MENU_TOOL_BUTTON_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_MENU_TOOL_BUTTON, GtkMenuToolButtonClass))
DECLARE FUNCTION gtk_menu_tool_button_new(BYVAL AS GtkWidget PTR, BYVAL AS const gchar PTR) AS GtkToolItem PTR
DECLARE FUNCTION gtk_menu_tool_button_new_from_stock(BYVAL AS const gchar PTR) AS GtkToolItem PTR
DECLARE FUNCTION gtk_menu_tool_button_get_menu(BYVAL AS GtkMenuToolButton PTR) AS GtkWidget PTR
DECLARE SUB gtk_menu_tool_button_set_arrow_tooltip_markup(BYVAL AS GtkMenuToolButton PTR, BYVAL AS const gchar PTR)
DECLARE SUB gtk_menu_tool_button_set_arrow_tooltip_text(BYVAL AS GtkMenuToolButton PTR, BYVAL AS const gchar PTR)
DECLARE SUB gtk_menu_tool_button_set_menu(BYVAL AS GtkMenuToolButton PTR, BYVAL AS GtkWidget PTR)
TYPE _GtkMenuToolButtonClass
  AS GtkToolButtonClass parent_class
  show_menu AS SUB CDECL(BYVAL AS GtkMenuToolButton PTR)
  _gtk_reserved1 AS SUB CDECL()
  _gtk_reserved2 AS SUB CDECL()
  _gtk_reserved3 AS SUB CDECL()
  _gtk_reserved4 AS SUB CDECL()
END TYPE
TYPE _GtkMessageDialog
  AS GtkDialog parent_instance
  AS GtkMessageDialogPrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_message_dialog_get_type() AS GType
#DEFINE GTK_TYPE_MESSAGE_DIALOG (gtk_message_dialog_get_type())
#DEFINE GTK_MESSAGE_DIALOG(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_MESSAGE_DIALOG, GtkMessageDialog))
#DEFINE GTK_MESSAGE_DIALOG_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_MESSAGE_DIALOG, GtkMessageDialogClass))
#DEFINE GTK_IS_MESSAGE_DIALOG(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_MESSAGE_DIALOG))
#DEFINE GTK_IS_CLASS_MESSAGE_DIALOG(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_MESSAGE_DIALOG))
#DEFINE GTK_MESSAGE_DIALOG_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_MESSAGE_DIALOG, GtkMessageDialogClass))
DECLARE FUNCTION gtk_message_dialog_new(BYVAL AS GtkWindow PTR, BYVAL AS GtkDialogFlags, BYVAL AS GtkMessageType, BYVAL AS GtkButtonsType, BYVAL AS const gchar PTR, ...) AS GtkWidget PTR
DECLARE FUNCTION gtk_message_dialog_new_with_markup(BYVAL AS GtkWindow PTR, BYVAL AS GtkDialogFlags, BYVAL AS GtkMessageType, BYVAL AS GtkButtonsType, BYVAL AS const gchar PTR, ...) AS GtkWidget PTR
DECLARE SUB gtk_message_dialog_format_secondary_markup(BYVAL AS GtkMessageDialog PTR, BYVAL AS const gchar PTR, ...)
DECLARE SUB gtk_message_dialog_format_secondary_text(BYVAL AS GtkMessageDialog PTR, BYVAL AS const gchar PTR, ...)
DECLARE FUNCTION gtk_message_dialog_get_image(BYVAL AS GtkMessageDialog PTR) AS GtkWidget PTR
DECLARE FUNCTION gtk_message_dialog_get_message_area(BYVAL AS GtkMessageDialog PTR) AS GtkWidget PTR
DECLARE SUB gtk_message_dialog_set_image(BYVAL AS GtkMessageDialog PTR, BYVAL AS GtkWidget PTR)
DECLARE SUB gtk_message_dialog_set_markup(BYVAL AS GtkMessageDialog PTR, BYVAL AS const gchar PTR)
TYPE _GtkMessageDialogClass
  AS GtkDialogClass parent_class
  _gtk_reserved1 AS SUB CDECL()
  _gtk_reserved2 AS SUB CDECL()
  _gtk_reserved3 AS SUB CDECL()
  _gtk_reserved4 AS SUB CDECL()
END TYPE
DECLARE FUNCTION gtk_message_type_get_type() AS GType
#DEFINE GTK_TYPE_MESSAGE_TYPE (gtk_message_type_get_type())
DECLARE FUNCTION gtk_model_button_get_type() AS GType
#DEFINE GTK_TYPE_MODEL_BUTTON (gtk_model_button_get_type())
#DEFINE GTK_MODEL_BUTTON(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_MODEL_BUTTON, GtkModelButton))
#DEFINE GTK_MODEL_BUTTON_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_MODEL_BUTTON, Gtk))
#DEFINE GTK_IS_MODEL_BUTTON(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_MODEL_BUTTON))
#DEFINE GTK_IS_CLASS_MODEL_BUTTON(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_MODEL_BUTTON))
#DEFINE GTK_MODEL_BUTTON_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_MODEL_BUTTON, Gtk))
DECLARE FUNCTION gtk_model_button_new() AS GtkWidget PTR
TYPE GtkModuleDisplayInitFunc AS SUB CDECL(BYVAL AS GdkDisplay PTR)
TYPE GtkModuleInitFunc AS SUB CDECL(BYVAL AS gint PTR, BYVAL AS gchar PTR PTR PTR)
TYPE _GtkMountOperation
  AS GMountOperation parent_instance
  AS GtkMountOperationPrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_mount_operation_get_type() AS GType
#DEFINE GTK_TYPE_MOUNT_OPERATION (gtk_mount_operation_get_type())
#DEFINE GTK_MOUNT_OPERATION(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_MOUNT_OPERATION, GtkMountOperation))
#DEFINE GTK_MOUNT_OPERATION_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_MOUNT_OPERATION, GtkMountOperationClass))
#DEFINE GTK_IS_MOUNT_OPERATION(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_MOUNT_OPERATION))
#DEFINE GTK_IS_CLASS_MOUNT_OPERATION(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_MOUNT_OPERATION))
#DEFINE GTK_MOUNT_OPERATION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_MOUNT_OPERATION, GtkMountOperationClass))
DECLARE FUNCTION gtk_mount_operation_new(BYVAL AS GtkWindow PTR) AS GMountOperation PTR
DECLARE FUNCTION gtk_mount_operation_get_parent(BYVAL AS GtkMountOperation PTR) AS GtkWindow PTR
DECLARE FUNCTION gtk_mount_operation_get_screen(BYVAL AS GtkMountOperation PTR) AS GdkScreen PTR
DECLARE FUNCTION gtk_mount_operation_is_showing(BYVAL AS GtkMountOperation PTR) AS gboolean
DECLARE SUB gtk_mount_operation_set_parent(BYVAL AS GtkMountOperation PTR, BYVAL AS GtkWindow PTR)
DECLARE SUB gtk_mount_operation_set_screen(BYVAL AS GtkMountOperation PTR, BYVAL AS GdkScreen PTR)
TYPE _GtkMountOperationClass
  AS GMountOperationClass parent_class
  _gtk_reserved1 AS SUB CDECL()
  _gtk_reserved2 AS SUB CDECL()
  _gtk_reserved3 AS SUB CDECL()
  _gtk_reserved4 AS SUB CDECL()
END TYPE
TYPE _GtkNativeDialog
  AS GObject parent_instance
END TYPE
DECLARE FUNCTION gtk_movement_step_get_type() AS GType
#DEFINE GTK_TYPE_MOVEMENT_STEP (gtk_movement_step_get_type())
DECLARE FUNCTION gtk_native_dialog_get_type() AS GType
#DEFINE GTK_TYPE_NATIVE_DIALOG (gtk_native_dialog_get_type())
#DEFINE GTK_NATIVE_DIALOG(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_NATIVE_DIALOG, GtkNativeDialog))
#DEFINE GTK_NATIVE_DIALOG_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_NATIVE_DIALOG, GtkNativeDialogClass))
#DEFINE GTK_IS_NATIVE_DIALOG(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_NATIVE_DIALOG))
#DEFINE GTK_IS_CLASS_NATIVE_DIALOG(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_NATIVE_DIALOG))
#DEFINE GTK_NATIVE_DIALOG_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_NATIVE_DIALOG, GtkNativeDialogClass))
DECLARE SUB gtk_native_dialog_destroy(BYVAL AS GtkNativeDialog PTR)
DECLARE FUNCTION gtk_native_dialog_get_modal(BYVAL AS GtkNativeDialog PTR) AS gboolean
DECLARE FUNCTION gtk_native_dialog_get_title(BYVAL AS GtkNativeDialog PTR) AS const char PTR
DECLARE FUNCTION gtk_native_dialog_get_transient_for(BYVAL AS GtkNativeDialog PTR) AS GtkWindow PTR
DECLARE FUNCTION gtk_native_dialog_get_visible(BYVAL AS GtkNativeDialog PTR) AS gboolean
DECLARE SUB gtk_native_dialog_hide(BYVAL AS GtkNativeDialog PTR)
DECLARE FUNCTION gtk_native_dialog_run(BYVAL AS GtkNativeDialog PTR) AS gint
DECLARE SUB gtk_native_dialog_set_modal(BYVAL AS GtkNativeDialog PTR, BYVAL AS gboolean)
DECLARE SUB gtk_native_dialog_set_title(BYVAL AS GtkNativeDialog PTR, BYVAL AS const char PTR)
DECLARE SUB gtk_native_dialog_set_transient_for(BYVAL AS GtkNativeDialog PTR, BYVAL AS GtkWindow PTR)
DECLARE SUB gtk_native_dialog_show(BYVAL AS GtkNativeDialog PTR)
TYPE _GtkNotebook
  AS GtkContainer container
  AS GtkNotebookPrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_notebook_get_type() AS GType
#DEFINE GTK_TYPE_NOTEBOOK (gtk_notebook_get_type())
#DEFINE GTK_NOTEBOOK(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_NOTEBOOK, GtkNotebook))
#DEFINE GTK_NOTEBOOK_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_NOTEBOOK, GtkNotebookClass))
#DEFINE GTK_IS_NOTEBOOK(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_NOTEBOOK))
#DEFINE GTK_IS_CLASS_NOTEBOOK(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_NOTEBOOK))
#DEFINE GTK_NOTEBOOK_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_NOTEBOOK, GtkNotebookClass))
DECLARE FUNCTION gtk_notebook_new() AS GtkWidget PTR
DECLARE FUNCTION gtk_notebook_append_page(BYVAL AS GtkNotebook PTR, BYVAL AS GtkWidget PTR, BYVAL AS GtkWidget PTR) AS gint
DECLARE FUNCTION gtk_notebook_append_page_menu(BYVAL AS GtkNotebook PTR, BYVAL AS GtkWidget PTR, BYVAL AS GtkWidget PTR, BYVAL AS GtkWidget PTR) AS gint
DECLARE SUB gtk_notebook_detach_tab(BYVAL AS GtkNotebook PTR, BYVAL AS GtkWidget PTR)
DECLARE FUNCTION gtk_notebook_get_action_widget(BYVAL AS GtkNotebook PTR, BYVAL AS GtkPackType) AS GtkWidget PTR
DECLARE FUNCTION gtk_notebook_get_current_page(BYVAL AS GtkNotebook PTR) AS gint
DECLARE FUNCTION gtk_notebook_get_group_name(BYVAL AS GtkNotebook PTR) AS const gchar PTR
DECLARE FUNCTION gtk_notebook_get_menu_label(BYVAL AS GtkNotebook PTR, BYVAL AS GtkWidget PTR) AS GtkWidget PTR
DECLARE FUNCTION gtk_notebook_get_menu_label_text(BYVAL AS GtkNotebook PTR, BYVAL AS GtkWidget PTR) AS const gchar PTR
DECLARE FUNCTION gtk_notebook_get_n_pages(BYVAL AS GtkNotebook PTR) AS gint
DECLARE FUNCTION gtk_notebook_get_nth_page(BYVAL AS GtkNotebook PTR, BYVAL AS gint) AS GtkWidget PTR
DECLARE FUNCTION gtk_notebook_get_scrollable(BYVAL AS GtkNotebook PTR) AS gboolean
DECLARE FUNCTION gtk_notebook_get_show_border(BYVAL AS GtkNotebook PTR) AS gboolean
DECLARE FUNCTION gtk_notebook_get_show_tabs(BYVAL AS GtkNotebook PTR) AS gboolean
DECLARE FUNCTION gtk_notebook_get_tab_detachable(BYVAL AS GtkNotebook PTR, BYVAL AS GtkWidget PTR) AS gboolean
DECLARE FUNCTION gtk_notebook_get_tab_hborder(BYVAL AS GtkNotebook PTR) AS guint16
DECLARE FUNCTION gtk_notebook_get_tab_label(BYVAL AS GtkNotebook PTR, BYVAL AS GtkWidget PTR) AS GtkWidget PTR
DECLARE FUNCTION gtk_notebook_get_tab_label_text(BYVAL AS GtkNotebook PTR, BYVAL AS GtkWidget PTR) AS const gchar PTR
DECLARE FUNCTION gtk_notebook_get_tab_pos(BYVAL AS GtkNotebook PTR) AS GtkPositionType
DECLARE FUNCTION gtk_notebook_get_tab_reorderable(BYVAL AS GtkNotebook PTR, BYVAL AS GtkWidget PTR) AS gboolean
DECLARE FUNCTION gtk_notebook_get_tab_vborder(BYVAL AS GtkNotebook PTR) AS guint16
DECLARE FUNCTION gtk_notebook_insert_page(BYVAL AS GtkNotebook PTR, BYVAL AS GtkWidget PTR, BYVAL AS GtkWidget PTR, BYVAL AS gint) AS gint
DECLARE FUNCTION gtk_notebook_insert_page_menu(BYVAL AS GtkNotebook PTR, BYVAL AS GtkWidget PTR, BYVAL AS GtkWidget PTR, BYVAL AS GtkWidget PTR, BYVAL AS gint) AS gint
DECLARE SUB gtk_notebook_next_page(BYVAL AS GtkNotebook PTR)
DECLARE FUNCTION gtk_notebook_page_num(BYVAL AS GtkNotebook PTR, BYVAL AS GtkWidget PTR) AS gint
DECLARE SUB gtk_notebook_popup_disable(BYVAL AS GtkNotebook PTR)
DECLARE SUB gtk_notebook_popup_enable(BYVAL AS GtkNotebook PTR)
DECLARE FUNCTION gtk_notebook_prepend_page(BYVAL AS GtkNotebook PTR, BYVAL AS GtkWidget PTR, BYVAL AS GtkWidget PTR) AS gint
DECLARE FUNCTION gtk_notebook_prepend_page_menu(BYVAL AS GtkNotebook PTR, BYVAL AS GtkWidget PTR, BYVAL AS GtkWidget PTR, BYVAL AS GtkWidget PTR) AS gint
DECLARE SUB gtk_notebook_prev_page(BYVAL AS GtkNotebook PTR)
DECLARE SUB gtk_notebook_remove_page(BYVAL AS GtkNotebook PTR, BYVAL AS gint)
DECLARE SUB gtk_notebook_reorder_child(BYVAL AS GtkNotebook PTR, BYVAL AS GtkWidget PTR, BYVAL AS gint)
DECLARE SUB gtk_notebook_set_action_widget(BYVAL AS GtkNotebook PTR, BYVAL AS GtkWidget PTR, BYVAL AS GtkPackType)
DECLARE SUB gtk_notebook_set_current_page(BYVAL AS GtkNotebook PTR, BYVAL AS gint)
DECLARE SUB gtk_notebook_set_group_name(BYVAL AS GtkNotebook PTR, BYVAL AS const gchar PTR)
DECLARE SUB gtk_notebook_set_menu_label(BYVAL AS GtkNotebook PTR, BYVAL AS GtkWidget PTR, BYVAL AS GtkWidget PTR)
DECLARE SUB gtk_notebook_set_menu_label_text(BYVAL AS GtkNotebook PTR, BYVAL AS GtkWidget PTR, BYVAL AS const gchar PTR)
DECLARE SUB gtk_notebook_set_scrollable(BYVAL AS GtkNotebook PTR, BYVAL AS gboolean)
DECLARE SUB gtk_notebook_set_show_border(BYVAL AS GtkNotebook PTR, BYVAL AS gboolean)
DECLARE SUB gtk_notebook_set_show_tabs(BYVAL AS GtkNotebook PTR, BYVAL AS gboolean)
DECLARE SUB gtk_notebook_set_tab_detachable(BYVAL AS GtkNotebook PTR, BYVAL AS GtkWidget PTR, BYVAL AS gboolean)
DECLARE SUB gtk_notebook_set_tab_label(BYVAL AS GtkNotebook PTR, BYVAL AS GtkWidget PTR, BYVAL AS GtkWidget PTR)
DECLARE SUB gtk_notebook_set_tab_label_text(BYVAL AS GtkNotebook PTR, BYVAL AS GtkWidget PTR, BYVAL AS const gchar PTR)
DECLARE SUB gtk_notebook_set_tab_pos(BYVAL AS GtkNotebook PTR, BYVAL AS GtkPositionType)
DECLARE SUB gtk_notebook_set_tab_reorderable(BYVAL AS GtkNotebook PTR, BYVAL AS GtkWidget PTR, BYVAL AS gboolean)
TYPE _GtkNotebookAccessible
  AS GtkContainerAccessible parent
  AS GtkNotebookAccessiblePrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_notebook_accessible_get_type() AS GType
#DEFINE GTK_TYPE_NOTEBOOK_ACCESSIBLE (gtk_notebook_accessible_get_type())
#DEFINE GTK_NOTEBOOK_ACCESSIBLE(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_NOTEBOOK_ACCESSIBLE, GtkNotebookAccessible))
#DEFINE GTK_NOTEBOOK_ACCESSIBLE_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_NOTEBOOK_ACCESSIBLE, GtkNotebookAccessibleClass))
#DEFINE GTK_IS_NOTEBOOK_ACCESSIBLE(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_NOTEBOOK_ACCESSIBLE))
#DEFINE GTK_IS_CLASS_NOTEBOOK_ACCESSIBLE(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_NOTEBOOK_ACCESSIBLE))
#DEFINE GTK_NOTEBOOK_ACCESSIBLE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_NOTEBOOK_ACCESSIBLE, GtkNotebookAccessibleClass))
TYPE _GtkNotebookAccessibleClass
  AS GtkContainerAccessibleClass parent_class
END TYPE
TYPE _GtkNotebookClass
  AS GtkContainerClass parent_class
  switch_page AS SUB CDECL(BYVAL AS GtkNotebook PTR, BYVAL AS GtkWidget PTR, BYVAL AS guint)
  select_page AS FUNCTION CDECL(BYVAL AS GtkNotebook PTR, BYVAL AS gboolean) AS gboolean
  focus_tab AS FUNCTION CDECL(BYVAL AS GtkNotebook PTR, BYVAL AS GtkNotebookTab) AS gboolean
  change_current_page AS FUNCTION CDECL(BYVAL AS GtkNotebook PTR, BYVAL AS gint) AS gboolean
  move_focus_out AS SUB CDECL(BYVAL AS GtkNotebook PTR, BYVAL AS GtkDirectionType)
  reorder_tab AS FUNCTION CDECL(BYVAL AS GtkNotebook PTR, BYVAL AS GtkDirectionType, BYVAL AS gboolean) AS gboolean
  insert_page AS FUNCTION CDECL(BYVAL AS GtkNotebook PTR, BYVAL AS GtkWidget PTR, BYVAL AS GtkWidget PTR, BYVAL AS GtkWidget PTR, BYVAL AS gint) AS gint
  create_window AS FUNCTION CDECL(BYVAL AS GtkNotebook PTR, BYVAL AS GtkWidget PTR, BYVAL AS gint, BYVAL AS gint) AS GtkNotebook PTR
  page_reordered AS SUB CDECL(BYVAL AS GtkNotebook PTR, BYVAL AS GtkWidget PTR, BYVAL AS guint)
  page_removed AS SUB CDECL(BYVAL AS GtkNotebook PTR, BYVAL AS GtkWidget PTR, BYVAL AS guint)
  page_added AS SUB CDECL(BYVAL AS GtkNotebook PTR, BYVAL AS GtkWidget PTR, BYVAL AS guint)
  _gtk_reserved1 AS SUB CDECL()
  _gtk_reserved2 AS SUB CDECL()
  _gtk_reserved3 AS SUB CDECL()
  _gtk_reserved4 AS SUB CDECL()
  _gtk_reserved5 AS SUB CDECL()
  _gtk_reserved6 AS SUB CDECL()
  _gtk_reserved7 AS SUB CDECL()
  _gtk_reserved8 AS SUB CDECL()
END TYPE
TYPE _GtkNotebookPageAccessible
  AS AtkObject parent
  AS GtkNotebookPageAccessiblePrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_notebook_page_accessible_get_type() AS GType
#DEFINE GTK_TYPE_NOTEBOOK_PAGE_ACCESSIBLE (gtk_notebook_page_accessible_get_type())
#DEFINE GTK_NOTEBOOK_PAGE_ACCESSIBLE(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_NOTEBOOK_PAGE_ACCESSIBLE, GtkNotebookPageAccessible))
#DEFINE GTK_NOTEBOOK_PAGE_ACCESSIBLE_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_NOTEBOOK_PAGE_ACCESSIBLE, GtkNotebookPageAccessibleClass))
#DEFINE GTK_IS_NOTEBOOK_PAGE_ACCESSIBLE(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_NOTEBOOK_PAGE_ACCESSIBLE))
#DEFINE GTK_IS_CLASS_NOTEBOOK_PAGE_ACCESSIBLE(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_NOTEBOOK_PAGE_ACCESSIBLE))
#DEFINE GTK_NOTEBOOK_PAGE_ACCESSIBLE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_NOTEBOOK_PAGE_ACCESSIBLE, GtkNotebookPageAccessibleClass))
DECLARE FUNCTION gtk_notebook_page_accessible_new(BYVAL AS GtkNotebookAccessible PTR, BYVAL AS GtkWidget PTR) AS AtkObject PTR
DECLARE SUB gtk_notebook_page_accessible_invalidate(BYVAL AS GtkNotebookPageAccessible PTR)
TYPE _GtkNotebookPageAccessibleClass
  AS AtkObjectClass parent_class
END TYPE
TYPE _GtkNumerableIcon
  AS GEmblemedIcon parent
  AS GtkNumerableIconPrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_notebook_tab_get_type() AS GType
#DEFINE GTK_TYPE_NOTEBOOK_TAB (gtk_notebook_tab_get_type())
DECLARE FUNCTION gtk_number_up_layout_get_type() AS GType
#DEFINE GTK_TYPE_NUMBER_UP_LAYOUT (gtk_number_up_layout_get_type())
DECLARE FUNCTION gtk_numerable_icon_get_type() AS GType
#DEFINE GTK_TYPE_NUMERABLE_ICON (gtk_numerable_icon_get_type())
#DEFINE GTK_NUMERABLE_ICON(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_NUMERABLE_ICON, GtkNumerableIcon))
#DEFINE GTK_NUMERABLE_ICON_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_NUMERABLE_ICON, GtkNumerableIconClass))
#DEFINE GTK_IS_NUMERABLE_ICON(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_NUMERABLE_ICON))
#DEFINE GTK_IS_CLASS_NUMERABLE_ICON(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_NUMERABLE_ICON))
#DEFINE GTK_NUMERABLE_ICON_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_NUMERABLE_ICON, GtkNumerableIconClass))
DECLARE FUNCTION gtk_numerable_icon_new(BYVAL AS GIcon PTR) AS GIcon PTR
DECLARE FUNCTION gtk_numerable_icon_new_with_style_context(BYVAL AS GIcon PTR, BYVAL AS GtkStyleContext PTR) AS GIcon PTR
DECLARE FUNCTION gtk_numerable_icon_get_background_gicon(BYVAL AS GtkNumerableIcon PTR) AS GIcon PTR
DECLARE FUNCTION gtk_numerable_icon_get_background_icon_name(BYVAL AS GtkNumerableIcon PTR) AS const gchar PTR
DECLARE FUNCTION gtk_numerable_icon_get_count(BYVAL AS GtkNumerableIcon PTR) AS gint
DECLARE FUNCTION gtk_numerable_icon_get_label(BYVAL AS GtkNumerableIcon PTR) AS const gchar PTR
DECLARE FUNCTION gtk_numerable_icon_get_style_context(BYVAL AS GtkNumerableIcon PTR) AS GtkStyleContext PTR
DECLARE SUB gtk_numerable_icon_set_background_gicon(BYVAL AS GtkNumerableIcon PTR, BYVAL AS GIcon PTR)
DECLARE SUB gtk_numerable_icon_set_background_icon_name(BYVAL AS GtkNumerableIcon PTR, BYVAL AS const gchar PTR)
DECLARE SUB gtk_numerable_icon_set_count(BYVAL AS GtkNumerableIcon PTR, BYVAL AS gint)
DECLARE SUB gtk_numerable_icon_set_label(BYVAL AS GtkNumerableIcon PTR, BYVAL AS const gchar PTR)
DECLARE SUB gtk_numerable_icon_set_style_context(BYVAL AS GtkNumerableIcon PTR, BYVAL AS GtkStyleContext PTR)
TYPE _GtkNumerableIconClass
  AS GEmblemedIconClass parent_class
  AS gpointer padding(15)
END TYPE
TYPE _GtkOffscreenWindow
  AS GtkWindow parent_object
END TYPE
DECLARE FUNCTION gtk_offscreen_window_get_type() AS GType
#DEFINE GTK_TYPE_OFFSCREEN_WINDOW (gtk_offscreen_window_get_type())
#DEFINE GTK_OFFSCREEN_WINDOW(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_OFFSCREEN_WINDOW, GtkOffscreenWindow))
#DEFINE GTK_OFFSCREEN_WINDOW_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_OFFSCREEN_WINDOW, GtkOffscreenWindowClass))
#DEFINE GTK_IS_OFFSCREEN_WINDOW(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_OFFSCREEN_WINDOW))
#DEFINE GTK_IS_CLASS_OFFSCREEN_WINDOW(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_OFFSCREEN_WINDOW))
#DEFINE GTK_OFFSCREEN_WINDOW_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_OFFSCREEN_WINDOW, GtkOffscreenWindowClass))
DECLARE FUNCTION gtk_offscreen_window_new() AS GtkWidget PTR
DECLARE FUNCTION gtk_offscreen_window_get_pixbuf(BYVAL AS GtkOffscreenWindow PTR) AS GdkPixbuf PTR
DECLARE FUNCTION gtk_offscreen_window_get_surface(BYVAL AS GtkOffscreenWindow PTR) AS cairo_surface_t PTR
TYPE _GtkOffscreenWindowClass
  AS GtkWindowClass parent_class
  _gtk_reserved1 AS SUB CDECL()
  _gtk_reserved2 AS SUB CDECL()
  _gtk_reserved3 AS SUB CDECL()
  _gtk_reserved4 AS SUB CDECL()
END TYPE
DECLARE FUNCTION gtk_orientable_get_type() AS GType
#DEFINE GTK_TYPE_ORIENTABLE (gtk_orientable_get_type())
#DEFINE GTK_ORIENTABLE(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_ORIENTABLE, GtkOrientable))
#DEFINE GTK_ORIENTABLE_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_ORIENTABLE, GtkOrientableIface))
#DEFINE GTK_IS_ORIENTABLE(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_ORIENTABLE))
#DEFINE GTK_ORIENTABLE_GET_IFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE((obj), GTK_TYPE_ORIENTABLE, GtkOrientableIface))
DECLARE FUNCTION gtk_orientable_get_orientation(BYVAL AS GtkOrientable PTR) AS GtkOrientation
DECLARE SUB gtk_orientable_set_orientation(BYVAL AS GtkOrientable PTR, BYVAL AS GtkOrientation)
TYPE _GtkOrientableIface
  AS GTypeInterface base_iface
END TYPE
TYPE _GtkOverlay
  AS GtkBin parent
  AS GtkOverlayPrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_orientation_get_type() AS GType
#DEFINE GTK_TYPE_ORIENTATION (gtk_orientation_get_type())
DECLARE FUNCTION gtk_overlay_get_type() AS GType
#DEFINE GTK_TYPE_OVERLAY (gtk_overlay_get_type())
#DEFINE GTK_OVERLAY(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_OVERLAY, GtkOverlay))
#DEFINE GTK_OVERLAY_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_OVERLAY, GtkOverlayClass))
#DEFINE GTK_IS_OVERLAY(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_OVERLAY))
#DEFINE GTK_IS_CLASS_OVERLAY(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_OVERLAY))
#DEFINE GTK_OVERLAY_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_OVERLAY, GtkOverlayClass))
DECLARE FUNCTION gtk_overlay_new() AS GtkWidget PTR
DECLARE SUB gtk_overlay_add_overlay(BYVAL AS GtkOverlay PTR, BYVAL AS GtkWidget PTR)
DECLARE FUNCTION gtk_overlay_get_overlay_pass_through(BYVAL AS GtkOverlay PTR, BYVAL AS GtkWidget PTR) AS gboolean
DECLARE SUB gtk_overlay_reorder_overlay(BYVAL AS GtkOverlay PTR, BYVAL AS GtkWidget PTR, BYVAL AS gint /'int'/)
DECLARE SUB gtk_overlay_set_overlay_pass_through(BYVAL AS GtkOverlay PTR, BYVAL AS GtkWidget PTR, BYVAL AS gboolean)
TYPE _GtkOverlayClass
  AS GtkBinClass parent_class
  get_child_position AS FUNCTION CDECL(BYVAL AS GtkOverlay PTR, BYVAL AS GtkWidget PTR, BYVAL AS GtkAllocation PTR) AS gboolean
  _gtk_reserved1 AS SUB CDECL()
  _gtk_reserved2 AS SUB CDECL()
  _gtk_reserved3 AS SUB CDECL()
  _gtk_reserved4 AS SUB CDECL()
  _gtk_reserved5 AS SUB CDECL()
  _gtk_reserved6 AS SUB CDECL()
  _gtk_reserved7 AS SUB CDECL()
  _gtk_reserved8 AS SUB CDECL()
END TYPE
TYPE _GtkPadActionEntry
  AS GtkPadActionType type
  AS gint index
  AS gint mode
  AS gchar PTR label
  AS gchar PTR action_name
END TYPE
DECLARE FUNCTION gtk_pack_direction_get_type() AS GType
#DEFINE GTK_TYPE_PACK_DIRECTION (gtk_pack_direction_get_type())
DECLARE FUNCTION gtk_pack_type_get_type() AS GType
#DEFINE GTK_TYPE_PACK_TYPE (gtk_pack_type_get_type())
DECLARE FUNCTION gtk_pad_action_type_get_type() AS GType
#DEFINE GTK_TYPE_PAD_ACTION_TYPE (gtk_pad_action_type_get_type())
DECLARE FUNCTION gtk_pad_controller_get_type() AS GType
#DEFINE GTK_TYPE_PAD_CONTROLLER (gtk_pad_controller_get_type())
#DEFINE GTK_PAD_CONTROLLER(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_PAD_CONTROLLER, GtkPadController))
#DEFINE GTK_PAD_CONTROLLER_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_PAD_CONTROLLER, GtkPadControllerClass))
#DEFINE GTK_IS_PAD_CONTROLLER(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_PAD_CONTROLLER))
#DEFINE GTK_IS_CLASS_PAD_CONTROLLER(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_PAD_CONTROLLER))
#DEFINE GTK_PAD_CONTROLLER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_PAD_CONTROLLER, GtkPadControllerClass))
DECLARE FUNCTION gtk_pad_controller_new(BYVAL AS GtkWindow PTR, BYVAL AS GActionGroup PTR, BYVAL AS GdkDevice PTR) AS GtkPadController PTR
DECLARE SUB gtk_pad_controller_set_action(BYVAL AS GtkPadController PTR, BYVAL AS GtkPadActionType, BYVAL AS gint, BYVAL AS gint, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR)
DECLARE SUB gtk_pad_controller_set_action_entries(BYVAL AS GtkPadController PTR, BYVAL AS const GtkPadActionEntry PTR, BYVAL AS gint)
TYPE _GtkPageRange
  AS gint start
  AS gint end
END TYPE
DECLARE FUNCTION gtk_page_orientation_get_type() AS GType
#DEFINE GTK_TYPE_PAGE_ORIENTATION (gtk_page_orientation_get_type())
DECLARE FUNCTION gtk_page_set_get_type() AS GType
#DEFINE GTK_TYPE_PAGE_SET (gtk_page_set_get_type())
DECLARE FUNCTION gtk_page_setup_get_type() AS GType
#DEFINE GTK_TYPE_PAGE_SETUP (gtk_page_setup_get_type())
#DEFINE GTK_PAGE_SETUP(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_PAGE_SETUP, GtkPageSetup))
#DEFINE GTK_PAGE_SETUP_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_PAGE_SETUP, Gtk))
#DEFINE GTK_IS_PAGE_SETUP(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_PAGE_SETUP))
#DEFINE GTK_IS_CLASS_PAGE_SETUP(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_PAGE_SETUP))
#DEFINE GTK_PAGE_SETUP_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_PAGE_SETUP, Gtk))
DECLARE FUNCTION gtk_page_setup_new() AS GtkPageSetup PTR
DECLARE FUNCTION gtk_page_setup_new_from_file(BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR) AS GtkPageSetup PTR
DECLARE FUNCTION gtk_page_setup_new_from_gvariant(BYVAL AS GVariant PTR) AS GtkPageSetup PTR
DECLARE FUNCTION gtk_page_setup_new_from_key_file(BYVAL AS GKeyFile PTR, BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR) AS GtkPageSetup PTR
DECLARE FUNCTION gtk_page_setup_copy(BYVAL AS GtkPageSetup PTR) AS GtkPageSetup PTR
DECLARE FUNCTION gtk_page_setup_get_bottom_margin(BYVAL AS GtkPageSetup PTR, BYVAL AS GtkUnit) AS gdouble
DECLARE FUNCTION gtk_page_setup_get_left_margin(BYVAL AS GtkPageSetup PTR, BYVAL AS GtkUnit) AS gdouble
DECLARE FUNCTION gtk_page_setup_get_orientation(BYVAL AS GtkPageSetup PTR) AS GtkPageOrientation
DECLARE FUNCTION gtk_page_setup_get_page_height(BYVAL AS GtkPageSetup PTR, BYVAL AS GtkUnit) AS gdouble
DECLARE FUNCTION gtk_page_setup_get_page_width(BYVAL AS GtkPageSetup PTR, BYVAL AS GtkUnit) AS gdouble
DECLARE FUNCTION gtk_page_setup_get_paper_height(BYVAL AS GtkPageSetup PTR, BYVAL AS GtkUnit) AS gdouble
DECLARE FUNCTION gtk_page_setup_get_paper_size(BYVAL AS GtkPageSetup PTR) AS GtkPaperSize PTR
DECLARE FUNCTION gtk_page_setup_get_paper_width(BYVAL AS GtkPageSetup PTR, BYVAL AS GtkUnit) AS gdouble
DECLARE FUNCTION gtk_page_setup_get_right_margin(BYVAL AS GtkPageSetup PTR, BYVAL AS GtkUnit) AS gdouble
DECLARE FUNCTION gtk_page_setup_get_top_margin(BYVAL AS GtkPageSetup PTR, BYVAL AS GtkUnit) AS gdouble
DECLARE FUNCTION gtk_page_setup_load_file(BYVAL AS GtkPageSetup PTR, BYVAL AS const char PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION gtk_page_setup_load_key_file(BYVAL AS GtkPageSetup PTR, BYVAL AS GKeyFile PTR, BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE SUB gtk_page_setup_set_bottom_margin(BYVAL AS GtkPageSetup PTR, BYVAL AS gdouble, BYVAL AS GtkUnit)
DECLARE SUB gtk_page_setup_set_left_margin(BYVAL AS GtkPageSetup PTR, BYVAL AS gdouble, BYVAL AS GtkUnit)
DECLARE SUB gtk_page_setup_set_orientation(BYVAL AS GtkPageSetup PTR, BYVAL AS GtkPageOrientation)
DECLARE SUB gtk_page_setup_set_paper_size(BYVAL AS GtkPageSetup PTR, BYVAL AS GtkPaperSize PTR)
DECLARE SUB gtk_page_setup_set_paper_size_and_default_margins(BYVAL AS GtkPageSetup PTR, BYVAL AS GtkPaperSize PTR)
DECLARE SUB gtk_page_setup_set_right_margin(BYVAL AS GtkPageSetup PTR, BYVAL AS gdouble, BYVAL AS GtkUnit)
DECLARE SUB gtk_page_setup_set_top_margin(BYVAL AS GtkPageSetup PTR, BYVAL AS gdouble, BYVAL AS GtkUnit)
DECLARE FUNCTION gtk_page_setup_to_file(BYVAL AS GtkPageSetup PTR, BYVAL AS const char PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION gtk_page_setup_to_gvariant(BYVAL AS GtkPageSetup PTR) AS GVariant PTR
DECLARE SUB gtk_page_setup_to_key_file(BYVAL AS GtkPageSetup PTR, BYVAL AS GKeyFile PTR, BYVAL AS const gchar PTR)
TYPE GtkPageSetupDoneFunc AS SUB CDECL(BYVAL AS GtkPageSetup PTR, BYVAL AS gpointer)
TYPE _GtkPanedAccessible
  AS GtkContainerAccessible parent
  AS GtkPanedAccessiblePrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_pan_direction_get_type() AS GType
#DEFINE GTK_TYPE_PAN_DIRECTION (gtk_pan_direction_get_type())
DECLARE FUNCTION gtk_paned_accessible_get_type() AS GType
#DEFINE GTK_TYPE_PANED_ACCESSIBLE (gtk_paned_accessible_get_type())
#DEFINE GTK_PANED_ACCESSIBLE(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_PANED_ACCESSIBLE, GtkPanedAccessible))
#DEFINE GTK_PANED_ACCESSIBLE_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_PANED_ACCESSIBLE, GtkPanedAccessibleClass))
#DEFINE GTK_IS_PANED_ACCESSIBLE(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_PANED_ACCESSIBLE))
#DEFINE GTK_IS_CLASS_PANED_ACCESSIBLE(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_PANED_ACCESSIBLE))
#DEFINE GTK_PANED_ACCESSIBLE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_PANED_ACCESSIBLE, GtkPanedAccessibleClass))
TYPE _GtkPanedAccessibleClass
  AS GtkContainerAccessibleClass parent_class
END TYPE
DECLARE FUNCTION gtk_paper_size_new(BYVAL AS const gchar PTR) AS GtkPaperSize PTR
DECLARE FUNCTION gtk_paper_size_new_custom(BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS gdouble, BYVAL AS gdouble, BYVAL AS GtkUnit) AS GtkPaperSize PTR
DECLARE FUNCTION gtk_paper_size_new_from_gvariant(BYVAL AS GVariant PTR) AS GtkPaperSize PTR
DECLARE FUNCTION gtk_paper_size_new_from_ipp(BYVAL AS const gchar PTR, BYVAL AS gdouble, BYVAL AS gdouble) AS GtkPaperSize PTR
DECLARE FUNCTION gtk_paper_size_new_from_key_file(BYVAL AS GKeyFile PTR, BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR) AS GtkPaperSize PTR
DECLARE FUNCTION gtk_paper_size_new_from_ppd(BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS gdouble, BYVAL AS gdouble) AS GtkPaperSize PTR
DECLARE FUNCTION gtk_paper_size_copy(BYVAL AS GtkPaperSize PTR) AS GtkPaperSize PTR
DECLARE SUB gtk_paper_size_free(BYVAL AS GtkPaperSize PTR)
DECLARE FUNCTION gtk_paper_size_get_default_bottom_margin(BYVAL AS GtkPaperSize PTR, BYVAL AS GtkUnit) AS gdouble
DECLARE FUNCTION gtk_paper_size_get_default_left_margin(BYVAL AS GtkPaperSize PTR, BYVAL AS GtkUnit) AS gdouble
DECLARE FUNCTION gtk_paper_size_get_default_right_margin(BYVAL AS GtkPaperSize PTR, BYVAL AS GtkUnit) AS gdouble
DECLARE FUNCTION gtk_paper_size_get_default_top_margin(BYVAL AS GtkPaperSize PTR, BYVAL AS GtkUnit) AS gdouble
DECLARE FUNCTION gtk_paper_size_get_display_name(BYVAL AS GtkPaperSize PTR) AS const gchar PTR
DECLARE FUNCTION gtk_paper_size_get_height(BYVAL AS GtkPaperSize PTR, BYVAL AS GtkUnit) AS gdouble
DECLARE FUNCTION gtk_paper_size_get_name(BYVAL AS GtkPaperSize PTR) AS const gchar PTR
DECLARE FUNCTION gtk_paper_size_get_ppd_name(BYVAL AS GtkPaperSize PTR) AS const gchar PTR
DECLARE FUNCTION gtk_paper_size_get_width(BYVAL AS GtkPaperSize PTR, BYVAL AS GtkUnit) AS gdouble
DECLARE FUNCTION gtk_paper_size_is_custom(BYVAL AS GtkPaperSize PTR) AS gboolean
DECLARE FUNCTION gtk_paper_size_is_equal(BYVAL AS GtkPaperSize PTR, BYVAL AS GtkPaperSize PTR) AS gboolean
DECLARE FUNCTION gtk_paper_size_is_ipp(BYVAL AS GtkPaperSize PTR) AS gboolean
DECLARE SUB gtk_paper_size_set_size(BYVAL AS GtkPaperSize PTR, BYVAL AS gdouble, BYVAL AS gdouble, BYVAL AS GtkUnit)
DECLARE FUNCTION gtk_paper_size_to_gvariant(BYVAL AS GtkPaperSize PTR) AS GVariant PTR
DECLARE SUB gtk_paper_size_to_key_file(BYVAL AS GtkPaperSize PTR, BYVAL AS GKeyFile PTR, BYVAL AS const gchar PTR)
DECLARE FUNCTION gtk_paper_size_get_default() AS const gchar PTR
DECLARE FUNCTION gtk_paper_size_get_paper_sizes(BYVAL AS gboolean) AS GList PTR
DECLARE FUNCTION gtk_path_priority_type_get_type() AS GType
#DEFINE GTK_TYPE_PATH_PRIORITY_TYPE (gtk_path_priority_type_get_type())
DECLARE FUNCTION gtk_path_type_get_type() AS GType
#DEFINE GTK_TYPE_PATH_TYPE (gtk_path_type_get_type())
DECLARE FUNCTION gtk_places_sidebar_get_type() AS GType
#DEFINE GTK_TYPE_PLACES_SIDEBAR (gtk_places_sidebar_get_type())
#DEFINE GTK_PLACES_SIDEBAR(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_PLACES_SIDEBAR, GtkPlacesSidebar))
#DEFINE GTK_PLACES_SIDEBAR_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_PLACES_SIDEBAR, GtkPlacesSidebarClass))
#DEFINE GTK_IS_PLACES_SIDEBAR(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_PLACES_SIDEBAR))
#DEFINE GTK_IS_CLASS_PLACES_SIDEBAR(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_PLACES_SIDEBAR))
#DEFINE GTK_PLACES_SIDEBAR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_PLACES_SIDEBAR, GtkPlacesSidebarClass))
DECLARE FUNCTION gtk_places_sidebar_new() AS GtkWidget PTR
DECLARE SUB gtk_places_sidebar_add_shortcut(BYVAL AS GtkPlacesSidebar PTR, BYVAL AS GFile PTR)
DECLARE FUNCTION gtk_places_sidebar_get_local_only(BYVAL AS GtkPlacesSidebar PTR) AS gboolean
DECLARE FUNCTION gtk_places_sidebar_get_location(BYVAL AS GtkPlacesSidebar PTR) AS GFile PTR
DECLARE FUNCTION gtk_places_sidebar_get_nth_bookmark(BYVAL AS GtkPlacesSidebar PTR, BYVAL AS gint) AS GFile PTR
DECLARE FUNCTION gtk_places_sidebar_get_open_flags(BYVAL AS GtkPlacesSidebar PTR) AS GtkPlacesOpenFlags
DECLARE FUNCTION gtk_places_sidebar_get_show_connect_to_server(BYVAL AS GtkPlacesSidebar PTR) AS gboolean
DECLARE FUNCTION gtk_places_sidebar_get_show_desktop(BYVAL AS GtkPlacesSidebar PTR) AS gboolean
DECLARE FUNCTION gtk_places_sidebar_get_show_enter_location(BYVAL AS GtkPlacesSidebar PTR) AS gboolean
DECLARE FUNCTION gtk_places_sidebar_get_show_other_locations(BYVAL AS GtkPlacesSidebar PTR) AS gboolean
DECLARE FUNCTION gtk_places_sidebar_get_show_recent(BYVAL AS GtkPlacesSidebar PTR) AS gboolean
DECLARE FUNCTION gtk_places_sidebar_get_show_starred_location(BYVAL AS GtkPlacesSidebar PTR) AS gboolean
DECLARE FUNCTION gtk_places_sidebar_get_show_trash(BYVAL AS GtkPlacesSidebar PTR) AS gboolean
DECLARE FUNCTION gtk_places_sidebar_list_shortcuts(BYVAL AS GtkPlacesSidebar PTR) AS GSList PTR
DECLARE SUB gtk_places_sidebar_remove_shortcut(BYVAL AS GtkPlacesSidebar PTR, BYVAL AS GFile PTR)
DECLARE SUB gtk_places_sidebar_set_drop_targets_visible(BYVAL AS GtkPlacesSidebar PTR, BYVAL AS gboolean, BYVAL AS GdkDragContext PTR)
DECLARE SUB gtk_places_sidebar_set_local_only(BYVAL AS GtkPlacesSidebar PTR, BYVAL AS gboolean)
DECLARE SUB gtk_places_sidebar_set_location(BYVAL AS GtkPlacesSidebar PTR, BYVAL AS GFile PTR)
DECLARE SUB gtk_places_sidebar_set_open_flags(BYVAL AS GtkPlacesSidebar PTR, BYVAL AS GtkPlacesOpenFlags)
DECLARE SUB gtk_places_sidebar_set_show_connect_to_server(BYVAL AS GtkPlacesSidebar PTR, BYVAL AS gboolean)
DECLARE SUB gtk_places_sidebar_set_show_desktop(BYVAL AS GtkPlacesSidebar PTR, BYVAL AS gboolean)
DECLARE SUB gtk_places_sidebar_set_show_enter_location(BYVAL AS GtkPlacesSidebar PTR, BYVAL AS gboolean)
DECLARE SUB gtk_places_sidebar_set_show_other_locations(BYVAL AS GtkPlacesSidebar PTR, BYVAL AS gboolean)
DECLARE SUB gtk_places_sidebar_set_show_recent(BYVAL AS GtkPlacesSidebar PTR, BYVAL AS gboolean)
DECLARE SUB gtk_places_sidebar_set_show_starred_location(BYVAL AS GtkPlacesSidebar PTR, BYVAL AS gboolean)
DECLARE SUB gtk_places_sidebar_set_show_trash(BYVAL AS GtkPlacesSidebar PTR, BYVAL AS gboolean)
TYPE _GtkPlug
  AS GtkWindow window
  AS GtkPlugPrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_plug_get_type() AS GType
#DEFINE GTK_TYPE_PLUG (gtk_plug_get_type())
#DEFINE GTK_PLUG(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_PLUG, GtkPlug))
#DEFINE GTK_PLUG_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_PLUG, GtkPlugClass))
#DEFINE GTK_IS_PLUG(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_PLUG))
#DEFINE GTK_IS_CLASS_PLUG(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_PLUG))
#DEFINE GTK_PLUG_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_PLUG, GtkPlugClass))
DECLARE FUNCTION gtk_plug_new(BYVAL AS guint32 /'Window'/) AS GtkWidget PTR
DECLARE FUNCTION gtk_plug_new_for_display(BYVAL AS GdkDisplay PTR, BYVAL AS guint32 /'Window'/) AS GtkWidget PTR
DECLARE SUB gtk_plug_construct(BYVAL AS GtkPlug PTR, BYVAL AS guint32 /'Window'/)
DECLARE SUB gtk_plug_construct_for_display(BYVAL AS GtkPlug PTR, BYVAL AS GdkDisplay PTR, BYVAL AS guint32 /'Window'/)
DECLARE FUNCTION gtk_plug_get_embedded(BYVAL AS GtkPlug PTR) AS gboolean
DECLARE FUNCTION gtk_plug_get_id(BYVAL AS GtkPlug PTR) AS guint32 /'Window'/
DECLARE FUNCTION gtk_plug_get_socket_window(BYVAL AS GtkPlug PTR) AS GdkWindow PTR
TYPE _GtkPlugClass
  AS GtkWindowClass parent_class
  embedded AS SUB CDECL(BYVAL AS GtkPlug PTR)
  _gtk_reserved1 AS SUB CDECL()
  _gtk_reserved2 AS SUB CDECL()
  _gtk_reserved3 AS SUB CDECL()
  _gtk_reserved4 AS SUB CDECL()
END TYPE
TYPE _GtkPopover
  AS GtkBin parent_instance
  AS GtkPopoverPrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_policy_type_get_type() AS GType
#DEFINE GTK_TYPE_POLICY_TYPE (gtk_policy_type_get_type())
DECLARE FUNCTION gtk_popover_get_type() AS GType
#DEFINE GTK_TYPE_POPOVER (gtk_popover_get_type())
#DEFINE GTK_POPOVER(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_POPOVER, GtkPopover))
#DEFINE GTK_POPOVER_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_POPOVER, GtkPopoverClass))
#DEFINE GTK_IS_POPOVER(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_POPOVER))
#DEFINE GTK_IS_CLASS_POPOVER(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_POPOVER))
#DEFINE GTK_POPOVER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_POPOVER, GtkPopoverClass))
DECLARE FUNCTION gtk_popover_new(BYVAL AS GtkWidget PTR) AS GtkWidget PTR
DECLARE FUNCTION gtk_popover_new_from_model(BYVAL AS GtkWidget PTR, BYVAL AS GMenuModel PTR) AS GtkWidget PTR
DECLARE SUB gtk_popover_bind_model(BYVAL AS GtkPopover PTR, BYVAL AS GMenuModel PTR, BYVAL AS const gchar PTR)
DECLARE FUNCTION gtk_popover_get_constrain_to(BYVAL AS GtkPopover PTR) AS GtkPopoverConstraint
DECLARE FUNCTION gtk_popover_get_default_widget(BYVAL AS GtkPopover PTR) AS GtkWidget PTR
DECLARE FUNCTION gtk_popover_get_modal(BYVAL AS GtkPopover PTR) AS gboolean
DECLARE FUNCTION gtk_popover_get_pointing_to(BYVAL AS GtkPopover PTR, BYVAL AS GdkRectangle PTR) AS gboolean
DECLARE FUNCTION gtk_popover_get_position(BYVAL AS GtkPopover PTR) AS GtkPositionType
DECLARE FUNCTION gtk_popover_get_relative_to(BYVAL AS GtkPopover PTR) AS GtkWidget PTR
DECLARE FUNCTION gtk_popover_get_transitions_enabled(BYVAL AS GtkPopover PTR) AS gboolean
DECLARE SUB gtk_popover_popdown(BYVAL AS GtkPopover PTR)
DECLARE SUB gtk_popover_popup(BYVAL AS GtkPopover PTR)
DECLARE SUB gtk_popover_set_constrain_to(BYVAL AS GtkPopover PTR, BYVAL AS GtkPopoverConstraint)
DECLARE SUB gtk_popover_set_default_widget(BYVAL AS GtkPopover PTR, BYVAL AS GtkWidget PTR)
DECLARE SUB gtk_popover_set_modal(BYVAL AS GtkPopover PTR, BYVAL AS gboolean)
DECLARE SUB gtk_popover_set_pointing_to(BYVAL AS GtkPopover PTR, BYVAL AS const GdkRectangle PTR)
DECLARE SUB gtk_popover_set_position(BYVAL AS GtkPopover PTR, BYVAL AS GtkPositionType)
DECLARE SUB gtk_popover_set_relative_to(BYVAL AS GtkPopover PTR, BYVAL AS GtkWidget PTR)
DECLARE SUB gtk_popover_set_transitions_enabled(BYVAL AS GtkPopover PTR, BYVAL AS gboolean)
TYPE _GtkPopoverAccessible
  AS GtkContainerAccessible parent
END TYPE
DECLARE FUNCTION gtk_popover_accessible_get_type() AS GType
#DEFINE GTK_TYPE_POPOVER_ACCESSIBLE (gtk_popover_accessible_get_type())
#DEFINE GTK_POPOVER_ACCESSIBLE(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_POPOVER_ACCESSIBLE, GtkPopoverAccessible))
#DEFINE GTK_POPOVER_ACCESSIBLE_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_POPOVER_ACCESSIBLE, GtkPopoverAccessibleClass))
#DEFINE GTK_IS_POPOVER_ACCESSIBLE(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_POPOVER_ACCESSIBLE))
#DEFINE GTK_IS_CLASS_POPOVER_ACCESSIBLE(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_POPOVER_ACCESSIBLE))
#DEFINE GTK_POPOVER_ACCESSIBLE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_POPOVER_ACCESSIBLE, GtkPopoverAccessibleClass))
TYPE _GtkPopoverAccessibleClass
  AS GtkContainerAccessibleClass parent_class
END TYPE
TYPE _GtkPopoverClass
  AS GtkBinClass parent_class
  closed AS SUB CDECL(BYVAL AS GtkPopover PTR)
  AS gpointer reserved(9)
END TYPE
DECLARE FUNCTION gtk_popover_constraint_get_type() AS GType
#DEFINE GTK_TYPE_POPOVER_CONSTRAINT (gtk_popover_constraint_get_type())
DECLARE FUNCTION gtk_popover_menu_get_type() AS GType
#DEFINE GTK_TYPE_POPOVER_MENU (gtk_popover_menu_get_type())
#DEFINE GTK_POPOVER_MENU(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_POPOVER_MENU, GtkPopoverMenu))
#DEFINE GTK_POPOVER_MENU_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_POPOVER_MENU, GtkPopoverMenuClass))
#DEFINE GTK_IS_POPOVER_MENU(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_POPOVER_MENU))
#DEFINE GTK_IS_CLASS_POPOVER_MENU(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_POPOVER_MENU))
#DEFINE GTK_POPOVER_MENU_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_POPOVER_MENU, GtkPopoverMenuClass))
DECLARE FUNCTION gtk_popover_menu_new() AS GtkWidget PTR
DECLARE SUB gtk_popover_menu_open_submenu(BYVAL AS GtkPopoverMenu PTR, BYVAL AS const gchar PTR)
TYPE _GtkPopoverMenuClass
  AS GtkPopoverClass parent_class
  AS gpointer reserved(9)
END TYPE
DECLARE FUNCTION gtk_position_type_get_type() AS GType
#DEFINE GTK_TYPE_POSITION_TYPE (gtk_position_type_get_type())
DECLARE FUNCTION gtk_print_context_get_type() AS GType
#DEFINE GTK_TYPE_PRINT_CONTEXT (gtk_print_context_get_type())
#DEFINE GTK_PRINT_CONTEXT(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_PRINT_CONTEXT, GtkPrintContext))
#DEFINE GTK_PRINT_CONTEXT_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_PRINT_CONTEXT, Gtk))
#DEFINE GTK_IS_PRINT_CONTEXT(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_PRINT_CONTEXT))
#DEFINE GTK_IS_CLASS_PRINT_CONTEXT(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_PRINT_CONTEXT))
#DEFINE GTK_PRINT_CONTEXT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_PRINT_CONTEXT, Gtk))
DECLARE FUNCTION gtk_print_context_create_pango_context(BYVAL AS GtkPrintContext PTR) AS PangoContext PTR
DECLARE FUNCTION gtk_print_context_create_pango_layout(BYVAL AS GtkPrintContext PTR) AS PangoLayout PTR
DECLARE FUNCTION gtk_print_context_get_cairo_context(BYVAL AS GtkPrintContext PTR) AS cairo_t PTR
DECLARE FUNCTION gtk_print_context_get_dpi_x(BYVAL AS GtkPrintContext PTR) AS gdouble
DECLARE FUNCTION gtk_print_context_get_dpi_y(BYVAL AS GtkPrintContext PTR) AS gdouble
DECLARE FUNCTION gtk_print_context_get_hard_margins(BYVAL AS GtkPrintContext PTR, BYVAL AS gdouble PTR, BYVAL AS gdouble PTR, BYVAL AS gdouble PTR, BYVAL AS gdouble PTR) AS gboolean
DECLARE FUNCTION gtk_print_context_get_height(BYVAL AS GtkPrintContext PTR) AS gdouble
DECLARE FUNCTION gtk_print_context_get_page_setup(BYVAL AS GtkPrintContext PTR) AS GtkPageSetup PTR
DECLARE FUNCTION gtk_print_context_get_pango_fontmap(BYVAL AS GtkPrintContext PTR) AS PangoFontMap PTR
DECLARE FUNCTION gtk_print_context_get_width(BYVAL AS GtkPrintContext PTR) AS gdouble
DECLARE SUB gtk_print_context_set_cairo_context(BYVAL AS GtkPrintContext PTR, BYVAL AS cairo_t PTR, BYVAL AS double, BYVAL AS double)
TYPE _GtkPrintOperation
  AS GObject parent_instance
  AS GtkPrintOperationPrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_print_duplex_get_type() AS GType
#DEFINE GTK_TYPE_PRINT_DUPLEX (gtk_print_duplex_get_type())
DECLARE FUNCTION gtk_print_error_get_type() AS GType
#DEFINE GTK_TYPE_PRINT_ERROR (gtk_print_error_get_type())
DECLARE FUNCTION gtk_print_operation_get_type() AS GType
#DEFINE GTK_TYPE_PRINT_OPERATION (gtk_print_operation_get_type())
#DEFINE GTK_PRINT_OPERATION(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_PRINT_OPERATION, GtkPrintOperation))
#DEFINE GTK_PRINT_OPERATION_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_PRINT_OPERATION, GtkPrintOperationClass))
#DEFINE GTK_IS_PRINT_OPERATION(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_PRINT_OPERATION))
#DEFINE GTK_IS_CLASS_PRINT_OPERATION(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_PRINT_OPERATION))
#DEFINE GTK_PRINT_OPERATION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_PRINT_OPERATION, GtkPrintOperationClass))
DECLARE FUNCTION gtk_print_operation_new() AS GtkPrintOperation PTR
DECLARE SUB gtk_print_operation_cancel(BYVAL AS GtkPrintOperation PTR)
DECLARE SUB gtk_print_operation_draw_page_finish(BYVAL AS GtkPrintOperation PTR)
DECLARE FUNCTION gtk_print_operation_get_default_page_setup(BYVAL AS GtkPrintOperation PTR) AS GtkPageSetup PTR
DECLARE FUNCTION gtk_print_operation_get_embed_page_setup(BYVAL AS GtkPrintOperation PTR) AS gboolean
DECLARE SUB gtk_print_operation_get_error(BYVAL AS GtkPrintOperation PTR, BYVAL AS GError PTR PTR)
DECLARE FUNCTION gtk_print_operation_get_has_selection(BYVAL AS GtkPrintOperation PTR) AS gboolean
DECLARE FUNCTION gtk_print_operation_get_n_pages_to_print(BYVAL AS GtkPrintOperation PTR) AS gint
DECLARE FUNCTION gtk_print_operation_get_print_settings(BYVAL AS GtkPrintOperation PTR) AS GtkPrintSettings PTR
DECLARE FUNCTION gtk_print_operation_get_status(BYVAL AS GtkPrintOperation PTR) AS GtkPrintStatus
DECLARE FUNCTION gtk_print_operation_get_status_string(BYVAL AS GtkPrintOperation PTR) AS const gchar PTR
DECLARE FUNCTION gtk_print_operation_get_support_selection(BYVAL AS GtkPrintOperation PTR) AS gboolean
DECLARE FUNCTION gtk_print_operation_is_finished(BYVAL AS GtkPrintOperation PTR) AS gboolean
DECLARE FUNCTION gtk_print_operation_run(BYVAL AS GtkPrintOperation PTR, BYVAL AS GtkPrintOperationAction, BYVAL AS GtkWindow PTR, BYVAL AS GError PTR PTR) AS GtkPrintOperationResult
DECLARE SUB gtk_print_operation_set_allow_async(BYVAL AS GtkPrintOperation PTR, BYVAL AS gboolean)
DECLARE SUB gtk_print_operation_set_current_page(BYVAL AS GtkPrintOperation PTR, BYVAL AS gint)
DECLARE SUB gtk_print_operation_set_custom_tab_label(BYVAL AS GtkPrintOperation PTR, BYVAL AS const gchar PTR)
DECLARE SUB gtk_print_operation_set_default_page_setup(BYVAL AS GtkPrintOperation PTR, BYVAL AS GtkPageSetup PTR)
DECLARE SUB gtk_print_operation_set_defer_drawing(BYVAL AS GtkPrintOperation PTR)
DECLARE SUB gtk_print_operation_set_embed_page_setup(BYVAL AS GtkPrintOperation PTR, BYVAL AS gboolean)
DECLARE SUB gtk_print_operation_set_export_filename(BYVAL AS GtkPrintOperation PTR, BYVAL AS const gchar PTR)
DECLARE SUB gtk_print_operation_set_has_selection(BYVAL AS GtkPrintOperation PTR, BYVAL AS gboolean)
DECLARE SUB gtk_print_operation_set_job_name(BYVAL AS GtkPrintOperation PTR, BYVAL AS const gchar PTR)
DECLARE SUB gtk_print_operation_set_n_pages(BYVAL AS GtkPrintOperation PTR, BYVAL AS gint)
DECLARE SUB gtk_print_operation_set_print_settings(BYVAL AS GtkPrintOperation PTR, BYVAL AS GtkPrintSettings PTR)
DECLARE SUB gtk_print_operation_set_show_progress(BYVAL AS GtkPrintOperation PTR, BYVAL AS gboolean)
DECLARE SUB gtk_print_operation_set_support_selection(BYVAL AS GtkPrintOperation PTR, BYVAL AS gboolean)
DECLARE SUB gtk_print_operation_set_track_print_status(BYVAL AS GtkPrintOperation PTR, BYVAL AS gboolean)
DECLARE SUB gtk_print_operation_set_unit(BYVAL AS GtkPrintOperation PTR, BYVAL AS GtkUnit)
DECLARE SUB gtk_print_operation_set_use_full_page(BYVAL AS GtkPrintOperation PTR, BYVAL AS gboolean)
TYPE _GtkPrintOperationClass
  AS GObjectClass parent_class
  done AS SUB CDECL(BYVAL AS GtkPrintOperation PTR, BYVAL AS GtkPrintOperationResult)
  begin_print AS SUB CDECL(BYVAL AS GtkPrintOperation PTR, BYVAL AS GtkPrintContext PTR)
  paginate AS FUNCTION CDECL(BYVAL AS GtkPrintOperation PTR, BYVAL AS GtkPrintContext PTR) AS gboolean
  request_page_setup AS SUB CDECL(BYVAL AS GtkPrintOperation PTR, BYVAL AS GtkPrintContext PTR, BYVAL AS gint, BYVAL AS GtkPageSetup PTR)
  draw_page AS SUB CDECL(BYVAL AS GtkPrintOperation PTR, BYVAL AS GtkPrintContext PTR, BYVAL AS gint)
  end_print AS SUB CDECL(BYVAL AS GtkPrintOperation PTR, BYVAL AS GtkPrintContext PTR)
  status_changed AS SUB CDECL(BYVAL AS GtkPrintOperation PTR)
  create_custom_widget AS FUNCTION CDECL(BYVAL AS GtkPrintOperation PTR) AS GtkWidget PTR
  custom_widget_apply AS SUB CDECL(BYVAL AS GtkPrintOperation PTR, BYVAL AS GtkWidget PTR)
  preview AS FUNCTION CDECL(BYVAL AS GtkPrintOperation PTR, BYVAL AS GtkPrintOperationPreview PTR, BYVAL AS GtkPrintContext PTR, BYVAL AS GtkWindow PTR) AS gboolean
  update_custom_widget AS SUB CDECL(BYVAL AS GtkPrintOperation PTR, BYVAL AS GtkWidget PTR, BYVAL AS GtkPageSetup PTR, BYVAL AS GtkPrintSettings PTR)
  _gtk_reserved1 AS SUB CDECL()
  _gtk_reserved2 AS SUB CDECL()
  _gtk_reserved3 AS SUB CDECL()
  _gtk_reserved4 AS SUB CDECL()
  _gtk_reserved5 AS SUB CDECL()
  _gtk_reserved6 AS SUB CDECL()
  _gtk_reserved7 AS SUB CDECL()
  _gtk_reserved8 AS SUB CDECL()
END TYPE
DECLARE FUNCTION gtk_print_operation_action_get_type() AS GType
#DEFINE GTK_TYPE_PRINT_OPERATION_ACTION (gtk_print_operation_action_get_type())
DECLARE FUNCTION gtk_print_operation_preview_get_type() AS GType
#DEFINE GTK_TYPE_PRINT_OPERATION_PREVIEW (gtk_print_operation_preview_get_type())
#DEFINE GTK_PRINT_OPERATION_PREVIEW(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_PRINT_OPERATION_PREVIEW, GtkPrintOperationPreview))
#DEFINE GTK_PRINT_OPERATION_PREVIEW_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_PRINT_OPERATION_PREVIEW, GtkPrintOperationPreviewIface))
#DEFINE GTK_IS_PRINT_OPERATION_PREVIEW(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_PRINT_OPERATION_PREVIEW))
#DEFINE GTK_PRINT_OPERATION_PREVIEW_GET_IFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE((obj), GTK_TYPE_PRINT_OPERATION_PREVIEW, GtkPrintOperationPreviewIface))
DECLARE SUB gtk_print_operation_preview_end_preview(BYVAL AS GtkPrintOperationPreview PTR)
DECLARE FUNCTION gtk_print_operation_preview_is_selected(BYVAL AS GtkPrintOperationPreview PTR, BYVAL AS gint) AS gboolean
DECLARE SUB gtk_print_operation_preview_render_page(BYVAL AS GtkPrintOperationPreview PTR, BYVAL AS gint)
TYPE _GtkPrintOperationPreviewIface
  AS GTypeInterface g_iface
  ready AS SUB CDECL(BYVAL AS GtkPrintOperationPreview PTR, BYVAL AS GtkPrintContext PTR)
  got_page_size AS SUB CDECL(BYVAL AS GtkPrintOperationPreview PTR, BYVAL AS GtkPrintContext PTR, BYVAL AS GtkPageSetup PTR)
  render_page AS SUB CDECL(BYVAL AS GtkPrintOperationPreview PTR, BYVAL AS gint)
  is_selected AS FUNCTION CDECL(BYVAL AS GtkPrintOperationPreview PTR, BYVAL AS gint) AS gboolean
  end_preview AS SUB CDECL(BYVAL AS GtkPrintOperationPreview PTR)
  _gtk_reserved1 AS SUB CDECL()
  _gtk_reserved2 AS SUB CDECL()
  _gtk_reserved3 AS SUB CDECL()
  _gtk_reserved4 AS SUB CDECL()
  _gtk_reserved5 AS SUB CDECL()
  _gtk_reserved6 AS SUB CDECL()
  _gtk_reserved7 AS SUB CDECL()
  _gtk_reserved8 AS SUB CDECL()
END TYPE
DECLARE FUNCTION gtk_print_operation_result_get_type() AS GType
#DEFINE GTK_TYPE_PRINT_OPERATION_RESULT (gtk_print_operation_result_get_type())
DECLARE FUNCTION gtk_print_pages_get_type() AS GType
#DEFINE GTK_TYPE_PRINT_PAGES (gtk_print_pages_get_type())
DECLARE FUNCTION gtk_print_quality_get_type() AS GType
#DEFINE GTK_TYPE_PRINT_QUALITY (gtk_print_quality_get_type())
DECLARE FUNCTION gtk_print_settings_get_type() AS GType
#DEFINE GTK_TYPE_PRINT_SETTINGS (gtk_print_settings_get_type())
#DEFINE GTK_PRINT_SETTINGS(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_PRINT_SETTINGS, GtkPrintSettings))
#DEFINE GTK_PRINT_SETTINGS_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_PRINT_SETTINGS, Gtk))
#DEFINE GTK_IS_PRINT_SETTINGS(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_PRINT_SETTINGS))
#DEFINE GTK_IS_CLASS_PRINT_SETTINGS(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_PRINT_SETTINGS))
#DEFINE GTK_PRINT_SETTINGS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_PRINT_SETTINGS, Gtk))
DECLARE FUNCTION gtk_print_settings_new() AS GtkPrintSettings PTR
DECLARE FUNCTION gtk_print_settings_new_from_file(BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR) AS GtkPrintSettings PTR
DECLARE FUNCTION gtk_print_settings_new_from_gvariant(BYVAL AS GVariant PTR) AS GtkPrintSettings PTR
DECLARE FUNCTION gtk_print_settings_new_from_key_file(BYVAL AS GKeyFile PTR, BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR) AS GtkPrintSettings PTR
DECLARE FUNCTION gtk_print_settings_copy(BYVAL AS GtkPrintSettings PTR) AS GtkPrintSettings PTR
DECLARE SUB gtk_print_settings_foreach(BYVAL AS GtkPrintSettings PTR, BYVAL AS GtkPrintSettingsFunc, BYVAL AS gpointer)
DECLARE FUNCTION gtk_print_settings_get(BYVAL AS GtkPrintSettings PTR, BYVAL AS const gchar PTR) AS const gchar PTR
DECLARE FUNCTION gtk_print_settings_get_bool(BYVAL AS GtkPrintSettings PTR, BYVAL AS const gchar PTR) AS gboolean
DECLARE FUNCTION gtk_print_settings_get_collate(BYVAL AS GtkPrintSettings PTR) AS gboolean
DECLARE FUNCTION gtk_print_settings_get_default_source(BYVAL AS GtkPrintSettings PTR) AS const gchar PTR
DECLARE FUNCTION gtk_print_settings_get_dither(BYVAL AS GtkPrintSettings PTR) AS const gchar PTR
DECLARE FUNCTION gtk_print_settings_get_double(BYVAL AS GtkPrintSettings PTR, BYVAL AS const gchar PTR) AS gdouble
DECLARE FUNCTION gtk_print_settings_get_double_with_default(BYVAL AS GtkPrintSettings PTR, BYVAL AS const gchar PTR, BYVAL AS gdouble) AS gdouble
DECLARE FUNCTION gtk_print_settings_get_duplex(BYVAL AS GtkPrintSettings PTR) AS GtkPrintDuplex
DECLARE FUNCTION gtk_print_settings_get_finishings(BYVAL AS GtkPrintSettings PTR) AS const gchar PTR
DECLARE FUNCTION gtk_print_settings_get_int(BYVAL AS GtkPrintSettings PTR, BYVAL AS const gchar PTR) AS gint
DECLARE FUNCTION gtk_print_settings_get_int_with_default(BYVAL AS GtkPrintSettings PTR, BYVAL AS const gchar PTR, BYVAL AS gint) AS gint
DECLARE FUNCTION gtk_print_settings_get_length(BYVAL AS GtkPrintSettings PTR, BYVAL AS const gchar PTR, BYVAL AS GtkUnit) AS gdouble
DECLARE FUNCTION gtk_print_settings_get_media_type(BYVAL AS GtkPrintSettings PTR) AS const gchar PTR
DECLARE FUNCTION gtk_print_settings_get_n_copies(BYVAL AS GtkPrintSettings PTR) AS gint
DECLARE FUNCTION gtk_print_settings_get_number_up(BYVAL AS GtkPrintSettings PTR) AS gint
DECLARE FUNCTION gtk_print_settings_get_number_up_layout(BYVAL AS GtkPrintSettings PTR) AS GtkNumberUpLayout
DECLARE FUNCTION gtk_print_settings_get_orientation(BYVAL AS GtkPrintSettings PTR) AS GtkPageOrientation
DECLARE FUNCTION gtk_print_settings_get_output_bin(BYVAL AS GtkPrintSettings PTR) AS const gchar PTR
DECLARE FUNCTION gtk_print_settings_get_page_ranges(BYVAL AS GtkPrintSettings PTR, BYVAL AS gint PTR) AS GtkPageRange PTR
DECLARE FUNCTION gtk_print_settings_get_page_set(BYVAL AS GtkPrintSettings PTR) AS GtkPageSet
DECLARE FUNCTION gtk_print_settings_get_paper_height(BYVAL AS GtkPrintSettings PTR, BYVAL AS GtkUnit) AS gdouble
DECLARE FUNCTION gtk_print_settings_get_paper_size(BYVAL AS GtkPrintSettings PTR) AS GtkPaperSize PTR
DECLARE FUNCTION gtk_print_settings_get_paper_width(BYVAL AS GtkPrintSettings PTR, BYVAL AS GtkUnit) AS gdouble
DECLARE FUNCTION gtk_print_settings_get_print_pages(BYVAL AS GtkPrintSettings PTR) AS GtkPrintPages
DECLARE FUNCTION gtk_print_settings_get_printer(BYVAL AS GtkPrintSettings PTR) AS const gchar PTR
DECLARE FUNCTION gtk_print_settings_get_printer_lpi(BYVAL AS GtkPrintSettings PTR) AS gdouble
DECLARE FUNCTION gtk_print_settings_get_quality(BYVAL AS GtkPrintSettings PTR) AS GtkPrintQuality
DECLARE FUNCTION gtk_print_settings_get_resolution(BYVAL AS GtkPrintSettings PTR) AS gint
DECLARE FUNCTION gtk_print_settings_get_resolution_x(BYVAL AS GtkPrintSettings PTR) AS gint
DECLARE FUNCTION gtk_print_settings_get_resolution_y(BYVAL AS GtkPrintSettings PTR) AS gint
DECLARE FUNCTION gtk_print_settings_get_reverse(BYVAL AS GtkPrintSettings PTR) AS gboolean
DECLARE FUNCTION gtk_print_settings_get_scale(BYVAL AS GtkPrintSettings PTR) AS gdouble
DECLARE FUNCTION gtk_print_settings_get_use_color(BYVAL AS GtkPrintSettings PTR) AS gboolean
DECLARE FUNCTION gtk_print_settings_has_key(BYVAL AS GtkPrintSettings PTR, BYVAL AS const gchar PTR) AS gboolean
DECLARE FUNCTION gtk_print_settings_load_file(BYVAL AS GtkPrintSettings PTR, BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION gtk_print_settings_load_key_file(BYVAL AS GtkPrintSettings PTR, BYVAL AS GKeyFile PTR, BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE SUB gtk_print_settings_set(BYVAL AS GtkPrintSettings PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR)
DECLARE SUB gtk_print_settings_set_bool(BYVAL AS GtkPrintSettings PTR, BYVAL AS const gchar PTR, BYVAL AS gboolean)
DECLARE SUB gtk_print_settings_set_collate(BYVAL AS GtkPrintSettings PTR, BYVAL AS gboolean)
DECLARE SUB gtk_print_settings_set_default_source(BYVAL AS GtkPrintSettings PTR, BYVAL AS const gchar PTR)
DECLARE SUB gtk_print_settings_set_dither(BYVAL AS GtkPrintSettings PTR, BYVAL AS const gchar PTR)
DECLARE SUB gtk_print_settings_set_double(BYVAL AS GtkPrintSettings PTR, BYVAL AS const gchar PTR, BYVAL AS gdouble)
DECLARE SUB gtk_print_settings_set_duplex(BYVAL AS GtkPrintSettings PTR, BYVAL AS GtkPrintDuplex)
DECLARE SUB gtk_print_settings_set_finishings(BYVAL AS GtkPrintSettings PTR, BYVAL AS const gchar PTR)
DECLARE SUB gtk_print_settings_set_int(BYVAL AS GtkPrintSettings PTR, BYVAL AS const gchar PTR, BYVAL AS gint)
DECLARE SUB gtk_print_settings_set_length(BYVAL AS GtkPrintSettings PTR, BYVAL AS const gchar PTR, BYVAL AS gdouble, BYVAL AS GtkUnit)
DECLARE SUB gtk_print_settings_set_media_type(BYVAL AS GtkPrintSettings PTR, BYVAL AS const gchar PTR)
DECLARE SUB gtk_print_settings_set_n_copies(BYVAL AS GtkPrintSettings PTR, BYVAL AS gint)
DECLARE SUB gtk_print_settings_set_number_up(BYVAL AS GtkPrintSettings PTR, BYVAL AS gint)
DECLARE SUB gtk_print_settings_set_number_up_layout(BYVAL AS GtkPrintSettings PTR, BYVAL AS GtkNumberUpLayout)
DECLARE SUB gtk_print_settings_set_orientation(BYVAL AS GtkPrintSettings PTR, BYVAL AS GtkPageOrientation)
DECLARE SUB gtk_print_settings_set_output_bin(BYVAL AS GtkPrintSettings PTR, BYVAL AS const gchar PTR)
DECLARE SUB gtk_print_settings_set_page_ranges(BYVAL AS GtkPrintSettings PTR, BYVAL AS GtkPageRange PTR, BYVAL AS gint)
DECLARE SUB gtk_print_settings_set_page_set(BYVAL AS GtkPrintSettings PTR, BYVAL AS GtkPageSet)
DECLARE SUB gtk_print_settings_set_paper_height(BYVAL AS GtkPrintSettings PTR, BYVAL AS gdouble, BYVAL AS GtkUnit)
DECLARE SUB gtk_print_settings_set_paper_size(BYVAL AS GtkPrintSettings PTR, BYVAL AS GtkPaperSize PTR)
DECLARE SUB gtk_print_settings_set_paper_width(BYVAL AS GtkPrintSettings PTR, BYVAL AS gdouble, BYVAL AS GtkUnit)
DECLARE SUB gtk_print_settings_set_print_pages(BYVAL AS GtkPrintSettings PTR, BYVAL AS GtkPrintPages)
DECLARE SUB gtk_print_settings_set_printer(BYVAL AS GtkPrintSettings PTR, BYVAL AS const gchar PTR)
DECLARE SUB gtk_print_settings_set_printer_lpi(BYVAL AS GtkPrintSettings PTR, BYVAL AS gdouble)
DECLARE SUB gtk_print_settings_set_quality(BYVAL AS GtkPrintSettings PTR, BYVAL AS GtkPrintQuality)
DECLARE SUB gtk_print_settings_set_resolution(BYVAL AS GtkPrintSettings PTR, BYVAL AS gint)
DECLARE SUB gtk_print_settings_set_resolution_xy(BYVAL AS GtkPrintSettings PTR, BYVAL AS gint, BYVAL AS gint)
DECLARE SUB gtk_print_settings_set_reverse(BYVAL AS GtkPrintSettings PTR, BYVAL AS gboolean)
DECLARE SUB gtk_print_settings_set_scale(BYVAL AS GtkPrintSettings PTR, BYVAL AS gdouble)
DECLARE SUB gtk_print_settings_set_use_color(BYVAL AS GtkPrintSettings PTR, BYVAL AS gboolean)
DECLARE FUNCTION gtk_print_settings_to_file(BYVAL AS GtkPrintSettings PTR, BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION gtk_print_settings_to_gvariant(BYVAL AS GtkPrintSettings PTR) AS GVariant PTR
DECLARE SUB gtk_print_settings_to_key_file(BYVAL AS GtkPrintSettings PTR, BYVAL AS GKeyFile PTR, BYVAL AS const gchar PTR)
DECLARE SUB gtk_print_settings_unset(BYVAL AS GtkPrintSettings PTR, BYVAL AS const gchar PTR)
TYPE _GtkProgressBar
  AS GtkWidget parent
  AS GtkProgressBarPrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_print_status_get_type() AS GType
#DEFINE GTK_TYPE_PRINT_STATUS (gtk_print_status_get_type())
DECLARE FUNCTION gtk_progress_bar_get_type() AS GType
#DEFINE GTK_TYPE_PROGRESS_BAR (gtk_progress_bar_get_type())
#DEFINE GTK_PROGRESS_BAR(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_PROGRESS_BAR, GtkProgressBar))
#DEFINE GTK_PROGRESS_BAR_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_PROGRESS_BAR, GtkProgressBarClass))
#DEFINE GTK_IS_PROGRESS_BAR(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_PROGRESS_BAR))
#DEFINE GTK_IS_CLASS_PROGRESS_BAR(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_PROGRESS_BAR))
#DEFINE GTK_PROGRESS_BAR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_PROGRESS_BAR, GtkProgressBarClass))
DECLARE FUNCTION gtk_progress_bar_new() AS GtkWidget PTR
DECLARE FUNCTION gtk_progress_bar_get_ellipsize(BYVAL AS GtkProgressBar PTR) AS PangoEllipsizeMode
DECLARE FUNCTION gtk_progress_bar_get_fraction(BYVAL AS GtkProgressBar PTR) AS gdouble
DECLARE FUNCTION gtk_progress_bar_get_inverted(BYVAL AS GtkProgressBar PTR) AS gboolean
DECLARE FUNCTION gtk_progress_bar_get_pulse_step(BYVAL AS GtkProgressBar PTR) AS gdouble
DECLARE FUNCTION gtk_progress_bar_get_show_text(BYVAL AS GtkProgressBar PTR) AS gboolean
DECLARE FUNCTION gtk_progress_bar_get_text(BYVAL AS GtkProgressBar PTR) AS const gchar PTR
DECLARE SUB gtk_progress_bar_pulse(BYVAL AS GtkProgressBar PTR)
DECLARE SUB gtk_progress_bar_set_ellipsize(BYVAL AS GtkProgressBar PTR, BYVAL AS PangoEllipsizeMode)
DECLARE SUB gtk_progress_bar_set_fraction(BYVAL AS GtkProgressBar PTR, BYVAL AS gdouble)
DECLARE SUB gtk_progress_bar_set_inverted(BYVAL AS GtkProgressBar PTR, BYVAL AS gboolean)
DECLARE SUB gtk_progress_bar_set_pulse_step(BYVAL AS GtkProgressBar PTR, BYVAL AS gdouble)
DECLARE SUB gtk_progress_bar_set_show_text(BYVAL AS GtkProgressBar PTR, BYVAL AS gboolean)
DECLARE SUB gtk_progress_bar_set_text(BYVAL AS GtkProgressBar PTR, BYVAL AS const gchar PTR)
TYPE _GtkProgressBarAccessible
  AS GtkWidgetAccessible parent
  AS GtkProgressBarAccessiblePrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_progress_bar_accessible_get_type() AS GType
#DEFINE GTK_TYPE_PROGRESS_BAR_ACCESSIBLE (gtk_progress_bar_accessible_get_type())
#DEFINE GTK_PROGRESS_BAR_ACCESSIBLE(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_PROGRESS_BAR_ACCESSIBLE, GtkProgressBarAccessible))
#DEFINE GTK_PROGRESS_BAR_ACCESSIBLE_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_PROGRESS_BAR_ACCESSIBLE, GtkProgressBarAccessibleClass))
#DEFINE GTK_IS_PROGRESS_BAR_ACCESSIBLE(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_PROGRESS_BAR_ACCESSIBLE))
#DEFINE GTK_IS_CLASS_PROGRESS_BAR_ACCESSIBLE(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_PROGRESS_BAR_ACCESSIBLE))
#DEFINE GTK_PROGRESS_BAR_ACCESSIBLE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_PROGRESS_BAR_ACCESSIBLE, GtkProgressBarAccessibleClass))
TYPE _GtkProgressBarAccessibleClass
  AS GtkWidgetAccessibleClass parent_class
END TYPE
TYPE _GtkProgressBarClass
  AS GtkWidgetClass parent_class
  _gtk_reserved1 AS SUB CDECL()
  _gtk_reserved2 AS SUB CDECL()
  _gtk_reserved3 AS SUB CDECL()
  _gtk_reserved4 AS SUB CDECL()
END TYPE
TYPE _GtkRadioAction
  AS GtkToggleAction parent
  AS GtkRadioActionPrivate PTR private_data
END TYPE
DECLARE FUNCTION gtk_propagation_phase_get_type() AS GType
#DEFINE GTK_TYPE_PROPAGATION_PHASE (gtk_propagation_phase_get_type())
DECLARE FUNCTION gtk_radio_action_get_type() AS GType
#DEFINE GTK_TYPE_RADIO_ACTION (gtk_radio_action_get_type())
#DEFINE GTK_RADIO_ACTION(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_RADIO_ACTION, GtkRadioAction))
#DEFINE GTK_RADIO_ACTION_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_RADIO_ACTION, GtkRadioActionClass))
#DEFINE GTK_IS_RADIO_ACTION(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_RADIO_ACTION))
#DEFINE GTK_IS_CLASS_RADIO_ACTION(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_RADIO_ACTION))
#DEFINE GTK_RADIO_ACTION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_RADIO_ACTION, GtkRadioActionClass))
DECLARE FUNCTION gtk_radio_action_new(BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS gint) AS GtkRadioAction PTR
DECLARE FUNCTION gtk_radio_action_get_current_value(BYVAL AS GtkRadioAction PTR) AS gint
DECLARE FUNCTION gtk_radio_action_get_group(BYVAL AS GtkRadioAction PTR) AS GSList PTR
DECLARE SUB gtk_radio_action_join_group(BYVAL AS GtkRadioAction PTR, BYVAL AS GtkRadioAction PTR)
DECLARE SUB gtk_radio_action_set_current_value(BYVAL AS GtkRadioAction PTR, BYVAL AS gint)
DECLARE SUB gtk_radio_action_set_group(BYVAL AS GtkRadioAction PTR, BYVAL AS GSList PTR)
TYPE _GtkRadioActionClass
  AS GtkToggleActionClass parent_class
  changed AS SUB CDECL(BYVAL AS GtkRadioAction PTR, BYVAL AS GtkRadioAction PTR)
  _gtk_reserved1 AS SUB CDECL()
  _gtk_reserved2 AS SUB CDECL()
  _gtk_reserved3 AS SUB CDECL()
  _gtk_reserved4 AS SUB CDECL()
END TYPE
TYPE _GtkRadioActionEntry
  AS const gchar PTR name
  AS const gchar PTR stock_id
  AS const gchar PTR label
  AS const gchar PTR accelerator
  AS const gchar PTR tooltip
  AS gint value
END TYPE
TYPE _GtkRadioButton
  AS GtkCheckButton check_button
  AS GtkRadioButtonPrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_radio_button_get_type() AS GType
#DEFINE GTK_TYPE_RADIO_BUTTON (gtk_radio_button_get_type())
#DEFINE GTK_RADIO_BUTTON(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_RADIO_BUTTON, GtkRadioButton))
#DEFINE GTK_RADIO_BUTTON_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_RADIO_BUTTON, GtkRadioButtonClass))
#DEFINE GTK_IS_RADIO_BUTTON(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_RADIO_BUTTON))
#DEFINE GTK_IS_CLASS_RADIO_BUTTON(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_RADIO_BUTTON))
#DEFINE GTK_RADIO_BUTTON_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_RADIO_BUTTON, GtkRadioButtonClass))
DECLARE FUNCTION gtk_radio_button_new(BYVAL AS GSList PTR) AS GtkWidget PTR
DECLARE FUNCTION gtk_radio_button_new_from_widget(BYVAL AS GtkRadioButton PTR) AS GtkWidget PTR
DECLARE FUNCTION gtk_radio_button_new_with_label(BYVAL AS GSList PTR, BYVAL AS const gchar PTR) AS GtkWidget PTR
DECLARE FUNCTION gtk_radio_button_new_with_label_from_widget(BYVAL AS GtkRadioButton PTR, BYVAL AS const gchar PTR) AS GtkWidget PTR
DECLARE FUNCTION gtk_radio_button_new_with_mnemonic(BYVAL AS GSList PTR, BYVAL AS const gchar PTR) AS GtkWidget PTR
DECLARE FUNCTION gtk_radio_button_new_with_mnemonic_from_widget(BYVAL AS GtkRadioButton PTR, BYVAL AS const gchar PTR) AS GtkWidget PTR
DECLARE FUNCTION gtk_radio_button_get_group(BYVAL AS GtkRadioButton PTR) AS GSList PTR
DECLARE SUB gtk_radio_button_join_group(BYVAL AS GtkRadioButton PTR, BYVAL AS GtkRadioButton PTR)
DECLARE SUB gtk_radio_button_set_group(BYVAL AS GtkRadioButton PTR, BYVAL AS GSList PTR)
TYPE _GtkRadioButtonAccessible
  AS GtkToggleButtonAccessible parent
  AS GtkRadioButtonAccessiblePrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_radio_button_accessible_get_type() AS GType
#DEFINE GTK_TYPE_RADIO_BUTTON_ACCESSIBLE (gtk_radio_button_accessible_get_type())
#DEFINE GTK_RADIO_BUTTON_ACCESSIBLE(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_RADIO_BUTTON_ACCESSIBLE, GtkRadioButtonAccessible))
#DEFINE GTK_RADIO_BUTTON_ACCESSIBLE_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_RADIO_BUTTON_ACCESSIBLE, GtkRadioButtonAccessibleClass))
#DEFINE GTK_IS_RADIO_BUTTON_ACCESSIBLE(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_RADIO_BUTTON_ACCESSIBLE))
#DEFINE GTK_IS_CLASS_RADIO_BUTTON_ACCESSIBLE(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_RADIO_BUTTON_ACCESSIBLE))
#DEFINE GTK_RADIO_BUTTON_ACCESSIBLE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_RADIO_BUTTON_ACCESSIBLE, GtkRadioButtonAccessibleClass))
TYPE _GtkRadioButtonAccessibleClass
  AS GtkToggleButtonAccessibleClass parent_class
END TYPE
TYPE _GtkRadioButtonClass
  AS GtkCheckButtonClass parent_class
  group_changed AS SUB CDECL(BYVAL AS GtkRadioButton PTR)
  _gtk_reserved1 AS SUB CDECL()
  _gtk_reserved2 AS SUB CDECL()
  _gtk_reserved3 AS SUB CDECL()
  _gtk_reserved4 AS SUB CDECL()
END TYPE
TYPE _GtkRadioMenuItem
  AS GtkCheckMenuItem check_menu_item
  AS GtkRadioMenuItemPrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_radio_menu_item_get_type() AS GType
#DEFINE GTK_TYPE_RADIO_MENU_ITEM (gtk_radio_menu_item_get_type())
#DEFINE GTK_RADIO_MENU_ITEM(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_RADIO_MENU_ITEM, GtkRadioMenuItem))
#DEFINE GTK_RADIO_MENU_ITEM_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_RADIO_MENU_ITEM, GtkRadioMenuItemClass))
#DEFINE GTK_IS_RADIO_MENU_ITEM(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_RADIO_MENU_ITEM))
#DEFINE GTK_IS_CLASS_RADIO_MENU_ITEM(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_RADIO_MENU_ITEM))
#DEFINE GTK_RADIO_MENU_ITEM_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_RADIO_MENU_ITEM, GtkRadioMenuItemClass))
DECLARE FUNCTION gtk_radio_menu_item_new(BYVAL AS GSList PTR) AS GtkWidget PTR
DECLARE FUNCTION gtk_radio_menu_item_new_from_widget(BYVAL AS GtkRadioMenuItem PTR) AS GtkWidget PTR
DECLARE FUNCTION gtk_radio_menu_item_new_with_label(BYVAL AS GSList PTR, BYVAL AS const gchar PTR) AS GtkWidget PTR
DECLARE FUNCTION gtk_radio_menu_item_new_with_label_from_widget(BYVAL AS GtkRadioMenuItem PTR, BYVAL AS const gchar PTR) AS GtkWidget PTR
DECLARE FUNCTION gtk_radio_menu_item_new_with_mnemonic(BYVAL AS GSList PTR, BYVAL AS const gchar PTR) AS GtkWidget PTR
DECLARE FUNCTION gtk_radio_menu_item_new_with_mnemonic_from_widget(BYVAL AS GtkRadioMenuItem PTR, BYVAL AS const gchar PTR) AS GtkWidget PTR
DECLARE FUNCTION gtk_radio_menu_item_get_group(BYVAL AS GtkRadioMenuItem PTR) AS GSList PTR
DECLARE SUB gtk_radio_menu_item_join_group(BYVAL AS GtkRadioMenuItem PTR, BYVAL AS GtkRadioMenuItem PTR)
DECLARE SUB gtk_radio_menu_item_set_group(BYVAL AS GtkRadioMenuItem PTR, BYVAL AS GSList PTR)
TYPE _GtkRadioMenuItemAccessible
  AS GtkCheckMenuItemAccessible parent
  AS GtkRadioMenuItemAccessiblePrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_radio_menu_item_accessible_get_type() AS GType
#DEFINE GTK_TYPE_RADIO_MENU_ITEM_ACCESSIBLE (gtk_radio_menu_item_accessible_get_type())
#DEFINE GTK_RADIO_MENU_ITEM_ACCESSIBLE(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_RADIO_MENU_ITEM_ACCESSIBLE, GtkRadioMenuItemAccessible))
#DEFINE GTK_RADIO_MENU_ITEM_ACCESSIBLE_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_RADIO_MENU_ITEM_ACCESSIBLE, GtkRadioMenuItemAccessibleClass))
#DEFINE GTK_IS_RADIO_MENU_ITEM_ACCESSIBLE(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_RADIO_MENU_ITEM_ACCESSIBLE))
#DEFINE GTK_IS_CLASS_RADIO_MENU_ITEM_ACCESSIBLE(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_RADIO_MENU_ITEM_ACCESSIBLE))
#DEFINE GTK_RADIO_MENU_ITEM_ACCESSIBLE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_RADIO_MENU_ITEM_ACCESSIBLE, GtkRadioMenuItemAccessibleClass))
TYPE _GtkRadioMenuItemAccessibleClass
  AS GtkCheckMenuItemAccessibleClass parent_class
END TYPE
TYPE _GtkRadioMenuItemClass
  AS GtkCheckMenuItemClass parent_class
  group_changed AS SUB CDECL(BYVAL AS GtkRadioMenuItem PTR)
  _gtk_reserved1 AS SUB CDECL()
  _gtk_reserved2 AS SUB CDECL()
  _gtk_reserved3 AS SUB CDECL()
  _gtk_reserved4 AS SUB CDECL()
END TYPE
TYPE _GtkRadioToolButton
  AS GtkToggleToolButton parent
END TYPE
DECLARE FUNCTION gtk_radio_tool_button_get_type() AS GType
#DEFINE GTK_TYPE_RADIO_TOOL_BUTTON (gtk_radio_tool_button_get_type())
#DEFINE GTK_RADIO_TOOL_BUTTON(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_RADIO_TOOL_BUTTON, GtkRadioToolButton))
#DEFINE GTK_RADIO_TOOL_BUTTON_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_RADIO_TOOL_BUTTON, GtkRadioToolButtonClass))
#DEFINE GTK_IS_RADIO_TOOL_BUTTON(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_RADIO_TOOL_BUTTON))
#DEFINE GTK_IS_CLASS_RADIO_TOOL_BUTTON(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_RADIO_TOOL_BUTTON))
#DEFINE GTK_RADIO_TOOL_BUTTON_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_RADIO_TOOL_BUTTON, GtkRadioToolButtonClass))
DECLARE FUNCTION gtk_radio_tool_button_new(BYVAL AS GSList PTR) AS GtkToolItem PTR
DECLARE FUNCTION gtk_radio_tool_button_new_from_stock(BYVAL AS GSList PTR, BYVAL AS const gchar PTR) AS GtkToolItem PTR
DECLARE FUNCTION gtk_radio_tool_button_new_from_widget(BYVAL AS GtkRadioToolButton PTR) AS GtkToolItem PTR
DECLARE FUNCTION gtk_radio_tool_button_new_with_stock_from_widget(BYVAL AS GtkRadioToolButton PTR, BYVAL AS const gchar PTR) AS GtkToolItem PTR
DECLARE FUNCTION gtk_radio_tool_button_get_group(BYVAL AS GtkRadioToolButton PTR) AS GSList PTR
DECLARE SUB gtk_radio_tool_button_set_group(BYVAL AS GtkRadioToolButton PTR, BYVAL AS GSList PTR)
TYPE _GtkRadioToolButtonClass
  AS GtkToggleToolButtonClass parent_class
  _gtk_reserved1 AS SUB CDECL()
  _gtk_reserved2 AS SUB CDECL()
  _gtk_reserved3 AS SUB CDECL()
  _gtk_reserved4 AS SUB CDECL()
END TYPE
TYPE _GtkRangeAccessible
  AS GtkWidgetAccessible parent
  AS GtkRangeAccessiblePrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_range_accessible_get_type() AS GType
#DEFINE GTK_TYPE_RANGE_ACCESSIBLE (gtk_range_accessible_get_type())
#DEFINE GTK_RANGE_ACCESSIBLE(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_RANGE_ACCESSIBLE, GtkRangeAccessible))
#DEFINE GTK_RANGE_ACCESSIBLE_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_RANGE_ACCESSIBLE, GtkRangeAccessibleClass))
#DEFINE GTK_IS_RANGE_ACCESSIBLE(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_RANGE_ACCESSIBLE))
#DEFINE GTK_IS_CLASS_RANGE_ACCESSIBLE(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_RANGE_ACCESSIBLE))
#DEFINE GTK_RANGE_ACCESSIBLE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_RANGE_ACCESSIBLE, GtkRangeAccessibleClass))
TYPE _GtkRangeAccessibleClass
  AS GtkWidgetAccessibleClass parent_class
END TYPE
TYPE _GtkRcProperty
  AS GQuark type_name
  AS GQuark property_name
  AS gchar PTR origin
  AS GValue value
END TYPE
DECLARE FUNCTION gtk_rc_property_parse_border(BYVAL AS const GParamSpec PTR, BYVAL AS const GString PTR, BYVAL AS GValue PTR) AS gboolean
DECLARE FUNCTION gtk_rc_property_parse_color(BYVAL AS const GParamSpec PTR, BYVAL AS const GString PTR, BYVAL AS GValue PTR) AS gboolean
DECLARE FUNCTION gtk_rc_property_parse_enum(BYVAL AS const GParamSpec PTR, BYVAL AS const GString PTR, BYVAL AS GValue PTR) AS gboolean
DECLARE FUNCTION gtk_rc_property_parse_flags(BYVAL AS const GParamSpec PTR, BYVAL AS const GString PTR, BYVAL AS GValue PTR) AS gboolean
DECLARE FUNCTION gtk_rc_property_parse_requisition(BYVAL AS const GParamSpec PTR, BYVAL AS const GString PTR, BYVAL AS GValue PTR) AS gboolean
TYPE _GtkRcStyle
  AS GObject parent_instance
  AS gchar PTR name
  AS gchar PTR bg_pixmap_name(4)
  AS PangoFontDescription PTR font_desc
  AS GtkRcFlags color_flags(4)
  AS GdkColor fg(4)
  AS GdkColor bg(4)
  AS GdkColor text(4)
  AS GdkColor base(4)
  AS gint xthickness
  AS gint ythickness
  AS GArray PTR rc_properties
  AS GSList PTR rc_style_lists
  AS GSList PTR icon_factories
  AS guint engine_specified : 1
END TYPE
DECLARE FUNCTION gtk_rc_style_get_type() AS GType
#DEFINE GTK_TYPE_RC_STYLE (gtk_rc_style_get_type())
#DEFINE GTK_RC_STYLE(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_RC_STYLE, GtkRcStyle))
#DEFINE GTK_RC_STYLE_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_RC_STYLE, GtkRcStyleClass))
#DEFINE GTK_IS_RC_STYLE(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_RC_STYLE))
#DEFINE GTK_IS_CLASS_RC_STYLE(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_RC_STYLE))
#DEFINE GTK_RC_STYLE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_RC_STYLE, GtkRcStyleClass))
DECLARE FUNCTION gtk_rc_style_new() AS GtkRcStyle PTR
DECLARE FUNCTION gtk_rc_style_copy(BYVAL AS GtkRcStyle PTR) AS GtkRcStyle PTR
TYPE _GtkRcStyleClass
  AS GObjectClass parent_class
  create_rc_style AS FUNCTION CDECL(BYVAL AS GtkRcStyle PTR) AS GtkRcStyle PTR
  parse AS FUNCTION CDECL(BYVAL AS GtkRcStyle PTR, BYVAL AS GtkSettings PTR, BYVAL AS GScanner PTR) AS guint
  merge AS SUB CDECL(BYVAL AS GtkRcStyle PTR, BYVAL AS GtkRcStyle PTR)
  create_style AS FUNCTION CDECL(BYVAL AS GtkRcStyle PTR) AS GtkStyle PTR
  _gtk_reserved1 AS SUB CDECL()
  _gtk_reserved2 AS SUB CDECL()
  _gtk_reserved3 AS SUB CDECL()
  _gtk_reserved4 AS SUB CDECL()
END TYPE
TYPE _GtkRecentAction
  AS GtkAction parent_instance
  AS GtkRecentActionPrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_rc_token_type_get_type() AS GType
#DEFINE GTK_TYPE_RC_TOKEN_TYPE (gtk_rc_token_type_get_type())
DECLARE FUNCTION gtk_recent_action_get_type() AS GType
#DEFINE GTK_TYPE_RECENT_ACTION (gtk_recent_action_get_type())
#DEFINE GTK_RECENT_ACTION(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_RECENT_ACTION, GtkRecentAction))
#DEFINE GTK_RECENT_ACTION_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_RECENT_ACTION, GtkRecentActionClass))
#DEFINE GTK_IS_RECENT_ACTION(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_RECENT_ACTION))
#DEFINE GTK_IS_CLASS_RECENT_ACTION(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_RECENT_ACTION))
#DEFINE GTK_RECENT_ACTION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_RECENT_ACTION, GtkRecentActionClass))
DECLARE FUNCTION gtk_recent_action_new(BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR) AS GtkAction PTR
DECLARE FUNCTION gtk_recent_action_new_for_manager(BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS GtkRecentManager PTR) AS GtkAction PTR
DECLARE FUNCTION gtk_recent_action_get_show_numbers(BYVAL AS GtkRecentAction PTR) AS gboolean
DECLARE SUB gtk_recent_action_set_show_numbers(BYVAL AS GtkRecentAction PTR, BYVAL AS gboolean)
TYPE _GtkRecentActionClass
  AS GtkActionClass parent_class
  _gtk_reserved1 AS SUB CDECL()
  _gtk_reserved2 AS SUB CDECL()
  _gtk_reserved3 AS SUB CDECL()
  _gtk_reserved4 AS SUB CDECL()
END TYPE
DECLARE FUNCTION gtk_recent_chooser_get_type() AS GType
#DEFINE GTK_TYPE_RECENT_CHOOSER (gtk_recent_chooser_get_type())
#DEFINE GTK_RECENT_CHOOSER(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_RECENT_CHOOSER, GtkRecentChooser))
#DEFINE GTK_RECENT_CHOOSER_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_RECENT_CHOOSER, GtkRecentChooserIface))
#DEFINE GTK_IS_RECENT_CHOOSER(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_RECENT_CHOOSER))
#DEFINE GTK_RECENT_CHOOSER_GET_IFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE((obj), GTK_TYPE_RECENT_CHOOSER, GtkRecentChooserIface))
DECLARE SUB gtk_recent_chooser_add_filter(BYVAL AS GtkRecentChooser PTR, BYVAL AS GtkRecentFilter PTR)
DECLARE FUNCTION gtk_recent_chooser_get_current_item(BYVAL AS GtkRecentChooser PTR) AS GtkRecentInfo PTR
DECLARE FUNCTION gtk_recent_chooser_get_current_uri(BYVAL AS GtkRecentChooser PTR) AS gchar PTR
DECLARE FUNCTION gtk_recent_chooser_get_filter(BYVAL AS GtkRecentChooser PTR) AS GtkRecentFilter PTR
DECLARE FUNCTION gtk_recent_chooser_get_items(BYVAL AS GtkRecentChooser PTR) AS GList PTR
DECLARE FUNCTION gtk_recent_chooser_get_limit(BYVAL AS GtkRecentChooser PTR) AS gint
DECLARE FUNCTION gtk_recent_chooser_get_local_only(BYVAL AS GtkRecentChooser PTR) AS gboolean
DECLARE FUNCTION gtk_recent_chooser_get_select_multiple(BYVAL AS GtkRecentChooser PTR) AS gboolean
DECLARE FUNCTION gtk_recent_chooser_get_show_icons(BYVAL AS GtkRecentChooser PTR) AS gboolean
DECLARE FUNCTION gtk_recent_chooser_get_show_not_found(BYVAL AS GtkRecentChooser PTR) AS gboolean
DECLARE FUNCTION gtk_recent_chooser_get_show_private(BYVAL AS GtkRecentChooser PTR) AS gboolean
DECLARE FUNCTION gtk_recent_chooser_get_show_tips(BYVAL AS GtkRecentChooser PTR) AS gboolean
DECLARE FUNCTION gtk_recent_chooser_get_sort_type(BYVAL AS GtkRecentChooser PTR) AS GtkRecentSortType
DECLARE FUNCTION gtk_recent_chooser_get_uris(BYVAL AS GtkRecentChooser PTR, BYVAL AS gsize PTR) AS gchar PTR PTR
DECLARE FUNCTION gtk_recent_chooser_list_filters(BYVAL AS GtkRecentChooser PTR) AS GSList PTR
DECLARE SUB gtk_recent_chooser_remove_filter(BYVAL AS GtkRecentChooser PTR, BYVAL AS GtkRecentFilter PTR)
DECLARE SUB gtk_recent_chooser_select_all(BYVAL AS GtkRecentChooser PTR)
DECLARE FUNCTION gtk_recent_chooser_select_uri(BYVAL AS GtkRecentChooser PTR, BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION gtk_recent_chooser_set_current_uri(BYVAL AS GtkRecentChooser PTR, BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE SUB gtk_recent_chooser_set_filter(BYVAL AS GtkRecentChooser PTR, BYVAL AS GtkRecentFilter PTR)
DECLARE SUB gtk_recent_chooser_set_limit(BYVAL AS GtkRecentChooser PTR, BYVAL AS gint)
DECLARE SUB gtk_recent_chooser_set_local_only(BYVAL AS GtkRecentChooser PTR, BYVAL AS gboolean)
DECLARE SUB gtk_recent_chooser_set_select_multiple(BYVAL AS GtkRecentChooser PTR, BYVAL AS gboolean)
DECLARE SUB gtk_recent_chooser_set_show_icons(BYVAL AS GtkRecentChooser PTR, BYVAL AS gboolean)
DECLARE SUB gtk_recent_chooser_set_show_not_found(BYVAL AS GtkRecentChooser PTR, BYVAL AS gboolean)
DECLARE SUB gtk_recent_chooser_set_show_private(BYVAL AS GtkRecentChooser PTR, BYVAL AS gboolean)
DECLARE SUB gtk_recent_chooser_set_show_tips(BYVAL AS GtkRecentChooser PTR, BYVAL AS gboolean)
DECLARE SUB gtk_recent_chooser_set_sort_func(BYVAL AS GtkRecentChooser PTR, BYVAL AS GtkRecentSortFunc, BYVAL AS gpointer, BYVAL AS GDestroyNotify)
DECLARE SUB gtk_recent_chooser_set_sort_type(BYVAL AS GtkRecentChooser PTR, BYVAL AS GtkRecentSortType)
DECLARE SUB gtk_recent_chooser_unselect_all(BYVAL AS GtkRecentChooser PTR)
DECLARE SUB gtk_recent_chooser_unselect_uri(BYVAL AS GtkRecentChooser PTR, BYVAL AS const gchar PTR)
TYPE _GtkRecentChooserDialog
  AS GtkDialog parent_instance
  AS GtkRecentChooserDialogPrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_recent_chooser_dialog_get_type() AS GType
#DEFINE GTK_TYPE_RECENT_CHOOSER_DIALOG (gtk_recent_chooser_dialog_get_type())
#DEFINE GTK_RECENT_CHOOSER_DIALOG(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_RECENT_CHOOSER_DIALOG, GtkRecentChooserDialog))
#DEFINE GTK_RECENT_CHOOSER_DIALOG_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_RECENT_CHOOSER_DIALOG, GtkRecentChooserDialogClass))
#DEFINE GTK_IS_RECENT_CHOOSER_DIALOG(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_RECENT_CHOOSER_DIALOG))
#DEFINE GTK_IS_CLASS_RECENT_CHOOSER_DIALOG(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_RECENT_CHOOSER_DIALOG))
#DEFINE GTK_RECENT_CHOOSER_DIALOG_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_RECENT_CHOOSER_DIALOG, GtkRecentChooserDialogClass))
DECLARE FUNCTION gtk_recent_chooser_dialog_new(BYVAL AS const gchar PTR, BYVAL AS GtkWindow PTR, BYVAL AS const gchar PTR, ...) AS GtkWidget PTR
DECLARE FUNCTION gtk_recent_chooser_dialog_new_for_manager(BYVAL AS const gchar PTR, BYVAL AS GtkWindow PTR, BYVAL AS GtkRecentManager PTR, BYVAL AS const gchar PTR, ...) AS GtkWidget PTR
TYPE _GtkRecentChooserDialogClass
  AS GtkDialogClass parent_class
  _gtk_reserved1 AS SUB CDECL()
  _gtk_reserved2 AS SUB CDECL()
  _gtk_reserved3 AS SUB CDECL()
  _gtk_reserved4 AS SUB CDECL()
END TYPE
TYPE _GtkRecentChooserIface
  AS GTypeInterface base_iface
  set_current_uri AS FUNCTION CDECL(BYVAL AS GtkRecentChooser PTR, BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR) AS gboolean
  get_current_uri AS FUNCTION CDECL(BYVAL AS GtkRecentChooser PTR) AS gchar PTR
  select_uri AS FUNCTION CDECL(BYVAL AS GtkRecentChooser PTR, BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR) AS gboolean
  unselect_uri AS SUB CDECL(BYVAL AS GtkRecentChooser PTR, BYVAL AS const gchar PTR)
  select_all AS SUB CDECL(BYVAL AS GtkRecentChooser PTR)
  unselect_all AS SUB CDECL(BYVAL AS GtkRecentChooser PTR)
  get_items AS FUNCTION CDECL(BYVAL AS GtkRecentChooser PTR) AS GList PTR
  get_recent_manager AS FUNCTION CDECL(BYVAL AS GtkRecentChooser PTR) AS GtkRecentManager PTR
  add_filter AS SUB CDECL(BYVAL AS GtkRecentChooser PTR, BYVAL AS GtkRecentFilter PTR)
  remove_filter AS SUB CDECL(BYVAL AS GtkRecentChooser PTR, BYVAL AS GtkRecentFilter PTR)
  list_filters AS FUNCTION CDECL(BYVAL AS GtkRecentChooser PTR) AS GSList PTR
  set_sort_func AS SUB CDECL(BYVAL AS GtkRecentChooser PTR, BYVAL AS GtkRecentSortFunc, BYVAL AS gpointer, BYVAL AS GDestroyNotify)
  item_activated AS SUB CDECL(BYVAL AS GtkRecentChooser PTR)
  selection_changed AS SUB CDECL(BYVAL AS GtkRecentChooser PTR)
END TYPE
DECLARE FUNCTION gtk_recent_chooser_error_get_type() AS GType
#DEFINE GTK_TYPE_RECENT_CHOOSER_ERROR (gtk_recent_chooser_error_get_type())
TYPE _GtkRecentChooserMenu
  AS GtkMenu parent_instance
  AS GtkRecentChooserMenuPrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_recent_chooser_menu_get_type() AS GType
#DEFINE GTK_TYPE_RECENT_CHOOSER_MENU (gtk_recent_chooser_menu_get_type())
#DEFINE GTK_RECENT_CHOOSER_MENU(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_RECENT_CHOOSER_MENU, GtkRecentChooserMenu))
#DEFINE GTK_RECENT_CHOOSER_MENU_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_RECENT_CHOOSER_MENU, GtkRecentChooserMenuClass))
#DEFINE GTK_IS_RECENT_CHOOSER_MENU(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_RECENT_CHOOSER_MENU))
#DEFINE GTK_IS_CLASS_RECENT_CHOOSER_MENU(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_RECENT_CHOOSER_MENU))
#DEFINE GTK_RECENT_CHOOSER_MENU_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_RECENT_CHOOSER_MENU, GtkRecentChooserMenuClass))
DECLARE FUNCTION gtk_recent_chooser_menu_new() AS GtkWidget PTR
DECLARE FUNCTION gtk_recent_chooser_menu_new_for_manager(BYVAL AS GtkRecentManager PTR) AS GtkWidget PTR
DECLARE FUNCTION gtk_recent_chooser_menu_get_show_numbers(BYVAL AS GtkRecentChooserMenu PTR) AS gboolean
DECLARE SUB gtk_recent_chooser_menu_set_show_numbers(BYVAL AS GtkRecentChooserMenu PTR, BYVAL AS gboolean)
TYPE _GtkRecentChooserMenuClass
  AS GtkMenuClass parent_class
  gtk_recent1 AS SUB CDECL()
  gtk_recent2 AS SUB CDECL()
  gtk_recent3 AS SUB CDECL()
  gtk_recent4 AS SUB CDECL()
END TYPE
TYPE _GtkRecentChooserWidget
  AS GtkBox parent_instance
  AS GtkRecentChooserWidgetPrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_recent_chooser_widget_get_type() AS GType
#DEFINE GTK_TYPE_RECENT_CHOOSER_WIDGET (gtk_recent_chooser_widget_get_type())
#DEFINE GTK_RECENT_CHOOSER_WIDGET(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_RECENT_CHOOSER_WIDGET, GtkRecentChooserWidget))
#DEFINE GTK_RECENT_CHOOSER_WIDGET_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_RECENT_CHOOSER_WIDGET, GtkRecentChooserWidgetClass))
#DEFINE GTK_IS_RECENT_CHOOSER_WIDGET(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_RECENT_CHOOSER_WIDGET))
#DEFINE GTK_IS_CLASS_RECENT_CHOOSER_WIDGET(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_RECENT_CHOOSER_WIDGET))
#DEFINE GTK_RECENT_CHOOSER_WIDGET_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_RECENT_CHOOSER_WIDGET, GtkRecentChooserWidgetClass))
DECLARE FUNCTION gtk_recent_chooser_widget_new() AS GtkWidget PTR
DECLARE FUNCTION gtk_recent_chooser_widget_new_for_manager(BYVAL AS GtkRecentManager PTR) AS GtkWidget PTR
TYPE _GtkRecentChooserWidgetClass
  AS GtkBoxClass parent_class
  _gtk_reserved1 AS SUB CDECL()
  _gtk_reserved2 AS SUB CDECL()
  _gtk_reserved3 AS SUB CDECL()
  _gtk_reserved4 AS SUB CDECL()
END TYPE
TYPE _GtkRecentData
  AS gchar PTR display_name
  AS gchar PTR description
  AS gchar PTR mime_type
  AS gchar PTR app_name
  AS gchar PTR app_exec
  AS gchar PTR groups
  AS gboolean is_private
END TYPE
DECLARE FUNCTION gtk_recent_filter_get_type() AS GType
#DEFINE GTK_TYPE_RECENT_FILTER (gtk_recent_filter_get_type())
#DEFINE GTK_RECENT_FILTER(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_RECENT_FILTER, GtkRecentFilter))
#DEFINE GTK_RECENT_FILTER_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_RECENT_FILTER, Gtk))
#DEFINE GTK_IS_RECENT_FILTER(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_RECENT_FILTER))
#DEFINE GTK_IS_CLASS_RECENT_FILTER(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_RECENT_FILTER))
#DEFINE GTK_RECENT_FILTER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_RECENT_FILTER, Gtk))
DECLARE FUNCTION gtk_recent_filter_new() AS GtkRecentFilter PTR
DECLARE SUB gtk_recent_filter_add_age(BYVAL AS GtkRecentFilter PTR, BYVAL AS gint)
DECLARE SUB gtk_recent_filter_add_application(BYVAL AS GtkRecentFilter PTR, BYVAL AS const gchar PTR)
DECLARE SUB gtk_recent_filter_add_custom(BYVAL AS GtkRecentFilter PTR, BYVAL AS GtkRecentFilterFlags, BYVAL AS GtkRecentFilterFunc, BYVAL AS gpointer, BYVAL AS GDestroyNotify)
DECLARE SUB gtk_recent_filter_add_group(BYVAL AS GtkRecentFilter PTR, BYVAL AS const gchar PTR)
DECLARE SUB gtk_recent_filter_add_mime_type(BYVAL AS GtkRecentFilter PTR, BYVAL AS const gchar PTR)
DECLARE SUB gtk_recent_filter_add_pattern(BYVAL AS GtkRecentFilter PTR, BYVAL AS const gchar PTR)
DECLARE SUB gtk_recent_filter_add_pixbuf_formats(BYVAL AS GtkRecentFilter PTR)
DECLARE FUNCTION gtk_recent_filter_filter(BYVAL AS GtkRecentFilter PTR, BYVAL AS const GtkRecentFilterInfo PTR) AS gboolean
DECLARE FUNCTION gtk_recent_filter_get_name(BYVAL AS GtkRecentFilter PTR) AS const gchar PTR
DECLARE FUNCTION gtk_recent_filter_get_needed(BYVAL AS GtkRecentFilter PTR) AS GtkRecentFilterFlags
DECLARE SUB gtk_recent_filter_set_name(BYVAL AS GtkRecentFilter PTR, BYVAL AS const gchar PTR)
TYPE _GtkRecentFilterInfo
  AS GtkRecentFilterFlags contains
  AS const gchar PTR uri
  AS const gchar PTR display_name
  AS const gchar PTR mime_type
  AS gchar PTR applications
  AS gchar PTR groups
  AS gint age
END TYPE
DECLARE FUNCTION gtk_recent_info_create_app_info(BYVAL AS GtkRecentInfo PTR, BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR) AS GAppInfo PTR
DECLARE FUNCTION gtk_recent_info_exists(BYVAL AS GtkRecentInfo PTR) AS gboolean
DECLARE FUNCTION gtk_recent_info_get_added(BYVAL AS GtkRecentInfo PTR) AS time_t
DECLARE FUNCTION gtk_recent_info_get_age(BYVAL AS GtkRecentInfo PTR) AS gint
DECLARE FUNCTION gtk_recent_info_get_application_info(BYVAL AS GtkRecentInfo PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR PTR, BYVAL AS guint PTR, BYVAL AS time_t PTR) AS gboolean
DECLARE FUNCTION gtk_recent_info_get_applications(BYVAL AS GtkRecentInfo PTR, BYVAL AS gsize PTR) AS gchar PTR PTR
DECLARE FUNCTION gtk_recent_info_get_description(BYVAL AS GtkRecentInfo PTR) AS const gchar PTR
DECLARE FUNCTION gtk_recent_info_get_display_name(BYVAL AS GtkRecentInfo PTR) AS const gchar PTR
DECLARE FUNCTION gtk_recent_info_get_gicon(BYVAL AS GtkRecentInfo PTR) AS GIcon PTR
DECLARE FUNCTION gtk_recent_info_get_groups(BYVAL AS GtkRecentInfo PTR, BYVAL AS gsize PTR) AS gchar PTR PTR
DECLARE FUNCTION gtk_recent_info_get_icon(BYVAL AS GtkRecentInfo PTR, BYVAL AS gint) AS GdkPixbuf PTR
DECLARE FUNCTION gtk_recent_info_get_mime_type(BYVAL AS GtkRecentInfo PTR) AS const gchar PTR
DECLARE FUNCTION gtk_recent_info_get_modified(BYVAL AS GtkRecentInfo PTR) AS time_t
DECLARE FUNCTION gtk_recent_info_get_private_hint(BYVAL AS GtkRecentInfo PTR) AS gboolean
DECLARE FUNCTION gtk_recent_info_get_short_name(BYVAL AS GtkRecentInfo PTR) AS gchar PTR
DECLARE FUNCTION gtk_recent_info_get_uri(BYVAL AS GtkRecentInfo PTR) AS const gchar PTR
DECLARE FUNCTION gtk_recent_info_get_uri_display(BYVAL AS GtkRecentInfo PTR) AS gchar PTR
DECLARE FUNCTION gtk_recent_info_get_visited(BYVAL AS GtkRecentInfo PTR) AS time_t
DECLARE FUNCTION gtk_recent_info_has_application(BYVAL AS GtkRecentInfo PTR, BYVAL AS const gchar PTR) AS gboolean
DECLARE FUNCTION gtk_recent_info_has_group(BYVAL AS GtkRecentInfo PTR, BYVAL AS const gchar PTR) AS gboolean
DECLARE FUNCTION gtk_recent_info_is_local(BYVAL AS GtkRecentInfo PTR) AS gboolean
DECLARE FUNCTION gtk_recent_info_last_application(BYVAL AS GtkRecentInfo PTR) AS gchar PTR
DECLARE FUNCTION gtk_recent_info_match(BYVAL AS GtkRecentInfo PTR, BYVAL AS GtkRecentInfo PTR) AS gboolean
DECLARE FUNCTION gtk_recent_info_ref(BYVAL AS GtkRecentInfo PTR) AS GtkRecentInfo PTR
DECLARE SUB gtk_recent_info_unref(BYVAL AS GtkRecentInfo PTR)
TYPE _GtkRecentManager
  AS GObject parent_instance
  AS GtkRecentManagerPrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_recent_manager_get_type() AS GType
#DEFINE GTK_TYPE_RECENT_MANAGER (gtk_recent_manager_get_type())
#DEFINE GTK_RECENT_MANAGER(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_RECENT_MANAGER, GtkRecentManager))
#DEFINE GTK_RECENT_MANAGER_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_RECENT_MANAGER, GtkRecentManagerClass))
#DEFINE GTK_IS_RECENT_MANAGER(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_RECENT_MANAGER))
#DEFINE GTK_IS_CLASS_RECENT_MANAGER(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_RECENT_MANAGER))
#DEFINE GTK_RECENT_MANAGER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_RECENT_MANAGER, GtkRecentManagerClass))
DECLARE FUNCTION gtk_recent_manager_new() AS GtkRecentManager PTR
DECLARE FUNCTION gtk_recent_manager_get_default() AS GtkRecentManager PTR
DECLARE FUNCTION gtk_recent_manager_add_full(BYVAL AS GtkRecentManager PTR, BYVAL AS const gchar PTR, BYVAL AS const GtkRecentData PTR) AS gboolean
DECLARE FUNCTION gtk_recent_manager_add_item(BYVAL AS GtkRecentManager PTR, BYVAL AS const gchar PTR) AS gboolean
DECLARE FUNCTION gtk_recent_manager_get_items(BYVAL AS GtkRecentManager PTR) AS GList PTR
DECLARE FUNCTION gtk_recent_manager_has_item(BYVAL AS GtkRecentManager PTR, BYVAL AS const gchar PTR) AS gboolean
DECLARE FUNCTION gtk_recent_manager_lookup_item(BYVAL AS GtkRecentManager PTR, BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR) AS GtkRecentInfo PTR
DECLARE FUNCTION gtk_recent_manager_move_item(BYVAL AS GtkRecentManager PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION gtk_recent_manager_purge_items(BYVAL AS GtkRecentManager PTR, BYVAL AS GError PTR PTR) AS gint
DECLARE FUNCTION gtk_recent_manager_remove_item(BYVAL AS GtkRecentManager PTR, BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR) AS gboolean
TYPE _GtkRecentManagerClass
  AS GObjectClass parent_class
  changed AS SUB CDECL(BYVAL AS GtkRecentManager PTR)
  _gtk_recent1 AS SUB CDECL()
  _gtk_recent2 AS SUB CDECL()
  _gtk_recent3 AS SUB CDECL()
  _gtk_recent4 AS SUB CDECL()
END TYPE
DECLARE FUNCTION gtk_recent_manager_error_get_type() AS GType
#DEFINE GTK_TYPE_RECENT_MANAGER_ERROR (gtk_recent_manager_error_get_type())
DECLARE FUNCTION gtk_recent_sort_type_get_type() AS GType
#DEFINE GTK_TYPE_RECENT_SORT_TYPE (gtk_recent_sort_type_get_type())
DECLARE FUNCTION gtk_relief_style_get_type() AS GType
#DEFINE GTK_TYPE_RELIEF_STYLE (gtk_relief_style_get_type())
TYPE _GtkRequestedSize
  AS gpointer data
  AS gint minimum_size
  AS gint natural_size
END TYPE
TYPE _GtkRequisition
  AS gint width
  AS gint height
END TYPE
DECLARE FUNCTION gtk_requisition_new() AS GtkRequisition PTR
DECLARE FUNCTION gtk_requisition_copy(BYVAL AS const GtkRequisition PTR) AS GtkRequisition PTR
DECLARE SUB gtk_requisition_free(BYVAL AS GtkRequisition PTR)
TYPE _GtkRevealer
  AS GtkBin parent_instance
END TYPE
DECLARE FUNCTION gtk_resize_mode_get_type() AS GType
#DEFINE GTK_TYPE_RESIZE_MODE (gtk_resize_mode_get_type())
DECLARE FUNCTION gtk_response_type_get_type() AS GType
#DEFINE GTK_TYPE_RESPONSE_TYPE (gtk_response_type_get_type())
DECLARE FUNCTION gtk_revealer_get_type() AS GType
#DEFINE GTK_TYPE_REVEALER (gtk_revealer_get_type())
#DEFINE GTK_REVEALER(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_REVEALER, GtkRevealer))
#DEFINE GTK_REVEALER_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_REVEALER, GtkRevealerClass))
#DEFINE GTK_IS_REVEALER(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_REVEALER))
#DEFINE GTK_IS_CLASS_REVEALER(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_REVEALER))
#DEFINE GTK_REVEALER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_REVEALER, GtkRevealerClass))
DECLARE FUNCTION gtk_revealer_new() AS GtkWidget PTR
DECLARE FUNCTION gtk_revealer_get_child_revealed(BYVAL AS GtkRevealer PTR) AS gboolean
DECLARE FUNCTION gtk_revealer_get_reveal_child(BYVAL AS GtkRevealer PTR) AS gboolean
DECLARE FUNCTION gtk_revealer_get_transition_duration(BYVAL AS GtkRevealer PTR) AS guint
DECLARE FUNCTION gtk_revealer_get_transition_type(BYVAL AS GtkRevealer PTR) AS GtkRevealerTransitionType
DECLARE SUB gtk_revealer_set_reveal_child(BYVAL AS GtkRevealer PTR, BYVAL AS gboolean)
DECLARE SUB gtk_revealer_set_transition_duration(BYVAL AS GtkRevealer PTR, BYVAL AS guint)
DECLARE SUB gtk_revealer_set_transition_type(BYVAL AS GtkRevealer PTR, BYVAL AS GtkRevealerTransitionType)
TYPE _GtkRevealerClass
  AS GtkBinClass parent_class
END TYPE
TYPE _GtkScaleAccessible
  AS GtkRangeAccessible parent
  AS GtkScaleAccessiblePrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_revealer_transition_type_get_type() AS GType
#DEFINE GTK_TYPE_REVEALER_TRANSITION_TYPE (gtk_revealer_transition_type_get_type())
DECLARE FUNCTION gtk_scale_accessible_get_type() AS GType
#DEFINE GTK_TYPE_SCALE_ACCESSIBLE (gtk_scale_accessible_get_type())
#DEFINE GTK_SCALE_ACCESSIBLE(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_SCALE_ACCESSIBLE, GtkScaleAccessible))
#DEFINE GTK_SCALE_ACCESSIBLE_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_SCALE_ACCESSIBLE, GtkScaleAccessibleClass))
#DEFINE GTK_IS_SCALE_ACCESSIBLE(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_SCALE_ACCESSIBLE))
#DEFINE GTK_IS_CLASS_SCALE_ACCESSIBLE(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_SCALE_ACCESSIBLE))
#DEFINE GTK_SCALE_ACCESSIBLE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_SCALE_ACCESSIBLE, GtkScaleAccessibleClass))
TYPE _GtkScaleAccessibleClass
  AS GtkRangeAccessibleClass parent_class
END TYPE
TYPE _GtkScaleButton
  AS GtkButton parent
  AS GtkScaleButtonPrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_scale_button_get_type() AS GType
#DEFINE GTK_TYPE_SCALE_BUTTON (gtk_scale_button_get_type())
#DEFINE GTK_SCALE_BUTTON(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_SCALE_BUTTON, GtkScaleButton))
#DEFINE GTK_SCALE_BUTTON_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_SCALE_BUTTON, GtkScaleButtonClass))
#DEFINE GTK_IS_SCALE_BUTTON(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_SCALE_BUTTON))
#DEFINE GTK_IS_CLASS_SCALE_BUTTON(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_SCALE_BUTTON))
#DEFINE GTK_SCALE_BUTTON_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_SCALE_BUTTON, GtkScaleButtonClass))
DECLARE FUNCTION gtk_scale_button_new(BYVAL AS GtkIconSize, BYVAL AS gdouble, BYVAL AS gdouble, BYVAL AS gdouble, BYVAL AS const gchar PTR PTR) AS GtkWidget PTR
DECLARE FUNCTION gtk_scale_button_get_adjustment(BYVAL AS GtkScaleButton PTR) AS GtkAdjustment PTR
DECLARE FUNCTION gtk_scale_button_get_minus_button(BYVAL AS GtkScaleButton PTR) AS GtkWidget PTR
DECLARE FUNCTION gtk_scale_button_get_plus_button(BYVAL AS GtkScaleButton PTR) AS GtkWidget PTR
DECLARE FUNCTION gtk_scale_button_get_popup(BYVAL AS GtkScaleButton PTR) AS GtkWidget PTR
DECLARE FUNCTION gtk_scale_button_get_value(BYVAL AS GtkScaleButton PTR) AS gdouble
DECLARE SUB gtk_scale_button_set_adjustment(BYVAL AS GtkScaleButton PTR, BYVAL AS GtkAdjustment PTR)
DECLARE SUB gtk_scale_button_set_icons(BYVAL AS GtkScaleButton PTR, BYVAL AS const gchar PTR PTR)
DECLARE SUB gtk_scale_button_set_value(BYVAL AS GtkScaleButton PTR, BYVAL AS gdouble)
TYPE _GtkScaleButtonAccessible
  AS GtkButtonAccessible parent
  AS GtkScaleButtonAccessiblePrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_scale_button_accessible_get_type() AS GType
#DEFINE GTK_TYPE_SCALE_BUTTON_ACCESSIBLE (gtk_scale_button_accessible_get_type())
#DEFINE GTK_SCALE_BUTTON_ACCESSIBLE(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_SCALE_BUTTON_ACCESSIBLE, GtkScaleButtonAccessible))
#DEFINE GTK_SCALE_BUTTON_ACCESSIBLE_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_SCALE_BUTTON_ACCESSIBLE, GtkScaleButtonAccessibleClass))
#DEFINE GTK_IS_SCALE_BUTTON_ACCESSIBLE(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_SCALE_BUTTON_ACCESSIBLE))
#DEFINE GTK_IS_CLASS_SCALE_BUTTON_ACCESSIBLE(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_SCALE_BUTTON_ACCESSIBLE))
#DEFINE GTK_SCALE_BUTTON_ACCESSIBLE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_SCALE_BUTTON_ACCESSIBLE, GtkScaleButtonAccessibleClass))
TYPE _GtkScaleButtonAccessibleClass
  AS GtkButtonAccessibleClass parent_class
END TYPE
TYPE _GtkScaleButtonClass
  AS GtkButtonClass parent_class
  value_changed AS SUB CDECL(BYVAL AS GtkScaleButton PTR, BYVAL AS gdouble)
  _gtk_reserved1 AS SUB CDECL()
  _gtk_reserved2 AS SUB CDECL()
  _gtk_reserved3 AS SUB CDECL()
  _gtk_reserved4 AS SUB CDECL()
END TYPE
DECLARE FUNCTION gtk_scroll_step_get_type() AS GType
#DEFINE GTK_TYPE_SCROLL_STEP (gtk_scroll_step_get_type())
DECLARE FUNCTION gtk_scroll_type_get_type() AS GType
#DEFINE GTK_TYPE_SCROLL_TYPE (gtk_scroll_type_get_type())
DECLARE FUNCTION gtk_scrollable_get_type() AS GType
#DEFINE GTK_TYPE_SCROLLABLE (gtk_scrollable_get_type())
#DEFINE GTK_SCROLLABLE(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_SCROLLABLE, GtkScrollable))
#DEFINE GTK_SCROLLABLE_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_SCROLLABLE, GtkScrollableInterface))
#DEFINE GTK_IS_SCROLLABLE(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_SCROLLABLE))
#DEFINE GTK_SCROLLABLE_GET_IFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE((obj), GTK_TYPE_SCROLLABLE, GtkScrollableInterface))
DECLARE FUNCTION gtk_scrollable_get_border(BYVAL AS GtkScrollable PTR, BYVAL AS GtkBorder PTR) AS gboolean
DECLARE FUNCTION gtk_scrollable_get_hadjustment(BYVAL AS GtkScrollable PTR) AS GtkAdjustment PTR
DECLARE FUNCTION gtk_scrollable_get_hscroll_policy(BYVAL AS GtkScrollable PTR) AS GtkScrollablePolicy
DECLARE FUNCTION gtk_scrollable_get_vadjustment(BYVAL AS GtkScrollable PTR) AS GtkAdjustment PTR
DECLARE FUNCTION gtk_scrollable_get_vscroll_policy(BYVAL AS GtkScrollable PTR) AS GtkScrollablePolicy
DECLARE SUB gtk_scrollable_set_hadjustment(BYVAL AS GtkScrollable PTR, BYVAL AS GtkAdjustment PTR)
DECLARE SUB gtk_scrollable_set_hscroll_policy(BYVAL AS GtkScrollable PTR, BYVAL AS GtkScrollablePolicy)
DECLARE SUB gtk_scrollable_set_vadjustment(BYVAL AS GtkScrollable PTR, BYVAL AS GtkAdjustment PTR)
DECLARE SUB gtk_scrollable_set_vscroll_policy(BYVAL AS GtkScrollable PTR, BYVAL AS GtkScrollablePolicy)
TYPE _GtkScrollableInterface
  AS GTypeInterface base_iface
  get_border AS FUNCTION CDECL(BYVAL AS GtkScrollable PTR, BYVAL AS GtkBorder PTR) AS gboolean
END TYPE
TYPE _GtkScrolledWindow
  AS GtkBin container
  AS GtkScrolledWindowPrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_scrollable_policy_get_type() AS GType
#DEFINE GTK_TYPE_SCROLLABLE_POLICY (gtk_scrollable_policy_get_type())
DECLARE FUNCTION gtk_scrolled_window_get_type() AS GType
#DEFINE GTK_TYPE_SCROLLED_WINDOW (gtk_scrolled_window_get_type())
#DEFINE GTK_SCROLLED_WINDOW(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_SCROLLED_WINDOW, GtkScrolledWindow))
#DEFINE GTK_SCROLLED_WINDOW_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_SCROLLED_WINDOW, GtkScrolledWindowClass))
#DEFINE GTK_IS_SCROLLED_WINDOW(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_SCROLLED_WINDOW))
#DEFINE GTK_IS_CLASS_SCROLLED_WINDOW(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_SCROLLED_WINDOW))
#DEFINE GTK_SCROLLED_WINDOW_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_SCROLLED_WINDOW, GtkScrolledWindowClass))
DECLARE FUNCTION gtk_scrolled_window_new(BYVAL AS GtkAdjustment PTR, BYVAL AS GtkAdjustment PTR) AS GtkWidget PTR
DECLARE SUB gtk_scrolled_window_add_with_viewport(BYVAL AS GtkScrolledWindow PTR, BYVAL AS GtkWidget PTR)
DECLARE FUNCTION gtk_scrolled_window_get_capture_button_press(BYVAL AS GtkScrolledWindow PTR) AS gboolean
DECLARE FUNCTION gtk_scrolled_window_get_hadjustment(BYVAL AS GtkScrolledWindow PTR) AS GtkAdjustment PTR
DECLARE FUNCTION gtk_scrolled_window_get_hscrollbar(BYVAL AS GtkScrolledWindow PTR) AS GtkWidget PTR
DECLARE FUNCTION gtk_scrolled_window_get_kinetic_scrolling(BYVAL AS GtkScrolledWindow PTR) AS gboolean
DECLARE FUNCTION gtk_scrolled_window_get_max_content_height(BYVAL AS GtkScrolledWindow PTR) AS gint
DECLARE FUNCTION gtk_scrolled_window_get_max_content_width(BYVAL AS GtkScrolledWindow PTR) AS gint
DECLARE FUNCTION gtk_scrolled_window_get_min_content_height(BYVAL AS GtkScrolledWindow PTR) AS gint
DECLARE FUNCTION gtk_scrolled_window_get_min_content_width(BYVAL AS GtkScrolledWindow PTR) AS gint
DECLARE FUNCTION gtk_scrolled_window_get_overlay_scrolling(BYVAL AS GtkScrolledWindow PTR) AS gboolean
DECLARE FUNCTION gtk_scrolled_window_get_placement(BYVAL AS GtkScrolledWindow PTR) AS GtkCornerType
DECLARE SUB gtk_scrolled_window_get_policy(BYVAL AS GtkScrolledWindow PTR, BYVAL AS GtkPolicyType PTR, BYVAL AS GtkPolicyType PTR)
DECLARE FUNCTION gtk_scrolled_window_get_propagate_natural_height(BYVAL AS GtkScrolledWindow PTR) AS gboolean
DECLARE FUNCTION gtk_scrolled_window_get_propagate_natural_width(BYVAL AS GtkScrolledWindow PTR) AS gboolean
DECLARE FUNCTION gtk_scrolled_window_get_shadow_type(BYVAL AS GtkScrolledWindow PTR) AS GtkShadowType
DECLARE FUNCTION gtk_scrolled_window_get_vadjustment(BYVAL AS GtkScrolledWindow PTR) AS GtkAdjustment PTR
DECLARE FUNCTION gtk_scrolled_window_get_vscrollbar(BYVAL AS GtkScrolledWindow PTR) AS GtkWidget PTR
DECLARE SUB gtk_scrolled_window_set_capture_button_press(BYVAL AS GtkScrolledWindow PTR, BYVAL AS gboolean)
DECLARE SUB gtk_scrolled_window_set_hadjustment(BYVAL AS GtkScrolledWindow PTR, BYVAL AS GtkAdjustment PTR)
DECLARE SUB gtk_scrolled_window_set_kinetic_scrolling(BYVAL AS GtkScrolledWindow PTR, BYVAL AS gboolean)
DECLARE SUB gtk_scrolled_window_set_max_content_height(BYVAL AS GtkScrolledWindow PTR, BYVAL AS gint)
DECLARE SUB gtk_scrolled_window_set_max_content_width(BYVAL AS GtkScrolledWindow PTR, BYVAL AS gint)
DECLARE SUB gtk_scrolled_window_set_min_content_height(BYVAL AS GtkScrolledWindow PTR, BYVAL AS gint)
DECLARE SUB gtk_scrolled_window_set_min_content_width(BYVAL AS GtkScrolledWindow PTR, BYVAL AS gint)
DECLARE SUB gtk_scrolled_window_set_overlay_scrolling(BYVAL AS GtkScrolledWindow PTR, BYVAL AS gboolean)
DECLARE SUB gtk_scrolled_window_set_placement(BYVAL AS GtkScrolledWindow PTR, BYVAL AS GtkCornerType)
DECLARE SUB gtk_scrolled_window_set_policy(BYVAL AS GtkScrolledWindow PTR, BYVAL AS GtkPolicyType, BYVAL AS GtkPolicyType)
DECLARE SUB gtk_scrolled_window_set_propagate_natural_height(BYVAL AS GtkScrolledWindow PTR, BYVAL AS gboolean)
DECLARE SUB gtk_scrolled_window_set_propagate_natural_width(BYVAL AS GtkScrolledWindow PTR, BYVAL AS gboolean)
DECLARE SUB gtk_scrolled_window_set_shadow_type(BYVAL AS GtkScrolledWindow PTR, BYVAL AS GtkShadowType)
DECLARE SUB gtk_scrolled_window_set_vadjustment(BYVAL AS GtkScrolledWindow PTR, BYVAL AS GtkAdjustment PTR)
DECLARE SUB gtk_scrolled_window_unset_placement(BYVAL AS GtkScrolledWindow PTR)
TYPE _GtkScrolledWindowAccessible
  AS GtkContainerAccessible parent
  AS GtkScrolledWindowAccessiblePrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_scrolled_window_accessible_get_type() AS GType
#DEFINE GTK_TYPE_SCROLLED_WINDOW_ACCESSIBLE (gtk_scrolled_window_accessible_get_type())
#DEFINE GTK_SCROLLED_WINDOW_ACCESSIBLE(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_SCROLLED_WINDOW_ACCESSIBLE, GtkScrolledWindowAccessible))
#DEFINE GTK_SCROLLED_WINDOW_ACCESSIBLE_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_SCROLLED_WINDOW_ACCESSIBLE, GtkScrolledWindowAccessibleClass))
#DEFINE GTK_IS_SCROLLED_WINDOW_ACCESSIBLE(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_SCROLLED_WINDOW_ACCESSIBLE))
#DEFINE GTK_IS_CLASS_SCROLLED_WINDOW_ACCESSIBLE(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_SCROLLED_WINDOW_ACCESSIBLE))
#DEFINE GTK_SCROLLED_WINDOW_ACCESSIBLE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_SCROLLED_WINDOW_ACCESSIBLE, GtkScrolledWindowAccessibleClass))
TYPE _GtkScrolledWindowAccessibleClass
  AS GtkContainerAccessibleClass parent_class
END TYPE
TYPE _GtkScrolledWindowClass
  AS GtkBinClass parent_class
  AS gint scrollbar_spacing
  scroll_child AS FUNCTION CDECL(BYVAL AS GtkScrolledWindow PTR, BYVAL AS GtkScrollType, BYVAL AS gboolean) AS gboolean
  move_focus_out AS SUB CDECL(BYVAL AS GtkScrolledWindow PTR, BYVAL AS GtkDirectionType)
  _gtk_reserved1 AS SUB CDECL()
  _gtk_reserved2 AS SUB CDECL()
  _gtk_reserved3 AS SUB CDECL()
  _gtk_reserved4 AS SUB CDECL()
END TYPE
TYPE _GtkSearchBar
  AS GtkBin parent
END TYPE
DECLARE FUNCTION gtk_search_bar_get_type() AS GType
#DEFINE GTK_TYPE_SEARCH_BAR (gtk_search_bar_get_type())
#DEFINE GTK_SEARCH_BAR(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_SEARCH_BAR, GtkSearchBar))
#DEFINE GTK_SEARCH_BAR_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_SEARCH_BAR, GtkSearchBarClass))
#DEFINE GTK_IS_SEARCH_BAR(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_SEARCH_BAR))
#DEFINE GTK_IS_CLASS_SEARCH_BAR(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_SEARCH_BAR))
#DEFINE GTK_SEARCH_BAR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_SEARCH_BAR, GtkSearchBarClass))
DECLARE FUNCTION gtk_search_bar_new() AS GtkWidget PTR
DECLARE SUB gtk_search_bar_connect_entry(BYVAL AS GtkSearchBar PTR, BYVAL AS GtkEntry PTR)
DECLARE FUNCTION gtk_search_bar_get_search_mode(BYVAL AS GtkSearchBar PTR) AS gboolean
DECLARE FUNCTION gtk_search_bar_get_show_close_button(BYVAL AS GtkSearchBar PTR) AS gboolean
DECLARE FUNCTION gtk_search_bar_handle_event(BYVAL AS GtkSearchBar PTR, BYVAL AS GdkEvent PTR) AS gboolean
DECLARE SUB gtk_search_bar_set_search_mode(BYVAL AS GtkSearchBar PTR, BYVAL AS gboolean)
DECLARE SUB gtk_search_bar_set_show_close_button(BYVAL AS GtkSearchBar PTR, BYVAL AS gboolean)
TYPE _GtkSearchBarClass
  AS GtkBinClass parent_class
  _gtk_reserved1 AS SUB CDECL()
  _gtk_reserved2 AS SUB CDECL()
  _gtk_reserved3 AS SUB CDECL()
  _gtk_reserved4 AS SUB CDECL()
END TYPE
TYPE _GtkSearchEntry
  AS GtkEntry parent
END TYPE
DECLARE FUNCTION gtk_search_entry_get_type() AS GType
#DEFINE GTK_TYPE_SEARCH_ENTRY (gtk_search_entry_get_type())
#DEFINE GTK_SEARCH_ENTRY(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_SEARCH_ENTRY, GtkSearchEntry))
#DEFINE GTK_SEARCH_ENTRY_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_SEARCH_ENTRY, GtkSearchEntryClass))
#DEFINE GTK_IS_SEARCH_ENTRY(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_SEARCH_ENTRY))
#DEFINE GTK_IS_CLASS_SEARCH_ENTRY(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_SEARCH_ENTRY))
#DEFINE GTK_SEARCH_ENTRY_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_SEARCH_ENTRY, GtkSearchEntryClass))
DECLARE FUNCTION gtk_search_entry_new() AS GtkWidget PTR
DECLARE FUNCTION gtk_search_entry_handle_event(BYVAL AS GtkSearchEntry PTR, BYVAL AS GdkEvent PTR) AS gboolean
TYPE _GtkSearchEntryClass
  AS GtkEntryClass parent_class
  search_changed AS SUB CDECL(BYVAL AS GtkSearchEntry PTR)
  next_match AS SUB CDECL(BYVAL AS GtkSearchEntry PTR)
  previous_match AS SUB CDECL(BYVAL AS GtkSearchEntry PTR)
  stop_search AS SUB CDECL(BYVAL AS GtkSearchEntry PTR)
END TYPE
DECLARE FUNCTION gtk_selection_data_copy(BYVAL AS const GtkSelectionData PTR) AS GtkSelectionData PTR
DECLARE SUB gtk_selection_data_free(BYVAL AS GtkSelectionData PTR)
DECLARE FUNCTION gtk_selection_data_get_data(BYVAL AS const GtkSelectionData PTR) AS const guchar PTR
DECLARE FUNCTION gtk_selection_data_get_data_type(BYVAL AS const GtkSelectionData PTR) AS any ptr /'GdkAtom'/
DECLARE FUNCTION gtk_selection_data_get_data_with_length(BYVAL AS const GtkSelectionData PTR, BYVAL AS gint PTR) AS const guchar PTR
DECLARE FUNCTION gtk_selection_data_get_display(BYVAL AS const GtkSelectionData PTR) AS GdkDisplay PTR
DECLARE FUNCTION gtk_selection_data_get_format(BYVAL AS const GtkSelectionData PTR) AS gint
DECLARE FUNCTION gtk_selection_data_get_length(BYVAL AS const GtkSelectionData PTR) AS gint
DECLARE FUNCTION gtk_selection_data_get_pixbuf(BYVAL AS const GtkSelectionData PTR) AS GdkPixbuf PTR
DECLARE FUNCTION gtk_selection_data_get_selection(BYVAL AS const GtkSelectionData PTR) AS any ptr /'GdkAtom'/
DECLARE FUNCTION gtk_selection_data_get_target(BYVAL AS const GtkSelectionData PTR) AS any ptr /'GdkAtom'/
DECLARE FUNCTION gtk_selection_data_get_targets(BYVAL AS const GtkSelectionData PTR, BYVAL AS any ptr /'GdkAtom'/ PTR PTR, BYVAL AS gint PTR) AS gboolean
DECLARE FUNCTION gtk_selection_data_get_text(BYVAL AS const GtkSelectionData PTR) AS guchar PTR
DECLARE FUNCTION gtk_selection_data_get_uris(BYVAL AS const GtkSelectionData PTR) AS gchar PTR PTR
DECLARE SUB gtk_selection_data_set(BYVAL AS GtkSelectionData PTR, BYVAL AS any ptr /'GdkAtom'/, BYVAL AS gint, BYVAL AS const guchar PTR, BYVAL AS gint)
DECLARE FUNCTION gtk_selection_data_set_pixbuf(BYVAL AS GtkSelectionData PTR, BYVAL AS GdkPixbuf PTR) AS gboolean
DECLARE FUNCTION gtk_selection_data_set_text(BYVAL AS GtkSelectionData PTR, BYVAL AS const gchar PTR, BYVAL AS gint) AS gboolean
DECLARE FUNCTION gtk_selection_data_set_uris(BYVAL AS GtkSelectionData PTR, BYVAL AS gchar PTR PTR) AS gboolean
DECLARE FUNCTION gtk_selection_data_targets_include_image(BYVAL AS const GtkSelectionData PTR, BYVAL AS gboolean) AS gboolean
DECLARE FUNCTION gtk_selection_data_targets_include_rich_text(BYVAL AS const GtkSelectionData PTR, BYVAL AS GtkTextBuffer PTR) AS gboolean
DECLARE FUNCTION gtk_selection_data_targets_include_text(BYVAL AS const GtkSelectionData PTR) AS gboolean
DECLARE FUNCTION gtk_selection_data_targets_include_uri(BYVAL AS const GtkSelectionData PTR) AS gboolean
TYPE _GtkSeparatorMenuItem
  AS GtkMenuItem menu_item
END TYPE
DECLARE FUNCTION gtk_selection_mode_get_type() AS GType
#DEFINE GTK_TYPE_SELECTION_MODE (gtk_selection_mode_get_type())
DECLARE FUNCTION gtk_sensitivity_type_get_type() AS GType
#DEFINE GTK_TYPE_SENSITIVITY_TYPE (gtk_sensitivity_type_get_type())
DECLARE FUNCTION gtk_separator_menu_item_get_type() AS GType
#DEFINE GTK_TYPE_SEPARATOR_MENU_ITEM (gtk_separator_menu_item_get_type())
#DEFINE GTK_SEPARATOR_MENU_ITEM(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_SEPARATOR_MENU_ITEM, GtkSeparatorMenuItem))
#DEFINE GTK_SEPARATOR_MENU_ITEM_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_SEPARATOR_MENU_ITEM, GtkSeparatorMenuItemClass))
#DEFINE GTK_IS_SEPARATOR_MENU_ITEM(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_SEPARATOR_MENU_ITEM))
#DEFINE GTK_IS_CLASS_SEPARATOR_MENU_ITEM(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_SEPARATOR_MENU_ITEM))
#DEFINE GTK_SEPARATOR_MENU_ITEM_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_SEPARATOR_MENU_ITEM, GtkSeparatorMenuItemClass))
DECLARE FUNCTION gtk_separator_menu_item_new() AS GtkWidget PTR
TYPE _GtkSeparatorMenuItemClass
  AS GtkMenuItemClass parent_class
  _gtk_reserved1 AS SUB CDECL()
  _gtk_reserved2 AS SUB CDECL()
  _gtk_reserved3 AS SUB CDECL()
  _gtk_reserved4 AS SUB CDECL()
END TYPE
TYPE _GtkSeparatorToolItem
  AS GtkToolItem parent
  AS GtkSeparatorToolItemPrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_separator_tool_item_get_type() AS GType
#DEFINE GTK_TYPE_SEPARATOR_TOOL_ITEM (gtk_separator_tool_item_get_type())
#DEFINE GTK_SEPARATOR_TOOL_ITEM(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_SEPARATOR_TOOL_ITEM, GtkSeparatorToolItem))
#DEFINE GTK_SEPARATOR_TOOL_ITEM_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_SEPARATOR_TOOL_ITEM, GtkSeparatorToolItemClass))
#DEFINE GTK_IS_SEPARATOR_TOOL_ITEM(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_SEPARATOR_TOOL_ITEM))
#DEFINE GTK_IS_CLASS_SEPARATOR_TOOL_ITEM(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_SEPARATOR_TOOL_ITEM))
#DEFINE GTK_SEPARATOR_TOOL_ITEM_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_SEPARATOR_TOOL_ITEM, GtkSeparatorToolItemClass))
DECLARE FUNCTION gtk_separator_tool_item_new() AS GtkToolItem PTR
DECLARE FUNCTION gtk_separator_tool_item_get_draw(BYVAL AS GtkSeparatorToolItem PTR) AS gboolean
DECLARE SUB gtk_separator_tool_item_set_draw(BYVAL AS GtkSeparatorToolItem PTR, BYVAL AS gboolean)
TYPE _GtkSeparatorToolItemClass
  AS GtkToolItemClass parent_class
  _gtk_reserved1 AS SUB CDECL()
  _gtk_reserved2 AS SUB CDECL()
  _gtk_reserved3 AS SUB CDECL()
  _gtk_reserved4 AS SUB CDECL()
END TYPE
TYPE _GtkSettings
  AS GObject parent_instance
  AS GtkSettingsPrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_settings_get_type() AS GType
#DEFINE GTK_TYPE_SETTINGS (gtk_settings_get_type())
#DEFINE GTK_SETTINGS(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_SETTINGS, GtkSettings))
#DEFINE GTK_SETTINGS_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_SETTINGS, GtkSettingsClass))
#DEFINE GTK_IS_SETTINGS(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_SETTINGS))
#DEFINE GTK_IS_CLASS_SETTINGS(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_SETTINGS))
#DEFINE GTK_SETTINGS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_SETTINGS, GtkSettingsClass))
DECLARE FUNCTION gtk_settings_get_default() AS GtkSettings PTR
DECLARE FUNCTION gtk_settings_get_for_screen(BYVAL AS GdkScreen PTR) AS GtkSettings PTR
DECLARE SUB gtk_settings_install_property(BYVAL AS GParamSpec PTR)
DECLARE SUB gtk_settings_install_property_parser(BYVAL AS GParamSpec PTR, BYVAL AS GtkRcPropertyParser)
DECLARE SUB gtk_settings_reset_property(BYVAL AS GtkSettings PTR, BYVAL AS const gchar PTR)
DECLARE SUB gtk_settings_set_double_property(BYVAL AS GtkSettings PTR, BYVAL AS const gchar PTR, BYVAL AS gdouble, BYVAL AS const gchar PTR)
DECLARE SUB gtk_settings_set_long_property(BYVAL AS GtkSettings PTR, BYVAL AS const gchar PTR, BYVAL AS glong, BYVAL AS const gchar PTR)
DECLARE SUB gtk_settings_set_property_value(BYVAL AS GtkSettings PTR, BYVAL AS const gchar PTR, BYVAL AS const GtkSettingsValue PTR)
DECLARE SUB gtk_settings_set_string_property(BYVAL AS GtkSettings PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR)
TYPE _GtkSettingsClass
  AS GObjectClass parent_class
  _gtk_reserved1 AS SUB CDECL()
  _gtk_reserved2 AS SUB CDECL()
  _gtk_reserved3 AS SUB CDECL()
  _gtk_reserved4 AS SUB CDECL()
END TYPE
TYPE _GtkSettingsValue
  AS gchar PTR origin
  AS GValue value
END TYPE
DECLARE FUNCTION gtk_shadow_type_get_type() AS GType
#DEFINE GTK_TYPE_SHADOW_TYPE (gtk_shadow_type_get_type())
DECLARE FUNCTION gtk_shortcut_label_get_type() AS GType
#DEFINE GTK_TYPE_SHORTCUT_LABEL (gtk_shortcut_label_get_type())
#DEFINE GTK_SHORTCUT_LABEL(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_SHORTCUT_LABEL, GtkShortcutLabel))
#DEFINE GTK_SHORTCUT_LABEL_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_SHORTCUT_LABEL, GtkShortcutLabelClass))
#DEFINE GTK_IS_SHORTCUT_LABEL(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_SHORTCUT_LABEL))
#DEFINE GTK_IS_CLASS_SHORTCUT_LABEL(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_SHORTCUT_LABEL))
#DEFINE GTK_SHORTCUT_LABEL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_SHORTCUT_LABEL, GtkShortcutLabelClass))
DECLARE FUNCTION gtk_shortcut_label_new(BYVAL AS const gchar PTR) AS GtkWidget PTR
DECLARE FUNCTION gtk_shortcut_label_get_accelerator(BYVAL AS GtkShortcutLabel PTR) AS const gchar PTR
DECLARE FUNCTION gtk_shortcut_label_get_disabled_text(BYVAL AS GtkShortcutLabel PTR) AS const gchar PTR
DECLARE SUB gtk_shortcut_label_set_accelerator(BYVAL AS GtkShortcutLabel PTR, BYVAL AS const gchar PTR)
DECLARE SUB gtk_shortcut_label_set_disabled_text(BYVAL AS GtkShortcutLabel PTR, BYVAL AS const gchar PTR)
DECLARE FUNCTION gtk_shortcut_type_get_type() AS GType
#DEFINE GTK_TYPE_SHORTCUT_TYPE (gtk_shortcut_type_get_type())
DECLARE FUNCTION gtk_shortcuts_group_get_type() AS GType
#DEFINE GTK_TYPE_SHORTCUTS_GROUP (gtk_shortcuts_group_get_type())
#DEFINE GTK_SHORTCUTS_GROUP(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_SHORTCUTS_GROUP, GtkShortcutsGroup))
#DEFINE GTK_SHORTCUTS_GROUP_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_SHORTCUTS_GROUP, GtkShortcutsGroupClass))
#DEFINE GTK_IS_SHORTCUTS_GROUP(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_SHORTCUTS_GROUP))
#DEFINE GTK_IS_CLASS_SHORTCUTS_GROUP(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_SHORTCUTS_GROUP))
#DEFINE GTK_SHORTCUTS_GROUP_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_SHORTCUTS_GROUP, GtkShortcutsGroupClass))
DECLARE FUNCTION gtk_shortcuts_section_get_type() AS GType
#DEFINE GTK_TYPE_SHORTCUTS_SECTION (gtk_shortcuts_section_get_type())
#DEFINE GTK_SHORTCUTS_SECTION(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_SHORTCUTS_SECTION, GtkShortcutsSection))
#DEFINE GTK_SHORTCUTS_SECTION_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_SHORTCUTS_SECTION, GtkShortcutsSectionClass))
#DEFINE GTK_IS_SHORTCUTS_SECTION(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_SHORTCUTS_SECTION))
#DEFINE GTK_IS_CLASS_SHORTCUTS_SECTION(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_SHORTCUTS_SECTION))
#DEFINE GTK_SHORTCUTS_SECTION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_SHORTCUTS_SECTION, GtkShortcutsSectionClass))
DECLARE FUNCTION gtk_shortcuts_shortcut_get_type() AS GType
#DEFINE GTK_TYPE_SHORTCUTS_SHORTCUT (gtk_shortcuts_shortcut_get_type())
#DEFINE GTK_SHORTCUTS_SHORTCUT(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_SHORTCUTS_SHORTCUT, GtkShortcutsShortcut))
#DEFINE GTK_SHORTCUTS_SHORTCUT_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_SHORTCUTS_SHORTCUT, GtkShortcutsShortcutClass))
#DEFINE GTK_IS_SHORTCUTS_SHORTCUT(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_SHORTCUTS_SHORTCUT))
#DEFINE GTK_IS_CLASS_SHORTCUTS_SHORTCUT(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_SHORTCUTS_SHORTCUT))
#DEFINE GTK_SHORTCUTS_SHORTCUT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_SHORTCUTS_SHORTCUT, GtkShortcutsShortcutClass))
TYPE _GtkShortcutsWindow
  AS GtkWindow window
END TYPE
DECLARE FUNCTION gtk_shortcuts_window_get_type() AS GType
#DEFINE GTK_TYPE_SHORTCUTS_WINDOW (gtk_shortcuts_window_get_type())
#DEFINE GTK_SHORTCUTS_WINDOW(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_SHORTCUTS_WINDOW, GtkShortcutsWindow))
#DEFINE GTK_SHORTCUTS_WINDOW_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_SHORTCUTS_WINDOW, GtkShortcutsWindowClass))
#DEFINE GTK_IS_SHORTCUTS_WINDOW(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_SHORTCUTS_WINDOW))
#DEFINE GTK_IS_CLASS_SHORTCUTS_WINDOW(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_SHORTCUTS_WINDOW))
#DEFINE GTK_SHORTCUTS_WINDOW_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_SHORTCUTS_WINDOW, GtkShortcutsWindowClass))
TYPE _GtkShortcutsWindowClass
  AS GtkWindowClass parent_class
  close AS SUB CDECL(BYVAL AS GtkShortcutsWindow PTR)
  search AS SUB CDECL(BYVAL AS GtkShortcutsWindow PTR)
END TYPE
TYPE _GtkSizeGroup
  AS GObject parent_instance
  AS GtkSizeGroupPrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_size_group_get_type() AS GType
#DEFINE GTK_TYPE_SIZE_GROUP (gtk_size_group_get_type())
#DEFINE GTK_SIZE_GROUP(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_SIZE_GROUP, GtkSizeGroup))
#DEFINE GTK_SIZE_GROUP_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_SIZE_GROUP, GtkSizeGroupClass))
#DEFINE GTK_IS_SIZE_GROUP(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_SIZE_GROUP))
#DEFINE GTK_IS_CLASS_SIZE_GROUP(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_SIZE_GROUP))
#DEFINE GTK_SIZE_GROUP_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_SIZE_GROUP, GtkSizeGroupClass))
DECLARE FUNCTION gtk_size_group_new(BYVAL AS GtkSizeGroupMode) AS GtkSizeGroup PTR
DECLARE SUB gtk_size_group_add_widget(BYVAL AS GtkSizeGroup PTR, BYVAL AS GtkWidget PTR)
DECLARE FUNCTION gtk_size_group_get_ignore_hidden(BYVAL AS GtkSizeGroup PTR) AS gboolean
DECLARE FUNCTION gtk_size_group_get_mode(BYVAL AS GtkSizeGroup PTR) AS GtkSizeGroupMode
DECLARE FUNCTION gtk_size_group_get_widgets(BYVAL AS GtkSizeGroup PTR) AS GSList PTR
DECLARE SUB gtk_size_group_remove_widget(BYVAL AS GtkSizeGroup PTR, BYVAL AS GtkWidget PTR)
DECLARE SUB gtk_size_group_set_ignore_hidden(BYVAL AS GtkSizeGroup PTR, BYVAL AS gboolean)
DECLARE SUB gtk_size_group_set_mode(BYVAL AS GtkSizeGroup PTR, BYVAL AS GtkSizeGroupMode)
TYPE _GtkSizeGroupClass
  AS GObjectClass parent_class
  _gtk_reserved1 AS SUB CDECL()
  _gtk_reserved2 AS SUB CDECL()
  _gtk_reserved3 AS SUB CDECL()
  _gtk_reserved4 AS SUB CDECL()
END TYPE
DECLARE FUNCTION gtk_size_group_mode_get_type() AS GType
#DEFINE GTK_TYPE_SIZE_GROUP_MODE (gtk_size_group_mode_get_type())
TYPE _GtkSocket
  AS GtkContainer container
  AS GtkSocketPrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_size_request_mode_get_type() AS GType
#DEFINE GTK_TYPE_SIZE_REQUEST_MODE (gtk_size_request_mode_get_type())
DECLARE FUNCTION gtk_socket_get_type() AS GType
#DEFINE GTK_TYPE_SOCKET (gtk_socket_get_type())
#DEFINE GTK_SOCKET(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_SOCKET, GtkSocket))
#DEFINE GTK_SOCKET_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_SOCKET, GtkSocketClass))
#DEFINE GTK_IS_SOCKET(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_SOCKET))
#DEFINE GTK_IS_CLASS_SOCKET(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_SOCKET))
#DEFINE GTK_SOCKET_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_SOCKET, GtkSocketClass))
DECLARE FUNCTION gtk_socket_new() AS GtkWidget PTR
DECLARE SUB gtk_socket_add_id(BYVAL AS GtkSocket PTR, BYVAL AS guint32 /'Window'/)
DECLARE FUNCTION gtk_socket_get_id(BYVAL AS GtkSocket PTR) AS guint32 /'Window'/
DECLARE FUNCTION gtk_socket_get_plug_window(BYVAL AS GtkSocket PTR) AS GdkWindow PTR
TYPE _GtkSocketClass
  AS GtkContainerClass parent_class
  plug_added AS SUB CDECL(BYVAL AS GtkSocket PTR)
  plug_removed AS FUNCTION CDECL(BYVAL AS GtkSocket PTR) AS gboolean
  _gtk_reserved1 AS SUB CDECL()
  _gtk_reserved2 AS SUB CDECL()
  _gtk_reserved3 AS SUB CDECL()
  _gtk_reserved4 AS SUB CDECL()
END TYPE
TYPE _GtkSpinButton
  AS GtkEntry entry
  AS GtkSpinButtonPrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_sort_type_get_type() AS GType
#DEFINE GTK_TYPE_SORT_TYPE (gtk_sort_type_get_type())
DECLARE FUNCTION gtk_spin_button_get_type() AS GType
#DEFINE GTK_TYPE_SPIN_BUTTON (gtk_spin_button_get_type())
#DEFINE GTK_SPIN_BUTTON(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_SPIN_BUTTON, GtkSpinButton))
#DEFINE GTK_SPIN_BUTTON_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_SPIN_BUTTON, GtkSpinButtonClass))
#DEFINE GTK_IS_SPIN_BUTTON(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_SPIN_BUTTON))
#DEFINE GTK_IS_CLASS_SPIN_BUTTON(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_SPIN_BUTTON))
#DEFINE GTK_SPIN_BUTTON_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_SPIN_BUTTON, GtkSpinButtonClass))
DECLARE FUNCTION gtk_spin_button_new(BYVAL AS GtkAdjustment PTR, BYVAL AS gdouble, BYVAL AS guint) AS GtkWidget PTR
DECLARE FUNCTION gtk_spin_button_new_with_range(BYVAL AS gdouble, BYVAL AS gdouble, BYVAL AS gdouble) AS GtkWidget PTR
DECLARE SUB gtk_spin_button_configure(BYVAL AS GtkSpinButton PTR, BYVAL AS GtkAdjustment PTR, BYVAL AS gdouble, BYVAL AS guint)
DECLARE FUNCTION gtk_spin_button_get_adjustment(BYVAL AS GtkSpinButton PTR) AS GtkAdjustment PTR
DECLARE FUNCTION gtk_spin_button_get_digits(BYVAL AS GtkSpinButton PTR) AS guint
DECLARE SUB gtk_spin_button_get_increments(BYVAL AS GtkSpinButton PTR, BYVAL AS gdouble PTR, BYVAL AS gdouble PTR)
DECLARE FUNCTION gtk_spin_button_get_numeric(BYVAL AS GtkSpinButton PTR) AS gboolean
DECLARE SUB gtk_spin_button_get_range(BYVAL AS GtkSpinButton PTR, BYVAL AS gdouble PTR, BYVAL AS gdouble PTR)
DECLARE FUNCTION gtk_spin_button_get_snap_to_ticks(BYVAL AS GtkSpinButton PTR) AS gboolean
DECLARE FUNCTION gtk_spin_button_get_update_policy(BYVAL AS GtkSpinButton PTR) AS GtkSpinButtonUpdatePolicy
DECLARE FUNCTION gtk_spin_button_get_value(BYVAL AS GtkSpinButton PTR) AS gdouble
DECLARE FUNCTION gtk_spin_button_get_value_as_int(BYVAL AS GtkSpinButton PTR) AS gint
DECLARE FUNCTION gtk_spin_button_get_wrap(BYVAL AS GtkSpinButton PTR) AS gboolean
DECLARE SUB gtk_spin_button_set_adjustment(BYVAL AS GtkSpinButton PTR, BYVAL AS GtkAdjustment PTR)
DECLARE SUB gtk_spin_button_set_digits(BYVAL AS GtkSpinButton PTR, BYVAL AS guint)
DECLARE SUB gtk_spin_button_set_increments(BYVAL AS GtkSpinButton PTR, BYVAL AS gdouble, BYVAL AS gdouble)
DECLARE SUB gtk_spin_button_set_numeric(BYVAL AS GtkSpinButton PTR, BYVAL AS gboolean)
DECLARE SUB gtk_spin_button_set_range(BYVAL AS GtkSpinButton PTR, BYVAL AS gdouble, BYVAL AS gdouble)
DECLARE SUB gtk_spin_button_set_snap_to_ticks(BYVAL AS GtkSpinButton PTR, BYVAL AS gboolean)
DECLARE SUB gtk_spin_button_set_update_policy(BYVAL AS GtkSpinButton PTR, BYVAL AS GtkSpinButtonUpdatePolicy)
DECLARE SUB gtk_spin_button_set_value(BYVAL AS GtkSpinButton PTR, BYVAL AS gdouble)
DECLARE SUB gtk_spin_button_set_wrap(BYVAL AS GtkSpinButton PTR, BYVAL AS gboolean)
DECLARE SUB gtk_spin_button_spin(BYVAL AS GtkSpinButton PTR, BYVAL AS GtkSpinType, BYVAL AS gdouble)
DECLARE SUB gtk_spin_button_update(BYVAL AS GtkSpinButton PTR)
TYPE _GtkSpinButtonAccessible
  AS GtkEntryAccessible parent
  AS GtkSpinButtonAccessiblePrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_spin_button_accessible_get_type() AS GType
#DEFINE GTK_TYPE_SPIN_BUTTON_ACCESSIBLE (gtk_spin_button_accessible_get_type())
#DEFINE GTK_SPIN_BUTTON_ACCESSIBLE(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_SPIN_BUTTON_ACCESSIBLE, GtkSpinButtonAccessible))
#DEFINE GTK_SPIN_BUTTON_ACCESSIBLE_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_SPIN_BUTTON_ACCESSIBLE, GtkSpinButtonAccessibleClass))
#DEFINE GTK_IS_SPIN_BUTTON_ACCESSIBLE(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_SPIN_BUTTON_ACCESSIBLE))
#DEFINE GTK_IS_CLASS_SPIN_BUTTON_ACCESSIBLE(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_SPIN_BUTTON_ACCESSIBLE))
#DEFINE GTK_SPIN_BUTTON_ACCESSIBLE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_SPIN_BUTTON_ACCESSIBLE, GtkSpinButtonAccessibleClass))
TYPE _GtkSpinButtonAccessibleClass
  AS GtkEntryAccessibleClass parent_class
END TYPE
TYPE _GtkSpinButtonClass
  AS GtkEntryClass parent_class
  input AS FUNCTION CDECL(BYVAL AS GtkSpinButton PTR, BYVAL AS gdouble PTR) AS gint
  output AS FUNCTION CDECL(BYVAL AS GtkSpinButton PTR) AS gint
  value_changed AS SUB CDECL(BYVAL AS GtkSpinButton PTR)
  change_value AS SUB CDECL(BYVAL AS GtkSpinButton PTR, BYVAL AS GtkScrollType)
  wrapped AS SUB CDECL(BYVAL AS GtkSpinButton PTR)
  _gtk_reserved1 AS SUB CDECL()
  _gtk_reserved2 AS SUB CDECL()
  _gtk_reserved3 AS SUB CDECL()
  _gtk_reserved4 AS SUB CDECL()
END TYPE
TYPE _GtkSpinner
  AS GtkWidget parent
  AS GtkSpinnerPrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_spin_button_update_policy_get_type() AS GType
#DEFINE GTK_TYPE_SPIN_BUTTON_UPDATE_POLICY (gtk_spin_button_update_policy_get_type())
DECLARE FUNCTION gtk_spin_type_get_type() AS GType
#DEFINE GTK_TYPE_SPIN_TYPE (gtk_spin_type_get_type())
DECLARE FUNCTION gtk_spinner_get_type() AS GType
#DEFINE GTK_TYPE_SPINNER (gtk_spinner_get_type())
#DEFINE GTK_SPINNER(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_SPINNER, GtkSpinner))
#DEFINE GTK_SPINNER_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_SPINNER, GtkSpinnerClass))
#DEFINE GTK_IS_SPINNER(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_SPINNER))
#DEFINE GTK_IS_CLASS_SPINNER(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_SPINNER))
#DEFINE GTK_SPINNER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_SPINNER, GtkSpinnerClass))
DECLARE FUNCTION gtk_spinner_new() AS GtkWidget PTR
DECLARE SUB gtk_spinner_start(BYVAL AS GtkSpinner PTR)
DECLARE SUB gtk_spinner_stop(BYVAL AS GtkSpinner PTR)
TYPE _GtkSpinnerAccessible
  AS GtkWidgetAccessible parent
  AS GtkSpinnerAccessiblePrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_spinner_accessible_get_type() AS GType
#DEFINE GTK_TYPE_SPINNER_ACCESSIBLE (gtk_spinner_accessible_get_type())
#DEFINE GTK_SPINNER_ACCESSIBLE(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_SPINNER_ACCESSIBLE, GtkSpinnerAccessible))
#DEFINE GTK_SPINNER_ACCESSIBLE_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_SPINNER_ACCESSIBLE, GtkSpinnerAccessibleClass))
#DEFINE GTK_IS_SPINNER_ACCESSIBLE(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_SPINNER_ACCESSIBLE))
#DEFINE GTK_IS_CLASS_SPINNER_ACCESSIBLE(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_SPINNER_ACCESSIBLE))
#DEFINE GTK_SPINNER_ACCESSIBLE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_SPINNER_ACCESSIBLE, GtkSpinnerAccessibleClass))
TYPE _GtkSpinnerAccessibleClass
  AS GtkWidgetAccessibleClass parent_class
END TYPE
TYPE _GtkSpinnerClass
  AS GtkWidgetClass parent_class
  _gtk_reserved1 AS SUB CDECL()
  _gtk_reserved2 AS SUB CDECL()
  _gtk_reserved3 AS SUB CDECL()
  _gtk_reserved4 AS SUB CDECL()
END TYPE
TYPE _GtkStack
  AS GtkContainer parent_instance
END TYPE
DECLARE FUNCTION gtk_stack_get_type() AS GType
#DEFINE GTK_TYPE_STACK (gtk_stack_get_type())
#DEFINE GTK_STACK(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_STACK, GtkStack))
#DEFINE GTK_STACK_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_STACK, GtkStackClass))
#DEFINE GTK_IS_STACK(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_STACK))
#DEFINE GTK_IS_CLASS_STACK(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_STACK))
#DEFINE GTK_STACK_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_STACK, GtkStackClass))
DECLARE FUNCTION gtk_stack_new() AS GtkWidget PTR
DECLARE SUB gtk_stack_add_named(BYVAL AS GtkStack PTR, BYVAL AS GtkWidget PTR, BYVAL AS const gchar PTR)
DECLARE SUB gtk_stack_add_titled(BYVAL AS GtkStack PTR, BYVAL AS GtkWidget PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR)
DECLARE FUNCTION gtk_stack_get_child_by_name(BYVAL AS GtkStack PTR, BYVAL AS const gchar PTR) AS GtkWidget PTR
DECLARE FUNCTION gtk_stack_get_hhomogeneous(BYVAL AS GtkStack PTR) AS gboolean
DECLARE FUNCTION gtk_stack_get_homogeneous(BYVAL AS GtkStack PTR) AS gboolean
DECLARE FUNCTION gtk_stack_get_interpolate_size(BYVAL AS GtkStack PTR) AS gboolean
DECLARE FUNCTION gtk_stack_get_transition_duration(BYVAL AS GtkStack PTR) AS guint
DECLARE FUNCTION gtk_stack_get_transition_running(BYVAL AS GtkStack PTR) AS gboolean
DECLARE FUNCTION gtk_stack_get_transition_type(BYVAL AS GtkStack PTR) AS GtkStackTransitionType
DECLARE FUNCTION gtk_stack_get_vhomogeneous(BYVAL AS GtkStack PTR) AS gboolean
DECLARE FUNCTION gtk_stack_get_visible_child(BYVAL AS GtkStack PTR) AS GtkWidget PTR
DECLARE FUNCTION gtk_stack_get_visible_child_name(BYVAL AS GtkStack PTR) AS const gchar PTR
DECLARE SUB gtk_stack_set_hhomogeneous(BYVAL AS GtkStack PTR, BYVAL AS gboolean)
DECLARE SUB gtk_stack_set_homogeneous(BYVAL AS GtkStack PTR, BYVAL AS gboolean)
DECLARE SUB gtk_stack_set_interpolate_size(BYVAL AS GtkStack PTR, BYVAL AS gboolean)
DECLARE SUB gtk_stack_set_transition_duration(BYVAL AS GtkStack PTR, BYVAL AS guint)
DECLARE SUB gtk_stack_set_transition_type(BYVAL AS GtkStack PTR, BYVAL AS GtkStackTransitionType)
DECLARE SUB gtk_stack_set_vhomogeneous(BYVAL AS GtkStack PTR, BYVAL AS gboolean)
DECLARE SUB gtk_stack_set_visible_child(BYVAL AS GtkStack PTR, BYVAL AS GtkWidget PTR)
DECLARE SUB gtk_stack_set_visible_child_full(BYVAL AS GtkStack PTR, BYVAL AS const gchar PTR, BYVAL AS GtkStackTransitionType)
DECLARE SUB gtk_stack_set_visible_child_name(BYVAL AS GtkStack PTR, BYVAL AS const gchar PTR)
TYPE _GtkStackAccessible
  AS GtkContainerAccessible parent
END TYPE
DECLARE FUNCTION gtk_stack_accessible_get_type() AS GType
#DEFINE GTK_TYPE_STACK_ACCESSIBLE (gtk_stack_accessible_get_type())
#DEFINE GTK_STACK_ACCESSIBLE(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_STACK_ACCESSIBLE, GtkStackAccessible))
#DEFINE GTK_STACK_ACCESSIBLE_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_STACK_ACCESSIBLE, GtkStackAccessibleClass))
#DEFINE GTK_IS_STACK_ACCESSIBLE(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_STACK_ACCESSIBLE))
#DEFINE GTK_IS_CLASS_STACK_ACCESSIBLE(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_STACK_ACCESSIBLE))
#DEFINE GTK_STACK_ACCESSIBLE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_STACK_ACCESSIBLE, GtkStackAccessibleClass))
TYPE _GtkStackAccessibleClass
  AS GtkContainerAccessibleClass parent_class
END TYPE
TYPE _GtkStackClass
  AS GtkContainerClass parent_class
END TYPE
TYPE _GtkStackSidebar
  AS GtkBin parent
END TYPE
DECLARE FUNCTION gtk_stack_sidebar_get_type() AS GType
#DEFINE GTK_TYPE_STACK_SIDEBAR (gtk_stack_sidebar_get_type())
#DEFINE GTK_STACK_SIDEBAR(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_STACK_SIDEBAR, GtkStackSidebar))
#DEFINE GTK_STACK_SIDEBAR_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_STACK_SIDEBAR, GtkStackSidebarClass))
#DEFINE GTK_IS_STACK_SIDEBAR(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_STACK_SIDEBAR))
#DEFINE GTK_IS_CLASS_STACK_SIDEBAR(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_STACK_SIDEBAR))
#DEFINE GTK_STACK_SIDEBAR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_STACK_SIDEBAR, GtkStackSidebarClass))
DECLARE FUNCTION gtk_stack_sidebar_new() AS GtkWidget PTR
DECLARE FUNCTION gtk_stack_sidebar_get_stack(BYVAL AS GtkStackSidebar PTR) AS GtkStack PTR
DECLARE SUB gtk_stack_sidebar_set_stack(BYVAL AS GtkStackSidebar PTR, BYVAL AS GtkStack PTR)
TYPE _GtkStackSidebarClass
  AS GtkBinClass parent_class
  _gtk_reserved1 AS SUB CDECL()
  _gtk_reserved2 AS SUB CDECL()
  _gtk_reserved3 AS SUB CDECL()
  _gtk_reserved4 AS SUB CDECL()
END TYPE
TYPE _GtkStackSwitcher
  AS GtkBox widget
END TYPE
DECLARE FUNCTION gtk_stack_switcher_get_type() AS GType
#DEFINE GTK_TYPE_STACK_SWITCHER (gtk_stack_switcher_get_type())
#DEFINE GTK_STACK_SWITCHER(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_STACK_SWITCHER, GtkStackSwitcher))
#DEFINE GTK_STACK_SWITCHER_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_STACK_SWITCHER, GtkStackSwitcherClass))
#DEFINE GTK_IS_STACK_SWITCHER(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_STACK_SWITCHER))
#DEFINE GTK_IS_CLASS_STACK_SWITCHER(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_STACK_SWITCHER))
#DEFINE GTK_STACK_SWITCHER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_STACK_SWITCHER, GtkStackSwitcherClass))
DECLARE FUNCTION gtk_stack_switcher_new() AS GtkWidget PTR
DECLARE FUNCTION gtk_stack_switcher_get_stack(BYVAL AS GtkStackSwitcher PTR) AS GtkStack PTR
DECLARE SUB gtk_stack_switcher_set_stack(BYVAL AS GtkStackSwitcher PTR, BYVAL AS GtkStack PTR)
TYPE _GtkStackSwitcherClass
  AS GtkBoxClass parent_class
  _gtk_reserved1 AS SUB CDECL()
  _gtk_reserved2 AS SUB CDECL()
  _gtk_reserved3 AS SUB CDECL()
  _gtk_reserved4 AS SUB CDECL()
END TYPE
TYPE _GtkStatusIcon
  AS GObject parent_instance
  AS GtkStatusIconPrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_stack_transition_type_get_type() AS GType
#DEFINE GTK_TYPE_STACK_TRANSITION_TYPE (gtk_stack_transition_type_get_type())
DECLARE FUNCTION gtk_state_type_get_type() AS GType
#DEFINE GTK_TYPE_STATE_TYPE (gtk_state_type_get_type())
DECLARE FUNCTION gtk_status_icon_get_type() AS GType
#DEFINE GTK_TYPE_STATUS_ICON (gtk_status_icon_get_type())
#DEFINE GTK_STATUS_ICON(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_STATUS_ICON, GtkStatusIcon))
#DEFINE GTK_STATUS_ICON_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_STATUS_ICON, GtkStatusIconClass))
#DEFINE GTK_IS_STATUS_ICON(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_STATUS_ICON))
#DEFINE GTK_IS_CLASS_STATUS_ICON(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_STATUS_ICON))
#DEFINE GTK_STATUS_ICON_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_STATUS_ICON, GtkStatusIconClass))
DECLARE FUNCTION gtk_status_icon_new() AS GtkStatusIcon PTR
DECLARE FUNCTION gtk_status_icon_new_from_file(BYVAL AS const gchar PTR) AS GtkStatusIcon PTR
DECLARE FUNCTION gtk_status_icon_new_from_gicon(BYVAL AS GIcon PTR) AS GtkStatusIcon PTR
DECLARE FUNCTION gtk_status_icon_new_from_icon_name(BYVAL AS const gchar PTR) AS GtkStatusIcon PTR
DECLARE FUNCTION gtk_status_icon_new_from_pixbuf(BYVAL AS GdkPixbuf PTR) AS GtkStatusIcon PTR
DECLARE FUNCTION gtk_status_icon_new_from_stock(BYVAL AS const gchar PTR) AS GtkStatusIcon PTR
DECLARE SUB gtk_status_icon_position_menu(BYVAL AS GtkMenu PTR, BYVAL AS gint PTR, BYVAL AS gint PTR, BYVAL AS gboolean PTR, BYVAL AS gpointer)
DECLARE FUNCTION gtk_status_icon_get_geometry(BYVAL AS GtkStatusIcon PTR, BYVAL AS GdkScreen PTR PTR, BYVAL AS GdkRectangle PTR, BYVAL AS GtkOrientation PTR) AS gboolean
DECLARE FUNCTION gtk_status_icon_get_gicon(BYVAL AS GtkStatusIcon PTR) AS GIcon PTR
DECLARE FUNCTION gtk_status_icon_get_has_tooltip(BYVAL AS GtkStatusIcon PTR) AS gboolean
DECLARE FUNCTION gtk_status_icon_get_icon_name(BYVAL AS GtkStatusIcon PTR) AS const gchar PTR
DECLARE FUNCTION gtk_status_icon_get_pixbuf(BYVAL AS GtkStatusIcon PTR) AS GdkPixbuf PTR
DECLARE FUNCTION gtk_status_icon_get_screen(BYVAL AS GtkStatusIcon PTR) AS GdkScreen PTR
DECLARE FUNCTION gtk_status_icon_get_size(BYVAL AS GtkStatusIcon PTR) AS gint
DECLARE FUNCTION gtk_status_icon_get_stock(BYVAL AS GtkStatusIcon PTR) AS const gchar PTR
DECLARE FUNCTION gtk_status_icon_get_storage_type(BYVAL AS GtkStatusIcon PTR) AS GtkImageType
DECLARE FUNCTION gtk_status_icon_get_title(BYVAL AS GtkStatusIcon PTR) AS const gchar PTR
DECLARE FUNCTION gtk_status_icon_get_tooltip_markup(BYVAL AS GtkStatusIcon PTR) AS gchar PTR
DECLARE FUNCTION gtk_status_icon_get_tooltip_text(BYVAL AS GtkStatusIcon PTR) AS gchar PTR
DECLARE FUNCTION gtk_status_icon_get_visible(BYVAL AS GtkStatusIcon PTR) AS gboolean
DECLARE FUNCTION gtk_status_icon_get_x11_window_id(BYVAL AS GtkStatusIcon PTR) AS guint32
DECLARE FUNCTION gtk_status_icon_is_embedded(BYVAL AS GtkStatusIcon PTR) AS gboolean
DECLARE SUB gtk_status_icon_set_from_file(BYVAL AS GtkStatusIcon PTR, BYVAL AS const gchar PTR)
DECLARE SUB gtk_status_icon_set_from_gicon(BYVAL AS GtkStatusIcon PTR, BYVAL AS GIcon PTR)
DECLARE SUB gtk_status_icon_set_from_icon_name(BYVAL AS GtkStatusIcon PTR, BYVAL AS const gchar PTR)
DECLARE SUB gtk_status_icon_set_from_pixbuf(BYVAL AS GtkStatusIcon PTR, BYVAL AS GdkPixbuf PTR)
DECLARE SUB gtk_status_icon_set_from_stock(BYVAL AS GtkStatusIcon PTR, BYVAL AS const gchar PTR)
DECLARE SUB gtk_status_icon_set_has_tooltip(BYVAL AS GtkStatusIcon PTR, BYVAL AS gboolean)
DECLARE SUB gtk_status_icon_set_name(BYVAL AS GtkStatusIcon PTR, BYVAL AS const gchar PTR)
DECLARE SUB gtk_status_icon_set_screen(BYVAL AS GtkStatusIcon PTR, BYVAL AS GdkScreen PTR)
DECLARE SUB gtk_status_icon_set_title(BYVAL AS GtkStatusIcon PTR, BYVAL AS const gchar PTR)
DECLARE SUB gtk_status_icon_set_tooltip_markup(BYVAL AS GtkStatusIcon PTR, BYVAL AS const gchar PTR)
DECLARE SUB gtk_status_icon_set_tooltip_text(BYVAL AS GtkStatusIcon PTR, BYVAL AS const gchar PTR)
DECLARE SUB gtk_status_icon_set_visible(BYVAL AS GtkStatusIcon PTR, BYVAL AS gboolean)
TYPE _GtkStatusIconClass
  AS GObjectClass parent_class
  activate AS SUB CDECL(BYVAL AS GtkStatusIcon PTR)
  popup_menu AS SUB CDECL(BYVAL AS GtkStatusIcon PTR, BYVAL AS guint, BYVAL AS guint32)
  size_changed AS FUNCTION CDECL(BYVAL AS GtkStatusIcon PTR, BYVAL AS gint) AS gboolean
  button_press_event AS FUNCTION CDECL(BYVAL AS GtkStatusIcon PTR, BYVAL AS GdkEventButton PTR) AS gboolean
  button_release_event AS FUNCTION CDECL(BYVAL AS GtkStatusIcon PTR, BYVAL AS GdkEventButton PTR) AS gboolean
  scroll_event AS FUNCTION CDECL(BYVAL AS GtkStatusIcon PTR, BYVAL AS GdkEventScroll PTR) AS gboolean
  query_tooltip AS FUNCTION CDECL(BYVAL AS GtkStatusIcon PTR, BYVAL AS gint, BYVAL AS gint, BYVAL AS gboolean, BYVAL AS GtkTooltip PTR) AS gboolean
  __gtk_reserved1 AS SUB CDECL()
  __gtk_reserved2 AS SUB CDECL()
  __gtk_reserved3 AS SUB CDECL()
  __gtk_reserved4 AS SUB CDECL()
END TYPE
TYPE _GtkStatusbar
  AS GtkBox parent_widget
  AS GtkStatusbarPrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_statusbar_get_type() AS GType
#DEFINE GTK_TYPE_STATUSBAR (gtk_statusbar_get_type())
#DEFINE GTK_STATUSBAR(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_STATUSBAR, GtkStatusbar))
#DEFINE GTK_STATUSBAR_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_STATUSBAR, GtkStatusbarClass))
#DEFINE GTK_IS_STATUSBAR(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_STATUSBAR))
#DEFINE GTK_IS_CLASS_STATUSBAR(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_STATUSBAR))
#DEFINE GTK_STATUSBAR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_STATUSBAR, GtkStatusbarClass))
DECLARE FUNCTION gtk_statusbar_new() AS GtkWidget PTR
DECLARE FUNCTION gtk_statusbar_get_context_id(BYVAL AS GtkStatusbar PTR, BYVAL AS const gchar PTR) AS guint
DECLARE FUNCTION gtk_statusbar_get_message_area(BYVAL AS GtkStatusbar PTR) AS GtkWidget PTR
DECLARE SUB gtk_statusbar_pop(BYVAL AS GtkStatusbar PTR, BYVAL AS guint)
DECLARE FUNCTION gtk_statusbar_push(BYVAL AS GtkStatusbar PTR, BYVAL AS guint, BYVAL AS const gchar PTR) AS guint
DECLARE SUB gtk_statusbar_remove(BYVAL AS GtkStatusbar PTR, BYVAL AS guint, BYVAL AS guint)
DECLARE SUB gtk_statusbar_remove_all(BYVAL AS GtkStatusbar PTR, BYVAL AS guint)
TYPE _GtkStatusbarAccessible
  AS GtkContainerAccessible parent
  AS GtkStatusbarAccessiblePrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_statusbar_accessible_get_type() AS GType
#DEFINE GTK_TYPE_STATUSBAR_ACCESSIBLE (gtk_statusbar_accessible_get_type())
#DEFINE GTK_STATUSBAR_ACCESSIBLE(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_STATUSBAR_ACCESSIBLE, GtkStatusbarAccessible))
#DEFINE GTK_STATUSBAR_ACCESSIBLE_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_STATUSBAR_ACCESSIBLE, GtkStatusbarAccessibleClass))
#DEFINE GTK_IS_STATUSBAR_ACCESSIBLE(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_STATUSBAR_ACCESSIBLE))
#DEFINE GTK_IS_CLASS_STATUSBAR_ACCESSIBLE(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_STATUSBAR_ACCESSIBLE))
#DEFINE GTK_STATUSBAR_ACCESSIBLE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_STATUSBAR_ACCESSIBLE, GtkStatusbarAccessibleClass))
TYPE _GtkStatusbarAccessibleClass
  AS GtkContainerAccessibleClass parent_class
END TYPE
TYPE _GtkStatusbarClass
  AS GtkBoxClass parent_class
  AS gpointer reserved
  text_pushed AS SUB CDECL(BYVAL AS GtkStatusbar PTR, BYVAL AS guint, BYVAL AS const gchar PTR)
  text_popped AS SUB CDECL(BYVAL AS GtkStatusbar PTR, BYVAL AS guint, BYVAL AS const gchar PTR)
  _gtk_reserved1 AS SUB CDECL()
  _gtk_reserved2 AS SUB CDECL()
  _gtk_reserved3 AS SUB CDECL()
  _gtk_reserved4 AS SUB CDECL()
END TYPE
TYPE _GtkStockItem
  AS gchar PTR stock_id
  AS gchar PTR label
  AS GdkModifierType modifier
  AS guint keyval
  AS gchar PTR translation_domain
END TYPE
DECLARE FUNCTION gtk_stock_item_copy(BYVAL AS const GtkStockItem PTR) AS GtkStockItem PTR
DECLARE SUB gtk_stock_item_free(BYVAL AS GtkStockItem PTR)
TYPE _GtkStyle
  AS GObject parent_instance
  AS GdkColor fg(4)
  AS GdkColor bg(4)
  AS GdkColor light(4)
  AS GdkColor dark(4)
  AS GdkColor mid(4)
  AS GdkColor text(4)
  AS GdkColor base(4)
  AS GdkColor text_aa(4)
  AS GdkColor black
  AS GdkColor white
  AS PangoFontDescription PTR font_desc
  AS gint xthickness
  AS gint ythickness
  AS cairo_pattern_t PTR background(4)
  AS gint attach_count
  AS GdkVisual PTR visual
  AS PangoFontDescription PTR private_font_desc
  AS GtkRcStyle PTR rc_style
  AS GSList PTR styles
  AS GArray PTR property_cache
  AS GSList PTR icon_factories
END TYPE
DECLARE FUNCTION gtk_style_get_type() AS GType
#DEFINE GTK_TYPE_STYLE (gtk_style_get_type())
#DEFINE GTK_STYLE(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_STYLE, GtkStyle))
#DEFINE GTK_STYLE_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_STYLE, GtkStyleClass))
#DEFINE GTK_IS_STYLE(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_STYLE))
#DEFINE GTK_IS_CLASS_STYLE(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_STYLE))
#DEFINE GTK_STYLE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_STYLE, GtkStyleClass))
DECLARE FUNCTION gtk_style_new() AS GtkStyle PTR
DECLARE SUB gtk_style_apply_default_background(BYVAL AS GtkStyle PTR, BYVAL AS cairo_t PTR, BYVAL AS GdkWindow PTR, BYVAL AS GtkStateType, BYVAL AS gint, BYVAL AS gint, BYVAL AS gint, BYVAL AS gint)
DECLARE FUNCTION gtk_style_attach(BYVAL AS GtkStyle PTR, BYVAL AS GdkWindow PTR) AS GtkStyle PTR
DECLARE FUNCTION gtk_style_copy(BYVAL AS GtkStyle PTR) AS GtkStyle PTR
DECLARE SUB gtk_style_detach(BYVAL AS GtkStyle PTR)
DECLARE SUB gtk_style_get(BYVAL AS GtkStyle PTR, BYVAL AS GType, BYVAL AS const gchar PTR, ...)
DECLARE SUB gtk_style_get_style_property(BYVAL AS GtkStyle PTR, BYVAL AS GType, BYVAL AS const gchar PTR, BYVAL AS GValue PTR)
DECLARE SUB gtk_style_get_valist(BYVAL AS GtkStyle PTR, BYVAL AS GType, BYVAL AS const gchar PTR, BYVAL AS va_list)
DECLARE FUNCTION gtk_style_has_context(BYVAL AS GtkStyle PTR) AS gboolean
DECLARE FUNCTION gtk_style_lookup_color(BYVAL AS GtkStyle PTR, BYVAL AS const gchar PTR, BYVAL AS GdkColor PTR) AS gboolean
DECLARE FUNCTION gtk_style_lookup_icon_set(BYVAL AS GtkStyle PTR, BYVAL AS const gchar PTR) AS GtkIconSet PTR
DECLARE FUNCTION gtk_style_render_icon(BYVAL AS GtkStyle PTR, BYVAL AS const GtkIconSource PTR, BYVAL AS GtkTextDirection, BYVAL AS GtkStateType, BYVAL AS GtkIconSize, BYVAL AS GtkWidget PTR, BYVAL AS const gchar PTR) AS GdkPixbuf PTR
DECLARE SUB gtk_style_set_background(BYVAL AS GtkStyle PTR, BYVAL AS GdkWindow PTR, BYVAL AS GtkStateType)
TYPE _GtkStyleClass
  AS GObjectClass parent_class
  realize AS SUB CDECL(BYVAL AS GtkStyle PTR)
  unrealize AS SUB CDECL(BYVAL AS GtkStyle PTR)
  copy AS SUB CDECL(BYVAL AS GtkStyle PTR, BYVAL AS GtkStyle PTR)
  clone AS FUNCTION CDECL(BYVAL AS GtkStyle PTR) AS GtkStyle PTR
  init_from_rc AS SUB CDECL(BYVAL AS GtkStyle PTR, BYVAL AS GtkRcStyle PTR)
  set_background AS SUB CDECL(BYVAL AS GtkStyle PTR, BYVAL AS GdkWindow PTR, BYVAL AS GtkStateType)
  render_icon AS FUNCTION CDECL(BYVAL AS GtkStyle PTR, BYVAL AS const GtkIconSource PTR, BYVAL AS GtkTextDirection, BYVAL AS GtkStateType, BYVAL AS GtkIconSize, BYVAL AS GtkWidget PTR, BYVAL AS const gchar PTR) AS GdkPixbuf PTR
  draw_hline AS SUB CDECL(BYVAL AS GtkStyle PTR, BYVAL AS cairo_t PTR, BYVAL AS GtkStateType, BYVAL AS GtkWidget PTR, BYVAL AS const gchar PTR, BYVAL AS gint, BYVAL AS gint, BYVAL AS gint)
  draw_vline AS SUB CDECL(BYVAL AS GtkStyle PTR, BYVAL AS cairo_t PTR, BYVAL AS GtkStateType, BYVAL AS GtkWidget PTR, BYVAL AS const gchar PTR, BYVAL AS gint, BYVAL AS gint, BYVAL AS gint)
  draw_shadow AS SUB CDECL(BYVAL AS GtkStyle PTR, BYVAL AS cairo_t PTR, BYVAL AS GtkStateType, BYVAL AS GtkShadowType, BYVAL AS GtkWidget PTR, BYVAL AS const gchar PTR, BYVAL AS gint, BYVAL AS gint, BYVAL AS gint, BYVAL AS gint)
  draw_arrow AS SUB CDECL(BYVAL AS GtkStyle PTR, BYVAL AS cairo_t PTR, BYVAL AS GtkStateType, BYVAL AS GtkShadowType, BYVAL AS GtkWidget PTR, BYVAL AS const gchar PTR, BYVAL AS GtkArrowType, BYVAL AS gboolean, BYVAL AS gint, BYVAL AS gint, BYVAL AS gint, BYVAL AS gint)
  draw_diamond AS SUB CDECL(BYVAL AS GtkStyle PTR, BYVAL AS cairo_t PTR, BYVAL AS GtkStateType, BYVAL AS GtkShadowType, BYVAL AS GtkWidget PTR, BYVAL AS const gchar PTR, BYVAL AS gint, BYVAL AS gint, BYVAL AS gint, BYVAL AS gint)
  draw_box AS SUB CDECL(BYVAL AS GtkStyle PTR, BYVAL AS cairo_t PTR, BYVAL AS GtkStateType, BYVAL AS GtkShadowType, BYVAL AS GtkWidget PTR, BYVAL AS const gchar PTR, BYVAL AS gint, BYVAL AS gint, BYVAL AS gint, BYVAL AS gint)
  draw_flat_box AS SUB CDECL(BYVAL AS GtkStyle PTR, BYVAL AS cairo_t PTR, BYVAL AS GtkStateType, BYVAL AS GtkShadowType, BYVAL AS GtkWidget PTR, BYVAL AS const gchar PTR, BYVAL AS gint, BYVAL AS gint, BYVAL AS gint, BYVAL AS gint)
  draw_check AS SUB CDECL(BYVAL AS GtkStyle PTR, BYVAL AS cairo_t PTR, BYVAL AS GtkStateType, BYVAL AS GtkShadowType, BYVAL AS GtkWidget PTR, BYVAL AS const gchar PTR, BYVAL AS gint, BYVAL AS gint, BYVAL AS gint, BYVAL AS gint)
  draw_option AS SUB CDECL(BYVAL AS GtkStyle PTR, BYVAL AS cairo_t PTR, BYVAL AS GtkStateType, BYVAL AS GtkShadowType, BYVAL AS GtkWidget PTR, BYVAL AS const gchar PTR, BYVAL AS gint, BYVAL AS gint, BYVAL AS gint, BYVAL AS gint)
  draw_tab AS SUB CDECL(BYVAL AS GtkStyle PTR, BYVAL AS cairo_t PTR, BYVAL AS GtkStateType, BYVAL AS GtkShadowType, BYVAL AS GtkWidget PTR, BYVAL AS const gchar PTR, BYVAL AS gint, BYVAL AS gint, BYVAL AS gint, BYVAL AS gint)
  draw_shadow_gap AS SUB CDECL(BYVAL AS GtkStyle PTR, BYVAL AS cairo_t PTR, BYVAL AS GtkStateType, BYVAL AS GtkShadowType, BYVAL AS GtkWidget PTR, BYVAL AS const gchar PTR, BYVAL AS gint, BYVAL AS gint, BYVAL AS gint, BYVAL AS gint, BYVAL AS GtkPositionType, BYVAL AS gint, BYVAL AS gint)
  draw_box_gap AS SUB CDECL(BYVAL AS GtkStyle PTR, BYVAL AS cairo_t PTR, BYVAL AS GtkStateType, BYVAL AS GtkShadowType, BYVAL AS GtkWidget PTR, BYVAL AS const gchar PTR, BYVAL AS gint, BYVAL AS gint, BYVAL AS gint, BYVAL AS gint, BYVAL AS GtkPositionType, BYVAL AS gint, BYVAL AS gint)
  draw_extension AS SUB CDECL(BYVAL AS GtkStyle PTR, BYVAL AS cairo_t PTR, BYVAL AS GtkStateType, BYVAL AS GtkShadowType, BYVAL AS GtkWidget PTR, BYVAL AS const gchar PTR, BYVAL AS gint, BYVAL AS gint, BYVAL AS gint, BYVAL AS gint, BYVAL AS GtkPositionType)
  draw_focus AS SUB CDECL(BYVAL AS GtkStyle PTR, BYVAL AS cairo_t PTR, BYVAL AS GtkStateType, BYVAL AS GtkWidget PTR, BYVAL AS const gchar PTR, BYVAL AS gint, BYVAL AS gint, BYVAL AS gint, BYVAL AS gint)
  draw_slider AS SUB CDECL(BYVAL AS GtkStyle PTR, BYVAL AS cairo_t PTR, BYVAL AS GtkStateType, BYVAL AS GtkShadowType, BYVAL AS GtkWidget PTR, BYVAL AS const gchar PTR, BYVAL AS gint, BYVAL AS gint, BYVAL AS gint, BYVAL AS gint, BYVAL AS GtkOrientation)
  draw_handle AS SUB CDECL(BYVAL AS GtkStyle PTR, BYVAL AS cairo_t PTR, BYVAL AS GtkStateType, BYVAL AS GtkShadowType, BYVAL AS GtkWidget PTR, BYVAL AS const gchar PTR, BYVAL AS gint, BYVAL AS gint, BYVAL AS gint, BYVAL AS gint, BYVAL AS GtkOrientation)
  draw_expander AS SUB CDECL(BYVAL AS GtkStyle PTR, BYVAL AS cairo_t PTR, BYVAL AS GtkStateType, BYVAL AS GtkWidget PTR, BYVAL AS const gchar PTR, BYVAL AS gint, BYVAL AS gint, BYVAL AS GtkExpanderStyle)
  draw_layout AS SUB CDECL(BYVAL AS GtkStyle PTR, BYVAL AS cairo_t PTR, BYVAL AS GtkStateType, BYVAL AS gboolean, BYVAL AS GtkWidget PTR, BYVAL AS const gchar PTR, BYVAL AS gint, BYVAL AS gint, BYVAL AS PangoLayout PTR)
  draw_resize_grip AS SUB CDECL(BYVAL AS GtkStyle PTR, BYVAL AS cairo_t PTR, BYVAL AS GtkStateType, BYVAL AS GtkWidget PTR, BYVAL AS const gchar PTR, BYVAL AS GdkWindowEdge, BYVAL AS gint, BYVAL AS gint, BYVAL AS gint, BYVAL AS gint)
  draw_spinner AS SUB CDECL(BYVAL AS GtkStyle PTR, BYVAL AS cairo_t PTR, BYVAL AS GtkStateType, BYVAL AS GtkWidget PTR, BYVAL AS const gchar PTR, BYVAL AS guint, BYVAL AS gint, BYVAL AS gint, BYVAL AS gint, BYVAL AS gint)
  _gtk_reserved1 AS SUB CDECL()
  _gtk_reserved2 AS SUB CDECL()
  _gtk_reserved3 AS SUB CDECL()
  _gtk_reserved4 AS SUB CDECL()
  _gtk_reserved5 AS SUB CDECL()
  _gtk_reserved6 AS SUB CDECL()
  _gtk_reserved7 AS SUB CDECL()
  _gtk_reserved8 AS SUB CDECL()
  _gtk_reserved9 AS SUB CDECL()
  _gtk_reserved10 AS SUB CDECL()
  _gtk_reserved11 AS SUB CDECL()
END TYPE
TYPE _GtkStyleContext
  AS GObject parent_object
  AS GtkStyleContextPrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_style_context_get_type() AS GType
#DEFINE GTK_TYPE_STYLE_CONTEXT (gtk_style_context_get_type())
#DEFINE GTK_STYLE_CONTEXT(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_STYLE_CONTEXT, GtkStyleContext))
#DEFINE GTK_STYLE_CONTEXT_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_STYLE_CONTEXT, GtkStyleContextClass))
#DEFINE GTK_IS_STYLE_CONTEXT(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_STYLE_CONTEXT))
#DEFINE GTK_IS_CLASS_STYLE_CONTEXT(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_STYLE_CONTEXT))
#DEFINE GTK_STYLE_CONTEXT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_STYLE_CONTEXT, GtkStyleContextClass))
DECLARE FUNCTION gtk_style_context_new() AS GtkStyleContext PTR
DECLARE SUB gtk_style_context_add_provider_for_screen(BYVAL AS GdkScreen PTR, BYVAL AS GtkStyleProvider PTR, BYVAL AS guint)
DECLARE SUB gtk_style_context_remove_provider_for_screen(BYVAL AS GdkScreen PTR, BYVAL AS GtkStyleProvider PTR)
DECLARE SUB gtk_style_context_reset_widgets(BYVAL AS GdkScreen PTR)
DECLARE SUB gtk_style_context_add_class(BYVAL AS GtkStyleContext PTR, BYVAL AS const gchar PTR)
DECLARE SUB gtk_style_context_add_provider(BYVAL AS GtkStyleContext PTR, BYVAL AS GtkStyleProvider PTR, BYVAL AS guint)
DECLARE SUB gtk_style_context_add_region(BYVAL AS GtkStyleContext PTR, BYVAL AS const gchar PTR, BYVAL AS GtkRegionFlags)
DECLARE SUB gtk_style_context_cancel_animations(BYVAL AS GtkStyleContext PTR, BYVAL AS gpointer)
DECLARE SUB gtk_style_context_get(BYVAL AS GtkStyleContext PTR, BYVAL AS GtkStateFlags, ...)
DECLARE SUB gtk_style_context_get_background_color(BYVAL AS GtkStyleContext PTR, BYVAL AS GtkStateFlags, BYVAL AS GdkRGBA PTR)
DECLARE SUB gtk_style_context_get_border(BYVAL AS GtkStyleContext PTR, BYVAL AS GtkStateFlags, BYVAL AS GtkBorder PTR)
DECLARE SUB gtk_style_context_get_border_color(BYVAL AS GtkStyleContext PTR, BYVAL AS GtkStateFlags, BYVAL AS GdkRGBA PTR)
DECLARE SUB gtk_style_context_get_color(BYVAL AS GtkStyleContext PTR, BYVAL AS GtkStateFlags, BYVAL AS GdkRGBA PTR)
DECLARE FUNCTION gtk_style_context_get_direction(BYVAL AS GtkStyleContext PTR) AS GtkTextDirection
DECLARE FUNCTION gtk_style_context_get_font(BYVAL AS GtkStyleContext PTR, BYVAL AS GtkStateFlags) AS const PangoFontDescription PTR
DECLARE FUNCTION gtk_style_context_get_frame_clock(BYVAL AS GtkStyleContext PTR) AS GdkFrameClock PTR
DECLARE FUNCTION gtk_style_context_get_junction_sides(BYVAL AS GtkStyleContext PTR) AS GtkJunctionSides
DECLARE SUB gtk_style_context_get_margin(BYVAL AS GtkStyleContext PTR, BYVAL AS GtkStateFlags, BYVAL AS GtkBorder PTR)
DECLARE SUB gtk_style_context_get_padding(BYVAL AS GtkStyleContext PTR, BYVAL AS GtkStateFlags, BYVAL AS GtkBorder PTR)
DECLARE FUNCTION gtk_style_context_get_parent(BYVAL AS GtkStyleContext PTR) AS GtkStyleContext PTR
DECLARE FUNCTION gtk_style_context_get_path(BYVAL AS GtkStyleContext PTR) AS const GtkWidgetPath PTR
DECLARE SUB gtk_style_context_get_property(BYVAL AS GtkStyleContext PTR, BYVAL AS const gchar PTR, BYVAL AS GtkStateFlags, BYVAL AS GValue PTR)
DECLARE FUNCTION gtk_style_context_get_scale(BYVAL AS GtkStyleContext PTR) AS gint
DECLARE FUNCTION gtk_style_context_get_screen(BYVAL AS GtkStyleContext PTR) AS GdkScreen PTR
DECLARE FUNCTION gtk_style_context_get_section(BYVAL AS GtkStyleContext PTR, BYVAL AS const gchar PTR) AS GtkCssSection PTR
DECLARE FUNCTION gtk_style_context_get_state(BYVAL AS GtkStyleContext PTR) AS GtkStateFlags
DECLARE SUB gtk_style_context_get_style(BYVAL AS GtkStyleContext PTR, ...)
DECLARE SUB gtk_style_context_get_style_property(BYVAL AS GtkStyleContext PTR, BYVAL AS const gchar PTR, BYVAL AS GValue PTR)
DECLARE SUB gtk_style_context_get_style_valist(BYVAL AS GtkStyleContext PTR, BYVAL AS va_list)
DECLARE SUB gtk_style_context_get_valist(BYVAL AS GtkStyleContext PTR, BYVAL AS GtkStateFlags, BYVAL AS va_list)
DECLARE FUNCTION gtk_style_context_has_class(BYVAL AS GtkStyleContext PTR, BYVAL AS const gchar PTR) AS gboolean
DECLARE FUNCTION gtk_style_context_has_region(BYVAL AS GtkStyleContext PTR, BYVAL AS const gchar PTR, BYVAL AS GtkRegionFlags PTR) AS gboolean
DECLARE SUB gtk_style_context_invalidate(BYVAL AS GtkStyleContext PTR)
DECLARE FUNCTION gtk_style_context_list_classes(BYVAL AS GtkStyleContext PTR) AS GList PTR
DECLARE FUNCTION gtk_style_context_list_regions(BYVAL AS GtkStyleContext PTR) AS GList PTR
DECLARE FUNCTION gtk_style_context_lookup_color(BYVAL AS GtkStyleContext PTR, BYVAL AS const gchar PTR, BYVAL AS GdkRGBA PTR) AS gboolean
DECLARE FUNCTION gtk_style_context_lookup_icon_set(BYVAL AS GtkStyleContext PTR, BYVAL AS const gchar PTR) AS GtkIconSet PTR
DECLARE SUB gtk_style_context_notify_state_change(BYVAL AS GtkStyleContext PTR, BYVAL AS GdkWindow PTR, BYVAL AS gpointer, BYVAL AS GtkStateType, BYVAL AS gboolean)
DECLARE SUB gtk_style_context_pop_animatable_region(BYVAL AS GtkStyleContext PTR)
DECLARE SUB gtk_style_context_push_animatable_region(BYVAL AS GtkStyleContext PTR, BYVAL AS gpointer)
DECLARE SUB gtk_style_context_remove_class(BYVAL AS GtkStyleContext PTR, BYVAL AS const gchar PTR)
DECLARE SUB gtk_style_context_remove_provider(BYVAL AS GtkStyleContext PTR, BYVAL AS GtkStyleProvider PTR)
DECLARE SUB gtk_style_context_remove_region(BYVAL AS GtkStyleContext PTR, BYVAL AS const gchar PTR)
DECLARE SUB gtk_style_context_restore(BYVAL AS GtkStyleContext PTR)
DECLARE SUB gtk_style_context_save(BYVAL AS GtkStyleContext PTR)
DECLARE SUB gtk_style_context_scroll_animations(BYVAL AS GtkStyleContext PTR, BYVAL AS GdkWindow PTR, BYVAL AS gint, BYVAL AS gint)
DECLARE SUB gtk_style_context_set_background(BYVAL AS GtkStyleContext PTR, BYVAL AS GdkWindow PTR)
DECLARE SUB gtk_style_context_set_direction(BYVAL AS GtkStyleContext PTR, BYVAL AS GtkTextDirection)
DECLARE SUB gtk_style_context_set_frame_clock(BYVAL AS GtkStyleContext PTR, BYVAL AS GdkFrameClock PTR)
DECLARE SUB gtk_style_context_set_junction_sides(BYVAL AS GtkStyleContext PTR, BYVAL AS GtkJunctionSides)
DECLARE SUB gtk_style_context_set_parent(BYVAL AS GtkStyleContext PTR, BYVAL AS GtkStyleContext PTR)
DECLARE SUB gtk_style_context_set_path(BYVAL AS GtkStyleContext PTR, BYVAL AS GtkWidgetPath PTR)
DECLARE SUB gtk_style_context_set_scale(BYVAL AS GtkStyleContext PTR, BYVAL AS gint)
DECLARE SUB gtk_style_context_set_screen(BYVAL AS GtkStyleContext PTR, BYVAL AS GdkScreen PTR)
DECLARE SUB gtk_style_context_set_state(BYVAL AS GtkStyleContext PTR, BYVAL AS GtkStateFlags)
DECLARE FUNCTION gtk_style_context_state_is_running(BYVAL AS GtkStyleContext PTR, BYVAL AS GtkStateType, BYVAL AS gdouble PTR) AS gboolean
DECLARE FUNCTION gtk_style_context_to_string(BYVAL AS GtkStyleContext PTR, BYVAL AS GtkStyleContextPrintFlags) AS char PTR
TYPE _GtkStyleContextClass
  AS GObjectClass parent_class
  changed AS SUB CDECL(BYVAL AS GtkStyleContext PTR)
  _gtk_reserved1 AS SUB CDECL()
  _gtk_reserved2 AS SUB CDECL()
  _gtk_reserved3 AS SUB CDECL()
  _gtk_reserved4 AS SUB CDECL()
END TYPE
TYPE _GtkStyleProperties
  AS GObject parent_object
  AS GtkStylePropertiesPrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_style_properties_get_type() AS GType
#DEFINE GTK_TYPE_STYLE_PROPERTIES (gtk_style_properties_get_type())
#DEFINE GTK_STYLE_PROPERTIES(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_STYLE_PROPERTIES, GtkStyleProperties))
#DEFINE GTK_STYLE_PROPERTIES_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_STYLE_PROPERTIES, GtkStylePropertiesClass))
#DEFINE GTK_IS_STYLE_PROPERTIES(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_STYLE_PROPERTIES))
#DEFINE GTK_IS_CLASS_STYLE_PROPERTIES(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_STYLE_PROPERTIES))
#DEFINE GTK_STYLE_PROPERTIES_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_STYLE_PROPERTIES, GtkStylePropertiesClass))
DECLARE FUNCTION gtk_style_properties_new() AS GtkStyleProperties PTR
DECLARE FUNCTION gtk_style_properties_lookup_property(BYVAL AS const gchar PTR, BYVAL AS GtkStylePropertyParser PTR, BYVAL AS GParamSpec PTR PTR) AS gboolean
DECLARE SUB gtk_style_properties_register_property(BYVAL AS GtkStylePropertyParser, BYVAL AS GParamSpec PTR)
DECLARE SUB gtk_style_properties_clear(BYVAL AS GtkStyleProperties PTR)
DECLARE SUB gtk_style_properties_get(BYVAL AS GtkStyleProperties PTR, BYVAL AS GtkStateFlags, ...)
DECLARE FUNCTION gtk_style_properties_get_property(BYVAL AS GtkStyleProperties PTR, BYVAL AS const gchar PTR, BYVAL AS GtkStateFlags, BYVAL AS GValue PTR) AS gboolean
DECLARE SUB gtk_style_properties_get_valist(BYVAL AS GtkStyleProperties PTR, BYVAL AS GtkStateFlags, BYVAL AS va_list)
DECLARE FUNCTION gtk_style_properties_lookup_color(BYVAL AS GtkStyleProperties PTR, BYVAL AS const gchar PTR) AS GtkSymbolicColor PTR
DECLARE SUB gtk_style_properties_map_color(BYVAL AS GtkStyleProperties PTR, BYVAL AS const gchar PTR, BYVAL AS GtkSymbolicColor PTR)
DECLARE SUB gtk_style_properties_merge(BYVAL AS GtkStyleProperties PTR, BYVAL AS const GtkStyleProperties PTR, BYVAL AS gboolean)
DECLARE SUB gtk_style_properties_set(BYVAL AS GtkStyleProperties PTR, BYVAL AS GtkStateFlags, ...)
DECLARE SUB gtk_style_properties_set_property(BYVAL AS GtkStyleProperties PTR, BYVAL AS const gchar PTR, BYVAL AS GtkStateFlags, BYVAL AS const GValue PTR)
DECLARE SUB gtk_style_properties_set_valist(BYVAL AS GtkStyleProperties PTR, BYVAL AS GtkStateFlags, BYVAL AS va_list)
DECLARE SUB gtk_style_properties_unset_property(BYVAL AS GtkStyleProperties PTR, BYVAL AS const gchar PTR, BYVAL AS GtkStateFlags)
TYPE _GtkStylePropertiesClass
  AS GObjectClass parent_class
  _gtk_reserved1 AS SUB CDECL()
  _gtk_reserved2 AS SUB CDECL()
  _gtk_reserved3 AS SUB CDECL()
  _gtk_reserved4 AS SUB CDECL()
END TYPE
DECLARE FUNCTION gtk_style_provider_get_type() AS GType
#DEFINE GTK_TYPE_STYLE_PROVIDER (gtk_style_provider_get_type())
#DEFINE GTK_STYLE_PROVIDER(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_STYLE_PROVIDER, GtkStyleProvider))
#DEFINE GTK_STYLE_PROVIDER_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_STYLE_PROVIDER, GtkStyleProviderIface))
#DEFINE GTK_IS_STYLE_PROVIDER(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_STYLE_PROVIDER))
#DEFINE GTK_STYLE_PROVIDER_GET_IFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE((obj), GTK_TYPE_STYLE_PROVIDER, GtkStyleProviderIface))
DECLARE FUNCTION gtk_style_provider_get_icon_factory(BYVAL AS GtkStyleProvider PTR, BYVAL AS GtkWidgetPath PTR) AS GtkIconFactory PTR
DECLARE FUNCTION gtk_style_provider_get_style(BYVAL AS GtkStyleProvider PTR, BYVAL AS GtkWidgetPath PTR) AS GtkStyleProperties PTR
DECLARE FUNCTION gtk_style_provider_get_style_property(BYVAL AS GtkStyleProvider PTR, BYVAL AS GtkWidgetPath PTR, BYVAL AS GtkStateFlags, BYVAL AS GParamSpec PTR, BYVAL AS GValue PTR) AS gboolean
TYPE _GtkStyleProviderIface
  AS GTypeInterface g_iface
  get_style AS FUNCTION CDECL(BYVAL AS GtkStyleProvider PTR, BYVAL AS GtkWidgetPath PTR) AS GtkStyleProperties PTR
  get_style_property AS FUNCTION CDECL(BYVAL AS GtkStyleProvider PTR, BYVAL AS GtkWidgetPath PTR, BYVAL AS GtkStateFlags, BYVAL AS GParamSpec PTR, BYVAL AS GValue PTR) AS gboolean
  get_icon_factory AS FUNCTION CDECL(BYVAL AS GtkStyleProvider PTR, BYVAL AS GtkWidgetPath PTR) AS GtkIconFactory PTR
END TYPE
TYPE _GtkSwitch
  AS GtkWidget parent_instance
  AS GtkSwitchPrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_switch_get_type() AS GType
#DEFINE GTK_TYPE_SWITCH (gtk_switch_get_type())
#DEFINE GTK_SWITCH(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_SWITCH, GtkSwitch))
#DEFINE GTK_SWITCH_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_SWITCH, GtkSwitchClass))
#DEFINE GTK_IS_SWITCH(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_SWITCH))
#DEFINE GTK_IS_CLASS_SWITCH(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_SWITCH))
#DEFINE GTK_SWITCH_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_SWITCH, GtkSwitchClass))
DECLARE FUNCTION gtk_switch_new() AS GtkWidget PTR
DECLARE FUNCTION gtk_switch_get_active(BYVAL AS GtkSwitch PTR) AS gboolean
DECLARE FUNCTION gtk_switch_get_state(BYVAL AS GtkSwitch PTR) AS gboolean
DECLARE SUB gtk_switch_set_active(BYVAL AS GtkSwitch PTR, BYVAL AS gboolean)
DECLARE SUB gtk_switch_set_state(BYVAL AS GtkSwitch PTR, BYVAL AS gboolean)
TYPE _GtkSwitchAccessible
  AS GtkWidgetAccessible parent
  AS GtkSwitchAccessiblePrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_switch_accessible_get_type() AS GType
#DEFINE GTK_TYPE_SWITCH_ACCESSIBLE (gtk_switch_accessible_get_type())
#DEFINE GTK_SWITCH_ACCESSIBLE(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_SWITCH_ACCESSIBLE, GtkSwitchAccessible))
#DEFINE GTK_SWITCH_ACCESSIBLE_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_SWITCH_ACCESSIBLE, GtkSwitchAccessibleClass))
#DEFINE GTK_IS_SWITCH_ACCESSIBLE(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_SWITCH_ACCESSIBLE))
#DEFINE GTK_IS_CLASS_SWITCH_ACCESSIBLE(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_SWITCH_ACCESSIBLE))
#DEFINE GTK_SWITCH_ACCESSIBLE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_SWITCH_ACCESSIBLE, GtkSwitchAccessibleClass))
TYPE _GtkSwitchAccessibleClass
  AS GtkWidgetAccessibleClass parent_class
END TYPE
TYPE _GtkSwitchClass
  AS GtkWidgetClass parent_class
  activate AS SUB CDECL(BYVAL AS GtkSwitch PTR)
  state_set AS FUNCTION CDECL(BYVAL AS GtkSwitch PTR, BYVAL AS gboolean) AS gboolean
  _switch_padding_1 AS SUB CDECL()
  _switch_padding_2 AS SUB CDECL()
  _switch_padding_3 AS SUB CDECL()
  _switch_padding_4 AS SUB CDECL()
  _switch_padding_5 AS SUB CDECL()
END TYPE
DECLARE FUNCTION gtk_symbolic_color_new_alpha(BYVAL AS GtkSymbolicColor PTR, BYVAL AS gdouble) AS GtkSymbolicColor PTR
DECLARE FUNCTION gtk_symbolic_color_new_literal(BYVAL AS const GdkRGBA PTR) AS GtkSymbolicColor PTR
DECLARE FUNCTION gtk_symbolic_color_new_mix(BYVAL AS GtkSymbolicColor PTR, BYVAL AS GtkSymbolicColor PTR, BYVAL AS gdouble) AS GtkSymbolicColor PTR
DECLARE FUNCTION gtk_symbolic_color_new_name(BYVAL AS const gchar PTR) AS GtkSymbolicColor PTR
DECLARE FUNCTION gtk_symbolic_color_new_shade(BYVAL AS GtkSymbolicColor PTR, BYVAL AS gdouble) AS GtkSymbolicColor PTR
DECLARE FUNCTION gtk_symbolic_color_new_win32(BYVAL AS const gchar PTR, BYVAL AS gint) AS GtkSymbolicColor PTR
DECLARE FUNCTION gtk_symbolic_color_ref(BYVAL AS GtkSymbolicColor PTR) AS GtkSymbolicColor PTR
DECLARE FUNCTION gtk_symbolic_color_resolve(BYVAL AS GtkSymbolicColor PTR, BYVAL AS GtkStyleProperties PTR, BYVAL AS GdkRGBA PTR) AS gboolean
DECLARE FUNCTION gtk_symbolic_color_to_string(BYVAL AS GtkSymbolicColor PTR) AS char PTR
DECLARE SUB gtk_symbolic_color_unref(BYVAL AS GtkSymbolicColor PTR)
TYPE _GtkTable
  AS GtkContainer container
  AS GtkTablePrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_table_get_type() AS GType
#DEFINE GTK_TYPE_TABLE (gtk_table_get_type())
#DEFINE GTK_TABLE(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_TABLE, GtkTable))
#DEFINE GTK_TABLE_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_TABLE, GtkTableClass))
#DEFINE GTK_IS_TABLE(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_TABLE))
#DEFINE GTK_IS_CLASS_TABLE(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_TABLE))
#DEFINE GTK_TABLE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_TABLE, GtkTableClass))
DECLARE FUNCTION gtk_table_new(BYVAL AS guint, BYVAL AS guint, BYVAL AS gboolean) AS GtkWidget PTR
DECLARE SUB gtk_table_attach(BYVAL AS GtkTable PTR, BYVAL AS GtkWidget PTR, BYVAL AS guint, BYVAL AS guint, BYVAL AS guint, BYVAL AS guint, BYVAL AS GtkAttachOptions, BYVAL AS GtkAttachOptions, BYVAL AS guint, BYVAL AS guint)
DECLARE SUB gtk_table_attach_defaults(BYVAL AS GtkTable PTR, BYVAL AS GtkWidget PTR, BYVAL AS guint, BYVAL AS guint, BYVAL AS guint, BYVAL AS guint)
DECLARE FUNCTION gtk_table_get_col_spacing(BYVAL AS GtkTable PTR, BYVAL AS guint) AS guint
DECLARE FUNCTION gtk_table_get_default_col_spacing(BYVAL AS GtkTable PTR) AS guint
DECLARE FUNCTION gtk_table_get_default_row_spacing(BYVAL AS GtkTable PTR) AS guint
DECLARE FUNCTION gtk_table_get_homogeneous(BYVAL AS GtkTable PTR) AS gboolean
DECLARE FUNCTION gtk_table_get_row_spacing(BYVAL AS GtkTable PTR, BYVAL AS guint) AS guint
DECLARE SUB gtk_table_get_size(BYVAL AS GtkTable PTR, BYVAL AS guint PTR, BYVAL AS guint PTR)
DECLARE SUB gtk_table_resize(BYVAL AS GtkTable PTR, BYVAL AS guint, BYVAL AS guint)
DECLARE SUB gtk_table_set_col_spacing(BYVAL AS GtkTable PTR, BYVAL AS guint, BYVAL AS guint)
DECLARE SUB gtk_table_set_col_spacings(BYVAL AS GtkTable PTR, BYVAL AS guint)
DECLARE SUB gtk_table_set_homogeneous(BYVAL AS GtkTable PTR, BYVAL AS gboolean)
DECLARE SUB gtk_table_set_row_spacing(BYVAL AS GtkTable PTR, BYVAL AS guint, BYVAL AS guint)
DECLARE SUB gtk_table_set_row_spacings(BYVAL AS GtkTable PTR, BYVAL AS guint)
TYPE _GtkTableChild
  AS GtkWidget PTR widget
  AS guint16 left_attach
  AS guint16 right_attach
  AS guint16 top_attach
  AS guint16 bottom_attach
  AS guint16 xpadding
  AS guint16 ypadding
  AS guint xexpand : 1
  AS guint yexpand : 1
  AS guint xshrink : 1
  AS guint yshrink : 1
  AS guint xfill : 1
  AS guint yfill : 1
END TYPE
TYPE _GtkTableClass
  AS GtkContainerClass parent_class
  _gtk_reserved1 AS SUB CDECL()
  _gtk_reserved2 AS SUB CDECL()
  _gtk_reserved3 AS SUB CDECL()
  _gtk_reserved4 AS SUB CDECL()
END TYPE
TYPE _GtkTableRowCol
  AS guint16 requisition
  AS guint16 allocation
  AS guint16 spacing
  AS guint need_expand : 1
  AS guint need_shrink : 1
  AS guint expand : 1
  AS guint shrink : 1
  AS guint empty : 1
END TYPE
TYPE _GtkTargetEntry
  AS gchar PTR target
  AS guint flags
  AS guint info
END TYPE
DECLARE FUNCTION gtk_target_entry_new(BYVAL AS const gchar PTR, BYVAL AS guint, BYVAL AS guint) AS GtkTargetEntry PTR
DECLARE FUNCTION gtk_target_entry_copy(BYVAL AS GtkTargetEntry PTR) AS GtkTargetEntry PTR
DECLARE SUB gtk_target_entry_free(BYVAL AS GtkTargetEntry PTR)
DECLARE FUNCTION gtk_target_list_new(BYVAL AS const GtkTargetEntry PTR, BYVAL AS guint) AS GtkTargetList PTR
DECLARE SUB gtk_target_list_add(BYVAL AS GtkTargetList PTR, BYVAL AS any ptr /'GdkAtom'/, BYVAL AS guint, BYVAL AS guint)
DECLARE SUB gtk_target_list_add_image_targets(BYVAL AS GtkTargetList PTR, BYVAL AS guint, BYVAL AS gboolean)
DECLARE SUB gtk_target_list_add_rich_text_targets(BYVAL AS GtkTargetList PTR, BYVAL AS guint, BYVAL AS gboolean, BYVAL AS GtkTextBuffer PTR)
DECLARE SUB gtk_target_list_add_table(BYVAL AS GtkTargetList PTR, BYVAL AS const GtkTargetEntry PTR, BYVAL AS guint)
DECLARE SUB gtk_target_list_add_text_targets(BYVAL AS GtkTargetList PTR, BYVAL AS guint)
DECLARE SUB gtk_target_list_add_uri_targets(BYVAL AS GtkTargetList PTR, BYVAL AS guint)
DECLARE FUNCTION gtk_target_list_find(BYVAL AS GtkTargetList PTR, BYVAL AS any ptr /'GdkAtom'/, BYVAL AS guint PTR) AS gboolean
DECLARE FUNCTION gtk_target_list_ref(BYVAL AS GtkTargetList PTR) AS GtkTargetList PTR
DECLARE SUB gtk_target_list_remove(BYVAL AS GtkTargetList PTR, BYVAL AS any ptr /'GdkAtom'/)
DECLARE SUB gtk_target_list_unref(BYVAL AS GtkTargetList PTR)
TYPE _GtkTargetPair
  AS any ptr /'GdkAtom'/ target
  AS guint flags
  AS guint info
END TYPE
TYPE _GtkTearoffMenuItem
  AS GtkMenuItem menu_item
  AS GtkTearoffMenuItemPrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_tearoff_menu_item_get_type() AS GType
#DEFINE GTK_TYPE_TEAROFF_MENU_ITEM (gtk_tearoff_menu_item_get_type())
#DEFINE GTK_TEAROFF_MENU_ITEM(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_TEAROFF_MENU_ITEM, GtkTearoffMenuItem))
#DEFINE GTK_TEAROFF_MENU_ITEM_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_TEAROFF_MENU_ITEM, GtkTearoffMenuItemClass))
#DEFINE GTK_IS_TEAROFF_MENU_ITEM(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_TEAROFF_MENU_ITEM))
#DEFINE GTK_IS_CLASS_TEAROFF_MENU_ITEM(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_TEAROFF_MENU_ITEM))
#DEFINE GTK_TEAROFF_MENU_ITEM_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_TEAROFF_MENU_ITEM, GtkTearoffMenuItemClass))
DECLARE FUNCTION gtk_tearoff_menu_item_new() AS GtkWidget PTR
TYPE _GtkTearoffMenuItemClass
  AS GtkMenuItemClass parent_class
  _gtk_reserved1 AS SUB CDECL()
  _gtk_reserved2 AS SUB CDECL()
  _gtk_reserved3 AS SUB CDECL()
  _gtk_reserved4 AS SUB CDECL()
END TYPE
TYPE _GtkTextAppearance
  AS GdkColor bg_color
  AS GdkColor fg_color
  AS gint rise
  AS guint underline : 4
  AS guint strikethrough : 1
  AS guint draw_bg : 1
  AS guint inside_selection : 1
  AS guint is_text : 1
END TYPE
TYPE _GtkTextAttributes
  AS guint refcount
  AS GtkTextAppearance appearance
  AS GtkJustification justification
  AS GtkTextDirection direction
  AS PangoFontDescription PTR font
  AS gdouble font_scale
  AS gint left_margin
  AS gint right_margin
  AS gint indent
  AS gint pixels_above_lines
  AS gint pixels_below_lines
  AS gint pixels_inside_wrap
  AS PangoTabArray PTR tabs
  AS GtkWrapMode wrap_mode
  AS PangoLanguage PTR language
  AS GdkColor PTR pg_bg_color
  AS guint invisible : 1
  AS guint bg_full_height : 1
  AS guint editable : 1
  AS guint no_fallback : 1
  AS GdkRGBA PTR pg_bg_rgba
  AS gint letter_spacing
END TYPE
DECLARE FUNCTION gtk_text_attributes_new() AS GtkTextAttributes PTR
DECLARE FUNCTION gtk_text_attributes_copy(BYVAL AS GtkTextAttributes PTR) AS GtkTextAttributes PTR
DECLARE SUB gtk_text_attributes_copy_values(BYVAL AS GtkTextAttributes PTR, BYVAL AS GtkTextAttributes PTR)
DECLARE FUNCTION gtk_text_attributes_ref(BYVAL AS GtkTextAttributes PTR) AS GtkTextAttributes PTR
DECLARE SUB gtk_text_attributes_unref(BYVAL AS GtkTextAttributes PTR)
TYPE _GtkTextBuffer
  AS GObject parent_instance
  AS GtkTextBufferPrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_text_buffer_get_type() AS GType
#DEFINE GTK_TYPE_TEXT_BUFFER (gtk_text_buffer_get_type())
#DEFINE GTK_TEXT_BUFFER(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_TEXT_BUFFER, GtkTextBuffer))
#DEFINE GTK_TEXT_BUFFER_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_TEXT_BUFFER, GtkTextBufferClass))
#DEFINE GTK_IS_TEXT_BUFFER(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_TEXT_BUFFER))
#DEFINE GTK_IS_CLASS_TEXT_BUFFER(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_TEXT_BUFFER))
#DEFINE GTK_TEXT_BUFFER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_TEXT_BUFFER, GtkTextBufferClass))
DECLARE FUNCTION gtk_text_buffer_new(BYVAL AS GtkTextTagTable PTR) AS GtkTextBuffer PTR
DECLARE SUB gtk_text_buffer_add_mark(BYVAL AS GtkTextBuffer PTR, BYVAL AS GtkTextMark PTR, BYVAL AS const GtkTextIter PTR)
DECLARE SUB gtk_text_buffer_add_selection_clipboard(BYVAL AS GtkTextBuffer PTR, BYVAL AS GtkClipboard PTR)
DECLARE SUB gtk_text_buffer_apply_tag(BYVAL AS GtkTextBuffer PTR, BYVAL AS GtkTextTag PTR, BYVAL AS const GtkTextIter PTR, BYVAL AS const GtkTextIter PTR)
DECLARE SUB gtk_text_buffer_apply_tag_by_name(BYVAL AS GtkTextBuffer PTR, BYVAL AS const gchar PTR, BYVAL AS const GtkTextIter PTR, BYVAL AS const GtkTextIter PTR)
DECLARE FUNCTION gtk_text_buffer_backspace(BYVAL AS GtkTextBuffer PTR, BYVAL AS GtkTextIter PTR, BYVAL AS gboolean, BYVAL AS gboolean) AS gboolean
DECLARE SUB gtk_text_buffer_begin_user_action(BYVAL AS GtkTextBuffer PTR)
DECLARE SUB gtk_text_buffer_copy_clipboard(BYVAL AS GtkTextBuffer PTR, BYVAL AS GtkClipboard PTR)
DECLARE FUNCTION gtk_text_buffer_create_child_anchor(BYVAL AS GtkTextBuffer PTR, BYVAL AS GtkTextIter PTR) AS GtkTextChildAnchor PTR
DECLARE FUNCTION gtk_text_buffer_create_mark(BYVAL AS GtkTextBuffer PTR, BYVAL AS const gchar PTR, BYVAL AS const GtkTextIter PTR, BYVAL AS gboolean) AS GtkTextMark PTR
DECLARE FUNCTION gtk_text_buffer_create_tag(BYVAL AS GtkTextBuffer PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, ...) AS GtkTextTag PTR
DECLARE SUB gtk_text_buffer_cut_clipboard(BYVAL AS GtkTextBuffer PTR, BYVAL AS GtkClipboard PTR, BYVAL AS gboolean)
DECLARE SUB gtk_text_buffer_delete(BYVAL AS GtkTextBuffer PTR, BYVAL AS GtkTextIter PTR, BYVAL AS GtkTextIter PTR)
DECLARE FUNCTION gtk_text_buffer_delete_interactive(BYVAL AS GtkTextBuffer PTR, BYVAL AS GtkTextIter PTR, BYVAL AS GtkTextIter PTR, BYVAL AS gboolean) AS gboolean
DECLARE SUB gtk_text_buffer_delete_mark(BYVAL AS GtkTextBuffer PTR, BYVAL AS GtkTextMark PTR)
DECLARE SUB gtk_text_buffer_delete_mark_by_name(BYVAL AS GtkTextBuffer PTR, BYVAL AS const gchar PTR)
DECLARE FUNCTION gtk_text_buffer_delete_selection(BYVAL AS GtkTextBuffer PTR, BYVAL AS gboolean, BYVAL AS gboolean) AS gboolean
DECLARE FUNCTION gtk_text_buffer_deserialize(BYVAL AS GtkTextBuffer PTR, BYVAL AS GtkTextBuffer PTR, BYVAL AS any ptr /'GdkAtom'/, BYVAL AS GtkTextIter PTR, BYVAL AS const guint8 PTR, BYVAL AS gsize, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION gtk_text_buffer_deserialize_get_can_create_tags(BYVAL AS GtkTextBuffer PTR, BYVAL AS any ptr /'GdkAtom'/) AS gboolean
DECLARE SUB gtk_text_buffer_deserialize_set_can_create_tags(BYVAL AS GtkTextBuffer PTR, BYVAL AS any ptr /'GdkAtom'/, BYVAL AS gboolean)
DECLARE SUB gtk_text_buffer_end_user_action(BYVAL AS GtkTextBuffer PTR)
DECLARE SUB gtk_text_buffer_get_bounds(BYVAL AS GtkTextBuffer PTR, BYVAL AS GtkTextIter PTR, BYVAL AS GtkTextIter PTR)
DECLARE FUNCTION gtk_text_buffer_get_char_count(BYVAL AS GtkTextBuffer PTR) AS gint
DECLARE FUNCTION gtk_text_buffer_get_copy_target_list(BYVAL AS GtkTextBuffer PTR) AS GtkTargetList PTR
DECLARE FUNCTION gtk_text_buffer_get_deserialize_formats(BYVAL AS GtkTextBuffer PTR, BYVAL AS gint PTR) AS any ptr /'GdkAtom'/ PTR
DECLARE SUB gtk_text_buffer_get_end_iter(BYVAL AS GtkTextBuffer PTR, BYVAL AS GtkTextIter PTR)
DECLARE FUNCTION gtk_text_buffer_get_has_selection(BYVAL AS GtkTextBuffer PTR) AS gboolean
DECLARE FUNCTION gtk_text_buffer_get_insert(BYVAL AS GtkTextBuffer PTR) AS GtkTextMark PTR
DECLARE SUB gtk_text_buffer_get_iter_at_child_anchor(BYVAL AS GtkTextBuffer PTR, BYVAL AS GtkTextIter PTR, BYVAL AS GtkTextChildAnchor PTR)
DECLARE SUB gtk_text_buffer_get_iter_at_line(BYVAL AS GtkTextBuffer PTR, BYVAL AS GtkTextIter PTR, BYVAL AS gint)
DECLARE SUB gtk_text_buffer_get_iter_at_line_index(BYVAL AS GtkTextBuffer PTR, BYVAL AS GtkTextIter PTR, BYVAL AS gint, BYVAL AS gint)
DECLARE SUB gtk_text_buffer_get_iter_at_line_offset(BYVAL AS GtkTextBuffer PTR, BYVAL AS GtkTextIter PTR, BYVAL AS gint, BYVAL AS gint)
DECLARE SUB gtk_text_buffer_get_iter_at_mark(BYVAL AS GtkTextBuffer PTR, BYVAL AS GtkTextIter PTR, BYVAL AS GtkTextMark PTR)
DECLARE SUB gtk_text_buffer_get_iter_at_offset(BYVAL AS GtkTextBuffer PTR, BYVAL AS GtkTextIter PTR, BYVAL AS gint)
DECLARE FUNCTION gtk_text_buffer_get_line_count(BYVAL AS GtkTextBuffer PTR) AS gint
DECLARE FUNCTION gtk_text_buffer_get_mark(BYVAL AS GtkTextBuffer PTR, BYVAL AS const gchar PTR) AS GtkTextMark PTR
DECLARE FUNCTION gtk_text_buffer_get_modified(BYVAL AS GtkTextBuffer PTR) AS gboolean
DECLARE FUNCTION gtk_text_buffer_get_paste_target_list(BYVAL AS GtkTextBuffer PTR) AS GtkTargetList PTR
DECLARE FUNCTION gtk_text_buffer_get_selection_bound(BYVAL AS GtkTextBuffer PTR) AS GtkTextMark PTR
DECLARE FUNCTION gtk_text_buffer_get_selection_bounds(BYVAL AS GtkTextBuffer PTR, BYVAL AS GtkTextIter PTR, BYVAL AS GtkTextIter PTR) AS gboolean
DECLARE FUNCTION gtk_text_buffer_get_serialize_formats(BYVAL AS GtkTextBuffer PTR, BYVAL AS gint PTR) AS any ptr /'GdkAtom'/ PTR
DECLARE FUNCTION gtk_text_buffer_get_slice(BYVAL AS GtkTextBuffer PTR, BYVAL AS const GtkTextIter PTR, BYVAL AS const GtkTextIter PTR, BYVAL AS gboolean) AS gchar PTR
DECLARE SUB gtk_text_buffer_get_start_iter(BYVAL AS GtkTextBuffer PTR, BYVAL AS GtkTextIter PTR)
DECLARE FUNCTION gtk_text_buffer_get_tag_table(BYVAL AS GtkTextBuffer PTR) AS GtkTextTagTable PTR
DECLARE FUNCTION gtk_text_buffer_get_text(BYVAL AS GtkTextBuffer PTR, BYVAL AS const GtkTextIter PTR, BYVAL AS const GtkTextIter PTR, BYVAL AS gboolean) AS gchar PTR
DECLARE SUB gtk_text_buffer_insert(BYVAL AS GtkTextBuffer PTR, BYVAL AS GtkTextIter PTR, BYVAL AS const gchar PTR, BYVAL AS gint)
DECLARE SUB gtk_text_buffer_insert_at_cursor(BYVAL AS GtkTextBuffer PTR, BYVAL AS const gchar PTR, BYVAL AS gint)
DECLARE SUB gtk_text_buffer_insert_child_anchor(BYVAL AS GtkTextBuffer PTR, BYVAL AS GtkTextIter PTR, BYVAL AS GtkTextChildAnchor PTR)
DECLARE FUNCTION gtk_text_buffer_insert_interactive(BYVAL AS GtkTextBuffer PTR, BYVAL AS GtkTextIter PTR, BYVAL AS const gchar PTR, BYVAL AS gint, BYVAL AS gboolean) AS gboolean
DECLARE FUNCTION gtk_text_buffer_insert_interactive_at_cursor(BYVAL AS GtkTextBuffer PTR, BYVAL AS const gchar PTR, BYVAL AS gint, BYVAL AS gboolean) AS gboolean
DECLARE SUB gtk_text_buffer_insert_markup(BYVAL AS GtkTextBuffer PTR, BYVAL AS GtkTextIter PTR, BYVAL AS const gchar PTR, BYVAL AS gint)
DECLARE SUB gtk_text_buffer_insert_pixbuf(BYVAL AS GtkTextBuffer PTR, BYVAL AS GtkTextIter PTR, BYVAL AS GdkPixbuf PTR)
DECLARE SUB gtk_text_buffer_insert_range(BYVAL AS GtkTextBuffer PTR, BYVAL AS GtkTextIter PTR, BYVAL AS const GtkTextIter PTR, BYVAL AS const GtkTextIter PTR)
DECLARE FUNCTION gtk_text_buffer_insert_range_interactive(BYVAL AS GtkTextBuffer PTR, BYVAL AS GtkTextIter PTR, BYVAL AS const GtkTextIter PTR, BYVAL AS const GtkTextIter PTR, BYVAL AS gboolean) AS gboolean
DECLARE SUB gtk_text_buffer_insert_with_tags(BYVAL AS GtkTextBuffer PTR, BYVAL AS GtkTextIter PTR, BYVAL AS const gchar PTR, BYVAL AS gint, BYVAL AS GtkTextTag PTR, ...)
DECLARE SUB gtk_text_buffer_insert_with_tags_by_name(BYVAL AS GtkTextBuffer PTR, BYVAL AS GtkTextIter PTR, BYVAL AS const gchar PTR, BYVAL AS gint, BYVAL AS const gchar PTR, ...)
DECLARE SUB gtk_text_buffer_move_mark(BYVAL AS GtkTextBuffer PTR, BYVAL AS GtkTextMark PTR, BYVAL AS const GtkTextIter PTR)
DECLARE SUB gtk_text_buffer_move_mark_by_name(BYVAL AS GtkTextBuffer PTR, BYVAL AS const gchar PTR, BYVAL AS const GtkTextIter PTR)
DECLARE SUB gtk_text_buffer_paste_clipboard(BYVAL AS GtkTextBuffer PTR, BYVAL AS GtkClipboard PTR, BYVAL AS GtkTextIter PTR, BYVAL AS gboolean)
DECLARE SUB gtk_text_buffer_place_cursor(BYVAL AS GtkTextBuffer PTR, BYVAL AS const GtkTextIter PTR)
DECLARE FUNCTION gtk_text_buffer_register_deserialize_format(BYVAL AS GtkTextBuffer PTR, BYVAL AS const gchar PTR, BYVAL AS GtkTextBufferDeserializeFunc, BYVAL AS gpointer, BYVAL AS GDestroyNotify) AS any ptr /'GdkAtom'/
DECLARE FUNCTION gtk_text_buffer_register_deserialize_tagset(BYVAL AS GtkTextBuffer PTR, BYVAL AS const gchar PTR) AS any ptr /'GdkAtom'/
DECLARE FUNCTION gtk_text_buffer_register_serialize_format(BYVAL AS GtkTextBuffer PTR, BYVAL AS const gchar PTR, BYVAL AS GtkTextBufferSerializeFunc, BYVAL AS gpointer, BYVAL AS GDestroyNotify) AS any ptr /'GdkAtom'/
DECLARE FUNCTION gtk_text_buffer_register_serialize_tagset(BYVAL AS GtkTextBuffer PTR, BYVAL AS const gchar PTR) AS any ptr /'GdkAtom'/
DECLARE SUB gtk_text_buffer_remove_all_tags(BYVAL AS GtkTextBuffer PTR, BYVAL AS const GtkTextIter PTR, BYVAL AS const GtkTextIter PTR)
DECLARE SUB gtk_text_buffer_remove_selection_clipboard(BYVAL AS GtkTextBuffer PTR, BYVAL AS GtkClipboard PTR)
DECLARE SUB gtk_text_buffer_remove_tag(BYVAL AS GtkTextBuffer PTR, BYVAL AS GtkTextTag PTR, BYVAL AS const GtkTextIter PTR, BYVAL AS const GtkTextIter PTR)
DECLARE SUB gtk_text_buffer_remove_tag_by_name(BYVAL AS GtkTextBuffer PTR, BYVAL AS const gchar PTR, BYVAL AS const GtkTextIter PTR, BYVAL AS const GtkTextIter PTR)
DECLARE SUB gtk_text_buffer_select_range(BYVAL AS GtkTextBuffer PTR, BYVAL AS const GtkTextIter PTR, BYVAL AS const GtkTextIter PTR)
DECLARE FUNCTION gtk_text_buffer_serialize(BYVAL AS GtkTextBuffer PTR, BYVAL AS GtkTextBuffer PTR, BYVAL AS any ptr /'GdkAtom'/, BYVAL AS const GtkTextIter PTR, BYVAL AS const GtkTextIter PTR, BYVAL AS gsize PTR) AS guint8 PTR
DECLARE SUB gtk_text_buffer_set_modified(BYVAL AS GtkTextBuffer PTR, BYVAL AS gboolean)
DECLARE SUB gtk_text_buffer_set_text(BYVAL AS GtkTextBuffer PTR, BYVAL AS const gchar PTR, BYVAL AS gint)
DECLARE SUB gtk_text_buffer_unregister_deserialize_format(BYVAL AS GtkTextBuffer PTR, BYVAL AS any ptr /'GdkAtom'/)
DECLARE SUB gtk_text_buffer_unregister_serialize_format(BYVAL AS GtkTextBuffer PTR, BYVAL AS any ptr /'GdkAtom'/)
TYPE _GtkTextBufferClass
  AS GObjectClass parent_class
  insert_text AS SUB CDECL(BYVAL AS GtkTextBuffer PTR, BYVAL AS GtkTextIter PTR, BYVAL AS const gchar PTR, BYVAL AS gint)
  insert_pixbuf AS SUB CDECL(BYVAL AS GtkTextBuffer PTR, BYVAL AS GtkTextIter PTR, BYVAL AS GdkPixbuf PTR)
  insert_child_anchor AS SUB CDECL(BYVAL AS GtkTextBuffer PTR, BYVAL AS GtkTextIter PTR, BYVAL AS GtkTextChildAnchor PTR)
  delete_range AS SUB CDECL(BYVAL AS GtkTextBuffer PTR, BYVAL AS GtkTextIter PTR, BYVAL AS GtkTextIter PTR)
  changed AS SUB CDECL(BYVAL AS GtkTextBuffer PTR)
  modified_changed AS SUB CDECL(BYVAL AS GtkTextBuffer PTR)
  mark_set AS SUB CDECL(BYVAL AS GtkTextBuffer PTR, BYVAL AS const GtkTextIter PTR, BYVAL AS GtkTextMark PTR)
  mark_deleted AS SUB CDECL(BYVAL AS GtkTextBuffer PTR, BYVAL AS GtkTextMark PTR)
  apply_tag AS SUB CDECL(BYVAL AS GtkTextBuffer PTR, BYVAL AS GtkTextTag PTR, BYVAL AS const GtkTextIter PTR, BYVAL AS const GtkTextIter PTR)
  remove_tag AS SUB CDECL(BYVAL AS GtkTextBuffer PTR, BYVAL AS GtkTextTag PTR, BYVAL AS const GtkTextIter PTR, BYVAL AS const GtkTextIter PTR)
  begin_user_action AS SUB CDECL(BYVAL AS GtkTextBuffer PTR)
  end_user_action AS SUB CDECL(BYVAL AS GtkTextBuffer PTR)
  paste_done AS SUB CDECL(BYVAL AS GtkTextBuffer PTR, BYVAL AS GtkClipboard PTR)
  _gtk_reserved1 AS SUB CDECL()
  _gtk_reserved2 AS SUB CDECL()
  _gtk_reserved3 AS SUB CDECL()
  _gtk_reserved4 AS SUB CDECL()
END TYPE
TYPE _GtkTextCellAccessible
  AS GtkRendererCellAccessible parent
  AS GtkTextCellAccessiblePrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_text_buffer_target_info_get_type() AS GType
#DEFINE GTK_TYPE_TEXT_BUFFER_TARGET_INFO (gtk_text_buffer_target_info_get_type())
DECLARE FUNCTION gtk_text_cell_accessible_get_type() AS GType
#DEFINE GTK_TYPE_TEXT_CELL_ACCESSIBLE (gtk_text_cell_accessible_get_type())
#DEFINE GTK_TEXT_CELL_ACCESSIBLE(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_TEXT_CELL_ACCESSIBLE, GtkTextCellAccessible))
#DEFINE GTK_TEXT_CELL_ACCESSIBLE_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_TEXT_CELL_ACCESSIBLE, GtkTextCellAccessibleClass))
#DEFINE GTK_IS_TEXT_CELL_ACCESSIBLE(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_TEXT_CELL_ACCESSIBLE))
#DEFINE GTK_IS_CLASS_TEXT_CELL_ACCESSIBLE(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_TEXT_CELL_ACCESSIBLE))
#DEFINE GTK_TEXT_CELL_ACCESSIBLE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_TEXT_CELL_ACCESSIBLE, GtkTextCellAccessibleClass))
TYPE _GtkTextCellAccessibleClass
  AS GtkRendererCellAccessibleClass parent_class
END TYPE
TYPE GtkTextCharPredicate AS FUNCTION CDECL(BYVAL AS gunichar, BYVAL AS gpointer) AS gboolean
TYPE _GtkTextChildAnchor
  AS GObject parent_instance
  AS gpointer segment
END TYPE
DECLARE FUNCTION gtk_text_child_anchor_get_type() AS GType
#DEFINE GTK_TYPE_TEXT_CHILD_ANCHOR (gtk_text_child_anchor_get_type())
#DEFINE GTK_TEXT_CHILD_ANCHOR(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_TEXT_CHILD_ANCHOR, GtkTextChildAnchor))
#DEFINE GTK_TEXT_CHILD_ANCHOR_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_TEXT_CHILD_ANCHOR, GtkTextChildAnchorClass))
#DEFINE GTK_IS_TEXT_CHILD_ANCHOR(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_TEXT_CHILD_ANCHOR))
#DEFINE GTK_IS_CLASS_TEXT_CHILD_ANCHOR(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_TEXT_CHILD_ANCHOR))
#DEFINE GTK_TEXT_CHILD_ANCHOR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_TEXT_CHILD_ANCHOR, GtkTextChildAnchorClass))
DECLARE FUNCTION gtk_text_child_anchor_new() AS GtkTextChildAnchor PTR
DECLARE FUNCTION gtk_text_child_anchor_get_deleted(BYVAL AS GtkTextChildAnchor PTR) AS gboolean
DECLARE FUNCTION gtk_text_child_anchor_get_widgets(BYVAL AS GtkTextChildAnchor PTR) AS GList PTR
TYPE _GtkTextChildAnchorClass
  AS GObjectClass parent_class
  _gtk_reserved1 AS SUB CDECL()
  _gtk_reserved2 AS SUB CDECL()
  _gtk_reserved3 AS SUB CDECL()
  _gtk_reserved4 AS SUB CDECL()
END TYPE
TYPE _GtkTextIter
  AS gpointer dummy1
  AS gpointer dummy2
  AS gint dummy3
  AS gint dummy4
  AS gint dummy5
  AS gint dummy6
  AS gint dummy7
  AS gint dummy8
  AS gpointer dummy9
  AS gpointer dummy10
  AS gint dummy11
  AS gint dummy12
  AS gint dummy13
  AS gpointer dummy14
END TYPE
DECLARE FUNCTION gtk_text_direction_get_type() AS GType
#DEFINE GTK_TYPE_TEXT_DIRECTION (gtk_text_direction_get_type())
DECLARE FUNCTION gtk_text_extend_selection_get_type() AS GType
#DEFINE GTK_TYPE_TEXT_EXTEND_SELECTION (gtk_text_extend_selection_get_type())
DECLARE SUB gtk_text_iter_assign(BYVAL AS GtkTextIter PTR, BYVAL AS const GtkTextIter PTR)
DECLARE FUNCTION gtk_text_iter_backward_char(BYVAL AS GtkTextIter PTR) AS gboolean
DECLARE FUNCTION gtk_text_iter_backward_chars(BYVAL AS GtkTextIter PTR, BYVAL AS gint) AS gboolean
DECLARE FUNCTION gtk_text_iter_backward_cursor_position(BYVAL AS GtkTextIter PTR) AS gboolean
DECLARE FUNCTION gtk_text_iter_backward_cursor_positions(BYVAL AS GtkTextIter PTR, BYVAL AS gint) AS gboolean
DECLARE FUNCTION gtk_text_iter_backward_find_char(BYVAL AS GtkTextIter PTR, BYVAL AS GtkTextCharPredicate, BYVAL AS gpointer, BYVAL AS const GtkTextIter PTR) AS gboolean
DECLARE FUNCTION gtk_text_iter_backward_line(BYVAL AS GtkTextIter PTR) AS gboolean
DECLARE FUNCTION gtk_text_iter_backward_lines(BYVAL AS GtkTextIter PTR, BYVAL AS gint) AS gboolean
DECLARE FUNCTION gtk_text_iter_backward_search(BYVAL AS const GtkTextIter PTR, BYVAL AS const gchar PTR, BYVAL AS GtkTextSearchFlags, BYVAL AS GtkTextIter PTR, BYVAL AS GtkTextIter PTR, BYVAL AS const GtkTextIter PTR) AS gboolean
DECLARE FUNCTION gtk_text_iter_backward_sentence_start(BYVAL AS GtkTextIter PTR) AS gboolean
DECLARE FUNCTION gtk_text_iter_backward_sentence_starts(BYVAL AS GtkTextIter PTR, BYVAL AS gint) AS gboolean
DECLARE FUNCTION gtk_text_iter_backward_to_tag_toggle(BYVAL AS GtkTextIter PTR, BYVAL AS GtkTextTag PTR) AS gboolean
DECLARE FUNCTION gtk_text_iter_backward_visible_cursor_position(BYVAL AS GtkTextIter PTR) AS gboolean
DECLARE FUNCTION gtk_text_iter_backward_visible_cursor_positions(BYVAL AS GtkTextIter PTR, BYVAL AS gint) AS gboolean
DECLARE FUNCTION gtk_text_iter_backward_visible_line(BYVAL AS GtkTextIter PTR) AS gboolean
DECLARE FUNCTION gtk_text_iter_backward_visible_lines(BYVAL AS GtkTextIter PTR, BYVAL AS gint) AS gboolean
DECLARE FUNCTION gtk_text_iter_backward_visible_word_start(BYVAL AS GtkTextIter PTR) AS gboolean
DECLARE FUNCTION gtk_text_iter_backward_visible_word_starts(BYVAL AS GtkTextIter PTR, BYVAL AS gint) AS gboolean
DECLARE FUNCTION gtk_text_iter_backward_word_start(BYVAL AS GtkTextIter PTR) AS gboolean
DECLARE FUNCTION gtk_text_iter_backward_word_starts(BYVAL AS GtkTextIter PTR, BYVAL AS gint) AS gboolean
DECLARE FUNCTION gtk_text_iter_begins_tag(BYVAL AS const GtkTextIter PTR, BYVAL AS GtkTextTag PTR) AS gboolean
DECLARE FUNCTION gtk_text_iter_can_insert(BYVAL AS const GtkTextIter PTR, BYVAL AS gboolean) AS gboolean
DECLARE FUNCTION gtk_text_iter_compare(BYVAL AS const GtkTextIter PTR, BYVAL AS const GtkTextIter PTR) AS gint
DECLARE FUNCTION gtk_text_iter_copy(BYVAL AS const GtkTextIter PTR) AS GtkTextIter PTR
DECLARE FUNCTION gtk_text_iter_editable(BYVAL AS const GtkTextIter PTR, BYVAL AS gboolean) AS gboolean
DECLARE FUNCTION gtk_text_iter_ends_line(BYVAL AS const GtkTextIter PTR) AS gboolean
DECLARE FUNCTION gtk_text_iter_ends_sentence(BYVAL AS const GtkTextIter PTR) AS gboolean
DECLARE FUNCTION gtk_text_iter_ends_tag(BYVAL AS const GtkTextIter PTR, BYVAL AS GtkTextTag PTR) AS gboolean
DECLARE FUNCTION gtk_text_iter_ends_word(BYVAL AS const GtkTextIter PTR) AS gboolean
DECLARE FUNCTION gtk_text_iter_equal(BYVAL AS const GtkTextIter PTR, BYVAL AS const GtkTextIter PTR) AS gboolean
DECLARE FUNCTION gtk_text_iter_forward_char(BYVAL AS GtkTextIter PTR) AS gboolean
DECLARE FUNCTION gtk_text_iter_forward_chars(BYVAL AS GtkTextIter PTR, BYVAL AS gint) AS gboolean
DECLARE FUNCTION gtk_text_iter_forward_cursor_position(BYVAL AS GtkTextIter PTR) AS gboolean
DECLARE FUNCTION gtk_text_iter_forward_cursor_positions(BYVAL AS GtkTextIter PTR, BYVAL AS gint) AS gboolean
DECLARE FUNCTION gtk_text_iter_forward_find_char(BYVAL AS GtkTextIter PTR, BYVAL AS GtkTextCharPredicate, BYVAL AS gpointer, BYVAL AS const GtkTextIter PTR) AS gboolean
DECLARE FUNCTION gtk_text_iter_forward_line(BYVAL AS GtkTextIter PTR) AS gboolean
DECLARE FUNCTION gtk_text_iter_forward_lines(BYVAL AS GtkTextIter PTR, BYVAL AS gint) AS gboolean
DECLARE FUNCTION gtk_text_iter_forward_search(BYVAL AS const GtkTextIter PTR, BYVAL AS const gchar PTR, BYVAL AS GtkTextSearchFlags, BYVAL AS GtkTextIter PTR, BYVAL AS GtkTextIter PTR, BYVAL AS const GtkTextIter PTR) AS gboolean
DECLARE FUNCTION gtk_text_iter_forward_sentence_end(BYVAL AS GtkTextIter PTR) AS gboolean
DECLARE FUNCTION gtk_text_iter_forward_sentence_ends(BYVAL AS GtkTextIter PTR, BYVAL AS gint) AS gboolean
DECLARE SUB gtk_text_iter_forward_to_end(BYVAL AS GtkTextIter PTR)
DECLARE FUNCTION gtk_text_iter_forward_to_line_end(BYVAL AS GtkTextIter PTR) AS gboolean
DECLARE FUNCTION gtk_text_iter_forward_to_tag_toggle(BYVAL AS GtkTextIter PTR, BYVAL AS GtkTextTag PTR) AS gboolean
DECLARE FUNCTION gtk_text_iter_forward_visible_cursor_position(BYVAL AS GtkTextIter PTR) AS gboolean
DECLARE FUNCTION gtk_text_iter_forward_visible_cursor_positions(BYVAL AS GtkTextIter PTR, BYVAL AS gint) AS gboolean
DECLARE FUNCTION gtk_text_iter_forward_visible_line(BYVAL AS GtkTextIter PTR) AS gboolean
DECLARE FUNCTION gtk_text_iter_forward_visible_lines(BYVAL AS GtkTextIter PTR, BYVAL AS gint) AS gboolean
DECLARE FUNCTION gtk_text_iter_forward_visible_word_end(BYVAL AS GtkTextIter PTR) AS gboolean
DECLARE FUNCTION gtk_text_iter_forward_visible_word_ends(BYVAL AS GtkTextIter PTR, BYVAL AS gint) AS gboolean
DECLARE FUNCTION gtk_text_iter_forward_word_end(BYVAL AS GtkTextIter PTR) AS gboolean
DECLARE FUNCTION gtk_text_iter_forward_word_ends(BYVAL AS GtkTextIter PTR, BYVAL AS gint) AS gboolean
DECLARE SUB gtk_text_iter_free(BYVAL AS GtkTextIter PTR)
DECLARE FUNCTION gtk_text_iter_get_attributes(BYVAL AS const GtkTextIter PTR, BYVAL AS GtkTextAttributes PTR) AS gboolean
DECLARE FUNCTION gtk_text_iter_get_buffer(BYVAL AS const GtkTextIter PTR) AS GtkTextBuffer PTR
DECLARE FUNCTION gtk_text_iter_get_bytes_in_line(BYVAL AS const GtkTextIter PTR) AS gint
DECLARE FUNCTION gtk_text_iter_get_char(BYVAL AS const GtkTextIter PTR) AS gunichar
DECLARE FUNCTION gtk_text_iter_get_chars_in_line(BYVAL AS const GtkTextIter PTR) AS gint
DECLARE FUNCTION gtk_text_iter_get_child_anchor(BYVAL AS const GtkTextIter PTR) AS GtkTextChildAnchor PTR
DECLARE FUNCTION gtk_text_iter_get_language(BYVAL AS const GtkTextIter PTR) AS PangoLanguage PTR
DECLARE FUNCTION gtk_text_iter_get_line(BYVAL AS const GtkTextIter PTR) AS gint
DECLARE FUNCTION gtk_text_iter_get_line_index(BYVAL AS const GtkTextIter PTR) AS gint
DECLARE FUNCTION gtk_text_iter_get_line_offset(BYVAL AS const GtkTextIter PTR) AS gint
DECLARE FUNCTION gtk_text_iter_get_marks(BYVAL AS const GtkTextIter PTR) AS GSList PTR
DECLARE FUNCTION gtk_text_iter_get_offset(BYVAL AS const GtkTextIter PTR) AS gint
DECLARE FUNCTION gtk_text_iter_get_pixbuf(BYVAL AS const GtkTextIter PTR) AS GdkPixbuf PTR
DECLARE FUNCTION gtk_text_iter_get_slice(BYVAL AS const GtkTextIter PTR, BYVAL AS const GtkTextIter PTR) AS gchar PTR
DECLARE FUNCTION gtk_text_iter_get_tags(BYVAL AS const GtkTextIter PTR) AS GSList PTR
DECLARE FUNCTION gtk_text_iter_get_text(BYVAL AS const GtkTextIter PTR, BYVAL AS const GtkTextIter PTR) AS gchar PTR
DECLARE FUNCTION gtk_text_iter_get_toggled_tags(BYVAL AS const GtkTextIter PTR, BYVAL AS gboolean) AS GSList PTR
DECLARE FUNCTION gtk_text_iter_get_visible_line_index(BYVAL AS const GtkTextIter PTR) AS gint
DECLARE FUNCTION gtk_text_iter_get_visible_line_offset(BYVAL AS const GtkTextIter PTR) AS gint
DECLARE FUNCTION gtk_text_iter_get_visible_slice(BYVAL AS const GtkTextIter PTR, BYVAL AS const GtkTextIter PTR) AS gchar PTR
DECLARE FUNCTION gtk_text_iter_get_visible_text(BYVAL AS const GtkTextIter PTR, BYVAL AS const GtkTextIter PTR) AS gchar PTR
DECLARE FUNCTION gtk_text_iter_has_tag(BYVAL AS const GtkTextIter PTR, BYVAL AS GtkTextTag PTR) AS gboolean
DECLARE FUNCTION gtk_text_iter_in_range(BYVAL AS const GtkTextIter PTR, BYVAL AS const GtkTextIter PTR, BYVAL AS const GtkTextIter PTR) AS gboolean
DECLARE FUNCTION gtk_text_iter_inside_sentence(BYVAL AS const GtkTextIter PTR) AS gboolean
DECLARE FUNCTION gtk_text_iter_inside_word(BYVAL AS const GtkTextIter PTR) AS gboolean
DECLARE FUNCTION gtk_text_iter_is_cursor_position(BYVAL AS const GtkTextIter PTR) AS gboolean
DECLARE FUNCTION gtk_text_iter_is_end(BYVAL AS const GtkTextIter PTR) AS gboolean
DECLARE FUNCTION gtk_text_iter_is_start(BYVAL AS const GtkTextIter PTR) AS gboolean
DECLARE SUB gtk_text_iter_order(BYVAL AS GtkTextIter PTR, BYVAL AS GtkTextIter PTR)
DECLARE SUB gtk_text_iter_set_line(BYVAL AS GtkTextIter PTR, BYVAL AS gint)
DECLARE SUB gtk_text_iter_set_line_index(BYVAL AS GtkTextIter PTR, BYVAL AS gint)
DECLARE SUB gtk_text_iter_set_line_offset(BYVAL AS GtkTextIter PTR, BYVAL AS gint)
DECLARE SUB gtk_text_iter_set_offset(BYVAL AS GtkTextIter PTR, BYVAL AS gint)
DECLARE SUB gtk_text_iter_set_visible_line_index(BYVAL AS GtkTextIter PTR, BYVAL AS gint)
DECLARE SUB gtk_text_iter_set_visible_line_offset(BYVAL AS GtkTextIter PTR, BYVAL AS gint)
DECLARE FUNCTION gtk_text_iter_starts_line(BYVAL AS const GtkTextIter PTR) AS gboolean
DECLARE FUNCTION gtk_text_iter_starts_sentence(BYVAL AS const GtkTextIter PTR) AS gboolean
DECLARE FUNCTION gtk_text_iter_starts_tag(BYVAL AS const GtkTextIter PTR, BYVAL AS GtkTextTag PTR) AS gboolean
DECLARE FUNCTION gtk_text_iter_starts_word(BYVAL AS const GtkTextIter PTR) AS gboolean
DECLARE FUNCTION gtk_text_iter_toggles_tag(BYVAL AS const GtkTextIter PTR, BYVAL AS GtkTextTag PTR) AS gboolean
TYPE _GtkTextMark
  AS GObject parent_instance
  AS gpointer segment
END TYPE
DECLARE FUNCTION gtk_text_mark_get_type() AS GType
#DEFINE GTK_TYPE_TEXT_MARK (gtk_text_mark_get_type())
#DEFINE GTK_TEXT_MARK(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_TEXT_MARK, GtkTextMark))
#DEFINE GTK_TEXT_MARK_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_TEXT_MARK, GtkTextMarkClass))
#DEFINE GTK_IS_TEXT_MARK(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_TEXT_MARK))
#DEFINE GTK_IS_CLASS_TEXT_MARK(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_TEXT_MARK))
#DEFINE GTK_TEXT_MARK_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_TEXT_MARK, GtkTextMarkClass))
DECLARE FUNCTION gtk_text_mark_new(BYVAL AS const gchar PTR, BYVAL AS gboolean) AS GtkTextMark PTR
DECLARE FUNCTION gtk_text_mark_get_buffer(BYVAL AS GtkTextMark PTR) AS GtkTextBuffer PTR
DECLARE FUNCTION gtk_text_mark_get_deleted(BYVAL AS GtkTextMark PTR) AS gboolean
DECLARE FUNCTION gtk_text_mark_get_left_gravity(BYVAL AS GtkTextMark PTR) AS gboolean
DECLARE FUNCTION gtk_text_mark_get_name(BYVAL AS GtkTextMark PTR) AS const gchar PTR
DECLARE FUNCTION gtk_text_mark_get_visible(BYVAL AS GtkTextMark PTR) AS gboolean
DECLARE SUB gtk_text_mark_set_visible(BYVAL AS GtkTextMark PTR, BYVAL AS gboolean)
TYPE _GtkTextMarkClass
  AS GObjectClass parent_class
  _gtk_reserved1 AS SUB CDECL()
  _gtk_reserved2 AS SUB CDECL()
  _gtk_reserved3 AS SUB CDECL()
  _gtk_reserved4 AS SUB CDECL()
END TYPE
TYPE _GtkTextTag
  AS GObject parent_instance
  AS GtkTextTagPrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_text_tag_get_type() AS GType
#DEFINE GTK_TYPE_TEXT_TAG (gtk_text_tag_get_type())
#DEFINE GTK_TEXT_TAG(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_TEXT_TAG, GtkTextTag))
#DEFINE GTK_TEXT_TAG_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_TEXT_TAG, GtkTextTagClass))
#DEFINE GTK_IS_TEXT_TAG(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_TEXT_TAG))
#DEFINE GTK_IS_CLASS_TEXT_TAG(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_TEXT_TAG))
#DEFINE GTK_TEXT_TAG_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_TEXT_TAG, GtkTextTagClass))
DECLARE FUNCTION gtk_text_tag_new(BYVAL AS const gchar PTR) AS GtkTextTag PTR
DECLARE SUB gtk_text_tag_changed(BYVAL AS GtkTextTag PTR, BYVAL AS gboolean)
DECLARE FUNCTION gtk_text_tag_event(BYVAL AS GtkTextTag PTR, BYVAL AS GObject PTR, BYVAL AS GdkEvent PTR, BYVAL AS const GtkTextIter PTR) AS gboolean
DECLARE FUNCTION gtk_text_tag_get_priority(BYVAL AS GtkTextTag PTR) AS gint
DECLARE SUB gtk_text_tag_set_priority(BYVAL AS GtkTextTag PTR, BYVAL AS gint)
TYPE _GtkTextTagClass
  AS GObjectClass parent_class
  event AS FUNCTION CDECL(BYVAL AS GtkTextTag PTR, BYVAL AS GObject PTR, BYVAL AS GdkEvent PTR, BYVAL AS const GtkTextIter PTR) AS gboolean
  _gtk_reserved1 AS SUB CDECL()
  _gtk_reserved2 AS SUB CDECL()
  _gtk_reserved3 AS SUB CDECL()
  _gtk_reserved4 AS SUB CDECL()
END TYPE
TYPE _GtkTextTagTable
  AS GObject parent_instance
  AS GtkTextTagTablePrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_text_tag_table_get_type() AS GType
#DEFINE GTK_TYPE_TEXT_TAG_TABLE (gtk_text_tag_table_get_type())
#DEFINE GTK_TEXT_TAG_TABLE(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_TEXT_TAG_TABLE, GtkTextTagTable))
#DEFINE GTK_TEXT_TAG_TABLE_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_TEXT_TAG_TABLE, GtkTextTagTableClass))
#DEFINE GTK_IS_TEXT_TAG_TABLE(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_TEXT_TAG_TABLE))
#DEFINE GTK_IS_CLASS_TEXT_TAG_TABLE(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_TEXT_TAG_TABLE))
#DEFINE GTK_TEXT_TAG_TABLE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_TEXT_TAG_TABLE, GtkTextTagTableClass))
DECLARE FUNCTION gtk_text_tag_table_new() AS GtkTextTagTable PTR
DECLARE FUNCTION gtk_text_tag_table_add(BYVAL AS GtkTextTagTable PTR, BYVAL AS GtkTextTag PTR) AS gboolean
DECLARE SUB gtk_text_tag_table_foreach(BYVAL AS GtkTextTagTable PTR, BYVAL AS GtkTextTagTableForeach, BYVAL AS gpointer)
DECLARE FUNCTION gtk_text_tag_table_get_size(BYVAL AS GtkTextTagTable PTR) AS gint
DECLARE FUNCTION gtk_text_tag_table_lookup(BYVAL AS GtkTextTagTable PTR, BYVAL AS const gchar PTR) AS GtkTextTag PTR
DECLARE SUB gtk_text_tag_table_remove(BYVAL AS GtkTextTagTable PTR, BYVAL AS GtkTextTag PTR)
TYPE _GtkTextTagTableClass
  AS GObjectClass parent_class
  tag_changed AS SUB CDECL(BYVAL AS GtkTextTagTable PTR, BYVAL AS GtkTextTag PTR, BYVAL AS gboolean)
  tag_added AS SUB CDECL(BYVAL AS GtkTextTagTable PTR, BYVAL AS GtkTextTag PTR)
  tag_removed AS SUB CDECL(BYVAL AS GtkTextTagTable PTR, BYVAL AS GtkTextTag PTR)
  _gtk_reserved1 AS SUB CDECL()
  _gtk_reserved2 AS SUB CDECL()
  _gtk_reserved3 AS SUB CDECL()
  _gtk_reserved4 AS SUB CDECL()
END TYPE
TYPE _GtkTextView
  AS GtkContainer parent_instance
  AS GtkTextViewPrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_text_view_get_type() AS GType
#DEFINE GTK_TYPE_TEXT_VIEW (gtk_text_view_get_type())
#DEFINE GTK_TEXT_VIEW(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_TEXT_VIEW, GtkTextView))
#DEFINE GTK_TEXT_VIEW_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_TEXT_VIEW, GtkTextViewClass))
#DEFINE GTK_IS_TEXT_VIEW(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_TEXT_VIEW))
#DEFINE GTK_IS_CLASS_TEXT_VIEW(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_TEXT_VIEW))
#DEFINE GTK_TEXT_VIEW_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_TEXT_VIEW, GtkTextViewClass))
DECLARE FUNCTION gtk_text_view_new() AS GtkWidget PTR
DECLARE FUNCTION gtk_text_view_new_with_buffer(BYVAL AS GtkTextBuffer PTR) AS GtkWidget PTR
DECLARE SUB gtk_text_view_add_child_at_anchor(BYVAL AS GtkTextView PTR, BYVAL AS GtkWidget PTR, BYVAL AS GtkTextChildAnchor PTR)
DECLARE SUB gtk_text_view_add_child_in_window(BYVAL AS GtkTextView PTR, BYVAL AS GtkWidget PTR, BYVAL AS GtkTextWindowType, BYVAL AS gint, BYVAL AS gint)
DECLARE FUNCTION gtk_text_view_backward_display_line(BYVAL AS GtkTextView PTR, BYVAL AS GtkTextIter PTR) AS gboolean
DECLARE FUNCTION gtk_text_view_backward_display_line_start(BYVAL AS GtkTextView PTR, BYVAL AS GtkTextIter PTR) AS gboolean
DECLARE SUB gtk_text_view_buffer_to_window_coords(BYVAL AS GtkTextView PTR, BYVAL AS GtkTextWindowType, BYVAL AS gint, BYVAL AS gint, BYVAL AS gint PTR, BYVAL AS gint PTR)
DECLARE FUNCTION gtk_text_view_forward_display_line(BYVAL AS GtkTextView PTR, BYVAL AS GtkTextIter PTR) AS gboolean
DECLARE FUNCTION gtk_text_view_forward_display_line_end(BYVAL AS GtkTextView PTR, BYVAL AS GtkTextIter PTR) AS gboolean
DECLARE FUNCTION gtk_text_view_get_accepts_tab(BYVAL AS GtkTextView PTR) AS gboolean
DECLARE FUNCTION gtk_text_view_get_border_window_size(BYVAL AS GtkTextView PTR, BYVAL AS GtkTextWindowType) AS gint
DECLARE FUNCTION gtk_text_view_get_bottom_margin(BYVAL AS GtkTextView PTR) AS gint
DECLARE FUNCTION gtk_text_view_get_buffer(BYVAL AS GtkTextView PTR) AS GtkTextBuffer PTR
DECLARE SUB gtk_text_view_get_cursor_locations(BYVAL AS GtkTextView PTR, BYVAL AS const GtkTextIter PTR, BYVAL AS GdkRectangle PTR, BYVAL AS GdkRectangle PTR)
DECLARE FUNCTION gtk_text_view_get_cursor_visible(BYVAL AS GtkTextView PTR) AS gboolean
DECLARE FUNCTION gtk_text_view_get_default_attributes(BYVAL AS GtkTextView PTR) AS GtkTextAttributes PTR
DECLARE FUNCTION gtk_text_view_get_editable(BYVAL AS GtkTextView PTR) AS gboolean
DECLARE FUNCTION gtk_text_view_get_hadjustment(BYVAL AS GtkTextView PTR) AS GtkAdjustment PTR
DECLARE FUNCTION gtk_text_view_get_indent(BYVAL AS GtkTextView PTR) AS gint
DECLARE FUNCTION gtk_text_view_get_input_hints(BYVAL AS GtkTextView PTR) AS GtkInputHints
DECLARE FUNCTION gtk_text_view_get_input_purpose(BYVAL AS GtkTextView PTR) AS GtkInputPurpose
DECLARE FUNCTION gtk_text_view_get_iter_at_location(BYVAL AS GtkTextView PTR, BYVAL AS GtkTextIter PTR, BYVAL AS gint, BYVAL AS gint) AS gboolean
DECLARE FUNCTION gtk_text_view_get_iter_at_position(BYVAL AS GtkTextView PTR, BYVAL AS GtkTextIter PTR, BYVAL AS gint PTR, BYVAL AS gint, BYVAL AS gint) AS gboolean
DECLARE SUB gtk_text_view_get_iter_location(BYVAL AS GtkTextView PTR, BYVAL AS const GtkTextIter PTR, BYVAL AS GdkRectangle PTR)
DECLARE FUNCTION gtk_text_view_get_justification(BYVAL AS GtkTextView PTR) AS GtkJustification
DECLARE FUNCTION gtk_text_view_get_left_margin(BYVAL AS GtkTextView PTR) AS gint
DECLARE SUB gtk_text_view_get_line_at_y(BYVAL AS GtkTextView PTR, BYVAL AS GtkTextIter PTR, BYVAL AS gint, BYVAL AS gint PTR)
DECLARE SUB gtk_text_view_get_line_yrange(BYVAL AS GtkTextView PTR, BYVAL AS const GtkTextIter PTR, BYVAL AS gint PTR, BYVAL AS gint PTR)
DECLARE FUNCTION gtk_text_view_get_monospace(BYVAL AS GtkTextView PTR) AS gboolean
DECLARE FUNCTION gtk_text_view_get_overwrite(BYVAL AS GtkTextView PTR) AS gboolean
DECLARE FUNCTION gtk_text_view_get_pixels_above_lines(BYVAL AS GtkTextView PTR) AS gint
DECLARE FUNCTION gtk_text_view_get_pixels_below_lines(BYVAL AS GtkTextView PTR) AS gint
DECLARE FUNCTION gtk_text_view_get_pixels_inside_wrap(BYVAL AS GtkTextView PTR) AS gint
DECLARE FUNCTION gtk_text_view_get_right_margin(BYVAL AS GtkTextView PTR) AS gint
DECLARE FUNCTION gtk_text_view_get_tabs(BYVAL AS GtkTextView PTR) AS PangoTabArray PTR
DECLARE FUNCTION gtk_text_view_get_top_margin(BYVAL AS GtkTextView PTR) AS gint
DECLARE FUNCTION gtk_text_view_get_vadjustment(BYVAL AS GtkTextView PTR) AS GtkAdjustment PTR
DECLARE SUB gtk_text_view_get_visible_rect(BYVAL AS GtkTextView PTR, BYVAL AS GdkRectangle PTR)
DECLARE FUNCTION gtk_text_view_get_window(BYVAL AS GtkTextView PTR, BYVAL AS GtkTextWindowType) AS GdkWindow PTR
DECLARE FUNCTION gtk_text_view_get_window_type(BYVAL AS GtkTextView PTR, BYVAL AS GdkWindow PTR) AS GtkTextWindowType
DECLARE FUNCTION gtk_text_view_get_wrap_mode(BYVAL AS GtkTextView PTR) AS GtkWrapMode
DECLARE FUNCTION gtk_text_view_im_context_filter_keypress(BYVAL AS GtkTextView PTR, BYVAL AS GdkEventKey PTR) AS gboolean
DECLARE SUB gtk_text_view_move_child(BYVAL AS GtkTextView PTR, BYVAL AS GtkWidget PTR, BYVAL AS gint, BYVAL AS gint)
DECLARE FUNCTION gtk_text_view_move_mark_onscreen(BYVAL AS GtkTextView PTR, BYVAL AS GtkTextMark PTR) AS gboolean
DECLARE FUNCTION gtk_text_view_move_visually(BYVAL AS GtkTextView PTR, BYVAL AS GtkTextIter PTR, BYVAL AS gint) AS gboolean
DECLARE FUNCTION gtk_text_view_place_cursor_onscreen(BYVAL AS GtkTextView PTR) AS gboolean
DECLARE SUB gtk_text_view_reset_cursor_blink(BYVAL AS GtkTextView PTR)
DECLARE SUB gtk_text_view_reset_im_context(BYVAL AS GtkTextView PTR)
DECLARE SUB gtk_text_view_scroll_mark_onscreen(BYVAL AS GtkTextView PTR, BYVAL AS GtkTextMark PTR)
DECLARE FUNCTION gtk_text_view_scroll_to_iter(BYVAL AS GtkTextView PTR, BYVAL AS GtkTextIter PTR, BYVAL AS gdouble, BYVAL AS gboolean, BYVAL AS gdouble, BYVAL AS gdouble) AS gboolean
DECLARE SUB gtk_text_view_scroll_to_mark(BYVAL AS GtkTextView PTR, BYVAL AS GtkTextMark PTR, BYVAL AS gdouble, BYVAL AS gboolean, BYVAL AS gdouble, BYVAL AS gdouble)
DECLARE SUB gtk_text_view_set_accepts_tab(BYVAL AS GtkTextView PTR, BYVAL AS gboolean)
DECLARE SUB gtk_text_view_set_border_window_size(BYVAL AS GtkTextView PTR, BYVAL AS GtkTextWindowType, BYVAL AS gint)
DECLARE SUB gtk_text_view_set_bottom_margin(BYVAL AS GtkTextView PTR, BYVAL AS gint)
DECLARE SUB gtk_text_view_set_buffer(BYVAL AS GtkTextView PTR, BYVAL AS GtkTextBuffer PTR)
DECLARE SUB gtk_text_view_set_cursor_visible(BYVAL AS GtkTextView PTR, BYVAL AS gboolean)
DECLARE SUB gtk_text_view_set_editable(BYVAL AS GtkTextView PTR, BYVAL AS gboolean)
DECLARE SUB gtk_text_view_set_indent(BYVAL AS GtkTextView PTR, BYVAL AS gint)
DECLARE SUB gtk_text_view_set_input_hints(BYVAL AS GtkTextView PTR, BYVAL AS GtkInputHints)
DECLARE SUB gtk_text_view_set_input_purpose(BYVAL AS GtkTextView PTR, BYVAL AS GtkInputPurpose)
DECLARE SUB gtk_text_view_set_justification(BYVAL AS GtkTextView PTR, BYVAL AS GtkJustification)
DECLARE SUB gtk_text_view_set_left_margin(BYVAL AS GtkTextView PTR, BYVAL AS gint)
DECLARE SUB gtk_text_view_set_monospace(BYVAL AS GtkTextView PTR, BYVAL AS gboolean)
DECLARE SUB gtk_text_view_set_overwrite(BYVAL AS GtkTextView PTR, BYVAL AS gboolean)
DECLARE SUB gtk_text_view_set_pixels_above_lines(BYVAL AS GtkTextView PTR, BYVAL AS gint)
DECLARE SUB gtk_text_view_set_pixels_below_lines(BYVAL AS GtkTextView PTR, BYVAL AS gint)
DECLARE SUB gtk_text_view_set_pixels_inside_wrap(BYVAL AS GtkTextView PTR, BYVAL AS gint)
DECLARE SUB gtk_text_view_set_right_margin(BYVAL AS GtkTextView PTR, BYVAL AS gint)
DECLARE SUB gtk_text_view_set_tabs(BYVAL AS GtkTextView PTR, BYVAL AS PangoTabArray PTR)
DECLARE SUB gtk_text_view_set_top_margin(BYVAL AS GtkTextView PTR, BYVAL AS gint)
DECLARE SUB gtk_text_view_set_wrap_mode(BYVAL AS GtkTextView PTR, BYVAL AS GtkWrapMode)
DECLARE FUNCTION gtk_text_view_starts_display_line(BYVAL AS GtkTextView PTR, BYVAL AS const GtkTextIter PTR) AS gboolean
DECLARE SUB gtk_text_view_window_to_buffer_coords(BYVAL AS GtkTextView PTR, BYVAL AS GtkTextWindowType, BYVAL AS gint, BYVAL AS gint, BYVAL AS gint PTR, BYVAL AS gint PTR)
TYPE _GtkTextViewAccessible
  AS GtkContainerAccessible parent
  AS GtkTextViewAccessiblePrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_text_view_accessible_get_type() AS GType
#DEFINE GTK_TYPE_TEXT_VIEW_ACCESSIBLE (gtk_text_view_accessible_get_type())
#DEFINE GTK_TEXT_VIEW_ACCESSIBLE(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_TEXT_VIEW_ACCESSIBLE, GtkTextViewAccessible))
#DEFINE GTK_TEXT_VIEW_ACCESSIBLE_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_TEXT_VIEW_ACCESSIBLE, GtkTextViewAccessibleClass))
#DEFINE GTK_IS_TEXT_VIEW_ACCESSIBLE(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_TEXT_VIEW_ACCESSIBLE))
#DEFINE GTK_IS_CLASS_TEXT_VIEW_ACCESSIBLE(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_TEXT_VIEW_ACCESSIBLE))
#DEFINE GTK_TEXT_VIEW_ACCESSIBLE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_TEXT_VIEW_ACCESSIBLE, GtkTextViewAccessibleClass))
TYPE _GtkTextViewAccessibleClass
  AS GtkContainerAccessibleClass parent_class
END TYPE
TYPE _GtkTextViewClass
  AS GtkContainerClass parent_class
  populate_popup AS SUB CDECL(BYVAL AS GtkTextView PTR, BYVAL AS GtkWidget PTR)
  move_cursor AS SUB CDECL(BYVAL AS GtkTextView PTR, BYVAL AS GtkMovementStep, BYVAL AS gint, BYVAL AS gboolean)
  set_anchor AS SUB CDECL(BYVAL AS GtkTextView PTR)
  insert_at_cursor AS SUB CDECL(BYVAL AS GtkTextView PTR, BYVAL AS const gchar PTR)
  delete_from_cursor AS SUB CDECL(BYVAL AS GtkTextView PTR, BYVAL AS GtkDeleteType, BYVAL AS gint)
  backspace AS SUB CDECL(BYVAL AS GtkTextView PTR)
  cut_clipboard AS SUB CDECL(BYVAL AS GtkTextView PTR)
  copy_clipboard AS SUB CDECL(BYVAL AS GtkTextView PTR)
  paste_clipboard AS SUB CDECL(BYVAL AS GtkTextView PTR)
  toggle_overwrite AS SUB CDECL(BYVAL AS GtkTextView PTR)
  create_buffer AS FUNCTION CDECL(BYVAL AS GtkTextView PTR) AS GtkTextBuffer PTR
  draw_layer AS SUB CDECL(BYVAL AS GtkTextView PTR, BYVAL AS GtkTextViewLayer, BYVAL AS cairo_t PTR)
  extend_selection AS FUNCTION CDECL(BYVAL AS GtkTextView PTR, BYVAL AS GtkTextExtendSelection, BYVAL AS const GtkTextIter PTR, BYVAL AS GtkTextIter PTR, BYVAL AS GtkTextIter PTR) AS gboolean
  insert_emoji AS SUB CDECL(BYVAL AS GtkTextView PTR)
  _gtk_reserved1 AS SUB CDECL()
  _gtk_reserved2 AS SUB CDECL()
  _gtk_reserved3 AS SUB CDECL()
  _gtk_reserved4 AS SUB CDECL()
END TYPE
DECLARE FUNCTION gtk_text_view_layer_get_type() AS GType
#DEFINE GTK_TYPE_TEXT_VIEW_LAYER (gtk_text_view_layer_get_type())
DECLARE FUNCTION gtk_text_window_type_get_type() AS GType
#DEFINE GTK_TYPE_TEXT_WINDOW_TYPE (gtk_text_window_type_get_type())
TYPE _GtkThemingEngine
  AS GObject parent_object
  AS GtkThemingEnginePrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_theming_engine_get_type() AS GType
#DEFINE GTK_TYPE_THEMING_ENGINE (gtk_theming_engine_get_type())
#DEFINE GTK_THEMING_ENGINE(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_THEMING_ENGINE, GtkThemingEngine))
#DEFINE GTK_THEMING_ENGINE_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_THEMING_ENGINE, GtkThemingEngineClass))
#DEFINE GTK_IS_THEMING_ENGINE(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_THEMING_ENGINE))
#DEFINE GTK_IS_CLASS_THEMING_ENGINE(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_THEMING_ENGINE))
#DEFINE GTK_THEMING_ENGINE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_THEMING_ENGINE, GtkThemingEngineClass))
DECLARE FUNCTION gtk_theming_engine_load(BYVAL AS const gchar PTR) AS GtkThemingEngine PTR
DECLARE SUB gtk_theming_engine_register_property(BYVAL AS const gchar PTR, BYVAL AS GtkStylePropertyParser, BYVAL AS GParamSpec PTR)
DECLARE SUB gtk_theming_engine_get(BYVAL AS GtkThemingEngine PTR, BYVAL AS GtkStateFlags, ...)
DECLARE SUB gtk_theming_engine_get_background_color(BYVAL AS GtkThemingEngine PTR, BYVAL AS GtkStateFlags, BYVAL AS GdkRGBA PTR)
DECLARE SUB gtk_theming_engine_get_border(BYVAL AS GtkThemingEngine PTR, BYVAL AS GtkStateFlags, BYVAL AS GtkBorder PTR)
DECLARE SUB gtk_theming_engine_get_border_color(BYVAL AS GtkThemingEngine PTR, BYVAL AS GtkStateFlags, BYVAL AS GdkRGBA PTR)
DECLARE SUB gtk_theming_engine_get_color(BYVAL AS GtkThemingEngine PTR, BYVAL AS GtkStateFlags, BYVAL AS GdkRGBA PTR)
DECLARE FUNCTION gtk_theming_engine_get_direction(BYVAL AS GtkThemingEngine PTR) AS GtkTextDirection
DECLARE FUNCTION gtk_theming_engine_get_font(BYVAL AS GtkThemingEngine PTR, BYVAL AS GtkStateFlags) AS const PangoFontDescription PTR
DECLARE FUNCTION gtk_theming_engine_get_junction_sides(BYVAL AS GtkThemingEngine PTR) AS GtkJunctionSides
DECLARE SUB gtk_theming_engine_get_margin(BYVAL AS GtkThemingEngine PTR, BYVAL AS GtkStateFlags, BYVAL AS GtkBorder PTR)
DECLARE SUB gtk_theming_engine_get_padding(BYVAL AS GtkThemingEngine PTR, BYVAL AS GtkStateFlags, BYVAL AS GtkBorder PTR)
DECLARE FUNCTION gtk_theming_engine_get_path(BYVAL AS GtkThemingEngine PTR) AS const GtkWidgetPath PTR
DECLARE SUB gtk_theming_engine_get_property(BYVAL AS GtkThemingEngine PTR, BYVAL AS const gchar PTR, BYVAL AS GtkStateFlags, BYVAL AS GValue PTR)
DECLARE FUNCTION gtk_theming_engine_get_screen(BYVAL AS GtkThemingEngine PTR) AS GdkScreen PTR
DECLARE FUNCTION gtk_theming_engine_get_state(BYVAL AS GtkThemingEngine PTR) AS GtkStateFlags
DECLARE SUB gtk_theming_engine_get_style(BYVAL AS GtkThemingEngine PTR, ...)
DECLARE SUB gtk_theming_engine_get_style_property(BYVAL AS GtkThemingEngine PTR, BYVAL AS const gchar PTR, BYVAL AS GValue PTR)
DECLARE SUB gtk_theming_engine_get_style_valist(BYVAL AS GtkThemingEngine PTR, BYVAL AS va_list)
DECLARE SUB gtk_theming_engine_get_valist(BYVAL AS GtkThemingEngine PTR, BYVAL AS GtkStateFlags, BYVAL AS va_list)
DECLARE FUNCTION gtk_theming_engine_has_class(BYVAL AS GtkThemingEngine PTR, BYVAL AS const gchar PTR) AS gboolean
DECLARE FUNCTION gtk_theming_engine_has_region(BYVAL AS GtkThemingEngine PTR, BYVAL AS const gchar PTR, BYVAL AS GtkRegionFlags PTR) AS gboolean
DECLARE FUNCTION gtk_theming_engine_lookup_color(BYVAL AS GtkThemingEngine PTR, BYVAL AS const gchar PTR, BYVAL AS GdkRGBA PTR) AS gboolean
DECLARE FUNCTION gtk_theming_engine_state_is_running(BYVAL AS GtkThemingEngine PTR, BYVAL AS GtkStateType, BYVAL AS gdouble PTR) AS gboolean
TYPE _GtkThemingEngineClass
  AS GObjectClass parent_class
  render_line AS SUB CDECL(BYVAL AS GtkThemingEngine PTR, BYVAL AS cairo_t PTR, BYVAL AS gdouble, BYVAL AS gdouble, BYVAL AS gdouble, BYVAL AS gdouble)
  render_background AS SUB CDECL(BYVAL AS GtkThemingEngine PTR, BYVAL AS cairo_t PTR, BYVAL AS gdouble, BYVAL AS gdouble, BYVAL AS gdouble, BYVAL AS gdouble)
  render_frame AS SUB CDECL(BYVAL AS GtkThemingEngine PTR, BYVAL AS cairo_t PTR, BYVAL AS gdouble, BYVAL AS gdouble, BYVAL AS gdouble, BYVAL AS gdouble)
  render_frame_gap AS SUB CDECL(BYVAL AS GtkThemingEngine PTR, BYVAL AS cairo_t PTR, BYVAL AS gdouble, BYVAL AS gdouble, BYVAL AS gdouble, BYVAL AS gdouble, BYVAL AS GtkPositionType, BYVAL AS gdouble, BYVAL AS gdouble)
  render_extension AS SUB CDECL(BYVAL AS GtkThemingEngine PTR, BYVAL AS cairo_t PTR, BYVAL AS gdouble, BYVAL AS gdouble, BYVAL AS gdouble, BYVAL AS gdouble, BYVAL AS GtkPositionType)
  render_check AS SUB CDECL(BYVAL AS GtkThemingEngine PTR, BYVAL AS cairo_t PTR, BYVAL AS gdouble, BYVAL AS gdouble, BYVAL AS gdouble, BYVAL AS gdouble)
  render_option AS SUB CDECL(BYVAL AS GtkThemingEngine PTR, BYVAL AS cairo_t PTR, BYVAL AS gdouble, BYVAL AS gdouble, BYVAL AS gdouble, BYVAL AS gdouble)
  render_arrow AS SUB CDECL(BYVAL AS GtkThemingEngine PTR, BYVAL AS cairo_t PTR, BYVAL AS gdouble, BYVAL AS gdouble, BYVAL AS gdouble, BYVAL AS gdouble)
  render_expander AS SUB CDECL(BYVAL AS GtkThemingEngine PTR, BYVAL AS cairo_t PTR, BYVAL AS gdouble, BYVAL AS gdouble, BYVAL AS gdouble, BYVAL AS gdouble)
  render_focus AS SUB CDECL(BYVAL AS GtkThemingEngine PTR, BYVAL AS cairo_t PTR, BYVAL AS gdouble, BYVAL AS gdouble, BYVAL AS gdouble, BYVAL AS gdouble)
  render_layout AS SUB CDECL(BYVAL AS GtkThemingEngine PTR, BYVAL AS cairo_t PTR, BYVAL AS gdouble, BYVAL AS gdouble, BYVAL AS PangoLayout PTR)
  render_slider AS SUB CDECL(BYVAL AS GtkThemingEngine PTR, BYVAL AS cairo_t PTR, BYVAL AS gdouble, BYVAL AS gdouble, BYVAL AS gdouble, BYVAL AS gdouble, BYVAL AS GtkOrientation)
  render_handle AS SUB CDECL(BYVAL AS GtkThemingEngine PTR, BYVAL AS cairo_t PTR, BYVAL AS gdouble, BYVAL AS gdouble, BYVAL AS gdouble, BYVAL AS gdouble)
  render_activity AS SUB CDECL(BYVAL AS GtkThemingEngine PTR, BYVAL AS cairo_t PTR, BYVAL AS gdouble, BYVAL AS gdouble, BYVAL AS gdouble, BYVAL AS gdouble)
  render_icon_pixbuf AS FUNCTION CDECL(BYVAL AS GtkThemingEngine PTR, BYVAL AS const GtkIconSource PTR, BYVAL AS GtkIconSize) AS GdkPixbuf PTR
  render_icon AS SUB CDECL(BYVAL AS GtkThemingEngine PTR, BYVAL AS cairo_t PTR, BYVAL AS GdkPixbuf PTR, BYVAL AS gdouble, BYVAL AS gdouble)
  render_icon_surface AS SUB CDECL(BYVAL AS GtkThemingEngine PTR, BYVAL AS cairo_t PTR, BYVAL AS cairo_surface_t PTR, BYVAL AS gdouble, BYVAL AS gdouble)
  AS gpointer padding(13)
END TYPE
TYPE _GtkToggleActionEntry
  AS const gchar PTR name
  AS const gchar PTR stock_id
  AS const gchar PTR label
  AS const gchar PTR accelerator
  AS const gchar PTR tooltip
  AS GCallback callback
  AS gboolean is_active
END TYPE
TYPE _GtkToolItemGroup
  AS GtkContainer parent_instance
  AS GtkToolItemGroupPrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_tool_item_group_get_type() AS GType
#DEFINE GTK_TYPE_TOOL_ITEM_GROUP (gtk_tool_item_group_get_type())
#DEFINE GTK_TOOL_ITEM_GROUP(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_TOOL_ITEM_GROUP, GtkToolItemGroup))
#DEFINE GTK_TOOL_ITEM_GROUP_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_TOOL_ITEM_GROUP, GtkToolItemGroupClass))
#DEFINE GTK_IS_TOOL_ITEM_GROUP(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_TOOL_ITEM_GROUP))
#DEFINE GTK_IS_CLASS_TOOL_ITEM_GROUP(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_TOOL_ITEM_GROUP))
#DEFINE GTK_TOOL_ITEM_GROUP_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_TOOL_ITEM_GROUP, GtkToolItemGroupClass))
DECLARE FUNCTION gtk_tool_item_group_new(BYVAL AS const gchar PTR) AS GtkWidget PTR
DECLARE FUNCTION gtk_tool_item_group_get_collapsed(BYVAL AS GtkToolItemGroup PTR) AS gboolean
DECLARE FUNCTION gtk_tool_item_group_get_drop_item(BYVAL AS GtkToolItemGroup PTR, BYVAL AS gint, BYVAL AS gint) AS GtkToolItem PTR
DECLARE FUNCTION gtk_tool_item_group_get_ellipsize(BYVAL AS GtkToolItemGroup PTR) AS PangoEllipsizeMode
DECLARE FUNCTION gtk_tool_item_group_get_header_relief(BYVAL AS GtkToolItemGroup PTR) AS GtkReliefStyle
DECLARE FUNCTION gtk_tool_item_group_get_item_position(BYVAL AS GtkToolItemGroup PTR, BYVAL AS GtkToolItem PTR) AS gint
DECLARE FUNCTION gtk_tool_item_group_get_label(BYVAL AS GtkToolItemGroup PTR) AS const gchar PTR
DECLARE FUNCTION gtk_tool_item_group_get_label_widget(BYVAL AS GtkToolItemGroup PTR) AS GtkWidget PTR
DECLARE FUNCTION gtk_tool_item_group_get_n_items(BYVAL AS GtkToolItemGroup PTR) AS guint
DECLARE FUNCTION gtk_tool_item_group_get_nth_item(BYVAL AS GtkToolItemGroup PTR, BYVAL AS guint) AS GtkToolItem PTR
DECLARE SUB gtk_tool_item_group_insert(BYVAL AS GtkToolItemGroup PTR, BYVAL AS GtkToolItem PTR, BYVAL AS gint)
DECLARE SUB gtk_tool_item_group_set_collapsed(BYVAL AS GtkToolItemGroup PTR, BYVAL AS gboolean)
DECLARE SUB gtk_tool_item_group_set_ellipsize(BYVAL AS GtkToolItemGroup PTR, BYVAL AS PangoEllipsizeMode)
DECLARE SUB gtk_tool_item_group_set_header_relief(BYVAL AS GtkToolItemGroup PTR, BYVAL AS GtkReliefStyle)
DECLARE SUB gtk_tool_item_group_set_item_position(BYVAL AS GtkToolItemGroup PTR, BYVAL AS GtkToolItem PTR, BYVAL AS gint)
DECLARE SUB gtk_tool_item_group_set_label(BYVAL AS GtkToolItemGroup PTR, BYVAL AS const gchar PTR)
DECLARE SUB gtk_tool_item_group_set_label_widget(BYVAL AS GtkToolItemGroup PTR, BYVAL AS GtkWidget PTR)
TYPE _GtkToolItemGroupClass
  AS GtkContainerClass parent_class
  _gtk_reserved1 AS SUB CDECL()
  _gtk_reserved2 AS SUB CDECL()
  _gtk_reserved3 AS SUB CDECL()
  _gtk_reserved4 AS SUB CDECL()
END TYPE
TYPE _GtkToolPalette
  AS GtkContainer parent_instance
  AS GtkToolPalettePrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_tool_palette_get_type() AS GType
#DEFINE GTK_TYPE_TOOL_PALETTE (gtk_tool_palette_get_type())
#DEFINE GTK_TOOL_PALETTE(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_TOOL_PALETTE, GtkToolPalette))
#DEFINE GTK_TOOL_PALETTE_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_TOOL_PALETTE, GtkToolPaletteClass))
#DEFINE GTK_IS_TOOL_PALETTE(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_TOOL_PALETTE))
#DEFINE GTK_IS_CLASS_TOOL_PALETTE(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_TOOL_PALETTE))
#DEFINE GTK_TOOL_PALETTE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_TOOL_PALETTE, GtkToolPaletteClass))
DECLARE FUNCTION gtk_tool_palette_new() AS GtkWidget PTR
DECLARE FUNCTION gtk_tool_palette_get_drag_target_group() AS const GtkTargetEntry PTR
DECLARE FUNCTION gtk_tool_palette_get_drag_target_item() AS const GtkTargetEntry PTR
DECLARE SUB gtk_tool_palette_add_drag_dest(BYVAL AS GtkToolPalette PTR, BYVAL AS GtkWidget PTR, BYVAL AS GtkDestDefaults, BYVAL AS GtkToolPaletteDragTargets, BYVAL AS GdkDragAction)
DECLARE FUNCTION gtk_tool_palette_get_drag_item(BYVAL AS GtkToolPalette PTR, BYVAL AS const GtkSelectionData PTR) AS GtkWidget PTR
DECLARE FUNCTION gtk_tool_palette_get_drop_group(BYVAL AS GtkToolPalette PTR, BYVAL AS gint, BYVAL AS gint) AS GtkToolItemGroup PTR
DECLARE FUNCTION gtk_tool_palette_get_drop_item(BYVAL AS GtkToolPalette PTR, BYVAL AS gint, BYVAL AS gint) AS GtkToolItem PTR
DECLARE FUNCTION gtk_tool_palette_get_exclusive(BYVAL AS GtkToolPalette PTR, BYVAL AS GtkToolItemGroup PTR) AS gboolean
DECLARE FUNCTION gtk_tool_palette_get_expand(BYVAL AS GtkToolPalette PTR, BYVAL AS GtkToolItemGroup PTR) AS gboolean
DECLARE FUNCTION gtk_tool_palette_get_group_position(BYVAL AS GtkToolPalette PTR, BYVAL AS GtkToolItemGroup PTR) AS gint
DECLARE FUNCTION gtk_tool_palette_get_hadjustment(BYVAL AS GtkToolPalette PTR) AS GtkAdjustment PTR
DECLARE FUNCTION gtk_tool_palette_get_icon_size(BYVAL AS GtkToolPalette PTR) AS GtkIconSize
DECLARE FUNCTION gtk_tool_palette_get_style(BYVAL AS GtkToolPalette PTR) AS GtkToolbarStyle
DECLARE FUNCTION gtk_tool_palette_get_vadjustment(BYVAL AS GtkToolPalette PTR) AS GtkAdjustment PTR
DECLARE SUB gtk_tool_palette_set_drag_source(BYVAL AS GtkToolPalette PTR, BYVAL AS GtkToolPaletteDragTargets)
DECLARE SUB gtk_tool_palette_set_exclusive(BYVAL AS GtkToolPalette PTR, BYVAL AS GtkToolItemGroup PTR, BYVAL AS gboolean)
DECLARE SUB gtk_tool_palette_set_expand(BYVAL AS GtkToolPalette PTR, BYVAL AS GtkToolItemGroup PTR, BYVAL AS gboolean)
DECLARE SUB gtk_tool_palette_set_group_position(BYVAL AS GtkToolPalette PTR, BYVAL AS GtkToolItemGroup PTR, BYVAL AS gint)
DECLARE SUB gtk_tool_palette_set_icon_size(BYVAL AS GtkToolPalette PTR, BYVAL AS GtkIconSize)
DECLARE SUB gtk_tool_palette_set_style(BYVAL AS GtkToolPalette PTR, BYVAL AS GtkToolbarStyle)
DECLARE SUB gtk_tool_palette_unset_icon_size(BYVAL AS GtkToolPalette PTR)
DECLARE SUB gtk_tool_palette_unset_style(BYVAL AS GtkToolPalette PTR)
TYPE _GtkToolPaletteClass
  AS GtkContainerClass parent_class
  _gtk_reserved1 AS SUB CDECL()
  _gtk_reserved2 AS SUB CDECL()
  _gtk_reserved3 AS SUB CDECL()
  _gtk_reserved4 AS SUB CDECL()
END TYPE
DECLARE FUNCTION gtk_tool_shell_get_type() AS GType
#DEFINE GTK_TYPE_TOOL_SHELL (gtk_tool_shell_get_type())
#DEFINE GTK_TOOL_SHELL(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_TOOL_SHELL, GtkToolShell))
#DEFINE GTK_TOOL_SHELL_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_TOOL_SHELL, GtkToolShellIface))
#DEFINE GTK_IS_TOOL_SHELL(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_TOOL_SHELL))
#DEFINE GTK_TOOL_SHELL_GET_IFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE((obj), GTK_TYPE_TOOL_SHELL, GtkToolShellIface))
DECLARE FUNCTION gtk_tool_shell_get_ellipsize_mode(BYVAL AS GtkToolShell PTR) AS PangoEllipsizeMode
DECLARE FUNCTION gtk_tool_shell_get_icon_size(BYVAL AS GtkToolShell PTR) AS GtkIconSize
DECLARE FUNCTION gtk_tool_shell_get_orientation(BYVAL AS GtkToolShell PTR) AS GtkOrientation
DECLARE FUNCTION gtk_tool_shell_get_relief_style(BYVAL AS GtkToolShell PTR) AS GtkReliefStyle
DECLARE FUNCTION gtk_tool_shell_get_style(BYVAL AS GtkToolShell PTR) AS GtkToolbarStyle
DECLARE FUNCTION gtk_tool_shell_get_text_alignment(BYVAL AS GtkToolShell PTR) AS gfloat
DECLARE FUNCTION gtk_tool_shell_get_text_orientation(BYVAL AS GtkToolShell PTR) AS GtkOrientation
DECLARE FUNCTION gtk_tool_shell_get_text_size_group(BYVAL AS GtkToolShell PTR) AS GtkSizeGroup PTR
DECLARE SUB gtk_tool_shell_rebuild_menu(BYVAL AS GtkToolShell PTR)
TYPE _GtkToolShellIface
  AS GTypeInterface g_iface
  get_icon_size AS FUNCTION CDECL(BYVAL AS GtkToolShell PTR) AS GtkIconSize
  get_orientation AS FUNCTION CDECL(BYVAL AS GtkToolShell PTR) AS GtkOrientation
  get_style AS FUNCTION CDECL(BYVAL AS GtkToolShell PTR) AS GtkToolbarStyle
  get_relief_style AS FUNCTION CDECL(BYVAL AS GtkToolShell PTR) AS GtkReliefStyle
  rebuild_menu AS SUB CDECL(BYVAL AS GtkToolShell PTR)
  get_text_orientation AS FUNCTION CDECL(BYVAL AS GtkToolShell PTR) AS GtkOrientation
  get_text_alignment AS FUNCTION CDECL(BYVAL AS GtkToolShell PTR) AS gfloat
  get_ellipsize_mode AS FUNCTION CDECL(BYVAL AS GtkToolShell PTR) AS PangoEllipsizeMode
  get_text_size_group AS FUNCTION CDECL(BYVAL AS GtkToolShell PTR) AS GtkSizeGroup PTR
END TYPE
TYPE _GtkToolbar
  AS GtkContainer container
  AS GtkToolbarPrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_toolbar_get_type() AS GType
#DEFINE GTK_TYPE_TOOLBAR (gtk_toolbar_get_type())
#DEFINE GTK_TOOLBAR(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_TOOLBAR, GtkToolbar))
#DEFINE GTK_TOOLBAR_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_TOOLBAR, GtkToolbarClass))
#DEFINE GTK_IS_TOOLBAR(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_TOOLBAR))
#DEFINE GTK_IS_CLASS_TOOLBAR(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_TOOLBAR))
#DEFINE GTK_TOOLBAR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_TOOLBAR, GtkToolbarClass))
DECLARE FUNCTION gtk_toolbar_new() AS GtkWidget PTR
DECLARE FUNCTION gtk_toolbar_get_drop_index(BYVAL AS GtkToolbar PTR, BYVAL AS gint, BYVAL AS gint) AS gint
DECLARE FUNCTION gtk_toolbar_get_icon_size(BYVAL AS GtkToolbar PTR) AS GtkIconSize
DECLARE FUNCTION gtk_toolbar_get_item_index(BYVAL AS GtkToolbar PTR, BYVAL AS GtkToolItem PTR) AS gint
DECLARE FUNCTION gtk_toolbar_get_n_items(BYVAL AS GtkToolbar PTR) AS gint
DECLARE FUNCTION gtk_toolbar_get_nth_item(BYVAL AS GtkToolbar PTR, BYVAL AS gint) AS GtkToolItem PTR
DECLARE FUNCTION gtk_toolbar_get_relief_style(BYVAL AS GtkToolbar PTR) AS GtkReliefStyle
DECLARE FUNCTION gtk_toolbar_get_show_arrow(BYVAL AS GtkToolbar PTR) AS gboolean
DECLARE FUNCTION gtk_toolbar_get_style(BYVAL AS GtkToolbar PTR) AS GtkToolbarStyle
DECLARE SUB gtk_toolbar_insert(BYVAL AS GtkToolbar PTR, BYVAL AS GtkToolItem PTR, BYVAL AS gint)
DECLARE SUB gtk_toolbar_set_drop_highlight_item(BYVAL AS GtkToolbar PTR, BYVAL AS GtkToolItem PTR, BYVAL AS gint)
DECLARE SUB gtk_toolbar_set_icon_size(BYVAL AS GtkToolbar PTR, BYVAL AS GtkIconSize)
DECLARE SUB gtk_toolbar_set_show_arrow(BYVAL AS GtkToolbar PTR, BYVAL AS gboolean)
DECLARE SUB gtk_toolbar_set_style(BYVAL AS GtkToolbar PTR, BYVAL AS GtkToolbarStyle)
DECLARE SUB gtk_toolbar_unset_icon_size(BYVAL AS GtkToolbar PTR)
DECLARE SUB gtk_toolbar_unset_style(BYVAL AS GtkToolbar PTR)
TYPE _GtkToolbarClass
  AS GtkContainerClass parent_class
  orientation_changed AS SUB CDECL(BYVAL AS GtkToolbar PTR, BYVAL AS GtkOrientation)
  style_changed AS SUB CDECL(BYVAL AS GtkToolbar PTR, BYVAL AS GtkToolbarStyle)
  popup_context_menu AS FUNCTION CDECL(BYVAL AS GtkToolbar PTR, BYVAL AS gint, BYVAL AS gint, BYVAL AS gint) AS gboolean
  _gtk_reserved1 AS SUB CDECL()
  _gtk_reserved2 AS SUB CDECL()
  _gtk_reserved3 AS SUB CDECL()
  _gtk_reserved4 AS SUB CDECL()
END TYPE
DECLARE FUNCTION gtk_toolbar_space_style_get_type() AS GType
#DEFINE GTK_TYPE_TOOLBAR_SPACE_STYLE (gtk_toolbar_space_style_get_type())
DECLARE FUNCTION gtk_toolbar_style_get_type() AS GType
#DEFINE GTK_TYPE_TOOLBAR_STYLE (gtk_toolbar_style_get_type())
DECLARE FUNCTION gtk_tooltip_get_type() AS GType
#DEFINE GTK_TYPE_TOOLTIP (gtk_tooltip_get_type())
#DEFINE GTK_TOOLTIP(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_TOOLTIP, GtkTooltip))
#DEFINE GTK_TOOLTIP_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_TOOLTIP, Gtk))
#DEFINE GTK_IS_TOOLTIP(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_TOOLTIP))
#DEFINE GTK_IS_CLASS_TOOLTIP(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_TOOLTIP))
#DEFINE GTK_TOOLTIP_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_TOOLTIP, Gtk))
DECLARE SUB gtk_tooltip_trigger_tooltip_query(BYVAL AS GdkDisplay PTR)
DECLARE SUB gtk_tooltip_set_custom(BYVAL AS GtkTooltip PTR, BYVAL AS GtkWidget PTR)
DECLARE SUB gtk_tooltip_set_icon(BYVAL AS GtkTooltip PTR, BYVAL AS GdkPixbuf PTR)
DECLARE SUB gtk_tooltip_set_icon_from_gicon(BYVAL AS GtkTooltip PTR, BYVAL AS GIcon PTR, BYVAL AS GtkIconSize)
DECLARE SUB gtk_tooltip_set_icon_from_icon_name(BYVAL AS GtkTooltip PTR, BYVAL AS const gchar PTR, BYVAL AS GtkIconSize)
DECLARE SUB gtk_tooltip_set_icon_from_stock(BYVAL AS GtkTooltip PTR, BYVAL AS const gchar PTR, BYVAL AS GtkIconSize)
DECLARE SUB gtk_tooltip_set_markup(BYVAL AS GtkTooltip PTR, BYVAL AS const gchar PTR)
DECLARE SUB gtk_tooltip_set_text(BYVAL AS GtkTooltip PTR, BYVAL AS const gchar PTR)
DECLARE SUB gtk_tooltip_set_tip_area(BYVAL AS GtkTooltip PTR, BYVAL AS const GdkRectangle PTR)
TYPE _GtkToplevelAccessible
  AS AtkObject parent
  AS GtkToplevelAccessiblePrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_toplevel_accessible_get_type() AS GType
#DEFINE GTK_TYPE_TOPLEVEL_ACCESSIBLE (gtk_toplevel_accessible_get_type())
#DEFINE GTK_TOPLEVEL_ACCESSIBLE(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_TOPLEVEL_ACCESSIBLE, GtkToplevelAccessible))
#DEFINE GTK_TOPLEVEL_ACCESSIBLE_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_TOPLEVEL_ACCESSIBLE, GtkToplevelAccessibleClass))
#DEFINE GTK_IS_TOPLEVEL_ACCESSIBLE(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_TOPLEVEL_ACCESSIBLE))
#DEFINE GTK_IS_CLASS_TOPLEVEL_ACCESSIBLE(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_TOPLEVEL_ACCESSIBLE))
#DEFINE GTK_TOPLEVEL_ACCESSIBLE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_TOPLEVEL_ACCESSIBLE, GtkToplevelAccessibleClass))
DECLARE FUNCTION gtk_toplevel_accessible_get_children(BYVAL AS GtkToplevelAccessible PTR) AS GList PTR
TYPE _GtkToplevelAccessibleClass
  AS AtkObjectClass parent_class
END TYPE
TYPE GtkTreeCellDataFunc AS SUB CDECL(BYVAL AS GtkTreeViewColumn PTR, BYVAL AS GtkCellRenderer PTR, BYVAL AS GtkTreeModel PTR, BYVAL AS GtkTreeIter PTR, BYVAL AS gpointer)
TYPE GtkTreeDestroyCountFunc AS SUB CDECL(BYVAL AS GtkTreeView PTR, BYVAL AS GtkTreePath PTR, BYVAL AS gint, BYVAL AS gpointer)
DECLARE FUNCTION gtk_tree_drag_dest_get_type() AS GType
#DEFINE GTK_TYPE_TREE_DRAG_DEST (gtk_tree_drag_dest_get_type())
#DEFINE GTK_TREE_DRAG_DEST(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_TREE_DRAG_DEST, GtkTreeDragDest))
#DEFINE GTK_TREE_DRAG_DEST_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_TREE_DRAG_DEST, GtkTreeDragDestIface))
#DEFINE GTK_IS_TREE_DRAG_DEST(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_TREE_DRAG_DEST))
#DEFINE GTK_TREE_DRAG_DEST_GET_IFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE((obj), GTK_TYPE_TREE_DRAG_DEST, GtkTreeDragDestIface))
DECLARE FUNCTION gtk_tree_drag_dest_drag_data_received(BYVAL AS GtkTreeDragDest PTR, BYVAL AS GtkTreePath PTR, BYVAL AS GtkSelectionData PTR) AS gboolean
DECLARE FUNCTION gtk_tree_drag_dest_row_drop_possible(BYVAL AS GtkTreeDragDest PTR, BYVAL AS GtkTreePath PTR, BYVAL AS GtkSelectionData PTR) AS gboolean
TYPE _GtkTreeDragDestIface
  AS GTypeInterface g_iface
  drag_data_received AS FUNCTION CDECL(BYVAL AS GtkTreeDragDest PTR, BYVAL AS GtkTreePath PTR, BYVAL AS GtkSelectionData PTR) AS gboolean
  row_drop_possible AS FUNCTION CDECL(BYVAL AS GtkTreeDragDest PTR, BYVAL AS GtkTreePath PTR, BYVAL AS GtkSelectionData PTR) AS gboolean
END TYPE
DECLARE FUNCTION gtk_tree_drag_source_get_type() AS GType
#DEFINE GTK_TYPE_TREE_DRAG_SOURCE (gtk_tree_drag_source_get_type())
#DEFINE GTK_TREE_DRAG_SOURCE(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_TREE_DRAG_SOURCE, GtkTreeDragSource))
#DEFINE GTK_TREE_DRAG_SOURCE_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_TREE_DRAG_SOURCE, GtkTreeDragSourceIface))
#DEFINE GTK_IS_TREE_DRAG_SOURCE(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_TREE_DRAG_SOURCE))
#DEFINE GTK_TREE_DRAG_SOURCE_GET_IFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE((obj), GTK_TYPE_TREE_DRAG_SOURCE, GtkTreeDragSourceIface))
DECLARE FUNCTION gtk_tree_drag_source_drag_data_delete(BYVAL AS GtkTreeDragSource PTR, BYVAL AS GtkTreePath PTR) AS gboolean
DECLARE FUNCTION gtk_tree_drag_source_drag_data_get(BYVAL AS GtkTreeDragSource PTR, BYVAL AS GtkTreePath PTR, BYVAL AS GtkSelectionData PTR) AS gboolean
DECLARE FUNCTION gtk_tree_drag_source_row_draggable(BYVAL AS GtkTreeDragSource PTR, BYVAL AS GtkTreePath PTR) AS gboolean
TYPE _GtkTreeDragSourceIface
  AS GTypeInterface g_iface
  row_draggable AS FUNCTION CDECL(BYVAL AS GtkTreeDragSource PTR, BYVAL AS GtkTreePath PTR) AS gboolean
  drag_data_get AS FUNCTION CDECL(BYVAL AS GtkTreeDragSource PTR, BYVAL AS GtkTreePath PTR, BYVAL AS GtkSelectionData PTR) AS gboolean
  drag_data_delete AS FUNCTION CDECL(BYVAL AS GtkTreeDragSource PTR, BYVAL AS GtkTreePath PTR) AS gboolean
END TYPE
TYPE _GtkTreeIter
  AS gint stamp
  AS gpointer user_data
  AS gpointer user_data2
  AS gpointer user_data3
END TYPE
DECLARE FUNCTION gtk_tree_iter_copy(BYVAL AS GtkTreeIter PTR) AS GtkTreeIter PTR
DECLARE SUB gtk_tree_iter_free(BYVAL AS GtkTreeIter PTR)
TYPE GtkTreeIterCompareFunc AS FUNCTION CDECL(BYVAL AS GtkTreeModel PTR, BYVAL AS GtkTreeIter PTR, BYVAL AS GtkTreeIter PTR, BYVAL AS gpointer) AS gint
DECLARE FUNCTION gtk_tree_model_get_type() AS GType
#DEFINE GTK_TYPE_TREE_MODEL (gtk_tree_model_get_type())
#DEFINE GTK_TREE_MODEL(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_TREE_MODEL, GtkTreeModel))
#DEFINE GTK_TREE_MODEL_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_TREE_MODEL, GtkTreeModelIface))
#DEFINE GTK_IS_TREE_MODEL(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_TREE_MODEL))
#DEFINE GTK_TREE_MODEL_GET_IFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE((obj), GTK_TYPE_TREE_MODEL, GtkTreeModelIface))
DECLARE FUNCTION gtk_tree_model_filter_new(BYVAL AS GtkTreeModel PTR, BYVAL AS GtkTreePath PTR) AS GtkTreeModel PTR
DECLARE SUB gtk_tree_model_foreach(BYVAL AS GtkTreeModel PTR, BYVAL AS GtkTreeModelForeachFunc, BYVAL AS gpointer)
DECLARE SUB gtk_tree_model_get(BYVAL AS GtkTreeModel PTR, BYVAL AS GtkTreeIter PTR, ...)
DECLARE FUNCTION gtk_tree_model_get_column_type(BYVAL AS GtkTreeModel PTR, BYVAL AS gint) AS GType
DECLARE FUNCTION gtk_tree_model_get_flags(BYVAL AS GtkTreeModel PTR) AS GtkTreeModelFlags
DECLARE FUNCTION gtk_tree_model_get_iter(BYVAL AS GtkTreeModel PTR, BYVAL AS GtkTreeIter PTR, BYVAL AS GtkTreePath PTR) AS gboolean
DECLARE FUNCTION gtk_tree_model_get_iter_first(BYVAL AS GtkTreeModel PTR, BYVAL AS GtkTreeIter PTR) AS gboolean
DECLARE FUNCTION gtk_tree_model_get_iter_from_string(BYVAL AS GtkTreeModel PTR, BYVAL AS GtkTreeIter PTR, BYVAL AS const gchar PTR) AS gboolean
DECLARE FUNCTION gtk_tree_model_get_n_columns(BYVAL AS GtkTreeModel PTR) AS gint
DECLARE FUNCTION gtk_tree_model_get_path(BYVAL AS GtkTreeModel PTR, BYVAL AS GtkTreeIter PTR) AS GtkTreePath PTR
DECLARE FUNCTION gtk_tree_model_get_string_from_iter(BYVAL AS GtkTreeModel PTR, BYVAL AS GtkTreeIter PTR) AS gchar PTR
DECLARE SUB gtk_tree_model_get_valist(BYVAL AS GtkTreeModel PTR, BYVAL AS GtkTreeIter PTR, BYVAL AS va_list)
DECLARE SUB gtk_tree_model_get_value(BYVAL AS GtkTreeModel PTR, BYVAL AS GtkTreeIter PTR, BYVAL AS gint, BYVAL AS GValue PTR)
DECLARE FUNCTION gtk_tree_model_iter_children(BYVAL AS GtkTreeModel PTR, BYVAL AS GtkTreeIter PTR, BYVAL AS GtkTreeIter PTR) AS gboolean
DECLARE FUNCTION gtk_tree_model_iter_has_child(BYVAL AS GtkTreeModel PTR, BYVAL AS GtkTreeIter PTR) AS gboolean
DECLARE FUNCTION gtk_tree_model_iter_n_children(BYVAL AS GtkTreeModel PTR, BYVAL AS GtkTreeIter PTR) AS gint
DECLARE FUNCTION gtk_tree_model_iter_next(BYVAL AS GtkTreeModel PTR, BYVAL AS GtkTreeIter PTR) AS gboolean
DECLARE FUNCTION gtk_tree_model_iter_nth_child(BYVAL AS GtkTreeModel PTR, BYVAL AS GtkTreeIter PTR, BYVAL AS GtkTreeIter PTR, BYVAL AS gint) AS gboolean
DECLARE FUNCTION gtk_tree_model_iter_parent(BYVAL AS GtkTreeModel PTR, BYVAL AS GtkTreeIter PTR, BYVAL AS GtkTreeIter PTR) AS gboolean
DECLARE FUNCTION gtk_tree_model_iter_previous(BYVAL AS GtkTreeModel PTR, BYVAL AS GtkTreeIter PTR) AS gboolean
DECLARE SUB gtk_tree_model_ref_node(BYVAL AS GtkTreeModel PTR, BYVAL AS GtkTreeIter PTR)
DECLARE SUB gtk_tree_model_row_changed(BYVAL AS GtkTreeModel PTR, BYVAL AS GtkTreePath PTR, BYVAL AS GtkTreeIter PTR)
DECLARE SUB gtk_tree_model_row_deleted(BYVAL AS GtkTreeModel PTR, BYVAL AS GtkTreePath PTR)
DECLARE SUB gtk_tree_model_row_has_child_toggled(BYVAL AS GtkTreeModel PTR, BYVAL AS GtkTreePath PTR, BYVAL AS GtkTreeIter PTR)
DECLARE SUB gtk_tree_model_row_inserted(BYVAL AS GtkTreeModel PTR, BYVAL AS GtkTreePath PTR, BYVAL AS GtkTreeIter PTR)
DECLARE SUB gtk_tree_model_rows_reordered(BYVAL AS GtkTreeModel PTR, BYVAL AS GtkTreePath PTR, BYVAL AS GtkTreeIter PTR, BYVAL AS gint PTR)
DECLARE SUB gtk_tree_model_rows_reordered_with_length(BYVAL AS GtkTreeModel PTR, BYVAL AS GtkTreePath PTR, BYVAL AS GtkTreeIter PTR, BYVAL AS gint PTR, BYVAL AS gint)
DECLARE SUB gtk_tree_model_unref_node(BYVAL AS GtkTreeModel PTR, BYVAL AS GtkTreeIter PTR)
TYPE _GtkTreeModelFilter
  AS GObject parent
  AS GtkTreeModelFilterPrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_tree_model_filter_get_type() AS GType
#DEFINE GTK_TYPE_TREE_MODEL_FILTER (gtk_tree_model_filter_get_type())
#DEFINE GTK_TREE_MODEL_FILTER(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_TREE_MODEL_FILTER, GtkTreeModelFilter))
#DEFINE GTK_TREE_MODEL_FILTER_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_TREE_MODEL_FILTER, GtkTreeModelFilterClass))
#DEFINE GTK_IS_TREE_MODEL_FILTER(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_TREE_MODEL_FILTER))
#DEFINE GTK_IS_CLASS_TREE_MODEL_FILTER(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_TREE_MODEL_FILTER))
#DEFINE GTK_TREE_MODEL_FILTER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_TREE_MODEL_FILTER, GtkTreeModelFilterClass))
DECLARE SUB gtk_tree_model_filter_clear_cache(BYVAL AS GtkTreeModelFilter PTR)
DECLARE FUNCTION gtk_tree_model_filter_convert_child_iter_to_iter(BYVAL AS GtkTreeModelFilter PTR, BYVAL AS GtkTreeIter PTR, BYVAL AS GtkTreeIter PTR) AS gboolean
DECLARE FUNCTION gtk_tree_model_filter_convert_child_path_to_path(BYVAL AS GtkTreeModelFilter PTR, BYVAL AS GtkTreePath PTR) AS GtkTreePath PTR
DECLARE SUB gtk_tree_model_filter_convert_iter_to_child_iter(BYVAL AS GtkTreeModelFilter PTR, BYVAL AS GtkTreeIter PTR, BYVAL AS GtkTreeIter PTR)
DECLARE FUNCTION gtk_tree_model_filter_convert_path_to_child_path(BYVAL AS GtkTreeModelFilter PTR, BYVAL AS GtkTreePath PTR) AS GtkTreePath PTR
DECLARE FUNCTION gtk_tree_model_filter_get_model(BYVAL AS GtkTreeModelFilter PTR) AS GtkTreeModel PTR
DECLARE SUB gtk_tree_model_filter_refilter(BYVAL AS GtkTreeModelFilter PTR)
DECLARE SUB gtk_tree_model_filter_set_modify_func(BYVAL AS GtkTreeModelFilter PTR, BYVAL AS gint, BYVAL AS GType PTR, BYVAL AS GtkTreeModelFilterModifyFunc, BYVAL AS gpointer, BYVAL AS GDestroyNotify)
DECLARE SUB gtk_tree_model_filter_set_visible_column(BYVAL AS GtkTreeModelFilter PTR, BYVAL AS gint)
DECLARE SUB gtk_tree_model_filter_set_visible_func(BYVAL AS GtkTreeModelFilter PTR, BYVAL AS GtkTreeModelFilterVisibleFunc, BYVAL AS gpointer, BYVAL AS GDestroyNotify)
TYPE _GtkTreeModelFilterClass
  AS GObjectClass parent_class
  visible AS FUNCTION CDECL(BYVAL AS GtkTreeModelFilter PTR, BYVAL AS GtkTreeModel PTR, BYVAL AS GtkTreeIter PTR) AS gboolean
  modify AS SUB CDECL(BYVAL AS GtkTreeModelFilter PTR, BYVAL AS GtkTreeModel PTR, BYVAL AS GtkTreeIter PTR, BYVAL AS GValue PTR, BYVAL AS gint)
  _gtk_reserved1 AS SUB CDECL()
  _gtk_reserved2 AS SUB CDECL()
  _gtk_reserved3 AS SUB CDECL()
  _gtk_reserved4 AS SUB CDECL()
END TYPE
TYPE _GtkTreeModelIface
  AS GTypeInterface g_iface
  row_changed AS SUB CDECL(BYVAL AS GtkTreeModel PTR, BYVAL AS GtkTreePath PTR, BYVAL AS GtkTreeIter PTR)
  row_inserted AS SUB CDECL(BYVAL AS GtkTreeModel PTR, BYVAL AS GtkTreePath PTR, BYVAL AS GtkTreeIter PTR)
  row_has_child_toggled AS SUB CDECL(BYVAL AS GtkTreeModel PTR, BYVAL AS GtkTreePath PTR, BYVAL AS GtkTreeIter PTR)
  row_deleted AS SUB CDECL(BYVAL AS GtkTreeModel PTR, BYVAL AS GtkTreePath PTR)
  rows_reordered AS SUB CDECL(BYVAL AS GtkTreeModel PTR, BYVAL AS GtkTreePath PTR, BYVAL AS GtkTreeIter PTR, BYVAL AS gint PTR)
  get_flags AS FUNCTION CDECL(BYVAL AS GtkTreeModel PTR) AS GtkTreeModelFlags
  get_n_columns AS FUNCTION CDECL(BYVAL AS GtkTreeModel PTR) AS gint
  get_column_type AS FUNCTION CDECL(BYVAL AS GtkTreeModel PTR, BYVAL AS gint) AS GType
  get_iter AS FUNCTION CDECL(BYVAL AS GtkTreeModel PTR, BYVAL AS GtkTreeIter PTR, BYVAL AS GtkTreePath PTR) AS gboolean
  get_path AS FUNCTION CDECL(BYVAL AS GtkTreeModel PTR, BYVAL AS GtkTreeIter PTR) AS GtkTreePath PTR
  get_value AS SUB CDECL(BYVAL AS GtkTreeModel PTR, BYVAL AS GtkTreeIter PTR, BYVAL AS gint, BYVAL AS GValue PTR)
  iter_next AS FUNCTION CDECL(BYVAL AS GtkTreeModel PTR, BYVAL AS GtkTreeIter PTR) AS gboolean
  iter_previous AS FUNCTION CDECL(BYVAL AS GtkTreeModel PTR, BYVAL AS GtkTreeIter PTR) AS gboolean
  iter_children AS FUNCTION CDECL(BYVAL AS GtkTreeModel PTR, BYVAL AS GtkTreeIter PTR, BYVAL AS GtkTreeIter PTR) AS gboolean
  iter_has_child AS FUNCTION CDECL(BYVAL AS GtkTreeModel PTR, BYVAL AS GtkTreeIter PTR) AS gboolean
  iter_n_children AS FUNCTION CDECL(BYVAL AS GtkTreeModel PTR, BYVAL AS GtkTreeIter PTR) AS gint
  iter_nth_child AS FUNCTION CDECL(BYVAL AS GtkTreeModel PTR, BYVAL AS GtkTreeIter PTR, BYVAL AS GtkTreeIter PTR, BYVAL AS gint) AS gboolean
  iter_parent AS FUNCTION CDECL(BYVAL AS GtkTreeModel PTR, BYVAL AS GtkTreeIter PTR, BYVAL AS GtkTreeIter PTR) AS gboolean
  ref_node AS SUB CDECL(BYVAL AS GtkTreeModel PTR, BYVAL AS GtkTreeIter PTR)
  unref_node AS SUB CDECL(BYVAL AS GtkTreeModel PTR, BYVAL AS GtkTreeIter PTR)
END TYPE
TYPE _GtkTreeModelSort
  AS GObject parent
  AS GtkTreeModelSortPrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_tree_model_sort_get_type() AS GType
#DEFINE GTK_TYPE_TREE_MODEL_SORT (gtk_tree_model_sort_get_type())
#DEFINE GTK_TREE_MODEL_SORT(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_TREE_MODEL_SORT, GtkTreeModelSort))
#DEFINE GTK_TREE_MODEL_SORT_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_TREE_MODEL_SORT, GtkTreeModelSortClass))
#DEFINE GTK_IS_TREE_MODEL_SORT(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_TREE_MODEL_SORT))
#DEFINE GTK_IS_CLASS_TREE_MODEL_SORT(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_TREE_MODEL_SORT))
#DEFINE GTK_TREE_MODEL_SORT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_TREE_MODEL_SORT, GtkTreeModelSortClass))
DECLARE FUNCTION gtk_tree_model_sort_new_with_model(BYVAL AS GtkTreeModel PTR) AS GtkTreeModel PTR
DECLARE SUB gtk_tree_model_sort_clear_cache(BYVAL AS GtkTreeModelSort PTR)
DECLARE FUNCTION gtk_tree_model_sort_convert_child_iter_to_iter(BYVAL AS GtkTreeModelSort PTR, BYVAL AS GtkTreeIter PTR, BYVAL AS GtkTreeIter PTR) AS gboolean
DECLARE FUNCTION gtk_tree_model_sort_convert_child_path_to_path(BYVAL AS GtkTreeModelSort PTR, BYVAL AS GtkTreePath PTR) AS GtkTreePath PTR
DECLARE SUB gtk_tree_model_sort_convert_iter_to_child_iter(BYVAL AS GtkTreeModelSort PTR, BYVAL AS GtkTreeIter PTR, BYVAL AS GtkTreeIter PTR)
DECLARE FUNCTION gtk_tree_model_sort_convert_path_to_child_path(BYVAL AS GtkTreeModelSort PTR, BYVAL AS GtkTreePath PTR) AS GtkTreePath PTR
DECLARE FUNCTION gtk_tree_model_sort_get_model(BYVAL AS GtkTreeModelSort PTR) AS GtkTreeModel PTR
DECLARE FUNCTION gtk_tree_model_sort_iter_is_valid(BYVAL AS GtkTreeModelSort PTR, BYVAL AS GtkTreeIter PTR) AS gboolean
DECLARE SUB gtk_tree_model_sort_reset_default_sort_func(BYVAL AS GtkTreeModelSort PTR)
TYPE _GtkTreeModelSortClass
  AS GObjectClass parent_class
  _gtk_reserved1 AS SUB CDECL()
  _gtk_reserved2 AS SUB CDECL()
  _gtk_reserved3 AS SUB CDECL()
  _gtk_reserved4 AS SUB CDECL()
END TYPE
DECLARE FUNCTION gtk_tree_path_new() AS GtkTreePath PTR
DECLARE FUNCTION gtk_tree_path_new_first() AS GtkTreePath PTR
DECLARE FUNCTION gtk_tree_path_new_from_indices(BYVAL AS gint, ...) AS GtkTreePath PTR
DECLARE FUNCTION gtk_tree_path_new_from_indicesv(BYVAL AS gint PTR, BYVAL AS gsize) AS GtkTreePath PTR
DECLARE FUNCTION gtk_tree_path_new_from_string(BYVAL AS const gchar PTR) AS GtkTreePath PTR
DECLARE SUB gtk_tree_path_append_index(BYVAL AS GtkTreePath PTR, BYVAL AS gint)
DECLARE FUNCTION gtk_tree_path_compare(BYVAL AS const GtkTreePath PTR, BYVAL AS const GtkTreePath PTR) AS gint
DECLARE FUNCTION gtk_tree_path_copy(BYVAL AS const GtkTreePath PTR) AS GtkTreePath PTR
DECLARE SUB gtk_tree_path_down(BYVAL AS GtkTreePath PTR)
DECLARE SUB gtk_tree_path_free(BYVAL AS GtkTreePath PTR)
DECLARE FUNCTION gtk_tree_path_get_depth(BYVAL AS GtkTreePath PTR) AS gint
DECLARE FUNCTION gtk_tree_path_get_indices(BYVAL AS GtkTreePath PTR) AS gint PTR
DECLARE FUNCTION gtk_tree_path_get_indices_with_depth(BYVAL AS GtkTreePath PTR, BYVAL AS gint PTR) AS gint PTR
DECLARE FUNCTION gtk_tree_path_is_ancestor(BYVAL AS GtkTreePath PTR, BYVAL AS GtkTreePath PTR) AS gboolean
DECLARE FUNCTION gtk_tree_path_is_descendant(BYVAL AS GtkTreePath PTR, BYVAL AS GtkTreePath PTR) AS gboolean
DECLARE SUB gtk_tree_path_next(BYVAL AS GtkTreePath PTR)
DECLARE SUB gtk_tree_path_prepend_index(BYVAL AS GtkTreePath PTR, BYVAL AS gint)
DECLARE FUNCTION gtk_tree_path_prev(BYVAL AS GtkTreePath PTR) AS gboolean
DECLARE FUNCTION gtk_tree_path_to_string(BYVAL AS GtkTreePath PTR) AS gchar PTR
DECLARE FUNCTION gtk_tree_path_up(BYVAL AS GtkTreePath PTR) AS gboolean
DECLARE FUNCTION gtk_tree_row_reference_new(BYVAL AS GtkTreeModel PTR, BYVAL AS GtkTreePath PTR) AS GtkTreeRowReference PTR
DECLARE FUNCTION gtk_tree_row_reference_new_proxy(BYVAL AS GObject PTR, BYVAL AS GtkTreeModel PTR, BYVAL AS GtkTreePath PTR) AS GtkTreeRowReference PTR
DECLARE FUNCTION gtk_tree_row_reference_copy(BYVAL AS GtkTreeRowReference PTR) AS GtkTreeRowReference PTR
DECLARE SUB gtk_tree_row_reference_free(BYVAL AS GtkTreeRowReference PTR)
DECLARE FUNCTION gtk_tree_row_reference_get_model(BYVAL AS GtkTreeRowReference PTR) AS GtkTreeModel PTR
DECLARE FUNCTION gtk_tree_row_reference_get_path(BYVAL AS GtkTreeRowReference PTR) AS GtkTreePath PTR
DECLARE FUNCTION gtk_tree_row_reference_valid(BYVAL AS GtkTreeRowReference PTR) AS gboolean
DECLARE SUB gtk_tree_row_reference_deleted(BYVAL AS GObject PTR, BYVAL AS GtkTreePath PTR)
DECLARE SUB gtk_tree_row_reference_inserted(BYVAL AS GObject PTR, BYVAL AS GtkTreePath PTR)
DECLARE SUB gtk_tree_row_reference_reordered(BYVAL AS GObject PTR, BYVAL AS GtkTreePath PTR, BYVAL AS GtkTreeIter PTR, BYVAL AS gint PTR)
TYPE _GtkTreeSelection
  AS GObject parent
  AS GtkTreeSelectionPrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_tree_selection_get_type() AS GType
#DEFINE GTK_TYPE_TREE_SELECTION (gtk_tree_selection_get_type())
#DEFINE GTK_TREE_SELECTION(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_TREE_SELECTION, GtkTreeSelection))
#DEFINE GTK_TREE_SELECTION_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_TREE_SELECTION, GtkTreeSelectionClass))
#DEFINE GTK_IS_TREE_SELECTION(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_TREE_SELECTION))
#DEFINE GTK_IS_CLASS_TREE_SELECTION(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_TREE_SELECTION))
#DEFINE GTK_TREE_SELECTION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_TREE_SELECTION, GtkTreeSelectionClass))
DECLARE FUNCTION gtk_tree_selection_count_selected_rows(BYVAL AS GtkTreeSelection PTR) AS gint
DECLARE FUNCTION gtk_tree_selection_get_mode(BYVAL AS GtkTreeSelection PTR) AS GtkSelectionMode
DECLARE FUNCTION gtk_tree_selection_get_select_function(BYVAL AS GtkTreeSelection PTR) AS GtkTreeSelectionFunc
DECLARE FUNCTION gtk_tree_selection_get_selected(BYVAL AS GtkTreeSelection PTR, BYVAL AS GtkTreeModel PTR PTR, BYVAL AS GtkTreeIter PTR) AS gboolean
DECLARE FUNCTION gtk_tree_selection_get_selected_rows(BYVAL AS GtkTreeSelection PTR, BYVAL AS GtkTreeModel PTR PTR) AS GList PTR
DECLARE FUNCTION gtk_tree_selection_get_tree_view(BYVAL AS GtkTreeSelection PTR) AS GtkTreeView PTR
DECLARE FUNCTION gtk_tree_selection_get_user_data(BYVAL AS GtkTreeSelection PTR) AS gpointer
DECLARE FUNCTION gtk_tree_selection_iter_is_selected(BYVAL AS GtkTreeSelection PTR, BYVAL AS GtkTreeIter PTR) AS gboolean
DECLARE FUNCTION gtk_tree_selection_path_is_selected(BYVAL AS GtkTreeSelection PTR, BYVAL AS GtkTreePath PTR) AS gboolean
DECLARE SUB gtk_tree_selection_select_all(BYVAL AS GtkTreeSelection PTR)
DECLARE SUB gtk_tree_selection_select_iter(BYVAL AS GtkTreeSelection PTR, BYVAL AS GtkTreeIter PTR)
DECLARE SUB gtk_tree_selection_select_path(BYVAL AS GtkTreeSelection PTR, BYVAL AS GtkTreePath PTR)
DECLARE SUB gtk_tree_selection_select_range(BYVAL AS GtkTreeSelection PTR, BYVAL AS GtkTreePath PTR, BYVAL AS GtkTreePath PTR)
DECLARE SUB gtk_tree_selection_selected_foreach(BYVAL AS GtkTreeSelection PTR, BYVAL AS GtkTreeSelectionForeachFunc, BYVAL AS gpointer)
DECLARE SUB gtk_tree_selection_set_mode(BYVAL AS GtkTreeSelection PTR, BYVAL AS GtkSelectionMode)
DECLARE SUB gtk_tree_selection_set_select_function(BYVAL AS GtkTreeSelection PTR, BYVAL AS GtkTreeSelectionFunc, BYVAL AS gpointer, BYVAL AS GDestroyNotify)
DECLARE SUB gtk_tree_selection_unselect_all(BYVAL AS GtkTreeSelection PTR)
DECLARE SUB gtk_tree_selection_unselect_iter(BYVAL AS GtkTreeSelection PTR, BYVAL AS GtkTreeIter PTR)
DECLARE SUB gtk_tree_selection_unselect_path(BYVAL AS GtkTreeSelection PTR, BYVAL AS GtkTreePath PTR)
DECLARE SUB gtk_tree_selection_unselect_range(BYVAL AS GtkTreeSelection PTR, BYVAL AS GtkTreePath PTR, BYVAL AS GtkTreePath PTR)
TYPE _GtkTreeSelectionClass
  AS GObjectClass parent_class
  changed AS SUB CDECL(BYVAL AS GtkTreeSelection PTR)
  _gtk_reserved1 AS SUB CDECL()
  _gtk_reserved2 AS SUB CDECL()
  _gtk_reserved3 AS SUB CDECL()
  _gtk_reserved4 AS SUB CDECL()
END TYPE
DECLARE FUNCTION gtk_tree_sortable_get_type() AS GType
#DEFINE GTK_TYPE_TREE_SORTABLE (gtk_tree_sortable_get_type())
#DEFINE GTK_TREE_SORTABLE(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_TREE_SORTABLE, GtkTreeSortable))
#DEFINE GTK_TREE_SORTABLE_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_TREE_SORTABLE, GtkTreeSortableIface))
#DEFINE GTK_IS_TREE_SORTABLE(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_TREE_SORTABLE))
#DEFINE GTK_TREE_SORTABLE_GET_IFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE((obj), GTK_TYPE_TREE_SORTABLE, GtkTreeSortableIface))
DECLARE FUNCTION gtk_tree_sortable_get_sort_column_id(BYVAL AS GtkTreeSortable PTR, BYVAL AS gint PTR, BYVAL AS GtkSortType PTR) AS gboolean
DECLARE FUNCTION gtk_tree_sortable_has_default_sort_func(BYVAL AS GtkTreeSortable PTR) AS gboolean
DECLARE SUB gtk_tree_sortable_set_default_sort_func(BYVAL AS GtkTreeSortable PTR, BYVAL AS GtkTreeIterCompareFunc, BYVAL AS gpointer, BYVAL AS GDestroyNotify)
DECLARE SUB gtk_tree_sortable_set_sort_column_id(BYVAL AS GtkTreeSortable PTR, BYVAL AS gint, BYVAL AS GtkSortType)
DECLARE SUB gtk_tree_sortable_set_sort_func(BYVAL AS GtkTreeSortable PTR, BYVAL AS gint, BYVAL AS GtkTreeIterCompareFunc, BYVAL AS gpointer, BYVAL AS GDestroyNotify)
DECLARE SUB gtk_tree_sortable_sort_column_changed(BYVAL AS GtkTreeSortable PTR)
TYPE _GtkTreeSortableIface
  AS GTypeInterface g_iface
  sort_column_changed AS SUB CDECL(BYVAL AS GtkTreeSortable PTR)
  get_sort_column_id AS FUNCTION CDECL(BYVAL AS GtkTreeSortable PTR, BYVAL AS gint PTR, BYVAL AS GtkSortType PTR) AS gboolean
  set_sort_column_id AS SUB CDECL(BYVAL AS GtkTreeSortable PTR, BYVAL AS gint, BYVAL AS GtkSortType)
  set_sort_func AS SUB CDECL(BYVAL AS GtkTreeSortable PTR, BYVAL AS gint, BYVAL AS GtkTreeIterCompareFunc, BYVAL AS gpointer, BYVAL AS GDestroyNotify)
  set_default_sort_func AS SUB CDECL(BYVAL AS GtkTreeSortable PTR, BYVAL AS GtkTreeIterCompareFunc, BYVAL AS gpointer, BYVAL AS GDestroyNotify)
  has_default_sort_func AS FUNCTION CDECL(BYVAL AS GtkTreeSortable PTR) AS gboolean
END TYPE
TYPE _GtkTreeStore
  AS GObject parent
  AS GtkTreeStorePrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_tree_store_get_type() AS GType
#DEFINE GTK_TYPE_TREE_STORE (gtk_tree_store_get_type())
#DEFINE GTK_TREE_STORE(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_TREE_STORE, GtkTreeStore))
#DEFINE GTK_TREE_STORE_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_TREE_STORE, GtkTreeStoreClass))
#DEFINE GTK_IS_TREE_STORE(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_TREE_STORE))
#DEFINE GTK_IS_CLASS_TREE_STORE(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_TREE_STORE))
#DEFINE GTK_TREE_STORE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_TREE_STORE, GtkTreeStoreClass))
DECLARE FUNCTION gtk_tree_store_new(BYVAL AS gint, ...) AS GtkTreeStore PTR
DECLARE FUNCTION gtk_tree_store_newv(BYVAL AS gint, BYVAL AS GType PTR) AS GtkTreeStore PTR
DECLARE SUB gtk_tree_store_append(BYVAL AS GtkTreeStore PTR, BYVAL AS GtkTreeIter PTR, BYVAL AS GtkTreeIter PTR)
DECLARE SUB gtk_tree_store_clear(BYVAL AS GtkTreeStore PTR)
DECLARE SUB gtk_tree_store_insert(BYVAL AS GtkTreeStore PTR, BYVAL AS GtkTreeIter PTR, BYVAL AS GtkTreeIter PTR, BYVAL AS gint)
DECLARE SUB gtk_tree_store_insert_after(BYVAL AS GtkTreeStore PTR, BYVAL AS GtkTreeIter PTR, BYVAL AS GtkTreeIter PTR, BYVAL AS GtkTreeIter PTR)
DECLARE SUB gtk_tree_store_insert_before(BYVAL AS GtkTreeStore PTR, BYVAL AS GtkTreeIter PTR, BYVAL AS GtkTreeIter PTR, BYVAL AS GtkTreeIter PTR)
DECLARE SUB gtk_tree_store_insert_with_values(BYVAL AS GtkTreeStore PTR, BYVAL AS GtkTreeIter PTR, BYVAL AS GtkTreeIter PTR, BYVAL AS gint, ...)
DECLARE SUB gtk_tree_store_insert_with_valuesv(BYVAL AS GtkTreeStore PTR, BYVAL AS GtkTreeIter PTR, BYVAL AS GtkTreeIter PTR, BYVAL AS gint, BYVAL AS gint PTR, BYVAL AS GValue PTR, BYVAL AS gint)
DECLARE FUNCTION gtk_tree_store_is_ancestor(BYVAL AS GtkTreeStore PTR, BYVAL AS GtkTreeIter PTR, BYVAL AS GtkTreeIter PTR) AS gboolean
DECLARE FUNCTION gtk_tree_store_iter_depth(BYVAL AS GtkTreeStore PTR, BYVAL AS GtkTreeIter PTR) AS gint
DECLARE FUNCTION gtk_tree_store_iter_is_valid(BYVAL AS GtkTreeStore PTR, BYVAL AS GtkTreeIter PTR) AS gboolean
DECLARE SUB gtk_tree_store_move_after(BYVAL AS GtkTreeStore PTR, BYVAL AS GtkTreeIter PTR, BYVAL AS GtkTreeIter PTR)
DECLARE SUB gtk_tree_store_move_before(BYVAL AS GtkTreeStore PTR, BYVAL AS GtkTreeIter PTR, BYVAL AS GtkTreeIter PTR)
DECLARE SUB gtk_tree_store_prepend(BYVAL AS GtkTreeStore PTR, BYVAL AS GtkTreeIter PTR, BYVAL AS GtkTreeIter PTR)
DECLARE FUNCTION gtk_tree_store_remove(BYVAL AS GtkTreeStore PTR, BYVAL AS GtkTreeIter PTR) AS gboolean
DECLARE SUB gtk_tree_store_reorder(BYVAL AS GtkTreeStore PTR, BYVAL AS GtkTreeIter PTR, BYVAL AS gint PTR)
DECLARE SUB gtk_tree_store_set(BYVAL AS GtkTreeStore PTR, BYVAL AS GtkTreeIter PTR, ...)
DECLARE SUB gtk_tree_store_set_column_types(BYVAL AS GtkTreeStore PTR, BYVAL AS gint, BYVAL AS GType PTR)
DECLARE SUB gtk_tree_store_set_valist(BYVAL AS GtkTreeStore PTR, BYVAL AS GtkTreeIter PTR, BYVAL AS va_list)
DECLARE SUB gtk_tree_store_set_value(BYVAL AS GtkTreeStore PTR, BYVAL AS GtkTreeIter PTR, BYVAL AS gint, BYVAL AS GValue PTR)
DECLARE SUB gtk_tree_store_set_valuesv(BYVAL AS GtkTreeStore PTR, BYVAL AS GtkTreeIter PTR, BYVAL AS gint PTR, BYVAL AS GValue PTR, BYVAL AS gint)
DECLARE SUB gtk_tree_store_swap(BYVAL AS GtkTreeStore PTR, BYVAL AS GtkTreeIter PTR, BYVAL AS GtkTreeIter PTR)
TYPE _GtkTreeStoreClass
  AS GObjectClass parent_class
  _gtk_reserved1 AS SUB CDECL()
  _gtk_reserved2 AS SUB CDECL()
  _gtk_reserved3 AS SUB CDECL()
  _gtk_reserved4 AS SUB CDECL()
END TYPE
TYPE _GtkTreeView
  AS GtkContainer parent
  AS GtkTreeViewPrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_tree_view_get_type() AS GType
#DEFINE GTK_TYPE_TREE_VIEW (gtk_tree_view_get_type())
#DEFINE GTK_TREE_VIEW(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_TREE_VIEW, GtkTreeView))
#DEFINE GTK_TREE_VIEW_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_TREE_VIEW, GtkTreeViewClass))
#DEFINE GTK_IS_TREE_VIEW(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_TREE_VIEW))
#DEFINE GTK_IS_CLASS_TREE_VIEW(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_TREE_VIEW))
#DEFINE GTK_TREE_VIEW_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_TREE_VIEW, GtkTreeViewClass))
DECLARE FUNCTION gtk_tree_view_new() AS GtkWidget PTR
DECLARE FUNCTION gtk_tree_view_new_with_model(BYVAL AS GtkTreeModel PTR) AS GtkWidget PTR
DECLARE FUNCTION gtk_tree_view_append_column(BYVAL AS GtkTreeView PTR, BYVAL AS GtkTreeViewColumn PTR) AS gint
DECLARE SUB gtk_tree_view_collapse_all(BYVAL AS GtkTreeView PTR)
DECLARE FUNCTION gtk_tree_view_collapse_row(BYVAL AS GtkTreeView PTR, BYVAL AS GtkTreePath PTR) AS gboolean
DECLARE SUB gtk_tree_view_columns_autosize(BYVAL AS GtkTreeView PTR)
DECLARE SUB gtk_tree_view_convert_bin_window_to_tree_coords(BYVAL AS GtkTreeView PTR, BYVAL AS gint, BYVAL AS gint, BYVAL AS gint PTR, BYVAL AS gint PTR)
DECLARE SUB gtk_tree_view_convert_bin_window_to_widget_coords(BYVAL AS GtkTreeView PTR, BYVAL AS gint, BYVAL AS gint, BYVAL AS gint PTR, BYVAL AS gint PTR)
DECLARE SUB gtk_tree_view_convert_tree_to_bin_window_coords(BYVAL AS GtkTreeView PTR, BYVAL AS gint, BYVAL AS gint, BYVAL AS gint PTR, BYVAL AS gint PTR)
DECLARE SUB gtk_tree_view_convert_tree_to_widget_coords(BYVAL AS GtkTreeView PTR, BYVAL AS gint, BYVAL AS gint, BYVAL AS gint PTR, BYVAL AS gint PTR)
DECLARE SUB gtk_tree_view_convert_widget_to_bin_window_coords(BYVAL AS GtkTreeView PTR, BYVAL AS gint, BYVAL AS gint, BYVAL AS gint PTR, BYVAL AS gint PTR)
DECLARE SUB gtk_tree_view_convert_widget_to_tree_coords(BYVAL AS GtkTreeView PTR, BYVAL AS gint, BYVAL AS gint, BYVAL AS gint PTR, BYVAL AS gint PTR)
DECLARE FUNCTION gtk_tree_view_create_row_drag_icon(BYVAL AS GtkTreeView PTR, BYVAL AS GtkTreePath PTR) AS cairo_surface_t PTR
DECLARE SUB gtk_tree_view_enable_model_drag_dest(BYVAL AS GtkTreeView PTR, BYVAL AS const GtkTargetEntry PTR, BYVAL AS gint, BYVAL AS GdkDragAction)
DECLARE SUB gtk_tree_view_enable_model_drag_source(BYVAL AS GtkTreeView PTR, BYVAL AS GdkModifierType, BYVAL AS const GtkTargetEntry PTR, BYVAL AS gint, BYVAL AS GdkDragAction)
DECLARE SUB gtk_tree_view_expand_all(BYVAL AS GtkTreeView PTR)
DECLARE FUNCTION gtk_tree_view_expand_row(BYVAL AS GtkTreeView PTR, BYVAL AS GtkTreePath PTR, BYVAL AS gboolean) AS gboolean
DECLARE SUB gtk_tree_view_expand_to_path(BYVAL AS GtkTreeView PTR, BYVAL AS GtkTreePath PTR)
DECLARE FUNCTION gtk_tree_view_get_activate_on_single_click(BYVAL AS GtkTreeView PTR) AS gboolean
DECLARE SUB gtk_tree_view_get_background_area(BYVAL AS GtkTreeView PTR, BYVAL AS GtkTreePath PTR, BYVAL AS GtkTreeViewColumn PTR, BYVAL AS GdkRectangle PTR)
DECLARE FUNCTION gtk_tree_view_get_bin_window(BYVAL AS GtkTreeView PTR) AS GdkWindow PTR
DECLARE SUB gtk_tree_view_get_cell_area(BYVAL AS GtkTreeView PTR, BYVAL AS GtkTreePath PTR, BYVAL AS GtkTreeViewColumn PTR, BYVAL AS GdkRectangle PTR)
DECLARE FUNCTION gtk_tree_view_get_column(BYVAL AS GtkTreeView PTR, BYVAL AS gint) AS GtkTreeViewColumn PTR
DECLARE FUNCTION gtk_tree_view_get_columns(BYVAL AS GtkTreeView PTR) AS GList PTR
DECLARE SUB gtk_tree_view_get_cursor(BYVAL AS GtkTreeView PTR, BYVAL AS GtkTreePath PTR PTR, BYVAL AS GtkTreeViewColumn PTR PTR)
DECLARE FUNCTION gtk_tree_view_get_dest_row_at_pos(BYVAL AS GtkTreeView PTR, BYVAL AS gint, BYVAL AS gint, BYVAL AS GtkTreePath PTR PTR, BYVAL AS GtkTreeViewDropPosition PTR) AS gboolean
DECLARE SUB gtk_tree_view_get_drag_dest_row(BYVAL AS GtkTreeView PTR, BYVAL AS GtkTreePath PTR PTR, BYVAL AS GtkTreeViewDropPosition PTR)
DECLARE FUNCTION gtk_tree_view_get_enable_search(BYVAL AS GtkTreeView PTR) AS gboolean
DECLARE FUNCTION gtk_tree_view_get_enable_tree_lines(BYVAL AS GtkTreeView PTR) AS gboolean
DECLARE FUNCTION gtk_tree_view_get_expander_column(BYVAL AS GtkTreeView PTR) AS GtkTreeViewColumn PTR
DECLARE FUNCTION gtk_tree_view_get_fixed_height_mode(BYVAL AS GtkTreeView PTR) AS gboolean
DECLARE FUNCTION gtk_tree_view_get_grid_lines(BYVAL AS GtkTreeView PTR) AS GtkTreeViewGridLines
DECLARE FUNCTION gtk_tree_view_get_hadjustment(BYVAL AS GtkTreeView PTR) AS GtkAdjustment PTR
DECLARE FUNCTION gtk_tree_view_get_headers_clickable(BYVAL AS GtkTreeView PTR) AS gboolean
DECLARE FUNCTION gtk_tree_view_get_headers_visible(BYVAL AS GtkTreeView PTR) AS gboolean
DECLARE FUNCTION gtk_tree_view_get_hover_expand(BYVAL AS GtkTreeView PTR) AS gboolean
DECLARE FUNCTION gtk_tree_view_get_hover_selection(BYVAL AS GtkTreeView PTR) AS gboolean
DECLARE FUNCTION gtk_tree_view_get_level_indentation(BYVAL AS GtkTreeView PTR) AS gint
DECLARE FUNCTION gtk_tree_view_get_model(BYVAL AS GtkTreeView PTR) AS GtkTreeModel PTR
DECLARE FUNCTION gtk_tree_view_get_n_columns(BYVAL AS GtkTreeView PTR) AS guint
DECLARE FUNCTION gtk_tree_view_get_path_at_pos(BYVAL AS GtkTreeView PTR, BYVAL AS gint, BYVAL AS gint, BYVAL AS GtkTreePath PTR PTR, BYVAL AS GtkTreeViewColumn PTR PTR, BYVAL AS gint PTR, BYVAL AS gint PTR) AS gboolean
DECLARE FUNCTION gtk_tree_view_get_reorderable(BYVAL AS GtkTreeView PTR) AS gboolean
DECLARE FUNCTION gtk_tree_view_get_row_separator_func(BYVAL AS GtkTreeView PTR) AS GtkTreeViewRowSeparatorFunc
DECLARE FUNCTION gtk_tree_view_get_rubber_banding(BYVAL AS GtkTreeView PTR) AS gboolean
DECLARE FUNCTION gtk_tree_view_get_rules_hint(BYVAL AS GtkTreeView PTR) AS gboolean
DECLARE FUNCTION gtk_tree_view_get_search_column(BYVAL AS GtkTreeView PTR) AS gint
DECLARE FUNCTION gtk_tree_view_get_search_entry(BYVAL AS GtkTreeView PTR) AS GtkEntry PTR
DECLARE FUNCTION gtk_tree_view_get_search_equal_func(BYVAL AS GtkTreeView PTR) AS GtkTreeViewSearchEqualFunc
DECLARE FUNCTION gtk_tree_view_get_search_position_func(BYVAL AS GtkTreeView PTR) AS GtkTreeViewSearchPositionFunc
DECLARE FUNCTION gtk_tree_view_get_selection(BYVAL AS GtkTreeView PTR) AS GtkTreeSelection PTR
DECLARE FUNCTION gtk_tree_view_get_show_expanders(BYVAL AS GtkTreeView PTR) AS gboolean
DECLARE FUNCTION gtk_tree_view_get_tooltip_column(BYVAL AS GtkTreeView PTR) AS gint
DECLARE FUNCTION gtk_tree_view_get_tooltip_context(BYVAL AS GtkTreeView PTR, BYVAL AS gint PTR, BYVAL AS gint PTR, BYVAL AS gboolean, BYVAL AS GtkTreeModel PTR PTR, BYVAL AS GtkTreePath PTR PTR, BYVAL AS GtkTreeIter PTR) AS gboolean
DECLARE FUNCTION gtk_tree_view_get_vadjustment(BYVAL AS GtkTreeView PTR) AS GtkAdjustment PTR
DECLARE FUNCTION gtk_tree_view_get_visible_range(BYVAL AS GtkTreeView PTR, BYVAL AS GtkTreePath PTR PTR, BYVAL AS GtkTreePath PTR PTR) AS gboolean
DECLARE SUB gtk_tree_view_get_visible_rect(BYVAL AS GtkTreeView PTR, BYVAL AS GdkRectangle PTR)
DECLARE FUNCTION gtk_tree_view_insert_column(BYVAL AS GtkTreeView PTR, BYVAL AS GtkTreeViewColumn PTR, BYVAL AS gint) AS gint
DECLARE FUNCTION gtk_tree_view_insert_column_with_attributes(BYVAL AS GtkTreeView PTR, BYVAL AS gint, BYVAL AS const gchar PTR, BYVAL AS GtkCellRenderer PTR, ...) AS gint
DECLARE FUNCTION gtk_tree_view_insert_column_with_data_func(BYVAL AS GtkTreeView PTR, BYVAL AS gint, BYVAL AS const gchar PTR, BYVAL AS GtkCellRenderer PTR, BYVAL AS GtkTreeCellDataFunc, BYVAL AS gpointer, BYVAL AS GDestroyNotify) AS gint
DECLARE FUNCTION gtk_tree_view_is_blank_at_pos(BYVAL AS GtkTreeView PTR, BYVAL AS gint, BYVAL AS gint, BYVAL AS GtkTreePath PTR PTR, BYVAL AS GtkTreeViewColumn PTR PTR, BYVAL AS gint PTR, BYVAL AS gint PTR) AS gboolean
DECLARE FUNCTION gtk_tree_view_is_rubber_banding_active(BYVAL AS GtkTreeView PTR) AS gboolean
DECLARE SUB gtk_tree_view_map_expanded_rows(BYVAL AS GtkTreeView PTR, BYVAL AS GtkTreeViewMappingFunc, BYVAL AS gpointer)
DECLARE SUB gtk_tree_view_move_column_after(BYVAL AS GtkTreeView PTR, BYVAL AS GtkTreeViewColumn PTR, BYVAL AS GtkTreeViewColumn PTR)
DECLARE FUNCTION gtk_tree_view_remove_column(BYVAL AS GtkTreeView PTR, BYVAL AS GtkTreeViewColumn PTR) AS gint
DECLARE SUB gtk_tree_view_row_activated(BYVAL AS GtkTreeView PTR, BYVAL AS GtkTreePath PTR, BYVAL AS GtkTreeViewColumn PTR)
DECLARE FUNCTION gtk_tree_view_row_expanded(BYVAL AS GtkTreeView PTR, BYVAL AS GtkTreePath PTR) AS gboolean
DECLARE SUB gtk_tree_view_scroll_to_cell(BYVAL AS GtkTreeView PTR, BYVAL AS GtkTreePath PTR, BYVAL AS GtkTreeViewColumn PTR, BYVAL AS gboolean, BYVAL AS gfloat, BYVAL AS gfloat)
DECLARE SUB gtk_tree_view_scroll_to_point(BYVAL AS GtkTreeView PTR, BYVAL AS gint, BYVAL AS gint)
DECLARE SUB gtk_tree_view_set_activate_on_single_click(BYVAL AS GtkTreeView PTR, BYVAL AS gboolean)
DECLARE SUB gtk_tree_view_set_column_drag_function(BYVAL AS GtkTreeView PTR, BYVAL AS GtkTreeViewColumnDropFunc, BYVAL AS gpointer, BYVAL AS GDestroyNotify)
DECLARE SUB gtk_tree_view_set_cursor(BYVAL AS GtkTreeView PTR, BYVAL AS GtkTreePath PTR, BYVAL AS GtkTreeViewColumn PTR, BYVAL AS gboolean)
DECLARE SUB gtk_tree_view_set_cursor_on_cell(BYVAL AS GtkTreeView PTR, BYVAL AS GtkTreePath PTR, BYVAL AS GtkTreeViewColumn PTR, BYVAL AS GtkCellRenderer PTR, BYVAL AS gboolean)
DECLARE SUB gtk_tree_view_set_destroy_count_func(BYVAL AS GtkTreeView PTR, BYVAL AS GtkTreeDestroyCountFunc, BYVAL AS gpointer, BYVAL AS GDestroyNotify)
DECLARE SUB gtk_tree_view_set_drag_dest_row(BYVAL AS GtkTreeView PTR, BYVAL AS GtkTreePath PTR, BYVAL AS GtkTreeViewDropPosition)
DECLARE SUB gtk_tree_view_set_enable_search(BYVAL AS GtkTreeView PTR, BYVAL AS gboolean)
DECLARE SUB gtk_tree_view_set_enable_tree_lines(BYVAL AS GtkTreeView PTR, BYVAL AS gboolean)
DECLARE SUB gtk_tree_view_set_expander_column(BYVAL AS GtkTreeView PTR, BYVAL AS GtkTreeViewColumn PTR)
DECLARE SUB gtk_tree_view_set_fixed_height_mode(BYVAL AS GtkTreeView PTR, BYVAL AS gboolean)
DECLARE SUB gtk_tree_view_set_grid_lines(BYVAL AS GtkTreeView PTR, BYVAL AS GtkTreeViewGridLines)
DECLARE SUB gtk_tree_view_set_hadjustment(BYVAL AS GtkTreeView PTR, BYVAL AS GtkAdjustment PTR)
DECLARE SUB gtk_tree_view_set_headers_clickable(BYVAL AS GtkTreeView PTR, BYVAL AS gboolean)
DECLARE SUB gtk_tree_view_set_headers_visible(BYVAL AS GtkTreeView PTR, BYVAL AS gboolean)
DECLARE SUB gtk_tree_view_set_hover_expand(BYVAL AS GtkTreeView PTR, BYVAL AS gboolean)
DECLARE SUB gtk_tree_view_set_hover_selection(BYVAL AS GtkTreeView PTR, BYVAL AS gboolean)
DECLARE SUB gtk_tree_view_set_level_indentation(BYVAL AS GtkTreeView PTR, BYVAL AS gint)
DECLARE SUB gtk_tree_view_set_model(BYVAL AS GtkTreeView PTR, BYVAL AS GtkTreeModel PTR)
DECLARE SUB gtk_tree_view_set_reorderable(BYVAL AS GtkTreeView PTR, BYVAL AS gboolean)
DECLARE SUB gtk_tree_view_set_row_separator_func(BYVAL AS GtkTreeView PTR, BYVAL AS GtkTreeViewRowSeparatorFunc, BYVAL AS gpointer, BYVAL AS GDestroyNotify)
DECLARE SUB gtk_tree_view_set_rubber_banding(BYVAL AS GtkTreeView PTR, BYVAL AS gboolean)
DECLARE SUB gtk_tree_view_set_rules_hint(BYVAL AS GtkTreeView PTR, BYVAL AS gboolean)
DECLARE SUB gtk_tree_view_set_search_column(BYVAL AS GtkTreeView PTR, BYVAL AS gint)
DECLARE SUB gtk_tree_view_set_search_entry(BYVAL AS GtkTreeView PTR, BYVAL AS GtkEntry PTR)
DECLARE SUB gtk_tree_view_set_search_equal_func(BYVAL AS GtkTreeView PTR, BYVAL AS GtkTreeViewSearchEqualFunc, BYVAL AS gpointer, BYVAL AS GDestroyNotify)
DECLARE SUB gtk_tree_view_set_search_position_func(BYVAL AS GtkTreeView PTR, BYVAL AS GtkTreeViewSearchPositionFunc, BYVAL AS gpointer, BYVAL AS GDestroyNotify)
DECLARE SUB gtk_tree_view_set_show_expanders(BYVAL AS GtkTreeView PTR, BYVAL AS gboolean)
DECLARE SUB gtk_tree_view_set_tooltip_cell(BYVAL AS GtkTreeView PTR, BYVAL AS GtkTooltip PTR, BYVAL AS GtkTreePath PTR, BYVAL AS GtkTreeViewColumn PTR, BYVAL AS GtkCellRenderer PTR)
DECLARE SUB gtk_tree_view_set_tooltip_column(BYVAL AS GtkTreeView PTR, BYVAL AS gint)
DECLARE SUB gtk_tree_view_set_tooltip_row(BYVAL AS GtkTreeView PTR, BYVAL AS GtkTooltip PTR, BYVAL AS GtkTreePath PTR)
DECLARE SUB gtk_tree_view_set_vadjustment(BYVAL AS GtkTreeView PTR, BYVAL AS GtkAdjustment PTR)
DECLARE SUB gtk_tree_view_unset_rows_drag_dest(BYVAL AS GtkTreeView PTR)
DECLARE SUB gtk_tree_view_unset_rows_drag_source(BYVAL AS GtkTreeView PTR)
TYPE _GtkTreeViewAccessible
  AS GtkContainerAccessible parent
  AS GtkTreeViewAccessiblePrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_tree_view_accessible_get_type() AS GType
#DEFINE GTK_TYPE_TREE_VIEW_ACCESSIBLE (gtk_tree_view_accessible_get_type())
#DEFINE GTK_TREE_VIEW_ACCESSIBLE(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_TREE_VIEW_ACCESSIBLE, GtkTreeViewAccessible))
#DEFINE GTK_TREE_VIEW_ACCESSIBLE_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_TREE_VIEW_ACCESSIBLE, GtkTreeViewAccessibleClass))
#DEFINE GTK_IS_TREE_VIEW_ACCESSIBLE(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_TREE_VIEW_ACCESSIBLE))
#DEFINE GTK_IS_CLASS_TREE_VIEW_ACCESSIBLE(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_TREE_VIEW_ACCESSIBLE))
#DEFINE GTK_TREE_VIEW_ACCESSIBLE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_TREE_VIEW_ACCESSIBLE, GtkTreeViewAccessibleClass))
TYPE _GtkTreeViewAccessibleClass
  AS GtkContainerAccessibleClass parent_class
END TYPE
TYPE _GtkTreeViewClass
  AS GtkContainerClass parent_class
  row_activated AS SUB CDECL(BYVAL AS GtkTreeView PTR, BYVAL AS GtkTreePath PTR, BYVAL AS GtkTreeViewColumn PTR)
  test_expand_row AS FUNCTION CDECL(BYVAL AS GtkTreeView PTR, BYVAL AS GtkTreeIter PTR, BYVAL AS GtkTreePath PTR) AS gboolean
  test_collapse_row AS FUNCTION CDECL(BYVAL AS GtkTreeView PTR, BYVAL AS GtkTreeIter PTR, BYVAL AS GtkTreePath PTR) AS gboolean
  row_expanded AS SUB CDECL(BYVAL AS GtkTreeView PTR, BYVAL AS GtkTreeIter PTR, BYVAL AS GtkTreePath PTR)
  row_collapsed AS SUB CDECL(BYVAL AS GtkTreeView PTR, BYVAL AS GtkTreeIter PTR, BYVAL AS GtkTreePath PTR)
  columns_changed AS SUB CDECL(BYVAL AS GtkTreeView PTR)
  cursor_changed AS SUB CDECL(BYVAL AS GtkTreeView PTR)
  move_cursor AS FUNCTION CDECL(BYVAL AS GtkTreeView PTR, BYVAL AS GtkMovementStep, BYVAL AS gint) AS gboolean
  select_all AS FUNCTION CDECL(BYVAL AS GtkTreeView PTR) AS gboolean
  unselect_all AS FUNCTION CDECL(BYVAL AS GtkTreeView PTR) AS gboolean
  select_cursor_row AS FUNCTION CDECL(BYVAL AS GtkTreeView PTR, BYVAL AS gboolean) AS gboolean
  toggle_cursor_row AS FUNCTION CDECL(BYVAL AS GtkTreeView PTR) AS gboolean
  expand_collapse_cursor_row AS FUNCTION CDECL(BYVAL AS GtkTreeView PTR, BYVAL AS gboolean, BYVAL AS gboolean, BYVAL AS gboolean) AS gboolean
  select_cursor_parent AS FUNCTION CDECL(BYVAL AS GtkTreeView PTR) AS gboolean
  start_interactive_search AS FUNCTION CDECL(BYVAL AS GtkTreeView PTR) AS gboolean
  _gtk_reserved1 AS SUB CDECL()
  _gtk_reserved2 AS SUB CDECL()
  _gtk_reserved3 AS SUB CDECL()
  _gtk_reserved4 AS SUB CDECL()
  _gtk_reserved5 AS SUB CDECL()
  _gtk_reserved6 AS SUB CDECL()
  _gtk_reserved7 AS SUB CDECL()
  _gtk_reserved8 AS SUB CDECL()
END TYPE
TYPE _GtkTreeViewColumn
  AS GInitiallyUnowned parent_instance
  AS GtkTreeViewColumnPrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_tree_view_column_get_type() AS GType
#DEFINE GTK_TYPE_TREE_VIEW_COLUMN (gtk_tree_view_column_get_type())
#DEFINE GTK_TREE_VIEW_COLUMN(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_TREE_VIEW_COLUMN, GtkTreeViewColumn))
#DEFINE GTK_TREE_VIEW_COLUMN_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_TREE_VIEW_COLUMN, GtkTreeViewColumnClass))
#DEFINE GTK_IS_TREE_VIEW_COLUMN(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_TREE_VIEW_COLUMN))
#DEFINE GTK_IS_CLASS_TREE_VIEW_COLUMN(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_TREE_VIEW_COLUMN))
#DEFINE GTK_TREE_VIEW_COLUMN_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_TREE_VIEW_COLUMN, GtkTreeViewColumnClass))
DECLARE FUNCTION gtk_tree_view_column_new() AS GtkTreeViewColumn PTR
DECLARE FUNCTION gtk_tree_view_column_new_with_area(BYVAL AS GtkCellArea PTR) AS GtkTreeViewColumn PTR
DECLARE FUNCTION gtk_tree_view_column_new_with_attributes(BYVAL AS const gchar PTR, BYVAL AS GtkCellRenderer PTR, ...) AS GtkTreeViewColumn PTR
DECLARE SUB gtk_tree_view_column_add_attribute(BYVAL AS GtkTreeViewColumn PTR, BYVAL AS GtkCellRenderer PTR, BYVAL AS const gchar PTR, BYVAL AS gint)
DECLARE FUNCTION gtk_tree_view_column_cell_get_position(BYVAL AS GtkTreeViewColumn PTR, BYVAL AS GtkCellRenderer PTR, BYVAL AS gint PTR, BYVAL AS gint PTR) AS gboolean
DECLARE SUB gtk_tree_view_column_cell_get_size(BYVAL AS GtkTreeViewColumn PTR, BYVAL AS const GdkRectangle PTR, BYVAL AS gint PTR, BYVAL AS gint PTR, BYVAL AS gint PTR, BYVAL AS gint PTR)
DECLARE FUNCTION gtk_tree_view_column_cell_is_visible(BYVAL AS GtkTreeViewColumn PTR) AS gboolean
DECLARE SUB gtk_tree_view_column_cell_set_cell_data(BYVAL AS GtkTreeViewColumn PTR, BYVAL AS GtkTreeModel PTR, BYVAL AS GtkTreeIter PTR, BYVAL AS gboolean, BYVAL AS gboolean)
DECLARE SUB gtk_tree_view_column_clear(BYVAL AS GtkTreeViewColumn PTR)
DECLARE SUB gtk_tree_view_column_clear_attributes(BYVAL AS GtkTreeViewColumn PTR, BYVAL AS GtkCellRenderer PTR)
DECLARE SUB gtk_tree_view_column_clicked(BYVAL AS GtkTreeViewColumn PTR)
DECLARE SUB gtk_tree_view_column_focus_cell(BYVAL AS GtkTreeViewColumn PTR, BYVAL AS GtkCellRenderer PTR)
DECLARE FUNCTION gtk_tree_view_column_get_alignment(BYVAL AS GtkTreeViewColumn PTR) AS gfloat
DECLARE FUNCTION gtk_tree_view_column_get_button(BYVAL AS GtkTreeViewColumn PTR) AS GtkWidget PTR
DECLARE FUNCTION gtk_tree_view_column_get_clickable(BYVAL AS GtkTreeViewColumn PTR) AS gboolean
DECLARE FUNCTION gtk_tree_view_column_get_expand(BYVAL AS GtkTreeViewColumn PTR) AS gboolean
DECLARE FUNCTION gtk_tree_view_column_get_fixed_width(BYVAL AS GtkTreeViewColumn PTR) AS gint
DECLARE FUNCTION gtk_tree_view_column_get_max_width(BYVAL AS GtkTreeViewColumn PTR) AS gint
DECLARE FUNCTION gtk_tree_view_column_get_min_width(BYVAL AS GtkTreeViewColumn PTR) AS gint
DECLARE FUNCTION gtk_tree_view_column_get_reorderable(BYVAL AS GtkTreeViewColumn PTR) AS gboolean
DECLARE FUNCTION gtk_tree_view_column_get_resizable(BYVAL AS GtkTreeViewColumn PTR) AS gboolean
DECLARE FUNCTION gtk_tree_view_column_get_sizing(BYVAL AS GtkTreeViewColumn PTR) AS GtkTreeViewColumnSizing
DECLARE FUNCTION gtk_tree_view_column_get_sort_column_id(BYVAL AS GtkTreeViewColumn PTR) AS gint
DECLARE FUNCTION gtk_tree_view_column_get_sort_indicator(BYVAL AS GtkTreeViewColumn PTR) AS gboolean
DECLARE FUNCTION gtk_tree_view_column_get_sort_order(BYVAL AS GtkTreeViewColumn PTR) AS GtkSortType
DECLARE FUNCTION gtk_tree_view_column_get_spacing(BYVAL AS GtkTreeViewColumn PTR) AS gint
DECLARE FUNCTION gtk_tree_view_column_get_title(BYVAL AS GtkTreeViewColumn PTR) AS const gchar PTR
DECLARE FUNCTION gtk_tree_view_column_get_tree_view(BYVAL AS GtkTreeViewColumn PTR) AS GtkWidget PTR
DECLARE FUNCTION gtk_tree_view_column_get_visible(BYVAL AS GtkTreeViewColumn PTR) AS gboolean
DECLARE FUNCTION gtk_tree_view_column_get_widget(BYVAL AS GtkTreeViewColumn PTR) AS GtkWidget PTR
DECLARE FUNCTION gtk_tree_view_column_get_width(BYVAL AS GtkTreeViewColumn PTR) AS gint
DECLARE FUNCTION gtk_tree_view_column_get_x_offset(BYVAL AS GtkTreeViewColumn PTR) AS gint
DECLARE SUB gtk_tree_view_column_pack_end(BYVAL AS GtkTreeViewColumn PTR, BYVAL AS GtkCellRenderer PTR, BYVAL AS gboolean)
DECLARE SUB gtk_tree_view_column_pack_start(BYVAL AS GtkTreeViewColumn PTR, BYVAL AS GtkCellRenderer PTR, BYVAL AS gboolean)
DECLARE SUB gtk_tree_view_column_queue_resize(BYVAL AS GtkTreeViewColumn PTR)
DECLARE SUB gtk_tree_view_column_set_alignment(BYVAL AS GtkTreeViewColumn PTR, BYVAL AS gfloat)
DECLARE SUB gtk_tree_view_column_set_attributes(BYVAL AS GtkTreeViewColumn PTR, BYVAL AS GtkCellRenderer PTR, ...)
DECLARE SUB gtk_tree_view_column_set_cell_data_func(BYVAL AS GtkTreeViewColumn PTR, BYVAL AS GtkCellRenderer PTR, BYVAL AS GtkTreeCellDataFunc, BYVAL AS gpointer, BYVAL AS GDestroyNotify)
DECLARE SUB gtk_tree_view_column_set_clickable(BYVAL AS GtkTreeViewColumn PTR, BYVAL AS gboolean)
DECLARE SUB gtk_tree_view_column_set_expand(BYVAL AS GtkTreeViewColumn PTR, BYVAL AS gboolean)
DECLARE SUB gtk_tree_view_column_set_fixed_width(BYVAL AS GtkTreeViewColumn PTR, BYVAL AS gint)
DECLARE SUB gtk_tree_view_column_set_max_width(BYVAL AS GtkTreeViewColumn PTR, BYVAL AS gint)
DECLARE SUB gtk_tree_view_column_set_min_width(BYVAL AS GtkTreeViewColumn PTR, BYVAL AS gint)
DECLARE SUB gtk_tree_view_column_set_reorderable(BYVAL AS GtkTreeViewColumn PTR, BYVAL AS gboolean)
DECLARE SUB gtk_tree_view_column_set_resizable(BYVAL AS GtkTreeViewColumn PTR, BYVAL AS gboolean)
DECLARE SUB gtk_tree_view_column_set_sizing(BYVAL AS GtkTreeViewColumn PTR, BYVAL AS GtkTreeViewColumnSizing)
DECLARE SUB gtk_tree_view_column_set_sort_column_id(BYVAL AS GtkTreeViewColumn PTR, BYVAL AS gint)
DECLARE SUB gtk_tree_view_column_set_sort_indicator(BYVAL AS GtkTreeViewColumn PTR, BYVAL AS gboolean)
DECLARE SUB gtk_tree_view_column_set_sort_order(BYVAL AS GtkTreeViewColumn PTR, BYVAL AS GtkSortType)
DECLARE SUB gtk_tree_view_column_set_spacing(BYVAL AS GtkTreeViewColumn PTR, BYVAL AS gint)
DECLARE SUB gtk_tree_view_column_set_title(BYVAL AS GtkTreeViewColumn PTR, BYVAL AS const gchar PTR)
DECLARE SUB gtk_tree_view_column_set_visible(BYVAL AS GtkTreeViewColumn PTR, BYVAL AS gboolean)
DECLARE SUB gtk_tree_view_column_set_widget(BYVAL AS GtkTreeViewColumn PTR, BYVAL AS GtkWidget PTR)
TYPE _GtkTreeViewColumnClass
  AS GInitiallyUnownedClass parent_class
  clicked AS SUB CDECL(BYVAL AS GtkTreeViewColumn PTR)
  _gtk_reserved1 AS SUB CDECL()
  _gtk_reserved2 AS SUB CDECL()
  _gtk_reserved3 AS SUB CDECL()
  _gtk_reserved4 AS SUB CDECL()
END TYPE
DECLARE FUNCTION gtk_tree_view_column_sizing_get_type() AS GType
#DEFINE GTK_TYPE_TREE_VIEW_COLUMN_SIZING (gtk_tree_view_column_sizing_get_type())
DECLARE FUNCTION gtk_tree_view_drop_position_get_type() AS GType
#DEFINE GTK_TYPE_TREE_VIEW_DROP_POSITION (gtk_tree_view_drop_position_get_type())
DECLARE FUNCTION gtk_tree_view_grid_lines_get_type() AS GType
#DEFINE GTK_TYPE_TREE_VIEW_GRID_LINES (gtk_tree_view_grid_lines_get_type())
TYPE _GtkUIManager
  AS GObject parent
  AS GtkUIManagerPrivate PTR private_data
END TYPE
DECLARE FUNCTION gtk_ui_manager_get_type() AS GType
#DEFINE GTK_TYPE_UI_MANAGER (gtk_ui_manager_get_type())
#DEFINE GTK_UI_MANAGER(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_UI_MANAGER, GtkUIManager))
#DEFINE GTK_UI_MANAGER_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_UI_MANAGER, GtkUIManagerClass))
#DEFINE GTK_IS_UI_MANAGER(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_UI_MANAGER))
#DEFINE GTK_IS_CLASS_UI_MANAGER(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_UI_MANAGER))
#DEFINE GTK_UI_MANAGER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_UI_MANAGER, GtkUIManagerClass))
DECLARE FUNCTION gtk_ui_manager_new() AS GtkUIManager PTR
DECLARE SUB gtk_ui_manager_add_ui(BYVAL AS GtkUIManager PTR, BYVAL AS guint, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS GtkUIManagerItemType, BYVAL AS gboolean)
DECLARE FUNCTION gtk_ui_manager_add_ui_from_file(BYVAL AS GtkUIManager PTR, BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR) AS guint
DECLARE FUNCTION gtk_ui_manager_add_ui_from_resource(BYVAL AS GtkUIManager PTR, BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR) AS guint
DECLARE FUNCTION gtk_ui_manager_add_ui_from_string(BYVAL AS GtkUIManager PTR, BYVAL AS const gchar PTR, BYVAL AS gssize, BYVAL AS GError PTR PTR) AS guint
DECLARE SUB gtk_ui_manager_ensure_update(BYVAL AS GtkUIManager PTR)
DECLARE FUNCTION gtk_ui_manager_get_accel_group(BYVAL AS GtkUIManager PTR) AS GtkAccelGroup PTR
DECLARE FUNCTION gtk_ui_manager_get_action(BYVAL AS GtkUIManager PTR, BYVAL AS const gchar PTR) AS GtkAction PTR
DECLARE FUNCTION gtk_ui_manager_get_action_groups(BYVAL AS GtkUIManager PTR) AS GList PTR
DECLARE FUNCTION gtk_ui_manager_get_add_tearoffs(BYVAL AS GtkUIManager PTR) AS gboolean
DECLARE FUNCTION gtk_ui_manager_get_toplevels(BYVAL AS GtkUIManager PTR, BYVAL AS GtkUIManagerItemType) AS GSList PTR
DECLARE FUNCTION gtk_ui_manager_get_ui(BYVAL AS GtkUIManager PTR) AS gchar PTR
DECLARE FUNCTION gtk_ui_manager_get_widget(BYVAL AS GtkUIManager PTR, BYVAL AS const gchar PTR) AS GtkWidget PTR
DECLARE SUB gtk_ui_manager_insert_action_group(BYVAL AS GtkUIManager PTR, BYVAL AS GtkActionGroup PTR, BYVAL AS gint)
DECLARE FUNCTION gtk_ui_manager_new_merge_id(BYVAL AS GtkUIManager PTR) AS guint
DECLARE SUB gtk_ui_manager_remove_action_group(BYVAL AS GtkUIManager PTR, BYVAL AS GtkActionGroup PTR)
DECLARE SUB gtk_ui_manager_remove_ui(BYVAL AS GtkUIManager PTR, BYVAL AS guint)
DECLARE SUB gtk_ui_manager_set_add_tearoffs(BYVAL AS GtkUIManager PTR, BYVAL AS gboolean)
TYPE _GtkUIManagerClass
  AS GObjectClass parent_class
  add_widget AS SUB CDECL(BYVAL AS GtkUIManager PTR, BYVAL AS GtkWidget PTR)
  actions_changed AS SUB CDECL(BYVAL AS GtkUIManager PTR)
  connect_proxy AS SUB CDECL(BYVAL AS GtkUIManager PTR, BYVAL AS GtkAction PTR, BYVAL AS GtkWidget PTR)
  disconnect_proxy AS SUB CDECL(BYVAL AS GtkUIManager PTR, BYVAL AS GtkAction PTR, BYVAL AS GtkWidget PTR)
  pre_activate AS SUB CDECL(BYVAL AS GtkUIManager PTR, BYVAL AS GtkAction PTR)
  post_activate AS SUB CDECL(BYVAL AS GtkUIManager PTR, BYVAL AS GtkAction PTR)
  get_widget AS FUNCTION CDECL(BYVAL AS GtkUIManager PTR, BYVAL AS const gchar PTR) AS GtkWidget PTR
  get_action AS FUNCTION CDECL(BYVAL AS GtkUIManager PTR, BYVAL AS const gchar PTR) AS GtkAction PTR
  _gtk_reserved1 AS SUB CDECL()
  _gtk_reserved2 AS SUB CDECL()
  _gtk_reserved3 AS SUB CDECL()
  _gtk_reserved4 AS SUB CDECL()
END TYPE
TYPE _GtkVBox
  AS GtkBox box
END TYPE
DECLARE FUNCTION gtk_unit_get_type() AS GType
#DEFINE GTK_TYPE_UNIT (gtk_unit_get_type())
DECLARE FUNCTION gtk_vbox_get_type() AS GType
#DEFINE GTK_TYPE_VBOX (gtk_vbox_get_type())
#DEFINE GTK_VBOX(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_VBOX, GtkVBox))
#DEFINE GTK_VBOX_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_VBOX, GtkVBoxClass))
#DEFINE GTK_IS_VBOX(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_VBOX))
#DEFINE GTK_IS_CLASS_VBOX(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_VBOX))
#DEFINE GTK_VBOX_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_VBOX, GtkVBoxClass))
DECLARE FUNCTION gtk_vbox_new(BYVAL AS gboolean, BYVAL AS gint) AS GtkWidget PTR
TYPE _GtkVBoxClass
  AS GtkBoxClass parent_class
END TYPE
TYPE _GtkVButtonBox
  AS GtkButtonBox button_box
END TYPE
DECLARE FUNCTION gtk_vbutton_box_get_type() AS GType
#DEFINE GTK_TYPE_VBUTTON_BOX (gtk_vbutton_box_get_type())
#DEFINE GTK_VBUTTON_BOX(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_VBUTTON_BOX, GtkVButtonBox))
#DEFINE GTK_VBUTTON_BOX_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_VBUTTON_BOX, GtkVButtonBoxClass))
#DEFINE GTK_IS_VBUTTON_BOX(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_VBUTTON_BOX))
#DEFINE GTK_IS_CLASS_VBUTTON_BOX(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_VBUTTON_BOX))
#DEFINE GTK_VBUTTON_BOX_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_VBUTTON_BOX, GtkVButtonBoxClass))
DECLARE FUNCTION gtk_vbutton_box_new() AS GtkWidget PTR
TYPE _GtkVButtonBoxClass
  AS GtkButtonBoxClass parent_class
END TYPE
TYPE _GtkVPaned
  AS GtkPaned paned
END TYPE
DECLARE FUNCTION gtk_vpaned_get_type() AS GType
#DEFINE GTK_TYPE_VPANED (gtk_vpaned_get_type())
#DEFINE GTK_VPANED(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_VPANED, GtkVPaned))
#DEFINE GTK_VPANED_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_VPANED, GtkVPanedClass))
#DEFINE GTK_IS_VPANED(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_VPANED))
#DEFINE GTK_IS_CLASS_VPANED(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_VPANED))
#DEFINE GTK_VPANED_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_VPANED, GtkVPanedClass))
DECLARE FUNCTION gtk_vpaned_new() AS GtkWidget PTR
TYPE _GtkVPanedClass
  AS GtkPanedClass parent_class
END TYPE
TYPE _GtkVScale
  AS GtkScale scale
END TYPE
DECLARE FUNCTION gtk_vscale_get_type() AS GType
#DEFINE GTK_TYPE_VSCALE (gtk_vscale_get_type())
#DEFINE GTK_VSCALE(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_VSCALE, GtkVScale))
#DEFINE GTK_VSCALE_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_VSCALE, GtkVScaleClass))
#DEFINE GTK_IS_VSCALE(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_VSCALE))
#DEFINE GTK_IS_CLASS_VSCALE(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_VSCALE))
#DEFINE GTK_VSCALE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_VSCALE, GtkVScaleClass))
DECLARE FUNCTION gtk_vscale_new(BYVAL AS GtkAdjustment PTR) AS GtkWidget PTR
DECLARE FUNCTION gtk_vscale_new_with_range(BYVAL AS gdouble, BYVAL AS gdouble, BYVAL AS gdouble) AS GtkWidget PTR
TYPE _GtkVScaleClass
  AS GtkScaleClass parent_class
END TYPE
TYPE _GtkVScrollbar
  AS GtkScrollbar scrollbar
END TYPE
DECLARE FUNCTION gtk_vscrollbar_get_type() AS GType
#DEFINE GTK_TYPE_VSCROLLBAR (gtk_vscrollbar_get_type())
#DEFINE GTK_VSCROLLBAR(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_VSCROLLBAR, GtkVScrollbar))
#DEFINE GTK_VSCROLLBAR_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_VSCROLLBAR, GtkVScrollbarClass))
#DEFINE GTK_IS_VSCROLLBAR(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_VSCROLLBAR))
#DEFINE GTK_IS_CLASS_VSCROLLBAR(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_VSCROLLBAR))
#DEFINE GTK_VSCROLLBAR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_VSCROLLBAR, GtkVScrollbarClass))
DECLARE FUNCTION gtk_vscrollbar_new(BYVAL AS GtkAdjustment PTR) AS GtkWidget PTR
TYPE _GtkVScrollbarClass
  AS GtkScrollbarClass parent_class
END TYPE
TYPE _GtkVSeparator
  AS GtkSeparator separator
END TYPE
DECLARE FUNCTION gtk_vseparator_get_type() AS GType
#DEFINE GTK_TYPE_VSEPARATOR (gtk_vseparator_get_type())
#DEFINE GTK_VSEPARATOR(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_VSEPARATOR, GtkVSeparator))
#DEFINE GTK_VSEPARATOR_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_VSEPARATOR, GtkVSeparatorClass))
#DEFINE GTK_IS_VSEPARATOR(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_VSEPARATOR))
#DEFINE GTK_IS_CLASS_VSEPARATOR(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_VSEPARATOR))
#DEFINE GTK_VSEPARATOR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_VSEPARATOR, GtkVSeparatorClass))
DECLARE FUNCTION gtk_vseparator_new() AS GtkWidget PTR
TYPE _GtkVSeparatorClass
  AS GtkSeparatorClass parent_class
END TYPE
TYPE _GtkViewport
  AS GtkBin bin
  AS GtkViewportPrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_viewport_get_type() AS GType
#DEFINE GTK_TYPE_VIEWPORT (gtk_viewport_get_type())
#DEFINE GTK_VIEWPORT(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_VIEWPORT, GtkViewport))
#DEFINE GTK_VIEWPORT_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_VIEWPORT, GtkViewportClass))
#DEFINE GTK_IS_VIEWPORT(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_VIEWPORT))
#DEFINE GTK_IS_CLASS_VIEWPORT(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_VIEWPORT))
#DEFINE GTK_VIEWPORT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_VIEWPORT, GtkViewportClass))
DECLARE FUNCTION gtk_viewport_new(BYVAL AS GtkAdjustment PTR, BYVAL AS GtkAdjustment PTR) AS GtkWidget PTR
DECLARE FUNCTION gtk_viewport_get_bin_window(BYVAL AS GtkViewport PTR) AS GdkWindow PTR
DECLARE FUNCTION gtk_viewport_get_hadjustment(BYVAL AS GtkViewport PTR) AS GtkAdjustment PTR
DECLARE FUNCTION gtk_viewport_get_shadow_type(BYVAL AS GtkViewport PTR) AS GtkShadowType
DECLARE FUNCTION gtk_viewport_get_vadjustment(BYVAL AS GtkViewport PTR) AS GtkAdjustment PTR
DECLARE FUNCTION gtk_viewport_get_view_window(BYVAL AS GtkViewport PTR) AS GdkWindow PTR
DECLARE SUB gtk_viewport_set_hadjustment(BYVAL AS GtkViewport PTR, BYVAL AS GtkAdjustment PTR)
DECLARE SUB gtk_viewport_set_shadow_type(BYVAL AS GtkViewport PTR, BYVAL AS GtkShadowType)
DECLARE SUB gtk_viewport_set_vadjustment(BYVAL AS GtkViewport PTR, BYVAL AS GtkAdjustment PTR)
TYPE _GtkViewportClass
  AS GtkBinClass parent_class
  _gtk_reserved1 AS SUB CDECL()
  _gtk_reserved2 AS SUB CDECL()
  _gtk_reserved3 AS SUB CDECL()
  _gtk_reserved4 AS SUB CDECL()
END TYPE
TYPE _GtkVolumeButton
  AS GtkScaleButton parent
END TYPE
DECLARE FUNCTION gtk_volume_button_get_type() AS GType
#DEFINE GTK_TYPE_VOLUME_BUTTON (gtk_volume_button_get_type())
#DEFINE GTK_VOLUME_BUTTON(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_VOLUME_BUTTON, GtkVolumeButton))
#DEFINE GTK_VOLUME_BUTTON_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_VOLUME_BUTTON, GtkVolumeButtonClass))
#DEFINE GTK_IS_VOLUME_BUTTON(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_VOLUME_BUTTON))
#DEFINE GTK_IS_CLASS_VOLUME_BUTTON(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_VOLUME_BUTTON))
#DEFINE GTK_VOLUME_BUTTON_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_VOLUME_BUTTON, GtkVolumeButtonClass))
DECLARE FUNCTION gtk_volume_button_new() AS GtkWidget PTR
TYPE _GtkVolumeButtonClass
  AS GtkScaleButtonClass parent_class
  _gtk_reserved1 AS SUB CDECL()
  _gtk_reserved2 AS SUB CDECL()
  _gtk_reserved3 AS SUB CDECL()
  _gtk_reserved4 AS SUB CDECL()
END TYPE
DECLARE FUNCTION gtk_widget_help_type_get_type() AS GType
#DEFINE GTK_TYPE_WIDGET_HELP_TYPE (gtk_widget_help_type_get_type())
DECLARE FUNCTION gtk_widget_path_new() AS GtkWidgetPath PTR
DECLARE FUNCTION gtk_widget_path_append_for_widget(BYVAL AS GtkWidgetPath PTR, BYVAL AS GtkWidget PTR) AS gint
DECLARE FUNCTION gtk_widget_path_append_type(BYVAL AS GtkWidgetPath PTR, BYVAL AS GType) AS gint
DECLARE FUNCTION gtk_widget_path_append_with_siblings(BYVAL AS GtkWidgetPath PTR, BYVAL AS GtkWidgetPath PTR, BYVAL AS guint) AS gint
DECLARE FUNCTION gtk_widget_path_copy(BYVAL AS const GtkWidgetPath PTR) AS GtkWidgetPath PTR
DECLARE SUB gtk_widget_path_free(BYVAL AS GtkWidgetPath PTR)
DECLARE FUNCTION gtk_widget_path_get_object_type(BYVAL AS const GtkWidgetPath PTR) AS GType
DECLARE FUNCTION gtk_widget_path_has_parent(BYVAL AS const GtkWidgetPath PTR, BYVAL AS GType) AS gboolean
DECLARE FUNCTION gtk_widget_path_is_type(BYVAL AS const GtkWidgetPath PTR, BYVAL AS GType) AS gboolean
DECLARE SUB gtk_widget_path_iter_add_class(BYVAL AS GtkWidgetPath PTR, BYVAL AS gint, BYVAL AS const gchar PTR)
DECLARE SUB gtk_widget_path_iter_add_region(BYVAL AS GtkWidgetPath PTR, BYVAL AS gint, BYVAL AS const gchar PTR, BYVAL AS GtkRegionFlags)
DECLARE SUB gtk_widget_path_iter_clear_classes(BYVAL AS GtkWidgetPath PTR, BYVAL AS gint)
DECLARE SUB gtk_widget_path_iter_clear_regions(BYVAL AS GtkWidgetPath PTR, BYVAL AS gint)
DECLARE FUNCTION gtk_widget_path_iter_get_name(BYVAL AS const GtkWidgetPath PTR, BYVAL AS gint) AS const gchar PTR
DECLARE FUNCTION gtk_widget_path_iter_get_object_name(BYVAL AS const GtkWidgetPath PTR, BYVAL AS gint) AS const char PTR
DECLARE FUNCTION gtk_widget_path_iter_get_object_type(BYVAL AS const GtkWidgetPath PTR, BYVAL AS gint) AS GType
DECLARE FUNCTION gtk_widget_path_iter_get_sibling_index(BYVAL AS const GtkWidgetPath PTR, BYVAL AS gint) AS guint
DECLARE FUNCTION gtk_widget_path_iter_get_siblings(BYVAL AS const GtkWidgetPath PTR, BYVAL AS gint) AS const GtkWidgetPath PTR
DECLARE FUNCTION gtk_widget_path_iter_get_state(BYVAL AS const GtkWidgetPath PTR, BYVAL AS gint) AS GtkStateFlags
DECLARE FUNCTION gtk_widget_path_iter_has_class(BYVAL AS const GtkWidgetPath PTR, BYVAL AS gint, BYVAL AS const gchar PTR) AS gboolean
DECLARE FUNCTION gtk_widget_path_iter_has_name(BYVAL AS const GtkWidgetPath PTR, BYVAL AS gint, BYVAL AS const gchar PTR) AS gboolean
DECLARE FUNCTION gtk_widget_path_iter_has_qclass(BYVAL AS const GtkWidgetPath PTR, BYVAL AS gint, BYVAL AS GQuark) AS gboolean
DECLARE FUNCTION gtk_widget_path_iter_has_qname(BYVAL AS const GtkWidgetPath PTR, BYVAL AS gint, BYVAL AS GQuark) AS gboolean
DECLARE FUNCTION gtk_widget_path_iter_has_qregion(BYVAL AS const GtkWidgetPath PTR, BYVAL AS gint, BYVAL AS GQuark, BYVAL AS GtkRegionFlags PTR) AS gboolean
DECLARE FUNCTION gtk_widget_path_iter_has_region(BYVAL AS const GtkWidgetPath PTR, BYVAL AS gint, BYVAL AS const gchar PTR, BYVAL AS GtkRegionFlags PTR) AS gboolean
DECLARE FUNCTION gtk_widget_path_iter_list_classes(BYVAL AS const GtkWidgetPath PTR, BYVAL AS gint) AS GSList PTR
DECLARE FUNCTION gtk_widget_path_iter_list_regions(BYVAL AS const GtkWidgetPath PTR, BYVAL AS gint) AS GSList PTR
DECLARE SUB gtk_widget_path_iter_remove_class(BYVAL AS GtkWidgetPath PTR, BYVAL AS gint, BYVAL AS const gchar PTR)
DECLARE SUB gtk_widget_path_iter_remove_region(BYVAL AS GtkWidgetPath PTR, BYVAL AS gint, BYVAL AS const gchar PTR)
DECLARE SUB gtk_widget_path_iter_set_name(BYVAL AS GtkWidgetPath PTR, BYVAL AS gint, BYVAL AS const gchar PTR)
DECLARE SUB gtk_widget_path_iter_set_object_name(BYVAL AS GtkWidgetPath PTR, BYVAL AS gint, BYVAL AS const char PTR)
DECLARE SUB gtk_widget_path_iter_set_object_type(BYVAL AS GtkWidgetPath PTR, BYVAL AS gint, BYVAL AS GType)
DECLARE SUB gtk_widget_path_iter_set_state(BYVAL AS GtkWidgetPath PTR, BYVAL AS gint, BYVAL AS GtkStateFlags)
DECLARE FUNCTION gtk_widget_path_length(BYVAL AS const GtkWidgetPath PTR) AS gint
DECLARE SUB gtk_widget_path_prepend_type(BYVAL AS GtkWidgetPath PTR, BYVAL AS GType)
DECLARE FUNCTION gtk_widget_path_ref(BYVAL AS GtkWidgetPath PTR) AS GtkWidgetPath PTR
DECLARE FUNCTION gtk_widget_path_to_string(BYVAL AS const GtkWidgetPath PTR) AS char PTR
DECLARE SUB gtk_widget_path_unref(BYVAL AS GtkWidgetPath PTR)
TYPE _GtkWindowAccessible
  AS GtkContainerAccessible parent
  AS GtkWindowAccessiblePrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_window_accessible_get_type() AS GType
#DEFINE GTK_TYPE_WINDOW_ACCESSIBLE (gtk_window_accessible_get_type())
#DEFINE GTK_WINDOW_ACCESSIBLE(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_WINDOW_ACCESSIBLE, GtkWindowAccessible))
#DEFINE GTK_WINDOW_ACCESSIBLE_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_WINDOW_ACCESSIBLE, GtkWindowAccessibleClass))
#DEFINE GTK_IS_WINDOW_ACCESSIBLE(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_WINDOW_ACCESSIBLE))
#DEFINE GTK_IS_CLASS_WINDOW_ACCESSIBLE(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_WINDOW_ACCESSIBLE))
#DEFINE GTK_WINDOW_ACCESSIBLE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_WINDOW_ACCESSIBLE, GtkWindowAccessibleClass))
TYPE _GtkWindowAccessibleClass
  AS GtkContainerAccessibleClass parent_class
END TYPE
TYPE _GtkWindowGroup
  AS GObject parent_instance
  AS GtkWindowGroupPrivate PTR priv
END TYPE
DECLARE FUNCTION gtk_window_group_get_type() AS GType
#DEFINE GTK_TYPE_WINDOW_GROUP (gtk_window_group_get_type())
#DEFINE GTK_WINDOW_GROUP(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_WINDOW_GROUP, GtkWindowGroup))
#DEFINE GTK_WINDOW_GROUP_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GTK_TYPE_WINDOW_GROUP, GtkWindowGroupClass))
#DEFINE GTK_IS_WINDOW_GROUP(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_WINDOW_GROUP))
#DEFINE GTK_IS_CLASS_WINDOW_GROUP(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GTK_TYPE_WINDOW_GROUP))
#DEFINE GTK_WINDOW_GROUP_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_WINDOW_GROUP, GtkWindowGroupClass))
DECLARE FUNCTION gtk_window_group_new() AS GtkWindowGroup PTR
DECLARE SUB gtk_window_group_add_window(BYVAL AS GtkWindowGroup PTR, BYVAL AS GtkWindow PTR)
DECLARE FUNCTION gtk_window_group_get_current_device_grab(BYVAL AS GtkWindowGroup PTR, BYVAL AS GdkDevice PTR) AS GtkWidget PTR
DECLARE FUNCTION gtk_window_group_get_current_grab(BYVAL AS GtkWindowGroup PTR) AS GtkWidget PTR
DECLARE FUNCTION gtk_window_group_list_windows(BYVAL AS GtkWindowGroup PTR) AS GList PTR
DECLARE SUB gtk_window_group_remove_window(BYVAL AS GtkWindowGroup PTR, BYVAL AS GtkWindow PTR)
TYPE _GtkWindowGroupClass
  AS GObjectClass parent_class
  _gtk_reserved1 AS SUB CDECL()
  _gtk_reserved2 AS SUB CDECL()
  _gtk_reserved3 AS SUB CDECL()
  _gtk_reserved4 AS SUB CDECL()
END TYPE
DECLARE FUNCTION gtk_window_position_get_type() AS GType
#DEFINE GTK_TYPE_WINDOW_POSITION (gtk_window_position_get_type())
' P_4

DECLARE FUNCTION gtk_accel_groups_activate(BYVAL AS GObject PTR, BYVAL AS guint, BYVAL AS GdkModifierType) AS gboolean
DECLARE FUNCTION gtk_accel_groups_from_object(BYVAL AS GObject PTR) AS GSList PTR
DECLARE FUNCTION gtk_accelerator_get_default_mod_mask() AS GdkModifierType
DECLARE FUNCTION gtk_accelerator_get_label(BYVAL AS guint, BYVAL AS GdkModifierType) AS gchar PTR
DECLARE FUNCTION gtk_accelerator_get_label_with_keycode(BYVAL AS GdkDisplay PTR, BYVAL AS guint, BYVAL AS guint, BYVAL AS GdkModifierType) AS gchar PTR
DECLARE FUNCTION gtk_accelerator_name(BYVAL AS guint, BYVAL AS GdkModifierType) AS gchar PTR
DECLARE FUNCTION gtk_accelerator_name_with_keycode(BYVAL AS GdkDisplay PTR, BYVAL AS guint, BYVAL AS guint, BYVAL AS GdkModifierType) AS gchar PTR
DECLARE SUB gtk_accelerator_parse(BYVAL AS const gchar PTR, BYVAL AS guint PTR, BYVAL AS GdkModifierType PTR)
DECLARE SUB gtk_accelerator_parse_with_keycode(BYVAL AS const gchar PTR, BYVAL AS guint PTR, BYVAL AS guint PTR PTR, BYVAL AS GdkModifierType PTR)
DECLARE SUB gtk_accelerator_set_default_mod_mask(BYVAL AS GdkModifierType)
DECLARE FUNCTION gtk_accelerator_valid(BYVAL AS guint, BYVAL AS GdkModifierType) AS gboolean
DECLARE FUNCTION gtk_alternative_dialog_button_order(BYVAL AS GdkScreen PTR) AS gboolean
DECLARE FUNCTION gtk_bindings_activate(BYVAL AS GObject PTR, BYVAL AS guint, BYVAL AS GdkModifierType) AS gboolean
DECLARE FUNCTION gtk_bindings_activate_event(BYVAL AS GObject PTR, BYVAL AS GdkEventKey PTR) AS gboolean
DECLARE FUNCTION gtk_cairo_should_draw_window(BYVAL AS cairo_t PTR, BYVAL AS GdkWindow PTR) AS gboolean
DECLARE SUB gtk_cairo_transform_to_window(BYVAL AS cairo_t PTR, BYVAL AS GtkWidget PTR, BYVAL AS GdkWindow PTR)
DECLARE FUNCTION gtk_check_version(BYVAL AS guint, BYVAL AS guint, BYVAL AS guint) AS const gchar PTR
DECLARE SUB gtk_device_grab_add(BYVAL AS GtkWidget PTR, BYVAL AS GdkDevice PTR, BYVAL AS gboolean)
DECLARE SUB gtk_device_grab_remove(BYVAL AS GtkWidget PTR, BYVAL AS GdkDevice PTR)
DECLARE SUB gtk_disable_setlocale()
DECLARE FUNCTION gtk_distribute_natural_allocation(BYVAL AS gint, BYVAL AS guint, BYVAL AS GtkRequestedSize PTR) AS gint
DECLARE SUB gtk_drag_cancel(BYVAL AS GdkDragContext PTR)
DECLARE SUB gtk_drag_finish(BYVAL AS GdkDragContext PTR, BYVAL AS gboolean, BYVAL AS gboolean, BYVAL AS guint32)
DECLARE FUNCTION gtk_drag_get_source_widget(BYVAL AS GdkDragContext PTR) AS GtkWidget PTR
DECLARE SUB gtk_drag_set_icon_default(BYVAL AS GdkDragContext PTR)
DECLARE SUB gtk_drag_set_icon_gicon(BYVAL AS GdkDragContext PTR, BYVAL AS GIcon PTR, BYVAL AS gint, BYVAL AS gint)
DECLARE SUB gtk_drag_set_icon_name(BYVAL AS GdkDragContext PTR, BYVAL AS const gchar PTR, BYVAL AS gint, BYVAL AS gint)
DECLARE SUB gtk_drag_set_icon_pixbuf(BYVAL AS GdkDragContext PTR, BYVAL AS GdkPixbuf PTR, BYVAL AS gint, BYVAL AS gint)
DECLARE SUB gtk_drag_set_icon_stock(BYVAL AS GdkDragContext PTR, BYVAL AS const gchar PTR, BYVAL AS gint, BYVAL AS gint)
DECLARE SUB gtk_drag_set_icon_surface(BYVAL AS GdkDragContext PTR, BYVAL AS cairo_surface_t PTR)
DECLARE SUB gtk_drag_set_icon_widget(BYVAL AS GdkDragContext PTR, BYVAL AS GtkWidget PTR, BYVAL AS gint, BYVAL AS gint)
DECLARE SUB gtk_draw_insertion_cursor(BYVAL AS GtkWidget PTR, BYVAL AS cairo_t PTR, BYVAL AS const GdkRectangle PTR, BYVAL AS gboolean, BYVAL AS GtkTextDirection, BYVAL AS gboolean)
DECLARE FUNCTION gtk_events_pending() AS gboolean
DECLARE FUNCTION gtk_false() AS gboolean
DECLARE FUNCTION gtk_get_binary_age() AS guint
DECLARE FUNCTION gtk_get_current_event() AS GdkEvent PTR
DECLARE FUNCTION gtk_get_current_event_device() AS GdkDevice PTR
DECLARE FUNCTION gtk_get_current_event_state(BYVAL AS GdkModifierType PTR) AS gboolean
DECLARE FUNCTION gtk_get_current_event_time() AS guint32
DECLARE FUNCTION gtk_get_debug_flags() AS guint
DECLARE FUNCTION gtk_get_default_language() AS PangoLanguage PTR
DECLARE FUNCTION gtk_get_event_widget(BYVAL AS GdkEvent PTR) AS GtkWidget PTR
DECLARE FUNCTION gtk_get_interface_age() AS guint
DECLARE FUNCTION gtk_get_locale_direction() AS GtkTextDirection
DECLARE FUNCTION gtk_get_major_version() AS guint
DECLARE FUNCTION gtk_get_micro_version() AS guint
DECLARE FUNCTION gtk_get_minor_version() AS guint
DECLARE FUNCTION gtk_get_option_group(BYVAL AS gboolean) AS GOptionGroup PTR
DECLARE FUNCTION gtk_grab_get_current() AS GtkWidget PTR
DECLARE SUB gtk_init(BYVAL AS gint /'int'/ PTR, BYVAL AS char PTR PTR PTR)
DECLARE FUNCTION gtk_init_check(BYVAL AS gint /'int'/ PTR, BYVAL AS char PTR PTR PTR) AS gboolean
DECLARE FUNCTION gtk_init_with_args(BYVAL AS gint PTR, BYVAL AS gchar PTR PTR PTR, BYVAL AS const gchar PTR, BYVAL AS const GOptionEntry PTR, BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION gtk_key_snooper_install(BYVAL AS GtkKeySnoopFunc, BYVAL AS gpointer) AS guint
DECLARE SUB gtk_key_snooper_remove(BYVAL AS guint)
DECLARE SUB gtk_main()
DECLARE SUB gtk_main_do_event(BYVAL AS GdkEvent PTR)
DECLARE FUNCTION gtk_main_iteration() AS gboolean
DECLARE FUNCTION gtk_main_iteration_do(BYVAL AS gboolean) AS gboolean
DECLARE FUNCTION gtk_main_level() AS guint
DECLARE SUB gtk_main_quit()
DECLARE SUB gtk_paint_arrow(BYVAL AS GtkStyle PTR, BYVAL AS cairo_t PTR, BYVAL AS GtkStateType, BYVAL AS GtkShadowType, BYVAL AS GtkWidget PTR, BYVAL AS const gchar PTR, BYVAL AS GtkArrowType, BYVAL AS gboolean, BYVAL AS gint, BYVAL AS gint, BYVAL AS gint, BYVAL AS gint)
DECLARE SUB gtk_paint_box(BYVAL AS GtkStyle PTR, BYVAL AS cairo_t PTR, BYVAL AS GtkStateType, BYVAL AS GtkShadowType, BYVAL AS GtkWidget PTR, BYVAL AS const gchar PTR, BYVAL AS gint, BYVAL AS gint, BYVAL AS gint, BYVAL AS gint)
DECLARE SUB gtk_paint_box_gap(BYVAL AS GtkStyle PTR, BYVAL AS cairo_t PTR, BYVAL AS GtkStateType, BYVAL AS GtkShadowType, BYVAL AS GtkWidget PTR, BYVAL AS const gchar PTR, BYVAL AS gint, BYVAL AS gint, BYVAL AS gint, BYVAL AS gint, BYVAL AS GtkPositionType, BYVAL AS gint, BYVAL AS gint)
DECLARE SUB gtk_paint_check(BYVAL AS GtkStyle PTR, BYVAL AS cairo_t PTR, BYVAL AS GtkStateType, BYVAL AS GtkShadowType, BYVAL AS GtkWidget PTR, BYVAL AS const gchar PTR, BYVAL AS gint, BYVAL AS gint, BYVAL AS gint, BYVAL AS gint)
DECLARE SUB gtk_paint_diamond(BYVAL AS GtkStyle PTR, BYVAL AS cairo_t PTR, BYVAL AS GtkStateType, BYVAL AS GtkShadowType, BYVAL AS GtkWidget PTR, BYVAL AS const gchar PTR, BYVAL AS gint, BYVAL AS gint, BYVAL AS gint, BYVAL AS gint)
DECLARE SUB gtk_paint_expander(BYVAL AS GtkStyle PTR, BYVAL AS cairo_t PTR, BYVAL AS GtkStateType, BYVAL AS GtkWidget PTR, BYVAL AS const gchar PTR, BYVAL AS gint, BYVAL AS gint, BYVAL AS GtkExpanderStyle)
DECLARE SUB gtk_paint_extension(BYVAL AS GtkStyle PTR, BYVAL AS cairo_t PTR, BYVAL AS GtkStateType, BYVAL AS GtkShadowType, BYVAL AS GtkWidget PTR, BYVAL AS const gchar PTR, BYVAL AS gint, BYVAL AS gint, BYVAL AS gint, BYVAL AS gint, BYVAL AS GtkPositionType)
DECLARE SUB gtk_paint_flat_box(BYVAL AS GtkStyle PTR, BYVAL AS cairo_t PTR, BYVAL AS GtkStateType, BYVAL AS GtkShadowType, BYVAL AS GtkWidget PTR, BYVAL AS const gchar PTR, BYVAL AS gint, BYVAL AS gint, BYVAL AS gint, BYVAL AS gint)
DECLARE SUB gtk_paint_focus(BYVAL AS GtkStyle PTR, BYVAL AS cairo_t PTR, BYVAL AS GtkStateType, BYVAL AS GtkWidget PTR, BYVAL AS const gchar PTR, BYVAL AS gint, BYVAL AS gint, BYVAL AS gint, BYVAL AS gint)
DECLARE SUB gtk_paint_handle(BYVAL AS GtkStyle PTR, BYVAL AS cairo_t PTR, BYVAL AS GtkStateType, BYVAL AS GtkShadowType, BYVAL AS GtkWidget PTR, BYVAL AS const gchar PTR, BYVAL AS gint, BYVAL AS gint, BYVAL AS gint, BYVAL AS gint, BYVAL AS GtkOrientation)
DECLARE SUB gtk_paint_hline(BYVAL AS GtkStyle PTR, BYVAL AS cairo_t PTR, BYVAL AS GtkStateType, BYVAL AS GtkWidget PTR, BYVAL AS const gchar PTR, BYVAL AS gint, BYVAL AS gint, BYVAL AS gint)
DECLARE SUB gtk_paint_layout(BYVAL AS GtkStyle PTR, BYVAL AS cairo_t PTR, BYVAL AS GtkStateType, BYVAL AS gboolean, BYVAL AS GtkWidget PTR, BYVAL AS const gchar PTR, BYVAL AS gint, BYVAL AS gint, BYVAL AS PangoLayout PTR)
DECLARE SUB gtk_paint_option(BYVAL AS GtkStyle PTR, BYVAL AS cairo_t PTR, BYVAL AS GtkStateType, BYVAL AS GtkShadowType, BYVAL AS GtkWidget PTR, BYVAL AS const gchar PTR, BYVAL AS gint, BYVAL AS gint, BYVAL AS gint, BYVAL AS gint)
DECLARE SUB gtk_paint_resize_grip(BYVAL AS GtkStyle PTR, BYVAL AS cairo_t PTR, BYVAL AS GtkStateType, BYVAL AS GtkWidget PTR, BYVAL AS const gchar PTR, BYVAL AS GdkWindowEdge, BYVAL AS gint, BYVAL AS gint, BYVAL AS gint, BYVAL AS gint)
DECLARE SUB gtk_paint_shadow(BYVAL AS GtkStyle PTR, BYVAL AS cairo_t PTR, BYVAL AS GtkStateType, BYVAL AS GtkShadowType, BYVAL AS GtkWidget PTR, BYVAL AS const gchar PTR, BYVAL AS gint, BYVAL AS gint, BYVAL AS gint, BYVAL AS gint)
DECLARE SUB gtk_paint_shadow_gap(BYVAL AS GtkStyle PTR, BYVAL AS cairo_t PTR, BYVAL AS GtkStateType, BYVAL AS GtkShadowType, BYVAL AS GtkWidget PTR, BYVAL AS const gchar PTR, BYVAL AS gint, BYVAL AS gint, BYVAL AS gint, BYVAL AS gint, BYVAL AS GtkPositionType, BYVAL AS gint, BYVAL AS gint)
DECLARE SUB gtk_paint_slider(BYVAL AS GtkStyle PTR, BYVAL AS cairo_t PTR, BYVAL AS GtkStateType, BYVAL AS GtkShadowType, BYVAL AS GtkWidget PTR, BYVAL AS const gchar PTR, BYVAL AS gint, BYVAL AS gint, BYVAL AS gint, BYVAL AS gint, BYVAL AS GtkOrientation)
DECLARE SUB gtk_paint_spinner(BYVAL AS GtkStyle PTR, BYVAL AS cairo_t PTR, BYVAL AS GtkStateType, BYVAL AS GtkWidget PTR, BYVAL AS const gchar PTR, BYVAL AS guint, BYVAL AS gint, BYVAL AS gint, BYVAL AS gint, BYVAL AS gint)
DECLARE SUB gtk_paint_tab(BYVAL AS GtkStyle PTR, BYVAL AS cairo_t PTR, BYVAL AS GtkStateType, BYVAL AS GtkShadowType, BYVAL AS GtkWidget PTR, BYVAL AS const gchar PTR, BYVAL AS gint, BYVAL AS gint, BYVAL AS gint, BYVAL AS gint)
DECLARE SUB gtk_paint_vline(BYVAL AS GtkStyle PTR, BYVAL AS cairo_t PTR, BYVAL AS GtkStateType, BYVAL AS GtkWidget PTR, BYVAL AS const gchar PTR, BYVAL AS gint, BYVAL AS gint, BYVAL AS gint)
DECLARE FUNCTION gtk_parse_args(BYVAL AS gint /'int'/ PTR, BYVAL AS char PTR PTR PTR) AS gboolean
DECLARE FUNCTION gtk_print_run_page_setup_dialog(BYVAL AS GtkWindow PTR, BYVAL AS GtkPageSetup PTR, BYVAL AS GtkPrintSettings PTR) AS GtkPageSetup PTR
DECLARE SUB gtk_print_run_page_setup_dialog_async(BYVAL AS GtkWindow PTR, BYVAL AS GtkPageSetup PTR, BYVAL AS GtkPrintSettings PTR, BYVAL AS GtkPageSetupDoneFunc, BYVAL AS gpointer)
DECLARE SUB gtk_propagate_event(BYVAL AS GtkWidget PTR, BYVAL AS GdkEvent PTR)
DECLARE SUB gtk_rc_add_default_file(BYVAL AS const gchar PTR)
DECLARE FUNCTION gtk_rc_find_module_in_path(BYVAL AS const gchar PTR) AS gchar PTR
DECLARE FUNCTION gtk_rc_find_pixmap_in_path(BYVAL AS GtkSettings PTR, BYVAL AS GScanner PTR, BYVAL AS const gchar PTR) AS gchar PTR
DECLARE FUNCTION gtk_rc_get_default_files() AS gchar PTR PTR
DECLARE FUNCTION gtk_rc_get_im_module_file() AS gchar PTR
DECLARE FUNCTION gtk_rc_get_im_module_path() AS gchar PTR
DECLARE FUNCTION gtk_rc_get_module_dir() AS gchar PTR
DECLARE FUNCTION gtk_rc_get_style(BYVAL AS GtkWidget PTR) AS GtkStyle PTR
DECLARE FUNCTION gtk_rc_get_style_by_paths(BYVAL AS GtkSettings PTR, BYVAL AS const char PTR, BYVAL AS const char PTR, BYVAL AS GType) AS GtkStyle PTR
DECLARE FUNCTION gtk_rc_get_theme_dir() AS gchar PTR
DECLARE SUB gtk_rc_parse(BYVAL AS const gchar PTR)
DECLARE FUNCTION gtk_rc_parse_color(BYVAL AS GScanner PTR, BYVAL AS GdkColor PTR) AS guint
DECLARE FUNCTION gtk_rc_parse_color_full(BYVAL AS GScanner PTR, BYVAL AS GtkRcStyle PTR, BYVAL AS GdkColor PTR) AS guint
DECLARE FUNCTION gtk_rc_parse_priority(BYVAL AS GScanner PTR, BYVAL AS GtkPathPriorityType PTR) AS guint
DECLARE FUNCTION gtk_rc_parse_state(BYVAL AS GScanner PTR, BYVAL AS GtkStateType PTR) AS guint
DECLARE SUB gtk_rc_parse_string(BYVAL AS const gchar PTR)
DECLARE FUNCTION gtk_rc_reparse_all() AS gboolean
DECLARE FUNCTION gtk_rc_reparse_all_for_settings(BYVAL AS GtkSettings PTR, BYVAL AS gboolean) AS gboolean
DECLARE SUB gtk_rc_reset_styles(BYVAL AS GtkSettings PTR)
DECLARE FUNCTION gtk_rc_scanner_new() AS GScanner PTR
DECLARE SUB gtk_rc_set_default_files(BYVAL AS gchar PTR PTR)
DECLARE SUB gtk_render_activity(BYVAL AS GtkStyleContext PTR, BYVAL AS cairo_t PTR, BYVAL AS gdouble, BYVAL AS gdouble, BYVAL AS gdouble, BYVAL AS gdouble)
DECLARE SUB gtk_render_arrow(BYVAL AS GtkStyleContext PTR, BYVAL AS cairo_t PTR, BYVAL AS gdouble, BYVAL AS gdouble, BYVAL AS gdouble, BYVAL AS gdouble)
DECLARE SUB gtk_render_background(BYVAL AS GtkStyleContext PTR, BYVAL AS cairo_t PTR, BYVAL AS gdouble, BYVAL AS gdouble, BYVAL AS gdouble, BYVAL AS gdouble)
DECLARE SUB gtk_render_background_get_clip(BYVAL AS GtkStyleContext PTR, BYVAL AS gdouble, BYVAL AS gdouble, BYVAL AS gdouble, BYVAL AS gdouble, BYVAL AS GdkRectangle PTR)
DECLARE SUB gtk_render_check(BYVAL AS GtkStyleContext PTR, BYVAL AS cairo_t PTR, BYVAL AS gdouble, BYVAL AS gdouble, BYVAL AS gdouble, BYVAL AS gdouble)
DECLARE SUB gtk_render_expander(BYVAL AS GtkStyleContext PTR, BYVAL AS cairo_t PTR, BYVAL AS gdouble, BYVAL AS gdouble, BYVAL AS gdouble, BYVAL AS gdouble)
DECLARE SUB gtk_render_extension(BYVAL AS GtkStyleContext PTR, BYVAL AS cairo_t PTR, BYVAL AS gdouble, BYVAL AS gdouble, BYVAL AS gdouble, BYVAL AS gdouble, BYVAL AS GtkPositionType)
DECLARE SUB gtk_render_focus(BYVAL AS GtkStyleContext PTR, BYVAL AS cairo_t PTR, BYVAL AS gdouble, BYVAL AS gdouble, BYVAL AS gdouble, BYVAL AS gdouble)
DECLARE SUB gtk_render_frame(BYVAL AS GtkStyleContext PTR, BYVAL AS cairo_t PTR, BYVAL AS gdouble, BYVAL AS gdouble, BYVAL AS gdouble, BYVAL AS gdouble)
DECLARE SUB gtk_render_frame_gap(BYVAL AS GtkStyleContext PTR, BYVAL AS cairo_t PTR, BYVAL AS gdouble, BYVAL AS gdouble, BYVAL AS gdouble, BYVAL AS gdouble, BYVAL AS GtkPositionType, BYVAL AS gdouble, BYVAL AS gdouble)
DECLARE SUB gtk_render_handle(BYVAL AS GtkStyleContext PTR, BYVAL AS cairo_t PTR, BYVAL AS gdouble, BYVAL AS gdouble, BYVAL AS gdouble, BYVAL AS gdouble)
DECLARE SUB gtk_render_icon(BYVAL AS GtkStyleContext PTR, BYVAL AS cairo_t PTR, BYVAL AS GdkPixbuf PTR, BYVAL AS gdouble, BYVAL AS gdouble)
DECLARE FUNCTION gtk_render_icon_pixbuf(BYVAL AS GtkStyleContext PTR, BYVAL AS const GtkIconSource PTR, BYVAL AS GtkIconSize) AS GdkPixbuf PTR
DECLARE SUB gtk_render_icon_surface(BYVAL AS GtkStyleContext PTR, BYVAL AS cairo_t PTR, BYVAL AS cairo_surface_t PTR, BYVAL AS gdouble, BYVAL AS gdouble)
DECLARE SUB gtk_render_insertion_cursor(BYVAL AS GtkStyleContext PTR, BYVAL AS cairo_t PTR, BYVAL AS gdouble, BYVAL AS gdouble, BYVAL AS PangoLayout PTR, BYVAL AS gint /'int'/, BYVAL AS PangoDirection)
DECLARE SUB gtk_render_layout(BYVAL AS GtkStyleContext PTR, BYVAL AS cairo_t PTR, BYVAL AS gdouble, BYVAL AS gdouble, BYVAL AS PangoLayout PTR)
DECLARE SUB gtk_render_line(BYVAL AS GtkStyleContext PTR, BYVAL AS cairo_t PTR, BYVAL AS gdouble, BYVAL AS gdouble, BYVAL AS gdouble, BYVAL AS gdouble)
DECLARE SUB gtk_render_option(BYVAL AS GtkStyleContext PTR, BYVAL AS cairo_t PTR, BYVAL AS gdouble, BYVAL AS gdouble, BYVAL AS gdouble, BYVAL AS gdouble)
DECLARE SUB gtk_render_slider(BYVAL AS GtkStyleContext PTR, BYVAL AS cairo_t PTR, BYVAL AS gdouble, BYVAL AS gdouble, BYVAL AS gdouble, BYVAL AS gdouble, BYVAL AS GtkOrientation)
DECLARE SUB gtk_rgb_to_hsv(BYVAL AS gdouble, BYVAL AS gdouble, BYVAL AS gdouble, BYVAL AS gdouble PTR, BYVAL AS gdouble PTR, BYVAL AS gdouble PTR)
DECLARE SUB gtk_selection_add_target(BYVAL AS GtkWidget PTR, BYVAL AS any ptr /'GdkAtom'/, BYVAL AS any ptr /'GdkAtom'/, BYVAL AS guint)
DECLARE SUB gtk_selection_add_targets(BYVAL AS GtkWidget PTR, BYVAL AS any ptr /'GdkAtom'/, BYVAL AS const GtkTargetEntry PTR, BYVAL AS guint)
DECLARE SUB gtk_selection_clear_targets(BYVAL AS GtkWidget PTR, BYVAL AS any ptr /'GdkAtom'/)
DECLARE FUNCTION gtk_selection_convert(BYVAL AS GtkWidget PTR, BYVAL AS any ptr /'GdkAtom'/, BYVAL AS any ptr /'GdkAtom'/, BYVAL AS guint32) AS gboolean
DECLARE FUNCTION gtk_selection_owner_set(BYVAL AS GtkWidget PTR, BYVAL AS any ptr /'GdkAtom'/, BYVAL AS guint32) AS gboolean
DECLARE FUNCTION gtk_selection_owner_set_for_display(BYVAL AS GdkDisplay PTR, BYVAL AS GtkWidget PTR, BYVAL AS any ptr /'GdkAtom'/, BYVAL AS guint32) AS gboolean
DECLARE SUB gtk_selection_remove_all(BYVAL AS GtkWidget PTR)
DECLARE SUB gtk_set_debug_flags(BYVAL AS guint)
DECLARE SUB gtk_show_about_dialog(BYVAL AS GtkWindow PTR, BYVAL AS const gchar PTR, ...)
DECLARE FUNCTION gtk_show_uri(BYVAL AS GdkScreen PTR, BYVAL AS const gchar PTR, BYVAL AS guint32, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION gtk_show_uri_on_window(BYVAL AS GtkWindow PTR, BYVAL AS const char PTR, BYVAL AS guint32, BYVAL AS GError PTR PTR) AS gboolean
DECLARE SUB gtk_stock_add_ ALIAS "gtk_stock_add" (BYVAL AS const GtkStockItem PTR, BYVAL AS guint)
DECLARE SUB gtk_stock_add_static(BYVAL AS const GtkStockItem PTR, BYVAL AS guint)
DECLARE FUNCTION gtk_stock_list_ids() AS GSList PTR
DECLARE FUNCTION gtk_stock_lookup(BYVAL AS const gchar PTR, BYVAL AS GtkStockItem PTR) AS gboolean
DECLARE SUB gtk_stock_set_translate_func(BYVAL AS const gchar PTR, BYVAL AS GtkTranslateFunc, BYVAL AS gpointer, BYVAL AS GDestroyNotify)
DECLARE SUB gtk_target_table_free(BYVAL AS GtkTargetEntry PTR, BYVAL AS gint)
DECLARE FUNCTION gtk_target_table_new_from_list(BYVAL AS GtkTargetList PTR, BYVAL AS gint PTR) AS GtkTargetEntry PTR
DECLARE FUNCTION gtk_targets_include_image(BYVAL AS any ptr /'GdkAtom'/ PTR, BYVAL AS gint, BYVAL AS gboolean) AS gboolean
DECLARE FUNCTION gtk_targets_include_rich_text(BYVAL AS any ptr /'GdkAtom'/ PTR, BYVAL AS gint, BYVAL AS GtkTextBuffer PTR) AS gboolean
DECLARE FUNCTION gtk_targets_include_text(BYVAL AS any ptr /'GdkAtom'/ PTR, BYVAL AS gint) AS gboolean
DECLARE FUNCTION gtk_targets_include_uri(BYVAL AS any ptr /'GdkAtom'/ PTR, BYVAL AS gint) AS gboolean
DECLARE FUNCTION gtk_test_create_simple_window(BYVAL AS const gchar PTR, BYVAL AS const gchar PTR) AS GtkWidget PTR
DECLARE FUNCTION gtk_test_create_widget(BYVAL AS GType, BYVAL AS const gchar PTR, ...) AS GtkWidget PTR
DECLARE FUNCTION gtk_test_display_button_window(BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, ...) AS GtkWidget PTR
DECLARE FUNCTION gtk_test_find_label(BYVAL AS GtkWidget PTR, BYVAL AS const gchar PTR) AS GtkWidget PTR
DECLARE FUNCTION gtk_test_find_sibling(BYVAL AS GtkWidget PTR, BYVAL AS GType) AS GtkWidget PTR
DECLARE FUNCTION gtk_test_find_widget(BYVAL AS GtkWidget PTR, BYVAL AS const gchar PTR, BYVAL AS GType) AS GtkWidget PTR
DECLARE SUB gtk_test_init(BYVAL AS gint /'int'/ PTR, BYVAL AS char PTR PTR PTR, ...)
DECLARE FUNCTION gtk_test_list_all_types(BYVAL AS guint PTR) AS const GType PTR
DECLARE SUB gtk_test_register_all_types()
DECLARE FUNCTION gtk_test_slider_get_value(BYVAL AS GtkWidget PTR) AS double
DECLARE SUB gtk_test_slider_set_perc(BYVAL AS GtkWidget PTR, BYVAL AS double)
DECLARE FUNCTION gtk_test_spin_button_click(BYVAL AS GtkSpinButton PTR, BYVAL AS guint, BYVAL AS gboolean) AS gboolean
DECLARE FUNCTION gtk_test_text_get(BYVAL AS GtkWidget PTR) AS gchar PTR
DECLARE SUB gtk_test_text_set(BYVAL AS GtkWidget PTR, BYVAL AS const gchar PTR)
DECLARE FUNCTION gtk_test_widget_click(BYVAL AS GtkWidget PTR, BYVAL AS guint, BYVAL AS GdkModifierType) AS gboolean
DECLARE FUNCTION gtk_test_widget_send_key(BYVAL AS GtkWidget PTR, BYVAL AS guint, BYVAL AS GdkModifierType) AS gboolean
DECLARE SUB gtk_test_widget_wait_for_draw(BYVAL AS GtkWidget PTR)
DECLARE FUNCTION gtk_tree_get_row_drag_data(BYVAL AS GtkSelectionData PTR, BYVAL AS GtkTreeModel PTR PTR, BYVAL AS GtkTreePath PTR PTR) AS gboolean
DECLARE FUNCTION gtk_tree_set_row_drag_data(BYVAL AS GtkSelectionData PTR, BYVAL AS GtkTreeModel PTR, BYVAL AS GtkTreePath PTR) AS gboolean
DECLARE FUNCTION gtk_true() AS gboolean
END EXTERN

