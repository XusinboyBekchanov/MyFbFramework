'            FreeBasic header file, auto-generated by
'                       ### girtobac ###
' LGPLv2.1 (C) 2013-2022 by Thomas{ doT ]Freiherr[ At ]gmx[ DoT }net
' Auto-translated from file /usr/share/gir-1.0/GIRepository-2.0.gir
#INCLUDE ONCE "_GirToBac-0.0.bi"
' Repository version 1.2
#INCLUDE ONCE "GObject-2.0.bi"
TYPE AS GIBaseInfo GIArgInfo
TYPE AS GIBaseInfo GICallableInfo
TYPE AS GIBaseInfo GICallbackInfo
TYPE AS GIBaseInfo GIConstantInfo
TYPE AS GIBaseInfo GIEnumInfo
TYPE AS GIBaseInfo GIFieldInfo
TYPE AS GIBaseInfo GIFunctionInfo
TYPE AS GIBaseInfo GIInterfaceInfo
TYPE AS GIBaseInfo GIObjectInfo
TYPE AS GIBaseInfo GIPropertyInfo
TYPE AS GIBaseInfo GIRegisteredTypeInfo
TYPE AS GIBaseInfo GISignalInfo
TYPE AS GIBaseInfo GIStructInfo
TYPE AS GIBaseInfo GITypeInfo
TYPE AS GIBaseInfo GIUnionInfo
TYPE AS GIBaseInfo GIVFuncInfo
TYPE AS GIBaseInfo GIValueInfo
TYPE AS LONG GIArrayType
ENUM
  GI_ARRAY_TYPE_C = 0
  GI_ARRAY_TYPE_ARRAY = 1
  GI_ARRAY_TYPE_PTR_ARRAY = 2
  GI_ARRAY_TYPE_BYTE_ARRAY = 3
END ENUM
TYPE AS _GIAttributeIter GIAttributeIter
TYPE AS _GIBaseInfo GIBaseInfo
TYPE AS LONG GIDirection
ENUM
  GI_DIRECTION_IN = 0
  GI_DIRECTION_OUT = 1
  GI_DIRECTION_INOUT = 2
END ENUM
TYPE AS LONG GIFieldInfoFlags
ENUM
  GI_FIELD_IS_READABLE = 1
  GI_FIELD_IS_WRITABLE = 2
END ENUM
TYPE AS LONG GIFunctionInfoFlags
ENUM
  GI_FUNCTION_IS_METHOD = 1
  GI_FUNCTION_IS_CONSTRUCTOR = 2
  GI_FUNCTION_IS_GETTER = 4
  GI_FUNCTION_IS_SETTER = 8
  GI_FUNCTION_WRAPS_VFUNC = 16
  GI_FUNCTION_THROWS = 32
END ENUM
TYPE AS LONG GIInfoType
ENUM
  GI_INFO_TYPE_INVALID = 0
  GI_INFO_TYPE_FUNCTION = 1
  GI_INFO_TYPE_CALLBACK = 2
  GI_INFO_TYPE_STRUCT = 3
  GI_INFO_TYPE_BOXED = 4
  GI_INFO_TYPE_ENUM = 5
  GI_INFO_TYPE_FLAGS = 6
  GI_INFO_TYPE_OBJECT = 7
  GI_INFO_TYPE_INTERFACE = 8
  GI_INFO_TYPE_CONSTANT = 9
  GI_INFO_TYPE_INVALID_0 = 10
  GI_INFO_TYPE_UNION = 11
  GI_INFO_TYPE_VALUE = 12
  GI_INFO_TYPE_SIGNAL = 13
  GI_INFO_TYPE_VFUNC = 14
  GI_INFO_TYPE_PROPERTY = 15
  GI_INFO_TYPE_FIELD = 16
  GI_INFO_TYPE_ARG = 17
  GI_INFO_TYPE_TYPE = 18
  GI_INFO_TYPE_UNRESOLVED = 19
END ENUM
#DEFINE GI_MAJOR_VERSION 1
#DEFINE GI_MICRO_VERSION 0
#DEFINE GI_MINOR_VERSION 64
TYPE AS _GIRepository GIRepository
TYPE AS _GIRepositoryClass GIRepositoryClass
TYPE AS LONG GIRepositoryError
ENUM
  G_IREPOSITORY_ERROR_TYPELIB_NOT_FOUND = 0
  G_IREPOSITORY_ERROR_NAMESPACE_MISMATCH = 1
  G_IREPOSITORY_ERROR_NAMESPACE_VERSION_CONFLICT = 2
  G_IREPOSITORY_ERROR_LIBRARY_NOT_FOUND = 3
END ENUM
TYPE AS LONG GIRepositoryLoadFlags
ENUM
  G_IREPOSITORY_LOAD_FLAG_LAZY = 1
END ENUM
TYPE AS _GIRepositoryPrivate GIRepositoryPrivate
TYPE AS LONG GIScopeType
ENUM
  GI_SCOPE_TYPE_INVALID = 0
  GI_SCOPE_TYPE_CALL = 1
  GI_SCOPE_TYPE_ASYNC = 2
  GI_SCOPE_TYPE_NOTIFIED = 3
END ENUM
#DEFINE GI_TYPE_TAG_N_TYPES 22
TYPE AS LONG GITransfer
ENUM
  GI_TRANSFER_NOTHING = 0
  GI_TRANSFER_CONTAINER = 1
  GI_TRANSFER_EVERYTHING = 2
END ENUM
TYPE AS LONG GITypeTag
ENUM
  GI_TYPE_TAG_VOID = 0
  GI_TYPE_TAG_BOOLEAN = 1
  GI_TYPE_TAG_INT8 = 2
  GI_TYPE_TAG_UINT8 = 3
  GI_TYPE_TAG_INT16 = 4
  GI_TYPE_TAG_UINT16 = 5
  GI_TYPE_TAG_INT32 = 6
  GI_TYPE_TAG_UINT32 = 7
  GI_TYPE_TAG_INT64 = 8
  GI_TYPE_TAG_UINT64 = 9
  GI_TYPE_TAG_FLOAT = 10
  GI_TYPE_TAG_DOUBLE = 11
  GI_TYPE_TAG_GTYPE = 12
  GI_TYPE_TAG_UTF8 = 13
  GI_TYPE_TAG_FILENAME = 14
  GI_TYPE_TAG_ARRAY = 15
  GI_TYPE_TAG_INTERFACE = 16
  GI_TYPE_TAG_GLIST = 17
  GI_TYPE_TAG_GSLIST = 18
  GI_TYPE_TAG_GHASH = 19
  GI_TYPE_TAG_ERROR = 20
  GI_TYPE_TAG_UNICHAR = 21
END ENUM
TYPE AS _GITypelib GITypelib
TYPE AS _GIUnresolvedInfo GIUnresolvedInfo
TYPE AS LONG GIVFuncInfoFlags
ENUM
  GI_VFUNC_MUST_CHAIN_UP = 1
  GI_VFUNC_MUST_OVERRIDE = 2
  GI_VFUNC_MUST_NOT_OVERRIDE = 4
  GI_VFUNC_THROWS = 8
END ENUM
TYPE AS LONG GInvokeError
ENUM
  G_INVOKE_ERROR_FAILED = 0
  G_INVOKE_ERROR_SYMBOL_NOT_FOUND = 1
  G_INVOKE_ERROR_ARGUMENT_MISMATCH = 2
END ENUM
EXTERN "C" LIB "girepository-1.0"
' P_X

' P_3

UNION GIArgument
  AS gboolean v_boolean
  AS gint8 v_int8
  AS guint8 v_uint8
  AS gint16 v_int16
  AS guint16 v_uint16
  AS gint32 v_int32
  AS guint32 v_uint32
  AS gint64 v_int64
  AS guint64 v_uint64
  AS gfloat v_float
  AS gdouble v_double
  AS gshort v_short
  AS gushort v_ushort
  AS gint v_int
  AS guint v_uint
  AS glong v_long
  AS gulong v_ulong
  AS gssize v_ssize
  AS gsize v_size
  AS gchar PTR v_string
  AS gpointer v_pointer
END UNION
TYPE _GIAttributeIter
  AS gpointer data
  AS gpointer data2
  AS gpointer data3
  AS gpointer data4
END TYPE
TYPE _GIBaseInfo
  AS gint32 dummy1
  AS gint32 dummy2
  AS gpointer dummy3
  AS gpointer dummy4
  AS gpointer dummy5
  AS guint32 dummy6
  AS guint32 dummy7
  AS gpointer padding(3)
END TYPE
DECLARE FUNCTION g_base_info_equal(BYVAL AS GIBaseInfo PTR, BYVAL AS GIBaseInfo PTR) AS gboolean
DECLARE FUNCTION g_base_info_get_attribute(BYVAL AS GIBaseInfo PTR, BYVAL AS const gchar PTR) AS const gchar PTR
DECLARE FUNCTION g_base_info_get_container(BYVAL AS GIBaseInfo PTR) AS GIBaseInfo PTR
DECLARE FUNCTION g_base_info_get_name(BYVAL AS GIBaseInfo PTR) AS const gchar PTR
DECLARE FUNCTION g_base_info_get_namespace(BYVAL AS GIBaseInfo PTR) AS const gchar PTR
DECLARE FUNCTION g_base_info_get_type(BYVAL AS GIBaseInfo PTR) AS GIInfoType
DECLARE FUNCTION g_base_info_get_typelib(BYVAL AS GIBaseInfo PTR) AS GITypelib PTR
DECLARE FUNCTION g_base_info_is_deprecated(BYVAL AS GIBaseInfo PTR) AS gboolean
DECLARE FUNCTION g_base_info_iterate_attributes(BYVAL AS GIBaseInfo PTR, BYVAL AS GIAttributeIter PTR, BYVAL AS char PTR PTR, BYVAL AS char PTR PTR) AS gboolean
DECLARE FUNCTION g_base_info_ref(BYVAL AS GIBaseInfo PTR) AS GIBaseInfo PTR
DECLARE SUB g_base_info_unref(BYVAL AS GIBaseInfo PTR)
TYPE GIObjectInfoGetValueFunction AS FUNCTION CDECL(BYVAL AS const GValue PTR) AS any /'void'/ PTR
TYPE GIObjectInfoRefFunction AS FUNCTION CDECL(BYVAL AS any /'void'/ PTR) AS any /'void'/ PTR
TYPE GIObjectInfoSetValueFunction AS SUB CDECL(BYVAL AS GValue PTR, BYVAL AS any /'void'/ PTR)
TYPE GIObjectInfoUnrefFunction AS SUB CDECL(BYVAL AS any /'void'/ PTR)
TYPE _GIRepository
  AS GObject parent
  AS GIRepositoryPrivate PTR priv
END TYPE
DECLARE FUNCTION g_irepository_get_type() AS GType
#DEFINE GIREPOSITORY_TYPE_IREPOSITORY (g_irepository_get_type())
#DEFINE GIREPOSITORY_IREPOSITORY(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GIREPOSITORY_TYPE_IREPOSITORY, GIRepository))
#DEFINE GIREPOSITORY_IREPOSITORY_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GIREPOSITORY_TYPE_IREPOSITORY, GIRepositoryRepositoryClass))
#DEFINE GIREPOSITORY_IS_IREPOSITORY(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GIREPOSITORY_TYPE_IREPOSITORY))
#DEFINE GIREPOSITORY_IS_CLASS_IREPOSITORY(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GIREPOSITORY_TYPE_IREPOSITORY))
#DEFINE GIREPOSITORY_IREPOSITORY_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GIREPOSITORY_TYPE_IREPOSITORY, GIRepositoryRepositoryClass))
DECLARE FUNCTION g_irepository_dump(BYVAL AS const char PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION g_irepository_error_quark() AS GQuark
DECLARE FUNCTION g_irepository_get_default() AS GIRepository PTR
DECLARE FUNCTION g_irepository_get_option_group() AS GOptionGroup PTR
DECLARE FUNCTION g_irepository_get_search_path() AS GSList PTR
DECLARE SUB g_irepository_prepend_library_path(BYVAL AS const char PTR)
DECLARE SUB g_irepository_prepend_search_path(BYVAL AS const char PTR)
DECLARE FUNCTION g_irepository_enumerate_versions(BYVAL AS GIRepository PTR, BYVAL AS const gchar PTR) AS GList PTR
DECLARE FUNCTION g_irepository_find_by_error_domain(BYVAL AS GIRepository PTR, BYVAL AS GQuark) AS GIEnumInfo PTR
DECLARE FUNCTION g_irepository_find_by_gtype(BYVAL AS GIRepository PTR, BYVAL AS GType) AS GIBaseInfo PTR
DECLARE FUNCTION g_irepository_find_by_name(BYVAL AS GIRepository PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR) AS GIBaseInfo PTR
DECLARE FUNCTION g_irepository_get_c_prefix(BYVAL AS GIRepository PTR, BYVAL AS const gchar PTR) AS const gchar PTR
DECLARE FUNCTION g_irepository_get_dependencies(BYVAL AS GIRepository PTR, BYVAL AS const gchar PTR) AS gchar PTR PTR
DECLARE FUNCTION g_irepository_get_immediate_dependencies(BYVAL AS GIRepository PTR, BYVAL AS const gchar PTR) AS gchar PTR PTR
DECLARE FUNCTION g_irepository_get_info(BYVAL AS GIRepository PTR, BYVAL AS const gchar PTR, BYVAL AS gint) AS GIBaseInfo PTR
DECLARE FUNCTION g_irepository_get_loaded_namespaces(BYVAL AS GIRepository PTR) AS gchar PTR PTR
DECLARE FUNCTION g_irepository_get_n_infos(BYVAL AS GIRepository PTR, BYVAL AS const gchar PTR) AS gint
DECLARE SUB g_irepository_get_object_gtype_interfaces(BYVAL AS GIRepository PTR, BYVAL AS GType, BYVAL AS guint PTR, BYVAL AS GIInterfaceInfo PTR PTR PTR)
DECLARE FUNCTION g_irepository_get_shared_library(BYVAL AS GIRepository PTR, BYVAL AS const gchar PTR) AS const gchar PTR
DECLARE FUNCTION g_irepository_get_typelib_path(BYVAL AS GIRepository PTR, BYVAL AS const gchar PTR) AS const gchar PTR
DECLARE FUNCTION g_irepository_get_version(BYVAL AS GIRepository PTR, BYVAL AS const gchar PTR) AS const gchar PTR
DECLARE FUNCTION g_irepository_is_registered(BYVAL AS GIRepository PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR) AS gboolean
DECLARE FUNCTION g_irepository_load_typelib(BYVAL AS GIRepository PTR, BYVAL AS GITypelib PTR, BYVAL AS GIRepositoryLoadFlags, BYVAL AS GError PTR PTR) AS const char PTR
DECLARE FUNCTION g_irepository_require(BYVAL AS GIRepository PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS GIRepositoryLoadFlags, BYVAL AS GError PTR PTR) AS GITypelib PTR
DECLARE FUNCTION g_irepository_require_private(BYVAL AS GIRepository PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS GIRepositoryLoadFlags, BYVAL AS GError PTR PTR) AS GITypelib PTR
TYPE _GIRepositoryClass
  AS GObjectClass parent
END TYPE
DECLARE SUB g_typelib_free(BYVAL AS GITypelib PTR)
DECLARE FUNCTION g_typelib_get_namespace(BYVAL AS GITypelib PTR) AS const gchar PTR
DECLARE FUNCTION g_typelib_symbol(BYVAL AS GITypelib PTR, BYVAL AS const gchar PTR, BYVAL AS gpointer PTR) AS gboolean
DECLARE FUNCTION g_typelib_new_from_const_memory(BYVAL AS const guint8 PTR, BYVAL AS gsize, BYVAL AS GError PTR PTR) AS GITypelib PTR
DECLARE FUNCTION g_typelib_new_from_mapped_file(BYVAL AS GMappedFile PTR, BYVAL AS GError PTR PTR) AS GITypelib PTR
DECLARE FUNCTION g_typelib_new_from_memory(BYVAL AS guint8 PTR, BYVAL AS gsize, BYVAL AS GError PTR PTR) AS GITypelib PTR
' P_4

DECLARE FUNCTION g_arg_info_get_closure(BYVAL AS GIArgInfo PTR) AS gint
DECLARE FUNCTION g_arg_info_get_destroy(BYVAL AS GIArgInfo PTR) AS gint
DECLARE FUNCTION g_arg_info_get_direction(BYVAL AS GIArgInfo PTR) AS GIDirection
DECLARE FUNCTION g_arg_info_get_ownership_transfer(BYVAL AS GIArgInfo PTR) AS GITransfer
DECLARE FUNCTION g_arg_info_get_scope(BYVAL AS GIArgInfo PTR) AS GIScopeType
DECLARE FUNCTION g_arg_info_get_type(BYVAL AS GIArgInfo PTR) AS GITypeInfo PTR
DECLARE FUNCTION g_arg_info_is_caller_allocates(BYVAL AS GIArgInfo PTR) AS gboolean
DECLARE FUNCTION g_arg_info_is_optional(BYVAL AS GIArgInfo PTR) AS gboolean
DECLARE FUNCTION g_arg_info_is_return_value(BYVAL AS GIArgInfo PTR) AS gboolean
DECLARE FUNCTION g_arg_info_is_skip(BYVAL AS GIArgInfo PTR) AS gboolean
DECLARE SUB g_arg_info_load_type(BYVAL AS GIArgInfo PTR, BYVAL AS GITypeInfo PTR)
DECLARE FUNCTION g_arg_info_may_be_null(BYVAL AS GIArgInfo PTR) AS gboolean
DECLARE FUNCTION g_callable_info_can_throw_gerror(BYVAL AS GICallableInfo PTR) AS gboolean
DECLARE FUNCTION g_callable_info_get_arg(BYVAL AS GICallableInfo PTR, BYVAL AS gint) AS GIArgInfo PTR
DECLARE FUNCTION g_callable_info_get_caller_owns(BYVAL AS GICallableInfo PTR) AS GITransfer
DECLARE FUNCTION g_callable_info_get_instance_ownership_transfer(BYVAL AS GICallableInfo PTR) AS GITransfer
DECLARE FUNCTION g_callable_info_get_n_args(BYVAL AS GICallableInfo PTR) AS gint
DECLARE FUNCTION g_callable_info_get_return_attribute(BYVAL AS GICallableInfo PTR, BYVAL AS const gchar PTR) AS const gchar PTR
DECLARE FUNCTION g_callable_info_get_return_type(BYVAL AS GICallableInfo PTR) AS GITypeInfo PTR
DECLARE FUNCTION g_callable_info_invoke(BYVAL AS GICallableInfo PTR, BYVAL AS gpointer, BYVAL AS const GIArgument PTR, BYVAL AS gint /'int'/, BYVAL AS const GIArgument PTR, BYVAL AS gint /'int'/, BYVAL AS GIArgument PTR, BYVAL AS gboolean, BYVAL AS gboolean, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION g_callable_info_is_method(BYVAL AS GICallableInfo PTR) AS gboolean
DECLARE FUNCTION g_callable_info_iterate_return_attributes(BYVAL AS GICallableInfo PTR, BYVAL AS GIAttributeIter PTR, BYVAL AS char PTR PTR, BYVAL AS char PTR PTR) AS gboolean
DECLARE SUB g_callable_info_load_arg(BYVAL AS GICallableInfo PTR, BYVAL AS gint, BYVAL AS GIArgInfo PTR)
DECLARE SUB g_callable_info_load_return_type(BYVAL AS GICallableInfo PTR, BYVAL AS GITypeInfo PTR)
DECLARE FUNCTION g_callable_info_may_return_null(BYVAL AS GICallableInfo PTR) AS gboolean
DECLARE FUNCTION g_callable_info_skip_return(BYVAL AS GICallableInfo PTR) AS gboolean
DECLARE SUB gi_cclosure_marshal_generic(BYVAL AS GClosure PTR, BYVAL AS GValue PTR, BYVAL AS guint, BYVAL AS const GValue PTR, BYVAL AS gpointer, BYVAL AS gpointer)
DECLARE SUB g_constant_info_free_value(BYVAL AS GIConstantInfo PTR, BYVAL AS GIArgument PTR)
DECLARE FUNCTION g_constant_info_get_type(BYVAL AS GIConstantInfo PTR) AS GITypeInfo PTR
DECLARE FUNCTION g_constant_info_get_value(BYVAL AS GIConstantInfo PTR, BYVAL AS GIArgument PTR) AS gint
DECLARE FUNCTION g_enum_info_get_error_domain(BYVAL AS GIEnumInfo PTR) AS const gchar PTR
DECLARE FUNCTION g_enum_info_get_method(BYVAL AS GIEnumInfo PTR, BYVAL AS gint) AS GIFunctionInfo PTR
DECLARE FUNCTION g_enum_info_get_n_methods(BYVAL AS GIEnumInfo PTR) AS gint
DECLARE FUNCTION g_enum_info_get_n_values(BYVAL AS GIEnumInfo PTR) AS gint
DECLARE FUNCTION g_enum_info_get_storage_type(BYVAL AS GIEnumInfo PTR) AS GITypeTag
DECLARE FUNCTION g_enum_info_get_value(BYVAL AS GIEnumInfo PTR, BYVAL AS gint) AS GIValueInfo PTR
DECLARE FUNCTION g_field_info_get_field(BYVAL AS GIFieldInfo PTR, BYVAL AS gpointer, BYVAL AS GIArgument PTR) AS gboolean
DECLARE FUNCTION g_field_info_get_flags(BYVAL AS GIFieldInfo PTR) AS GIFieldInfoFlags
DECLARE FUNCTION g_field_info_get_offset(BYVAL AS GIFieldInfo PTR) AS gint
DECLARE FUNCTION g_field_info_get_size(BYVAL AS GIFieldInfo PTR) AS gint
DECLARE FUNCTION g_field_info_get_type(BYVAL AS GIFieldInfo PTR) AS GITypeInfo PTR
DECLARE FUNCTION g_field_info_set_field(BYVAL AS GIFieldInfo PTR, BYVAL AS gpointer, BYVAL AS const GIArgument PTR) AS gboolean
DECLARE FUNCTION g_function_info_get_flags(BYVAL AS GIFunctionInfo PTR) AS GIFunctionInfoFlags
DECLARE FUNCTION g_function_info_get_property(BYVAL AS GIFunctionInfo PTR) AS GIPropertyInfo PTR
DECLARE FUNCTION g_function_info_get_symbol(BYVAL AS GIFunctionInfo PTR) AS const gchar PTR
DECLARE FUNCTION g_function_info_get_vfunc(BYVAL AS GIFunctionInfo PTR) AS GIVFuncInfo PTR
DECLARE FUNCTION g_function_info_invoke(BYVAL AS GIFunctionInfo PTR, BYVAL AS const GIArgument PTR, BYVAL AS gint /'int'/, BYVAL AS const GIArgument PTR, BYVAL AS gint /'int'/, BYVAL AS GIArgument PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION gi_get_major_version() AS guint
DECLARE FUNCTION gi_get_micro_version() AS guint
DECLARE FUNCTION gi_get_minor_version() AS guint
DECLARE FUNCTION g_info_new(BYVAL AS GIInfoType, BYVAL AS GIBaseInfo PTR, BYVAL AS GITypelib PTR, BYVAL AS guint32) AS GIBaseInfo PTR
DECLARE FUNCTION g_info_type_to_string(BYVAL AS GIInfoType) AS const gchar PTR
DECLARE FUNCTION g_interface_info_find_method(BYVAL AS GIInterfaceInfo PTR, BYVAL AS const gchar PTR) AS GIFunctionInfo PTR
DECLARE FUNCTION g_interface_info_find_signal(BYVAL AS GIInterfaceInfo PTR, BYVAL AS const gchar PTR) AS GISignalInfo PTR
DECLARE FUNCTION g_interface_info_find_vfunc(BYVAL AS GIInterfaceInfo PTR, BYVAL AS const gchar PTR) AS GIVFuncInfo PTR
DECLARE FUNCTION g_interface_info_get_constant(BYVAL AS GIInterfaceInfo PTR, BYVAL AS gint) AS GIConstantInfo PTR
DECLARE FUNCTION g_interface_info_get_iface_struct(BYVAL AS GIInterfaceInfo PTR) AS GIStructInfo PTR
DECLARE FUNCTION g_interface_info_get_method(BYVAL AS GIInterfaceInfo PTR, BYVAL AS gint) AS GIFunctionInfo PTR
DECLARE FUNCTION g_interface_info_get_n_constants(BYVAL AS GIInterfaceInfo PTR) AS gint
DECLARE FUNCTION g_interface_info_get_n_methods(BYVAL AS GIInterfaceInfo PTR) AS gint
DECLARE FUNCTION g_interface_info_get_n_prerequisites(BYVAL AS GIInterfaceInfo PTR) AS gint
DECLARE FUNCTION g_interface_info_get_n_properties(BYVAL AS GIInterfaceInfo PTR) AS gint
DECLARE FUNCTION g_interface_info_get_n_signals(BYVAL AS GIInterfaceInfo PTR) AS gint
DECLARE FUNCTION g_interface_info_get_n_vfuncs(BYVAL AS GIInterfaceInfo PTR) AS gint
DECLARE FUNCTION g_interface_info_get_prerequisite(BYVAL AS GIInterfaceInfo PTR, BYVAL AS gint) AS GIBaseInfo PTR
DECLARE FUNCTION g_interface_info_get_property(BYVAL AS GIInterfaceInfo PTR, BYVAL AS gint) AS GIPropertyInfo PTR
DECLARE FUNCTION g_interface_info_get_signal(BYVAL AS GIInterfaceInfo PTR, BYVAL AS gint) AS GISignalInfo PTR
DECLARE FUNCTION g_interface_info_get_vfunc(BYVAL AS GIInterfaceInfo PTR, BYVAL AS gint) AS GIVFuncInfo PTR
DECLARE FUNCTION g_invoke_error_quark() AS GQuark
DECLARE FUNCTION g_object_info_find_method(BYVAL AS GIObjectInfo PTR, BYVAL AS const gchar PTR) AS GIFunctionInfo PTR
DECLARE FUNCTION g_object_info_find_method_using_interfaces(BYVAL AS GIObjectInfo PTR, BYVAL AS const gchar PTR, BYVAL AS GIObjectInfo PTR PTR) AS GIFunctionInfo PTR
DECLARE FUNCTION g_object_info_find_signal(BYVAL AS GIObjectInfo PTR, BYVAL AS const gchar PTR) AS GISignalInfo PTR
DECLARE FUNCTION g_object_info_find_vfunc(BYVAL AS GIObjectInfo PTR, BYVAL AS const gchar PTR) AS GIVFuncInfo PTR
DECLARE FUNCTION g_object_info_find_vfunc_using_interfaces(BYVAL AS GIObjectInfo PTR, BYVAL AS const gchar PTR, BYVAL AS GIObjectInfo PTR PTR) AS GIVFuncInfo PTR
DECLARE FUNCTION g_object_info_get_abstract(BYVAL AS GIObjectInfo PTR) AS gboolean
DECLARE FUNCTION g_object_info_get_class_struct(BYVAL AS GIObjectInfo PTR) AS GIStructInfo PTR
DECLARE FUNCTION g_object_info_get_constant(BYVAL AS GIObjectInfo PTR, BYVAL AS gint) AS GIConstantInfo PTR
DECLARE FUNCTION g_object_info_get_field(BYVAL AS GIObjectInfo PTR, BYVAL AS gint) AS GIFieldInfo PTR
DECLARE FUNCTION g_object_info_get_fundamental(BYVAL AS GIObjectInfo PTR) AS gboolean
DECLARE FUNCTION g_object_info_get_get_value_function(BYVAL AS GIObjectInfo PTR) AS const char PTR
DECLARE FUNCTION g_object_info_get_get_value_function_pointer(BYVAL AS GIObjectInfo PTR) AS GIObjectInfoGetValueFunction
DECLARE FUNCTION g_object_info_get_interface(BYVAL AS GIObjectInfo PTR, BYVAL AS gint) AS GIInterfaceInfo PTR
DECLARE FUNCTION g_object_info_get_method(BYVAL AS GIObjectInfo PTR, BYVAL AS gint) AS GIFunctionInfo PTR
DECLARE FUNCTION g_object_info_get_n_constants(BYVAL AS GIObjectInfo PTR) AS gint
DECLARE FUNCTION g_object_info_get_n_fields(BYVAL AS GIObjectInfo PTR) AS gint
DECLARE FUNCTION g_object_info_get_n_interfaces(BYVAL AS GIObjectInfo PTR) AS gint
DECLARE FUNCTION g_object_info_get_n_methods(BYVAL AS GIObjectInfo PTR) AS gint
DECLARE FUNCTION g_object_info_get_n_properties(BYVAL AS GIObjectInfo PTR) AS gint
DECLARE FUNCTION g_object_info_get_n_signals(BYVAL AS GIObjectInfo PTR) AS gint
DECLARE FUNCTION g_object_info_get_n_vfuncs(BYVAL AS GIObjectInfo PTR) AS gint
DECLARE FUNCTION g_object_info_get_parent(BYVAL AS GIObjectInfo PTR) AS GIObjectInfo PTR
DECLARE FUNCTION g_object_info_get_property(BYVAL AS GIObjectInfo PTR, BYVAL AS gint) AS GIPropertyInfo PTR
DECLARE FUNCTION g_object_info_get_ref_function(BYVAL AS GIObjectInfo PTR) AS const char PTR
DECLARE FUNCTION g_object_info_get_ref_function_pointer(BYVAL AS GIObjectInfo PTR) AS GIObjectInfoRefFunction
DECLARE FUNCTION g_object_info_get_set_value_function(BYVAL AS GIObjectInfo PTR) AS const char PTR
DECLARE FUNCTION g_object_info_get_set_value_function_pointer(BYVAL AS GIObjectInfo PTR) AS GIObjectInfoSetValueFunction
DECLARE FUNCTION g_object_info_get_signal(BYVAL AS GIObjectInfo PTR, BYVAL AS gint) AS GISignalInfo PTR
DECLARE FUNCTION g_object_info_get_type_init(BYVAL AS GIObjectInfo PTR) AS const gchar PTR
DECLARE FUNCTION g_object_info_get_type_name(BYVAL AS GIObjectInfo PTR) AS const gchar PTR
DECLARE FUNCTION g_object_info_get_unref_function(BYVAL AS GIObjectInfo PTR) AS const char PTR
DECLARE FUNCTION g_object_info_get_unref_function_pointer(BYVAL AS GIObjectInfo PTR) AS GIObjectInfoUnrefFunction
DECLARE FUNCTION g_object_info_get_vfunc(BYVAL AS GIObjectInfo PTR, BYVAL AS gint) AS GIVFuncInfo PTR
DECLARE FUNCTION g_property_info_get_flags(BYVAL AS GIPropertyInfo PTR) AS GParamFlags
DECLARE FUNCTION g_property_info_get_ownership_transfer(BYVAL AS GIPropertyInfo PTR) AS GITransfer
DECLARE FUNCTION g_property_info_get_type(BYVAL AS GIPropertyInfo PTR) AS GITypeInfo PTR
DECLARE FUNCTION g_registered_type_info_get_g_type(BYVAL AS GIRegisteredTypeInfo PTR) AS GType
DECLARE FUNCTION g_registered_type_info_get_type_init(BYVAL AS GIRegisteredTypeInfo PTR) AS const gchar PTR
DECLARE FUNCTION g_registered_type_info_get_type_name(BYVAL AS GIRegisteredTypeInfo PTR) AS const gchar PTR
DECLARE FUNCTION g_signal_info_get_class_closure(BYVAL AS GISignalInfo PTR) AS GIVFuncInfo PTR
DECLARE FUNCTION g_signal_info_get_flags(BYVAL AS GISignalInfo PTR) AS GSignalFlags
DECLARE FUNCTION g_signal_info_true_stops_emit(BYVAL AS GISignalInfo PTR) AS gboolean
DECLARE FUNCTION g_struct_info_find_field(BYVAL AS GIStructInfo PTR, BYVAL AS const gchar PTR) AS GIFieldInfo PTR
DECLARE FUNCTION g_struct_info_find_method(BYVAL AS GIStructInfo PTR, BYVAL AS const gchar PTR) AS GIFunctionInfo PTR
DECLARE FUNCTION g_struct_info_get_alignment(BYVAL AS GIStructInfo PTR) AS gsize
DECLARE FUNCTION g_struct_info_get_field(BYVAL AS GIStructInfo PTR, BYVAL AS gint) AS GIFieldInfo PTR
DECLARE FUNCTION g_struct_info_get_method(BYVAL AS GIStructInfo PTR, BYVAL AS gint) AS GIFunctionInfo PTR
DECLARE FUNCTION g_struct_info_get_n_fields(BYVAL AS GIStructInfo PTR) AS gint
DECLARE FUNCTION g_struct_info_get_n_methods(BYVAL AS GIStructInfo PTR) AS gint
DECLARE FUNCTION g_struct_info_get_size(BYVAL AS GIStructInfo PTR) AS gsize
DECLARE FUNCTION g_struct_info_is_foreign(BYVAL AS GIStructInfo PTR) AS gboolean
DECLARE FUNCTION g_struct_info_is_gtype_struct(BYVAL AS GIStructInfo PTR) AS gboolean
DECLARE FUNCTION g_type_info_get_array_fixed_size(BYVAL AS GITypeInfo PTR) AS gint
DECLARE FUNCTION g_type_info_get_array_length(BYVAL AS GITypeInfo PTR) AS gint
DECLARE FUNCTION g_type_info_get_array_type(BYVAL AS GITypeInfo PTR) AS GIArrayType
DECLARE FUNCTION g_type_info_get_interface(BYVAL AS GITypeInfo PTR) AS GIBaseInfo PTR
DECLARE FUNCTION g_type_info_get_param_type(BYVAL AS GITypeInfo PTR, BYVAL AS gint) AS GITypeInfo PTR
DECLARE FUNCTION g_type_info_get_tag(BYVAL AS GITypeInfo PTR) AS GITypeTag
DECLARE FUNCTION g_type_info_is_pointer(BYVAL AS GITypeInfo PTR) AS gboolean
DECLARE FUNCTION g_type_info_is_zero_terminated(BYVAL AS GITypeInfo PTR) AS gboolean
DECLARE FUNCTION g_type_tag_to_string(BYVAL AS GITypeTag) AS const gchar PTR
DECLARE FUNCTION g_union_info_find_method(BYVAL AS GIUnionInfo PTR, BYVAL AS const gchar PTR) AS GIFunctionInfo PTR
DECLARE FUNCTION g_union_info_get_alignment(BYVAL AS GIUnionInfo PTR) AS gsize
DECLARE FUNCTION g_union_info_get_discriminator(BYVAL AS GIUnionInfo PTR, BYVAL AS gint) AS GIConstantInfo PTR
DECLARE FUNCTION g_union_info_get_discriminator_offset(BYVAL AS GIUnionInfo PTR) AS gint
DECLARE FUNCTION g_union_info_get_discriminator_type(BYVAL AS GIUnionInfo PTR) AS GITypeInfo PTR
DECLARE FUNCTION g_union_info_get_field(BYVAL AS GIUnionInfo PTR, BYVAL AS gint) AS GIFieldInfo PTR
DECLARE FUNCTION g_union_info_get_method(BYVAL AS GIUnionInfo PTR, BYVAL AS gint) AS GIFunctionInfo PTR
DECLARE FUNCTION g_union_info_get_n_fields(BYVAL AS GIUnionInfo PTR) AS gint
DECLARE FUNCTION g_union_info_get_n_methods(BYVAL AS GIUnionInfo PTR) AS gint
DECLARE FUNCTION g_union_info_get_size(BYVAL AS GIUnionInfo PTR) AS gsize
DECLARE FUNCTION g_union_info_is_discriminated(BYVAL AS GIUnionInfo PTR) AS gboolean
DECLARE FUNCTION g_value_info_get_value(BYVAL AS GIValueInfo PTR) AS gint64
DECLARE FUNCTION g_vfunc_info_get_address(BYVAL AS GIVFuncInfo PTR, BYVAL AS GType, BYVAL AS GError PTR PTR) AS gpointer
DECLARE FUNCTION g_vfunc_info_get_flags(BYVAL AS GIVFuncInfo PTR) AS GIVFuncInfoFlags
DECLARE FUNCTION g_vfunc_info_get_invoker(BYVAL AS GIVFuncInfo PTR) AS GIFunctionInfo PTR
DECLARE FUNCTION g_vfunc_info_get_offset(BYVAL AS GIVFuncInfo PTR) AS gint
DECLARE FUNCTION g_vfunc_info_get_signal(BYVAL AS GIVFuncInfo PTR) AS GISignalInfo PTR
DECLARE FUNCTION g_vfunc_info_invoke(BYVAL AS GIVFuncInfo PTR, BYVAL AS GType, BYVAL AS const GIArgument PTR, BYVAL AS gint /'int'/, BYVAL AS const GIArgument PTR, BYVAL AS gint /'int'/, BYVAL AS GIArgument PTR, BYVAL AS GError PTR PTR) AS gboolean
END EXTERN

