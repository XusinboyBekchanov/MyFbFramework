'            FreeBasic header file, auto-generated by
'                       ### girtobac ###
' LGPLv2.1 (C) 2013-2022 by Thomas{ doT ]Freiherr[ At ]gmx[ DoT }net
' Auto-translated from file /usr/share/gir-1.0/GObject-2.0.gir
#INCLUDE ONCE "_GirToBac-0.0.bi"
' Repository version 1.2
#INCLUDE ONCE "GLib-2.0.bi"
TYPE AS GClosureMarshal GSignalCMarshaller
TYPE AS GVaClosureMarshal GSignalCVaMarshaller
TYPE AS gsize GType
TYPE AS _GBinding GBinding
TYPE AS LONG GBindingFlags
ENUM
  G_BINDING_DEFAULT = 0
  G_BINDING_BIDIRECTIONAL = 1
  G_BINDING_SYNC_CREATE = 2
  G_BINDING_INVERT_BOOLEAN = 4
END ENUM
TYPE AS _GCClosure GCClosure
TYPE AS _GClosure GClosure
TYPE AS _GClosureNotifyData GClosureNotifyData
TYPE AS LONG GConnectFlags
ENUM
  G_CONNECT_AFTER = 1
  G_CONNECT_SWAPPED = 2
END ENUM
TYPE AS _GEnumClass GEnumClass
TYPE AS _GEnumValue GEnumValue
TYPE AS _GFlagsClass GFlagsClass
TYPE AS _GFlagsValue GFlagsValue
TYPE AS _GInitiallyUnowned GInitiallyUnowned
TYPE AS _GInitiallyUnownedClass GInitiallyUnownedClass
TYPE AS _GInterfaceInfo GInterfaceInfo
TYPE AS _GObject GObject
TYPE AS _GObjectClass GObjectClass
TYPE AS _GObjectConstructParam GObjectConstructParam
#DEFINE G_PARAM_MASK 255
#DEFINE G_PARAM_STATIC_STRINGS 224
#DEFINE G_PARAM_USER_SHIFT 8
TYPE AS LONG GParamFlags
ENUM
  G_PARAM_READABLE = 1
  G_PARAM_WRITABLE = 2
  G_PARAM_READWRITE = 3
  G_PARAM_CONSTRUCT = 4
  G_PARAM_CONSTRUCT_ONLY = 8
  G_PARAM_LAX_VALIDATION = 16
  G_PARAM_STATIC_NAME = 32
  G_PARAM_PRIVATE = 32
  G_PARAM_STATIC_NICK = 64
  G_PARAM_STATIC_BLURB = 128
  G_PARAM_EXPLICIT_NOTIFY = 1073741824
  G_PARAM_DEPRECATED = 2147483648
END ENUM
TYPE AS _GParamSpec GParamSpec
TYPE AS _GParamSpecBoolean GParamSpecBoolean
TYPE AS _GParamSpecBoxed GParamSpecBoxed
TYPE AS _GParamSpecChar GParamSpecChar
TYPE AS _GParamSpecClass GParamSpecClass
TYPE AS _GParamSpecDouble GParamSpecDouble
TYPE AS _GParamSpecEnum GParamSpecEnum
TYPE AS _GParamSpecFlags GParamSpecFlags
TYPE AS _GParamSpecFloat GParamSpecFloat
TYPE AS _GParamSpecGType GParamSpecGType
TYPE AS _GParamSpecInt GParamSpecInt
TYPE AS _GParamSpecInt64 GParamSpecInt64
TYPE AS _GParamSpecLong GParamSpecLong
TYPE AS _GParamSpecObject GParamSpecObject
TYPE AS _GParamSpecOverride GParamSpecOverride
TYPE AS _GParamSpecParam GParamSpecParam
TYPE AS _GParamSpecPointer GParamSpecPointer
TYPE AS _GParamSpecPool GParamSpecPool
TYPE AS _GParamSpecString GParamSpecString
TYPE AS _GParamSpecTypeInfo GParamSpecTypeInfo
TYPE AS _GParamSpecUChar GParamSpecUChar
TYPE AS _GParamSpecUInt GParamSpecUInt
TYPE AS _GParamSpecUInt64 GParamSpecUInt64
TYPE AS _GParamSpecULong GParamSpecULong
TYPE AS _GParamSpecUnichar GParamSpecUnichar
TYPE AS _GParamSpecValueArray GParamSpecValueArray
TYPE AS _GParamSpecVariant GParamSpecVariant
TYPE AS _GParameter GParameter
#DEFINE G_SIGNAL_FLAGS_MASK 511
#DEFINE G_SIGNAL_MATCH_MASK 63
TYPE AS LONG GSignalFlags
ENUM
  G_SIGNAL_RUN_FIRST = 1
  G_SIGNAL_RUN_LAST = 2
  G_SIGNAL_RUN_CLEANUP = 4
  G_SIGNAL_NO_RECURSE = 8
  G_SIGNAL_DETAILED = 16
  G_SIGNAL_ACTION = 32
  G_SIGNAL_NO_HOOKS = 64
  G_SIGNAL_MUST_COLLECT = 128
  G_SIGNAL_DEPRECATED = 256
END ENUM
TYPE AS _GSignalInvocationHint GSignalInvocationHint
TYPE AS LONG GSignalMatchType
ENUM
  G_SIGNAL_MATCH_ID = 1
  G_SIGNAL_MATCH_DETAIL = 2
  G_SIGNAL_MATCH_CLOSURE = 4
  G_SIGNAL_MATCH_FUNC = 8
  G_SIGNAL_MATCH_DATA = 16
  G_SIGNAL_MATCH_UNBLOCKED = 32
END ENUM
TYPE AS _GSignalQuery GSignalQuery
#DEFINE G_TYPE_FLAG_RESERVED_ID_BIT 1
#DEFINE G_TYPE_FUNDAMENTAL_MAX 255
#DEFINE G_TYPE_FUNDAMENTAL_SHIFT 2
#DEFINE G_TYPE_RESERVED_BSE_FIRST 32
#DEFINE G_TYPE_RESERVED_BSE_LAST 48
#DEFINE G_TYPE_RESERVED_GLIB_FIRST 22
#DEFINE G_TYPE_RESERVED_GLIB_LAST 31
#DEFINE G_TYPE_RESERVED_USER_FIRST 49
TYPE AS _GTypeClass GTypeClass
TYPE AS LONG GTypeDebugFlags
ENUM
  G_TYPE_DEBUG_NONE = 0
  G_TYPE_DEBUG_OBJECTS = 1
  G_TYPE_DEBUG_SIGNALS = 2
  G_TYPE_DEBUG_INSTANCE_COUNT = 4
  G_TYPE_DEBUG_MASK = 7
END ENUM
TYPE AS LONG GTypeFlags
ENUM
  G_TYPE_FLAG_ABSTRACT = 16
  G_TYPE_FLAG_VALUE_ABSTRACT = 32
END ENUM
TYPE AS LONG GTypeFundamentalFlags
ENUM
  G_TYPE_FLAG_CLASSED = 1
  G_TYPE_FLAG_INSTANTIATABLE = 2
  G_TYPE_FLAG_DERIVABLE = 4
  G_TYPE_FLAG_DEEP_DERIVABLE = 8
END ENUM
TYPE AS _GTypeFundamentalInfo GTypeFundamentalInfo
TYPE AS _GTypeInfo GTypeInfo
TYPE AS _GTypeInstance GTypeInstance
TYPE AS _GTypeInterface GTypeInterface
TYPE AS _GTypeModule GTypeModule
TYPE AS _GTypeModuleClass GTypeModuleClass
TYPE AS _GTypePlugin GTypePlugin
TYPE AS _GTypePluginClass GTypePluginClass
TYPE AS _GTypeQuery GTypeQuery
TYPE AS _GTypeValueTable GTypeValueTable
#DEFINE G_VALUE_NOCOPY_CONTENTS 134217728
TYPE AS _GValue GValue
TYPE AS _GValueArray GValueArray
TYPE AS _GWeakRef GWeakRef
EXTERN "C" LIB "gobject-2.0"
' P_X

TYPE GCallback AS SUB CDECL()
TYPE GClosureNotify AS SUB CDECL(BYVAL AS gpointer, BYVAL AS GClosure PTR)
TYPE GClosureMarshal AS SUB CDECL(BYVAL AS GClosure PTR, BYVAL AS GValue PTR, BYVAL AS guint, BYVAL AS const GValue PTR, BYVAL AS gpointer, BYVAL AS gpointer)
TYPE _GClosure
  AS guint ref_count : 15
  AS guint meta_marshal_nouse : 1
  AS guint n_guards : 1
  AS guint n_fnotifiers : 2
  AS guint n_inotifiers : 8
  AS guint in_inotify : 1
  AS guint floating : 1
  AS guint derivative_flag : 1
  AS guint in_marshal : 1
  AS guint is_invalid : 1
  marshal AS SUB CDECL(BYVAL AS GClosure PTR, BYVAL AS GValue PTR, BYVAL AS guint, BYVAL AS const GValue PTR, BYVAL AS gpointer, BYVAL AS gpointer)
  AS gpointer data
  AS GClosureNotifyData PTR notifiers
END TYPE
DECLARE FUNCTION g_closure_new_object(BYVAL AS guint, BYVAL AS GObject PTR) AS GClosure PTR
DECLARE FUNCTION g_closure_new_simple(BYVAL AS guint, BYVAL AS gpointer) AS GClosure PTR
DECLARE SUB g_closure_add_finalize_notifier(BYVAL AS GClosure PTR, BYVAL AS gpointer, BYVAL AS GClosureNotify)
DECLARE SUB g_closure_add_invalidate_notifier(BYVAL AS GClosure PTR, BYVAL AS gpointer, BYVAL AS GClosureNotify)
DECLARE SUB g_closure_add_marshal_guards(BYVAL AS GClosure PTR, BYVAL AS gpointer, BYVAL AS GClosureNotify, BYVAL AS gpointer, BYVAL AS GClosureNotify)
DECLARE SUB g_closure_invalidate(BYVAL AS GClosure PTR)
DECLARE SUB g_closure_invoke(BYVAL AS GClosure PTR, BYVAL AS GValue PTR, BYVAL AS guint, BYVAL AS const GValue PTR, BYVAL AS gpointer)
DECLARE FUNCTION g_closure_ref(BYVAL AS GClosure PTR) AS GClosure PTR
DECLARE SUB g_closure_remove_finalize_notifier(BYVAL AS GClosure PTR, BYVAL AS gpointer, BYVAL AS GClosureNotify)
DECLARE SUB g_closure_remove_invalidate_notifier(BYVAL AS GClosure PTR, BYVAL AS gpointer, BYVAL AS GClosureNotify)
DECLARE SUB g_closure_set_marshal(BYVAL AS GClosure PTR, BYVAL AS GClosureMarshal)
DECLARE SUB g_closure_set_meta_marshal(BYVAL AS GClosure PTR, BYVAL AS gpointer, BYVAL AS GClosureMarshal)
DECLARE SUB g_closure_sink(BYVAL AS GClosure PTR)
DECLARE SUB g_closure_unref(BYVAL AS GClosure PTR)
TYPE GTypePluginUse AS SUB CDECL(BYVAL AS GTypePlugin PTR)
TYPE GTypePluginUnuse AS SUB CDECL(BYVAL AS GTypePlugin PTR)
TYPE GTypePluginCompleteTypeInfo AS SUB CDECL(BYVAL AS GTypePlugin PTR, BYVAL AS GType, BYVAL AS GTypeInfo PTR, BYVAL AS GTypeValueTable PTR)
TYPE GTypePluginCompleteInterfaceInfo AS SUB CDECL(BYVAL AS GTypePlugin PTR, BYVAL AS GType, BYVAL AS GType, BYVAL AS GInterfaceInfo PTR)
TYPE _GTypeClass
  AS GType g_type
END TYPE
DECLARE SUB g_type_class_add_private(BYVAL AS gpointer, BYVAL AS gsize)
DECLARE FUNCTION g_type_class_get_instance_private_offset(BYVAL AS gpointer) AS gint
DECLARE FUNCTION g_type_class_get_private_ ALIAS "g_type_class_get_private"(BYVAL AS GTypeClass PTR, BYVAL AS GType) AS gpointer
DECLARE FUNCTION g_type_class_peek_parent(BYVAL AS gpointer) AS gpointer
DECLARE SUB g_type_class_unref(BYVAL AS gpointer)
DECLARE SUB g_type_class_unref_uncached(BYVAL AS gpointer)
DECLARE SUB g_type_class_adjust_private_offset(BYVAL AS gpointer, BYVAL AS gint PTR)
DECLARE FUNCTION g_type_class_peek(BYVAL AS GType) AS gpointer
DECLARE FUNCTION g_type_class_peek_static(BYVAL AS GType) AS gpointer
DECLARE FUNCTION g_type_class_ref(BYVAL AS GType) AS gpointer
TYPE _GTypeInstance
  AS GTypeClass PTR g_class
END TYPE
DECLARE FUNCTION g_type_instance_get_private_ ALIAS "g_type_instance_get_private"(BYVAL AS GTypeInstance PTR, BYVAL AS GType) AS gpointer
TYPE GInterfaceInitFunc AS SUB CDECL(BYVAL AS gpointer, BYVAL AS gpointer)
TYPE GToggleNotify AS SUB CDECL(BYVAL AS gpointer, BYVAL AS GObject PTR, BYVAL AS gboolean)
TYPE GWeakNotify AS SUB CDECL(BYVAL AS gpointer, BYVAL AS GObject PTR)
TYPE GValueTransform AS SUB CDECL(BYVAL AS const GValue PTR, BYVAL AS GValue PTR)
UNION _Value__data__union
  AS gint v_int
  AS guint v_uint
  AS glong v_long
  AS gulong v_ulong
  AS gint64 v_int64
  AS guint64 v_uint64
  AS gfloat v_float
  AS gdouble v_double
  AS gpointer v_pointer
END UNION
TYPE _GValue
  AS GType g_type
  AS _Value__data__union data(1)
END TYPE
DECLARE SUB g_value_copy(BYVAL AS const GValue PTR, BYVAL AS GValue PTR)
DECLARE FUNCTION g_value_dup_boxed(BYVAL AS const GValue PTR) AS gpointer
DECLARE FUNCTION g_value_dup_object(BYVAL AS const GValue PTR) AS gpointer
DECLARE FUNCTION g_value_dup_param(BYVAL AS const GValue PTR) AS GParamSpec PTR
DECLARE FUNCTION g_value_dup_string(BYVAL AS const GValue PTR) AS gchar PTR
DECLARE FUNCTION g_value_dup_variant(BYVAL AS const GValue PTR) AS GVariant PTR
DECLARE FUNCTION g_value_fits_pointer(BYVAL AS const GValue PTR) AS gboolean
DECLARE FUNCTION g_value_get_boolean(BYVAL AS const GValue PTR) AS gboolean
DECLARE FUNCTION g_value_get_boxed(BYVAL AS const GValue PTR) AS gpointer
DECLARE FUNCTION g_value_get_char(BYVAL AS const GValue PTR) AS gint8 /'gchar'/
DECLARE FUNCTION g_value_get_double(BYVAL AS const GValue PTR) AS gdouble
DECLARE FUNCTION g_value_get_enum(BYVAL AS const GValue PTR) AS gint
DECLARE FUNCTION g_value_get_flags(BYVAL AS const GValue PTR) AS guint
DECLARE FUNCTION g_value_get_float(BYVAL AS const GValue PTR) AS gfloat
DECLARE FUNCTION g_value_get_gtype(BYVAL AS const GValue PTR) AS GType
DECLARE FUNCTION g_value_get_int(BYVAL AS const GValue PTR) AS gint
DECLARE FUNCTION g_value_get_int64(BYVAL AS const GValue PTR) AS gint64
DECLARE FUNCTION g_value_get_long(BYVAL AS const GValue PTR) AS glong
DECLARE FUNCTION g_value_get_object(BYVAL AS const GValue PTR) AS gpointer
DECLARE FUNCTION g_value_get_param(BYVAL AS const GValue PTR) AS GParamSpec PTR
DECLARE FUNCTION g_value_get_pointer(BYVAL AS const GValue PTR) AS gpointer
DECLARE FUNCTION g_value_get_schar(BYVAL AS const GValue PTR) AS gint8
DECLARE FUNCTION g_value_get_string(BYVAL AS const GValue PTR) AS const gchar PTR
DECLARE FUNCTION g_value_get_uchar(BYVAL AS const GValue PTR) AS guchar /'?'/
DECLARE FUNCTION g_value_get_uint(BYVAL AS const GValue PTR) AS guint
DECLARE FUNCTION g_value_get_uint64(BYVAL AS const GValue PTR) AS guint64
DECLARE FUNCTION g_value_get_ulong(BYVAL AS const GValue PTR) AS gulong
DECLARE FUNCTION g_value_get_variant(BYVAL AS const GValue PTR) AS GVariant PTR
DECLARE FUNCTION g_value_init(BYVAL AS GValue PTR, BYVAL AS GType) AS GValue PTR
DECLARE SUB g_value_init_from_instance(BYVAL AS GValue PTR, BYVAL AS gpointer)
DECLARE FUNCTION g_value_peek_pointer(BYVAL AS const GValue PTR) AS gpointer
DECLARE FUNCTION g_value_reset(BYVAL AS GValue PTR) AS GValue PTR
DECLARE SUB g_value_set_boolean(BYVAL AS GValue PTR, BYVAL AS gboolean)
DECLARE SUB g_value_set_boxed(BYVAL AS GValue PTR, BYVAL AS gconstpointer)
DECLARE SUB g_value_set_boxed_take_ownership(BYVAL AS GValue PTR, BYVAL AS gconstpointer)
DECLARE SUB g_value_set_char(BYVAL AS GValue PTR, BYVAL AS gint8 /'gchar'/)
DECLARE SUB g_value_set_double(BYVAL AS GValue PTR, BYVAL AS gdouble)
DECLARE SUB g_value_set_enum(BYVAL AS GValue PTR, BYVAL AS gint)
DECLARE SUB g_value_set_flags(BYVAL AS GValue PTR, BYVAL AS guint)
DECLARE SUB g_value_set_float(BYVAL AS GValue PTR, BYVAL AS gfloat)
DECLARE SUB g_value_set_gtype(BYVAL AS GValue PTR, BYVAL AS GType)
DECLARE SUB g_value_set_instance(BYVAL AS GValue PTR, BYVAL AS gpointer)
DECLARE SUB g_value_set_int(BYVAL AS GValue PTR, BYVAL AS gint)
DECLARE SUB g_value_set_int64(BYVAL AS GValue PTR, BYVAL AS gint64)
DECLARE SUB g_value_set_long(BYVAL AS GValue PTR, BYVAL AS glong)
DECLARE SUB g_value_set_object(BYVAL AS GValue PTR, BYVAL AS gpointer)
DECLARE SUB g_value_set_object_take_ownership(BYVAL AS GValue PTR, BYVAL AS gpointer)
DECLARE SUB g_value_set_param(BYVAL AS GValue PTR, BYVAL AS GParamSpec PTR)
DECLARE SUB g_value_set_param_take_ownership(BYVAL AS GValue PTR, BYVAL AS GParamSpec PTR)
DECLARE SUB g_value_set_pointer(BYVAL AS GValue PTR, BYVAL AS gpointer)
DECLARE SUB g_value_set_schar(BYVAL AS GValue PTR, BYVAL AS gint8)
DECLARE SUB g_value_set_static_boxed(BYVAL AS GValue PTR, BYVAL AS gconstpointer)
DECLARE SUB g_value_set_static_string(BYVAL AS GValue PTR, BYVAL AS const gchar PTR)
DECLARE SUB g_value_set_string(BYVAL AS GValue PTR, BYVAL AS const gchar PTR)
DECLARE SUB g_value_set_string_take_ownership(BYVAL AS GValue PTR, BYVAL AS gchar PTR)
DECLARE SUB g_value_set_uchar(BYVAL AS GValue PTR, BYVAL AS guchar /'?'/)
DECLARE SUB g_value_set_uint(BYVAL AS GValue PTR, BYVAL AS guint)
DECLARE SUB g_value_set_uint64(BYVAL AS GValue PTR, BYVAL AS guint64)
DECLARE SUB g_value_set_ulong(BYVAL AS GValue PTR, BYVAL AS gulong)
DECLARE SUB g_value_set_variant(BYVAL AS GValue PTR, BYVAL AS GVariant PTR)
DECLARE SUB g_value_take_boxed(BYVAL AS GValue PTR, BYVAL AS gconstpointer)
DECLARE SUB g_value_take_object(BYVAL AS GValue PTR, BYVAL AS gpointer)
DECLARE SUB g_value_take_param(BYVAL AS GValue PTR, BYVAL AS GParamSpec PTR)
DECLARE SUB g_value_take_string(BYVAL AS GValue PTR, BYVAL AS gchar PTR)
DECLARE SUB g_value_take_variant(BYVAL AS GValue PTR, BYVAL AS GVariant PTR)
DECLARE FUNCTION g_value_transform(BYVAL AS const GValue PTR, BYVAL AS GValue PTR) AS gboolean
DECLARE SUB g_value_unset(BYVAL AS GValue PTR)
DECLARE SUB g_value_register_transform_func(BYVAL AS GType, BYVAL AS GType, BYVAL AS GValueTransform)
DECLARE FUNCTION g_value_type_compatible(BYVAL AS GType, BYVAL AS GType) AS gboolean
DECLARE FUNCTION g_value_type_transformable(BYVAL AS GType, BYVAL AS GType) AS gboolean
' P_3

TYPE GBaseFinalizeFunc AS SUB CDECL(BYVAL AS gpointer)
TYPE GBaseInitFunc AS SUB CDECL(BYVAL AS gpointer)
DECLARE FUNCTION g_binding_get_type() AS GType
#DEFINE G_TYPE_BINDING (g_binding_get_type())
#DEFINE G_BINDING(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), G_TYPE_BINDING, GBinding))
#DEFINE G_BINDING_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), G_TYPE_BINDING, G))
#DEFINE G_IS_BINDING(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), G_TYPE_BINDING))
#DEFINE G_IS_CLASS_BINDING(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), G_TYPE_BINDING))
#DEFINE G_BINDING_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), G_TYPE_BINDING, G))
DECLARE FUNCTION g_binding_get_flags(BYVAL AS GBinding PTR) AS GBindingFlags
DECLARE FUNCTION g_binding_get_source(BYVAL AS GBinding PTR) AS GObject PTR
DECLARE FUNCTION g_binding_get_source_property(BYVAL AS GBinding PTR) AS const gchar PTR
DECLARE FUNCTION g_binding_get_target(BYVAL AS GBinding PTR) AS GObject PTR
DECLARE FUNCTION g_binding_get_target_property(BYVAL AS GBinding PTR) AS const gchar PTR
DECLARE SUB g_binding_unbind(BYVAL AS GBinding PTR)
TYPE GBindingTransformFunc AS FUNCTION CDECL(BYVAL AS GBinding PTR, BYVAL AS const GValue PTR, BYVAL AS GValue PTR, BYVAL AS gpointer) AS gboolean
TYPE GBoxedCopyFunc AS FUNCTION CDECL(BYVAL AS gpointer) AS gpointer
TYPE GBoxedFreeFunc AS SUB CDECL(BYVAL AS gpointer)
TYPE _GCClosure
  AS GClosure closure
  AS gpointer callback
END TYPE
DECLARE SUB g_cclosure_marshal_BOOLEAN__BOXED_BOXED(BYVAL AS GClosure PTR, BYVAL AS GValue PTR, BYVAL AS guint, BYVAL AS const GValue PTR, BYVAL AS gpointer, BYVAL AS gpointer)
DECLARE SUB g_cclosure_marshal_BOOLEAN__BOXED_BOXEDv(BYVAL AS GClosure PTR, BYVAL AS GValue PTR, BYVAL AS gpointer, BYVAL AS va_list, BYVAL AS gpointer, BYVAL AS gint /'int'/, BYVAL AS GType PTR)
DECLARE SUB g_cclosure_marshal_BOOLEAN__FLAGS(BYVAL AS GClosure PTR, BYVAL AS GValue PTR, BYVAL AS guint, BYVAL AS const GValue PTR, BYVAL AS gpointer, BYVAL AS gpointer)
DECLARE SUB g_cclosure_marshal_BOOLEAN__FLAGSv(BYVAL AS GClosure PTR, BYVAL AS GValue PTR, BYVAL AS gpointer, BYVAL AS va_list, BYVAL AS gpointer, BYVAL AS gint /'int'/, BYVAL AS GType PTR)
DECLARE SUB g_cclosure_marshal_STRING__OBJECT_POINTER(BYVAL AS GClosure PTR, BYVAL AS GValue PTR, BYVAL AS guint, BYVAL AS const GValue PTR, BYVAL AS gpointer, BYVAL AS gpointer)
DECLARE SUB g_cclosure_marshal_STRING__OBJECT_POINTERv(BYVAL AS GClosure PTR, BYVAL AS GValue PTR, BYVAL AS gpointer, BYVAL AS va_list, BYVAL AS gpointer, BYVAL AS gint /'int'/, BYVAL AS GType PTR)
DECLARE SUB g_cclosure_marshal_VOID__BOOLEAN(BYVAL AS GClosure PTR, BYVAL AS GValue PTR, BYVAL AS guint, BYVAL AS const GValue PTR, BYVAL AS gpointer, BYVAL AS gpointer)
DECLARE SUB g_cclosure_marshal_VOID__BOOLEANv(BYVAL AS GClosure PTR, BYVAL AS GValue PTR, BYVAL AS gpointer, BYVAL AS va_list, BYVAL AS gpointer, BYVAL AS gint /'int'/, BYVAL AS GType PTR)
DECLARE SUB g_cclosure_marshal_VOID__BOXED(BYVAL AS GClosure PTR, BYVAL AS GValue PTR, BYVAL AS guint, BYVAL AS const GValue PTR, BYVAL AS gpointer, BYVAL AS gpointer)
DECLARE SUB g_cclosure_marshal_VOID__BOXEDv(BYVAL AS GClosure PTR, BYVAL AS GValue PTR, BYVAL AS gpointer, BYVAL AS va_list, BYVAL AS gpointer, BYVAL AS gint /'int'/, BYVAL AS GType PTR)
DECLARE SUB g_cclosure_marshal_VOID__CHAR(BYVAL AS GClosure PTR, BYVAL AS GValue PTR, BYVAL AS guint, BYVAL AS const GValue PTR, BYVAL AS gpointer, BYVAL AS gpointer)
DECLARE SUB g_cclosure_marshal_VOID__CHARv(BYVAL AS GClosure PTR, BYVAL AS GValue PTR, BYVAL AS gpointer, BYVAL AS va_list, BYVAL AS gpointer, BYVAL AS gint /'int'/, BYVAL AS GType PTR)
DECLARE SUB g_cclosure_marshal_VOID__DOUBLE(BYVAL AS GClosure PTR, BYVAL AS GValue PTR, BYVAL AS guint, BYVAL AS const GValue PTR, BYVAL AS gpointer, BYVAL AS gpointer)
DECLARE SUB g_cclosure_marshal_VOID__DOUBLEv(BYVAL AS GClosure PTR, BYVAL AS GValue PTR, BYVAL AS gpointer, BYVAL AS va_list, BYVAL AS gpointer, BYVAL AS gint /'int'/, BYVAL AS GType PTR)
DECLARE SUB g_cclosure_marshal_VOID__ENUM(BYVAL AS GClosure PTR, BYVAL AS GValue PTR, BYVAL AS guint, BYVAL AS const GValue PTR, BYVAL AS gpointer, BYVAL AS gpointer)
DECLARE SUB g_cclosure_marshal_VOID__ENUMv(BYVAL AS GClosure PTR, BYVAL AS GValue PTR, BYVAL AS gpointer, BYVAL AS va_list, BYVAL AS gpointer, BYVAL AS gint /'int'/, BYVAL AS GType PTR)
DECLARE SUB g_cclosure_marshal_VOID__FLAGS(BYVAL AS GClosure PTR, BYVAL AS GValue PTR, BYVAL AS guint, BYVAL AS const GValue PTR, BYVAL AS gpointer, BYVAL AS gpointer)
DECLARE SUB g_cclosure_marshal_VOID__FLAGSv(BYVAL AS GClosure PTR, BYVAL AS GValue PTR, BYVAL AS gpointer, BYVAL AS va_list, BYVAL AS gpointer, BYVAL AS gint /'int'/, BYVAL AS GType PTR)
DECLARE SUB g_cclosure_marshal_VOID__FLOAT(BYVAL AS GClosure PTR, BYVAL AS GValue PTR, BYVAL AS guint, BYVAL AS const GValue PTR, BYVAL AS gpointer, BYVAL AS gpointer)
DECLARE SUB g_cclosure_marshal_VOID__FLOATv(BYVAL AS GClosure PTR, BYVAL AS GValue PTR, BYVAL AS gpointer, BYVAL AS va_list, BYVAL AS gpointer, BYVAL AS gint /'int'/, BYVAL AS GType PTR)
DECLARE SUB g_cclosure_marshal_VOID__INT(BYVAL AS GClosure PTR, BYVAL AS GValue PTR, BYVAL AS guint, BYVAL AS const GValue PTR, BYVAL AS gpointer, BYVAL AS gpointer)
DECLARE SUB g_cclosure_marshal_VOID__INTv(BYVAL AS GClosure PTR, BYVAL AS GValue PTR, BYVAL AS gpointer, BYVAL AS va_list, BYVAL AS gpointer, BYVAL AS gint /'int'/, BYVAL AS GType PTR)
DECLARE SUB g_cclosure_marshal_VOID__LONG(BYVAL AS GClosure PTR, BYVAL AS GValue PTR, BYVAL AS guint, BYVAL AS const GValue PTR, BYVAL AS gpointer, BYVAL AS gpointer)
DECLARE SUB g_cclosure_marshal_VOID__LONGv(BYVAL AS GClosure PTR, BYVAL AS GValue PTR, BYVAL AS gpointer, BYVAL AS va_list, BYVAL AS gpointer, BYVAL AS gint /'int'/, BYVAL AS GType PTR)
DECLARE SUB g_cclosure_marshal_VOID__OBJECT(BYVAL AS GClosure PTR, BYVAL AS GValue PTR, BYVAL AS guint, BYVAL AS const GValue PTR, BYVAL AS gpointer, BYVAL AS gpointer)
DECLARE SUB g_cclosure_marshal_VOID__OBJECTv(BYVAL AS GClosure PTR, BYVAL AS GValue PTR, BYVAL AS gpointer, BYVAL AS va_list, BYVAL AS gpointer, BYVAL AS gint /'int'/, BYVAL AS GType PTR)
DECLARE SUB g_cclosure_marshal_VOID__PARAM(BYVAL AS GClosure PTR, BYVAL AS GValue PTR, BYVAL AS guint, BYVAL AS const GValue PTR, BYVAL AS gpointer, BYVAL AS gpointer)
DECLARE SUB g_cclosure_marshal_VOID__PARAMv(BYVAL AS GClosure PTR, BYVAL AS GValue PTR, BYVAL AS gpointer, BYVAL AS va_list, BYVAL AS gpointer, BYVAL AS gint /'int'/, BYVAL AS GType PTR)
DECLARE SUB g_cclosure_marshal_VOID__POINTER(BYVAL AS GClosure PTR, BYVAL AS GValue PTR, BYVAL AS guint, BYVAL AS const GValue PTR, BYVAL AS gpointer, BYVAL AS gpointer)
DECLARE SUB g_cclosure_marshal_VOID__POINTERv(BYVAL AS GClosure PTR, BYVAL AS GValue PTR, BYVAL AS gpointer, BYVAL AS va_list, BYVAL AS gpointer, BYVAL AS gint /'int'/, BYVAL AS GType PTR)
DECLARE SUB g_cclosure_marshal_VOID__STRING(BYVAL AS GClosure PTR, BYVAL AS GValue PTR, BYVAL AS guint, BYVAL AS const GValue PTR, BYVAL AS gpointer, BYVAL AS gpointer)
DECLARE SUB g_cclosure_marshal_VOID__STRINGv(BYVAL AS GClosure PTR, BYVAL AS GValue PTR, BYVAL AS gpointer, BYVAL AS va_list, BYVAL AS gpointer, BYVAL AS gint /'int'/, BYVAL AS GType PTR)
DECLARE SUB g_cclosure_marshal_VOID__UCHAR(BYVAL AS GClosure PTR, BYVAL AS GValue PTR, BYVAL AS guint, BYVAL AS const GValue PTR, BYVAL AS gpointer, BYVAL AS gpointer)
DECLARE SUB g_cclosure_marshal_VOID__UCHARv(BYVAL AS GClosure PTR, BYVAL AS GValue PTR, BYVAL AS gpointer, BYVAL AS va_list, BYVAL AS gpointer, BYVAL AS gint /'int'/, BYVAL AS GType PTR)
DECLARE SUB g_cclosure_marshal_VOID__UINT(BYVAL AS GClosure PTR, BYVAL AS GValue PTR, BYVAL AS guint, BYVAL AS const GValue PTR, BYVAL AS gpointer, BYVAL AS gpointer)
DECLARE SUB g_cclosure_marshal_VOID__UINT_POINTER(BYVAL AS GClosure PTR, BYVAL AS GValue PTR, BYVAL AS guint, BYVAL AS const GValue PTR, BYVAL AS gpointer, BYVAL AS gpointer)
DECLARE SUB g_cclosure_marshal_VOID__UINT_POINTERv(BYVAL AS GClosure PTR, BYVAL AS GValue PTR, BYVAL AS gpointer, BYVAL AS va_list, BYVAL AS gpointer, BYVAL AS gint /'int'/, BYVAL AS GType PTR)
DECLARE SUB g_cclosure_marshal_VOID__UINTv(BYVAL AS GClosure PTR, BYVAL AS GValue PTR, BYVAL AS gpointer, BYVAL AS va_list, BYVAL AS gpointer, BYVAL AS gint /'int'/, BYVAL AS GType PTR)
DECLARE SUB g_cclosure_marshal_VOID__ULONG(BYVAL AS GClosure PTR, BYVAL AS GValue PTR, BYVAL AS guint, BYVAL AS const GValue PTR, BYVAL AS gpointer, BYVAL AS gpointer)
DECLARE SUB g_cclosure_marshal_VOID__ULONGv(BYVAL AS GClosure PTR, BYVAL AS GValue PTR, BYVAL AS gpointer, BYVAL AS va_list, BYVAL AS gpointer, BYVAL AS gint /'int'/, BYVAL AS GType PTR)
DECLARE SUB g_cclosure_marshal_VOID__VARIANT(BYVAL AS GClosure PTR, BYVAL AS GValue PTR, BYVAL AS guint, BYVAL AS const GValue PTR, BYVAL AS gpointer, BYVAL AS gpointer)
DECLARE SUB g_cclosure_marshal_VOID__VARIANTv(BYVAL AS GClosure PTR, BYVAL AS GValue PTR, BYVAL AS gpointer, BYVAL AS va_list, BYVAL AS gpointer, BYVAL AS gint /'int'/, BYVAL AS GType PTR)
DECLARE SUB g_cclosure_marshal_VOID__VOID(BYVAL AS GClosure PTR, BYVAL AS GValue PTR, BYVAL AS guint, BYVAL AS const GValue PTR, BYVAL AS gpointer, BYVAL AS gpointer)
DECLARE SUB g_cclosure_marshal_VOID__VOIDv(BYVAL AS GClosure PTR, BYVAL AS GValue PTR, BYVAL AS gpointer, BYVAL AS va_list, BYVAL AS gpointer, BYVAL AS gint /'int'/, BYVAL AS GType PTR)
DECLARE SUB g_cclosure_marshal_generic(BYVAL AS GClosure PTR, BYVAL AS GValue PTR, BYVAL AS guint, BYVAL AS const GValue PTR, BYVAL AS gpointer, BYVAL AS gpointer)
DECLARE SUB g_cclosure_marshal_generic_va(BYVAL AS GClosure PTR, BYVAL AS GValue PTR, BYVAL AS gpointer, BYVAL AS va_list, BYVAL AS gpointer, BYVAL AS gint /'int'/, BYVAL AS GType PTR)
DECLARE FUNCTION g_cclosure_new(BYVAL AS GCallback, BYVAL AS gpointer, BYVAL AS GClosureNotify) AS GClosure PTR
DECLARE FUNCTION g_cclosure_new_object(BYVAL AS GCallback, BYVAL AS GObject PTR) AS GClosure PTR
DECLARE FUNCTION g_cclosure_new_object_swap(BYVAL AS GCallback, BYVAL AS GObject PTR) AS GClosure PTR
DECLARE FUNCTION g_cclosure_new_swap(BYVAL AS GCallback, BYVAL AS gpointer, BYVAL AS GClosureNotify) AS GClosure PTR
TYPE GClassFinalizeFunc AS SUB CDECL(BYVAL AS gpointer, BYVAL AS gpointer)
TYPE GClassInitFunc AS SUB CDECL(BYVAL AS gpointer, BYVAL AS gpointer)
TYPE _GClosureNotifyData
  AS gpointer data
  AS GClosureNotify notify
END TYPE
TYPE _GEnumClass
  AS GTypeClass g_type_class
  AS gint minimum
  AS gint maximum
  AS guint n_values
  AS GEnumValue PTR values
END TYPE
TYPE _GEnumValue
  AS gint value
  AS const gchar PTR value_name
  AS const gchar PTR value_nick
END TYPE
TYPE _GFlagsClass
  AS GTypeClass g_type_class
  AS guint mask
  AS guint n_values
  AS GFlagsValue PTR values
END TYPE
TYPE _GFlagsValue
  AS guint value
  AS const gchar PTR value_name
  AS const gchar PTR value_nick
END TYPE
TYPE _GInitiallyUnowned
  AS GTypeInstance g_type_instance
  AS guint ref_count
  AS GData PTR qdata
END TYPE
DECLARE FUNCTION g_initially_unowned_get_type() AS GType
#DEFINE G_TYPE_INITIALLY_UNOWNED (g_initially_unowned_get_type())
#DEFINE G_INITIALLY_UNOWNED(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), G_TYPE_INITIALLY_UNOWNED, GInitiallyUnowned))
#DEFINE G_INITIALLY_UNOWNED_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), G_TYPE_INITIALLY_UNOWNED, GInitiallyUnownedClass))
#DEFINE G_IS_INITIALLY_UNOWNED(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), G_TYPE_INITIALLY_UNOWNED))
#DEFINE G_IS_CLASS_INITIALLY_UNOWNED(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), G_TYPE_INITIALLY_UNOWNED))
#DEFINE G_INITIALLY_UNOWNED_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), G_TYPE_INITIALLY_UNOWNED, GInitiallyUnownedClass))
TYPE _GInitiallyUnownedClass
  AS GTypeClass g_type_class
  AS GSList PTR construct_properties
  constructor AS FUNCTION CDECL(BYVAL AS GType, BYVAL AS guint, BYVAL AS GObjectConstructParam PTR) AS GObject PTR
  set_property AS SUB CDECL(BYVAL AS GObject PTR, BYVAL AS guint, BYVAL AS const GValue PTR, BYVAL AS GParamSpec PTR)
  get_property AS SUB CDECL(BYVAL AS GObject PTR, BYVAL AS guint, BYVAL AS GValue PTR, BYVAL AS GParamSpec PTR)
  dispose AS SUB CDECL(BYVAL AS GObject PTR)
  finalize AS SUB CDECL(BYVAL AS GObject PTR)
  dispatch_properties_changed AS SUB CDECL(BYVAL AS GObject PTR, BYVAL AS guint, BYVAL AS GParamSpec PTR PTR)
  notify AS SUB CDECL(BYVAL AS GObject PTR, BYVAL AS GParamSpec PTR)
  constructed AS SUB CDECL(BYVAL AS GObject PTR)
  AS gsize flags
  AS gpointer pdummy(5)
END TYPE
TYPE GInstanceInitFunc AS SUB CDECL(BYVAL AS GTypeInstance PTR, BYVAL AS gpointer)
TYPE GInterfaceFinalizeFunc AS SUB CDECL(BYVAL AS gpointer, BYVAL AS gpointer)
TYPE _GInterfaceInfo
  AS GInterfaceInitFunc interface_init
  AS GInterfaceFinalizeFunc interface_finalize
  AS gpointer interface_data
END TYPE
TYPE _GObject
  AS GTypeInstance g_type_instance
  AS guint ref_count
  AS GData PTR qdata
END TYPE
DECLARE FUNCTION g_object_get_type() AS GType
#DEFINE G_TYPE_OBJECT (g_object_get_type())
#DEFINE G_OBJECT(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), G_TYPE_OBJECT, GObject))
#DEFINE G_OBJECT_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), G_TYPE_OBJECT, GObjectClass))
#DEFINE G_IS_OBJECT(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), G_TYPE_OBJECT))
#DEFINE G_IS_CLASS_OBJECT(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), G_TYPE_OBJECT))
#DEFINE G_OBJECT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), G_TYPE_OBJECT, GObjectClass))
DECLARE FUNCTION g_object_new(BYVAL AS GType, BYVAL AS const gchar PTR, ...) AS gpointer
DECLARE FUNCTION g_object_new_valist(BYVAL AS GType, BYVAL AS const gchar PTR, BYVAL AS va_list) AS GObject PTR
DECLARE FUNCTION g_object_new_with_properties(BYVAL AS GType, BYVAL AS guint, BYVAL AS const char PTR PTR, BYVAL AS const GValue PTR) AS GObject PTR
DECLARE FUNCTION g_object_newv(BYVAL AS GType, BYVAL AS guint, BYVAL AS GParameter PTR) AS gpointer
DECLARE FUNCTION g_object_compat_control(BYVAL AS gsize, BYVAL AS gpointer) AS gsize
DECLARE FUNCTION g_object_interface_find_property(BYVAL AS gpointer, BYVAL AS const gchar PTR) AS GParamSpec PTR
DECLARE SUB g_object_interface_install_property(BYVAL AS gpointer, BYVAL AS GParamSpec PTR)
DECLARE FUNCTION g_object_interface_list_properties(BYVAL AS gpointer, BYVAL AS guint PTR) AS GParamSpec PTR PTR
DECLARE SUB g_object_add_toggle_ref(BYVAL AS GObject PTR, BYVAL AS GToggleNotify, BYVAL AS gpointer)
DECLARE SUB g_object_add_weak_pointer(BYVAL AS GObject PTR, BYVAL AS gpointer PTR)
DECLARE FUNCTION g_object_bind_property(BYVAL AS gpointer, BYVAL AS const gchar PTR, BYVAL AS gpointer, BYVAL AS const gchar PTR, BYVAL AS GBindingFlags) AS GBinding PTR
DECLARE FUNCTION g_object_bind_property_full(BYVAL AS gpointer, BYVAL AS const gchar PTR, BYVAL AS gpointer, BYVAL AS const gchar PTR, BYVAL AS GBindingFlags, BYVAL AS GBindingTransformFunc, BYVAL AS GBindingTransformFunc, BYVAL AS gpointer, BYVAL AS GDestroyNotify) AS GBinding PTR
DECLARE FUNCTION g_object_bind_property_with_closures(BYVAL AS gpointer, BYVAL AS const gchar PTR, BYVAL AS gpointer, BYVAL AS const gchar PTR, BYVAL AS GBindingFlags, BYVAL AS GClosure PTR, BYVAL AS GClosure PTR) AS GBinding PTR
DECLARE FUNCTION g_object_connect(BYVAL AS gpointer, BYVAL AS const gchar PTR, ...) AS gpointer
DECLARE SUB g_object_disconnect(BYVAL AS gpointer, BYVAL AS const gchar PTR, ...)
DECLARE FUNCTION g_object_dup_data(BYVAL AS GObject PTR, BYVAL AS const gchar PTR, BYVAL AS GDuplicateFunc, BYVAL AS gpointer) AS gpointer
DECLARE FUNCTION g_object_dup_qdata(BYVAL AS GObject PTR, BYVAL AS GQuark, BYVAL AS GDuplicateFunc, BYVAL AS gpointer) AS gpointer
DECLARE SUB g_object_force_floating(BYVAL AS GObject PTR)
DECLARE SUB g_object_freeze_notify(BYVAL AS GObject PTR)
DECLARE SUB g_object_get(BYVAL AS gpointer, BYVAL AS const gchar PTR, ...)
DECLARE FUNCTION g_object_get_data(BYVAL AS GObject PTR, BYVAL AS const gchar PTR) AS gpointer
DECLARE SUB g_object_get_property(BYVAL AS GObject PTR, BYVAL AS const gchar PTR, BYVAL AS GValue PTR)
DECLARE FUNCTION g_object_get_qdata(BYVAL AS GObject PTR, BYVAL AS GQuark) AS gpointer
DECLARE SUB g_object_get_valist(BYVAL AS GObject PTR, BYVAL AS const gchar PTR, BYVAL AS va_list)
DECLARE SUB g_object_getv(BYVAL AS GObject PTR, BYVAL AS guint, BYVAL AS const gchar PTR PTR, BYVAL AS GValue PTR)
DECLARE FUNCTION g_object_is_floating(BYVAL AS gpointer) AS gboolean
DECLARE SUB g_object_notify(BYVAL AS GObject PTR, BYVAL AS const gchar PTR)
DECLARE SUB g_object_notify_by_pspec(BYVAL AS GObject PTR, BYVAL AS GParamSpec PTR)
DECLARE FUNCTION g_object_ref(BYVAL AS gpointer) AS gpointer
DECLARE FUNCTION g_object_ref_sink(BYVAL AS gpointer) AS gpointer
DECLARE SUB g_object_remove_toggle_ref(BYVAL AS GObject PTR, BYVAL AS GToggleNotify, BYVAL AS gpointer)
DECLARE SUB g_object_remove_weak_pointer(BYVAL AS GObject PTR, BYVAL AS gpointer PTR)
DECLARE FUNCTION g_object_replace_data(BYVAL AS GObject PTR, BYVAL AS const gchar PTR, BYVAL AS gpointer, BYVAL AS gpointer, BYVAL AS GDestroyNotify, BYVAL AS GDestroyNotify PTR) AS gboolean
DECLARE FUNCTION g_object_replace_qdata(BYVAL AS GObject PTR, BYVAL AS GQuark, BYVAL AS gpointer, BYVAL AS gpointer, BYVAL AS GDestroyNotify, BYVAL AS GDestroyNotify PTR) AS gboolean
DECLARE SUB g_object_run_dispose(BYVAL AS GObject PTR)
DECLARE SUB g_object_set(BYVAL AS gpointer, BYVAL AS const gchar PTR, ...)
DECLARE SUB g_object_set_data(BYVAL AS GObject PTR, BYVAL AS const gchar PTR, BYVAL AS gpointer)
DECLARE SUB g_object_set_data_full(BYVAL AS GObject PTR, BYVAL AS const gchar PTR, BYVAL AS gpointer, BYVAL AS GDestroyNotify)
DECLARE SUB g_object_set_property(BYVAL AS GObject PTR, BYVAL AS const gchar PTR, BYVAL AS const GValue PTR)
DECLARE SUB g_object_set_qdata(BYVAL AS GObject PTR, BYVAL AS GQuark, BYVAL AS gpointer)
DECLARE SUB g_object_set_qdata_full(BYVAL AS GObject PTR, BYVAL AS GQuark, BYVAL AS gpointer, BYVAL AS GDestroyNotify)
DECLARE SUB g_object_set_valist(BYVAL AS GObject PTR, BYVAL AS const gchar PTR, BYVAL AS va_list)
DECLARE SUB g_object_setv(BYVAL AS GObject PTR, BYVAL AS guint, BYVAL AS const gchar PTR PTR, BYVAL AS const GValue PTR)
DECLARE FUNCTION g_object_steal_data(BYVAL AS GObject PTR, BYVAL AS const gchar PTR) AS gpointer
DECLARE FUNCTION g_object_steal_qdata(BYVAL AS GObject PTR, BYVAL AS GQuark) AS gpointer
DECLARE SUB g_object_thaw_notify(BYVAL AS GObject PTR)
DECLARE SUB g_object_unref(BYVAL AS gpointer)
DECLARE SUB g_object_watch_closure(BYVAL AS GObject PTR, BYVAL AS GClosure PTR)
DECLARE SUB g_object_weak_ref(BYVAL AS GObject PTR, BYVAL AS GWeakNotify, BYVAL AS gpointer)
DECLARE SUB g_object_weak_unref(BYVAL AS GObject PTR, BYVAL AS GWeakNotify, BYVAL AS gpointer)
TYPE _GObjectClass
  AS GTypeClass g_type_class
  AS GSList PTR construct_properties
  constructor AS FUNCTION CDECL(BYVAL AS GType, BYVAL AS guint, BYVAL AS GObjectConstructParam PTR) AS GObject PTR
  set_property AS SUB CDECL(BYVAL AS GObject PTR, BYVAL AS guint, BYVAL AS const GValue PTR, BYVAL AS GParamSpec PTR)
  get_property AS SUB CDECL(BYVAL AS GObject PTR, BYVAL AS guint, BYVAL AS GValue PTR, BYVAL AS GParamSpec PTR)
  dispose AS SUB CDECL(BYVAL AS GObject PTR)
  finalize AS SUB CDECL(BYVAL AS GObject PTR)
  dispatch_properties_changed AS SUB CDECL(BYVAL AS GObject PTR, BYVAL AS guint, BYVAL AS GParamSpec PTR PTR)
  notify AS SUB CDECL(BYVAL AS GObject PTR, BYVAL AS GParamSpec PTR)
  constructed AS SUB CDECL(BYVAL AS GObject PTR)
  AS gsize flags
  AS gpointer pdummy(5)
END TYPE
DECLARE FUNCTION g_object_class_find_property(BYVAL AS GObjectClass PTR, BYVAL AS const gchar PTR) AS GParamSpec PTR
DECLARE SUB g_object_class_install_properties(BYVAL AS GObjectClass PTR, BYVAL AS guint, BYVAL AS GParamSpec PTR PTR)
DECLARE SUB g_object_class_install_property(BYVAL AS GObjectClass PTR, BYVAL AS guint, BYVAL AS GParamSpec PTR)
DECLARE FUNCTION g_object_class_list_properties(BYVAL AS GObjectClass PTR, BYVAL AS guint PTR) AS GParamSpec PTR PTR
DECLARE SUB g_object_class_override_property(BYVAL AS GObjectClass PTR, BYVAL AS guint, BYVAL AS const gchar PTR)
TYPE _GObjectConstructParam
  AS GParamSpec PTR pspec
  AS GValue PTR value
END TYPE
TYPE GObjectFinalizeFunc AS SUB CDECL(BYVAL AS GObject PTR)
TYPE GObjectGetPropertyFunc AS SUB CDECL(BYVAL AS GObject PTR, BYVAL AS guint, BYVAL AS GValue PTR, BYVAL AS GParamSpec PTR)
TYPE GObjectSetPropertyFunc AS SUB CDECL(BYVAL AS GObject PTR, BYVAL AS guint, BYVAL AS const GValue PTR, BYVAL AS GParamSpec PTR)
TYPE _GParamSpec
  AS GTypeInstance g_type_instance
  AS const gchar PTR name
  AS GParamFlags flags
  AS GType value_type
  AS GType owner_type
  AS gchar PTR _nick
  AS gchar PTR _blurb
  AS GData PTR qdata
  AS guint ref_count
  AS guint param_id
END TYPE
DECLARE FUNCTION g_param_spec_internal(BYVAL AS GType, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS GParamFlags) AS gpointer
DECLARE FUNCTION g_param_spec_get_blurb(BYVAL AS GParamSpec PTR) AS const gchar PTR
DECLARE FUNCTION g_param_spec_get_default_value(BYVAL AS GParamSpec PTR) AS const GValue PTR
DECLARE FUNCTION g_param_spec_get_name(BYVAL AS GParamSpec PTR) AS const gchar PTR
DECLARE FUNCTION g_param_spec_get_name_quark(BYVAL AS GParamSpec PTR) AS GQuark
DECLARE FUNCTION g_param_spec_get_nick(BYVAL AS GParamSpec PTR) AS const gchar PTR
DECLARE FUNCTION g_param_spec_get_qdata(BYVAL AS GParamSpec PTR, BYVAL AS GQuark) AS gpointer
DECLARE FUNCTION g_param_spec_get_redirect_target(BYVAL AS GParamSpec PTR) AS GParamSpec PTR
DECLARE FUNCTION g_param_spec_ref(BYVAL AS GParamSpec PTR) AS GParamSpec PTR
DECLARE FUNCTION g_param_spec_ref_sink(BYVAL AS GParamSpec PTR) AS GParamSpec PTR
DECLARE SUB g_param_spec_set_qdata(BYVAL AS GParamSpec PTR, BYVAL AS GQuark, BYVAL AS gpointer)
DECLARE SUB g_param_spec_set_qdata_full(BYVAL AS GParamSpec PTR, BYVAL AS GQuark, BYVAL AS gpointer, BYVAL AS GDestroyNotify)
DECLARE SUB g_param_spec_sink(BYVAL AS GParamSpec PTR)
DECLARE FUNCTION g_param_spec_steal_qdata(BYVAL AS GParamSpec PTR, BYVAL AS GQuark) AS gpointer
DECLARE SUB g_param_spec_unref(BYVAL AS GParamSpec PTR)
TYPE _GParamSpecBoolean
  AS GParamSpec parent_instance
  AS gboolean default_value
END TYPE
TYPE _GParamSpecBoxed
  AS GParamSpec parent_instance
END TYPE
TYPE _GParamSpecChar
  AS GParamSpec parent_instance
  AS gint8 minimum
  AS gint8 maximum
  AS gint8 default_value
END TYPE
TYPE _GParamSpecClass
  AS GTypeClass g_type_class
  AS GType value_type
  finalize AS SUB CDECL(BYVAL AS GParamSpec PTR)
  value_set_default AS SUB CDECL(BYVAL AS GParamSpec PTR, BYVAL AS GValue PTR)
  value_validate AS FUNCTION CDECL(BYVAL AS GParamSpec PTR, BYVAL AS GValue PTR) AS gboolean
  values_cmp AS FUNCTION CDECL(BYVAL AS GParamSpec PTR, BYVAL AS const GValue PTR, BYVAL AS const GValue PTR) AS gint
  AS gpointer dummy(3)
END TYPE
TYPE _GParamSpecDouble
  AS GParamSpec parent_instance
  AS gdouble minimum
  AS gdouble maximum
  AS gdouble default_value
  AS gdouble epsilon
END TYPE
TYPE _GParamSpecEnum
  AS GParamSpec parent_instance
  AS GEnumClass PTR enum_class
  AS gint default_value
END TYPE
TYPE _GParamSpecFlags
  AS GParamSpec parent_instance
  AS GFlagsClass PTR flags_class
  AS guint default_value
END TYPE
TYPE _GParamSpecFloat
  AS GParamSpec parent_instance
  AS gfloat minimum
  AS gfloat maximum
  AS gfloat default_value
  AS gfloat epsilon
END TYPE
TYPE _GParamSpecGType
  AS GParamSpec parent_instance
  AS GType is_a_type
END TYPE
TYPE _GParamSpecInt
  AS GParamSpec parent_instance
  AS gint minimum
  AS gint maximum
  AS gint default_value
END TYPE
TYPE _GParamSpecInt64
  AS GParamSpec parent_instance
  AS gint64 minimum
  AS gint64 maximum
  AS gint64 default_value
END TYPE
TYPE _GParamSpecLong
  AS GParamSpec parent_instance
  AS glong minimum
  AS glong maximum
  AS glong default_value
END TYPE
TYPE _GParamSpecObject
  AS GParamSpec parent_instance
END TYPE
TYPE _GParamSpecOverride
  AS GParamSpec parent_instance
  AS GParamSpec PTR overridden
END TYPE
TYPE _GParamSpecParam
  AS GParamSpec parent_instance
END TYPE
TYPE _GParamSpecPointer
  AS GParamSpec parent_instance
END TYPE
DECLARE SUB g_param_spec_pool_insert(BYVAL AS GParamSpecPool PTR, BYVAL AS GParamSpec PTR, BYVAL AS GType)
DECLARE FUNCTION g_param_spec_pool_list(BYVAL AS GParamSpecPool PTR, BYVAL AS GType, BYVAL AS guint PTR) AS GParamSpec PTR PTR
DECLARE FUNCTION g_param_spec_pool_list_owned(BYVAL AS GParamSpecPool PTR, BYVAL AS GType) AS GList PTR
DECLARE FUNCTION g_param_spec_pool_lookup(BYVAL AS GParamSpecPool PTR, BYVAL AS const gchar PTR, BYVAL AS GType, BYVAL AS gboolean) AS GParamSpec PTR
DECLARE SUB g_param_spec_pool_remove(BYVAL AS GParamSpecPool PTR, BYVAL AS GParamSpec PTR)
DECLARE FUNCTION g_param_spec_pool_new(BYVAL AS gboolean) AS GParamSpecPool PTR
TYPE _GParamSpecString
  AS GParamSpec parent_instance
  AS gchar PTR default_value
  AS gchar PTR cset_first
  AS gchar PTR cset_nth
  AS gint8 /'gchar'/ substitutor
  AS guint null_fold_if_empty : 1
  AS guint ensure_non_null : 1
END TYPE
TYPE _GParamSpecTypeInfo
  AS guint16 instance_size
  AS guint16 n_preallocs
  instance_init AS SUB CDECL(BYVAL AS GParamSpec PTR)
  AS GType value_type
  finalize AS SUB CDECL(BYVAL AS GParamSpec PTR)
  value_set_default AS SUB CDECL(BYVAL AS GParamSpec PTR, BYVAL AS GValue PTR)
  value_validate AS FUNCTION CDECL(BYVAL AS GParamSpec PTR, BYVAL AS GValue PTR) AS gboolean
  values_cmp AS FUNCTION CDECL(BYVAL AS GParamSpec PTR, BYVAL AS const GValue PTR, BYVAL AS const GValue PTR) AS gint
END TYPE
TYPE _GParamSpecUChar
  AS GParamSpec parent_instance
  AS guint8 minimum
  AS guint8 maximum
  AS guint8 default_value
END TYPE
TYPE _GParamSpecUInt
  AS GParamSpec parent_instance
  AS guint minimum
  AS guint maximum
  AS guint default_value
END TYPE
TYPE _GParamSpecUInt64
  AS GParamSpec parent_instance
  AS guint64 minimum
  AS guint64 maximum
  AS guint64 default_value
END TYPE
TYPE _GParamSpecULong
  AS GParamSpec parent_instance
  AS gulong minimum
  AS gulong maximum
  AS gulong default_value
END TYPE
TYPE _GParamSpecUnichar
  AS GParamSpec parent_instance
  AS gunichar /'?'/ default_value
END TYPE
TYPE _GParamSpecValueArray
  AS GParamSpec parent_instance
  AS GParamSpec PTR element_spec
  AS guint fixed_n_elements
END TYPE
TYPE _GParamSpecVariant
  AS GParamSpec parent_instance
  AS GVariantType PTR type
  AS GVariant PTR default_value
  AS gpointer padding(3)
END TYPE
TYPE _GParameter
  AS const gchar PTR name
  AS GValue value
END TYPE
TYPE GSignalAccumulator AS FUNCTION CDECL(BYVAL AS GSignalInvocationHint PTR, BYVAL AS GValue PTR, BYVAL AS const GValue PTR, BYVAL AS gpointer) AS gboolean
TYPE GSignalEmissionHook AS FUNCTION CDECL(BYVAL AS GSignalInvocationHint PTR, BYVAL AS guint, BYVAL AS const GValue PTR, BYVAL AS gpointer) AS gboolean
TYPE _GSignalInvocationHint
  AS guint signal_id
  AS GQuark detail
  AS GSignalFlags run_type
END TYPE
TYPE _GSignalQuery
  AS guint signal_id
  AS const gchar PTR signal_name
  AS GType itype
  AS GSignalFlags signal_flags
  AS GType return_type
  AS guint n_params
  AS GType param_types(4)
END TYPE
TYPE AS _GTypeCValue GTypeCValue
TYPE GTypeClassCacheFunc AS FUNCTION CDECL(BYVAL AS gpointer, BYVAL AS GTypeClass PTR) AS gboolean
TYPE _GTypeFundamentalInfo
  AS GTypeFundamentalFlags type_flags
END TYPE
TYPE _GTypeInfo
  AS guint16 class_size
  AS GBaseInitFunc base_init
  AS GBaseFinalizeFunc base_finalize
  AS GClassInitFunc class_init
  AS GClassFinalizeFunc class_finalize
  AS gconstpointer class_data
  AS guint16 instance_size
  AS guint16 n_preallocs
  AS GInstanceInitFunc instance_init
  AS const GTypeValueTable PTR value_table
END TYPE
TYPE _GTypeInterface
  AS GType g_type
  AS GType g_instance_type
END TYPE
DECLARE FUNCTION g_type_interface_peek_parent(BYVAL AS gpointer) AS gpointer
DECLARE SUB g_type_interface_add_prerequisite(BYVAL AS GType, BYVAL AS GType)
DECLARE FUNCTION g_type_interface_get_plugin(BYVAL AS GType, BYVAL AS GType) AS GTypePlugin PTR
DECLARE FUNCTION g_type_interface_peek(BYVAL AS gpointer, BYVAL AS GType) AS gpointer
DECLARE FUNCTION g_type_interface_prerequisites(BYVAL AS GType, BYVAL AS guint PTR) AS GType PTR
TYPE GTypeInterfaceCheckFunc AS SUB CDECL(BYVAL AS gpointer, BYVAL AS gpointer)
TYPE _GTypeModule
  AS GObject parent_instance
  AS guint use_count
  AS GSList PTR type_infos
  AS GSList PTR interface_infos
  AS gchar PTR name
END TYPE
DECLARE FUNCTION g_type_module_get_type() AS GType
#DEFINE G_TYPE_TYPE_MODULE (g_type_module_get_type())
#DEFINE G_TYPE_MODULE(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), G_TYPE_TYPE_MODULE, GTypeModule))
#DEFINE G_TYPE_MODULE_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), G_TYPE_TYPE_MODULE, GTypeModuleClass))
#DEFINE G_IS_TYPE_MODULE(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), G_TYPE_TYPE_MODULE))
#DEFINE G_IS_CLASS_TYPE_MODULE(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), G_TYPE_TYPE_MODULE))
#DEFINE G_TYPE_MODULE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), G_TYPE_TYPE_MODULE, GTypeModuleClass))
DECLARE SUB g_type_module_add_interface(BYVAL AS GTypeModule PTR, BYVAL AS GType, BYVAL AS GType, BYVAL AS const GInterfaceInfo PTR)
DECLARE FUNCTION g_type_module_register_enum(BYVAL AS GTypeModule PTR, BYVAL AS const gchar PTR, BYVAL AS const GEnumValue PTR) AS GType
DECLARE FUNCTION g_type_module_register_flags(BYVAL AS GTypeModule PTR, BYVAL AS const gchar PTR, BYVAL AS const GFlagsValue PTR) AS GType
DECLARE FUNCTION g_type_module_register_type(BYVAL AS GTypeModule PTR, BYVAL AS GType, BYVAL AS const gchar PTR, BYVAL AS const GTypeInfo PTR, BYVAL AS GTypeFlags) AS GType
DECLARE SUB g_type_module_set_name(BYVAL AS GTypeModule PTR, BYVAL AS const gchar PTR)
DECLARE SUB g_type_module_unuse(BYVAL AS GTypeModule PTR)
DECLARE FUNCTION g_type_module_use(BYVAL AS GTypeModule PTR) AS gboolean
TYPE _GTypeModuleClass
  AS GObjectClass parent_class
  load AS FUNCTION CDECL(BYVAL AS GTypeModule PTR) AS gboolean
  unload AS SUB CDECL(BYVAL AS GTypeModule PTR)
  reserved1 AS SUB CDECL()
  reserved2 AS SUB CDECL()
  reserved3 AS SUB CDECL()
  reserved4 AS SUB CDECL()
END TYPE
DECLARE FUNCTION g_type_plugin_get_type() AS GType
#DEFINE G_TYPE_TYPE_PLUGIN (g_type_plugin_get_type())
#DEFINE G_TYPE_PLUGIN(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), G_TYPE_TYPE_PLUGIN, GTypePlugin))
#DEFINE G_TYPE_PLUGIN_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), G_TYPE_TYPE_PLUGIN, G))
#DEFINE G_IS_TYPE_PLUGIN(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), G_TYPE_TYPE_PLUGIN))
#DEFINE G_TYPE_PLUGIN_GET_IFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE((obj), G_TYPE_TYPE_PLUGIN, G))
DECLARE SUB g_type_plugin_complete_interface_info(BYVAL AS GTypePlugin PTR, BYVAL AS GType, BYVAL AS GType, BYVAL AS GInterfaceInfo PTR)
DECLARE SUB g_type_plugin_complete_type_info(BYVAL AS GTypePlugin PTR, BYVAL AS GType, BYVAL AS GTypeInfo PTR, BYVAL AS GTypeValueTable PTR)
DECLARE SUB g_type_plugin_unuse(BYVAL AS GTypePlugin PTR)
DECLARE SUB g_type_plugin_use(BYVAL AS GTypePlugin PTR)
TYPE _GTypePluginClass
  AS GTypeInterface base_iface
  AS GTypePluginUse use_plugin
  AS GTypePluginUnuse unuse_plugin
  AS GTypePluginCompleteTypeInfo complete_type_info
  AS GTypePluginCompleteInterfaceInfo complete_interface_info
END TYPE
TYPE _GTypeQuery
  AS GType type
  AS const gchar PTR type_name
  AS guint class_size
  AS guint instance_size
END TYPE
TYPE _GTypeValueTable
  value_init AS SUB CDECL(BYVAL AS GValue PTR)
  value_free AS SUB CDECL(BYVAL AS GValue PTR)
  value_copy AS SUB CDECL(BYVAL AS const GValue PTR, BYVAL AS GValue PTR)
  value_peek_pointer AS FUNCTION CDECL(BYVAL AS const GValue PTR) AS gpointer
  AS const gchar PTR collect_format
  collect_value AS FUNCTION CDECL(BYVAL AS GValue PTR, BYVAL AS guint, BYVAL AS GTypeCValue PTR, BYVAL AS guint) AS gchar PTR
  AS const gchar PTR lcopy_format
  lcopy_value AS FUNCTION CDECL(BYVAL AS const GValue PTR, BYVAL AS guint, BYVAL AS GTypeCValue PTR, BYVAL AS guint) AS gchar PTR
END TYPE
DECLARE FUNCTION g_type_value_table_peek(BYVAL AS GType) AS GTypeValueTable PTR
TYPE GVaClosureMarshal AS SUB CDECL(BYVAL AS GClosure PTR, BYVAL AS GValue PTR, BYVAL AS gpointer, BYVAL AS va_list, BYVAL AS gpointer, BYVAL AS gint /'int'/, BYVAL AS GType PTR)
TYPE _GValueArray
  AS guint n_values
  AS GValue PTR values
  AS guint n_prealloced
END TYPE
DECLARE FUNCTION g_value_array_new(BYVAL AS guint) AS GValueArray PTR
DECLARE FUNCTION g_value_array_append(BYVAL AS GValueArray PTR, BYVAL AS const GValue PTR) AS GValueArray PTR
DECLARE FUNCTION g_value_array_copy(BYVAL AS const GValueArray PTR) AS GValueArray PTR
DECLARE SUB g_value_array_free(BYVAL AS GValueArray PTR)
DECLARE FUNCTION g_value_array_get_nth(BYVAL AS GValueArray PTR, BYVAL AS guint) AS GValue PTR
DECLARE FUNCTION g_value_array_insert(BYVAL AS GValueArray PTR, BYVAL AS guint, BYVAL AS const GValue PTR) AS GValueArray PTR
DECLARE FUNCTION g_value_array_prepend(BYVAL AS GValueArray PTR, BYVAL AS const GValue PTR) AS GValueArray PTR
DECLARE FUNCTION g_value_array_remove(BYVAL AS GValueArray PTR, BYVAL AS guint) AS GValueArray PTR
DECLARE FUNCTION g_value_array_sort(BYVAL AS GValueArray PTR, BYVAL AS GCompareFunc) AS GValueArray PTR
DECLARE FUNCTION g_value_array_sort_with_data(BYVAL AS GValueArray PTR, BYVAL AS GCompareDataFunc, BYVAL AS gpointer) AS GValueArray PTR
DECLARE SUB g_weak_ref_clear(BYVAL AS GWeakRef PTR)
DECLARE FUNCTION g_weak_ref_get(BYVAL AS GWeakRef PTR) AS gpointer
DECLARE SUB g_weak_ref_init(BYVAL AS GWeakRef PTR, BYVAL AS gpointer)
DECLARE SUB g_weak_ref_set(BYVAL AS GWeakRef PTR, BYVAL AS gpointer)
' P_4

DECLARE FUNCTION g_boxed_copy(BYVAL AS GType, BYVAL AS gconstpointer) AS gpointer
DECLARE SUB g_boxed_free(BYVAL AS GType, BYVAL AS gpointer)
DECLARE FUNCTION g_boxed_type_register_static(BYVAL AS const gchar PTR, BYVAL AS GBoxedCopyFunc, BYVAL AS GBoxedFreeFunc) AS GType
DECLARE SUB g_clear_object(BYVAL AS GObject PTR PTR)
DECLARE SUB g_clear_signal_handler(BYVAL AS gulong PTR, BYVAL AS gpointer)
DECLARE SUB g_enum_complete_type_info(BYVAL AS GType, BYVAL AS GTypeInfo PTR, BYVAL AS const GEnumValue PTR)
DECLARE FUNCTION g_enum_get_value(BYVAL AS GEnumClass PTR, BYVAL AS gint) AS GEnumValue PTR
DECLARE FUNCTION g_enum_get_value_by_name(BYVAL AS GEnumClass PTR, BYVAL AS const gchar PTR) AS GEnumValue PTR
DECLARE FUNCTION g_enum_get_value_by_nick(BYVAL AS GEnumClass PTR, BYVAL AS const gchar PTR) AS GEnumValue PTR
DECLARE FUNCTION g_enum_register_static(BYVAL AS const gchar PTR, BYVAL AS const GEnumValue PTR) AS GType
DECLARE FUNCTION g_enum_to_string(BYVAL AS GType, BYVAL AS gint) AS gchar PTR
DECLARE SUB g_flags_complete_type_info(BYVAL AS GType, BYVAL AS GTypeInfo PTR, BYVAL AS const GFlagsValue PTR)
DECLARE FUNCTION g_flags_get_first_value(BYVAL AS GFlagsClass PTR, BYVAL AS guint) AS GFlagsValue PTR
DECLARE FUNCTION g_flags_get_value_by_name(BYVAL AS GFlagsClass PTR, BYVAL AS const gchar PTR) AS GFlagsValue PTR
DECLARE FUNCTION g_flags_get_value_by_nick(BYVAL AS GFlagsClass PTR, BYVAL AS const gchar PTR) AS GFlagsValue PTR
DECLARE FUNCTION g_flags_register_static(BYVAL AS const gchar PTR, BYVAL AS const GFlagsValue PTR) AS GType
DECLARE FUNCTION g_flags_to_string(BYVAL AS GType, BYVAL AS guint) AS gchar PTR
DECLARE FUNCTION g_gtype_get_type() AS GType
DECLARE FUNCTION g_param_spec_boolean(BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS gboolean, BYVAL AS GParamFlags) AS GParamSpec PTR
DECLARE FUNCTION g_param_spec_boxed(BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS GType, BYVAL AS GParamFlags) AS GParamSpec PTR
DECLARE FUNCTION g_param_spec_char(BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS gint8, BYVAL AS gint8, BYVAL AS gint8, BYVAL AS GParamFlags) AS GParamSpec PTR
DECLARE FUNCTION g_param_spec_double(BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS gdouble, BYVAL AS gdouble, BYVAL AS gdouble, BYVAL AS GParamFlags) AS GParamSpec PTR
DECLARE FUNCTION g_param_spec_enum(BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS GType, BYVAL AS gint, BYVAL AS GParamFlags) AS GParamSpec PTR
DECLARE FUNCTION g_param_spec_flags(BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS GType, BYVAL AS guint, BYVAL AS GParamFlags) AS GParamSpec PTR
DECLARE FUNCTION g_param_spec_float(BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS gfloat, BYVAL AS gfloat, BYVAL AS gfloat, BYVAL AS GParamFlags) AS GParamSpec PTR
DECLARE FUNCTION g_param_spec_gtype(BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS GType, BYVAL AS GParamFlags) AS GParamSpec PTR
DECLARE FUNCTION g_param_spec_int(BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS gint, BYVAL AS gint, BYVAL AS gint, BYVAL AS GParamFlags) AS GParamSpec PTR
DECLARE FUNCTION g_param_spec_int64(BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS gint64, BYVAL AS gint64, BYVAL AS gint64, BYVAL AS GParamFlags) AS GParamSpec PTR
DECLARE FUNCTION g_param_spec_long(BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS glong, BYVAL AS glong, BYVAL AS glong, BYVAL AS GParamFlags) AS GParamSpec PTR
DECLARE FUNCTION g_param_spec_object(BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS GType, BYVAL AS GParamFlags) AS GParamSpec PTR
DECLARE FUNCTION g_param_spec_override(BYVAL AS const gchar PTR, BYVAL AS GParamSpec PTR) AS GParamSpec PTR
DECLARE FUNCTION g_param_spec_param(BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS GType, BYVAL AS GParamFlags) AS GParamSpec PTR
DECLARE FUNCTION g_param_spec_pointer(BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS GParamFlags) AS GParamSpec PTR
DECLARE FUNCTION g_param_spec_string(BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS GParamFlags) AS GParamSpec PTR
DECLARE FUNCTION g_param_spec_uchar(BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS guint8, BYVAL AS guint8, BYVAL AS guint8, BYVAL AS GParamFlags) AS GParamSpec PTR
DECLARE FUNCTION g_param_spec_uint(BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS guint, BYVAL AS guint, BYVAL AS guint, BYVAL AS GParamFlags) AS GParamSpec PTR
DECLARE FUNCTION g_param_spec_uint64(BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS guint64, BYVAL AS guint64, BYVAL AS guint64, BYVAL AS GParamFlags) AS GParamSpec PTR
DECLARE FUNCTION g_param_spec_ulong(BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS gulong, BYVAL AS gulong, BYVAL AS gulong, BYVAL AS GParamFlags) AS GParamSpec PTR
DECLARE FUNCTION g_param_spec_unichar(BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS gunichar /'?'/, BYVAL AS GParamFlags) AS GParamSpec PTR
DECLARE FUNCTION g_param_spec_value_array(BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS GParamSpec PTR, BYVAL AS GParamFlags) AS GParamSpec PTR
DECLARE FUNCTION g_param_spec_variant(BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS const GVariantType PTR, BYVAL AS GVariant PTR, BYVAL AS GParamFlags) AS GParamSpec PTR
DECLARE FUNCTION g_param_type_register_static(BYVAL AS const gchar PTR, BYVAL AS const GParamSpecTypeInfo PTR) AS GType
DECLARE FUNCTION g_param_value_convert(BYVAL AS GParamSpec PTR, BYVAL AS const GValue PTR, BYVAL AS GValue PTR, BYVAL AS gboolean) AS gboolean
DECLARE FUNCTION g_param_value_defaults(BYVAL AS GParamSpec PTR, BYVAL AS const GValue PTR) AS gboolean
DECLARE SUB g_param_value_set_default(BYVAL AS GParamSpec PTR, BYVAL AS GValue PTR)
DECLARE FUNCTION g_param_value_validate(BYVAL AS GParamSpec PTR, BYVAL AS GValue PTR) AS gboolean
DECLARE FUNCTION g_param_values_cmp(BYVAL AS GParamSpec PTR, BYVAL AS const GValue PTR, BYVAL AS const GValue PTR) AS gint
DECLARE FUNCTION g_pointer_type_register_static(BYVAL AS const gchar PTR) AS GType
DECLARE FUNCTION g_signal_accumulator_first_wins(BYVAL AS GSignalInvocationHint PTR, BYVAL AS GValue PTR, BYVAL AS const GValue PTR, BYVAL AS gpointer) AS gboolean
DECLARE FUNCTION g_signal_accumulator_true_handled(BYVAL AS GSignalInvocationHint PTR, BYVAL AS GValue PTR, BYVAL AS const GValue PTR, BYVAL AS gpointer) AS gboolean
DECLARE FUNCTION g_signal_add_emission_hook(BYVAL AS guint, BYVAL AS GQuark, BYVAL AS GSignalEmissionHook, BYVAL AS gpointer, BYVAL AS GDestroyNotify) AS gulong
DECLARE SUB g_signal_chain_from_overridden(BYVAL AS const GValue PTR, BYVAL AS GValue PTR)
DECLARE SUB g_signal_chain_from_overridden_handler(BYVAL AS gpointer, ...)
DECLARE FUNCTION g_signal_connect_closure(BYVAL AS gpointer, BYVAL AS const gchar PTR, BYVAL AS GClosure PTR, BYVAL AS gboolean) AS gulong
DECLARE FUNCTION g_signal_connect_closure_by_id(BYVAL AS gpointer, BYVAL AS guint, BYVAL AS GQuark, BYVAL AS GClosure PTR, BYVAL AS gboolean) AS gulong
DECLARE FUNCTION g_signal_connect_data(BYVAL AS gpointer, BYVAL AS const gchar PTR, BYVAL AS GCallback, BYVAL AS gpointer, BYVAL AS GClosureNotify, BYVAL AS GConnectFlags) AS gulong
DECLARE FUNCTION g_signal_connect_object(BYVAL AS gpointer, BYVAL AS const gchar PTR, BYVAL AS GCallback, BYVAL AS gpointer, BYVAL AS GConnectFlags) AS gulong
DECLARE SUB g_signal_emit(BYVAL AS gpointer, BYVAL AS guint, BYVAL AS GQuark, ...)
DECLARE SUB g_signal_emit_by_name(BYVAL AS gpointer, BYVAL AS const gchar PTR, ...)
DECLARE SUB g_signal_emit_valist(BYVAL AS gpointer, BYVAL AS guint, BYVAL AS GQuark, BYVAL AS va_list)
DECLARE SUB g_signal_emitv(BYVAL AS const GValue PTR, BYVAL AS guint, BYVAL AS GQuark, BYVAL AS GValue PTR)
DECLARE FUNCTION g_signal_get_invocation_hint(BYVAL AS gpointer) AS GSignalInvocationHint PTR
DECLARE SUB g_signal_handler_block(BYVAL AS gpointer, BYVAL AS gulong)
DECLARE SUB g_signal_handler_disconnect(BYVAL AS gpointer, BYVAL AS gulong)
DECLARE FUNCTION g_signal_handler_find(BYVAL AS gpointer, BYVAL AS GSignalMatchType, BYVAL AS guint, BYVAL AS GQuark, BYVAL AS GClosure PTR, BYVAL AS gpointer, BYVAL AS gpointer) AS gulong
DECLARE FUNCTION g_signal_handler_is_connected(BYVAL AS gpointer, BYVAL AS gulong) AS gboolean
DECLARE SUB g_signal_handler_unblock(BYVAL AS gpointer, BYVAL AS gulong)
DECLARE FUNCTION g_signal_handlers_block_matched(BYVAL AS gpointer, BYVAL AS GSignalMatchType, BYVAL AS guint, BYVAL AS GQuark, BYVAL AS GClosure PTR, BYVAL AS gpointer, BYVAL AS gpointer) AS guint
DECLARE SUB g_signal_handlers_destroy(BYVAL AS gpointer)
DECLARE FUNCTION g_signal_handlers_disconnect_matched(BYVAL AS gpointer, BYVAL AS GSignalMatchType, BYVAL AS guint, BYVAL AS GQuark, BYVAL AS GClosure PTR, BYVAL AS gpointer, BYVAL AS gpointer) AS guint
DECLARE FUNCTION g_signal_handlers_unblock_matched(BYVAL AS gpointer, BYVAL AS GSignalMatchType, BYVAL AS guint, BYVAL AS GQuark, BYVAL AS GClosure PTR, BYVAL AS gpointer, BYVAL AS gpointer) AS guint
DECLARE FUNCTION g_signal_has_handler_pending(BYVAL AS gpointer, BYVAL AS guint, BYVAL AS GQuark, BYVAL AS gboolean) AS gboolean
DECLARE FUNCTION g_signal_list_ids(BYVAL AS GType, BYVAL AS guint PTR) AS guint PTR
DECLARE FUNCTION g_signal_lookup(BYVAL AS const gchar PTR, BYVAL AS GType) AS guint
DECLARE FUNCTION g_signal_name(BYVAL AS guint) AS const gchar PTR
DECLARE FUNCTION g_signal_new(BYVAL AS const gchar PTR, BYVAL AS GType, BYVAL AS GSignalFlags, BYVAL AS guint, BYVAL AS GSignalAccumulator, BYVAL AS gpointer, BYVAL AS GSignalCMarshaller, BYVAL AS GType, BYVAL AS guint, ...) AS guint
DECLARE FUNCTION g_signal_new_class_handler(BYVAL AS const gchar PTR, BYVAL AS GType, BYVAL AS GSignalFlags, BYVAL AS GCallback, BYVAL AS GSignalAccumulator, BYVAL AS gpointer, BYVAL AS GSignalCMarshaller, BYVAL AS GType, BYVAL AS guint, ...) AS guint
DECLARE FUNCTION g_signal_new_valist(BYVAL AS const gchar PTR, BYVAL AS GType, BYVAL AS GSignalFlags, BYVAL AS GClosure PTR, BYVAL AS GSignalAccumulator, BYVAL AS gpointer, BYVAL AS GSignalCMarshaller, BYVAL AS GType, BYVAL AS guint, BYVAL AS va_list) AS guint
DECLARE FUNCTION g_signal_newv(BYVAL AS const gchar PTR, BYVAL AS GType, BYVAL AS GSignalFlags, BYVAL AS GClosure PTR, BYVAL AS GSignalAccumulator, BYVAL AS gpointer, BYVAL AS GSignalCMarshaller, BYVAL AS GType, BYVAL AS guint, BYVAL AS GType PTR) AS guint
DECLARE SUB g_signal_override_class_closure(BYVAL AS guint, BYVAL AS GType, BYVAL AS GClosure PTR)
DECLARE SUB g_signal_override_class_handler(BYVAL AS const gchar PTR, BYVAL AS GType, BYVAL AS GCallback)
DECLARE FUNCTION g_signal_parse_name(BYVAL AS const gchar PTR, BYVAL AS GType, BYVAL AS guint PTR, BYVAL AS GQuark PTR, BYVAL AS gboolean) AS gboolean
DECLARE SUB g_signal_query(BYVAL AS guint, BYVAL AS GSignalQuery PTR)
DECLARE SUB g_signal_remove_emission_hook(BYVAL AS guint, BYVAL AS gulong)
DECLARE SUB g_signal_set_va_marshaller(BYVAL AS guint, BYVAL AS GType, BYVAL AS GSignalCVaMarshaller)
DECLARE SUB g_signal_stop_emission(BYVAL AS gpointer, BYVAL AS guint, BYVAL AS GQuark)
DECLARE SUB g_signal_stop_emission_by_name(BYVAL AS gpointer, BYVAL AS const gchar PTR)
DECLARE FUNCTION g_signal_type_cclosure_new(BYVAL AS GType, BYVAL AS guint) AS GClosure PTR
DECLARE SUB g_source_set_closure(BYVAL AS GSource PTR, BYVAL AS GClosure PTR)
DECLARE SUB g_source_set_dummy_callback(BYVAL AS GSource PTR)
DECLARE FUNCTION g_strdup_value_contents(BYVAL AS const GValue PTR) AS gchar PTR
DECLARE SUB g_type_add_class_cache_func(BYVAL AS gpointer, BYVAL AS GTypeClassCacheFunc)
DECLARE SUB g_type_add_class_private(BYVAL AS GType, BYVAL AS gsize)
DECLARE FUNCTION g_type_add_instance_private(BYVAL AS GType, BYVAL AS gsize) AS gint
DECLARE SUB g_type_add_interface_check(BYVAL AS gpointer, BYVAL AS GTypeInterfaceCheckFunc)
DECLARE SUB g_type_add_interface_dynamic(BYVAL AS GType, BYVAL AS GType, BYVAL AS GTypePlugin PTR)
DECLARE SUB g_type_add_interface_static(BYVAL AS GType, BYVAL AS GType, BYVAL AS const GInterfaceInfo PTR)
DECLARE FUNCTION g_type_check_class_cast_ ALIAS "g_type_check_class_cast"(BYVAL AS GTypeClass PTR, BYVAL AS GType) AS GTypeClass PTR
DECLARE FUNCTION g_type_check_class_is_a(BYVAL AS GTypeClass PTR, BYVAL AS GType) AS gboolean
DECLARE FUNCTION g_type_check_instance_ ALIAS "g_type_check_instance"(BYVAL AS GTypeInstance PTR) AS gboolean
DECLARE FUNCTION g_type_check_instance_cast_ ALIAS "g_type_check_instance_cast"(BYVAL AS GTypeInstance PTR, BYVAL AS GType) AS GTypeInstance PTR
DECLARE FUNCTION g_type_check_instance_is_a(BYVAL AS GTypeInstance PTR, BYVAL AS GType) AS gboolean
DECLARE FUNCTION g_type_check_instance_is_fundamentally_a(BYVAL AS GTypeInstance PTR, BYVAL AS GType) AS gboolean
DECLARE FUNCTION g_type_check_is_value_type(BYVAL AS GType) AS gboolean
DECLARE FUNCTION g_type_check_value_ ALIAS "g_type_check_value"(BYVAL AS const GValue PTR) AS gboolean
DECLARE FUNCTION g_type_check_value_holds(BYVAL AS const GValue PTR, BYVAL AS GType) AS gboolean
DECLARE FUNCTION g_type_children(BYVAL AS GType, BYVAL AS guint PTR) AS GType PTR
DECLARE FUNCTION g_type_create_instance(BYVAL AS GType) AS GTypeInstance PTR
DECLARE FUNCTION g_type_default_interface_peek(BYVAL AS GType) AS gpointer
DECLARE FUNCTION g_type_default_interface_ref(BYVAL AS GType) AS gpointer
DECLARE SUB g_type_default_interface_unref(BYVAL AS gpointer)
DECLARE FUNCTION g_type_depth(BYVAL AS GType) AS guint
DECLARE SUB g_type_ensure(BYVAL AS GType)
DECLARE SUB g_type_free_instance(BYVAL AS GTypeInstance PTR)
DECLARE FUNCTION g_type_from_name(BYVAL AS const gchar PTR) AS GType
DECLARE FUNCTION g_type_fundamental_ ALIAS "g_type_fundamental"(BYVAL AS GType) AS GType
DECLARE FUNCTION g_type_fundamental_next() AS GType
DECLARE FUNCTION g_type_get_instance_count(BYVAL AS GType) AS gint /'int'/
DECLARE FUNCTION g_type_get_plugin(BYVAL AS GType) AS GTypePlugin PTR
DECLARE FUNCTION g_type_get_qdata(BYVAL AS GType, BYVAL AS GQuark) AS gpointer
DECLARE FUNCTION g_type_get_type_registration_serial() AS guint
DECLARE SUB g_type_init()
DECLARE SUB g_type_init_with_debug_flags(BYVAL AS GTypeDebugFlags)
DECLARE FUNCTION g_type_interfaces(BYVAL AS GType, BYVAL AS guint PTR) AS GType PTR
DECLARE FUNCTION g_type_is_a(BYVAL AS GType, BYVAL AS GType) AS gboolean
DECLARE FUNCTION g_type_name(BYVAL AS GType) AS const gchar PTR
DECLARE FUNCTION g_type_name_from_class(BYVAL AS GTypeClass PTR) AS const gchar PTR
DECLARE FUNCTION g_type_name_from_instance(BYVAL AS GTypeInstance PTR) AS const gchar PTR
DECLARE FUNCTION g_type_next_base(BYVAL AS GType, BYVAL AS GType) AS GType
DECLARE FUNCTION g_type_parent(BYVAL AS GType) AS GType
DECLARE FUNCTION g_type_qname(BYVAL AS GType) AS GQuark
DECLARE SUB g_type_query(BYVAL AS GType, BYVAL AS GTypeQuery PTR)
DECLARE FUNCTION g_type_register_dynamic(BYVAL AS GType, BYVAL AS const gchar PTR, BYVAL AS GTypePlugin PTR, BYVAL AS GTypeFlags) AS GType
DECLARE FUNCTION g_type_register_fundamental(BYVAL AS GType, BYVAL AS const gchar PTR, BYVAL AS const GTypeInfo PTR, BYVAL AS const GTypeFundamentalInfo PTR, BYVAL AS GTypeFlags) AS GType
DECLARE FUNCTION g_type_register_static(BYVAL AS GType, BYVAL AS const gchar PTR, BYVAL AS const GTypeInfo PTR, BYVAL AS GTypeFlags) AS GType
DECLARE FUNCTION g_type_register_static_simple(BYVAL AS GType, BYVAL AS const gchar PTR, BYVAL AS guint, BYVAL AS GClassInitFunc, BYVAL AS guint, BYVAL AS GInstanceInitFunc, BYVAL AS GTypeFlags) AS GType
DECLARE SUB g_type_remove_class_cache_func(BYVAL AS gpointer, BYVAL AS GTypeClassCacheFunc)
DECLARE SUB g_type_remove_interface_check(BYVAL AS gpointer, BYVAL AS GTypeInterfaceCheckFunc)
DECLARE SUB g_type_set_qdata(BYVAL AS GType, BYVAL AS GQuark, BYVAL AS gpointer)
DECLARE FUNCTION g_type_test_flags(BYVAL AS GType, BYVAL AS guint) AS gboolean
END EXTERN

