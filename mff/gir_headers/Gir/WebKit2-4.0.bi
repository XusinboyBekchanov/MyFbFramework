'            FreeBasic header file, auto-generated by
'                       ### girtobac ###
' LGPLv2.1 (C) 2013-2022 by Thomas{ doT ]Freiherr[ At ]gmx[ DoT }net
' Auto-translated from file /usr/share/gir-1.0/WebKit2-4.0.gir
#INCLUDE ONCE "_GirToBac-0.0.bi"

  TYPE AS _JSGlobalContextRef JSGlobalContextRef
  TYPE AS _JSValueRef JSValueRef

' Repository version 1.2
#INCLUDE ONCE "GObject-2.0.bi"
#INCLUDE ONCE "Gtk-3.0.bi"
#INCLUDE ONCE "JavaScriptCore-4.0.bi"
#INCLUDE ONCE "Soup-2.4.bi"
TYPE AS _WebKitApplicationInfo WebKitApplicationInfo
TYPE AS _WebKitAuthenticationRequest WebKitAuthenticationRequest
TYPE AS _WebKitAuthenticationRequestClass WebKitAuthenticationRequestClass
TYPE AS _WebKitAuthenticationRequestPrivate WebKitAuthenticationRequestPrivate
TYPE AS LONG WebKitAuthenticationScheme
ENUM
  WEBKIT_AUTHENTICATION_SCHEME_DEFAULT = 1
  WEBKIT_AUTHENTICATION_SCHEME_HTTP_BASIC = 2
  WEBKIT_AUTHENTICATION_SCHEME_HTTP_DIGEST = 3
  WEBKIT_AUTHENTICATION_SCHEME_HTML_FORM = 4
  WEBKIT_AUTHENTICATION_SCHEME_NTLM = 5
  WEBKIT_AUTHENTICATION_SCHEME_NEGOTIATE = 6
  WEBKIT_AUTHENTICATION_SCHEME_CLIENT_CERTIFICATE_REQUESTED = 7
  WEBKIT_AUTHENTICATION_SCHEME_SERVER_TRUST_EVALUATION_REQUESTED = 8
  WEBKIT_AUTHENTICATION_SCHEME_UNKNOWN = 100
END ENUM
TYPE AS LONG WebKitAutomationBrowsingContextPresentation
ENUM
  WEBKIT_AUTOMATION_BROWSING_CONTEXT_PRESENTATION_WINDOW = 0
  WEBKIT_AUTOMATION_BROWSING_CONTEXT_PRESENTATION_TAB = 1
END ENUM
TYPE AS _WebKitAutomationSession WebKitAutomationSession
TYPE AS _WebKitAutomationSessionClass WebKitAutomationSessionClass
TYPE AS _WebKitAutomationSessionPrivate WebKitAutomationSessionPrivate
TYPE AS _WebKitBackForwardList WebKitBackForwardList
TYPE AS _WebKitBackForwardListClass WebKitBackForwardListClass
TYPE AS _WebKitBackForwardListItem WebKitBackForwardListItem
TYPE AS _WebKitBackForwardListItemClass WebKitBackForwardListItemClass
TYPE AS _WebKitBackForwardListItemPrivate WebKitBackForwardListItemPrivate
TYPE AS _WebKitBackForwardListPrivate WebKitBackForwardListPrivate
TYPE AS LONG WebKitCacheModel
ENUM
  WEBKIT_CACHE_MODEL_DOCUMENT_VIEWER = 0
  WEBKIT_CACHE_MODEL_WEB_BROWSER = 1
  WEBKIT_CACHE_MODEL_DOCUMENT_BROWSER = 2
END ENUM
TYPE AS _WebKitColorChooserRequest WebKitColorChooserRequest
TYPE AS _WebKitColorChooserRequestClass WebKitColorChooserRequestClass
TYPE AS _WebKitColorChooserRequestPrivate WebKitColorChooserRequestPrivate
TYPE AS _WebKitContextMenu WebKitContextMenu
TYPE AS LONG WebKitContextMenuAction
ENUM
  WEBKIT_CONTEXT_MENU_ACTION_NO_ACTION = 0
  WEBKIT_CONTEXT_MENU_ACTION_OPEN_LINK = 1
  WEBKIT_CONTEXT_MENU_ACTION_OPEN_LINK_IN_NEW_WINDOW = 2
  WEBKIT_CONTEXT_MENU_ACTION_DOWNLOAD_LINK_TO_DISK = 3
  WEBKIT_CONTEXT_MENU_ACTION_COPY_LINK_TO_CLIPBOARD = 4
  WEBKIT_CONTEXT_MENU_ACTION_OPEN_IMAGE_IN_NEW_WINDOW = 5
  WEBKIT_CONTEXT_MENU_ACTION_DOWNLOAD_IMAGE_TO_DISK = 6
  WEBKIT_CONTEXT_MENU_ACTION_COPY_IMAGE_TO_CLIPBOARD = 7
  WEBKIT_CONTEXT_MENU_ACTION_COPY_IMAGE_URL_TO_CLIPBOARD = 8
  WEBKIT_CONTEXT_MENU_ACTION_OPEN_FRAME_IN_NEW_WINDOW = 9
  WEBKIT_CONTEXT_MENU_ACTION_GO_BACK = 10
  WEBKIT_CONTEXT_MENU_ACTION_GO_FORWARD = 11
  WEBKIT_CONTEXT_MENU_ACTION_STOP = 12
  WEBKIT_CONTEXT_MENU_ACTION_RELOAD = 13
  WEBKIT_CONTEXT_MENU_ACTION_COPY = 14
  WEBKIT_CONTEXT_MENU_ACTION_CUT = 15
  WEBKIT_CONTEXT_MENU_ACTION_PASTE = 16
  WEBKIT_CONTEXT_MENU_ACTION_DELETE = 17
  WEBKIT_CONTEXT_MENU_ACTION_SELECT_ALL = 18
  WEBKIT_CONTEXT_MENU_ACTION_INPUT_METHODS = 19
  WEBKIT_CONTEXT_MENU_ACTION_UNICODE = 20
  WEBKIT_CONTEXT_MENU_ACTION_SPELLING_GUESS = 21
  WEBKIT_CONTEXT_MENU_ACTION_NO_GUESSES_FOUND = 22
  WEBKIT_CONTEXT_MENU_ACTION_IGNORE_SPELLING = 23
  WEBKIT_CONTEXT_MENU_ACTION_LEARN_SPELLING = 24
  WEBKIT_CONTEXT_MENU_ACTION_IGNORE_GRAMMAR = 25
  WEBKIT_CONTEXT_MENU_ACTION_FONT_MENU = 26
  WEBKIT_CONTEXT_MENU_ACTION_BOLD = 27
  WEBKIT_CONTEXT_MENU_ACTION_ITALIC = 28
  WEBKIT_CONTEXT_MENU_ACTION_UNDERLINE = 29
  WEBKIT_CONTEXT_MENU_ACTION_OUTLINE = 30
  WEBKIT_CONTEXT_MENU_ACTION_INSPECT_ELEMENT = 31
  WEBKIT_CONTEXT_MENU_ACTION_OPEN_VIDEO_IN_NEW_WINDOW = 32
  WEBKIT_CONTEXT_MENU_ACTION_OPEN_AUDIO_IN_NEW_WINDOW = 33
  WEBKIT_CONTEXT_MENU_ACTION_COPY_VIDEO_LINK_TO_CLIPBOARD = 34
  WEBKIT_CONTEXT_MENU_ACTION_COPY_AUDIO_LINK_TO_CLIPBOARD = 35
  WEBKIT_CONTEXT_MENU_ACTION_TOGGLE_MEDIA_CONTROLS = 36
  WEBKIT_CONTEXT_MENU_ACTION_TOGGLE_MEDIA_LOOP = 37
  WEBKIT_CONTEXT_MENU_ACTION_ENTER_VIDEO_FULLSCREEN = 38
  WEBKIT_CONTEXT_MENU_ACTION_MEDIA_PLAY = 39
  WEBKIT_CONTEXT_MENU_ACTION_MEDIA_PAUSE = 40
  WEBKIT_CONTEXT_MENU_ACTION_MEDIA_MUTE = 41
  WEBKIT_CONTEXT_MENU_ACTION_DOWNLOAD_VIDEO_TO_DISK = 42
  WEBKIT_CONTEXT_MENU_ACTION_DOWNLOAD_AUDIO_TO_DISK = 43
  WEBKIT_CONTEXT_MENU_ACTION_INSERT_EMOJI = 44
  WEBKIT_CONTEXT_MENU_ACTION_CUSTOM = 10000
END ENUM
TYPE AS _WebKitContextMenuClass WebKitContextMenuClass
TYPE AS _WebKitContextMenuItem WebKitContextMenuItem
TYPE AS _WebKitContextMenuItemClass WebKitContextMenuItemClass
TYPE AS _WebKitContextMenuItemPrivate WebKitContextMenuItemPrivate
TYPE AS _WebKitContextMenuPrivate WebKitContextMenuPrivate
TYPE AS LONG WebKitCookieAcceptPolicy
ENUM
  WEBKIT_COOKIE_POLICY_ACCEPT_ALWAYS = 0
  WEBKIT_COOKIE_POLICY_ACCEPT_NEVER = 1
  WEBKIT_COOKIE_POLICY_ACCEPT_NO_THIRD_PARTY = 2
END ENUM
TYPE AS _WebKitCookieManager WebKitCookieManager
TYPE AS _WebKitCookieManagerClass WebKitCookieManagerClass
TYPE AS _WebKitCookieManagerPrivate WebKitCookieManagerPrivate
TYPE AS LONG WebKitCookiePersistentStorage
ENUM
  WEBKIT_COOKIE_PERSISTENT_STORAGE_TEXT = 0
  WEBKIT_COOKIE_PERSISTENT_STORAGE_SQLITE = 1
END ENUM
TYPE AS _WebKitCredential WebKitCredential
TYPE AS LONG WebKitCredentialPersistence
ENUM
  WEBKIT_CREDENTIAL_PERSISTENCE_NONE = 0
  WEBKIT_CREDENTIAL_PERSISTENCE_FOR_SESSION = 1
  WEBKIT_CREDENTIAL_PERSISTENCE_PERMANENT = 2
END ENUM
TYPE AS _WebKitDeviceInfoPermissionRequest WebKitDeviceInfoPermissionRequest
TYPE AS _WebKitDeviceInfoPermissionRequestClass WebKitDeviceInfoPermissionRequestClass
TYPE AS _WebKitDeviceInfoPermissionRequestPrivate WebKitDeviceInfoPermissionRequestPrivate
TYPE AS _WebKitDownload WebKitDownload
TYPE AS _WebKitDownloadClass WebKitDownloadClass
TYPE AS LONG WebKitDownloadError
ENUM
  WEBKIT_DOWNLOAD_ERROR_NETWORK = 499
  WEBKIT_DOWNLOAD_ERROR_CANCELLED_BY_USER = 400
  WEBKIT_DOWNLOAD_ERROR_DESTINATION = 401
END ENUM
TYPE AS _WebKitDownloadPrivate WebKitDownloadPrivate
#DEFINE WEBKIT_EDITING_COMMAND_COPY @!"Copy"
#DEFINE WEBKIT_EDITING_COMMAND_CREATE_LINK @!"CreateLink"
#DEFINE WEBKIT_EDITING_COMMAND_CUT @!"Cut"
#DEFINE WEBKIT_EDITING_COMMAND_INSERT_IMAGE @!"InsertImage"
#DEFINE WEBKIT_EDITING_COMMAND_PASTE @!"Paste"
#DEFINE WEBKIT_EDITING_COMMAND_REDO @!"Redo"
#DEFINE WEBKIT_EDITING_COMMAND_SELECT_ALL @!"SelectAll"
#DEFINE WEBKIT_EDITING_COMMAND_UNDO @!"Undo"
TYPE AS _WebKitEditorState WebKitEditorState
TYPE AS _WebKitEditorStateClass WebKitEditorStateClass
TYPE AS _WebKitEditorStatePrivate WebKitEditorStatePrivate
TYPE AS LONG WebKitEditorTypingAttributes
ENUM
  WEBKIT_EDITOR_TYPING_ATTRIBUTE_NONE = 2
  WEBKIT_EDITOR_TYPING_ATTRIBUTE_BOLD = 4
  WEBKIT_EDITOR_TYPING_ATTRIBUTE_ITALIC = 8
  WEBKIT_EDITOR_TYPING_ATTRIBUTE_UNDERLINE = 16
  WEBKIT_EDITOR_TYPING_ATTRIBUTE_STRIKETHROUGH = 32
END ENUM
TYPE AS _WebKitFaviconDatabase WebKitFaviconDatabase
TYPE AS _WebKitFaviconDatabaseClass WebKitFaviconDatabaseClass
TYPE AS LONG WebKitFaviconDatabaseError
ENUM
  WEBKIT_FAVICON_DATABASE_ERROR_NOT_INITIALIZED = 0
  WEBKIT_FAVICON_DATABASE_ERROR_FAVICON_NOT_FOUND = 1
  WEBKIT_FAVICON_DATABASE_ERROR_FAVICON_UNKNOWN = 2
END ENUM
TYPE AS _WebKitFaviconDatabasePrivate WebKitFaviconDatabasePrivate
TYPE AS _WebKitFileChooserRequest WebKitFileChooserRequest
TYPE AS _WebKitFileChooserRequestClass WebKitFileChooserRequestClass
TYPE AS _WebKitFileChooserRequestPrivate WebKitFileChooserRequestPrivate
TYPE AS _WebKitFindController WebKitFindController
TYPE AS _WebKitFindControllerClass WebKitFindControllerClass
TYPE AS _WebKitFindControllerPrivate WebKitFindControllerPrivate
TYPE AS LONG WebKitFindOptions
ENUM
  WEBKIT_FIND_OPTIONS_NONE = 0
  WEBKIT_FIND_OPTIONS_CASE_INSENSITIVE = 1
  WEBKIT_FIND_OPTIONS_AT_WORD_STARTS = 2
  WEBKIT_FIND_OPTIONS_TREAT_MEDIAL_CAPITAL_AS_WORD_START = 4
  WEBKIT_FIND_OPTIONS_BACKWARDS = 8
  WEBKIT_FIND_OPTIONS_WRAP_AROUND = 16
END ENUM
TYPE AS _WebKitFormSubmissionRequest WebKitFormSubmissionRequest
TYPE AS _WebKitFormSubmissionRequestClass WebKitFormSubmissionRequestClass
TYPE AS _WebKitFormSubmissionRequestPrivate WebKitFormSubmissionRequestPrivate
TYPE AS _WebKitGeolocationManager WebKitGeolocationManager
TYPE AS _WebKitGeolocationManagerClass WebKitGeolocationManagerClass
TYPE AS _WebKitGeolocationManagerPrivate WebKitGeolocationManagerPrivate
TYPE AS _WebKitGeolocationPermissionRequest WebKitGeolocationPermissionRequest
TYPE AS _WebKitGeolocationPermissionRequestClass WebKitGeolocationPermissionRequestClass
TYPE AS _WebKitGeolocationPermissionRequestPrivate WebKitGeolocationPermissionRequestPrivate
TYPE AS _WebKitGeolocationPosition WebKitGeolocationPosition
TYPE AS LONG WebKitHardwareAccelerationPolicy
ENUM
  WEBKIT_HARDWARE_ACCELERATION_POLICY_ON_DEMAND = 0
  WEBKIT_HARDWARE_ACCELERATION_POLICY_ALWAYS = 1
  WEBKIT_HARDWARE_ACCELERATION_POLICY_NEVER = 2
END ENUM
TYPE AS _WebKitHitTestResult WebKitHitTestResult
TYPE AS _WebKitHitTestResultClass WebKitHitTestResultClass
TYPE AS LONG WebKitHitTestResultContext
ENUM
  WEBKIT_HIT_TEST_RESULT_CONTEXT_DOCUMENT = 2
  WEBKIT_HIT_TEST_RESULT_CONTEXT_LINK = 4
  WEBKIT_HIT_TEST_RESULT_CONTEXT_IMAGE = 8
  WEBKIT_HIT_TEST_RESULT_CONTEXT_MEDIA = 16
  WEBKIT_HIT_TEST_RESULT_CONTEXT_EDITABLE = 32
  WEBKIT_HIT_TEST_RESULT_CONTEXT_SCROLLBAR = 64
  WEBKIT_HIT_TEST_RESULT_CONTEXT_SELECTION = 128
END ENUM
TYPE AS _WebKitHitTestResultPrivate WebKitHitTestResultPrivate
TYPE AS LONG WebKitInputHints
ENUM
  WEBKIT_INPUT_HINT_NONE = 0
  WEBKIT_INPUT_HINT_SPELLCHECK = 1
  WEBKIT_INPUT_HINT_LOWERCASE = 2
  WEBKIT_INPUT_HINT_UPPERCASE_CHARS = 4
  WEBKIT_INPUT_HINT_UPPERCASE_WORDS = 8
  WEBKIT_INPUT_HINT_UPPERCASE_SENTENCES = 16
  WEBKIT_INPUT_HINT_INHIBIT_OSK = 32
END ENUM
TYPE AS _WebKitInputMethodContext WebKitInputMethodContext
TYPE AS _WebKitInputMethodContextClass WebKitInputMethodContextClass
TYPE AS _WebKitInputMethodContextPrivate WebKitInputMethodContextPrivate
TYPE AS _WebKitInputMethodUnderline WebKitInputMethodUnderline
TYPE AS LONG WebKitInputPurpose
ENUM
  WEBKIT_INPUT_PURPOSE_FREE_FORM = 0
  WEBKIT_INPUT_PURPOSE_DIGITS = 1
  WEBKIT_INPUT_PURPOSE_NUMBER = 2
  WEBKIT_INPUT_PURPOSE_PHONE = 3
  WEBKIT_INPUT_PURPOSE_URL = 4
  WEBKIT_INPUT_PURPOSE_EMAIL = 5
  WEBKIT_INPUT_PURPOSE_PASSWORD = 6
END ENUM
TYPE AS LONG WebKitInsecureContentEvent
ENUM
  WEBKIT_INSECURE_CONTENT_RUN = 0
  WEBKIT_INSECURE_CONTENT_DISPLAYED = 1
END ENUM
TYPE AS _WebKitInstallMissingMediaPluginsPermissionRequest WebKitInstallMissingMediaPluginsPermissionRequest
TYPE AS _WebKitInstallMissingMediaPluginsPermissionRequestClass WebKitInstallMissingMediaPluginsPermissionRequestClass
TYPE AS _WebKitInstallMissingMediaPluginsPermissionRequestPrivate WebKitInstallMissingMediaPluginsPermissionRequestPrivate
TYPE AS LONG WebKitJavascriptError
ENUM
  WEBKIT_JAVASCRIPT_ERROR_SCRIPT_FAILED = 699
END ENUM
TYPE AS _WebKitJavascriptResult WebKitJavascriptResult
TYPE AS LONG WebKitLoadEvent
ENUM
  WEBKIT_LOAD_STARTED = 0
  WEBKIT_LOAD_REDIRECTED = 1
  WEBKIT_LOAD_COMMITTED = 2
  WEBKIT_LOAD_FINISHED = 3
END ENUM
#DEFINE WEBKIT_MAJOR_VERSION 2
#DEFINE WEBKIT_MICRO_VERSION 2
#DEFINE WEBKIT_MINOR_VERSION 28
TYPE AS _WebKitMimeInfo WebKitMimeInfo
TYPE AS _WebKitNavigationAction WebKitNavigationAction
TYPE AS _WebKitNavigationPolicyDecision WebKitNavigationPolicyDecision
TYPE AS _WebKitNavigationPolicyDecisionClass WebKitNavigationPolicyDecisionClass
TYPE AS _WebKitNavigationPolicyDecisionPrivate WebKitNavigationPolicyDecisionPrivate
TYPE AS LONG WebKitNavigationType
ENUM
  WEBKIT_NAVIGATION_TYPE_LINK_CLICKED = 0
  WEBKIT_NAVIGATION_TYPE_FORM_SUBMITTED = 1
  WEBKIT_NAVIGATION_TYPE_BACK_FORWARD = 2
  WEBKIT_NAVIGATION_TYPE_RELOAD = 3
  WEBKIT_NAVIGATION_TYPE_FORM_RESUBMITTED = 4
  WEBKIT_NAVIGATION_TYPE_OTHER = 5
END ENUM
TYPE AS LONG WebKitNetworkError
ENUM
  WEBKIT_NETWORK_ERROR_FAILED = 399
  WEBKIT_NETWORK_ERROR_TRANSPORT = 300
  WEBKIT_NETWORK_ERROR_UNKNOWN_PROTOCOL = 301
  WEBKIT_NETWORK_ERROR_CANCELLED = 302
  WEBKIT_NETWORK_ERROR_FILE_DOES_NOT_EXIST = 303
END ENUM
TYPE AS LONG WebKitNetworkProxyMode
ENUM
  WEBKIT_NETWORK_PROXY_MODE_DEFAULT = 0
  WEBKIT_NETWORK_PROXY_MODE_NO_PROXY = 1
  WEBKIT_NETWORK_PROXY_MODE_CUSTOM = 2
END ENUM
TYPE AS _WebKitNetworkProxySettings WebKitNetworkProxySettings
TYPE AS _WebKitNotification WebKitNotification
TYPE AS _WebKitNotificationClass WebKitNotificationClass
TYPE AS _WebKitNotificationPermissionRequest WebKitNotificationPermissionRequest
TYPE AS _WebKitNotificationPermissionRequestClass WebKitNotificationPermissionRequestClass
TYPE AS _WebKitNotificationPermissionRequestPrivate WebKitNotificationPermissionRequestPrivate
TYPE AS _WebKitNotificationPrivate WebKitNotificationPrivate
TYPE AS _WebKitOptionMenu WebKitOptionMenu
TYPE AS _WebKitOptionMenuClass WebKitOptionMenuClass
TYPE AS _WebKitOptionMenuItem WebKitOptionMenuItem
TYPE AS _WebKitOptionMenuPrivate WebKitOptionMenuPrivate
TYPE AS _WebKitPermissionRequest WebKitPermissionRequest
TYPE AS _WebKitPermissionRequestIface WebKitPermissionRequestIface
TYPE AS _WebKitPlugin WebKitPlugin
TYPE AS _WebKitPluginClass WebKitPluginClass
TYPE AS LONG WebKitPluginError
ENUM
  WEBKIT_PLUGIN_ERROR_FAILED = 299
  WEBKIT_PLUGIN_ERROR_CANNOT_FIND_PLUGIN = 200
  WEBKIT_PLUGIN_ERROR_CANNOT_LOAD_PLUGIN = 201
  WEBKIT_PLUGIN_ERROR_JAVA_UNAVAILABLE = 202
  WEBKIT_PLUGIN_ERROR_CONNECTION_CANCELLED = 203
  WEBKIT_PLUGIN_ERROR_WILL_HANDLE_LOAD = 204
END ENUM
TYPE AS _WebKitPluginPrivate WebKitPluginPrivate
TYPE AS _WebKitPointerLockPermissionRequest WebKitPointerLockPermissionRequest
TYPE AS _WebKitPointerLockPermissionRequestClass WebKitPointerLockPermissionRequestClass
TYPE AS _WebKitPointerLockPermissionRequestPrivate WebKitPointerLockPermissionRequestPrivate
TYPE AS _WebKitPolicyDecision WebKitPolicyDecision
TYPE AS _WebKitPolicyDecisionClass WebKitPolicyDecisionClass
TYPE AS _WebKitPolicyDecisionPrivate WebKitPolicyDecisionPrivate
TYPE AS LONG WebKitPolicyDecisionType
ENUM
  WEBKIT_POLICY_DECISION_TYPE_NAVIGATION_ACTION = 0
  WEBKIT_POLICY_DECISION_TYPE_NEW_WINDOW_ACTION = 1
  WEBKIT_POLICY_DECISION_TYPE_RESPONSE = 2
END ENUM
TYPE AS LONG WebKitPolicyError
ENUM
  WEBKIT_POLICY_ERROR_FAILED = 199
  WEBKIT_POLICY_ERROR_CANNOT_SHOW_MIME_TYPE = 100
  WEBKIT_POLICY_ERROR_CANNOT_SHOW_URI = 101
  WEBKIT_POLICY_ERROR_FRAME_LOAD_INTERRUPTED_BY_POLICY_CHANGE = 102
  WEBKIT_POLICY_ERROR_CANNOT_USE_RESTRICTED_PORT = 103
END ENUM
TYPE AS _WebKitPrintCustomWidget WebKitPrintCustomWidget
TYPE AS _WebKitPrintCustomWidgetClass WebKitPrintCustomWidgetClass
TYPE AS _WebKitPrintCustomWidgetPrivate WebKitPrintCustomWidgetPrivate
TYPE AS LONG WebKitPrintError
ENUM
  WEBKIT_PRINT_ERROR_GENERAL = 599
  WEBKIT_PRINT_ERROR_PRINTER_NOT_FOUND = 500
  WEBKIT_PRINT_ERROR_INVALID_PAGE_RANGE = 501
END ENUM
TYPE AS _WebKitPrintOperation WebKitPrintOperation
TYPE AS _WebKitPrintOperationClass WebKitPrintOperationClass
TYPE AS _WebKitPrintOperationPrivate WebKitPrintOperationPrivate
TYPE AS LONG WebKitPrintOperationResponse
ENUM
  WEBKIT_PRINT_OPERATION_RESPONSE_PRINT = 0
  WEBKIT_PRINT_OPERATION_RESPONSE_CANCEL = 1
END ENUM
TYPE AS LONG WebKitProcessModel
ENUM
  WEBKIT_PROCESS_MODEL_SHARED_SECONDARY_PROCESS = 0
  WEBKIT_PROCESS_MODEL_MULTIPLE_SECONDARY_PROCESSES = 1
END ENUM
TYPE AS _WebKitResponsePolicyDecision WebKitResponsePolicyDecision
TYPE AS _WebKitResponsePolicyDecisionClass WebKitResponsePolicyDecisionClass
TYPE AS _WebKitResponsePolicyDecisionPrivate WebKitResponsePolicyDecisionPrivate
TYPE AS LONG WebKitSaveMode
ENUM
  WEBKIT_SAVE_MODE_MHTML = 0
END ENUM
TYPE AS _WebKitScriptDialog WebKitScriptDialog
TYPE AS LONG WebKitScriptDialogType
ENUM
  WEBKIT_SCRIPT_DIALOG_ALERT = 0
  WEBKIT_SCRIPT_DIALOG_CONFIRM = 1
  WEBKIT_SCRIPT_DIALOG_PROMPT = 2
  WEBKIT_SCRIPT_DIALOG_BEFORE_UNLOAD_CONFIRM = 3
END ENUM
TYPE AS _WebKitSecurityManager WebKitSecurityManager
TYPE AS _WebKitSecurityManagerClass WebKitSecurityManagerClass
TYPE AS _WebKitSecurityManagerPrivate WebKitSecurityManagerPrivate
TYPE AS _WebKitSecurityOrigin WebKitSecurityOrigin
TYPE AS _WebKitSettings WebKitSettings
TYPE AS _WebKitSettingsClass WebKitSettingsClass
TYPE AS _WebKitSettingsPrivate WebKitSettingsPrivate
TYPE AS LONG WebKitSnapshotError
ENUM
  WEBKIT_SNAPSHOT_ERROR_FAILED_TO_CREATE = 799
END ENUM
TYPE AS LONG WebKitSnapshotOptions
ENUM
  WEBKIT_SNAPSHOT_OPTIONS_NONE = 0
  WEBKIT_SNAPSHOT_OPTIONS_INCLUDE_SELECTION_HIGHLIGHTING = 1
  WEBKIT_SNAPSHOT_OPTIONS_TRANSPARENT_BACKGROUND = 2
END ENUM
TYPE AS LONG WebKitSnapshotRegion
ENUM
  WEBKIT_SNAPSHOT_REGION_VISIBLE = 0
  WEBKIT_SNAPSHOT_REGION_FULL_DOCUMENT = 1
END ENUM
TYPE AS LONG WebKitTLSErrorsPolicy
ENUM
  WEBKIT_TLS_ERRORS_POLICY_IGNORE = 0
  WEBKIT_TLS_ERRORS_POLICY_FAIL = 1
END ENUM
TYPE AS _WebKitURIRequest WebKitURIRequest
TYPE AS _WebKitURIRequestClass WebKitURIRequestClass
TYPE AS _WebKitURIRequestPrivate WebKitURIRequestPrivate
TYPE AS _WebKitURIResponse WebKitURIResponse
TYPE AS _WebKitURIResponseClass WebKitURIResponseClass
TYPE AS _WebKitURIResponsePrivate WebKitURIResponsePrivate
TYPE AS _WebKitURISchemeRequest WebKitURISchemeRequest
TYPE AS _WebKitURISchemeRequestClass WebKitURISchemeRequestClass
TYPE AS _WebKitURISchemeRequestPrivate WebKitURISchemeRequestPrivate
TYPE AS _WebKitUserContentFilter WebKitUserContentFilter
TYPE AS LONG WebKitUserContentFilterError
ENUM
  WEBKIT_USER_CONTENT_FILTER_ERROR_INVALID_SOURCE = 0
  WEBKIT_USER_CONTENT_FILTER_ERROR_NOT_FOUND = 1
END ENUM
TYPE AS _WebKitUserContentFilterStore WebKitUserContentFilterStore
TYPE AS _WebKitUserContentFilterStoreClass WebKitUserContentFilterStoreClass
TYPE AS _WebKitUserContentFilterStorePrivate WebKitUserContentFilterStorePrivate
TYPE AS LONG WebKitUserContentInjectedFrames
ENUM
  WEBKIT_USER_CONTENT_INJECT_ALL_FRAMES = 0
  WEBKIT_USER_CONTENT_INJECT_TOP_FRAME = 1
END ENUM
TYPE AS _WebKitUserContentManager WebKitUserContentManager
TYPE AS _WebKitUserContentManagerClass WebKitUserContentManagerClass
TYPE AS _WebKitUserContentManagerPrivate WebKitUserContentManagerPrivate
TYPE AS _WebKitUserMediaPermissionRequest WebKitUserMediaPermissionRequest
TYPE AS _WebKitUserMediaPermissionRequestClass WebKitUserMediaPermissionRequestClass
TYPE AS _WebKitUserMediaPermissionRequestPrivate WebKitUserMediaPermissionRequestPrivate
TYPE AS _WebKitUserMessage WebKitUserMessage
TYPE AS _WebKitUserMessageClass WebKitUserMessageClass
TYPE AS LONG WebKitUserMessageError
ENUM
  WEBKIT_USER_MESSAGE_UNHANDLED_MESSAGE = 0
END ENUM
TYPE AS _WebKitUserMessagePrivate WebKitUserMessagePrivate
TYPE AS _WebKitUserScript WebKitUserScript
TYPE AS LONG WebKitUserScriptInjectionTime
ENUM
  WEBKIT_USER_SCRIPT_INJECT_AT_DOCUMENT_START = 0
  WEBKIT_USER_SCRIPT_INJECT_AT_DOCUMENT_END = 1
END ENUM
TYPE AS LONG WebKitUserStyleLevel
ENUM
  WEBKIT_USER_STYLE_LEVEL_USER = 0
  WEBKIT_USER_STYLE_LEVEL_AUTHOR = 1
END ENUM
TYPE AS _WebKitUserStyleSheet WebKitUserStyleSheet
TYPE AS _WebKitWebContext WebKitWebContext
TYPE AS _WebKitWebContextClass WebKitWebContextClass
TYPE AS _WebKitWebContextPrivate WebKitWebContextPrivate
TYPE AS _WebKitWebInspector WebKitWebInspector
TYPE AS _WebKitWebInspectorClass WebKitWebInspectorClass
TYPE AS _WebKitWebInspectorPrivate WebKitWebInspectorPrivate
TYPE AS LONG WebKitWebProcessTerminationReason
ENUM
  WEBKIT_WEB_PROCESS_CRASHED = 0
  WEBKIT_WEB_PROCESS_EXCEEDED_MEMORY_LIMIT = 1
END ENUM
TYPE AS _WebKitWebResource WebKitWebResource
TYPE AS _WebKitWebResourceClass WebKitWebResourceClass
TYPE AS _WebKitWebResourcePrivate WebKitWebResourcePrivate
TYPE AS _WebKitWebView WebKitWebView
TYPE AS _WebKitWebViewBase WebKitWebViewBase
TYPE AS _WebKitWebViewBaseClass WebKitWebViewBaseClass
TYPE AS _WebKitWebViewBasePrivate WebKitWebViewBasePrivate
TYPE AS _WebKitWebViewClass WebKitWebViewClass
TYPE AS _WebKitWebViewPrivate WebKitWebViewPrivate
TYPE AS _WebKitWebViewSessionState WebKitWebViewSessionState
TYPE AS _WebKitWebsiteData WebKitWebsiteData
TYPE AS _WebKitWebsiteDataManager WebKitWebsiteDataManager
TYPE AS _WebKitWebsiteDataManagerClass WebKitWebsiteDataManagerClass
TYPE AS _WebKitWebsiteDataManagerPrivate WebKitWebsiteDataManagerPrivate
TYPE AS LONG WebKitWebsiteDataTypes
ENUM
  WEBKIT_WEBSITE_DATA_MEMORY_CACHE = 1
  WEBKIT_WEBSITE_DATA_DISK_CACHE = 2
  WEBKIT_WEBSITE_DATA_OFFLINE_APPLICATION_CACHE = 4
  WEBKIT_WEBSITE_DATA_SESSION_STORAGE = 8
  WEBKIT_WEBSITE_DATA_LOCAL_STORAGE = 16
  WEBKIT_WEBSITE_DATA_WEBSQL_DATABASES = 32
  WEBKIT_WEBSITE_DATA_INDEXEDDB_DATABASES = 64
  WEBKIT_WEBSITE_DATA_PLUGIN_DATA = 128
  WEBKIT_WEBSITE_DATA_COOKIES = 256
  WEBKIT_WEBSITE_DATA_DEVICE_ID_HASH_SALT = 512
  WEBKIT_WEBSITE_DATA_HSTS_CACHE = 1024
  WEBKIT_WEBSITE_DATA_ALL = 2047
END ENUM
TYPE AS _WebKitWindowProperties WebKitWindowProperties
TYPE AS _WebKitWindowPropertiesClass WebKitWindowPropertiesClass
TYPE AS _WebKitWindowPropertiesPrivate WebKitWindowPropertiesPrivate
EXTERN "C" LIB "webkit2gtk-4.0"
' P_X

TYPE _WebKitPolicyDecision
  AS GObject parent
  AS WebKitPolicyDecisionPrivate PTR priv
END TYPE
DECLARE FUNCTION webkit_policy_decision_get_type() AS GType
#DEFINE WEBKIT2_TYPE_POLICY_DECISION (webkit_policy_decision_get_type())
#DEFINE WEBKIT2_POLICY_DECISION(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), WEBKIT2_TYPE_POLICY_DECISION, WebKitPolicyDecision))
#DEFINE WEBKIT2_POLICY_DECISION_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), WEBKIT2_TYPE_POLICY_DECISION, WebKit2PolicyDecisionClass))
#DEFINE WEBKIT2_IS_POLICY_DECISION(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), WEBKIT2_TYPE_POLICY_DECISION))
#DEFINE WEBKIT2_IS_CLASS_POLICY_DECISION(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), WEBKIT2_TYPE_POLICY_DECISION))
#DEFINE WEBKIT2_POLICY_DECISION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), WEBKIT2_TYPE_POLICY_DECISION, WebKit2PolicyDecisionClass))
DECLARE SUB webkit_policy_decision_download(BYVAL AS WebKitPolicyDecision PTR)
DECLARE SUB webkit_policy_decision_ignore(BYVAL AS WebKitPolicyDecision PTR)
DECLARE SUB webkit_policy_decision_use(BYVAL AS WebKitPolicyDecision PTR)
TYPE _WebKitPolicyDecisionClass
  AS GObjectClass parent_class
  _webkit_reserved0 AS SUB CDECL()
  _webkit_reserved1 AS SUB CDECL()
  _webkit_reserved2 AS SUB CDECL()
  _webkit_reserved3 AS SUB CDECL()
END TYPE
TYPE _WebKitWebViewBase
  AS GtkContainer parentInstance
  AS WebKitWebViewBasePrivate PTR priv
END TYPE
DECLARE FUNCTION webkit_web_view_base_get_type() AS GType
#DEFINE WEBKIT2_TYPE_WEB_VIEW_BASE (webkit_web_view_base_get_type())
#DEFINE WEBKIT2_WEB_VIEW_BASE(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), WEBKIT2_TYPE_WEB_VIEW_BASE, WebKitWebViewBase))
#DEFINE WEBKIT2_WEB_VIEW_BASE_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), WEBKIT2_TYPE_WEB_VIEW_BASE, WebKit2WebViewBaseClass))
#DEFINE WEBKIT2_IS_WEB_VIEW_BASE(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), WEBKIT2_TYPE_WEB_VIEW_BASE))
#DEFINE WEBKIT2_IS_CLASS_WEB_VIEW_BASE(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), WEBKIT2_TYPE_WEB_VIEW_BASE))
#DEFINE WEBKIT2_WEB_VIEW_BASE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), WEBKIT2_TYPE_WEB_VIEW_BASE, WebKit2WebViewBaseClass))
' P_3

DECLARE FUNCTION webkit_application_info_new() AS WebKitApplicationInfo PTR
DECLARE FUNCTION webkit_application_info_get_name(BYVAL AS WebKitApplicationInfo PTR) AS const gchar PTR
DECLARE SUB webkit_application_info_get_version(BYVAL AS WebKitApplicationInfo PTR, BYVAL AS guint64 PTR, BYVAL AS guint64 PTR, BYVAL AS guint64 PTR)
DECLARE FUNCTION webkit_application_info_ref(BYVAL AS WebKitApplicationInfo PTR) AS WebKitApplicationInfo PTR
DECLARE SUB webkit_application_info_set_name(BYVAL AS WebKitApplicationInfo PTR, BYVAL AS const gchar PTR)
DECLARE SUB webkit_application_info_set_version(BYVAL AS WebKitApplicationInfo PTR, BYVAL AS guint64, BYVAL AS guint64, BYVAL AS guint64)
DECLARE SUB webkit_application_info_unref(BYVAL AS WebKitApplicationInfo PTR)
TYPE _WebKitAuthenticationRequest
  AS GObject parent
  AS WebKitAuthenticationRequestPrivate PTR priv
END TYPE
DECLARE FUNCTION webkit_authentication_request_get_type() AS GType
#DEFINE WEBKIT2_TYPE_AUTHENTICATION_REQUEST (webkit_authentication_request_get_type())
#DEFINE WEBKIT2_AUTHENTICATION_REQUEST(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), WEBKIT2_TYPE_AUTHENTICATION_REQUEST, WebKitAuthenticationRequest))
#DEFINE WEBKIT2_AUTHENTICATION_REQUEST_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), WEBKIT2_TYPE_AUTHENTICATION_REQUEST, WebKit2AuthenticationRequestClass))
#DEFINE WEBKIT2_IS_AUTHENTICATION_REQUEST(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), WEBKIT2_TYPE_AUTHENTICATION_REQUEST))
#DEFINE WEBKIT2_IS_CLASS_AUTHENTICATION_REQUEST(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), WEBKIT2_TYPE_AUTHENTICATION_REQUEST))
#DEFINE WEBKIT2_AUTHENTICATION_REQUEST_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), WEBKIT2_TYPE_AUTHENTICATION_REQUEST, WebKit2AuthenticationRequestClass))
DECLARE SUB webkit_authentication_request_authenticate(BYVAL AS WebKitAuthenticationRequest PTR, BYVAL AS WebKitCredential PTR)
DECLARE FUNCTION webkit_authentication_request_can_save_credentials(BYVAL AS WebKitAuthenticationRequest PTR) AS gboolean
DECLARE SUB webkit_authentication_request_cancel(BYVAL AS WebKitAuthenticationRequest PTR)
DECLARE FUNCTION webkit_authentication_request_get_host(BYVAL AS WebKitAuthenticationRequest PTR) AS const gchar PTR
DECLARE FUNCTION webkit_authentication_request_get_port(BYVAL AS WebKitAuthenticationRequest PTR) AS guint
DECLARE FUNCTION webkit_authentication_request_get_proposed_credential(BYVAL AS WebKitAuthenticationRequest PTR) AS WebKitCredential PTR
DECLARE FUNCTION webkit_authentication_request_get_realm(BYVAL AS WebKitAuthenticationRequest PTR) AS const gchar PTR
DECLARE FUNCTION webkit_authentication_request_get_scheme(BYVAL AS WebKitAuthenticationRequest PTR) AS WebKitAuthenticationScheme
DECLARE FUNCTION webkit_authentication_request_is_for_proxy(BYVAL AS WebKitAuthenticationRequest PTR) AS gboolean
DECLARE FUNCTION webkit_authentication_request_is_retry(BYVAL AS WebKitAuthenticationRequest PTR) AS gboolean
TYPE _WebKitAuthenticationRequestClass
  AS GObjectClass parent_class
  _webkit_reserved0 AS SUB CDECL()
  _webkit_reserved1 AS SUB CDECL()
  _webkit_reserved2 AS SUB CDECL()
  _webkit_reserved3 AS SUB CDECL()
END TYPE
TYPE _WebKitAutomationSession
  AS GObject parent
  AS WebKitAutomationSessionPrivate PTR priv
END TYPE
DECLARE FUNCTION webkit_authentication_scheme_get_type() AS GType
#DEFINE WEBKIT_TYPE_AUTHENTICATION_SCHEME (webkit_authentication_scheme_get_type())
DECLARE FUNCTION webkit_automation_browsing_context_presentation_get_type() AS GType
#DEFINE WEBKIT_TYPE_AUTOMATION_BROWSING_CONTEXT_PRESENTATION (webkit_automation_browsing_context_presentation_get_type())
DECLARE FUNCTION webkit_automation_session_get_type() AS GType
#DEFINE WEBKIT2_TYPE_AUTOMATION_SESSION (webkit_automation_session_get_type())
#DEFINE WEBKIT2_AUTOMATION_SESSION(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), WEBKIT2_TYPE_AUTOMATION_SESSION, WebKitAutomationSession))
#DEFINE WEBKIT2_AUTOMATION_SESSION_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), WEBKIT2_TYPE_AUTOMATION_SESSION, WebKit2AutomationSessionClass))
#DEFINE WEBKIT2_IS_AUTOMATION_SESSION(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), WEBKIT2_TYPE_AUTOMATION_SESSION))
#DEFINE WEBKIT2_IS_CLASS_AUTOMATION_SESSION(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), WEBKIT2_TYPE_AUTOMATION_SESSION))
#DEFINE WEBKIT2_AUTOMATION_SESSION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), WEBKIT2_TYPE_AUTOMATION_SESSION, WebKit2AutomationSessionClass))
DECLARE FUNCTION webkit_automation_session_get_application_info(BYVAL AS WebKitAutomationSession PTR) AS WebKitApplicationInfo PTR
DECLARE FUNCTION webkit_automation_session_get_id(BYVAL AS WebKitAutomationSession PTR) AS const char PTR
DECLARE SUB webkit_automation_session_set_application_info(BYVAL AS WebKitAutomationSession PTR, BYVAL AS WebKitApplicationInfo PTR)
TYPE _WebKitAutomationSessionClass
  AS GObjectClass parent_class
  _webkit_reserved0 AS SUB CDECL()
  _webkit_reserved1 AS SUB CDECL()
  _webkit_reserved2 AS SUB CDECL()
  _webkit_reserved3 AS SUB CDECL()
END TYPE
TYPE _WebKitBackForwardList
  AS GObject parent
  AS WebKitBackForwardListPrivate PTR priv
END TYPE
DECLARE FUNCTION webkit_back_forward_list_get_type() AS GType
#DEFINE WEBKIT2_TYPE_BACK_FORWARD_LIST (webkit_back_forward_list_get_type())
#DEFINE WEBKIT2_BACK_FORWARD_LIST(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), WEBKIT2_TYPE_BACK_FORWARD_LIST, WebKitBackForwardList))
#DEFINE WEBKIT2_BACK_FORWARD_LIST_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), WEBKIT2_TYPE_BACK_FORWARD_LIST, WebKit2BackForwardListClass))
#DEFINE WEBKIT2_IS_BACK_FORWARD_LIST(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), WEBKIT2_TYPE_BACK_FORWARD_LIST))
#DEFINE WEBKIT2_IS_CLASS_BACK_FORWARD_LIST(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), WEBKIT2_TYPE_BACK_FORWARD_LIST))
#DEFINE WEBKIT2_BACK_FORWARD_LIST_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), WEBKIT2_TYPE_BACK_FORWARD_LIST, WebKit2BackForwardListClass))
DECLARE FUNCTION webkit_back_forward_list_get_back_item(BYVAL AS WebKitBackForwardList PTR) AS WebKitBackForwardListItem PTR
DECLARE FUNCTION webkit_back_forward_list_get_back_list(BYVAL AS WebKitBackForwardList PTR) AS GList PTR
DECLARE FUNCTION webkit_back_forward_list_get_back_list_with_limit(BYVAL AS WebKitBackForwardList PTR, BYVAL AS guint) AS GList PTR
DECLARE FUNCTION webkit_back_forward_list_get_current_item(BYVAL AS WebKitBackForwardList PTR) AS WebKitBackForwardListItem PTR
DECLARE FUNCTION webkit_back_forward_list_get_forward_item(BYVAL AS WebKitBackForwardList PTR) AS WebKitBackForwardListItem PTR
DECLARE FUNCTION webkit_back_forward_list_get_forward_list(BYVAL AS WebKitBackForwardList PTR) AS GList PTR
DECLARE FUNCTION webkit_back_forward_list_get_forward_list_with_limit(BYVAL AS WebKitBackForwardList PTR, BYVAL AS guint) AS GList PTR
DECLARE FUNCTION webkit_back_forward_list_get_length(BYVAL AS WebKitBackForwardList PTR) AS guint
DECLARE FUNCTION webkit_back_forward_list_get_nth_item(BYVAL AS WebKitBackForwardList PTR, BYVAL AS gint) AS WebKitBackForwardListItem PTR
TYPE _WebKitBackForwardListClass
  AS GObjectClass parent_class
  _webkit_reserved0 AS SUB CDECL()
  _webkit_reserved1 AS SUB CDECL()
  _webkit_reserved2 AS SUB CDECL()
  _webkit_reserved3 AS SUB CDECL()
END TYPE
TYPE _WebKitBackForwardListItem
  AS GInitiallyUnowned parent
  AS WebKitBackForwardListItemPrivate PTR priv
END TYPE
DECLARE FUNCTION webkit_back_forward_list_item_get_type() AS GType
#DEFINE WEBKIT2_TYPE_BACK_FORWARD_LIST_ITEM (webkit_back_forward_list_item_get_type())
#DEFINE WEBKIT2_BACK_FORWARD_LIST_ITEM(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), WEBKIT2_TYPE_BACK_FORWARD_LIST_ITEM, WebKitBackForwardListItem))
#DEFINE WEBKIT2_BACK_FORWARD_LIST_ITEM_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), WEBKIT2_TYPE_BACK_FORWARD_LIST_ITEM, WebKit2BackForwardListItemClass))
#DEFINE WEBKIT2_IS_BACK_FORWARD_LIST_ITEM(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), WEBKIT2_TYPE_BACK_FORWARD_LIST_ITEM))
#DEFINE WEBKIT2_IS_CLASS_BACK_FORWARD_LIST_ITEM(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), WEBKIT2_TYPE_BACK_FORWARD_LIST_ITEM))
#DEFINE WEBKIT2_BACK_FORWARD_LIST_ITEM_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), WEBKIT2_TYPE_BACK_FORWARD_LIST_ITEM, WebKit2BackForwardListItemClass))
DECLARE FUNCTION webkit_back_forward_list_item_get_original_uri(BYVAL AS WebKitBackForwardListItem PTR) AS const gchar PTR
DECLARE FUNCTION webkit_back_forward_list_item_get_title(BYVAL AS WebKitBackForwardListItem PTR) AS const gchar PTR
DECLARE FUNCTION webkit_back_forward_list_item_get_uri(BYVAL AS WebKitBackForwardListItem PTR) AS const gchar PTR
TYPE _WebKitBackForwardListItemClass
  AS GInitiallyUnownedClass parent_class
  _webkit_reserved0 AS SUB CDECL()
  _webkit_reserved1 AS SUB CDECL()
  _webkit_reserved2 AS SUB CDECL()
  _webkit_reserved3 AS SUB CDECL()
END TYPE
TYPE _WebKitColorChooserRequest
  AS GObject parent
  AS WebKitColorChooserRequestPrivate PTR priv
END TYPE
DECLARE FUNCTION webkit_cache_model_get_type() AS GType
#DEFINE WEBKIT_TYPE_CACHE_MODEL (webkit_cache_model_get_type())
DECLARE FUNCTION webkit_color_chooser_request_get_type() AS GType
#DEFINE WEBKIT2_TYPE_COLOR_CHOOSER_REQUEST (webkit_color_chooser_request_get_type())
#DEFINE WEBKIT2_COLOR_CHOOSER_REQUEST(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), WEBKIT2_TYPE_COLOR_CHOOSER_REQUEST, WebKitColorChooserRequest))
#DEFINE WEBKIT2_COLOR_CHOOSER_REQUEST_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), WEBKIT2_TYPE_COLOR_CHOOSER_REQUEST, WebKit2ColorChooserRequestClass))
#DEFINE WEBKIT2_IS_COLOR_CHOOSER_REQUEST(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), WEBKIT2_TYPE_COLOR_CHOOSER_REQUEST))
#DEFINE WEBKIT2_IS_CLASS_COLOR_CHOOSER_REQUEST(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), WEBKIT2_TYPE_COLOR_CHOOSER_REQUEST))
#DEFINE WEBKIT2_COLOR_CHOOSER_REQUEST_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), WEBKIT2_TYPE_COLOR_CHOOSER_REQUEST, WebKit2ColorChooserRequestClass))
DECLARE SUB webkit_color_chooser_request_cancel(BYVAL AS WebKitColorChooserRequest PTR)
DECLARE SUB webkit_color_chooser_request_finish(BYVAL AS WebKitColorChooserRequest PTR)
DECLARE SUB webkit_color_chooser_request_get_element_rectangle(BYVAL AS WebKitColorChooserRequest PTR, BYVAL AS GdkRectangle PTR)
DECLARE SUB webkit_color_chooser_request_get_rgba(BYVAL AS WebKitColorChooserRequest PTR, BYVAL AS GdkRGBA PTR)
DECLARE SUB webkit_color_chooser_request_set_rgba(BYVAL AS WebKitColorChooserRequest PTR, BYVAL AS const GdkRGBA PTR)
TYPE _WebKitColorChooserRequestClass
  AS GObjectClass parent_class
END TYPE
TYPE _WebKitContextMenu
  AS GObject parent
  AS WebKitContextMenuPrivate PTR priv
END TYPE
DECLARE FUNCTION webkit_context_menu_get_type() AS GType
#DEFINE WEBKIT2_TYPE_CONTEXT_MENU (webkit_context_menu_get_type())
#DEFINE WEBKIT2_CONTEXT_MENU(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), WEBKIT2_TYPE_CONTEXT_MENU, WebKitContextMenu))
#DEFINE WEBKIT2_CONTEXT_MENU_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), WEBKIT2_TYPE_CONTEXT_MENU, WebKit2ContextMenuClass))
#DEFINE WEBKIT2_IS_CONTEXT_MENU(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), WEBKIT2_TYPE_CONTEXT_MENU))
#DEFINE WEBKIT2_IS_CLASS_CONTEXT_MENU(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), WEBKIT2_TYPE_CONTEXT_MENU))
#DEFINE WEBKIT2_CONTEXT_MENU_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), WEBKIT2_TYPE_CONTEXT_MENU, WebKit2ContextMenuClass))
DECLARE FUNCTION webkit_context_menu_new() AS WebKitContextMenu PTR
DECLARE FUNCTION webkit_context_menu_new_with_items(BYVAL AS GList PTR) AS WebKitContextMenu PTR
DECLARE SUB webkit_context_menu_append(BYVAL AS WebKitContextMenu PTR, BYVAL AS WebKitContextMenuItem PTR)
DECLARE FUNCTION webkit_context_menu_first(BYVAL AS WebKitContextMenu PTR) AS WebKitContextMenuItem PTR
DECLARE FUNCTION webkit_context_menu_get_item_at_position(BYVAL AS WebKitContextMenu PTR, BYVAL AS guint) AS WebKitContextMenuItem PTR
DECLARE FUNCTION webkit_context_menu_get_items(BYVAL AS WebKitContextMenu PTR) AS GList PTR
DECLARE FUNCTION webkit_context_menu_get_n_items(BYVAL AS WebKitContextMenu PTR) AS guint
DECLARE FUNCTION webkit_context_menu_get_user_data(BYVAL AS WebKitContextMenu PTR) AS GVariant PTR
DECLARE SUB webkit_context_menu_insert(BYVAL AS WebKitContextMenu PTR, BYVAL AS WebKitContextMenuItem PTR, BYVAL AS gint)
DECLARE FUNCTION webkit_context_menu_last(BYVAL AS WebKitContextMenu PTR) AS WebKitContextMenuItem PTR
DECLARE SUB webkit_context_menu_move_item(BYVAL AS WebKitContextMenu PTR, BYVAL AS WebKitContextMenuItem PTR, BYVAL AS gint)
DECLARE SUB webkit_context_menu_prepend(BYVAL AS WebKitContextMenu PTR, BYVAL AS WebKitContextMenuItem PTR)
DECLARE SUB webkit_context_menu_remove(BYVAL AS WebKitContextMenu PTR, BYVAL AS WebKitContextMenuItem PTR)
DECLARE SUB webkit_context_menu_remove_all(BYVAL AS WebKitContextMenu PTR)
DECLARE SUB webkit_context_menu_set_user_data(BYVAL AS WebKitContextMenu PTR, BYVAL AS GVariant PTR)
TYPE _WebKitContextMenuClass
  AS GObjectClass parent_class
  _webkit_reserved0 AS SUB CDECL()
  _webkit_reserved1 AS SUB CDECL()
  _webkit_reserved2 AS SUB CDECL()
  _webkit_reserved3 AS SUB CDECL()
END TYPE
DECLARE FUNCTION webkit_context_menu_action_get_type() AS GType
#DEFINE WEBKIT_TYPE_CONTEXT_MENU_ACTION (webkit_context_menu_action_get_type())
TYPE _WebKitContextMenuItem
  AS GInitiallyUnowned parent
  AS WebKitContextMenuItemPrivate PTR priv
END TYPE
DECLARE FUNCTION webkit_context_menu_item_get_type() AS GType
#DEFINE WEBKIT2_TYPE_CONTEXT_MENU_ITEM (webkit_context_menu_item_get_type())
#DEFINE WEBKIT2_CONTEXT_MENU_ITEM(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), WEBKIT2_TYPE_CONTEXT_MENU_ITEM, WebKitContextMenuItem))
#DEFINE WEBKIT2_CONTEXT_MENU_ITEM_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), WEBKIT2_TYPE_CONTEXT_MENU_ITEM, WebKit2ContextMenuItemClass))
#DEFINE WEBKIT2_IS_CONTEXT_MENU_ITEM(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), WEBKIT2_TYPE_CONTEXT_MENU_ITEM))
#DEFINE WEBKIT2_IS_CLASS_CONTEXT_MENU_ITEM(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), WEBKIT2_TYPE_CONTEXT_MENU_ITEM))
#DEFINE WEBKIT2_CONTEXT_MENU_ITEM_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), WEBKIT2_TYPE_CONTEXT_MENU_ITEM, WebKit2ContextMenuItemClass))
DECLARE FUNCTION webkit_context_menu_item_new(BYVAL AS GtkAction PTR) AS WebKitContextMenuItem PTR
DECLARE FUNCTION webkit_context_menu_item_new_from_gaction(BYVAL AS GAction PTR, BYVAL AS const gchar PTR, BYVAL AS GVariant PTR) AS WebKitContextMenuItem PTR
DECLARE FUNCTION webkit_context_menu_item_new_from_stock_action(BYVAL AS WebKitContextMenuAction) AS WebKitContextMenuItem PTR
DECLARE FUNCTION webkit_context_menu_item_new_from_stock_action_with_label(BYVAL AS WebKitContextMenuAction, BYVAL AS const gchar PTR) AS WebKitContextMenuItem PTR
DECLARE FUNCTION webkit_context_menu_item_new_separator() AS WebKitContextMenuItem PTR
DECLARE FUNCTION webkit_context_menu_item_new_with_submenu(BYVAL AS const gchar PTR, BYVAL AS WebKitContextMenu PTR) AS WebKitContextMenuItem PTR
DECLARE FUNCTION webkit_context_menu_item_get_action(BYVAL AS WebKitContextMenuItem PTR) AS GtkAction PTR
DECLARE FUNCTION webkit_context_menu_item_get_gaction(BYVAL AS WebKitContextMenuItem PTR) AS GAction PTR
DECLARE FUNCTION webkit_context_menu_item_get_stock_action(BYVAL AS WebKitContextMenuItem PTR) AS WebKitContextMenuAction
DECLARE FUNCTION webkit_context_menu_item_get_submenu(BYVAL AS WebKitContextMenuItem PTR) AS WebKitContextMenu PTR
DECLARE FUNCTION webkit_context_menu_item_is_separator(BYVAL AS WebKitContextMenuItem PTR) AS gboolean
DECLARE SUB webkit_context_menu_item_set_submenu(BYVAL AS WebKitContextMenuItem PTR, BYVAL AS WebKitContextMenu PTR)
TYPE _WebKitContextMenuItemClass
  AS GInitiallyUnownedClass parent_class
  _webkit_reserved0 AS SUB CDECL()
  _webkit_reserved1 AS SUB CDECL()
  _webkit_reserved2 AS SUB CDECL()
  _webkit_reserved3 AS SUB CDECL()
END TYPE
TYPE _WebKitCookieManager
  AS GObject parent
  AS WebKitCookieManagerPrivate PTR priv
END TYPE
DECLARE FUNCTION webkit_cookie_accept_policy_get_type() AS GType
#DEFINE WEBKIT_TYPE_COOKIE_ACCEPT_POLICY (webkit_cookie_accept_policy_get_type())
DECLARE FUNCTION webkit_cookie_manager_get_type() AS GType
#DEFINE WEBKIT2_TYPE_COOKIE_MANAGER (webkit_cookie_manager_get_type())
#DEFINE WEBKIT2_COOKIE_MANAGER(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), WEBKIT2_TYPE_COOKIE_MANAGER, WebKitCookieManager))
#DEFINE WEBKIT2_COOKIE_MANAGER_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), WEBKIT2_TYPE_COOKIE_MANAGER, WebKit2CookieManagerClass))
#DEFINE WEBKIT2_IS_COOKIE_MANAGER(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), WEBKIT2_TYPE_COOKIE_MANAGER))
#DEFINE WEBKIT2_IS_CLASS_COOKIE_MANAGER(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), WEBKIT2_TYPE_COOKIE_MANAGER))
#DEFINE WEBKIT2_COOKIE_MANAGER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), WEBKIT2_TYPE_COOKIE_MANAGER, WebKit2CookieManagerClass))
DECLARE SUB webkit_cookie_manager_add_cookie(BYVAL AS WebKitCookieManager PTR, BYVAL AS SoupCookie PTR, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
DECLARE FUNCTION webkit_cookie_manager_add_cookie_finish(BYVAL AS WebKitCookieManager PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE SUB webkit_cookie_manager_delete_all_cookies(BYVAL AS WebKitCookieManager PTR)
DECLARE SUB webkit_cookie_manager_delete_cookie(BYVAL AS WebKitCookieManager PTR, BYVAL AS SoupCookie PTR, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
DECLARE FUNCTION webkit_cookie_manager_delete_cookie_finish(BYVAL AS WebKitCookieManager PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE SUB webkit_cookie_manager_delete_cookies_for_domain(BYVAL AS WebKitCookieManager PTR, BYVAL AS const gchar PTR)
DECLARE SUB webkit_cookie_manager_get_accept_policy(BYVAL AS WebKitCookieManager PTR, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
DECLARE FUNCTION webkit_cookie_manager_get_accept_policy_finish(BYVAL AS WebKitCookieManager PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS WebKitCookieAcceptPolicy
DECLARE SUB webkit_cookie_manager_get_cookies(BYVAL AS WebKitCookieManager PTR, BYVAL AS const gchar PTR, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
DECLARE FUNCTION webkit_cookie_manager_get_cookies_finish(BYVAL AS WebKitCookieManager PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS GList PTR
DECLARE SUB webkit_cookie_manager_get_domains_with_cookies(BYVAL AS WebKitCookieManager PTR, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
DECLARE FUNCTION webkit_cookie_manager_get_domains_with_cookies_finish(BYVAL AS WebKitCookieManager PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS gchar PTR PTR
DECLARE SUB webkit_cookie_manager_set_accept_policy(BYVAL AS WebKitCookieManager PTR, BYVAL AS WebKitCookieAcceptPolicy)
DECLARE SUB webkit_cookie_manager_set_persistent_storage(BYVAL AS WebKitCookieManager PTR, BYVAL AS const gchar PTR, BYVAL AS WebKitCookiePersistentStorage)
TYPE _WebKitCookieManagerClass
  AS GObjectClass parent_class
  _webkit_reserved0 AS SUB CDECL()
  _webkit_reserved1 AS SUB CDECL()
  _webkit_reserved2 AS SUB CDECL()
  _webkit_reserved3 AS SUB CDECL()
END TYPE
DECLARE FUNCTION webkit_cookie_persistent_storage_get_type() AS GType
#DEFINE WEBKIT_TYPE_COOKIE_PERSISTENT_STORAGE (webkit_cookie_persistent_storage_get_type())
DECLARE FUNCTION webkit_credential_new(BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS WebKitCredentialPersistence) AS WebKitCredential PTR
DECLARE FUNCTION webkit_credential_copy(BYVAL AS WebKitCredential PTR) AS WebKitCredential PTR
DECLARE SUB webkit_credential_free(BYVAL AS WebKitCredential PTR)
DECLARE FUNCTION webkit_credential_get_password(BYVAL AS WebKitCredential PTR) AS const gchar PTR
DECLARE FUNCTION webkit_credential_get_persistence(BYVAL AS WebKitCredential PTR) AS WebKitCredentialPersistence
DECLARE FUNCTION webkit_credential_get_username(BYVAL AS WebKitCredential PTR) AS const gchar PTR
DECLARE FUNCTION webkit_credential_has_password(BYVAL AS WebKitCredential PTR) AS gboolean
TYPE _WebKitDeviceInfoPermissionRequest
  AS GObject parent
  AS WebKitDeviceInfoPermissionRequestPrivate PTR priv
END TYPE
DECLARE FUNCTION webkit_credential_persistence_get_type() AS GType
#DEFINE WEBKIT_TYPE_CREDENTIAL_PERSISTENCE (webkit_credential_persistence_get_type())
DECLARE FUNCTION webkit_device_info_permission_request_get_type() AS GType
#DEFINE WEBKIT2_TYPE_DEVICE_INFO_PERMISSION_REQUEST (webkit_device_info_permission_request_get_type())
#DEFINE WEBKIT2_DEVICE_INFO_PERMISSION_REQUEST(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), WEBKIT2_TYPE_DEVICE_INFO_PERMISSION_REQUEST, WebKitDeviceInfoPermissionRequest))
#DEFINE WEBKIT2_DEVICE_INFO_PERMISSION_REQUEST_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), WEBKIT2_TYPE_DEVICE_INFO_PERMISSION_REQUEST, WebKit2DeviceInfoPermissionRequestClass))
#DEFINE WEBKIT2_IS_DEVICE_INFO_PERMISSION_REQUEST(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), WEBKIT2_TYPE_DEVICE_INFO_PERMISSION_REQUEST))
#DEFINE WEBKIT2_IS_CLASS_DEVICE_INFO_PERMISSION_REQUEST(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), WEBKIT2_TYPE_DEVICE_INFO_PERMISSION_REQUEST))
#DEFINE WEBKIT2_DEVICE_INFO_PERMISSION_REQUEST_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), WEBKIT2_TYPE_DEVICE_INFO_PERMISSION_REQUEST, WebKit2DeviceInfoPermissionRequestClass))
TYPE _WebKitDeviceInfoPermissionRequestClass
  AS GObjectClass parent_class
  _webkit_reserved0 AS SUB CDECL()
  _webkit_reserved1 AS SUB CDECL()
  _webkit_reserved2 AS SUB CDECL()
  _webkit_reserved3 AS SUB CDECL()
END TYPE
TYPE _WebKitDownload
  AS GObject parent
  AS WebKitDownloadPrivate PTR priv
END TYPE
DECLARE FUNCTION webkit_download_get_type() AS GType
#DEFINE WEBKIT2_TYPE_DOWNLOAD (webkit_download_get_type())
#DEFINE WEBKIT2_DOWNLOAD(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), WEBKIT2_TYPE_DOWNLOAD, WebKitDownload))
#DEFINE WEBKIT2_DOWNLOAD_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), WEBKIT2_TYPE_DOWNLOAD, WebKit2DownloadClass))
#DEFINE WEBKIT2_IS_DOWNLOAD(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), WEBKIT2_TYPE_DOWNLOAD))
#DEFINE WEBKIT2_IS_CLASS_DOWNLOAD(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), WEBKIT2_TYPE_DOWNLOAD))
#DEFINE WEBKIT2_DOWNLOAD_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), WEBKIT2_TYPE_DOWNLOAD, WebKit2DownloadClass))
DECLARE SUB webkit_download_cancel(BYVAL AS WebKitDownload PTR)
DECLARE FUNCTION webkit_download_get_allow_overwrite(BYVAL AS WebKitDownload PTR) AS gboolean
DECLARE FUNCTION webkit_download_get_destination(BYVAL AS WebKitDownload PTR) AS const gchar PTR
DECLARE FUNCTION webkit_download_get_elapsed_time(BYVAL AS WebKitDownload PTR) AS gdouble
DECLARE FUNCTION webkit_download_get_estimated_progress(BYVAL AS WebKitDownload PTR) AS gdouble
DECLARE FUNCTION webkit_download_get_received_data_length(BYVAL AS WebKitDownload PTR) AS guint64
DECLARE FUNCTION webkit_download_get_request(BYVAL AS WebKitDownload PTR) AS WebKitURIRequest PTR
DECLARE FUNCTION webkit_download_get_response(BYVAL AS WebKitDownload PTR) AS WebKitURIResponse PTR
DECLARE FUNCTION webkit_download_get_web_view(BYVAL AS WebKitDownload PTR) AS WebKitWebView PTR
DECLARE SUB webkit_download_set_allow_overwrite(BYVAL AS WebKitDownload PTR, BYVAL AS gboolean)
DECLARE SUB webkit_download_set_destination(BYVAL AS WebKitDownload PTR, BYVAL AS const gchar PTR)
TYPE _WebKitDownloadClass
  AS GObjectClass parent_class
  decide_destination AS FUNCTION CDECL(BYVAL AS WebKitDownload PTR, BYVAL AS const gchar PTR) AS gboolean
  _webkit_reserved0 AS SUB CDECL()
  _webkit_reserved1 AS SUB CDECL()
  _webkit_reserved2 AS SUB CDECL()
  _webkit_reserved3 AS SUB CDECL()
END TYPE
DECLARE FUNCTION webkit_download_error_get_type() AS GType
#DEFINE WEBKIT_TYPE_DOWNLOAD_ERROR (webkit_download_error_get_type())
TYPE _WebKitEditorState
  AS GObject parent
  AS WebKitEditorStatePrivate PTR priv
END TYPE
DECLARE FUNCTION webkit_editor_state_get_type() AS GType
#DEFINE WEBKIT2_TYPE_EDITOR_STATE (webkit_editor_state_get_type())
#DEFINE WEBKIT2_EDITOR_STATE(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), WEBKIT2_TYPE_EDITOR_STATE, WebKitEditorState))
#DEFINE WEBKIT2_EDITOR_STATE_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), WEBKIT2_TYPE_EDITOR_STATE, WebKit2EditorStateClass))
#DEFINE WEBKIT2_IS_EDITOR_STATE(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), WEBKIT2_TYPE_EDITOR_STATE))
#DEFINE WEBKIT2_IS_CLASS_EDITOR_STATE(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), WEBKIT2_TYPE_EDITOR_STATE))
#DEFINE WEBKIT2_EDITOR_STATE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), WEBKIT2_TYPE_EDITOR_STATE, WebKit2EditorStateClass))
DECLARE FUNCTION webkit_editor_state_get_typing_attributes(BYVAL AS WebKitEditorState PTR) AS guint
DECLARE FUNCTION webkit_editor_state_is_copy_available(BYVAL AS WebKitEditorState PTR) AS gboolean
DECLARE FUNCTION webkit_editor_state_is_cut_available(BYVAL AS WebKitEditorState PTR) AS gboolean
DECLARE FUNCTION webkit_editor_state_is_paste_available(BYVAL AS WebKitEditorState PTR) AS gboolean
DECLARE FUNCTION webkit_editor_state_is_redo_available(BYVAL AS WebKitEditorState PTR) AS gboolean
DECLARE FUNCTION webkit_editor_state_is_undo_available(BYVAL AS WebKitEditorState PTR) AS gboolean
TYPE _WebKitEditorStateClass
  AS GObjectClass parent_class
  _webkit_reserved0 AS SUB CDECL()
  _webkit_reserved1 AS SUB CDECL()
  _webkit_reserved2 AS SUB CDECL()
  _webkit_reserved3 AS SUB CDECL()
END TYPE
TYPE _WebKitFaviconDatabase
  AS GObject parent
  AS WebKitFaviconDatabasePrivate PTR priv
END TYPE
DECLARE FUNCTION webkit_favicon_database_get_type() AS GType
#DEFINE WEBKIT2_TYPE_FAVICON_DATABASE (webkit_favicon_database_get_type())
#DEFINE WEBKIT2_FAVICON_DATABASE(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), WEBKIT2_TYPE_FAVICON_DATABASE, WebKitFaviconDatabase))
#DEFINE WEBKIT2_FAVICON_DATABASE_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), WEBKIT2_TYPE_FAVICON_DATABASE, WebKit2FaviconDatabaseClass))
#DEFINE WEBKIT2_IS_FAVICON_DATABASE(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), WEBKIT2_TYPE_FAVICON_DATABASE))
#DEFINE WEBKIT2_IS_CLASS_FAVICON_DATABASE(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), WEBKIT2_TYPE_FAVICON_DATABASE))
#DEFINE WEBKIT2_FAVICON_DATABASE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), WEBKIT2_TYPE_FAVICON_DATABASE, WebKit2FaviconDatabaseClass))
DECLARE SUB webkit_favicon_database_clear(BYVAL AS WebKitFaviconDatabase PTR)
DECLARE SUB webkit_favicon_database_get_favicon(BYVAL AS WebKitFaviconDatabase PTR, BYVAL AS const gchar PTR, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
DECLARE FUNCTION webkit_favicon_database_get_favicon_finish(BYVAL AS WebKitFaviconDatabase PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS cairo_surface_t PTR
DECLARE FUNCTION webkit_favicon_database_get_favicon_uri(BYVAL AS WebKitFaviconDatabase PTR, BYVAL AS const gchar PTR) AS gchar PTR
TYPE _WebKitFaviconDatabaseClass
  AS GObjectClass parent_class
  _webkit_reserved0 AS SUB CDECL()
  _webkit_reserved1 AS SUB CDECL()
  _webkit_reserved2 AS SUB CDECL()
  _webkit_reserved3 AS SUB CDECL()
END TYPE
DECLARE FUNCTION webkit_favicon_database_error_get_type() AS GType
#DEFINE WEBKIT_TYPE_FAVICON_DATABASE_ERROR (webkit_favicon_database_error_get_type())
TYPE _WebKitFileChooserRequest
  AS GObject parent
  AS WebKitFileChooserRequestPrivate PTR priv
END TYPE
DECLARE FUNCTION webkit_file_chooser_request_get_type() AS GType
#DEFINE WEBKIT2_TYPE_FILE_CHOOSER_REQUEST (webkit_file_chooser_request_get_type())
#DEFINE WEBKIT2_FILE_CHOOSER_REQUEST(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), WEBKIT2_TYPE_FILE_CHOOSER_REQUEST, WebKitFileChooserRequest))
#DEFINE WEBKIT2_FILE_CHOOSER_REQUEST_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), WEBKIT2_TYPE_FILE_CHOOSER_REQUEST, WebKit2FileChooserRequestClass))
#DEFINE WEBKIT2_IS_FILE_CHOOSER_REQUEST(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), WEBKIT2_TYPE_FILE_CHOOSER_REQUEST))
#DEFINE WEBKIT2_IS_CLASS_FILE_CHOOSER_REQUEST(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), WEBKIT2_TYPE_FILE_CHOOSER_REQUEST))
#DEFINE WEBKIT2_FILE_CHOOSER_REQUEST_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), WEBKIT2_TYPE_FILE_CHOOSER_REQUEST, WebKit2FileChooserRequestClass))
DECLARE SUB webkit_file_chooser_request_cancel(BYVAL AS WebKitFileChooserRequest PTR)
DECLARE FUNCTION webkit_file_chooser_request_get_mime_types(BYVAL AS WebKitFileChooserRequest PTR) AS const gchar ptr const /'const gchar* const'/ PTR
DECLARE FUNCTION webkit_file_chooser_request_get_mime_types_filter(BYVAL AS WebKitFileChooserRequest PTR) AS GtkFileFilter PTR
DECLARE FUNCTION webkit_file_chooser_request_get_select_multiple(BYVAL AS WebKitFileChooserRequest PTR) AS gboolean
DECLARE FUNCTION webkit_file_chooser_request_get_selected_files(BYVAL AS WebKitFileChooserRequest PTR) AS const gchar ptr const /'const gchar* const'/ PTR
DECLARE SUB webkit_file_chooser_request_select_files(BYVAL AS WebKitFileChooserRequest PTR, BYVAL AS const gchar ptr const /'const gchar* const'/ PTR)
TYPE _WebKitFileChooserRequestClass
  AS GObjectClass parent_class
  _webkit_reserved0 AS SUB CDECL()
  _webkit_reserved1 AS SUB CDECL()
  _webkit_reserved2 AS SUB CDECL()
  _webkit_reserved3 AS SUB CDECL()
END TYPE
TYPE _WebKitFindController
  AS GObject parent
  AS WebKitFindControllerPrivate PTR priv
END TYPE
DECLARE FUNCTION webkit_find_controller_get_type() AS GType
#DEFINE WEBKIT2_TYPE_FIND_CONTROLLER (webkit_find_controller_get_type())
#DEFINE WEBKIT2_FIND_CONTROLLER(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), WEBKIT2_TYPE_FIND_CONTROLLER, WebKitFindController))
#DEFINE WEBKIT2_FIND_CONTROLLER_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), WEBKIT2_TYPE_FIND_CONTROLLER, WebKit2FindControllerClass))
#DEFINE WEBKIT2_IS_FIND_CONTROLLER(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), WEBKIT2_TYPE_FIND_CONTROLLER))
#DEFINE WEBKIT2_IS_CLASS_FIND_CONTROLLER(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), WEBKIT2_TYPE_FIND_CONTROLLER))
#DEFINE WEBKIT2_FIND_CONTROLLER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), WEBKIT2_TYPE_FIND_CONTROLLER, WebKit2FindControllerClass))
DECLARE SUB webkit_find_controller_count_matches(BYVAL AS WebKitFindController PTR, BYVAL AS const gchar PTR, BYVAL AS guint32, BYVAL AS guint)
DECLARE FUNCTION webkit_find_controller_get_max_match_count(BYVAL AS WebKitFindController PTR) AS guint
DECLARE FUNCTION webkit_find_controller_get_options(BYVAL AS WebKitFindController PTR) AS guint32
DECLARE FUNCTION webkit_find_controller_get_search_text(BYVAL AS WebKitFindController PTR) AS const gchar PTR
DECLARE FUNCTION webkit_find_controller_get_web_view(BYVAL AS WebKitFindController PTR) AS WebKitWebView PTR
DECLARE SUB webkit_find_controller_search(BYVAL AS WebKitFindController PTR, BYVAL AS const gchar PTR, BYVAL AS guint32, BYVAL AS guint)
DECLARE SUB webkit_find_controller_search_finish(BYVAL AS WebKitFindController PTR)
DECLARE SUB webkit_find_controller_search_next(BYVAL AS WebKitFindController PTR)
DECLARE SUB webkit_find_controller_search_previous(BYVAL AS WebKitFindController PTR)
TYPE _WebKitFindControllerClass
  AS GObjectClass parent_class
  _webkit_reserved0 AS SUB CDECL()
  _webkit_reserved1 AS SUB CDECL()
  _webkit_reserved2 AS SUB CDECL()
  _webkit_reserved3 AS SUB CDECL()
END TYPE
TYPE _WebKitFormSubmissionRequest
  AS GObject parent
  AS WebKitFormSubmissionRequestPrivate PTR priv
END TYPE
DECLARE FUNCTION webkit_form_submission_request_get_type() AS GType
#DEFINE WEBKIT2_TYPE_FORM_SUBMISSION_REQUEST (webkit_form_submission_request_get_type())
#DEFINE WEBKIT2_FORM_SUBMISSION_REQUEST(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), WEBKIT2_TYPE_FORM_SUBMISSION_REQUEST, WebKitFormSubmissionRequest))
#DEFINE WEBKIT2_FORM_SUBMISSION_REQUEST_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), WEBKIT2_TYPE_FORM_SUBMISSION_REQUEST, WebKit2FormSubmissionRequestClass))
#DEFINE WEBKIT2_IS_FORM_SUBMISSION_REQUEST(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), WEBKIT2_TYPE_FORM_SUBMISSION_REQUEST))
#DEFINE WEBKIT2_IS_CLASS_FORM_SUBMISSION_REQUEST(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), WEBKIT2_TYPE_FORM_SUBMISSION_REQUEST))
#DEFINE WEBKIT2_FORM_SUBMISSION_REQUEST_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), WEBKIT2_TYPE_FORM_SUBMISSION_REQUEST, WebKit2FormSubmissionRequestClass))
DECLARE FUNCTION webkit_form_submission_request_get_text_fields(BYVAL AS WebKitFormSubmissionRequest PTR) AS GHashTable PTR
DECLARE FUNCTION webkit_form_submission_request_list_text_fields(BYVAL AS WebKitFormSubmissionRequest PTR, BYVAL AS GPtrArray PTR PTR, BYVAL AS GPtrArray PTR PTR) AS gboolean
DECLARE SUB webkit_form_submission_request_submit(BYVAL AS WebKitFormSubmissionRequest PTR)
TYPE _WebKitFormSubmissionRequestClass
  AS GObjectClass parent_class
  _webkit_reserved0 AS SUB CDECL()
  _webkit_reserved1 AS SUB CDECL()
  _webkit_reserved2 AS SUB CDECL()
  _webkit_reserved3 AS SUB CDECL()
END TYPE
TYPE _WebKitGeolocationManager
  AS GObject parent
  AS WebKitGeolocationManagerPrivate PTR priv
END TYPE
DECLARE FUNCTION webkit_geolocation_manager_get_type() AS GType
#DEFINE WEBKIT2_TYPE_GEOLOCATION_MANAGER (webkit_geolocation_manager_get_type())
#DEFINE WEBKIT2_GEOLOCATION_MANAGER(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), WEBKIT2_TYPE_GEOLOCATION_MANAGER, WebKitGeolocationManager))
#DEFINE WEBKIT2_GEOLOCATION_MANAGER_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), WEBKIT2_TYPE_GEOLOCATION_MANAGER, WebKit2GeolocationManagerClass))
#DEFINE WEBKIT2_IS_GEOLOCATION_MANAGER(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), WEBKIT2_TYPE_GEOLOCATION_MANAGER))
#DEFINE WEBKIT2_IS_CLASS_GEOLOCATION_MANAGER(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), WEBKIT2_TYPE_GEOLOCATION_MANAGER))
#DEFINE WEBKIT2_GEOLOCATION_MANAGER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), WEBKIT2_TYPE_GEOLOCATION_MANAGER, WebKit2GeolocationManagerClass))
DECLARE SUB webkit_geolocation_manager_failed(BYVAL AS WebKitGeolocationManager PTR, BYVAL AS const char PTR)
DECLARE FUNCTION webkit_geolocation_manager_get_enable_high_accuracy(BYVAL AS WebKitGeolocationManager PTR) AS gboolean
DECLARE SUB webkit_geolocation_manager_update_position(BYVAL AS WebKitGeolocationManager PTR, BYVAL AS WebKitGeolocationPosition PTR)
TYPE _WebKitGeolocationManagerClass
  AS GObjectClass parent_class
  _webkit_reserved0 AS SUB CDECL()
  _webkit_reserved1 AS SUB CDECL()
  _webkit_reserved2 AS SUB CDECL()
  _webkit_reserved3 AS SUB CDECL()
END TYPE
TYPE _WebKitGeolocationPermissionRequest
  AS GObject parent
  AS WebKitGeolocationPermissionRequestPrivate PTR priv
END TYPE
DECLARE FUNCTION webkit_geolocation_permission_request_get_type() AS GType
#DEFINE WEBKIT2_TYPE_GEOLOCATION_PERMISSION_REQUEST (webkit_geolocation_permission_request_get_type())
#DEFINE WEBKIT2_GEOLOCATION_PERMISSION_REQUEST(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), WEBKIT2_TYPE_GEOLOCATION_PERMISSION_REQUEST, WebKitGeolocationPermissionRequest))
#DEFINE WEBKIT2_GEOLOCATION_PERMISSION_REQUEST_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), WEBKIT2_TYPE_GEOLOCATION_PERMISSION_REQUEST, WebKit2GeolocationPermissionRequestClass))
#DEFINE WEBKIT2_IS_GEOLOCATION_PERMISSION_REQUEST(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), WEBKIT2_TYPE_GEOLOCATION_PERMISSION_REQUEST))
#DEFINE WEBKIT2_IS_CLASS_GEOLOCATION_PERMISSION_REQUEST(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), WEBKIT2_TYPE_GEOLOCATION_PERMISSION_REQUEST))
#DEFINE WEBKIT2_GEOLOCATION_PERMISSION_REQUEST_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), WEBKIT2_TYPE_GEOLOCATION_PERMISSION_REQUEST, WebKit2GeolocationPermissionRequestClass))
TYPE _WebKitGeolocationPermissionRequestClass
  AS GObjectClass parent_class
  _webkit_reserved0 AS SUB CDECL()
  _webkit_reserved1 AS SUB CDECL()
  _webkit_reserved2 AS SUB CDECL()
  _webkit_reserved3 AS SUB CDECL()
END TYPE
DECLARE FUNCTION webkit_geolocation_position_new(BYVAL AS double, BYVAL AS double, BYVAL AS double) AS WebKitGeolocationPosition PTR
DECLARE FUNCTION webkit_geolocation_position_copy(BYVAL AS WebKitGeolocationPosition PTR) AS WebKitGeolocationPosition PTR
DECLARE SUB webkit_geolocation_position_free(BYVAL AS WebKitGeolocationPosition PTR)
DECLARE SUB webkit_geolocation_position_set_altitude(BYVAL AS WebKitGeolocationPosition PTR, BYVAL AS double)
DECLARE SUB webkit_geolocation_position_set_altitude_accuracy(BYVAL AS WebKitGeolocationPosition PTR, BYVAL AS double)
DECLARE SUB webkit_geolocation_position_set_heading(BYVAL AS WebKitGeolocationPosition PTR, BYVAL AS double)
DECLARE SUB webkit_geolocation_position_set_speed(BYVAL AS WebKitGeolocationPosition PTR, BYVAL AS double)
DECLARE SUB webkit_geolocation_position_set_timestamp(BYVAL AS WebKitGeolocationPosition PTR, BYVAL AS guint64)
TYPE _WebKitHitTestResult
  AS GObject parent
  AS WebKitHitTestResultPrivate PTR priv
END TYPE
DECLARE FUNCTION webkit_hardware_acceleration_policy_get_type() AS GType
#DEFINE WEBKIT_TYPE_HARDWARE_ACCELERATION_POLICY (webkit_hardware_acceleration_policy_get_type())
DECLARE FUNCTION webkit_hit_test_result_get_type() AS GType
#DEFINE WEBKIT2_TYPE_HIT_TEST_RESULT (webkit_hit_test_result_get_type())
#DEFINE WEBKIT2_HIT_TEST_RESULT(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), WEBKIT2_TYPE_HIT_TEST_RESULT, WebKitHitTestResult))
#DEFINE WEBKIT2_HIT_TEST_RESULT_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), WEBKIT2_TYPE_HIT_TEST_RESULT, WebKit2HitTestResultClass))
#DEFINE WEBKIT2_IS_HIT_TEST_RESULT(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), WEBKIT2_TYPE_HIT_TEST_RESULT))
#DEFINE WEBKIT2_IS_CLASS_HIT_TEST_RESULT(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), WEBKIT2_TYPE_HIT_TEST_RESULT))
#DEFINE WEBKIT2_HIT_TEST_RESULT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), WEBKIT2_TYPE_HIT_TEST_RESULT, WebKit2HitTestResultClass))
DECLARE FUNCTION webkit_hit_test_result_context_is_editable(BYVAL AS WebKitHitTestResult PTR) AS gboolean
DECLARE FUNCTION webkit_hit_test_result_context_is_image(BYVAL AS WebKitHitTestResult PTR) AS gboolean
DECLARE FUNCTION webkit_hit_test_result_context_is_link(BYVAL AS WebKitHitTestResult PTR) AS gboolean
DECLARE FUNCTION webkit_hit_test_result_context_is_media(BYVAL AS WebKitHitTestResult PTR) AS gboolean
DECLARE FUNCTION webkit_hit_test_result_context_is_scrollbar(BYVAL AS WebKitHitTestResult PTR) AS gboolean
DECLARE FUNCTION webkit_hit_test_result_context_is_selection(BYVAL AS WebKitHitTestResult PTR) AS gboolean
DECLARE FUNCTION webkit_hit_test_result_get_context(BYVAL AS WebKitHitTestResult PTR) AS guint
DECLARE FUNCTION webkit_hit_test_result_get_image_uri(BYVAL AS WebKitHitTestResult PTR) AS const gchar PTR
DECLARE FUNCTION webkit_hit_test_result_get_link_label(BYVAL AS WebKitHitTestResult PTR) AS const gchar PTR
DECLARE FUNCTION webkit_hit_test_result_get_link_title(BYVAL AS WebKitHitTestResult PTR) AS const gchar PTR
DECLARE FUNCTION webkit_hit_test_result_get_link_uri(BYVAL AS WebKitHitTestResult PTR) AS const gchar PTR
DECLARE FUNCTION webkit_hit_test_result_get_media_uri(BYVAL AS WebKitHitTestResult PTR) AS const gchar PTR
TYPE _WebKitHitTestResultClass
  AS GObjectClass parent_class
  _webkit_reserved0 AS SUB CDECL()
  _webkit_reserved1 AS SUB CDECL()
  _webkit_reserved2 AS SUB CDECL()
  _webkit_reserved3 AS SUB CDECL()
END TYPE
TYPE _WebKitInputMethodContext
  AS GObject parent
  AS WebKitInputMethodContextPrivate PTR priv
END TYPE
DECLARE FUNCTION webkit_input_method_context_get_type() AS GType
#DEFINE WEBKIT2_TYPE_INPUT_METHOD_CONTEXT (webkit_input_method_context_get_type())
#DEFINE WEBKIT2_INPUT_METHOD_CONTEXT(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), WEBKIT2_TYPE_INPUT_METHOD_CONTEXT, WebKitInputMethodContext))
#DEFINE WEBKIT2_INPUT_METHOD_CONTEXT_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), WEBKIT2_TYPE_INPUT_METHOD_CONTEXT, WebKit2InputMethodContextClass))
#DEFINE WEBKIT2_IS_INPUT_METHOD_CONTEXT(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), WEBKIT2_TYPE_INPUT_METHOD_CONTEXT))
#DEFINE WEBKIT2_IS_CLASS_INPUT_METHOD_CONTEXT(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), WEBKIT2_TYPE_INPUT_METHOD_CONTEXT))
#DEFINE WEBKIT2_INPUT_METHOD_CONTEXT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), WEBKIT2_TYPE_INPUT_METHOD_CONTEXT, WebKit2InputMethodContextClass))
DECLARE FUNCTION webkit_input_method_context_filter_key_event(BYVAL AS WebKitInputMethodContext PTR, BYVAL AS GdkEventKey PTR) AS gboolean
DECLARE FUNCTION webkit_input_method_context_get_input_hints(BYVAL AS WebKitInputMethodContext PTR) AS WebKitInputHints
DECLARE FUNCTION webkit_input_method_context_get_input_purpose(BYVAL AS WebKitInputMethodContext PTR) AS WebKitInputPurpose
DECLARE SUB webkit_input_method_context_get_preedit(BYVAL AS WebKitInputMethodContext PTR, BYVAL AS char PTR PTR, BYVAL AS GList PTR PTR, BYVAL AS guint PTR)
DECLARE SUB webkit_input_method_context_notify_cursor_area(BYVAL AS WebKitInputMethodContext PTR, BYVAL AS gint /'int'/, BYVAL AS gint /'int'/, BYVAL AS gint /'int'/, BYVAL AS gint /'int'/)
DECLARE SUB webkit_input_method_context_notify_focus_in(BYVAL AS WebKitInputMethodContext PTR)
DECLARE SUB webkit_input_method_context_notify_focus_out(BYVAL AS WebKitInputMethodContext PTR)
DECLARE SUB webkit_input_method_context_notify_surrounding(BYVAL AS WebKitInputMethodContext PTR, BYVAL AS const gchar PTR, BYVAL AS gint /'int'/, BYVAL AS guint, BYVAL AS guint)
DECLARE SUB webkit_input_method_context_reset(BYVAL AS WebKitInputMethodContext PTR)
DECLARE SUB webkit_input_method_context_set_enable_preedit(BYVAL AS WebKitInputMethodContext PTR, BYVAL AS gboolean)
DECLARE SUB webkit_input_method_context_set_input_hints(BYVAL AS WebKitInputMethodContext PTR, BYVAL AS WebKitInputHints)
DECLARE SUB webkit_input_method_context_set_input_purpose(BYVAL AS WebKitInputMethodContext PTR, BYVAL AS WebKitInputPurpose)
TYPE _WebKitInputMethodContextClass
  AS GObjectClass parent_class
  preedit_started AS SUB CDECL(BYVAL AS WebKitInputMethodContext PTR)
  preedit_changed AS SUB CDECL(BYVAL AS WebKitInputMethodContext PTR)
  preedit_finished AS SUB CDECL(BYVAL AS WebKitInputMethodContext PTR)
  committed AS SUB CDECL(BYVAL AS WebKitInputMethodContext PTR, BYVAL AS const char PTR)
  delete_surrounding AS SUB CDECL(BYVAL AS WebKitInputMethodContext PTR, BYVAL AS gint /'int'/, BYVAL AS guint)
  set_enable_preedit AS SUB CDECL(BYVAL AS WebKitInputMethodContext PTR, BYVAL AS gboolean)
  get_preedit AS SUB CDECL(BYVAL AS WebKitInputMethodContext PTR, BYVAL AS gchar PTR PTR, BYVAL AS GList PTR PTR, BYVAL AS guint PTR)
  filter_key_event AS FUNCTION CDECL(BYVAL AS WebKitInputMethodContext PTR, BYVAL AS GdkEventKey PTR) AS gboolean
  notify_focus_in AS SUB CDECL(BYVAL AS WebKitInputMethodContext PTR)
  notify_focus_out AS SUB CDECL(BYVAL AS WebKitInputMethodContext PTR)
  notify_cursor_area AS SUB CDECL(BYVAL AS WebKitInputMethodContext PTR, BYVAL AS gint /'int'/, BYVAL AS gint /'int'/, BYVAL AS gint /'int'/, BYVAL AS gint /'int'/)
  notify_surrounding AS SUB CDECL(BYVAL AS WebKitInputMethodContext PTR, BYVAL AS const gchar PTR, BYVAL AS guint, BYVAL AS guint, BYVAL AS guint)
  reset AS SUB CDECL(BYVAL AS WebKitInputMethodContext PTR)
  _webkit_reserved0 AS SUB CDECL()
  _webkit_reserved1 AS SUB CDECL()
  _webkit_reserved2 AS SUB CDECL()
  _webkit_reserved3 AS SUB CDECL()
  _webkit_reserved4 AS SUB CDECL()
  _webkit_reserved5 AS SUB CDECL()
  _webkit_reserved6 AS SUB CDECL()
  _webkit_reserved7 AS SUB CDECL()
END TYPE
DECLARE FUNCTION webkit_input_method_underline_new(BYVAL AS guint, BYVAL AS guint) AS WebKitInputMethodUnderline PTR
DECLARE FUNCTION webkit_input_method_underline_copy(BYVAL AS WebKitInputMethodUnderline PTR) AS WebKitInputMethodUnderline PTR
DECLARE SUB webkit_input_method_underline_free(BYVAL AS WebKitInputMethodUnderline PTR)
DECLARE SUB webkit_input_method_underline_set_color(BYVAL AS WebKitInputMethodUnderline PTR, BYVAL AS const GdkRGBA PTR)
TYPE _WebKitInstallMissingMediaPluginsPermissionRequest
  AS GObject parent
  AS WebKitInstallMissingMediaPluginsPermissionRequestPrivate PTR priv
END TYPE
DECLARE FUNCTION webkit_input_purpose_get_type() AS GType
#DEFINE WEBKIT_TYPE_INPUT_PURPOSE (webkit_input_purpose_get_type())
DECLARE FUNCTION webkit_insecure_content_event_get_type() AS GType
#DEFINE WEBKIT_TYPE_INSECURE_CONTENT_EVENT (webkit_insecure_content_event_get_type())
DECLARE FUNCTION webkit_install_missing_media_plugins_permission_request_get_type() AS GType
#DEFINE WEBKIT2_TYPE_INSTALL_MISSING_MEDIA_PLUGINS_PERMISSION_REQUEST (webkit_install_missing_media_plugins_permission_request_get_type())
#DEFINE WEBKIT2_INSTALL_MISSING_MEDIA_PLUGINS_PERMISSION_REQUEST(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), WEBKIT2_TYPE_INSTALL_MISSING_MEDIA_PLUGINS_PERMISSION_REQUEST, WebKitInstallMissingMediaPluginsPermissionRequest))
#DEFINE WEBKIT2_INSTALL_MISSING_MEDIA_PLUGINS_PERMISSION_REQUEST_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), WEBKIT2_TYPE_INSTALL_MISSING_MEDIA_PLUGINS_PERMISSION_REQUEST, WebKit2InstallMissingMediaPluginsPermissionRequestClass))
#DEFINE WEBKIT2_IS_INSTALL_MISSING_MEDIA_PLUGINS_PERMISSION_REQUEST(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), WEBKIT2_TYPE_INSTALL_MISSING_MEDIA_PLUGINS_PERMISSION_REQUEST))
#DEFINE WEBKIT2_IS_CLASS_INSTALL_MISSING_MEDIA_PLUGINS_PERMISSION_REQUEST(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), WEBKIT2_TYPE_INSTALL_MISSING_MEDIA_PLUGINS_PERMISSION_REQUEST))
#DEFINE WEBKIT2_INSTALL_MISSING_MEDIA_PLUGINS_PERMISSION_REQUEST_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), WEBKIT2_TYPE_INSTALL_MISSING_MEDIA_PLUGINS_PERMISSION_REQUEST, WebKit2InstallMissingMediaPluginsPermissionRequestClass))
DECLARE FUNCTION webkit_install_missing_media_plugins_permission_request_get_description(BYVAL AS WebKitInstallMissingMediaPluginsPermissionRequest PTR) AS const gchar PTR
TYPE _WebKitInstallMissingMediaPluginsPermissionRequestClass
  AS GObjectClass parent_class
  _webkit_reserved0 AS SUB CDECL()
  _webkit_reserved1 AS SUB CDECL()
  _webkit_reserved2 AS SUB CDECL()
  _webkit_reserved3 AS SUB CDECL()
END TYPE
DECLARE FUNCTION webkit_javascript_error_get_type() AS GType
#DEFINE WEBKIT_TYPE_JAVASCRIPT_ERROR (webkit_javascript_error_get_type())
DECLARE FUNCTION webkit_javascript_result_get_global_context(BYVAL AS WebKitJavascriptResult PTR) AS JSGlobalContextRef PTR
DECLARE FUNCTION webkit_javascript_result_get_js_value(BYVAL AS WebKitJavascriptResult PTR) AS JSCValue PTR
DECLARE FUNCTION webkit_javascript_result_get_value(BYVAL AS WebKitJavascriptResult PTR) AS JSValueRef PTR
DECLARE FUNCTION webkit_javascript_result_ref(BYVAL AS WebKitJavascriptResult PTR) AS WebKitJavascriptResult PTR
DECLARE SUB webkit_javascript_result_unref(BYVAL AS WebKitJavascriptResult PTR)
DECLARE FUNCTION webkit_load_event_get_type() AS GType
#DEFINE WEBKIT_TYPE_LOAD_EVENT (webkit_load_event_get_type())
DECLARE FUNCTION webkit_mime_info_get_description(BYVAL AS WebKitMimeInfo PTR) AS const gchar PTR
DECLARE FUNCTION webkit_mime_info_get_extensions(BYVAL AS WebKitMimeInfo PTR) AS const gchar ptr const /'const gchar* const'/ PTR
DECLARE FUNCTION webkit_mime_info_get_mime_type(BYVAL AS WebKitMimeInfo PTR) AS const gchar PTR
DECLARE FUNCTION webkit_mime_info_ref(BYVAL AS WebKitMimeInfo PTR) AS WebKitMimeInfo PTR
DECLARE SUB webkit_mime_info_unref(BYVAL AS WebKitMimeInfo PTR)
DECLARE FUNCTION webkit_navigation_action_copy(BYVAL AS WebKitNavigationAction PTR) AS WebKitNavigationAction PTR
DECLARE SUB webkit_navigation_action_free(BYVAL AS WebKitNavigationAction PTR)
DECLARE FUNCTION webkit_navigation_action_get_modifiers(BYVAL AS WebKitNavigationAction PTR) AS guint
DECLARE FUNCTION webkit_navigation_action_get_mouse_button(BYVAL AS WebKitNavigationAction PTR) AS guint
DECLARE FUNCTION webkit_navigation_action_get_navigation_type(BYVAL AS WebKitNavigationAction PTR) AS WebKitNavigationType
DECLARE FUNCTION webkit_navigation_action_get_request(BYVAL AS WebKitNavigationAction PTR) AS WebKitURIRequest PTR
DECLARE FUNCTION webkit_navigation_action_is_redirect(BYVAL AS WebKitNavigationAction PTR) AS gboolean
DECLARE FUNCTION webkit_navigation_action_is_user_gesture(BYVAL AS WebKitNavigationAction PTR) AS gboolean
TYPE _WebKitNavigationPolicyDecision
  AS WebKitPolicyDecision parent
  AS WebKitNavigationPolicyDecisionPrivate PTR priv
END TYPE
DECLARE FUNCTION webkit_navigation_policy_decision_get_type() AS GType
#DEFINE WEBKIT2_TYPE_NAVIGATION_POLICY_DECISION (webkit_navigation_policy_decision_get_type())
#DEFINE WEBKIT2_NAVIGATION_POLICY_DECISION(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), WEBKIT2_TYPE_NAVIGATION_POLICY_DECISION, WebKitNavigationPolicyDecision))
#DEFINE WEBKIT2_NAVIGATION_POLICY_DECISION_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), WEBKIT2_TYPE_NAVIGATION_POLICY_DECISION, WebKit2NavigationPolicyDecisionClass))
#DEFINE WEBKIT2_IS_NAVIGATION_POLICY_DECISION(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), WEBKIT2_TYPE_NAVIGATION_POLICY_DECISION))
#DEFINE WEBKIT2_IS_CLASS_NAVIGATION_POLICY_DECISION(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), WEBKIT2_TYPE_NAVIGATION_POLICY_DECISION))
#DEFINE WEBKIT2_NAVIGATION_POLICY_DECISION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), WEBKIT2_TYPE_NAVIGATION_POLICY_DECISION, WebKit2NavigationPolicyDecisionClass))
DECLARE FUNCTION webkit_navigation_policy_decision_get_frame_name(BYVAL AS WebKitNavigationPolicyDecision PTR) AS const gchar PTR
DECLARE FUNCTION webkit_navigation_policy_decision_get_modifiers(BYVAL AS WebKitNavigationPolicyDecision PTR) AS guint
DECLARE FUNCTION webkit_navigation_policy_decision_get_mouse_button(BYVAL AS WebKitNavigationPolicyDecision PTR) AS guint
DECLARE FUNCTION webkit_navigation_policy_decision_get_navigation_action(BYVAL AS WebKitNavigationPolicyDecision PTR) AS WebKitNavigationAction PTR
DECLARE FUNCTION webkit_navigation_policy_decision_get_navigation_type(BYVAL AS WebKitNavigationPolicyDecision PTR) AS WebKitNavigationType
DECLARE FUNCTION webkit_navigation_policy_decision_get_request(BYVAL AS WebKitNavigationPolicyDecision PTR) AS WebKitURIRequest PTR
TYPE _WebKitNavigationPolicyDecisionClass
  AS WebKitPolicyDecisionClass parent_class
  _webkit_reserved0 AS SUB CDECL()
  _webkit_reserved1 AS SUB CDECL()
  _webkit_reserved2 AS SUB CDECL()
  _webkit_reserved3 AS SUB CDECL()
END TYPE
DECLARE FUNCTION webkit_navigation_type_get_type() AS GType
#DEFINE WEBKIT_TYPE_NAVIGATION_TYPE (webkit_navigation_type_get_type())
DECLARE FUNCTION webkit_network_error_get_type() AS GType
#DEFINE WEBKIT_TYPE_NETWORK_ERROR (webkit_network_error_get_type())
DECLARE FUNCTION webkit_network_proxy_mode_get_type() AS GType
#DEFINE WEBKIT_TYPE_NETWORK_PROXY_MODE (webkit_network_proxy_mode_get_type())
DECLARE FUNCTION webkit_network_proxy_settings_new(BYVAL AS const gchar PTR, BYVAL AS const gchar ptr const /'const gchar* const'/ PTR) AS WebKitNetworkProxySettings PTR
DECLARE SUB webkit_network_proxy_settings_add_proxy_for_scheme(BYVAL AS WebKitNetworkProxySettings PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR)
DECLARE FUNCTION webkit_network_proxy_settings_copy(BYVAL AS WebKitNetworkProxySettings PTR) AS WebKitNetworkProxySettings PTR
DECLARE SUB webkit_network_proxy_settings_free(BYVAL AS WebKitNetworkProxySettings PTR)
TYPE _WebKitNotification
  AS GObject parent
  AS WebKitNotificationPrivate PTR priv
END TYPE
DECLARE FUNCTION webkit_notification_get_type() AS GType
#DEFINE WEBKIT2_TYPE_NOTIFICATION (webkit_notification_get_type())
#DEFINE WEBKIT2_NOTIFICATION(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), WEBKIT2_TYPE_NOTIFICATION, WebKitNotification))
#DEFINE WEBKIT2_NOTIFICATION_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), WEBKIT2_TYPE_NOTIFICATION, WebKit2NotificationClass))
#DEFINE WEBKIT2_IS_NOTIFICATION(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), WEBKIT2_TYPE_NOTIFICATION))
#DEFINE WEBKIT2_IS_CLASS_NOTIFICATION(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), WEBKIT2_TYPE_NOTIFICATION))
#DEFINE WEBKIT2_NOTIFICATION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), WEBKIT2_TYPE_NOTIFICATION, WebKit2NotificationClass))
DECLARE SUB webkit_notification_clicked(BYVAL AS WebKitNotification PTR)
DECLARE SUB webkit_notification_close(BYVAL AS WebKitNotification PTR)
DECLARE FUNCTION webkit_notification_get_body(BYVAL AS WebKitNotification PTR) AS const gchar PTR
DECLARE FUNCTION webkit_notification_get_id(BYVAL AS WebKitNotification PTR) AS guint64
DECLARE FUNCTION webkit_notification_get_tag(BYVAL AS WebKitNotification PTR) AS const gchar PTR
DECLARE FUNCTION webkit_notification_get_title(BYVAL AS WebKitNotification PTR) AS const gchar PTR
TYPE _WebKitNotificationClass
  AS GObjectClass parent_class
  _webkit_reserved0 AS SUB CDECL()
  _webkit_reserved1 AS SUB CDECL()
  _webkit_reserved2 AS SUB CDECL()
  _webkit_reserved3 AS SUB CDECL()
  _webkit_reserved4 AS SUB CDECL()
  _webkit_reserved5 AS SUB CDECL()
END TYPE
TYPE _WebKitNotificationPermissionRequest
  AS GObject parent
  AS WebKitNotificationPermissionRequestPrivate PTR priv
END TYPE
DECLARE FUNCTION webkit_notification_permission_request_get_type() AS GType
#DEFINE WEBKIT2_TYPE_NOTIFICATION_PERMISSION_REQUEST (webkit_notification_permission_request_get_type())
#DEFINE WEBKIT2_NOTIFICATION_PERMISSION_REQUEST(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), WEBKIT2_TYPE_NOTIFICATION_PERMISSION_REQUEST, WebKitNotificationPermissionRequest))
#DEFINE WEBKIT2_NOTIFICATION_PERMISSION_REQUEST_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), WEBKIT2_TYPE_NOTIFICATION_PERMISSION_REQUEST, WebKit2NotificationPermissionRequestClass))
#DEFINE WEBKIT2_IS_NOTIFICATION_PERMISSION_REQUEST(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), WEBKIT2_TYPE_NOTIFICATION_PERMISSION_REQUEST))
#DEFINE WEBKIT2_IS_CLASS_NOTIFICATION_PERMISSION_REQUEST(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), WEBKIT2_TYPE_NOTIFICATION_PERMISSION_REQUEST))
#DEFINE WEBKIT2_NOTIFICATION_PERMISSION_REQUEST_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), WEBKIT2_TYPE_NOTIFICATION_PERMISSION_REQUEST, WebKit2NotificationPermissionRequestClass))
TYPE _WebKitNotificationPermissionRequestClass
  AS GObjectClass parent_class
END TYPE
TYPE _WebKitOptionMenu
  AS GObject parent
  AS WebKitOptionMenuPrivate PTR priv
END TYPE
DECLARE FUNCTION webkit_option_menu_get_type() AS GType
#DEFINE WEBKIT2_TYPE_OPTION_MENU (webkit_option_menu_get_type())
#DEFINE WEBKIT2_OPTION_MENU(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), WEBKIT2_TYPE_OPTION_MENU, WebKitOptionMenu))
#DEFINE WEBKIT2_OPTION_MENU_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), WEBKIT2_TYPE_OPTION_MENU, WebKit2OptionMenuClass))
#DEFINE WEBKIT2_IS_OPTION_MENU(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), WEBKIT2_TYPE_OPTION_MENU))
#DEFINE WEBKIT2_IS_CLASS_OPTION_MENU(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), WEBKIT2_TYPE_OPTION_MENU))
#DEFINE WEBKIT2_OPTION_MENU_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), WEBKIT2_TYPE_OPTION_MENU, WebKit2OptionMenuClass))
DECLARE SUB webkit_option_menu_activate_item(BYVAL AS WebKitOptionMenu PTR, BYVAL AS guint)
DECLARE SUB webkit_option_menu_close(BYVAL AS WebKitOptionMenu PTR)
DECLARE FUNCTION webkit_option_menu_get_item(BYVAL AS WebKitOptionMenu PTR, BYVAL AS guint) AS WebKitOptionMenuItem PTR
DECLARE FUNCTION webkit_option_menu_get_n_items(BYVAL AS WebKitOptionMenu PTR) AS guint
DECLARE SUB webkit_option_menu_select_item(BYVAL AS WebKitOptionMenu PTR, BYVAL AS guint)
TYPE _WebKitOptionMenuClass
  AS GObjectClass parent_class
  _webkit_reserved0 AS SUB CDECL()
  _webkit_reserved1 AS SUB CDECL()
  _webkit_reserved2 AS SUB CDECL()
  _webkit_reserved3 AS SUB CDECL()
END TYPE
DECLARE FUNCTION webkit_option_menu_item_copy(BYVAL AS WebKitOptionMenuItem PTR) AS WebKitOptionMenuItem PTR
DECLARE SUB webkit_option_menu_item_free(BYVAL AS WebKitOptionMenuItem PTR)
DECLARE FUNCTION webkit_option_menu_item_get_label(BYVAL AS WebKitOptionMenuItem PTR) AS const gchar PTR
DECLARE FUNCTION webkit_option_menu_item_get_tooltip(BYVAL AS WebKitOptionMenuItem PTR) AS const gchar PTR
DECLARE FUNCTION webkit_option_menu_item_is_enabled(BYVAL AS WebKitOptionMenuItem PTR) AS gboolean
DECLARE FUNCTION webkit_option_menu_item_is_group_child(BYVAL AS WebKitOptionMenuItem PTR) AS gboolean
DECLARE FUNCTION webkit_option_menu_item_is_group_label(BYVAL AS WebKitOptionMenuItem PTR) AS gboolean
DECLARE FUNCTION webkit_option_menu_item_is_selected(BYVAL AS WebKitOptionMenuItem PTR) AS gboolean
DECLARE FUNCTION webkit_permission_request_get_type() AS GType
#DEFINE WEBKIT2_TYPE_PERMISSION_REQUEST (webkit_permission_request_get_type())
#DEFINE WEBKIT2_PERMISSION_REQUEST(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), WEBKIT2_TYPE_PERMISSION_REQUEST, WebKitPermissionRequest))
#DEFINE WEBKIT2_PERMISSION_REQUEST_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), WEBKIT2_TYPE_PERMISSION_REQUEST, WebKit2PermissionRequestIface))
#DEFINE WEBKIT2_IS_PERMISSION_REQUEST(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), WEBKIT2_TYPE_PERMISSION_REQUEST))
#DEFINE WEBKIT2_PERMISSION_REQUEST_GET_IFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE((obj), WEBKIT2_TYPE_PERMISSION_REQUEST, WebKit2PermissionRequestIface))
DECLARE SUB webkit_permission_request_allow(BYVAL AS WebKitPermissionRequest PTR)
DECLARE SUB webkit_permission_request_deny(BYVAL AS WebKitPermissionRequest PTR)
TYPE _WebKitPermissionRequestIface
  AS GTypeInterface parent_interface
  allow AS SUB CDECL(BYVAL AS WebKitPermissionRequest PTR)
  deny AS SUB CDECL(BYVAL AS WebKitPermissionRequest PTR)
END TYPE
TYPE _WebKitPlugin
  AS GObject parent
  AS WebKitPluginPrivate PTR priv
END TYPE
DECLARE FUNCTION webkit_plugin_get_type() AS GType
#DEFINE WEBKIT2_TYPE_PLUGIN (webkit_plugin_get_type())
#DEFINE WEBKIT2_PLUGIN(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), WEBKIT2_TYPE_PLUGIN, WebKitPlugin))
#DEFINE WEBKIT2_PLUGIN_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), WEBKIT2_TYPE_PLUGIN, WebKit2PluginClass))
#DEFINE WEBKIT2_IS_PLUGIN(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), WEBKIT2_TYPE_PLUGIN))
#DEFINE WEBKIT2_IS_CLASS_PLUGIN(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), WEBKIT2_TYPE_PLUGIN))
#DEFINE WEBKIT2_PLUGIN_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), WEBKIT2_TYPE_PLUGIN, WebKit2PluginClass))
DECLARE FUNCTION webkit_plugin_get_description(BYVAL AS WebKitPlugin PTR) AS const gchar PTR
DECLARE FUNCTION webkit_plugin_get_mime_info_list(BYVAL AS WebKitPlugin PTR) AS GList PTR
DECLARE FUNCTION webkit_plugin_get_name(BYVAL AS WebKitPlugin PTR) AS const gchar PTR
DECLARE FUNCTION webkit_plugin_get_path(BYVAL AS WebKitPlugin PTR) AS const gchar PTR
TYPE _WebKitPluginClass
  AS GObjectClass parent_class
  _webkit_reserved0 AS SUB CDECL()
  _webkit_reserved1 AS SUB CDECL()
  _webkit_reserved2 AS SUB CDECL()
  _webkit_reserved3 AS SUB CDECL()
END TYPE
DECLARE FUNCTION webkit_plugin_error_get_type() AS GType
#DEFINE WEBKIT_TYPE_PLUGIN_ERROR (webkit_plugin_error_get_type())
TYPE _WebKitPointerLockPermissionRequest
  AS GObject parent
  AS WebKitPointerLockPermissionRequestPrivate PTR priv
END TYPE
DECLARE FUNCTION webkit_pointer_lock_permission_request_get_type() AS GType
#DEFINE WEBKIT2_TYPE_POINTER_LOCK_PERMISSION_REQUEST (webkit_pointer_lock_permission_request_get_type())
#DEFINE WEBKIT2_POINTER_LOCK_PERMISSION_REQUEST(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), WEBKIT2_TYPE_POINTER_LOCK_PERMISSION_REQUEST, WebKitPointerLockPermissionRequest))
#DEFINE WEBKIT2_POINTER_LOCK_PERMISSION_REQUEST_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), WEBKIT2_TYPE_POINTER_LOCK_PERMISSION_REQUEST, WebKit2PointerLockPermissionRequestClass))
#DEFINE WEBKIT2_IS_POINTER_LOCK_PERMISSION_REQUEST(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), WEBKIT2_TYPE_POINTER_LOCK_PERMISSION_REQUEST))
#DEFINE WEBKIT2_IS_CLASS_POINTER_LOCK_PERMISSION_REQUEST(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), WEBKIT2_TYPE_POINTER_LOCK_PERMISSION_REQUEST))
#DEFINE WEBKIT2_POINTER_LOCK_PERMISSION_REQUEST_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), WEBKIT2_TYPE_POINTER_LOCK_PERMISSION_REQUEST, WebKit2PointerLockPermissionRequestClass))
TYPE _WebKitPointerLockPermissionRequestClass
  AS GObjectClass parent_class
  _webkit_reserved0 AS SUB CDECL()
  _webkit_reserved1 AS SUB CDECL()
  _webkit_reserved2 AS SUB CDECL()
  _webkit_reserved3 AS SUB CDECL()
END TYPE
TYPE _WebKitPrintCustomWidget
  AS GObject parent
  AS WebKitPrintCustomWidgetPrivate PTR priv
END TYPE
DECLARE FUNCTION webkit_policy_decision_type_get_type() AS GType
#DEFINE WEBKIT_TYPE_POLICY_DECISION_TYPE (webkit_policy_decision_type_get_type())
DECLARE FUNCTION webkit_policy_error_get_type() AS GType
#DEFINE WEBKIT_TYPE_POLICY_ERROR (webkit_policy_error_get_type())
DECLARE FUNCTION webkit_print_custom_widget_get_type() AS GType
#DEFINE WEBKIT2_TYPE_PRINT_CUSTOM_WIDGET (webkit_print_custom_widget_get_type())
#DEFINE WEBKIT2_PRINT_CUSTOM_WIDGET(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), WEBKIT2_TYPE_PRINT_CUSTOM_WIDGET, WebKitPrintCustomWidget))
#DEFINE WEBKIT2_PRINT_CUSTOM_WIDGET_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), WEBKIT2_TYPE_PRINT_CUSTOM_WIDGET, WebKit2PrintCustomWidgetClass))
#DEFINE WEBKIT2_IS_PRINT_CUSTOM_WIDGET(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), WEBKIT2_TYPE_PRINT_CUSTOM_WIDGET))
#DEFINE WEBKIT2_IS_CLASS_PRINT_CUSTOM_WIDGET(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), WEBKIT2_TYPE_PRINT_CUSTOM_WIDGET))
#DEFINE WEBKIT2_PRINT_CUSTOM_WIDGET_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), WEBKIT2_TYPE_PRINT_CUSTOM_WIDGET, WebKit2PrintCustomWidgetClass))
DECLARE FUNCTION webkit_print_custom_widget_new(BYVAL AS GtkWidget PTR, BYVAL AS const char PTR) AS WebKitPrintCustomWidget PTR
DECLARE FUNCTION webkit_print_custom_widget_get_title(BYVAL AS WebKitPrintCustomWidget PTR) AS const gchar PTR
DECLARE FUNCTION webkit_print_custom_widget_get_widget(BYVAL AS WebKitPrintCustomWidget PTR) AS GtkWidget PTR
TYPE _WebKitPrintCustomWidgetClass
  AS GObjectClass parent_class
  apply AS SUB CDECL(BYVAL AS WebKitPrintCustomWidget PTR, BYVAL AS GtkWidget PTR)
  update AS SUB CDECL(BYVAL AS WebKitPrintCustomWidget PTR, BYVAL AS GtkWidget PTR, BYVAL AS GtkPageSetup PTR, BYVAL AS GtkPrintSettings PTR)
  _webkit_reserved0 AS SUB CDECL()
  _webkit_reserved1 AS SUB CDECL()
  _webkit_reserved2 AS SUB CDECL()
  _webkit_reserved3 AS SUB CDECL()
END TYPE
TYPE _WebKitPrintOperation
  AS GObject parent
  AS WebKitPrintOperationPrivate PTR priv
END TYPE
DECLARE FUNCTION webkit_print_error_get_type() AS GType
#DEFINE WEBKIT_TYPE_PRINT_ERROR (webkit_print_error_get_type())
DECLARE FUNCTION webkit_print_operation_get_type() AS GType
#DEFINE WEBKIT2_TYPE_PRINT_OPERATION (webkit_print_operation_get_type())
#DEFINE WEBKIT2_PRINT_OPERATION(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), WEBKIT2_TYPE_PRINT_OPERATION, WebKitPrintOperation))
#DEFINE WEBKIT2_PRINT_OPERATION_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), WEBKIT2_TYPE_PRINT_OPERATION, WebKit2PrintOperationClass))
#DEFINE WEBKIT2_IS_PRINT_OPERATION(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), WEBKIT2_TYPE_PRINT_OPERATION))
#DEFINE WEBKIT2_IS_CLASS_PRINT_OPERATION(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), WEBKIT2_TYPE_PRINT_OPERATION))
#DEFINE WEBKIT2_PRINT_OPERATION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), WEBKIT2_TYPE_PRINT_OPERATION, WebKit2PrintOperationClass))
DECLARE FUNCTION webkit_print_operation_new(BYVAL AS WebKitWebView PTR) AS WebKitPrintOperation PTR
DECLARE FUNCTION webkit_print_operation_get_page_setup(BYVAL AS WebKitPrintOperation PTR) AS GtkPageSetup PTR
DECLARE FUNCTION webkit_print_operation_get_print_settings(BYVAL AS WebKitPrintOperation PTR) AS GtkPrintSettings PTR
DECLARE SUB webkit_print_operation_print(BYVAL AS WebKitPrintOperation PTR)
DECLARE FUNCTION webkit_print_operation_run_dialog(BYVAL AS WebKitPrintOperation PTR, BYVAL AS GtkWindow PTR) AS WebKitPrintOperationResponse
DECLARE SUB webkit_print_operation_set_page_setup(BYVAL AS WebKitPrintOperation PTR, BYVAL AS GtkPageSetup PTR)
DECLARE SUB webkit_print_operation_set_print_settings(BYVAL AS WebKitPrintOperation PTR, BYVAL AS GtkPrintSettings PTR)
TYPE _WebKitPrintOperationClass
  AS GObjectClass parent_class
  _webkit_reserved0 AS SUB CDECL()
  _webkit_reserved1 AS SUB CDECL()
  _webkit_reserved2 AS SUB CDECL()
  _webkit_reserved3 AS SUB CDECL()
END TYPE
TYPE _WebKitResponsePolicyDecision
  AS WebKitPolicyDecision parent
  AS WebKitResponsePolicyDecisionPrivate PTR priv
END TYPE
DECLARE FUNCTION webkit_print_operation_response_get_type() AS GType
#DEFINE WEBKIT_TYPE_PRINT_OPERATION_RESPONSE (webkit_print_operation_response_get_type())
DECLARE FUNCTION webkit_process_model_get_type() AS GType
#DEFINE WEBKIT_TYPE_PROCESS_MODEL (webkit_process_model_get_type())
DECLARE FUNCTION webkit_response_policy_decision_get_type() AS GType
#DEFINE WEBKIT2_TYPE_RESPONSE_POLICY_DECISION (webkit_response_policy_decision_get_type())
#DEFINE WEBKIT2_RESPONSE_POLICY_DECISION(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), WEBKIT2_TYPE_RESPONSE_POLICY_DECISION, WebKitResponsePolicyDecision))
#DEFINE WEBKIT2_RESPONSE_POLICY_DECISION_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), WEBKIT2_TYPE_RESPONSE_POLICY_DECISION, WebKit2ResponsePolicyDecisionClass))
#DEFINE WEBKIT2_IS_RESPONSE_POLICY_DECISION(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), WEBKIT2_TYPE_RESPONSE_POLICY_DECISION))
#DEFINE WEBKIT2_IS_CLASS_RESPONSE_POLICY_DECISION(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), WEBKIT2_TYPE_RESPONSE_POLICY_DECISION))
#DEFINE WEBKIT2_RESPONSE_POLICY_DECISION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), WEBKIT2_TYPE_RESPONSE_POLICY_DECISION, WebKit2ResponsePolicyDecisionClass))
DECLARE FUNCTION webkit_response_policy_decision_get_request(BYVAL AS WebKitResponsePolicyDecision PTR) AS WebKitURIRequest PTR
DECLARE FUNCTION webkit_response_policy_decision_get_response(BYVAL AS WebKitResponsePolicyDecision PTR) AS WebKitURIResponse PTR
DECLARE FUNCTION webkit_response_policy_decision_is_mime_type_supported(BYVAL AS WebKitResponsePolicyDecision PTR) AS gboolean
TYPE _WebKitResponsePolicyDecisionClass
  AS WebKitPolicyDecisionClass parent_class
  _webkit_reserved0 AS SUB CDECL()
  _webkit_reserved1 AS SUB CDECL()
  _webkit_reserved2 AS SUB CDECL()
  _webkit_reserved3 AS SUB CDECL()
END TYPE
DECLARE FUNCTION webkit_save_mode_get_type() AS GType
#DEFINE WEBKIT_TYPE_SAVE_MODE (webkit_save_mode_get_type())
DECLARE SUB webkit_script_dialog_close(BYVAL AS WebKitScriptDialog PTR)
DECLARE SUB webkit_script_dialog_confirm_set_confirmed(BYVAL AS WebKitScriptDialog PTR, BYVAL AS gboolean)
DECLARE FUNCTION webkit_script_dialog_get_dialog_type(BYVAL AS WebKitScriptDialog PTR) AS WebKitScriptDialogType
DECLARE FUNCTION webkit_script_dialog_get_message(BYVAL AS WebKitScriptDialog PTR) AS const gchar PTR
DECLARE FUNCTION webkit_script_dialog_prompt_get_default_text(BYVAL AS WebKitScriptDialog PTR) AS const gchar PTR
DECLARE SUB webkit_script_dialog_prompt_set_text(BYVAL AS WebKitScriptDialog PTR, BYVAL AS const gchar PTR)
DECLARE FUNCTION webkit_script_dialog_ref(BYVAL AS WebKitScriptDialog PTR) AS WebKitScriptDialog PTR
DECLARE SUB webkit_script_dialog_unref(BYVAL AS WebKitScriptDialog PTR)
TYPE _WebKitSecurityManager
  AS GObject parent
  AS WebKitSecurityManagerPrivate PTR priv
END TYPE
DECLARE FUNCTION webkit_script_dialog_type_get_type() AS GType
#DEFINE WEBKIT_TYPE_SCRIPT_DIALOG_TYPE (webkit_script_dialog_type_get_type())
DECLARE FUNCTION webkit_security_manager_get_type() AS GType
#DEFINE WEBKIT2_TYPE_SECURITY_MANAGER (webkit_security_manager_get_type())
#DEFINE WEBKIT2_SECURITY_MANAGER(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), WEBKIT2_TYPE_SECURITY_MANAGER, WebKitSecurityManager))
#DEFINE WEBKIT2_SECURITY_MANAGER_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), WEBKIT2_TYPE_SECURITY_MANAGER, WebKit2SecurityManagerClass))
#DEFINE WEBKIT2_IS_SECURITY_MANAGER(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), WEBKIT2_TYPE_SECURITY_MANAGER))
#DEFINE WEBKIT2_IS_CLASS_SECURITY_MANAGER(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), WEBKIT2_TYPE_SECURITY_MANAGER))
#DEFINE WEBKIT2_SECURITY_MANAGER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), WEBKIT2_TYPE_SECURITY_MANAGER, WebKit2SecurityManagerClass))
DECLARE SUB webkit_security_manager_register_uri_scheme_as_cors_enabled(BYVAL AS WebKitSecurityManager PTR, BYVAL AS const gchar PTR)
DECLARE SUB webkit_security_manager_register_uri_scheme_as_display_isolated(BYVAL AS WebKitSecurityManager PTR, BYVAL AS const gchar PTR)
DECLARE SUB webkit_security_manager_register_uri_scheme_as_empty_document(BYVAL AS WebKitSecurityManager PTR, BYVAL AS const gchar PTR)
DECLARE SUB webkit_security_manager_register_uri_scheme_as_local(BYVAL AS WebKitSecurityManager PTR, BYVAL AS const gchar PTR)
DECLARE SUB webkit_security_manager_register_uri_scheme_as_no_access(BYVAL AS WebKitSecurityManager PTR, BYVAL AS const gchar PTR)
DECLARE SUB webkit_security_manager_register_uri_scheme_as_secure(BYVAL AS WebKitSecurityManager PTR, BYVAL AS const gchar PTR)
DECLARE FUNCTION webkit_security_manager_uri_scheme_is_cors_enabled(BYVAL AS WebKitSecurityManager PTR, BYVAL AS const gchar PTR) AS gboolean
DECLARE FUNCTION webkit_security_manager_uri_scheme_is_display_isolated(BYVAL AS WebKitSecurityManager PTR, BYVAL AS const gchar PTR) AS gboolean
DECLARE FUNCTION webkit_security_manager_uri_scheme_is_empty_document(BYVAL AS WebKitSecurityManager PTR, BYVAL AS const gchar PTR) AS gboolean
DECLARE FUNCTION webkit_security_manager_uri_scheme_is_local(BYVAL AS WebKitSecurityManager PTR, BYVAL AS const gchar PTR) AS gboolean
DECLARE FUNCTION webkit_security_manager_uri_scheme_is_no_access(BYVAL AS WebKitSecurityManager PTR, BYVAL AS const gchar PTR) AS gboolean
DECLARE FUNCTION webkit_security_manager_uri_scheme_is_secure(BYVAL AS WebKitSecurityManager PTR, BYVAL AS const gchar PTR) AS gboolean
TYPE _WebKitSecurityManagerClass
  AS GObjectClass parent_class
  _webkit_reserved0 AS SUB CDECL()
  _webkit_reserved1 AS SUB CDECL()
  _webkit_reserved2 AS SUB CDECL()
  _webkit_reserved3 AS SUB CDECL()
END TYPE
DECLARE FUNCTION webkit_security_origin_new(BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS guint16) AS WebKitSecurityOrigin PTR
DECLARE FUNCTION webkit_security_origin_new_for_uri(BYVAL AS const gchar PTR) AS WebKitSecurityOrigin PTR
DECLARE FUNCTION webkit_security_origin_get_host(BYVAL AS WebKitSecurityOrigin PTR) AS const gchar PTR
DECLARE FUNCTION webkit_security_origin_get_port(BYVAL AS WebKitSecurityOrigin PTR) AS guint16
DECLARE FUNCTION webkit_security_origin_get_protocol(BYVAL AS WebKitSecurityOrigin PTR) AS const gchar PTR
DECLARE FUNCTION webkit_security_origin_is_opaque(BYVAL AS WebKitSecurityOrigin PTR) AS gboolean
DECLARE FUNCTION webkit_security_origin_ref(BYVAL AS WebKitSecurityOrigin PTR) AS WebKitSecurityOrigin PTR
DECLARE FUNCTION webkit_security_origin_to_string(BYVAL AS WebKitSecurityOrigin PTR) AS gchar PTR
DECLARE SUB webkit_security_origin_unref(BYVAL AS WebKitSecurityOrigin PTR)
TYPE _WebKitSettings
  AS GObject parent_instance
  AS WebKitSettingsPrivate PTR priv
END TYPE
DECLARE FUNCTION webkit_settings_get_type() AS GType
#DEFINE WEBKIT2_TYPE_SETTINGS (webkit_settings_get_type())
#DEFINE WEBKIT2_SETTINGS(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), WEBKIT2_TYPE_SETTINGS, WebKitSettings))
#DEFINE WEBKIT2_SETTINGS_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), WEBKIT2_TYPE_SETTINGS, WebKit2SettingsClass))
#DEFINE WEBKIT2_IS_SETTINGS(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), WEBKIT2_TYPE_SETTINGS))
#DEFINE WEBKIT2_IS_CLASS_SETTINGS(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), WEBKIT2_TYPE_SETTINGS))
#DEFINE WEBKIT2_SETTINGS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), WEBKIT2_TYPE_SETTINGS, WebKit2SettingsClass))
DECLARE FUNCTION webkit_settings_new() AS WebKitSettings PTR
DECLARE FUNCTION webkit_settings_new_with_settings(BYVAL AS const gchar PTR, ...) AS WebKitSettings PTR
DECLARE FUNCTION webkit_settings_font_size_to_pixels(BYVAL AS guint32) AS guint32
DECLARE FUNCTION webkit_settings_font_size_to_points(BYVAL AS guint32) AS guint32
DECLARE FUNCTION webkit_settings_get_allow_file_access_from_file_urls(BYVAL AS WebKitSettings PTR) AS gboolean
DECLARE FUNCTION webkit_settings_get_allow_modal_dialogs(BYVAL AS WebKitSettings PTR) AS gboolean
DECLARE FUNCTION webkit_settings_get_allow_top_navigation_to_data_urls(BYVAL AS WebKitSettings PTR) AS gboolean
DECLARE FUNCTION webkit_settings_get_allow_universal_access_from_file_urls(BYVAL AS WebKitSettings PTR) AS gboolean
DECLARE FUNCTION webkit_settings_get_auto_load_images(BYVAL AS WebKitSettings PTR) AS gboolean
DECLARE FUNCTION webkit_settings_get_cursive_font_family(BYVAL AS WebKitSettings PTR) AS const gchar PTR
DECLARE FUNCTION webkit_settings_get_default_charset(BYVAL AS WebKitSettings PTR) AS const gchar PTR
DECLARE FUNCTION webkit_settings_get_default_font_family(BYVAL AS WebKitSettings PTR) AS const gchar PTR
DECLARE FUNCTION webkit_settings_get_default_font_size(BYVAL AS WebKitSettings PTR) AS guint32
DECLARE FUNCTION webkit_settings_get_default_monospace_font_size(BYVAL AS WebKitSettings PTR) AS guint32
DECLARE FUNCTION webkit_settings_get_draw_compositing_indicators(BYVAL AS WebKitSettings PTR) AS gboolean
DECLARE FUNCTION webkit_settings_get_enable_accelerated_2d_canvas(BYVAL AS WebKitSettings PTR) AS gboolean
DECLARE FUNCTION webkit_settings_get_enable_back_forward_navigation_gestures(BYVAL AS WebKitSettings PTR) AS gboolean
DECLARE FUNCTION webkit_settings_get_enable_caret_browsing(BYVAL AS WebKitSettings PTR) AS gboolean
DECLARE FUNCTION webkit_settings_get_enable_developer_extras(BYVAL AS WebKitSettings PTR) AS gboolean
DECLARE FUNCTION webkit_settings_get_enable_dns_prefetching(BYVAL AS WebKitSettings PTR) AS gboolean
DECLARE FUNCTION webkit_settings_get_enable_encrypted_media(BYVAL AS WebKitSettings PTR) AS gboolean
DECLARE FUNCTION webkit_settings_get_enable_frame_flattening(BYVAL AS WebKitSettings PTR) AS gboolean
DECLARE FUNCTION webkit_settings_get_enable_fullscreen(BYVAL AS WebKitSettings PTR) AS gboolean
DECLARE FUNCTION webkit_settings_get_enable_html5_database(BYVAL AS WebKitSettings PTR) AS gboolean
DECLARE FUNCTION webkit_settings_get_enable_html5_local_storage(BYVAL AS WebKitSettings PTR) AS gboolean
DECLARE FUNCTION webkit_settings_get_enable_hyperlink_auditing(BYVAL AS WebKitSettings PTR) AS gboolean
DECLARE FUNCTION webkit_settings_get_enable_java(BYVAL AS WebKitSettings PTR) AS gboolean
DECLARE FUNCTION webkit_settings_get_enable_javascript(BYVAL AS WebKitSettings PTR) AS gboolean
DECLARE FUNCTION webkit_settings_get_enable_javascript_markup(BYVAL AS WebKitSettings PTR) AS gboolean
DECLARE FUNCTION webkit_settings_get_enable_media(BYVAL AS WebKitSettings PTR) AS gboolean
DECLARE FUNCTION webkit_settings_get_enable_media_capabilities(BYVAL AS WebKitSettings PTR) AS gboolean
DECLARE FUNCTION webkit_settings_get_enable_media_stream(BYVAL AS WebKitSettings PTR) AS gboolean
DECLARE FUNCTION webkit_settings_get_enable_mediasource(BYVAL AS WebKitSettings PTR) AS gboolean
DECLARE FUNCTION webkit_settings_get_enable_mock_capture_devices(BYVAL AS WebKitSettings PTR) AS gboolean
DECLARE FUNCTION webkit_settings_get_enable_offline_web_application_cache(BYVAL AS WebKitSettings PTR) AS gboolean
DECLARE FUNCTION webkit_settings_get_enable_page_cache(BYVAL AS WebKitSettings PTR) AS gboolean
DECLARE FUNCTION webkit_settings_get_enable_plugins(BYVAL AS WebKitSettings PTR) AS gboolean
DECLARE FUNCTION webkit_settings_get_enable_private_browsing(BYVAL AS WebKitSettings PTR) AS gboolean
DECLARE FUNCTION webkit_settings_get_enable_resizable_text_areas(BYVAL AS WebKitSettings PTR) AS gboolean
DECLARE FUNCTION webkit_settings_get_enable_site_specific_quirks(BYVAL AS WebKitSettings PTR) AS gboolean
DECLARE FUNCTION webkit_settings_get_enable_smooth_scrolling(BYVAL AS WebKitSettings PTR) AS gboolean
DECLARE FUNCTION webkit_settings_get_enable_spatial_navigation(BYVAL AS WebKitSettings PTR) AS gboolean
DECLARE FUNCTION webkit_settings_get_enable_tabs_to_links(BYVAL AS WebKitSettings PTR) AS gboolean
DECLARE FUNCTION webkit_settings_get_enable_webaudio(BYVAL AS WebKitSettings PTR) AS gboolean
DECLARE FUNCTION webkit_settings_get_enable_webgl(BYVAL AS WebKitSettings PTR) AS gboolean
DECLARE FUNCTION webkit_settings_get_enable_write_console_messages_to_stdout(BYVAL AS WebKitSettings PTR) AS gboolean
DECLARE FUNCTION webkit_settings_get_enable_xss_auditor(BYVAL AS WebKitSettings PTR) AS gboolean
DECLARE FUNCTION webkit_settings_get_fantasy_font_family(BYVAL AS WebKitSettings PTR) AS const gchar PTR
DECLARE FUNCTION webkit_settings_get_hardware_acceleration_policy(BYVAL AS WebKitSettings PTR) AS WebKitHardwareAccelerationPolicy
DECLARE FUNCTION webkit_settings_get_javascript_can_access_clipboard(BYVAL AS WebKitSettings PTR) AS gboolean
DECLARE FUNCTION webkit_settings_get_javascript_can_open_windows_automatically(BYVAL AS WebKitSettings PTR) AS gboolean
DECLARE FUNCTION webkit_settings_get_load_icons_ignoring_image_load_setting(BYVAL AS WebKitSettings PTR) AS gboolean
DECLARE FUNCTION webkit_settings_get_media_playback_allows_inline(BYVAL AS WebKitSettings PTR) AS gboolean
DECLARE FUNCTION webkit_settings_get_media_playback_requires_user_gesture(BYVAL AS WebKitSettings PTR) AS gboolean
DECLARE FUNCTION webkit_settings_get_minimum_font_size(BYVAL AS WebKitSettings PTR) AS guint32
DECLARE FUNCTION webkit_settings_get_monospace_font_family(BYVAL AS WebKitSettings PTR) AS const gchar PTR
DECLARE FUNCTION webkit_settings_get_pictograph_font_family(BYVAL AS WebKitSettings PTR) AS const gchar PTR
DECLARE FUNCTION webkit_settings_get_print_backgrounds(BYVAL AS WebKitSettings PTR) AS gboolean
DECLARE FUNCTION webkit_settings_get_sans_serif_font_family(BYVAL AS WebKitSettings PTR) AS const gchar PTR
DECLARE FUNCTION webkit_settings_get_serif_font_family(BYVAL AS WebKitSettings PTR) AS const gchar PTR
DECLARE FUNCTION webkit_settings_get_user_agent(BYVAL AS WebKitSettings PTR) AS const gchar PTR
DECLARE FUNCTION webkit_settings_get_zoom_text_only(BYVAL AS WebKitSettings PTR) AS gboolean
DECLARE SUB webkit_settings_set_allow_file_access_from_file_urls(BYVAL AS WebKitSettings PTR, BYVAL AS gboolean)
DECLARE SUB webkit_settings_set_allow_modal_dialogs(BYVAL AS WebKitSettings PTR, BYVAL AS gboolean)
DECLARE SUB webkit_settings_set_allow_top_navigation_to_data_urls(BYVAL AS WebKitSettings PTR, BYVAL AS gboolean)
DECLARE SUB webkit_settings_set_allow_universal_access_from_file_urls(BYVAL AS WebKitSettings PTR, BYVAL AS gboolean)
DECLARE SUB webkit_settings_set_auto_load_images(BYVAL AS WebKitSettings PTR, BYVAL AS gboolean)
DECLARE SUB webkit_settings_set_cursive_font_family(BYVAL AS WebKitSettings PTR, BYVAL AS const gchar PTR)
DECLARE SUB webkit_settings_set_default_charset(BYVAL AS WebKitSettings PTR, BYVAL AS const gchar PTR)
DECLARE SUB webkit_settings_set_default_font_family(BYVAL AS WebKitSettings PTR, BYVAL AS const gchar PTR)
DECLARE SUB webkit_settings_set_default_font_size(BYVAL AS WebKitSettings PTR, BYVAL AS guint32)
DECLARE SUB webkit_settings_set_default_monospace_font_size(BYVAL AS WebKitSettings PTR, BYVAL AS guint32)
DECLARE SUB webkit_settings_set_draw_compositing_indicators(BYVAL AS WebKitSettings PTR, BYVAL AS gboolean)
DECLARE SUB webkit_settings_set_enable_accelerated_2d_canvas(BYVAL AS WebKitSettings PTR, BYVAL AS gboolean)
DECLARE SUB webkit_settings_set_enable_back_forward_navigation_gestures(BYVAL AS WebKitSettings PTR, BYVAL AS gboolean)
DECLARE SUB webkit_settings_set_enable_caret_browsing(BYVAL AS WebKitSettings PTR, BYVAL AS gboolean)
DECLARE SUB webkit_settings_set_enable_developer_extras(BYVAL AS WebKitSettings PTR, BYVAL AS gboolean)
DECLARE SUB webkit_settings_set_enable_dns_prefetching(BYVAL AS WebKitSettings PTR, BYVAL AS gboolean)
DECLARE SUB webkit_settings_set_enable_encrypted_media(BYVAL AS WebKitSettings PTR, BYVAL AS gboolean)
DECLARE SUB webkit_settings_set_enable_frame_flattening(BYVAL AS WebKitSettings PTR, BYVAL AS gboolean)
DECLARE SUB webkit_settings_set_enable_fullscreen(BYVAL AS WebKitSettings PTR, BYVAL AS gboolean)
DECLARE SUB webkit_settings_set_enable_html5_database(BYVAL AS WebKitSettings PTR, BYVAL AS gboolean)
DECLARE SUB webkit_settings_set_enable_html5_local_storage(BYVAL AS WebKitSettings PTR, BYVAL AS gboolean)
DECLARE SUB webkit_settings_set_enable_hyperlink_auditing(BYVAL AS WebKitSettings PTR, BYVAL AS gboolean)
DECLARE SUB webkit_settings_set_enable_java(BYVAL AS WebKitSettings PTR, BYVAL AS gboolean)
DECLARE SUB webkit_settings_set_enable_javascript(BYVAL AS WebKitSettings PTR, BYVAL AS gboolean)
DECLARE SUB webkit_settings_set_enable_javascript_markup(BYVAL AS WebKitSettings PTR, BYVAL AS gboolean)
DECLARE SUB webkit_settings_set_enable_media(BYVAL AS WebKitSettings PTR, BYVAL AS gboolean)
DECLARE SUB webkit_settings_set_enable_media_capabilities(BYVAL AS WebKitSettings PTR, BYVAL AS gboolean)
DECLARE SUB webkit_settings_set_enable_media_stream(BYVAL AS WebKitSettings PTR, BYVAL AS gboolean)
DECLARE SUB webkit_settings_set_enable_mediasource(BYVAL AS WebKitSettings PTR, BYVAL AS gboolean)
DECLARE SUB webkit_settings_set_enable_mock_capture_devices(BYVAL AS WebKitSettings PTR, BYVAL AS gboolean)
DECLARE SUB webkit_settings_set_enable_offline_web_application_cache(BYVAL AS WebKitSettings PTR, BYVAL AS gboolean)
DECLARE SUB webkit_settings_set_enable_page_cache(BYVAL AS WebKitSettings PTR, BYVAL AS gboolean)
DECLARE SUB webkit_settings_set_enable_plugins(BYVAL AS WebKitSettings PTR, BYVAL AS gboolean)
DECLARE SUB webkit_settings_set_enable_private_browsing(BYVAL AS WebKitSettings PTR, BYVAL AS gboolean)
DECLARE SUB webkit_settings_set_enable_resizable_text_areas(BYVAL AS WebKitSettings PTR, BYVAL AS gboolean)
DECLARE SUB webkit_settings_set_enable_site_specific_quirks(BYVAL AS WebKitSettings PTR, BYVAL AS gboolean)
DECLARE SUB webkit_settings_set_enable_smooth_scrolling(BYVAL AS WebKitSettings PTR, BYVAL AS gboolean)
DECLARE SUB webkit_settings_set_enable_spatial_navigation(BYVAL AS WebKitSettings PTR, BYVAL AS gboolean)
DECLARE SUB webkit_settings_set_enable_tabs_to_links(BYVAL AS WebKitSettings PTR, BYVAL AS gboolean)
DECLARE SUB webkit_settings_set_enable_webaudio(BYVAL AS WebKitSettings PTR, BYVAL AS gboolean)
DECLARE SUB webkit_settings_set_enable_webgl(BYVAL AS WebKitSettings PTR, BYVAL AS gboolean)
DECLARE SUB webkit_settings_set_enable_write_console_messages_to_stdout(BYVAL AS WebKitSettings PTR, BYVAL AS gboolean)
DECLARE SUB webkit_settings_set_enable_xss_auditor(BYVAL AS WebKitSettings PTR, BYVAL AS gboolean)
DECLARE SUB webkit_settings_set_fantasy_font_family(BYVAL AS WebKitSettings PTR, BYVAL AS const gchar PTR)
DECLARE SUB webkit_settings_set_hardware_acceleration_policy(BYVAL AS WebKitSettings PTR, BYVAL AS WebKitHardwareAccelerationPolicy)
DECLARE SUB webkit_settings_set_javascript_can_access_clipboard(BYVAL AS WebKitSettings PTR, BYVAL AS gboolean)
DECLARE SUB webkit_settings_set_javascript_can_open_windows_automatically(BYVAL AS WebKitSettings PTR, BYVAL AS gboolean)
DECLARE SUB webkit_settings_set_load_icons_ignoring_image_load_setting(BYVAL AS WebKitSettings PTR, BYVAL AS gboolean)
DECLARE SUB webkit_settings_set_media_playback_allows_inline(BYVAL AS WebKitSettings PTR, BYVAL AS gboolean)
DECLARE SUB webkit_settings_set_media_playback_requires_user_gesture(BYVAL AS WebKitSettings PTR, BYVAL AS gboolean)
DECLARE SUB webkit_settings_set_minimum_font_size(BYVAL AS WebKitSettings PTR, BYVAL AS guint32)
DECLARE SUB webkit_settings_set_monospace_font_family(BYVAL AS WebKitSettings PTR, BYVAL AS const gchar PTR)
DECLARE SUB webkit_settings_set_pictograph_font_family(BYVAL AS WebKitSettings PTR, BYVAL AS const gchar PTR)
DECLARE SUB webkit_settings_set_print_backgrounds(BYVAL AS WebKitSettings PTR, BYVAL AS gboolean)
DECLARE SUB webkit_settings_set_sans_serif_font_family(BYVAL AS WebKitSettings PTR, BYVAL AS const gchar PTR)
DECLARE SUB webkit_settings_set_serif_font_family(BYVAL AS WebKitSettings PTR, BYVAL AS const gchar PTR)
DECLARE SUB webkit_settings_set_user_agent(BYVAL AS WebKitSettings PTR, BYVAL AS const gchar PTR)
DECLARE SUB webkit_settings_set_user_agent_with_application_details(BYVAL AS WebKitSettings PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR)
DECLARE SUB webkit_settings_set_zoom_text_only(BYVAL AS WebKitSettings PTR, BYVAL AS gboolean)
TYPE _WebKitSettingsClass
  AS GObjectClass parent_class
  _webkit_reserved0 AS SUB CDECL()
  _webkit_reserved1 AS SUB CDECL()
  _webkit_reserved2 AS SUB CDECL()
  _webkit_reserved3 AS SUB CDECL()
END TYPE
TYPE _WebKitURIRequest
  AS GObject parent
  AS WebKitURIRequestPrivate PTR priv
END TYPE
DECLARE FUNCTION webkit_snapshot_error_get_type() AS GType
#DEFINE WEBKIT_TYPE_SNAPSHOT_ERROR (webkit_snapshot_error_get_type())
DECLARE FUNCTION webkit_snapshot_region_get_type() AS GType
#DEFINE WEBKIT_TYPE_SNAPSHOT_REGION (webkit_snapshot_region_get_type())
DECLARE FUNCTION webkit_tls_errors_policy_get_type() AS GType
#DEFINE WEBKIT_TYPE_TLS_ERRORS_POLICY (webkit_tls_errors_policy_get_type())
DECLARE FUNCTION webkit_uri_request_get_type() AS GType
#DEFINE WEBKIT2_TYPE_URI_REQUEST (webkit_uri_request_get_type())
#DEFINE WEBKIT2_URI_REQUEST(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), WEBKIT2_TYPE_URI_REQUEST, WebKitURIRequest))
#DEFINE WEBKIT2_URI_REQUEST_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), WEBKIT2_TYPE_URI_REQUEST, WebKit2URIRequestClass))
#DEFINE WEBKIT2_IS_URI_REQUEST(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), WEBKIT2_TYPE_URI_REQUEST))
#DEFINE WEBKIT2_IS_CLASS_URI_REQUEST(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), WEBKIT2_TYPE_URI_REQUEST))
#DEFINE WEBKIT2_URI_REQUEST_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), WEBKIT2_TYPE_URI_REQUEST, WebKit2URIRequestClass))
DECLARE FUNCTION webkit_uri_request_new(BYVAL AS const gchar PTR) AS WebKitURIRequest PTR
DECLARE FUNCTION webkit_uri_request_get_http_headers(BYVAL AS WebKitURIRequest PTR) AS SoupMessageHeaders PTR
DECLARE FUNCTION webkit_uri_request_get_http_method(BYVAL AS WebKitURIRequest PTR) AS const gchar PTR
DECLARE FUNCTION webkit_uri_request_get_uri(BYVAL AS WebKitURIRequest PTR) AS const gchar PTR
DECLARE SUB webkit_uri_request_set_uri(BYVAL AS WebKitURIRequest PTR, BYVAL AS const gchar PTR)
TYPE _WebKitURIRequestClass
  AS GObjectClass parent_class
  _webkit_reserved0 AS SUB CDECL()
  _webkit_reserved1 AS SUB CDECL()
  _webkit_reserved2 AS SUB CDECL()
  _webkit_reserved3 AS SUB CDECL()
END TYPE
TYPE _WebKitURIResponse
  AS GObject parent
  AS WebKitURIResponsePrivate PTR priv
END TYPE
DECLARE FUNCTION webkit_uri_response_get_type() AS GType
#DEFINE WEBKIT2_TYPE_URI_RESPONSE (webkit_uri_response_get_type())
#DEFINE WEBKIT2_URI_RESPONSE(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), WEBKIT2_TYPE_URI_RESPONSE, WebKitURIResponse))
#DEFINE WEBKIT2_URI_RESPONSE_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), WEBKIT2_TYPE_URI_RESPONSE, WebKit2URIResponseClass))
#DEFINE WEBKIT2_IS_URI_RESPONSE(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), WEBKIT2_TYPE_URI_RESPONSE))
#DEFINE WEBKIT2_IS_CLASS_URI_RESPONSE(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), WEBKIT2_TYPE_URI_RESPONSE))
#DEFINE WEBKIT2_URI_RESPONSE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), WEBKIT2_TYPE_URI_RESPONSE, WebKit2URIResponseClass))
DECLARE FUNCTION webkit_uri_response_get_content_length(BYVAL AS WebKitURIResponse PTR) AS guint64
DECLARE FUNCTION webkit_uri_response_get_http_headers(BYVAL AS WebKitURIResponse PTR) AS SoupMessageHeaders PTR
DECLARE FUNCTION webkit_uri_response_get_mime_type(BYVAL AS WebKitURIResponse PTR) AS const gchar PTR
DECLARE FUNCTION webkit_uri_response_get_status_code(BYVAL AS WebKitURIResponse PTR) AS guint
DECLARE FUNCTION webkit_uri_response_get_suggested_filename(BYVAL AS WebKitURIResponse PTR) AS const gchar PTR
DECLARE FUNCTION webkit_uri_response_get_uri(BYVAL AS WebKitURIResponse PTR) AS const gchar PTR
TYPE _WebKitURIResponseClass
  AS GObjectClass parent_class
  _webkit_reserved0 AS SUB CDECL()
  _webkit_reserved1 AS SUB CDECL()
  _webkit_reserved2 AS SUB CDECL()
  _webkit_reserved3 AS SUB CDECL()
END TYPE
TYPE _WebKitURISchemeRequest
  AS GObject parent
  AS WebKitURISchemeRequestPrivate PTR priv
END TYPE
DECLARE FUNCTION webkit_uri_scheme_request_get_type() AS GType
#DEFINE WEBKIT2_TYPE_URI_SCHEME_REQUEST (webkit_uri_scheme_request_get_type())
#DEFINE WEBKIT2_URI_SCHEME_REQUEST(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), WEBKIT2_TYPE_URI_SCHEME_REQUEST, WebKitURISchemeRequest))
#DEFINE WEBKIT2_URI_SCHEME_REQUEST_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), WEBKIT2_TYPE_URI_SCHEME_REQUEST, WebKit2URISchemeRequestClass))
#DEFINE WEBKIT2_IS_URI_SCHEME_REQUEST(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), WEBKIT2_TYPE_URI_SCHEME_REQUEST))
#DEFINE WEBKIT2_IS_CLASS_URI_SCHEME_REQUEST(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), WEBKIT2_TYPE_URI_SCHEME_REQUEST))
#DEFINE WEBKIT2_URI_SCHEME_REQUEST_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), WEBKIT2_TYPE_URI_SCHEME_REQUEST, WebKit2URISchemeRequestClass))
DECLARE SUB webkit_uri_scheme_request_finish(BYVAL AS WebKitURISchemeRequest PTR, BYVAL AS GInputStream PTR, BYVAL AS gint64, BYVAL AS const gchar PTR)
DECLARE SUB webkit_uri_scheme_request_finish_error(BYVAL AS WebKitURISchemeRequest PTR, BYVAL AS GError PTR)
DECLARE FUNCTION webkit_uri_scheme_request_get_path(BYVAL AS WebKitURISchemeRequest PTR) AS const gchar PTR
DECLARE FUNCTION webkit_uri_scheme_request_get_scheme(BYVAL AS WebKitURISchemeRequest PTR) AS const gchar PTR
DECLARE FUNCTION webkit_uri_scheme_request_get_uri(BYVAL AS WebKitURISchemeRequest PTR) AS const gchar PTR
DECLARE FUNCTION webkit_uri_scheme_request_get_web_view(BYVAL AS WebKitURISchemeRequest PTR) AS WebKitWebView PTR
TYPE WebKitURISchemeRequestCallback AS SUB CDECL(BYVAL AS WebKitURISchemeRequest PTR, BYVAL AS gpointer)
TYPE _WebKitURISchemeRequestClass
  AS GObjectClass parent_class
  _webkit_reserved0 AS SUB CDECL()
  _webkit_reserved1 AS SUB CDECL()
  _webkit_reserved2 AS SUB CDECL()
  _webkit_reserved3 AS SUB CDECL()
END TYPE
DECLARE FUNCTION webkit_user_content_filter_get_identifier(BYVAL AS WebKitUserContentFilter PTR) AS const char PTR
DECLARE FUNCTION webkit_user_content_filter_ref(BYVAL AS WebKitUserContentFilter PTR) AS WebKitUserContentFilter PTR
DECLARE SUB webkit_user_content_filter_unref(BYVAL AS WebKitUserContentFilter PTR)
TYPE _WebKitUserContentFilterStore
  AS GObject parent
  AS WebKitUserContentFilterStorePrivate PTR priv
END TYPE
DECLARE FUNCTION webkit_user_content_filter_error_get_type() AS GType
#DEFINE WEBKIT_TYPE_USER_CONTENT_FILTER_ERROR (webkit_user_content_filter_error_get_type())
DECLARE FUNCTION webkit_user_content_filter_store_get_type() AS GType
#DEFINE WEBKIT2_TYPE_USER_CONTENT_FILTER_STORE (webkit_user_content_filter_store_get_type())
#DEFINE WEBKIT2_USER_CONTENT_FILTER_STORE(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), WEBKIT2_TYPE_USER_CONTENT_FILTER_STORE, WebKitUserContentFilterStore))
#DEFINE WEBKIT2_USER_CONTENT_FILTER_STORE_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), WEBKIT2_TYPE_USER_CONTENT_FILTER_STORE, WebKit2UserContentFilterStoreClass))
#DEFINE WEBKIT2_IS_USER_CONTENT_FILTER_STORE(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), WEBKIT2_TYPE_USER_CONTENT_FILTER_STORE))
#DEFINE WEBKIT2_IS_CLASS_USER_CONTENT_FILTER_STORE(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), WEBKIT2_TYPE_USER_CONTENT_FILTER_STORE))
#DEFINE WEBKIT2_USER_CONTENT_FILTER_STORE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), WEBKIT2_TYPE_USER_CONTENT_FILTER_STORE, WebKit2UserContentFilterStoreClass))
DECLARE FUNCTION webkit_user_content_filter_store_new(BYVAL AS const gchar PTR) AS WebKitUserContentFilterStore PTR
DECLARE SUB webkit_user_content_filter_store_fetch_identifiers(BYVAL AS WebKitUserContentFilterStore PTR, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
DECLARE FUNCTION webkit_user_content_filter_store_fetch_identifiers_finish(BYVAL AS WebKitUserContentFilterStore PTR, BYVAL AS GAsyncResult PTR) AS gchar PTR PTR
DECLARE FUNCTION webkit_user_content_filter_store_get_path(BYVAL AS WebKitUserContentFilterStore PTR) AS const gchar PTR
DECLARE SUB webkit_user_content_filter_store_load(BYVAL AS WebKitUserContentFilterStore PTR, BYVAL AS const gchar PTR, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
DECLARE FUNCTION webkit_user_content_filter_store_load_finish(BYVAL AS WebKitUserContentFilterStore PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS WebKitUserContentFilter PTR
DECLARE SUB webkit_user_content_filter_store_remove(BYVAL AS WebKitUserContentFilterStore PTR, BYVAL AS const gchar PTR, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
DECLARE FUNCTION webkit_user_content_filter_store_remove_finish(BYVAL AS WebKitUserContentFilterStore PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE SUB webkit_user_content_filter_store_save(BYVAL AS WebKitUserContentFilterStore PTR, BYVAL AS const gchar PTR, BYVAL AS GBytes PTR, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
DECLARE FUNCTION webkit_user_content_filter_store_save_finish(BYVAL AS WebKitUserContentFilterStore PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS WebKitUserContentFilter PTR
DECLARE SUB webkit_user_content_filter_store_save_from_file(BYVAL AS WebKitUserContentFilterStore PTR, BYVAL AS const gchar PTR, BYVAL AS GFile PTR, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
DECLARE FUNCTION webkit_user_content_filter_store_save_from_file_finish(BYVAL AS WebKitUserContentFilterStore PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS WebKitUserContentFilter PTR
TYPE _WebKitUserContentFilterStoreClass
  AS GObjectClass parent_class
  _webkit_reserved0 AS SUB CDECL()
  _webkit_reserved1 AS SUB CDECL()
  _webkit_reserved2 AS SUB CDECL()
  _webkit_reserved3 AS SUB CDECL()
END TYPE
TYPE _WebKitUserContentManager
  AS GObject parent
  AS WebKitUserContentManagerPrivate PTR priv
END TYPE
DECLARE FUNCTION webkit_user_content_injected_frames_get_type() AS GType
#DEFINE WEBKIT_TYPE_USER_CONTENT_INJECTED_FRAMES (webkit_user_content_injected_frames_get_type())
DECLARE FUNCTION webkit_user_content_manager_get_type() AS GType
#DEFINE WEBKIT2_TYPE_USER_CONTENT_MANAGER (webkit_user_content_manager_get_type())
#DEFINE WEBKIT2_USER_CONTENT_MANAGER(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), WEBKIT2_TYPE_USER_CONTENT_MANAGER, WebKitUserContentManager))
#DEFINE WEBKIT2_USER_CONTENT_MANAGER_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), WEBKIT2_TYPE_USER_CONTENT_MANAGER, WebKit2UserContentManagerClass))
#DEFINE WEBKIT2_IS_USER_CONTENT_MANAGER(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), WEBKIT2_TYPE_USER_CONTENT_MANAGER))
#DEFINE WEBKIT2_IS_CLASS_USER_CONTENT_MANAGER(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), WEBKIT2_TYPE_USER_CONTENT_MANAGER))
#DEFINE WEBKIT2_USER_CONTENT_MANAGER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), WEBKIT2_TYPE_USER_CONTENT_MANAGER, WebKit2UserContentManagerClass))
DECLARE FUNCTION webkit_user_content_manager_new() AS WebKitUserContentManager PTR
DECLARE SUB webkit_user_content_manager_add_filter(BYVAL AS WebKitUserContentManager PTR, BYVAL AS WebKitUserContentFilter PTR)
DECLARE SUB webkit_user_content_manager_add_script(BYVAL AS WebKitUserContentManager PTR, BYVAL AS WebKitUserScript PTR)
DECLARE SUB webkit_user_content_manager_add_style_sheet(BYVAL AS WebKitUserContentManager PTR, BYVAL AS WebKitUserStyleSheet PTR)
DECLARE FUNCTION webkit_user_content_manager_register_script_message_handler(BYVAL AS WebKitUserContentManager PTR, BYVAL AS const gchar PTR) AS gboolean
DECLARE FUNCTION webkit_user_content_manager_register_script_message_handler_in_world(BYVAL AS WebKitUserContentManager PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR) AS gboolean
DECLARE SUB webkit_user_content_manager_remove_all_filters(BYVAL AS WebKitUserContentManager PTR)
DECLARE SUB webkit_user_content_manager_remove_all_scripts(BYVAL AS WebKitUserContentManager PTR)
DECLARE SUB webkit_user_content_manager_remove_all_style_sheets(BYVAL AS WebKitUserContentManager PTR)
DECLARE SUB webkit_user_content_manager_remove_filter(BYVAL AS WebKitUserContentManager PTR, BYVAL AS WebKitUserContentFilter PTR)
DECLARE SUB webkit_user_content_manager_remove_filter_by_id(BYVAL AS WebKitUserContentManager PTR, BYVAL AS const char PTR)
DECLARE SUB webkit_user_content_manager_unregister_script_message_handler(BYVAL AS WebKitUserContentManager PTR, BYVAL AS const gchar PTR)
DECLARE SUB webkit_user_content_manager_unregister_script_message_handler_in_world(BYVAL AS WebKitUserContentManager PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR)
TYPE _WebKitUserContentManagerClass
  AS GObjectClass parent_class
  _webkit_reserved0 AS SUB CDECL()
  _webkit_reserved1 AS SUB CDECL()
  _webkit_reserved2 AS SUB CDECL()
  _webkit_reserved3 AS SUB CDECL()
END TYPE
TYPE _WebKitUserMediaPermissionRequest
  AS GObject parent
  AS WebKitUserMediaPermissionRequestPrivate PTR priv
END TYPE
DECLARE FUNCTION webkit_user_media_permission_request_get_type() AS GType
#DEFINE WEBKIT2_TYPE_USER_MEDIA_PERMISSION_REQUEST (webkit_user_media_permission_request_get_type())
#DEFINE WEBKIT2_USER_MEDIA_PERMISSION_REQUEST(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), WEBKIT2_TYPE_USER_MEDIA_PERMISSION_REQUEST, WebKitUserMediaPermissionRequest))
#DEFINE WEBKIT2_USER_MEDIA_PERMISSION_REQUEST_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), WEBKIT2_TYPE_USER_MEDIA_PERMISSION_REQUEST, WebKit2UserMediaPermissionRequestClass))
#DEFINE WEBKIT2_IS_USER_MEDIA_PERMISSION_REQUEST(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), WEBKIT2_TYPE_USER_MEDIA_PERMISSION_REQUEST))
#DEFINE WEBKIT2_IS_CLASS_USER_MEDIA_PERMISSION_REQUEST(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), WEBKIT2_TYPE_USER_MEDIA_PERMISSION_REQUEST))
#DEFINE WEBKIT2_USER_MEDIA_PERMISSION_REQUEST_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), WEBKIT2_TYPE_USER_MEDIA_PERMISSION_REQUEST, WebKit2UserMediaPermissionRequestClass))
TYPE _WebKitUserMediaPermissionRequestClass
  AS GObjectClass parent_class
  _webkit_reserved0 AS SUB CDECL()
  _webkit_reserved1 AS SUB CDECL()
  _webkit_reserved2 AS SUB CDECL()
  _webkit_reserved3 AS SUB CDECL()
END TYPE
TYPE _WebKitUserMessage
  AS GInitiallyUnowned parent
  AS WebKitUserMessagePrivate PTR priv
END TYPE
DECLARE FUNCTION webkit_user_message_get_type() AS GType
#DEFINE WEBKIT2_TYPE_USER_MESSAGE (webkit_user_message_get_type())
#DEFINE WEBKIT2_USER_MESSAGE(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), WEBKIT2_TYPE_USER_MESSAGE, WebKitUserMessage))
#DEFINE WEBKIT2_USER_MESSAGE_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), WEBKIT2_TYPE_USER_MESSAGE, WebKit2UserMessageClass))
#DEFINE WEBKIT2_IS_USER_MESSAGE(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), WEBKIT2_TYPE_USER_MESSAGE))
#DEFINE WEBKIT2_IS_CLASS_USER_MESSAGE(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), WEBKIT2_TYPE_USER_MESSAGE))
#DEFINE WEBKIT2_USER_MESSAGE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), WEBKIT2_TYPE_USER_MESSAGE, WebKit2UserMessageClass))
DECLARE FUNCTION webkit_user_message_new(BYVAL AS const char PTR, BYVAL AS GVariant PTR) AS WebKitUserMessage PTR
DECLARE FUNCTION webkit_user_message_new_with_fd_list(BYVAL AS const char PTR, BYVAL AS GVariant PTR, BYVAL AS GUnixFDList PTR) AS WebKitUserMessage PTR
DECLARE FUNCTION webkit_user_message_get_fd_list(BYVAL AS WebKitUserMessage PTR) AS GUnixFDList PTR
DECLARE FUNCTION webkit_user_message_get_name(BYVAL AS WebKitUserMessage PTR) AS const char PTR
DECLARE FUNCTION webkit_user_message_get_parameters(BYVAL AS WebKitUserMessage PTR) AS GVariant PTR
DECLARE SUB webkit_user_message_send_reply(BYVAL AS WebKitUserMessage PTR, BYVAL AS WebKitUserMessage PTR)
TYPE _WebKitUserMessageClass
  AS GInitiallyUnownedClass parent_class
  _webkit_reserved0 AS SUB CDECL()
  _webkit_reserved1 AS SUB CDECL()
  _webkit_reserved2 AS SUB CDECL()
  _webkit_reserved3 AS SUB CDECL()
END TYPE
DECLARE FUNCTION webkit_user_message_error_get_type() AS GType
#DEFINE WEBKIT_TYPE_USER_MESSAGE_ERROR (webkit_user_message_error_get_type())
DECLARE FUNCTION webkit_user_script_new(BYVAL AS const gchar PTR, BYVAL AS WebKitUserContentInjectedFrames, BYVAL AS WebKitUserScriptInjectionTime, BYVAL AS const gchar ptr const /'const gchar* const'/ PTR, BYVAL AS const gchar ptr const /'const gchar* const'/ PTR) AS WebKitUserScript PTR
DECLARE FUNCTION webkit_user_script_new_for_world(BYVAL AS const gchar PTR, BYVAL AS WebKitUserContentInjectedFrames, BYVAL AS WebKitUserScriptInjectionTime, BYVAL AS const gchar PTR, BYVAL AS const gchar ptr const /'const gchar* const'/ PTR, BYVAL AS const gchar ptr const /'const gchar* const'/ PTR) AS WebKitUserScript PTR
DECLARE FUNCTION webkit_user_script_ref(BYVAL AS WebKitUserScript PTR) AS WebKitUserScript PTR
DECLARE SUB webkit_user_script_unref(BYVAL AS WebKitUserScript PTR)
DECLARE FUNCTION webkit_user_script_injection_time_get_type() AS GType
#DEFINE WEBKIT_TYPE_USER_SCRIPT_INJECTION_TIME (webkit_user_script_injection_time_get_type())
DECLARE FUNCTION webkit_user_style_level_get_type() AS GType
#DEFINE WEBKIT_TYPE_USER_STYLE_LEVEL (webkit_user_style_level_get_type())
DECLARE FUNCTION webkit_user_style_sheet_new(BYVAL AS const gchar PTR, BYVAL AS WebKitUserContentInjectedFrames, BYVAL AS WebKitUserStyleLevel, BYVAL AS const gchar ptr const /'const gchar* const'/ PTR, BYVAL AS const gchar ptr const /'const gchar* const'/ PTR) AS WebKitUserStyleSheet PTR
DECLARE FUNCTION webkit_user_style_sheet_new_for_world(BYVAL AS const gchar PTR, BYVAL AS WebKitUserContentInjectedFrames, BYVAL AS WebKitUserStyleLevel, BYVAL AS const gchar PTR, BYVAL AS const gchar ptr const /'const gchar* const'/ PTR, BYVAL AS const gchar ptr const /'const gchar* const'/ PTR) AS WebKitUserStyleSheet PTR
DECLARE FUNCTION webkit_user_style_sheet_ref(BYVAL AS WebKitUserStyleSheet PTR) AS WebKitUserStyleSheet PTR
DECLARE SUB webkit_user_style_sheet_unref(BYVAL AS WebKitUserStyleSheet PTR)
TYPE _WebKitWebContext
  AS GObject parent
  AS WebKitWebContextPrivate PTR priv
END TYPE
DECLARE FUNCTION webkit_web_context_get_type() AS GType
#DEFINE WEBKIT2_TYPE_WEB_CONTEXT (webkit_web_context_get_type())
#DEFINE WEBKIT2_WEB_CONTEXT(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), WEBKIT2_TYPE_WEB_CONTEXT, WebKitWebContext))
#DEFINE WEBKIT2_WEB_CONTEXT_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), WEBKIT2_TYPE_WEB_CONTEXT, WebKit2WebContextClass))
#DEFINE WEBKIT2_IS_WEB_CONTEXT(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), WEBKIT2_TYPE_WEB_CONTEXT))
#DEFINE WEBKIT2_IS_CLASS_WEB_CONTEXT(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), WEBKIT2_TYPE_WEB_CONTEXT))
#DEFINE WEBKIT2_WEB_CONTEXT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), WEBKIT2_TYPE_WEB_CONTEXT, WebKit2WebContextClass))
DECLARE FUNCTION webkit_web_context_new() AS WebKitWebContext PTR
DECLARE FUNCTION webkit_web_context_new_ephemeral() AS WebKitWebContext PTR
DECLARE FUNCTION webkit_web_context_new_with_website_data_manager(BYVAL AS WebKitWebsiteDataManager PTR) AS WebKitWebContext PTR
DECLARE FUNCTION webkit_web_context_get_default() AS WebKitWebContext PTR
DECLARE SUB webkit_web_context_add_path_to_sandbox(BYVAL AS WebKitWebContext PTR, BYVAL AS const char PTR, BYVAL AS gboolean)
DECLARE SUB webkit_web_context_allow_tls_certificate_for_host(BYVAL AS WebKitWebContext PTR, BYVAL AS GTlsCertificate PTR, BYVAL AS const gchar PTR)
DECLARE SUB webkit_web_context_clear_cache(BYVAL AS WebKitWebContext PTR)
DECLARE FUNCTION webkit_web_context_download_uri(BYVAL AS WebKitWebContext PTR, BYVAL AS const gchar PTR) AS WebKitDownload PTR
DECLARE FUNCTION webkit_web_context_get_cache_model(BYVAL AS WebKitWebContext PTR) AS WebKitCacheModel
DECLARE FUNCTION webkit_web_context_get_cookie_manager(BYVAL AS WebKitWebContext PTR) AS WebKitCookieManager PTR
DECLARE FUNCTION webkit_web_context_get_favicon_database(BYVAL AS WebKitWebContext PTR) AS WebKitFaviconDatabase PTR
DECLARE FUNCTION webkit_web_context_get_favicon_database_directory(BYVAL AS WebKitWebContext PTR) AS const gchar PTR
DECLARE FUNCTION webkit_web_context_get_geolocation_manager(BYVAL AS WebKitWebContext PTR) AS WebKitGeolocationManager PTR
DECLARE SUB webkit_web_context_get_plugins(BYVAL AS WebKitWebContext PTR, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
DECLARE FUNCTION webkit_web_context_get_plugins_finish(BYVAL AS WebKitWebContext PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS GList PTR
DECLARE FUNCTION webkit_web_context_get_process_model(BYVAL AS WebKitWebContext PTR) AS WebKitProcessModel
DECLARE FUNCTION webkit_web_context_get_sandbox_enabled(BYVAL AS WebKitWebContext PTR) AS gboolean
DECLARE FUNCTION webkit_web_context_get_security_manager(BYVAL AS WebKitWebContext PTR) AS WebKitSecurityManager PTR
DECLARE FUNCTION webkit_web_context_get_spell_checking_enabled(BYVAL AS WebKitWebContext PTR) AS gboolean
DECLARE FUNCTION webkit_web_context_get_spell_checking_languages(BYVAL AS WebKitWebContext PTR) AS const gchar ptr const /'const gchar* const'/ PTR
DECLARE FUNCTION webkit_web_context_get_tls_errors_policy(BYVAL AS WebKitWebContext PTR) AS WebKitTLSErrorsPolicy
DECLARE FUNCTION webkit_web_context_get_web_process_count_limit(BYVAL AS WebKitWebContext PTR) AS guint
DECLARE FUNCTION webkit_web_context_get_website_data_manager(BYVAL AS WebKitWebContext PTR) AS WebKitWebsiteDataManager PTR
DECLARE SUB webkit_web_context_initialize_notification_permissions(BYVAL AS WebKitWebContext PTR, BYVAL AS GList PTR, BYVAL AS GList PTR)
DECLARE FUNCTION webkit_web_context_is_automation_allowed(BYVAL AS WebKitWebContext PTR) AS gboolean
DECLARE FUNCTION webkit_web_context_is_ephemeral(BYVAL AS WebKitWebContext PTR) AS gboolean
DECLARE SUB webkit_web_context_prefetch_dns(BYVAL AS WebKitWebContext PTR, BYVAL AS const gchar PTR)
DECLARE SUB webkit_web_context_register_uri_scheme(BYVAL AS WebKitWebContext PTR, BYVAL AS const gchar PTR, BYVAL AS WebKitURISchemeRequestCallback, BYVAL AS gpointer, BYVAL AS GDestroyNotify)
DECLARE SUB webkit_web_context_send_message_to_all_extensions(BYVAL AS WebKitWebContext PTR, BYVAL AS WebKitUserMessage PTR)
DECLARE SUB webkit_web_context_set_additional_plugins_directory(BYVAL AS WebKitWebContext PTR, BYVAL AS const gchar PTR)
DECLARE SUB webkit_web_context_set_automation_allowed(BYVAL AS WebKitWebContext PTR, BYVAL AS gboolean)
DECLARE SUB webkit_web_context_set_cache_model(BYVAL AS WebKitWebContext PTR, BYVAL AS WebKitCacheModel)
DECLARE SUB webkit_web_context_set_disk_cache_directory(BYVAL AS WebKitWebContext PTR, BYVAL AS const gchar PTR)
DECLARE SUB webkit_web_context_set_favicon_database_directory(BYVAL AS WebKitWebContext PTR, BYVAL AS const gchar PTR)
DECLARE SUB webkit_web_context_set_network_proxy_settings(BYVAL AS WebKitWebContext PTR, BYVAL AS WebKitNetworkProxyMode, BYVAL AS WebKitNetworkProxySettings PTR)
DECLARE SUB webkit_web_context_set_preferred_languages(BYVAL AS WebKitWebContext PTR, BYVAL AS const gchar ptr const /'const gchar* const'/ PTR)
DECLARE SUB webkit_web_context_set_process_model(BYVAL AS WebKitWebContext PTR, BYVAL AS WebKitProcessModel)
DECLARE SUB webkit_web_context_set_sandbox_enabled(BYVAL AS WebKitWebContext PTR, BYVAL AS gboolean)
DECLARE SUB webkit_web_context_set_spell_checking_enabled(BYVAL AS WebKitWebContext PTR, BYVAL AS gboolean)
DECLARE SUB webkit_web_context_set_spell_checking_languages(BYVAL AS WebKitWebContext PTR, BYVAL AS const gchar ptr const /'const gchar* const'/ PTR)
DECLARE SUB webkit_web_context_set_tls_errors_policy(BYVAL AS WebKitWebContext PTR, BYVAL AS WebKitTLSErrorsPolicy)
DECLARE SUB webkit_web_context_set_web_extensions_directory(BYVAL AS WebKitWebContext PTR, BYVAL AS const gchar PTR)
DECLARE SUB webkit_web_context_set_web_extensions_initialization_user_data(BYVAL AS WebKitWebContext PTR, BYVAL AS GVariant PTR)
DECLARE SUB webkit_web_context_set_web_process_count_limit(BYVAL AS WebKitWebContext PTR, BYVAL AS guint)
TYPE _WebKitWebContextClass
  AS GObjectClass parent
  download_started AS SUB CDECL(BYVAL AS WebKitWebContext PTR, BYVAL AS WebKitDownload PTR)
  initialize_web_extensions AS SUB CDECL(BYVAL AS WebKitWebContext PTR)
  initialize_notification_permissions AS SUB CDECL(BYVAL AS WebKitWebContext PTR)
  automation_started AS SUB CDECL(BYVAL AS WebKitWebContext PTR, BYVAL AS WebKitAutomationSession PTR)
  user_message_received AS FUNCTION CDECL(BYVAL AS WebKitWebContext PTR, BYVAL AS WebKitUserMessage PTR) AS gboolean
  _webkit_reserved0 AS SUB CDECL()
  _webkit_reserved1 AS SUB CDECL()
  _webkit_reserved2 AS SUB CDECL()
END TYPE
TYPE _WebKitWebInspector
  AS GObject parent
  AS WebKitWebInspectorPrivate PTR priv
END TYPE
DECLARE FUNCTION webkit_web_inspector_get_type() AS GType
#DEFINE WEBKIT2_TYPE_WEB_INSPECTOR (webkit_web_inspector_get_type())
#DEFINE WEBKIT2_WEB_INSPECTOR(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), WEBKIT2_TYPE_WEB_INSPECTOR, WebKitWebInspector))
#DEFINE WEBKIT2_WEB_INSPECTOR_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), WEBKIT2_TYPE_WEB_INSPECTOR, WebKit2WebInspectorClass))
#DEFINE WEBKIT2_IS_WEB_INSPECTOR(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), WEBKIT2_TYPE_WEB_INSPECTOR))
#DEFINE WEBKIT2_IS_CLASS_WEB_INSPECTOR(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), WEBKIT2_TYPE_WEB_INSPECTOR))
#DEFINE WEBKIT2_WEB_INSPECTOR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), WEBKIT2_TYPE_WEB_INSPECTOR, WebKit2WebInspectorClass))
DECLARE SUB webkit_web_inspector_attach(BYVAL AS WebKitWebInspector PTR)
DECLARE SUB webkit_web_inspector_close(BYVAL AS WebKitWebInspector PTR)
DECLARE SUB webkit_web_inspector_detach(BYVAL AS WebKitWebInspector PTR)
DECLARE FUNCTION webkit_web_inspector_get_attached_height(BYVAL AS WebKitWebInspector PTR) AS guint
DECLARE FUNCTION webkit_web_inspector_get_can_attach(BYVAL AS WebKitWebInspector PTR) AS gboolean
DECLARE FUNCTION webkit_web_inspector_get_inspected_uri(BYVAL AS WebKitWebInspector PTR) AS const char PTR
DECLARE FUNCTION webkit_web_inspector_get_web_view(BYVAL AS WebKitWebInspector PTR) AS WebKitWebViewBase PTR
DECLARE FUNCTION webkit_web_inspector_is_attached(BYVAL AS WebKitWebInspector PTR) AS gboolean
DECLARE SUB webkit_web_inspector_show(BYVAL AS WebKitWebInspector PTR)
TYPE _WebKitWebInspectorClass
  AS GObjectClass parent_class
  _webkit_reserved0 AS SUB CDECL()
  _webkit_reserved1 AS SUB CDECL()
  _webkit_reserved2 AS SUB CDECL()
  _webkit_reserved3 AS SUB CDECL()
END TYPE
TYPE _WebKitWebResource
  AS GObject parent
  AS WebKitWebResourcePrivate PTR priv
END TYPE
DECLARE FUNCTION webkit_web_process_termination_reason_get_type() AS GType
#DEFINE WEBKIT_TYPE_WEB_PROCESS_TERMINATION_REASON (webkit_web_process_termination_reason_get_type())
DECLARE FUNCTION webkit_web_resource_get_type() AS GType
#DEFINE WEBKIT2_TYPE_WEB_RESOURCE (webkit_web_resource_get_type())
#DEFINE WEBKIT2_WEB_RESOURCE(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), WEBKIT2_TYPE_WEB_RESOURCE, WebKitWebResource))
#DEFINE WEBKIT2_WEB_RESOURCE_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), WEBKIT2_TYPE_WEB_RESOURCE, WebKit2WebResourceClass))
#DEFINE WEBKIT2_IS_WEB_RESOURCE(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), WEBKIT2_TYPE_WEB_RESOURCE))
#DEFINE WEBKIT2_IS_CLASS_WEB_RESOURCE(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), WEBKIT2_TYPE_WEB_RESOURCE))
#DEFINE WEBKIT2_WEB_RESOURCE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), WEBKIT2_TYPE_WEB_RESOURCE, WebKit2WebResourceClass))
DECLARE SUB webkit_web_resource_get_data(BYVAL AS WebKitWebResource PTR, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
DECLARE FUNCTION webkit_web_resource_get_data_finish(BYVAL AS WebKitWebResource PTR, BYVAL AS GAsyncResult PTR, BYVAL AS gsize PTR, BYVAL AS GError PTR PTR) AS guchar PTR
DECLARE FUNCTION webkit_web_resource_get_response(BYVAL AS WebKitWebResource PTR) AS WebKitURIResponse PTR
DECLARE FUNCTION webkit_web_resource_get_uri(BYVAL AS WebKitWebResource PTR) AS const gchar PTR
TYPE _WebKitWebResourceClass
  AS GObjectClass parent_class
  _webkit_reserved0 AS SUB CDECL()
  _webkit_reserved1 AS SUB CDECL()
  _webkit_reserved2 AS SUB CDECL()
  _webkit_reserved3 AS SUB CDECL()
END TYPE
TYPE _WebKitWebView
  AS WebKitWebViewBase parent
  AS WebKitWebViewPrivate PTR priv
END TYPE
DECLARE FUNCTION webkit_web_view_get_type() AS GType
#DEFINE WEBKIT2_TYPE_WEB_VIEW (webkit_web_view_get_type())
#DEFINE WEBKIT2_WEB_VIEW(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), WEBKIT2_TYPE_WEB_VIEW, WebKitWebView))
#DEFINE WEBKIT2_WEB_VIEW_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), WEBKIT2_TYPE_WEB_VIEW, WebKit2WebViewClass))
#DEFINE WEBKIT2_IS_WEB_VIEW(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), WEBKIT2_TYPE_WEB_VIEW))
#DEFINE WEBKIT2_IS_CLASS_WEB_VIEW(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), WEBKIT2_TYPE_WEB_VIEW))
#DEFINE WEBKIT2_WEB_VIEW_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), WEBKIT2_TYPE_WEB_VIEW, WebKit2WebViewClass))
DECLARE FUNCTION webkit_web_view_new() AS GtkWidget PTR
DECLARE FUNCTION webkit_web_view_new_with_context(BYVAL AS WebKitWebContext PTR) AS GtkWidget PTR
DECLARE FUNCTION webkit_web_view_new_with_related_view(BYVAL AS WebKitWebView PTR) AS GtkWidget PTR
DECLARE FUNCTION webkit_web_view_new_with_settings(BYVAL AS WebKitSettings PTR) AS GtkWidget PTR
DECLARE FUNCTION webkit_web_view_new_with_user_content_manager(BYVAL AS WebKitUserContentManager PTR) AS GtkWidget PTR
DECLARE SUB webkit_web_view_can_execute_editing_command(BYVAL AS WebKitWebView PTR, BYVAL AS const gchar PTR, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
DECLARE FUNCTION webkit_web_view_can_execute_editing_command_finish(BYVAL AS WebKitWebView PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION webkit_web_view_can_go_back(BYVAL AS WebKitWebView PTR) AS gboolean
DECLARE FUNCTION webkit_web_view_can_go_forward(BYVAL AS WebKitWebView PTR) AS gboolean
DECLARE FUNCTION webkit_web_view_can_show_mime_type(BYVAL AS WebKitWebView PTR, BYVAL AS const gchar PTR) AS gboolean
DECLARE FUNCTION webkit_web_view_download_uri(BYVAL AS WebKitWebView PTR, BYVAL AS const char PTR) AS WebKitDownload PTR
DECLARE SUB webkit_web_view_execute_editing_command(BYVAL AS WebKitWebView PTR, BYVAL AS const gchar PTR)
DECLARE SUB webkit_web_view_execute_editing_command_with_argument(BYVAL AS WebKitWebView PTR, BYVAL AS const char PTR, BYVAL AS const char PTR)
DECLARE FUNCTION webkit_web_view_get_automation_presentation_type(BYVAL AS WebKitWebView PTR) AS WebKitAutomationBrowsingContextPresentation
DECLARE FUNCTION webkit_web_view_get_back_forward_list(BYVAL AS WebKitWebView PTR) AS WebKitBackForwardList PTR
DECLARE SUB webkit_web_view_get_background_color(BYVAL AS WebKitWebView PTR, BYVAL AS GdkRGBA PTR)
DECLARE FUNCTION webkit_web_view_get_context(BYVAL AS WebKitWebView PTR) AS WebKitWebContext PTR
DECLARE FUNCTION webkit_web_view_get_custom_charset(BYVAL AS WebKitWebView PTR) AS const gchar PTR
DECLARE FUNCTION webkit_web_view_get_editor_state(BYVAL AS WebKitWebView PTR) AS WebKitEditorState PTR
DECLARE FUNCTION webkit_web_view_get_estimated_load_progress(BYVAL AS WebKitWebView PTR) AS gdouble
DECLARE FUNCTION webkit_web_view_get_favicon(BYVAL AS WebKitWebView PTR) AS cairo_surface_t PTR
DECLARE FUNCTION webkit_web_view_get_find_controller(BYVAL AS WebKitWebView PTR) AS WebKitFindController PTR
DECLARE FUNCTION webkit_web_view_get_input_method_context(BYVAL AS WebKitWebView PTR) AS WebKitInputMethodContext PTR
DECLARE FUNCTION webkit_web_view_get_inspector(BYVAL AS WebKitWebView PTR) AS WebKitWebInspector PTR
DECLARE FUNCTION webkit_web_view_get_javascript_global_context(BYVAL AS WebKitWebView PTR) AS JSGlobalContextRef PTR
DECLARE FUNCTION webkit_web_view_get_main_resource(BYVAL AS WebKitWebView PTR) AS WebKitWebResource PTR
DECLARE FUNCTION webkit_web_view_get_page_id(BYVAL AS WebKitWebView PTR) AS guint64
DECLARE FUNCTION webkit_web_view_get_session_state(BYVAL AS WebKitWebView PTR) AS WebKitWebViewSessionState PTR
DECLARE FUNCTION webkit_web_view_get_settings(BYVAL AS WebKitWebView PTR) AS WebKitSettings PTR
DECLARE SUB webkit_web_view_get_snapshot(BYVAL AS WebKitWebView PTR, BYVAL AS WebKitSnapshotRegion, BYVAL AS WebKitSnapshotOptions, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
DECLARE FUNCTION webkit_web_view_get_snapshot_finish(BYVAL AS WebKitWebView PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS cairo_surface_t PTR
DECLARE FUNCTION webkit_web_view_get_title(BYVAL AS WebKitWebView PTR) AS const gchar PTR
DECLARE FUNCTION webkit_web_view_get_tls_info(BYVAL AS WebKitWebView PTR, BYVAL AS GTlsCertificate PTR PTR, BYVAL AS GTlsCertificateFlags PTR) AS gboolean
DECLARE FUNCTION webkit_web_view_get_uri(BYVAL AS WebKitWebView PTR) AS const gchar PTR
DECLARE FUNCTION webkit_web_view_get_user_content_manager(BYVAL AS WebKitWebView PTR) AS WebKitUserContentManager PTR
DECLARE FUNCTION webkit_web_view_get_website_data_manager(BYVAL AS WebKitWebView PTR) AS WebKitWebsiteDataManager PTR
DECLARE FUNCTION webkit_web_view_get_window_properties(BYVAL AS WebKitWebView PTR) AS WebKitWindowProperties PTR
DECLARE FUNCTION webkit_web_view_get_zoom_level(BYVAL AS WebKitWebView PTR) AS gdouble
DECLARE SUB webkit_web_view_go_back(BYVAL AS WebKitWebView PTR)
DECLARE SUB webkit_web_view_go_forward(BYVAL AS WebKitWebView PTR)
DECLARE SUB webkit_web_view_go_to_back_forward_list_item(BYVAL AS WebKitWebView PTR, BYVAL AS WebKitBackForwardListItem PTR)
DECLARE FUNCTION webkit_web_view_is_controlled_by_automation(BYVAL AS WebKitWebView PTR) AS gboolean
DECLARE FUNCTION webkit_web_view_is_editable(BYVAL AS WebKitWebView PTR) AS gboolean
DECLARE FUNCTION webkit_web_view_is_ephemeral(BYVAL AS WebKitWebView PTR) AS gboolean
DECLARE FUNCTION webkit_web_view_is_loading(BYVAL AS WebKitWebView PTR) AS gboolean
DECLARE FUNCTION webkit_web_view_is_playing_audio(BYVAL AS WebKitWebView PTR) AS gboolean
DECLARE SUB webkit_web_view_load_alternate_html(BYVAL AS WebKitWebView PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR)
DECLARE SUB webkit_web_view_load_bytes(BYVAL AS WebKitWebView PTR, BYVAL AS GBytes PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR)
DECLARE SUB webkit_web_view_load_html(BYVAL AS WebKitWebView PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR)
DECLARE SUB webkit_web_view_load_plain_text(BYVAL AS WebKitWebView PTR, BYVAL AS const gchar PTR)
DECLARE SUB webkit_web_view_load_request(BYVAL AS WebKitWebView PTR, BYVAL AS WebKitURIRequest PTR)
DECLARE SUB webkit_web_view_load_uri(BYVAL AS WebKitWebView PTR, BYVAL AS const gchar PTR)
DECLARE SUB webkit_web_view_reload(BYVAL AS WebKitWebView PTR)
DECLARE SUB webkit_web_view_reload_bypass_cache(BYVAL AS WebKitWebView PTR)
DECLARE SUB webkit_web_view_restore_session_state(BYVAL AS WebKitWebView PTR, BYVAL AS WebKitWebViewSessionState PTR)
DECLARE SUB webkit_web_view_run_javascript(BYVAL AS WebKitWebView PTR, BYVAL AS const gchar PTR, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
DECLARE FUNCTION webkit_web_view_run_javascript_finish(BYVAL AS WebKitWebView PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS WebKitJavascriptResult PTR
DECLARE SUB webkit_web_view_run_javascript_from_gresource(BYVAL AS WebKitWebView PTR, BYVAL AS const gchar PTR, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
DECLARE FUNCTION webkit_web_view_run_javascript_from_gresource_finish(BYVAL AS WebKitWebView PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS WebKitJavascriptResult PTR
DECLARE SUB webkit_web_view_run_javascript_in_world(BYVAL AS WebKitWebView PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
DECLARE FUNCTION webkit_web_view_run_javascript_in_world_finish(BYVAL AS WebKitWebView PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS WebKitJavascriptResult PTR
DECLARE SUB webkit_web_view_save(BYVAL AS WebKitWebView PTR, BYVAL AS WebKitSaveMode, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
DECLARE FUNCTION webkit_web_view_save_finish(BYVAL AS WebKitWebView PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS GInputStream PTR
DECLARE SUB webkit_web_view_save_to_file(BYVAL AS WebKitWebView PTR, BYVAL AS GFile PTR, BYVAL AS WebKitSaveMode, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
DECLARE FUNCTION webkit_web_view_save_to_file_finish(BYVAL AS WebKitWebView PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE SUB webkit_web_view_send_message_to_page(BYVAL AS WebKitWebView PTR, BYVAL AS WebKitUserMessage PTR, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
DECLARE FUNCTION webkit_web_view_send_message_to_page_finish(BYVAL AS WebKitWebView PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS WebKitUserMessage PTR
DECLARE SUB webkit_web_view_set_background_color(BYVAL AS WebKitWebView PTR, BYVAL AS const GdkRGBA PTR)
DECLARE SUB webkit_web_view_set_custom_charset(BYVAL AS WebKitWebView PTR, BYVAL AS const gchar PTR)
DECLARE SUB webkit_web_view_set_editable(BYVAL AS WebKitWebView PTR, BYVAL AS gboolean)
DECLARE SUB webkit_web_view_set_input_method_context(BYVAL AS WebKitWebView PTR, BYVAL AS WebKitInputMethodContext PTR)
DECLARE SUB webkit_web_view_set_settings(BYVAL AS WebKitWebView PTR, BYVAL AS WebKitSettings PTR)
DECLARE SUB webkit_web_view_set_zoom_level(BYVAL AS WebKitWebView PTR, BYVAL AS gdouble)
DECLARE SUB webkit_web_view_stop_loading(BYVAL AS WebKitWebView PTR)
DECLARE SUB webkit_web_view_try_close(BYVAL AS WebKitWebView PTR)
TYPE _WebKitWebViewBaseClass
  AS GtkContainerClass parentClass
  _webkit_reserved0 AS SUB CDECL()
  _webkit_reserved1 AS SUB CDECL()
  _webkit_reserved2 AS SUB CDECL()
  _webkit_reserved3 AS SUB CDECL()
END TYPE
TYPE _WebKitWebViewClass
  AS WebKitWebViewBaseClass parent
  load_changed AS SUB CDECL(BYVAL AS WebKitWebView PTR, BYVAL AS WebKitLoadEvent)
  load_failed AS FUNCTION CDECL(BYVAL AS WebKitWebView PTR, BYVAL AS WebKitLoadEvent, BYVAL AS const gchar PTR, BYVAL AS GError PTR) AS gboolean
  create AS FUNCTION CDECL(BYVAL AS WebKitWebView PTR, BYVAL AS WebKitNavigationAction PTR) AS GtkWidget PTR
  ready_to_show AS SUB CDECL(BYVAL AS WebKitWebView PTR)
  run_as_modal AS SUB CDECL(BYVAL AS WebKitWebView PTR)
  close AS SUB CDECL(BYVAL AS WebKitWebView PTR)
  script_dialog AS FUNCTION CDECL(BYVAL AS WebKitWebView PTR, BYVAL AS WebKitScriptDialog PTR) AS gboolean
  decide_policy AS FUNCTION CDECL(BYVAL AS WebKitWebView PTR, BYVAL AS WebKitPolicyDecision PTR, BYVAL AS WebKitPolicyDecisionType) AS gboolean
  permission_request AS FUNCTION CDECL(BYVAL AS WebKitWebView PTR, BYVAL AS WebKitPermissionRequest PTR) AS gboolean
  mouse_target_changed AS SUB CDECL(BYVAL AS WebKitWebView PTR, BYVAL AS WebKitHitTestResult PTR, BYVAL AS guint)
  print AS FUNCTION CDECL(BYVAL AS WebKitWebView PTR, BYVAL AS WebKitPrintOperation PTR) AS gboolean
  resource_load_started AS SUB CDECL(BYVAL AS WebKitWebView PTR, BYVAL AS WebKitWebResource PTR, BYVAL AS WebKitURIRequest PTR)
  enter_fullscreen AS FUNCTION CDECL(BYVAL AS WebKitWebView PTR) AS gboolean
  leave_fullscreen AS FUNCTION CDECL(BYVAL AS WebKitWebView PTR) AS gboolean
  run_file_chooser AS FUNCTION CDECL(BYVAL AS WebKitWebView PTR, BYVAL AS WebKitFileChooserRequest PTR) AS gboolean
  context_menu AS FUNCTION CDECL(BYVAL AS WebKitWebView PTR, BYVAL AS WebKitContextMenu PTR, BYVAL AS GdkEvent PTR, BYVAL AS WebKitHitTestResult PTR) AS gboolean
  context_menu_dismissed AS SUB CDECL(BYVAL AS WebKitWebView PTR)
  submit_form AS SUB CDECL(BYVAL AS WebKitWebView PTR, BYVAL AS WebKitFormSubmissionRequest PTR)
  insecure_content_detected AS SUB CDECL(BYVAL AS WebKitWebView PTR, BYVAL AS WebKitInsecureContentEvent)
  web_process_crashed AS FUNCTION CDECL(BYVAL AS WebKitWebView PTR) AS gboolean
  authenticate AS FUNCTION CDECL(BYVAL AS WebKitWebView PTR, BYVAL AS WebKitAuthenticationRequest PTR) AS gboolean
  load_failed_with_tls_errors AS FUNCTION CDECL(BYVAL AS WebKitWebView PTR, BYVAL AS const gchar PTR, BYVAL AS GTlsCertificate PTR, BYVAL AS GTlsCertificateFlags) AS gboolean
  show_notification AS FUNCTION CDECL(BYVAL AS WebKitWebView PTR, BYVAL AS WebKitNotification PTR) AS gboolean
  run_color_chooser AS FUNCTION CDECL(BYVAL AS WebKitWebView PTR, BYVAL AS WebKitColorChooserRequest PTR) AS gboolean
  show_option_menu AS FUNCTION CDECL(BYVAL AS WebKitWebView PTR, BYVAL AS GdkRectangle PTR, BYVAL AS WebKitOptionMenu PTR) AS gboolean
  web_process_terminated AS SUB CDECL(BYVAL AS WebKitWebView PTR, BYVAL AS WebKitWebProcessTerminationReason)
  user_message_received AS FUNCTION CDECL(BYVAL AS WebKitWebView PTR, BYVAL AS WebKitUserMessage PTR) AS gboolean
  _webkit_reserved0 AS SUB CDECL()
END TYPE
DECLARE FUNCTION webkit_web_view_session_state_new(BYVAL AS GBytes PTR) AS WebKitWebViewSessionState PTR
DECLARE FUNCTION webkit_web_view_session_state_ref(BYVAL AS WebKitWebViewSessionState PTR) AS WebKitWebViewSessionState PTR
DECLARE FUNCTION webkit_web_view_session_state_serialize(BYVAL AS WebKitWebViewSessionState PTR) AS GBytes PTR
DECLARE SUB webkit_web_view_session_state_unref(BYVAL AS WebKitWebViewSessionState PTR)
DECLARE FUNCTION webkit_website_data_get_name(BYVAL AS WebKitWebsiteData PTR) AS const char PTR
DECLARE FUNCTION webkit_website_data_get_size(BYVAL AS WebKitWebsiteData PTR, BYVAL AS WebKitWebsiteDataTypes) AS guint64
DECLARE FUNCTION webkit_website_data_get_types(BYVAL AS WebKitWebsiteData PTR) AS WebKitWebsiteDataTypes
DECLARE FUNCTION webkit_website_data_ref(BYVAL AS WebKitWebsiteData PTR) AS WebKitWebsiteData PTR
DECLARE SUB webkit_website_data_unref(BYVAL AS WebKitWebsiteData PTR)
TYPE _WebKitWebsiteDataManager
  AS GObject parent
  AS WebKitWebsiteDataManagerPrivate PTR priv
END TYPE
DECLARE FUNCTION webkit_website_data_manager_get_type() AS GType
#DEFINE WEBKIT2_TYPE_WEBSITE_DATA_MANAGER (webkit_website_data_manager_get_type())
#DEFINE WEBKIT2_WEBSITE_DATA_MANAGER(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), WEBKIT2_TYPE_WEBSITE_DATA_MANAGER, WebKitWebsiteDataManager))
#DEFINE WEBKIT2_WEBSITE_DATA_MANAGER_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), WEBKIT2_TYPE_WEBSITE_DATA_MANAGER, WebKit2WebsiteDataManagerClass))
#DEFINE WEBKIT2_IS_WEBSITE_DATA_MANAGER(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), WEBKIT2_TYPE_WEBSITE_DATA_MANAGER))
#DEFINE WEBKIT2_IS_CLASS_WEBSITE_DATA_MANAGER(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), WEBKIT2_TYPE_WEBSITE_DATA_MANAGER))
#DEFINE WEBKIT2_WEBSITE_DATA_MANAGER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), WEBKIT2_TYPE_WEBSITE_DATA_MANAGER, WebKit2WebsiteDataManagerClass))
DECLARE FUNCTION webkit_website_data_manager_new(BYVAL AS const gchar PTR, ...) AS WebKitWebsiteDataManager PTR
DECLARE FUNCTION webkit_website_data_manager_new_ephemeral() AS WebKitWebsiteDataManager PTR
DECLARE SUB webkit_website_data_manager_clear(BYVAL AS WebKitWebsiteDataManager PTR, BYVAL AS WebKitWebsiteDataTypes, BYVAL AS GTimeSpan, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
DECLARE FUNCTION webkit_website_data_manager_clear_finish(BYVAL AS WebKitWebsiteDataManager PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE SUB webkit_website_data_manager_fetch(BYVAL AS WebKitWebsiteDataManager PTR, BYVAL AS WebKitWebsiteDataTypes, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
DECLARE FUNCTION webkit_website_data_manager_fetch_finish(BYVAL AS WebKitWebsiteDataManager PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS GList PTR
DECLARE FUNCTION webkit_website_data_manager_get_base_cache_directory(BYVAL AS WebKitWebsiteDataManager PTR) AS const gchar PTR
DECLARE FUNCTION webkit_website_data_manager_get_base_data_directory(BYVAL AS WebKitWebsiteDataManager PTR) AS const gchar PTR
DECLARE FUNCTION webkit_website_data_manager_get_cookie_manager(BYVAL AS WebKitWebsiteDataManager PTR) AS WebKitCookieManager PTR
DECLARE FUNCTION webkit_website_data_manager_get_disk_cache_directory(BYVAL AS WebKitWebsiteDataManager PTR) AS const gchar PTR
DECLARE FUNCTION webkit_website_data_manager_get_hsts_cache_directory(BYVAL AS WebKitWebsiteDataManager PTR) AS const gchar PTR
DECLARE FUNCTION webkit_website_data_manager_get_indexeddb_directory(BYVAL AS WebKitWebsiteDataManager PTR) AS const gchar PTR
DECLARE FUNCTION webkit_website_data_manager_get_local_storage_directory(BYVAL AS WebKitWebsiteDataManager PTR) AS const gchar PTR
DECLARE FUNCTION webkit_website_data_manager_get_offline_application_cache_directory(BYVAL AS WebKitWebsiteDataManager PTR) AS const gchar PTR
DECLARE FUNCTION webkit_website_data_manager_get_websql_directory(BYVAL AS WebKitWebsiteDataManager PTR) AS const gchar PTR
DECLARE FUNCTION webkit_website_data_manager_is_ephemeral(BYVAL AS WebKitWebsiteDataManager PTR) AS gboolean
DECLARE SUB webkit_website_data_manager_remove(BYVAL AS WebKitWebsiteDataManager PTR, BYVAL AS WebKitWebsiteDataTypes, BYVAL AS GList PTR, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
DECLARE FUNCTION webkit_website_data_manager_remove_finish(BYVAL AS WebKitWebsiteDataManager PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS gboolean
TYPE _WebKitWebsiteDataManagerClass
  AS GObjectClass parent_class
  _webkit_reserved0 AS SUB CDECL()
  _webkit_reserved1 AS SUB CDECL()
  _webkit_reserved2 AS SUB CDECL()
  _webkit_reserved3 AS SUB CDECL()
END TYPE
TYPE _WebKitWindowProperties
  AS GObject parent
  AS WebKitWindowPropertiesPrivate PTR priv
END TYPE
DECLARE FUNCTION webkit_window_properties_get_type() AS GType
#DEFINE WEBKIT2_TYPE_WINDOW_PROPERTIES (webkit_window_properties_get_type())
#DEFINE WEBKIT2_WINDOW_PROPERTIES(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), WEBKIT2_TYPE_WINDOW_PROPERTIES, WebKitWindowProperties))
#DEFINE WEBKIT2_WINDOW_PROPERTIES_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), WEBKIT2_TYPE_WINDOW_PROPERTIES, WebKit2WindowPropertiesClass))
#DEFINE WEBKIT2_IS_WINDOW_PROPERTIES(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), WEBKIT2_TYPE_WINDOW_PROPERTIES))
#DEFINE WEBKIT2_IS_CLASS_WINDOW_PROPERTIES(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), WEBKIT2_TYPE_WINDOW_PROPERTIES))
#DEFINE WEBKIT2_WINDOW_PROPERTIES_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), WEBKIT2_TYPE_WINDOW_PROPERTIES, WebKit2WindowPropertiesClass))
DECLARE FUNCTION webkit_window_properties_get_fullscreen(BYVAL AS WebKitWindowProperties PTR) AS gboolean
DECLARE SUB webkit_window_properties_get_geometry(BYVAL AS WebKitWindowProperties PTR, BYVAL AS GdkRectangle PTR)
DECLARE FUNCTION webkit_window_properties_get_locationbar_visible(BYVAL AS WebKitWindowProperties PTR) AS gboolean
DECLARE FUNCTION webkit_window_properties_get_menubar_visible(BYVAL AS WebKitWindowProperties PTR) AS gboolean
DECLARE FUNCTION webkit_window_properties_get_resizable(BYVAL AS WebKitWindowProperties PTR) AS gboolean
DECLARE FUNCTION webkit_window_properties_get_scrollbars_visible(BYVAL AS WebKitWindowProperties PTR) AS gboolean
DECLARE FUNCTION webkit_window_properties_get_statusbar_visible(BYVAL AS WebKitWindowProperties PTR) AS gboolean
DECLARE FUNCTION webkit_window_properties_get_toolbar_visible(BYVAL AS WebKitWindowProperties PTR) AS gboolean
TYPE _WebKitWindowPropertiesClass
  AS GObjectClass parent_class
  _webkit_reserved0 AS SUB CDECL()
  _webkit_reserved1 AS SUB CDECL()
  _webkit_reserved2 AS SUB CDECL()
  _webkit_reserved3 AS SUB CDECL()
END TYPE
' P_4

DECLARE FUNCTION webkit_get_major_version() AS guint
DECLARE FUNCTION webkit_get_micro_version() AS guint
DECLARE FUNCTION webkit_get_minor_version() AS guint
DECLARE FUNCTION webkit_uri_for_display(BYVAL AS const gchar PTR) AS gchar PTR
DECLARE FUNCTION webkit_user_media_permission_is_for_audio_device(BYVAL AS WebKitUserMediaPermissionRequest PTR) AS gboolean
DECLARE FUNCTION webkit_user_media_permission_is_for_video_device(BYVAL AS WebKitUserMediaPermissionRequest PTR) AS gboolean
END EXTERN

