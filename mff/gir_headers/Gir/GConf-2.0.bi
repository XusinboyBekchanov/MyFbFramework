'            FreeBasic header file, auto-generated by
'                       ### girtobac ###
' LGPLv2.1 (C) 2013-2022 by Thomas{ doT ]Freiherr[ At ]gmx[ DoT }net
' Auto-translated from file /usr/share/gir-1.0/GConf-2.0.gir
#INCLUDE ONCE "_GirToBac-0.0.bi"
' Repository version 1.2
#INCLUDE ONCE "GObject-2.0.bi"
TYPE AS _GConfChangeSet GConfChangeSet
TYPE AS _GConfClient GConfClient
TYPE AS _GConfClientClass GConfClientClass
TYPE AS LONG GConfClientErrorHandlingMode
ENUM
  GCONF_CLIENT_HANDLE_NONE = 0
  GCONF_CLIENT_HANDLE_UNRETURNED = 1
  GCONF_CLIENT_HANDLE_ALL = 2
END ENUM
TYPE AS LONG GConfClientPreloadType
ENUM
  GCONF_CLIENT_PRELOAD_NONE = 0
  GCONF_CLIENT_PRELOAD_ONELEVEL = 1
  GCONF_CLIENT_PRELOAD_RECURSIVE = 2
END ENUM
TYPE AS _GConfEngine GConfEngine
TYPE AS _GConfEntry GConfEntry
TYPE AS _GConfEnumStringPair GConfEnumStringPair
TYPE AS LONG GConfError
ENUM
  GCONF_ERROR_SUCCESS = 0
  GCONF_ERROR_FAILED = 1
  GCONF_ERROR_NO_SERVER = 2
  GCONF_ERROR_NO_PERMISSION = 3
  GCONF_ERROR_BAD_ADDRESS = 4
  GCONF_ERROR_BAD_KEY = 5
  GCONF_ERROR_PARSE_ERROR = 6
  GCONF_ERROR_CORRUPT = 7
  GCONF_ERROR_TYPE_MISMATCH = 8
  GCONF_ERROR_IS_DIR = 9
  GCONF_ERROR_IS_KEY = 10
  GCONF_ERROR_OVERRIDDEN = 11
  GCONF_ERROR_OAF_ERROR = 12
  GCONF_ERROR_LOCAL_ENGINE = 13
  GCONF_ERROR_LOCK_FAILED = 14
  GCONF_ERROR_NO_WRITABLE_DATABASE = 15
  GCONF_ERROR_IN_SHUTDOWN = 16
END ENUM
TYPE AS _GConfListeners GConfListeners
TYPE AS _GConfMetaInfo GConfMetaInfo
TYPE AS _GConfSchema GConfSchema
TYPE AS LONG GConfUnsetFlags
ENUM
  GCONF_UNSET_INCLUDING_SCHEMA_NAMES = 1
END ENUM
TYPE AS _GConfValue GConfValue
TYPE AS LONG GConfValueType
ENUM
  GCONF_VALUE_INVALID = 0
  GCONF_VALUE_STRING = 1
  GCONF_VALUE_INT = 2
  GCONF_VALUE_FLOAT = 3
  GCONF_VALUE_BOOL = 4
  GCONF_VALUE_SCHEMA = 5
  GCONF_VALUE_LIST = 6
  GCONF_VALUE_PAIR = 7
END ENUM
EXTERN "C" LIB "gconf-2"
' P_X

TYPE GConfChangeSetForeachFunc AS SUB CDECL(BYVAL AS GConfChangeSet PTR, BYVAL AS const gchar PTR, BYVAL AS GConfValue PTR, BYVAL AS gpointer)
TYPE GConfClientErrorHandlerFunc AS SUB CDECL(BYVAL AS GConfClient PTR, BYVAL AS GError PTR)
TYPE GConfClientNotifyFunc AS SUB CDECL(BYVAL AS GConfClient PTR, BYVAL AS guint, BYVAL AS GConfEntry PTR, BYVAL AS gpointer)
TYPE GConfNotifyFunc AS SUB CDECL(BYVAL AS GConfEngine PTR, BYVAL AS guint, BYVAL AS GConfEntry PTR, BYVAL AS gpointer)
TYPE GConfListenersForeach AS SUB CDECL(BYVAL AS const gchar PTR, BYVAL AS guint, BYVAL AS gpointer, BYVAL AS gpointer)
TYPE GConfListenersCallback AS SUB CDECL(BYVAL AS GConfListeners PTR, BYVAL AS const gchar PTR, BYVAL AS guint, BYVAL AS gpointer, BYVAL AS gpointer)
TYPE GConfListenersPredicate AS FUNCTION CDECL(BYVAL AS const gchar PTR, BYVAL AS guint, BYVAL AS gpointer, BYVAL AS gpointer) AS gboolean
' P_3

DECLARE FUNCTION gconf_change_set_new() AS GConfChangeSet PTR
DECLARE FUNCTION gconf_change_set_check_value(BYVAL AS GConfChangeSet PTR, BYVAL AS const gchar PTR, BYVAL AS GConfValue PTR PTR) AS gboolean
DECLARE SUB gconf_change_set_clear(BYVAL AS GConfChangeSet PTR)
DECLARE SUB gconf_change_set_foreach(BYVAL AS GConfChangeSet PTR, BYVAL AS GConfChangeSetForeachFunc, BYVAL AS gpointer)
DECLARE FUNCTION gconf_change_set_get_user_data(BYVAL AS GConfChangeSet PTR) AS gpointer
DECLARE FUNCTION gconf_change_set_ref(BYVAL AS GConfChangeSet PTR) AS GConfChangeSet PTR
DECLARE SUB gconf_change_set_remove(BYVAL AS GConfChangeSet PTR, BYVAL AS const gchar PTR)
DECLARE SUB gconf_change_set_set(BYVAL AS GConfChangeSet PTR, BYVAL AS const gchar PTR, BYVAL AS GConfValue PTR)
DECLARE SUB gconf_change_set_set_bool(BYVAL AS GConfChangeSet PTR, BYVAL AS const gchar PTR, BYVAL AS gboolean)
DECLARE SUB gconf_change_set_set_float(BYVAL AS GConfChangeSet PTR, BYVAL AS const gchar PTR, BYVAL AS gdouble)
DECLARE SUB gconf_change_set_set_int(BYVAL AS GConfChangeSet PTR, BYVAL AS const gchar PTR, BYVAL AS gint)
DECLARE SUB gconf_change_set_set_list(BYVAL AS GConfChangeSet PTR, BYVAL AS const gchar PTR, BYVAL AS GConfValueType, BYVAL AS GSList PTR)
DECLARE SUB gconf_change_set_set_nocopy(BYVAL AS GConfChangeSet PTR, BYVAL AS const gchar PTR, BYVAL AS GConfValue PTR)
DECLARE SUB gconf_change_set_set_pair(BYVAL AS GConfChangeSet PTR, BYVAL AS const gchar PTR, BYVAL AS GConfValueType, BYVAL AS GConfValueType, BYVAL AS gconstpointer, BYVAL AS gconstpointer)
DECLARE SUB gconf_change_set_set_schema(BYVAL AS GConfChangeSet PTR, BYVAL AS const gchar PTR, BYVAL AS GConfSchema PTR)
DECLARE SUB gconf_change_set_set_string(BYVAL AS GConfChangeSet PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR)
DECLARE SUB gconf_change_set_set_user_data(BYVAL AS GConfChangeSet PTR, BYVAL AS gpointer, BYVAL AS GDestroyNotify)
DECLARE FUNCTION gconf_change_set_size(BYVAL AS GConfChangeSet PTR) AS guint
DECLARE SUB gconf_change_set_unref(BYVAL AS GConfChangeSet PTR)
DECLARE SUB gconf_change_set_unset(BYVAL AS GConfChangeSet PTR, BYVAL AS const gchar PTR)
TYPE _GConfClient
  AS GObject object
  AS GConfEngine PTR engine
  AS GConfClientErrorHandlingMode error_mode
  AS GHashTable PTR dir_hash
  AS GHashTable PTR cache_hash
  AS GConfListeners PTR listeners
  AS GSList PTR notify_list
  AS guint notify_handler
  AS gint /'int'/ pending_notify_count
  AS GHashTable PTR cache_dirs
  AS GHashTable PTR cache_recursive_dirs
END TYPE
DECLARE FUNCTION gconf_client_get_type() AS GType
#DEFINE GCONF_TYPE_CLIENT (gconf_client_get_type())
#DEFINE GCONF_CLIENT(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GCONF_TYPE_CLIENT, GConfClient))
#DEFINE GCONF_CLIENT_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GCONF_TYPE_CLIENT, GConfClientClass))
#DEFINE GCONF_IS_CLIENT(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GCONF_TYPE_CLIENT))
#DEFINE GCONF_IS_CLASS_CLIENT(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GCONF_TYPE_CLIENT))
#DEFINE GCONF_CLIENT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GCONF_TYPE_CLIENT, GConfClientClass))
DECLARE FUNCTION gconf_client_get_default() AS GConfClient PTR
DECLARE FUNCTION gconf_client_get_for_engine(BYVAL AS GConfEngine PTR) AS GConfClient PTR
DECLARE SUB gconf_client_set_global_default_error_handler(BYVAL AS GConfClientErrorHandlerFunc)
DECLARE SUB gconf_client_add_dir(BYVAL AS GConfClient PTR, BYVAL AS const gchar PTR, BYVAL AS GConfClientPreloadType, BYVAL AS GError PTR PTR)
DECLARE FUNCTION gconf_client_all_dirs(BYVAL AS GConfClient PTR, BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR) AS GSList PTR
DECLARE FUNCTION gconf_client_all_entries(BYVAL AS GConfClient PTR, BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR) AS GSList PTR
DECLARE FUNCTION gconf_client_change_set_from_current(BYVAL AS GConfClient PTR, BYVAL AS GError PTR PTR, BYVAL AS const gchar PTR, ...) AS GConfChangeSet PTR
DECLARE FUNCTION gconf_client_change_set_from_currentv(BYVAL AS GConfClient PTR, BYVAL AS const gchar PTR PTR, BYVAL AS GError PTR PTR) AS GConfChangeSet PTR
DECLARE SUB gconf_client_clear_cache(BYVAL AS GConfClient PTR)
DECLARE FUNCTION gconf_client_commit_change_set(BYVAL AS GConfClient PTR, BYVAL AS GConfChangeSet PTR, BYVAL AS gboolean, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION gconf_client_dir_exists(BYVAL AS GConfClient PTR, BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE SUB gconf_client_error(BYVAL AS GConfClient PTR, BYVAL AS GError PTR)
DECLARE FUNCTION gconf_client_get(BYVAL AS GConfClient PTR, BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR) AS GConfValue PTR
DECLARE FUNCTION gconf_client_get_bool(BYVAL AS GConfClient PTR, BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION gconf_client_get_default_from_schema(BYVAL AS GConfClient PTR, BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR) AS GConfValue PTR
DECLARE FUNCTION gconf_client_get_entry(BYVAL AS GConfClient PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS gboolean, BYVAL AS GError PTR PTR) AS GConfEntry PTR
DECLARE FUNCTION gconf_client_get_float(BYVAL AS GConfClient PTR, BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR) AS gdouble
DECLARE FUNCTION gconf_client_get_int(BYVAL AS GConfClient PTR, BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR) AS gint
DECLARE FUNCTION gconf_client_get_list(BYVAL AS GConfClient PTR, BYVAL AS const gchar PTR, BYVAL AS GConfValueType, BYVAL AS GError PTR PTR) AS GSList PTR
DECLARE FUNCTION gconf_client_get_pair(BYVAL AS GConfClient PTR, BYVAL AS const gchar PTR, BYVAL AS GConfValueType, BYVAL AS GConfValueType, BYVAL AS gpointer, BYVAL AS gpointer, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION gconf_client_get_schema(BYVAL AS GConfClient PTR, BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR) AS GConfSchema PTR
DECLARE FUNCTION gconf_client_get_string(BYVAL AS GConfClient PTR, BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR) AS gchar PTR
DECLARE FUNCTION gconf_client_get_without_default(BYVAL AS GConfClient PTR, BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR) AS GConfValue PTR
DECLARE FUNCTION gconf_client_key_is_writable(BYVAL AS GConfClient PTR, BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE SUB gconf_client_notify(BYVAL AS GConfClient PTR, BYVAL AS const char PTR)
DECLARE FUNCTION gconf_client_notify_add(BYVAL AS GConfClient PTR, BYVAL AS const gchar PTR, BYVAL AS GConfClientNotifyFunc, BYVAL AS gpointer, BYVAL AS GFreeFunc, BYVAL AS GError PTR PTR) AS guint
DECLARE SUB gconf_client_notify_remove(BYVAL AS GConfClient PTR, BYVAL AS guint)
DECLARE SUB gconf_client_preload(BYVAL AS GConfClient PTR, BYVAL AS const gchar PTR, BYVAL AS GConfClientPreloadType, BYVAL AS GError PTR PTR)
DECLARE FUNCTION gconf_client_recursive_unset(BYVAL AS GConfClient PTR, BYVAL AS const char PTR, BYVAL AS GConfUnsetFlags, BYVAL AS GError PTR PTR) AS gboolean
DECLARE SUB gconf_client_remove_dir(BYVAL AS GConfClient PTR, BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR)
DECLARE FUNCTION gconf_client_reverse_change_set(BYVAL AS GConfClient PTR, BYVAL AS GConfChangeSet PTR, BYVAL AS GError PTR PTR) AS GConfChangeSet PTR
DECLARE SUB gconf_client_set(BYVAL AS GConfClient PTR, BYVAL AS const gchar PTR, BYVAL AS const GConfValue PTR, BYVAL AS GError PTR PTR)
DECLARE FUNCTION gconf_client_set_bool(BYVAL AS GConfClient PTR, BYVAL AS const gchar PTR, BYVAL AS gboolean, BYVAL AS GError PTR PTR) AS gboolean
DECLARE SUB gconf_client_set_error_handling(BYVAL AS GConfClient PTR, BYVAL AS GConfClientErrorHandlingMode)
DECLARE FUNCTION gconf_client_set_float(BYVAL AS GConfClient PTR, BYVAL AS const gchar PTR, BYVAL AS gdouble, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION gconf_client_set_int(BYVAL AS GConfClient PTR, BYVAL AS const gchar PTR, BYVAL AS gint, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION gconf_client_set_list(BYVAL AS GConfClient PTR, BYVAL AS const gchar PTR, BYVAL AS GConfValueType, BYVAL AS GSList PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION gconf_client_set_pair(BYVAL AS GConfClient PTR, BYVAL AS const gchar PTR, BYVAL AS GConfValueType, BYVAL AS GConfValueType, BYVAL AS gconstpointer, BYVAL AS gconstpointer, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION gconf_client_set_schema(BYVAL AS GConfClient PTR, BYVAL AS const gchar PTR, BYVAL AS const GConfSchema PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION gconf_client_set_string(BYVAL AS GConfClient PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE SUB gconf_client_suggest_sync(BYVAL AS GConfClient PTR, BYVAL AS GError PTR PTR)
DECLARE SUB gconf_client_unreturned_error(BYVAL AS GConfClient PTR, BYVAL AS GError PTR)
DECLARE FUNCTION gconf_client_unset(BYVAL AS GConfClient PTR, BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE SUB gconf_client_value_changed(BYVAL AS GConfClient PTR, BYVAL AS const gchar PTR, BYVAL AS GConfValue PTR)
TYPE _GConfClientClass
  AS GObjectClass parent_class
  value_changed AS SUB CDECL(BYVAL AS GConfClient PTR, BYVAL AS const gchar PTR, BYVAL AS GConfValue PTR)
  unreturned_error AS SUB CDECL(BYVAL AS GConfClient PTR, BYVAL AS GError PTR)
  error AS SUB CDECL(BYVAL AS GConfClient PTR, BYVAL AS GError PTR)
  AS GFunc pad1
  AS GFunc pad2
  AS GFunc pad3
END TYPE
DECLARE FUNCTION gconf_client_error_handling_mode_get_type() AS GType
#DEFINE GCONF_TYPE_CLIENT_ERROR_HANDLING_MODE (gconf_client_error_handling_mode_get_type())
DECLARE FUNCTION gconf_client_preload_type_get_type() AS GType
#DEFINE GCONF_TYPE_CLIENT_PRELOAD_TYPE (gconf_client_preload_type_get_type())
DECLARE FUNCTION gconf_engine_all_dirs(BYVAL AS GConfEngine PTR, BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR) AS GSList PTR
DECLARE FUNCTION gconf_engine_all_entries(BYVAL AS GConfEngine PTR, BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR) AS GSList PTR
DECLARE FUNCTION gconf_engine_associate_schema(BYVAL AS GConfEngine PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION gconf_engine_change_set_from_current(BYVAL AS GConfEngine PTR, BYVAL AS GError PTR PTR, BYVAL AS const gchar PTR, ...) AS GConfChangeSet PTR
DECLARE FUNCTION gconf_engine_change_set_from_currentv(BYVAL AS GConfEngine PTR, BYVAL AS const gchar PTR PTR, BYVAL AS GError PTR PTR) AS GConfChangeSet PTR
DECLARE FUNCTION gconf_engine_commit_change_set(BYVAL AS GConfEngine PTR, BYVAL AS GConfChangeSet PTR, BYVAL AS gboolean, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION gconf_engine_dir_exists(BYVAL AS GConfEngine PTR, BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION gconf_engine_get(BYVAL AS GConfEngine PTR, BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR) AS GConfValue PTR
DECLARE FUNCTION gconf_engine_get_bool(BYVAL AS GConfEngine PTR, BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION gconf_engine_get_default_from_schema(BYVAL AS GConfEngine PTR, BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR) AS GConfValue PTR
DECLARE FUNCTION gconf_engine_get_entry(BYVAL AS GConfEngine PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS gboolean, BYVAL AS GError PTR PTR) AS GConfEntry PTR
DECLARE FUNCTION gconf_engine_get_float(BYVAL AS GConfEngine PTR, BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR) AS gdouble
DECLARE FUNCTION gconf_engine_get_full(BYVAL AS GConfEngine PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS gboolean, BYVAL AS gboolean PTR, BYVAL AS gboolean PTR, BYVAL AS GError PTR PTR) AS GConfValue PTR
DECLARE FUNCTION gconf_engine_get_int(BYVAL AS GConfEngine PTR, BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR) AS gint
DECLARE FUNCTION gconf_engine_get_list(BYVAL AS GConfEngine PTR, BYVAL AS const gchar PTR, BYVAL AS GConfValueType, BYVAL AS GError PTR PTR) AS GSList PTR
DECLARE FUNCTION gconf_engine_get_pair(BYVAL AS GConfEngine PTR, BYVAL AS const gchar PTR, BYVAL AS GConfValueType, BYVAL AS GConfValueType, BYVAL AS gpointer, BYVAL AS gpointer, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION gconf_engine_get_schema(BYVAL AS GConfEngine PTR, BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR) AS GConfSchema PTR
DECLARE FUNCTION gconf_engine_get_string(BYVAL AS GConfEngine PTR, BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR) AS gchar PTR
DECLARE FUNCTION gconf_engine_get_user_data(BYVAL AS GConfEngine PTR) AS gpointer
DECLARE FUNCTION gconf_engine_get_with_locale(BYVAL AS GConfEngine PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR) AS GConfValue PTR
DECLARE FUNCTION gconf_engine_get_without_default(BYVAL AS GConfEngine PTR, BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR) AS GConfValue PTR
DECLARE FUNCTION gconf_engine_key_is_writable(BYVAL AS GConfEngine PTR, BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION gconf_engine_notify_add(BYVAL AS GConfEngine PTR, BYVAL AS const gchar PTR, BYVAL AS GConfNotifyFunc, BYVAL AS gpointer, BYVAL AS GError PTR PTR) AS guint
DECLARE SUB gconf_engine_notify_remove(BYVAL AS GConfEngine PTR, BYVAL AS guint)
DECLARE SUB gconf_engine_ref(BYVAL AS GConfEngine PTR)
DECLARE SUB gconf_engine_remove_dir(BYVAL AS GConfEngine PTR, BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR)
DECLARE FUNCTION gconf_engine_reverse_change_set(BYVAL AS GConfEngine PTR, BYVAL AS GConfChangeSet PTR, BYVAL AS GError PTR PTR) AS GConfChangeSet PTR
DECLARE FUNCTION gconf_engine_set(BYVAL AS GConfEngine PTR, BYVAL AS const gchar PTR, BYVAL AS const GConfValue PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION gconf_engine_set_bool(BYVAL AS GConfEngine PTR, BYVAL AS const gchar PTR, BYVAL AS gboolean, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION gconf_engine_set_float(BYVAL AS GConfEngine PTR, BYVAL AS const gchar PTR, BYVAL AS gdouble, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION gconf_engine_set_int(BYVAL AS GConfEngine PTR, BYVAL AS const gchar PTR, BYVAL AS gint, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION gconf_engine_set_list(BYVAL AS GConfEngine PTR, BYVAL AS const gchar PTR, BYVAL AS GConfValueType, BYVAL AS GSList PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION gconf_engine_set_pair(BYVAL AS GConfEngine PTR, BYVAL AS const gchar PTR, BYVAL AS GConfValueType, BYVAL AS GConfValueType, BYVAL AS gconstpointer, BYVAL AS gconstpointer, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION gconf_engine_set_schema(BYVAL AS GConfEngine PTR, BYVAL AS const gchar PTR, BYVAL AS const GConfSchema PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION gconf_engine_set_string(BYVAL AS GConfEngine PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE SUB gconf_engine_set_user_data(BYVAL AS GConfEngine PTR, BYVAL AS gpointer, BYVAL AS GDestroyNotify)
DECLARE SUB gconf_engine_suggest_sync(BYVAL AS GConfEngine PTR, BYVAL AS GError PTR PTR)
DECLARE SUB gconf_engine_unref(BYVAL AS GConfEngine PTR)
DECLARE FUNCTION gconf_engine_unset(BYVAL AS GConfEngine PTR, BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION gconf_engine_get_default() AS GConfEngine PTR
DECLARE FUNCTION gconf_engine_get_for_address(BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR) AS GConfEngine PTR
DECLARE FUNCTION gconf_engine_get_for_addresses(BYVAL AS GSList PTR, BYVAL AS GError PTR PTR) AS GConfEngine PTR
DECLARE FUNCTION gconf_engine_get_local(BYVAL AS const char PTR, BYVAL AS GError PTR PTR) AS GConfEngine PTR
DECLARE FUNCTION gconf_engine_get_local_for_addresses(BYVAL AS GSList PTR, BYVAL AS GError PTR PTR) AS GConfEngine PTR
TYPE _GConfEntry
  AS char PTR key
  AS GConfValue PTR value
END TYPE
DECLARE FUNCTION gconf_entry_new(BYVAL AS const gchar PTR, BYVAL AS const GConfValue PTR) AS GConfEntry PTR
DECLARE FUNCTION gconf_entry_new_nocopy(BYVAL AS gchar PTR, BYVAL AS GConfValue PTR) AS GConfEntry PTR
DECLARE FUNCTION gconf_entry_copy(BYVAL AS const GConfEntry PTR) AS GConfEntry PTR
DECLARE FUNCTION gconf_entry_equal(BYVAL AS const GConfEntry PTR, BYVAL AS const GConfEntry PTR) AS gboolean
DECLARE SUB gconf_entry_free(BYVAL AS GConfEntry PTR)
DECLARE FUNCTION gconf_entry_get_is_default(BYVAL AS const GConfEntry PTR) AS gboolean
DECLARE FUNCTION gconf_entry_get_is_writable(BYVAL AS const GConfEntry PTR) AS gboolean
DECLARE FUNCTION gconf_entry_get_key(BYVAL AS const GConfEntry PTR) AS const char PTR
DECLARE FUNCTION gconf_entry_get_schema_name(BYVAL AS const GConfEntry PTR) AS const char PTR
DECLARE FUNCTION gconf_entry_get_value(BYVAL AS const GConfEntry PTR) AS GConfValue PTR
DECLARE FUNCTION gconf_entry_ref(BYVAL AS GConfEntry PTR) AS GConfEntry PTR
DECLARE SUB gconf_entry_set_is_default(BYVAL AS GConfEntry PTR, BYVAL AS gboolean)
DECLARE SUB gconf_entry_set_is_writable(BYVAL AS GConfEntry PTR, BYVAL AS gboolean)
DECLARE SUB gconf_entry_set_schema_name(BYVAL AS GConfEntry PTR, BYVAL AS const gchar PTR)
DECLARE SUB gconf_entry_set_value(BYVAL AS GConfEntry PTR, BYVAL AS const GConfValue PTR)
DECLARE SUB gconf_entry_set_value_nocopy(BYVAL AS GConfEntry PTR, BYVAL AS GConfValue PTR)
DECLARE FUNCTION gconf_entry_steal_value(BYVAL AS GConfEntry PTR) AS GConfValue PTR
DECLARE SUB gconf_entry_unref(BYVAL AS GConfEntry PTR)
TYPE _GConfEnumStringPair
  AS gint enum_value
  AS const gchar PTR str
END TYPE
DECLARE FUNCTION gconf_error_get_type() AS GType
#DEFINE GCONF_TYPE_ERROR (gconf_error_get_type())
DECLARE FUNCTION gconf_listeners_add(BYVAL AS GConfListeners PTR, BYVAL AS const gchar PTR, BYVAL AS gpointer, BYVAL AS GFreeFunc) AS guint
DECLARE FUNCTION gconf_listeners_count(BYVAL AS GConfListeners PTR) AS guint
DECLARE SUB gconf_listeners_foreach(BYVAL AS GConfListeners PTR, BYVAL AS GConfListenersForeach, BYVAL AS gpointer)
DECLARE SUB gconf_listeners_free(BYVAL AS GConfListeners PTR)
DECLARE FUNCTION gconf_listeners_get_data(BYVAL AS GConfListeners PTR, BYVAL AS guint, BYVAL AS gpointer PTR, BYVAL AS const gchar PTR PTR) AS gboolean
DECLARE SUB gconf_listeners_notify(BYVAL AS GConfListeners PTR, BYVAL AS const gchar PTR, BYVAL AS GConfListenersCallback, BYVAL AS gpointer)
DECLARE SUB gconf_listeners_remove(BYVAL AS GConfListeners PTR, BYVAL AS guint)
DECLARE SUB gconf_listeners_remove_if(BYVAL AS GConfListeners PTR, BYVAL AS GConfListenersPredicate, BYVAL AS gpointer)
DECLARE FUNCTION gconf_listeners_new() AS GConfListeners PTR
TYPE _GConfMetaInfo
  AS gchar PTR schema
  AS gchar PTR mod_user
  AS GTime mod_time
END TYPE
DECLARE SUB gconf_meta_info_free(BYVAL AS GConfMetaInfo PTR)
DECLARE FUNCTION gconf_meta_info_get_mod_user(BYVAL AS GConfMetaInfo PTR) AS const char PTR
DECLARE FUNCTION gconf_meta_info_get_schema(BYVAL AS GConfMetaInfo PTR) AS const char PTR
DECLARE FUNCTION gconf_meta_info_mod_time(BYVAL AS GConfMetaInfo PTR) AS GTime
DECLARE SUB gconf_meta_info_set_mod_time(BYVAL AS GConfMetaInfo PTR, BYVAL AS GTime)
DECLARE SUB gconf_meta_info_set_mod_user(BYVAL AS GConfMetaInfo PTR, BYVAL AS const gchar PTR)
DECLARE SUB gconf_meta_info_set_schema(BYVAL AS GConfMetaInfo PTR, BYVAL AS const gchar PTR)
DECLARE FUNCTION gconf_meta_info_new() AS GConfMetaInfo PTR
DECLARE FUNCTION gconf_schema_copy(BYVAL AS const GConfSchema PTR) AS GConfSchema PTR
DECLARE SUB gconf_schema_free(BYVAL AS GConfSchema PTR)
DECLARE FUNCTION gconf_schema_get_car_type(BYVAL AS const GConfSchema PTR) AS GConfValueType
DECLARE FUNCTION gconf_schema_get_cdr_type(BYVAL AS const GConfSchema PTR) AS GConfValueType
DECLARE FUNCTION gconf_schema_get_default_value(BYVAL AS const GConfSchema PTR) AS GConfValue PTR
DECLARE FUNCTION gconf_schema_get_gettext_domain(BYVAL AS const GConfSchema PTR) AS const char PTR
DECLARE FUNCTION gconf_schema_get_list_type(BYVAL AS const GConfSchema PTR) AS GConfValueType
DECLARE FUNCTION gconf_schema_get_locale(BYVAL AS const GConfSchema PTR) AS const char PTR
DECLARE FUNCTION gconf_schema_get_long_desc(BYVAL AS const GConfSchema PTR) AS const char PTR
DECLARE FUNCTION gconf_schema_get_owner(BYVAL AS const GConfSchema PTR) AS const char PTR
DECLARE FUNCTION gconf_schema_get_short_desc(BYVAL AS const GConfSchema PTR) AS const char PTR
DECLARE FUNCTION gconf_schema_get_type(BYVAL AS const GConfSchema PTR) AS GConfValueType
DECLARE SUB gconf_schema_set_car_type(BYVAL AS GConfSchema PTR, BYVAL AS GConfValueType)
DECLARE SUB gconf_schema_set_cdr_type(BYVAL AS GConfSchema PTR, BYVAL AS GConfValueType)
DECLARE SUB gconf_schema_set_default_value(BYVAL AS GConfSchema PTR, BYVAL AS const GConfValue PTR)
DECLARE SUB gconf_schema_set_default_value_nocopy(BYVAL AS GConfSchema PTR, BYVAL AS GConfValue PTR)
DECLARE SUB gconf_schema_set_gettext_domain(BYVAL AS GConfSchema PTR, BYVAL AS const gchar PTR)
DECLARE SUB gconf_schema_set_list_type(BYVAL AS GConfSchema PTR, BYVAL AS GConfValueType)
DECLARE SUB gconf_schema_set_locale(BYVAL AS GConfSchema PTR, BYVAL AS const gchar PTR)
DECLARE SUB gconf_schema_set_long_desc(BYVAL AS GConfSchema PTR, BYVAL AS const gchar PTR)
DECLARE SUB gconf_schema_set_owner(BYVAL AS GConfSchema PTR, BYVAL AS const gchar PTR)
DECLARE SUB gconf_schema_set_short_desc(BYVAL AS GConfSchema PTR, BYVAL AS const gchar PTR)
DECLARE SUB gconf_schema_set_type(BYVAL AS GConfSchema PTR, BYVAL AS GConfValueType)
DECLARE FUNCTION gconf_schema_new() AS GConfSchema PTR
TYPE _GConfValue
  AS GConfValueType type
END TYPE
DECLARE FUNCTION gconf_value_new(BYVAL AS GConfValueType) AS GConfValue PTR
DECLARE FUNCTION gconf_value_new_from_string(BYVAL AS GConfValueType, BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR) AS GConfValue PTR
DECLARE FUNCTION gconf_value_compare(BYVAL AS const GConfValue PTR, BYVAL AS const GConfValue PTR) AS gint /'int'/
DECLARE FUNCTION gconf_value_copy(BYVAL AS const GConfValue PTR) AS GConfValue PTR
DECLARE FUNCTION gconf_value_encode(BYVAL AS GConfValue PTR) AS gchar PTR
DECLARE SUB gconf_value_free(BYVAL AS GConfValue PTR)
DECLARE FUNCTION gconf_value_get_bool(BYVAL AS const GConfValue PTR) AS gboolean
DECLARE FUNCTION gconf_value_get_car(BYVAL AS const GConfValue PTR) AS GConfValue PTR
DECLARE FUNCTION gconf_value_get_cdr(BYVAL AS const GConfValue PTR) AS GConfValue PTR
DECLARE FUNCTION gconf_value_get_float(BYVAL AS const GConfValue PTR) AS double
DECLARE FUNCTION gconf_value_get_int(BYVAL AS const GConfValue PTR) AS gint /'int'/
DECLARE FUNCTION gconf_value_get_list(BYVAL AS const GConfValue PTR) AS GSList PTR
DECLARE FUNCTION gconf_value_get_list_type(BYVAL AS const GConfValue PTR) AS GConfValueType
DECLARE FUNCTION gconf_value_get_schema(BYVAL AS const GConfValue PTR) AS GConfSchema PTR
DECLARE FUNCTION gconf_value_get_string(BYVAL AS const GConfValue PTR) AS const char PTR
DECLARE SUB gconf_value_set_bool(BYVAL AS GConfValue PTR, BYVAL AS gboolean)
DECLARE SUB gconf_value_set_car(BYVAL AS GConfValue PTR, BYVAL AS const GConfValue PTR)
DECLARE SUB gconf_value_set_car_nocopy(BYVAL AS GConfValue PTR, BYVAL AS GConfValue PTR)
DECLARE SUB gconf_value_set_cdr(BYVAL AS GConfValue PTR, BYVAL AS const GConfValue PTR)
DECLARE SUB gconf_value_set_cdr_nocopy(BYVAL AS GConfValue PTR, BYVAL AS GConfValue PTR)
DECLARE SUB gconf_value_set_float(BYVAL AS GConfValue PTR, BYVAL AS gdouble)
DECLARE SUB gconf_value_set_int(BYVAL AS GConfValue PTR, BYVAL AS gint)
DECLARE SUB gconf_value_set_list(BYVAL AS GConfValue PTR, BYVAL AS GSList PTR)
DECLARE SUB gconf_value_set_list_nocopy(BYVAL AS GConfValue PTR, BYVAL AS GSList PTR)
DECLARE SUB gconf_value_set_list_type(BYVAL AS GConfValue PTR, BYVAL AS GConfValueType)
DECLARE SUB gconf_value_set_schema(BYVAL AS GConfValue PTR, BYVAL AS const GConfSchema PTR)
DECLARE SUB gconf_value_set_schema_nocopy(BYVAL AS GConfValue PTR, BYVAL AS GConfSchema PTR)
DECLARE SUB gconf_value_set_string(BYVAL AS GConfValue PTR, BYVAL AS const gchar PTR)
DECLARE FUNCTION gconf_value_to_string(BYVAL AS const GConfValue PTR) AS gchar PTR
DECLARE FUNCTION gconf_value_decode(BYVAL AS const gchar PTR) AS GConfValue PTR
' P_4

DECLARE SUB gconf_clear_cache(BYVAL AS GConfEngine PTR, BYVAL AS GError PTR PTR)
DECLARE FUNCTION gconf_concat_dir_and_key(BYVAL AS const gchar PTR, BYVAL AS const gchar PTR) AS gchar PTR
DECLARE FUNCTION gconf_debug_shutdown() AS gint /'int'/
DECLARE FUNCTION gconf_enum_to_string(BYVAL AS GConfEnumStringPair PTR, BYVAL AS gint) AS const gchar PTR
DECLARE FUNCTION gconf_escape_key(BYVAL AS const char PTR, BYVAL AS gint /'int'/) AS char PTR
DECLARE FUNCTION gconf_init(BYVAL AS gint /'int'/, BYVAL AS char PTR PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION gconf_is_initialized() AS gboolean
DECLARE FUNCTION gconf_key_is_below(BYVAL AS const gchar PTR, BYVAL AS const gchar PTR) AS gboolean
DECLARE SUB gconf_postinit(BYVAL AS gpointer, BYVAL AS gpointer)
DECLARE SUB gconf_preinit(BYVAL AS gpointer, BYVAL AS gpointer)
DECLARE FUNCTION gconf_string_to_enum(BYVAL AS GConfEnumStringPair PTR, BYVAL AS const gchar PTR, BYVAL AS gint PTR) AS gboolean
DECLARE SUB gconf_synchronous_sync(BYVAL AS GConfEngine PTR, BYVAL AS GError PTR PTR)
DECLARE FUNCTION gconf_unescape_key(BYVAL AS const char PTR, BYVAL AS gint /'int'/) AS char PTR
DECLARE FUNCTION gconf_unique_key() AS gchar PTR
DECLARE FUNCTION gconf_valid_key(BYVAL AS const gchar PTR, BYVAL AS gchar PTR PTR) AS gboolean
END EXTERN

