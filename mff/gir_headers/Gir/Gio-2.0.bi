'            FreeBasic header file, auto-generated by
'                       ### girtobac ###
' LGPLv2.1 (C) 2013-2022 by Thomas{ doT ]Freiherr[ At ]gmx[ DoT }net
' Auto-translated from file /usr/share/gir-1.0/Gio-2.0.gir
#INCLUDE ONCE "_GirToBac-0.0.bi"
' Repository version 1.2
#INCLUDE ONCE "GObject-2.0.bi"
TYPE AS _GAction GAction
TYPE AS _GActionEntry GActionEntry
TYPE AS _GActionGroup GActionGroup
TYPE AS _GActionGroupInterface GActionGroupInterface
TYPE AS _GActionInterface GActionInterface
TYPE AS _GActionMap GActionMap
TYPE AS _GActionMapInterface GActionMapInterface
TYPE AS _GAppInfo GAppInfo
TYPE AS LONG GAppInfoCreateFlags
ENUM
  G_APP_INFO_CREATE_NONE = 0
  G_APP_INFO_CREATE_NEEDS_TERMINAL = 1
  G_APP_INFO_CREATE_SUPPORTS_URIS = 2
  G_APP_INFO_CREATE_SUPPORTS_STARTUP_NOTIFICATION = 4
END ENUM
TYPE AS _GAppInfoIface GAppInfoIface
TYPE AS _GAppInfoMonitor GAppInfoMonitor
TYPE AS _GAppLaunchContext GAppLaunchContext
TYPE AS _GAppLaunchContextClass GAppLaunchContextClass
TYPE AS _GAppLaunchContextPrivate GAppLaunchContextPrivate
TYPE AS _GApplication GApplication
TYPE AS _GApplicationClass GApplicationClass
TYPE AS _GApplicationCommandLine GApplicationCommandLine
TYPE AS _GApplicationCommandLineClass GApplicationCommandLineClass
TYPE AS _GApplicationCommandLinePrivate GApplicationCommandLinePrivate
TYPE AS LONG GApplicationFlags
ENUM
  G_APPLICATION_FLAGS_NONE = 0
  G_APPLICATION_IS_SERVICE = 1
  G_APPLICATION_IS_LAUNCHER = 2
  G_APPLICATION_HANDLES_OPEN = 4
  G_APPLICATION_HANDLES_COMMAND_LINE = 8
  G_APPLICATION_SEND_ENVIRONMENT = 16
  G_APPLICATION_NON_UNIQUE = 32
  G_APPLICATION_CAN_OVERRIDE_APP_ID = 64
  G_APPLICATION_ALLOW_REPLACEMENT = 128
  G_APPLICATION_REPLACE = 256
END ENUM
TYPE AS _GApplicationPrivate GApplicationPrivate
TYPE AS LONG GAskPasswordFlags
ENUM
  G_ASK_PASSWORD_NEED_PASSWORD = 1
  G_ASK_PASSWORD_NEED_USERNAME = 2
  G_ASK_PASSWORD_NEED_DOMAIN = 4
  G_ASK_PASSWORD_SAVING_SUPPORTED = 8
  G_ASK_PASSWORD_ANONYMOUS_SUPPORTED = 16
  G_ASK_PASSWORD_TCRYPT = 32
END ENUM
TYPE AS _GAsyncInitable GAsyncInitable
TYPE AS _GAsyncInitableIface GAsyncInitableIface
TYPE AS _GAsyncResult GAsyncResult
TYPE AS _GAsyncResultIface GAsyncResultIface
TYPE AS _GBufferedInputStream GBufferedInputStream
TYPE AS _GBufferedInputStreamClass GBufferedInputStreamClass
TYPE AS _GBufferedInputStreamPrivate GBufferedInputStreamPrivate
TYPE AS _GBufferedOutputStream GBufferedOutputStream
TYPE AS _GBufferedOutputStreamClass GBufferedOutputStreamClass
TYPE AS _GBufferedOutputStreamPrivate GBufferedOutputStreamPrivate
TYPE AS LONG GBusNameOwnerFlags
ENUM
  G_BUS_NAME_OWNER_FLAGS_NONE = 0
  G_BUS_NAME_OWNER_FLAGS_ALLOW_REPLACEMENT = 1
  G_BUS_NAME_OWNER_FLAGS_REPLACE = 2
  G_BUS_NAME_OWNER_FLAGS_DO_NOT_QUEUE = 4
END ENUM
TYPE AS LONG GBusNameWatcherFlags
ENUM
  G_BUS_NAME_WATCHER_FLAGS_NONE = 0
  G_BUS_NAME_WATCHER_FLAGS_AUTO_START = 1
END ENUM
TYPE AS LONG GBusType
ENUM
  G_BUS_TYPE_STARTER = -1
  G_BUS_TYPE_NONE = 0
  G_BUS_TYPE_SYSTEM = 1
  G_BUS_TYPE_SESSION = 2
END ENUM
TYPE AS _GBytesIcon GBytesIcon
TYPE AS _GCancellable GCancellable
TYPE AS _GCancellableClass GCancellableClass
TYPE AS _GCancellablePrivate GCancellablePrivate
TYPE AS _GCharsetConverter GCharsetConverter
TYPE AS _GCharsetConverterClass GCharsetConverterClass
TYPE AS _GConverter GConverter
TYPE AS LONG GConverterFlags
ENUM
  G_CONVERTER_NO_FLAGS = 0
  G_CONVERTER_INPUT_AT_END = 1
  G_CONVERTER_FLUSH = 2
END ENUM
TYPE AS _GConverterIface GConverterIface
TYPE AS _GConverterInputStream GConverterInputStream
TYPE AS _GConverterInputStreamClass GConverterInputStreamClass
TYPE AS _GConverterInputStreamPrivate GConverterInputStreamPrivate
TYPE AS _GConverterOutputStream GConverterOutputStream
TYPE AS _GConverterOutputStreamClass GConverterOutputStreamClass
TYPE AS _GConverterOutputStreamPrivate GConverterOutputStreamPrivate
TYPE AS LONG GConverterResult
ENUM
  G_CONVERTER_ERROR = 0
  G_CONVERTER_CONVERTED = 1
  G_CONVERTER_FINISHED = 2
  G_CONVERTER_FLUSHED = 3
END ENUM
TYPE AS _GCredentials GCredentials
TYPE AS _GCredentialsClass GCredentialsClass
TYPE AS LONG GCredentialsType
ENUM
  G_CREDENTIALS_TYPE_INVALID = 0
  G_CREDENTIALS_TYPE_LINUX_UCRED = 1
  G_CREDENTIALS_TYPE_FREEBSD_CMSGCRED = 2
  G_CREDENTIALS_TYPE_OPENBSD_SOCKPEERCRED = 3
  G_CREDENTIALS_TYPE_SOLARIS_UCRED = 4
  G_CREDENTIALS_TYPE_NETBSD_UNPCBID = 5
END ENUM
TYPE AS _GDBusActionGroup GDBusActionGroup
TYPE AS _GDBusAnnotationInfo GDBusAnnotationInfo
TYPE AS _GDBusArgInfo GDBusArgInfo
TYPE AS _GDBusAuthObserver GDBusAuthObserver
TYPE AS LONG GDBusCallFlags
ENUM
  G_DBUS_CALL_FLAGS_NONE = 0
  G_DBUS_CALL_FLAGS_NO_AUTO_START = 1
  G_DBUS_CALL_FLAGS_ALLOW_INTERACTIVE_AUTHORIZATION = 2
END ENUM
TYPE AS LONG GDBusCapabilityFlags
ENUM
  G_DBUS_CAPABILITY_FLAGS_NONE = 0
  G_DBUS_CAPABILITY_FLAGS_UNIX_FD_PASSING = 1
END ENUM
TYPE AS _GDBusConnection GDBusConnection
TYPE AS LONG GDBusConnectionFlags
ENUM
  G_DBUS_CONNECTION_FLAGS_NONE = 0
  G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_CLIENT = 1
  G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_SERVER = 2
  G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_ALLOW_ANONYMOUS = 4
  G_DBUS_CONNECTION_FLAGS_MESSAGE_BUS_CONNECTION = 8
  G_DBUS_CONNECTION_FLAGS_DELAY_MESSAGE_PROCESSING = 16
END ENUM
TYPE AS LONG GDBusError
ENUM
  G_DBUS_ERROR_FAILED = 0
  G_DBUS_ERROR_NO_MEMORY = 1
  G_DBUS_ERROR_SERVICE_UNKNOWN = 2
  G_DBUS_ERROR_NAME_HAS_NO_OWNER = 3
  G_DBUS_ERROR_NO_REPLY = 4
  G_DBUS_ERROR_IO_ERROR = 5
  G_DBUS_ERROR_BAD_ADDRESS = 6
  G_DBUS_ERROR_NOT_SUPPORTED = 7
  G_DBUS_ERROR_LIMITS_EXCEEDED = 8
  G_DBUS_ERROR_ACCESS_DENIED = 9
  G_DBUS_ERROR_AUTH_FAILED = 10
  G_DBUS_ERROR_NO_SERVER = 11
  G_DBUS_ERROR_TIMEOUT = 12
  G_DBUS_ERROR_NO_NETWORK = 13
  G_DBUS_ERROR_ADDRESS_IN_USE = 14
  G_DBUS_ERROR_DISCONNECTED = 15
  G_DBUS_ERROR_INVALID_ARGS = 16
  G_DBUS_ERROR_FILE_NOT_FOUND = 17
  G_DBUS_ERROR_FILE_EXISTS = 18
  G_DBUS_ERROR_UNKNOWN_METHOD = 19
  G_DBUS_ERROR_TIMED_OUT = 20
  G_DBUS_ERROR_MATCH_RULE_NOT_FOUND = 21
  G_DBUS_ERROR_MATCH_RULE_INVALID = 22
  G_DBUS_ERROR_SPAWN_EXEC_FAILED = 23
  G_DBUS_ERROR_SPAWN_FORK_FAILED = 24
  G_DBUS_ERROR_SPAWN_CHILD_EXITED = 25
  G_DBUS_ERROR_SPAWN_CHILD_SIGNALED = 26
  G_DBUS_ERROR_SPAWN_FAILED = 27
  G_DBUS_ERROR_SPAWN_SETUP_FAILED = 28
  G_DBUS_ERROR_SPAWN_CONFIG_INVALID = 29
  G_DBUS_ERROR_SPAWN_SERVICE_INVALID = 30
  G_DBUS_ERROR_SPAWN_SERVICE_NOT_FOUND = 31
  G_DBUS_ERROR_SPAWN_PERMISSIONS_INVALID = 32
  G_DBUS_ERROR_SPAWN_FILE_INVALID = 33
  G_DBUS_ERROR_SPAWN_NO_MEMORY = 34
  G_DBUS_ERROR_UNIX_PROCESS_ID_UNKNOWN = 35
  G_DBUS_ERROR_INVALID_SIGNATURE = 36
  G_DBUS_ERROR_INVALID_FILE_CONTENT = 37
  G_DBUS_ERROR_SELINUX_SECURITY_CONTEXT_UNKNOWN = 38
  G_DBUS_ERROR_ADT_AUDIT_DATA_UNKNOWN = 39
  G_DBUS_ERROR_OBJECT_PATH_IN_USE = 40
  G_DBUS_ERROR_UNKNOWN_OBJECT = 41
  G_DBUS_ERROR_UNKNOWN_INTERFACE = 42
  G_DBUS_ERROR_UNKNOWN_PROPERTY = 43
  G_DBUS_ERROR_PROPERTY_READ_ONLY = 44
END ENUM
TYPE AS _GDBusErrorEntry GDBusErrorEntry
TYPE AS _GDBusInterface GDBusInterface
TYPE AS _GDBusInterfaceIface GDBusInterfaceIface
TYPE AS _GDBusInterfaceInfo GDBusInterfaceInfo
TYPE AS _GDBusInterfaceSkeleton GDBusInterfaceSkeleton
TYPE AS _GDBusInterfaceSkeletonClass GDBusInterfaceSkeletonClass
TYPE AS LONG GDBusInterfaceSkeletonFlags
ENUM
  G_DBUS_INTERFACE_SKELETON_FLAGS_NONE = 0
  G_DBUS_INTERFACE_SKELETON_FLAGS_HANDLE_METHOD_INVOCATIONS_IN_TH /'...READ'/ = 1
END ENUM
TYPE AS _GDBusInterfaceSkeletonPrivate GDBusInterfaceSkeletonPrivate
TYPE AS _GDBusInterfaceVTable GDBusInterfaceVTable
TYPE AS _GDBusMenuModel GDBusMenuModel
TYPE AS _GDBusMessage GDBusMessage
TYPE AS LONG GDBusMessageByteOrder
ENUM
  G_DBUS_MESSAGE_BYTE_ORDER_BIG_ENDIAN = 66
  G_DBUS_MESSAGE_BYTE_ORDER_LITTLE_ENDIAN = 108
END ENUM
TYPE AS LONG GDBusMessageFlags
ENUM
  G_DBUS_MESSAGE_FLAGS_NONE = 0
  G_DBUS_MESSAGE_FLAGS_NO_REPLY_EXPECTED = 1
  G_DBUS_MESSAGE_FLAGS_NO_AUTO_START = 2
  G_DBUS_MESSAGE_FLAGS_ALLOW_INTERACTIVE_AUTHORIZATION = 4
END ENUM
TYPE AS LONG GDBusMessageHeaderField
ENUM
  G_DBUS_MESSAGE_HEADER_FIELD_INVALID = 0
  G_DBUS_MESSAGE_HEADER_FIELD_PATH = 1
  G_DBUS_MESSAGE_HEADER_FIELD_INTERFACE = 2
  G_DBUS_MESSAGE_HEADER_FIELD_MEMBER = 3
  G_DBUS_MESSAGE_HEADER_FIELD_ERROR_NAME = 4
  G_DBUS_MESSAGE_HEADER_FIELD_REPLY_SERIAL = 5
  G_DBUS_MESSAGE_HEADER_FIELD_DESTINATION = 6
  G_DBUS_MESSAGE_HEADER_FIELD_SENDER = 7
  G_DBUS_MESSAGE_HEADER_FIELD_SIGNATURE = 8
  G_DBUS_MESSAGE_HEADER_FIELD_NUM_UNIX_FDS = 9
END ENUM
TYPE AS LONG GDBusMessageType
ENUM
  G_DBUS_MESSAGE_TYPE_INVALID = 0
  G_DBUS_MESSAGE_TYPE_METHOD_CALL = 1
  G_DBUS_MESSAGE_TYPE_METHOD_RETURN = 2
  G_DBUS_MESSAGE_TYPE_ERROR = 3
  G_DBUS_MESSAGE_TYPE_SIGNAL = 4
END ENUM
TYPE AS _GDBusMethodInfo GDBusMethodInfo
TYPE AS _GDBusMethodInvocation GDBusMethodInvocation
TYPE AS _GDBusNodeInfo GDBusNodeInfo
TYPE AS _GDBusObject GDBusObject
TYPE AS _GDBusObjectIface GDBusObjectIface
TYPE AS _GDBusObjectManager GDBusObjectManager
TYPE AS _GDBusObjectManagerClient GDBusObjectManagerClient
TYPE AS _GDBusObjectManagerClientClass GDBusObjectManagerClientClass
TYPE AS LONG GDBusObjectManagerClientFlags
ENUM
  G_DBUS_OBJECT_MANAGER_CLIENT_FLAGS_NONE = 0
  G_DBUS_OBJECT_MANAGER_CLIENT_FLAGS_DO_NOT_AUTO_START = 1
END ENUM
TYPE AS _GDBusObjectManagerClientPrivate GDBusObjectManagerClientPrivate
TYPE AS _GDBusObjectManagerIface GDBusObjectManagerIface
TYPE AS _GDBusObjectManagerServer GDBusObjectManagerServer
TYPE AS _GDBusObjectManagerServerClass GDBusObjectManagerServerClass
TYPE AS _GDBusObjectManagerServerPrivate GDBusObjectManagerServerPrivate
TYPE AS _GDBusObjectProxy GDBusObjectProxy
TYPE AS _GDBusObjectProxyClass GDBusObjectProxyClass
TYPE AS _GDBusObjectProxyPrivate GDBusObjectProxyPrivate
TYPE AS _GDBusObjectSkeleton GDBusObjectSkeleton
TYPE AS _GDBusObjectSkeletonClass GDBusObjectSkeletonClass
TYPE AS _GDBusObjectSkeletonPrivate GDBusObjectSkeletonPrivate
TYPE AS _GDBusPropertyInfo GDBusPropertyInfo
TYPE AS LONG GDBusPropertyInfoFlags
ENUM
  G_DBUS_PROPERTY_INFO_FLAGS_NONE = 0
  G_DBUS_PROPERTY_INFO_FLAGS_READABLE = 1
  G_DBUS_PROPERTY_INFO_FLAGS_WRITABLE = 2
END ENUM
TYPE AS _GDBusProxy GDBusProxy
TYPE AS _GDBusProxyClass GDBusProxyClass
TYPE AS LONG GDBusProxyFlags
ENUM
  G_DBUS_PROXY_FLAGS_NONE = 0
  G_DBUS_PROXY_FLAGS_DO_NOT_LOAD_PROPERTIES = 1
  G_DBUS_PROXY_FLAGS_DO_NOT_CONNECT_SIGNALS = 2
  G_DBUS_PROXY_FLAGS_DO_NOT_AUTO_START = 4
  G_DBUS_PROXY_FLAGS_GET_INVALIDATED_PROPERTIES = 8
  G_DBUS_PROXY_FLAGS_DO_NOT_AUTO_START_AT_CONSTRUCTION = 16
END ENUM
TYPE AS _GDBusProxyPrivate GDBusProxyPrivate
TYPE AS LONG GDBusSendMessageFlags
ENUM
  G_DBUS_SEND_MESSAGE_FLAGS_NONE = 0
  G_DBUS_SEND_MESSAGE_FLAGS_PRESERVE_SERIAL = 1
END ENUM
TYPE AS _GDBusServer GDBusServer
TYPE AS LONG GDBusServerFlags
ENUM
  G_DBUS_SERVER_FLAGS_NONE = 0
  G_DBUS_SERVER_FLAGS_RUN_IN_THREAD = 1
  G_DBUS_SERVER_FLAGS_AUTHENTICATION_ALLOW_ANONYMOUS = 2
END ENUM
TYPE AS LONG GDBusSignalFlags
ENUM
  G_DBUS_SIGNAL_FLAGS_NONE = 0
  G_DBUS_SIGNAL_FLAGS_NO_MATCH_RULE = 1
  G_DBUS_SIGNAL_FLAGS_MATCH_ARG0_NAMESPACE = 2
  G_DBUS_SIGNAL_FLAGS_MATCH_ARG0_PATH = 4
END ENUM
TYPE AS _GDBusSignalInfo GDBusSignalInfo
TYPE AS LONG GDBusSubtreeFlags
ENUM
  G_DBUS_SUBTREE_FLAGS_NONE = 0
  G_DBUS_SUBTREE_FLAGS_DISPATCH_TO_UNENUMERATED_NODES = 1
END ENUM
TYPE AS _GDBusSubtreeVTable GDBusSubtreeVTable
#DEFINE G_DESKTOP_APP_INFO_LOOKUP_EXTENSION_POINT_NAME @!"gio-desktop-app-info-lookup"
#DEFINE G_DRIVE_IDENTIFIER_KIND_UNIX_DEVICE @!"unix-device"
TYPE AS _GDataInputStream GDataInputStream
TYPE AS _GDataInputStreamClass GDataInputStreamClass
TYPE AS _GDataInputStreamPrivate GDataInputStreamPrivate
TYPE AS _GDataOutputStream GDataOutputStream
TYPE AS _GDataOutputStreamClass GDataOutputStreamClass
TYPE AS _GDataOutputStreamPrivate GDataOutputStreamPrivate
TYPE AS LONG GDataStreamByteOrder
ENUM
  G_DATA_STREAM_BYTE_ORDER_BIG_ENDIAN = 0
  G_DATA_STREAM_BYTE_ORDER_LITTLE_ENDIAN = 1
  G_DATA_STREAM_BYTE_ORDER_HOST_ENDIAN = 2
END ENUM
TYPE AS LONG GDataStreamNewlineType
ENUM
  G_DATA_STREAM_NEWLINE_TYPE_LF = 0
  G_DATA_STREAM_NEWLINE_TYPE_CR = 1
  G_DATA_STREAM_NEWLINE_TYPE_CR_LF = 2
  G_DATA_STREAM_NEWLINE_TYPE_ANY = 3
END ENUM
TYPE AS _GDatagramBased GDatagramBased
TYPE AS _GDatagramBasedInterface GDatagramBasedInterface
TYPE AS _GDesktopAppInfo GDesktopAppInfo
TYPE AS _GDesktopAppInfoClass GDesktopAppInfoClass
TYPE AS _GDesktopAppInfoLookup GDesktopAppInfoLookup
TYPE AS _GDesktopAppInfoLookupIface GDesktopAppInfoLookupIface
TYPE AS _GDrive GDrive
TYPE AS _GDriveIface GDriveIface
TYPE AS LONG GDriveStartFlags
ENUM
  G_DRIVE_START_NONE = 0
END ENUM
TYPE AS LONG GDriveStartStopType
ENUM
  G_DRIVE_START_STOP_TYPE_UNKNOWN = 0
  G_DRIVE_START_STOP_TYPE_SHUTDOWN = 1
  G_DRIVE_START_STOP_TYPE_NETWORK = 2
  G_DRIVE_START_STOP_TYPE_MULTIDISK = 3
  G_DRIVE_START_STOP_TYPE_PASSWORD = 4
END ENUM
TYPE AS _GDtlsClientConnection GDtlsClientConnection
TYPE AS _GDtlsClientConnectionInterface GDtlsClientConnectionInterface
TYPE AS _GDtlsConnection GDtlsConnection
TYPE AS _GDtlsConnectionInterface GDtlsConnectionInterface
TYPE AS _GDtlsServerConnection GDtlsServerConnection
TYPE AS _GDtlsServerConnectionInterface GDtlsServerConnectionInterface
TYPE AS _GEmblem GEmblem
TYPE AS _GEmblemClass GEmblemClass
TYPE AS LONG GEmblemOrigin
ENUM
  G_EMBLEM_ORIGIN_UNKNOWN = 0
  G_EMBLEM_ORIGIN_DEVICE = 1
  G_EMBLEM_ORIGIN_LIVEMETADATA = 2
  G_EMBLEM_ORIGIN_TAG = 3
END ENUM
TYPE AS _GEmblemedIcon GEmblemedIcon
TYPE AS _GEmblemedIconClass GEmblemedIconClass
TYPE AS _GEmblemedIconPrivate GEmblemedIconPrivate
#DEFINE G_FILE_ATTRIBUTE_ACCESS_CAN_DELETE @!"access::can-delete"
#DEFINE G_FILE_ATTRIBUTE_ACCESS_CAN_EXECUTE @!"access::can-execute"
#DEFINE G_FILE_ATTRIBUTE_ACCESS_CAN_READ @!"access::can-read"
#DEFINE G_FILE_ATTRIBUTE_ACCESS_CAN_RENAME @!"access::can-rename"
#DEFINE G_FILE_ATTRIBUTE_ACCESS_CAN_TRASH @!"access::can-trash"
#DEFINE G_FILE_ATTRIBUTE_ACCESS_CAN_WRITE @!"access::can-write"
#DEFINE G_FILE_ATTRIBUTE_DOS_IS_ARCHIVE @!"dos::is-archive"
#DEFINE G_FILE_ATTRIBUTE_DOS_IS_MOUNTPOINT @!"dos::is-mountpoint"
#DEFINE G_FILE_ATTRIBUTE_DOS_IS_SYSTEM @!"dos::is-system"
#DEFINE G_FILE_ATTRIBUTE_DOS_REPARSE_POINT_TAG @!"dos::reparse-point-tag"
#DEFINE G_FILE_ATTRIBUTE_ETAG_VALUE @!"etag::value"
#DEFINE G_FILE_ATTRIBUTE_FILESYSTEM_FREE @!"filesystem::free"
#DEFINE G_FILE_ATTRIBUTE_FILESYSTEM_READONLY @!"filesystem::readonly"
#DEFINE G_FILE_ATTRIBUTE_FILESYSTEM_REMOTE @!"filesystem::remote"
#DEFINE G_FILE_ATTRIBUTE_FILESYSTEM_SIZE @!"filesystem::size"
#DEFINE G_FILE_ATTRIBUTE_FILESYSTEM_TYPE @!"filesystem::type"
#DEFINE G_FILE_ATTRIBUTE_FILESYSTEM_USED @!"filesystem::used"
#DEFINE G_FILE_ATTRIBUTE_FILESYSTEM_USE_PREVIEW @!"filesystem::use-preview"
#DEFINE G_FILE_ATTRIBUTE_GVFS_BACKEND @!"gvfs::backend"
#DEFINE G_FILE_ATTRIBUTE_ID_FILE @!"id::file"
#DEFINE G_FILE_ATTRIBUTE_ID_FILESYSTEM @!"id::filesystem"
#DEFINE G_FILE_ATTRIBUTE_MOUNTABLE_CAN_EJECT @!"mountable::can-eject"
#DEFINE G_FILE_ATTRIBUTE_MOUNTABLE_CAN_MOUNT @!"mountable::can-mount"
#DEFINE G_FILE_ATTRIBUTE_MOUNTABLE_CAN_POLL @!"mountable::can-poll"
#DEFINE G_FILE_ATTRIBUTE_MOUNTABLE_CAN_START @!"mountable::can-start"
#DEFINE G_FILE_ATTRIBUTE_MOUNTABLE_CAN_START_DEGRADED @!"mountable::can-start-degraded"
#DEFINE G_FILE_ATTRIBUTE_MOUNTABLE_CAN_STOP @!"mountable::can-stop"
#DEFINE G_FILE_ATTRIBUTE_MOUNTABLE_CAN_UNMOUNT @!"mountable::can-unmount"
#DEFINE G_FILE_ATTRIBUTE_MOUNTABLE_HAL_UDI @!"mountable::hal-udi"
#DEFINE G_FILE_ATTRIBUTE_MOUNTABLE_IS_MEDIA_CHECK_AUTOMATIC @!"mountable::is-media-check-automatic"
#DEFINE G_FILE_ATTRIBUTE_MOUNTABLE_START_STOP_TYPE @!"mountable::start-stop-type"
#DEFINE G_FILE_ATTRIBUTE_MOUNTABLE_UNIX_DEVICE @!"mountable::unix-device"
#DEFINE G_FILE_ATTRIBUTE_MOUNTABLE_UNIX_DEVICE_FILE @!"mountable::unix-device-file"
#DEFINE G_FILE_ATTRIBUTE_OWNER_GROUP @!"owner::group"
#DEFINE G_FILE_ATTRIBUTE_OWNER_USER @!"owner::user"
#DEFINE G_FILE_ATTRIBUTE_OWNER_USER_REAL @!"owner::user-real"
#DEFINE G_FILE_ATTRIBUTE_PREVIEW_ICON @!"preview::icon"
#DEFINE G_FILE_ATTRIBUTE_RECENT_MODIFIED @!"recent::modified"
#DEFINE G_FILE_ATTRIBUTE_SELINUX_CONTEXT @!"selinux::context"
#DEFINE G_FILE_ATTRIBUTE_STANDARD_ALLOCATED_SIZE @!"standard::allocated-size"
#DEFINE G_FILE_ATTRIBUTE_STANDARD_CONTENT_TYPE @!"standard::content-type"
#DEFINE G_FILE_ATTRIBUTE_STANDARD_COPY_NAME @!"standard::copy-name"
#DEFINE G_FILE_ATTRIBUTE_STANDARD_DESCRIPTION @!"standard::description"
#DEFINE G_FILE_ATTRIBUTE_STANDARD_DISPLAY_NAME @!"standard::display-name"
#DEFINE G_FILE_ATTRIBUTE_STANDARD_EDIT_NAME @!"standard::edit-name"
#DEFINE G_FILE_ATTRIBUTE_STANDARD_FAST_CONTENT_TYPE @!"standard::fast-content-type"
#DEFINE G_FILE_ATTRIBUTE_STANDARD_ICON @!"standard::icon"
#DEFINE G_FILE_ATTRIBUTE_STANDARD_IS_BACKUP @!"standard::is-backup"
#DEFINE G_FILE_ATTRIBUTE_STANDARD_IS_HIDDEN @!"standard::is-hidden"
#DEFINE G_FILE_ATTRIBUTE_STANDARD_IS_SYMLINK @!"standard::is-symlink"
#DEFINE G_FILE_ATTRIBUTE_STANDARD_IS_VIRTUAL @!"standard::is-virtual"
#DEFINE G_FILE_ATTRIBUTE_STANDARD_IS_VOLATILE @!"standard::is-volatile"
#DEFINE G_FILE_ATTRIBUTE_STANDARD_NAME @!"standard::name"
#DEFINE G_FILE_ATTRIBUTE_STANDARD_SIZE @!"standard::size"
#DEFINE G_FILE_ATTRIBUTE_STANDARD_SORT_ORDER @!"standard::sort-order"
#DEFINE G_FILE_ATTRIBUTE_STANDARD_SYMBOLIC_ICON @!"standard::symbolic-icon"
#DEFINE G_FILE_ATTRIBUTE_STANDARD_SYMLINK_TARGET @!"standard::symlink-target"
#DEFINE G_FILE_ATTRIBUTE_STANDARD_TARGET_URI @!"standard::target-uri"
#DEFINE G_FILE_ATTRIBUTE_STANDARD_TYPE @!"standard::type"
#DEFINE G_FILE_ATTRIBUTE_THUMBNAILING_FAILED @!"thumbnail::failed"
#DEFINE G_FILE_ATTRIBUTE_THUMBNAIL_IS_VALID @!"thumbnail::is-valid"
#DEFINE G_FILE_ATTRIBUTE_THUMBNAIL_PATH @!"thumbnail::path"
#DEFINE G_FILE_ATTRIBUTE_TIME_ACCESS @!"time::access"
#DEFINE G_FILE_ATTRIBUTE_TIME_ACCESS_USEC @!"time::access-usec"
#DEFINE G_FILE_ATTRIBUTE_TIME_CHANGED @!"time::changed"
#DEFINE G_FILE_ATTRIBUTE_TIME_CHANGED_USEC @!"time::changed-usec"
#DEFINE G_FILE_ATTRIBUTE_TIME_CREATED @!"time::created"
#DEFINE G_FILE_ATTRIBUTE_TIME_CREATED_USEC @!"time::created-usec"
#DEFINE G_FILE_ATTRIBUTE_TIME_MODIFIED @!"time::modified"
#DEFINE G_FILE_ATTRIBUTE_TIME_MODIFIED_USEC @!"time::modified-usec"
#DEFINE G_FILE_ATTRIBUTE_TRASH_DELETION_DATE @!"trash::deletion-date"
#DEFINE G_FILE_ATTRIBUTE_TRASH_ITEM_COUNT @!"trash::item-count"
#DEFINE G_FILE_ATTRIBUTE_TRASH_ORIG_PATH @!"trash::orig-path"
#DEFINE G_FILE_ATTRIBUTE_UNIX_BLOCKS @!"unix::blocks"
#DEFINE G_FILE_ATTRIBUTE_UNIX_BLOCK_SIZE @!"unix::block-size"
#DEFINE G_FILE_ATTRIBUTE_UNIX_DEVICE @!"unix::device"
#DEFINE G_FILE_ATTRIBUTE_UNIX_GID @!"unix::gid"
#DEFINE G_FILE_ATTRIBUTE_UNIX_INODE @!"unix::inode"
#DEFINE G_FILE_ATTRIBUTE_UNIX_IS_MOUNTPOINT @!"unix::is-mountpoint"
#DEFINE G_FILE_ATTRIBUTE_UNIX_MODE @!"unix::mode"
#DEFINE G_FILE_ATTRIBUTE_UNIX_NLINK @!"unix::nlink"
#DEFINE G_FILE_ATTRIBUTE_UNIX_RDEV @!"unix::rdev"
#DEFINE G_FILE_ATTRIBUTE_UNIX_UID @!"unix::uid"
TYPE AS _GFile GFile
TYPE AS _GFileAttributeInfo GFileAttributeInfo
TYPE AS LONG GFileAttributeInfoFlags
ENUM
  G_FILE_ATTRIBUTE_INFO_NONE = 0
  G_FILE_ATTRIBUTE_INFO_COPY_WITH_FILE = 1
  G_FILE_ATTRIBUTE_INFO_COPY_WHEN_MOVED = 2
END ENUM
TYPE AS _GFileAttributeInfoList GFileAttributeInfoList
TYPE AS _GFileAttributeMatcher GFileAttributeMatcher
TYPE AS LONG GFileAttributeStatus
ENUM
  G_FILE_ATTRIBUTE_STATUS_UNSET = 0
  G_FILE_ATTRIBUTE_STATUS_SET = 1
  G_FILE_ATTRIBUTE_STATUS_ERROR_SETTING = 2
END ENUM
TYPE AS LONG GFileAttributeType
ENUM
  G_FILE_ATTRIBUTE_TYPE_INVALID = 0
  G_FILE_ATTRIBUTE_TYPE_STRING = 1
  G_FILE_ATTRIBUTE_TYPE_BYTE_STRING = 2
  G_FILE_ATTRIBUTE_TYPE_BOOLEAN = 3
  G_FILE_ATTRIBUTE_TYPE_UINT32 = 4
  G_FILE_ATTRIBUTE_TYPE_INT32 = 5
  G_FILE_ATTRIBUTE_TYPE_UINT64 = 6
  G_FILE_ATTRIBUTE_TYPE_INT64 = 7
  G_FILE_ATTRIBUTE_TYPE_OBJECT = 8
  G_FILE_ATTRIBUTE_TYPE_STRINGV = 9
END ENUM
TYPE AS LONG GFileCopyFlags
ENUM
  G_FILE_COPY_NONE = 0
  G_FILE_COPY_OVERWRITE = 1
  G_FILE_COPY_BACKUP = 2
  G_FILE_COPY_NOFOLLOW_SYMLINKS = 4
  G_FILE_COPY_ALL_METADATA = 8
  G_FILE_COPY_NO_FALLBACK_FOR_MOVE = 16
  G_FILE_COPY_TARGET_DEFAULT_PERMS = 32
END ENUM
TYPE AS LONG GFileCreateFlags
ENUM
  G_FILE_CREATE_NONE = 0
  G_FILE_CREATE_PRIVATE = 1
  G_FILE_CREATE_REPLACE_DESTINATION = 2
END ENUM
TYPE AS _GFileDescriptorBased GFileDescriptorBased
TYPE AS _GFileDescriptorBasedIface GFileDescriptorBasedIface
TYPE AS _GFileEnumerator GFileEnumerator
TYPE AS _GFileEnumeratorClass GFileEnumeratorClass
TYPE AS _GFileEnumeratorPrivate GFileEnumeratorPrivate
TYPE AS _GFileIOStream GFileIOStream
TYPE AS _GFileIOStreamClass GFileIOStreamClass
TYPE AS _GFileIOStreamPrivate GFileIOStreamPrivate
TYPE AS _GFileIcon GFileIcon
TYPE AS _GFileIconClass GFileIconClass
TYPE AS _GFileIface GFileIface
TYPE AS _GFileInfo GFileInfo
TYPE AS _GFileInfoClass GFileInfoClass
TYPE AS _GFileInputStream GFileInputStream
TYPE AS _GFileInputStreamClass GFileInputStreamClass
TYPE AS _GFileInputStreamPrivate GFileInputStreamPrivate
TYPE AS LONG GFileMeasureFlags
ENUM
  G_FILE_MEASURE_NONE = 0
  G_FILE_MEASURE_REPORT_ANY_ERROR = 2
  G_FILE_MEASURE_APPARENT_SIZE = 4
  G_FILE_MEASURE_NO_XDEV = 8
END ENUM
TYPE AS _GFileMonitor GFileMonitor
TYPE AS _GFileMonitorClass GFileMonitorClass
TYPE AS LONG GFileMonitorEvent
ENUM
  G_FILE_MONITOR_EVENT_CHANGED = 0
  G_FILE_MONITOR_EVENT_CHANGES_DONE_HINT = 1
  G_FILE_MONITOR_EVENT_DELETED = 2
  G_FILE_MONITOR_EVENT_CREATED = 3
  G_FILE_MONITOR_EVENT_ATTRIBUTE_CHANGED = 4
  G_FILE_MONITOR_EVENT_PRE_UNMOUNT = 5
  G_FILE_MONITOR_EVENT_UNMOUNTED = 6
  G_FILE_MONITOR_EVENT_MOVED = 7
  G_FILE_MONITOR_EVENT_RENAMED = 8
  G_FILE_MONITOR_EVENT_MOVED_IN = 9
  G_FILE_MONITOR_EVENT_MOVED_OUT = 10
END ENUM
TYPE AS LONG GFileMonitorFlags
ENUM
  G_FILE_MONITOR_NONE = 0
  G_FILE_MONITOR_WATCH_MOUNTS = 1
  G_FILE_MONITOR_SEND_MOVED = 2
  G_FILE_MONITOR_WATCH_HARD_LINKS = 4
  G_FILE_MONITOR_WATCH_MOVES = 8
END ENUM
TYPE AS _GFileMonitorPrivate GFileMonitorPrivate
TYPE AS _GFileOutputStream GFileOutputStream
TYPE AS _GFileOutputStreamClass GFileOutputStreamClass
TYPE AS _GFileOutputStreamPrivate GFileOutputStreamPrivate
TYPE AS LONG GFileQueryInfoFlags
ENUM
  G_FILE_QUERY_INFO_NONE = 0
  G_FILE_QUERY_INFO_NOFOLLOW_SYMLINKS = 1
END ENUM
TYPE AS LONG GFileType
ENUM
  G_FILE_TYPE_UNKNOWN = 0
  G_FILE_TYPE_REGULAR = 1
  G_FILE_TYPE_DIRECTORY = 2
  G_FILE_TYPE_SYMBOLIC_LINK = 3
  G_FILE_TYPE_SPECIAL = 4
  G_FILE_TYPE_SHORTCUT = 5
  G_FILE_TYPE_MOUNTABLE = 6
END ENUM
TYPE AS _GFilenameCompleter GFilenameCompleter
TYPE AS _GFilenameCompleterClass GFilenameCompleterClass
TYPE AS LONG GFilesystemPreviewType
ENUM
  G_FILESYSTEM_PREVIEW_TYPE_IF_ALWAYS = 0
  G_FILESYSTEM_PREVIEW_TYPE_IF_LOCAL = 1
  G_FILESYSTEM_PREVIEW_TYPE_NEVER = 2
END ENUM
TYPE AS _GFilterInputStream GFilterInputStream
TYPE AS _GFilterInputStreamClass GFilterInputStreamClass
TYPE AS _GFilterOutputStream GFilterOutputStream
TYPE AS _GFilterOutputStreamClass GFilterOutputStreamClass
TYPE AS LONG GIOErrorEnum
ENUM
  G_IO_ERROR_FAILED = 0
  G_IO_ERROR_NOT_FOUND = 1
  G_IO_ERROR_EXISTS = 2
  G_IO_ERROR_IS_DIRECTORY = 3
  G_IO_ERROR_NOT_DIRECTORY = 4
  G_IO_ERROR_NOT_EMPTY = 5
  G_IO_ERROR_NOT_REGULAR_FILE = 6
  G_IO_ERROR_NOT_SYMBOLIC_LINK = 7
  G_IO_ERROR_NOT_MOUNTABLE_FILE = 8
  G_IO_ERROR_FILENAME_TOO_LONG = 9
  G_IO_ERROR_INVALID_FILENAME = 10
  G_IO_ERROR_TOO_MANY_LINKS = 11
  G_IO_ERROR_NO_SPACE = 12
  G_IO_ERROR_INVALID_ARGUMENT = 13
  G_IO_ERROR_PERMISSION_DENIED = 14
  G_IO_ERROR_NOT_SUPPORTED = 15
  G_IO_ERROR_NOT_MOUNTED = 16
  G_IO_ERROR_ALREADY_MOUNTED = 17
  G_IO_ERROR_CLOSED = 18
  G_IO_ERROR_CANCELLED = 19
  G_IO_ERROR_PENDING = 20
  G_IO_ERROR_READ_ONLY = 21
  G_IO_ERROR_CANT_CREATE_BACKUP = 22
  G_IO_ERROR_WRONG_ETAG = 23
  G_IO_ERROR_TIMED_OUT = 24
  G_IO_ERROR_WOULD_RECURSE = 25
  G_IO_ERROR_BUSY = 26
  G_IO_ERROR_WOULD_BLOCK = 27
  G_IO_ERROR_HOST_NOT_FOUND = 28
  G_IO_ERROR_WOULD_MERGE = 29
  G_IO_ERROR_FAILED_HANDLED = 30
  G_IO_ERROR_TOO_MANY_OPEN_FILES = 31
  G_IO_ERROR_NOT_INITIALIZED = 32
  G_IO_ERROR_ADDRESS_IN_USE = 33
  G_IO_ERROR_PARTIAL_INPUT = 34
  G_IO_ERROR_INVALID_DATA = 35
  G_IO_ERROR_DBUS_ERROR = 36
  G_IO_ERROR_HOST_UNREACHABLE = 37
  G_IO_ERROR_NETWORK_UNREACHABLE = 38
  G_IO_ERROR_CONNECTION_REFUSED = 39
  G_IO_ERROR_PROXY_FAILED = 40
  G_IO_ERROR_PROXY_AUTH_FAILED = 41
  G_IO_ERROR_PROXY_NEED_AUTH = 42
  G_IO_ERROR_PROXY_NOT_ALLOWED = 43
  G_IO_ERROR_BROKEN_PIPE = 44
  G_IO_ERROR_CONNECTION_CLOSED = 44
  G_IO_ERROR_NOT_CONNECTED = 45
  G_IO_ERROR_MESSAGE_TOO_LARGE = 46
END ENUM
TYPE AS _GIOExtension GIOExtension
TYPE AS _GIOExtensionPoint GIOExtensionPoint
TYPE AS _GIOModule GIOModule
TYPE AS _GIOModuleClass GIOModuleClass
TYPE AS _GIOModuleScope GIOModuleScope
TYPE AS LONG GIOModuleScopeFlags
ENUM
  G_IO_MODULE_SCOPE_NONE = 0
  G_IO_MODULE_SCOPE_BLOCK_DUPLICATES = 1
END ENUM
TYPE AS _GIOSchedulerJob GIOSchedulerJob
TYPE AS _GIOStream GIOStream
TYPE AS _GIOStreamAdapter GIOStreamAdapter
TYPE AS _GIOStreamClass GIOStreamClass
TYPE AS _GIOStreamPrivate GIOStreamPrivate
TYPE AS LONG GIOStreamSpliceFlags
ENUM
  G_IO_STREAM_SPLICE_NONE = 0
  G_IO_STREAM_SPLICE_CLOSE_STREAM1 = 1
  G_IO_STREAM_SPLICE_CLOSE_STREAM2 = 2
  G_IO_STREAM_SPLICE_WAIT_FOR_BOTH = 4
END ENUM
TYPE AS _GIcon GIcon
TYPE AS _GIconIface GIconIface
TYPE AS _GInetAddress GInetAddress
TYPE AS _GInetAddressClass GInetAddressClass
TYPE AS _GInetAddressMask GInetAddressMask
TYPE AS _GInetAddressMaskClass GInetAddressMaskClass
TYPE AS _GInetAddressMaskPrivate GInetAddressMaskPrivate
TYPE AS _GInetAddressPrivate GInetAddressPrivate
TYPE AS _GInetSocketAddress GInetSocketAddress
TYPE AS _GInetSocketAddressClass GInetSocketAddressClass
TYPE AS _GInetSocketAddressPrivate GInetSocketAddressPrivate
TYPE AS _GInitable GInitable
TYPE AS _GInitableIface GInitableIface
TYPE AS _GInputMessage GInputMessage
TYPE AS _GInputStream GInputStream
TYPE AS _GInputStreamClass GInputStreamClass
TYPE AS _GInputStreamPrivate GInputStreamPrivate
TYPE AS _GInputVector GInputVector
TYPE AS _GListModel GListModel
TYPE AS _GListModelInterface GListModelInterface
TYPE AS _GListStore GListStore
TYPE AS _GListStoreClass GListStoreClass
TYPE AS _GLoadableIcon GLoadableIcon
TYPE AS _GLoadableIconIface GLoadableIconIface
#DEFINE G_MEMORY_MONITOR_EXTENSION_POINT_NAME @!"gio-memory-monitor"
#DEFINE G_MENU_ATTRIBUTE_ACTION @!"action"
#DEFINE G_MENU_ATTRIBUTE_ACTION_NAMESPACE @!"action-namespace"
#DEFINE G_MENU_ATTRIBUTE_ICON @!"icon"
#DEFINE G_MENU_ATTRIBUTE_LABEL @!"label"
#DEFINE G_MENU_ATTRIBUTE_TARGET @!"target"
#DEFINE G_MENU_LINK_SECTION @!"section"
#DEFINE G_MENU_LINK_SUBMENU @!"submenu"
TYPE AS _GMemoryInputStream GMemoryInputStream
TYPE AS _GMemoryInputStreamClass GMemoryInputStreamClass
TYPE AS _GMemoryInputStreamPrivate GMemoryInputStreamPrivate
TYPE AS _GMemoryMonitor GMemoryMonitor
TYPE AS _GMemoryMonitorInterface GMemoryMonitorInterface
TYPE AS LONG GMemoryMonitorWarningLevel
ENUM
  G_MEMORY_MONITOR_WARNING_LEVEL_LOW = 50
  G_MEMORY_MONITOR_WARNING_LEVEL_MEDIUM = 100
  G_MEMORY_MONITOR_WARNING_LEVEL_CRITICAL = 255
END ENUM
TYPE AS _GMemoryOutputStream GMemoryOutputStream
TYPE AS _GMemoryOutputStreamClass GMemoryOutputStreamClass
TYPE AS _GMemoryOutputStreamPrivate GMemoryOutputStreamPrivate
TYPE AS _GMenu GMenu
TYPE AS _GMenuAttributeIter GMenuAttributeIter
TYPE AS _GMenuAttributeIterClass GMenuAttributeIterClass
TYPE AS _GMenuAttributeIterPrivate GMenuAttributeIterPrivate
TYPE AS _GMenuItem GMenuItem
TYPE AS _GMenuLinkIter GMenuLinkIter
TYPE AS _GMenuLinkIterClass GMenuLinkIterClass
TYPE AS _GMenuLinkIterPrivate GMenuLinkIterPrivate
TYPE AS _GMenuModel GMenuModel
TYPE AS _GMenuModelClass GMenuModelClass
TYPE AS _GMenuModelPrivate GMenuModelPrivate
TYPE AS _GMount GMount
TYPE AS _GMountIface GMountIface
TYPE AS LONG GMountMountFlags
ENUM
  G_MOUNT_MOUNT_NONE = 0
END ENUM
TYPE AS _GMountOperation GMountOperation
TYPE AS _GMountOperationClass GMountOperationClass
TYPE AS _GMountOperationPrivate GMountOperationPrivate
TYPE AS LONG GMountOperationResult
ENUM
  G_MOUNT_OPERATION_HANDLED = 0
  G_MOUNT_OPERATION_ABORTED = 1
  G_MOUNT_OPERATION_UNHANDLED = 2
END ENUM
TYPE AS LONG GMountUnmountFlags
ENUM
  G_MOUNT_UNMOUNT_NONE = 0
  G_MOUNT_UNMOUNT_FORCE = 1
END ENUM
#DEFINE G_NATIVE_VOLUME_MONITOR_EXTENSION_POINT_NAME @!"gio-native-volume-monitor"
#DEFINE G_NETWORK_MONITOR_EXTENSION_POINT_NAME @!"gio-network-monitor"
TYPE AS _GNativeSocketAddress GNativeSocketAddress
TYPE AS _GNativeSocketAddressClass GNativeSocketAddressClass
TYPE AS _GNativeSocketAddressPrivate GNativeSocketAddressPrivate
TYPE AS _GNativeVolumeMonitor GNativeVolumeMonitor
TYPE AS _GNativeVolumeMonitorClass GNativeVolumeMonitorClass
TYPE AS _GNetworkAddress GNetworkAddress
TYPE AS _GNetworkAddressClass GNetworkAddressClass
TYPE AS _GNetworkAddressPrivate GNetworkAddressPrivate
TYPE AS LONG GNetworkConnectivity
ENUM
  G_NETWORK_CONNECTIVITY_LOCAL = 1
  G_NETWORK_CONNECTIVITY_LIMITED = 2
  G_NETWORK_CONNECTIVITY_PORTAL = 3
  G_NETWORK_CONNECTIVITY_FULL = 4
END ENUM
TYPE AS _GNetworkMonitor GNetworkMonitor
TYPE AS _GNetworkMonitorInterface GNetworkMonitorInterface
TYPE AS _GNetworkService GNetworkService
TYPE AS _GNetworkServiceClass GNetworkServiceClass
TYPE AS _GNetworkServicePrivate GNetworkServicePrivate
TYPE AS _GNotification GNotification
TYPE AS LONG GNotificationPriority
ENUM
  G_NOTIFICATION_PRIORITY_NORMAL = 0
  G_NOTIFICATION_PRIORITY_LOW = 1
  G_NOTIFICATION_PRIORITY_HIGH = 2
  G_NOTIFICATION_PRIORITY_URGENT = 3
END ENUM
TYPE AS _GOutputMessage GOutputMessage
TYPE AS _GOutputStream GOutputStream
TYPE AS _GOutputStreamClass GOutputStreamClass
TYPE AS _GOutputStreamPrivate GOutputStreamPrivate
TYPE AS LONG GOutputStreamSpliceFlags
ENUM
  G_OUTPUT_STREAM_SPLICE_NONE = 0
  G_OUTPUT_STREAM_SPLICE_CLOSE_SOURCE = 1
  G_OUTPUT_STREAM_SPLICE_CLOSE_TARGET = 2
END ENUM
TYPE AS _GOutputVector GOutputVector
#DEFINE G_PROXY_EXTENSION_POINT_NAME @!"gio-proxy"
#DEFINE G_PROXY_RESOLVER_EXTENSION_POINT_NAME @!"gio-proxy-resolver"
TYPE AS LONG GPasswordSave
ENUM
  G_PASSWORD_SAVE_NEVER = 0
  G_PASSWORD_SAVE_FOR_SESSION = 1
  G_PASSWORD_SAVE_PERMANENTLY = 2
END ENUM
TYPE AS _GPermission GPermission
TYPE AS _GPermissionClass GPermissionClass
TYPE AS _GPermissionPrivate GPermissionPrivate
TYPE AS _GPollableInputStream GPollableInputStream
TYPE AS _GPollableInputStreamInterface GPollableInputStreamInterface
TYPE AS _GPollableOutputStream GPollableOutputStream
TYPE AS _GPollableOutputStreamInterface GPollableOutputStreamInterface
TYPE AS LONG GPollableReturn
ENUM
  G_POLLABLE_RETURN_FAILED = 0
  G_POLLABLE_RETURN_OK = 1
  G_POLLABLE_RETURN_WOULD_BLOCK = -27
END ENUM
TYPE AS _GPropertyAction GPropertyAction
TYPE AS _GProxy GProxy
TYPE AS _GProxyAddress GProxyAddress
TYPE AS _GProxyAddressClass GProxyAddressClass
TYPE AS _GProxyAddressEnumerator GProxyAddressEnumerator
TYPE AS _GProxyAddressEnumeratorClass GProxyAddressEnumeratorClass
TYPE AS _GProxyAddressEnumeratorPrivate GProxyAddressEnumeratorPrivate
TYPE AS _GProxyAddressPrivate GProxyAddressPrivate
TYPE AS _GProxyInterface GProxyInterface
TYPE AS _GProxyResolver GProxyResolver
TYPE AS _GProxyResolverInterface GProxyResolverInterface
TYPE AS _GRemoteActionGroup GRemoteActionGroup
TYPE AS _GRemoteActionGroupInterface GRemoteActionGroupInterface
TYPE AS _GResolver GResolver
TYPE AS _GResolverClass GResolverClass
TYPE AS LONG GResolverError
ENUM
  G_RESOLVER_ERROR_NOT_FOUND = 0
  G_RESOLVER_ERROR_TEMPORARY_FAILURE = 1
  G_RESOLVER_ERROR_INTERNAL = 2
END ENUM
TYPE AS LONG GResolverNameLookupFlags
ENUM
  G_RESOLVER_NAME_LOOKUP_FLAGS_DEFAULT = 0
  G_RESOLVER_NAME_LOOKUP_FLAGS_IPV4_ONLY = 1
  G_RESOLVER_NAME_LOOKUP_FLAGS_IPV6_ONLY = 2
END ENUM
TYPE AS _GResolverPrivate GResolverPrivate
TYPE AS LONG GResolverRecordType
ENUM
  G_RESOLVER_RECORD_SRV = 1
  G_RESOLVER_RECORD_MX = 2
  G_RESOLVER_RECORD_TXT = 3
  G_RESOLVER_RECORD_SOA = 4
  G_RESOLVER_RECORD_NS = 5
END ENUM
TYPE AS _GResource GResource
TYPE AS LONG GResourceError
ENUM
  G_RESOURCE_ERROR_NOT_FOUND = 0
  G_RESOURCE_ERROR_INTERNAL = 1
END ENUM
TYPE AS LONG GResourceFlags
ENUM
  G_RESOURCE_FLAGS_NONE = 0
  G_RESOURCE_FLAGS_COMPRESSED = 1
END ENUM
TYPE AS LONG GResourceLookupFlags
ENUM
  G_RESOURCE_LOOKUP_FLAGS_NONE = 0
END ENUM
#DEFINE G_SETTINGS_BACKEND_EXTENSION_POINT_NAME @!"gsettings-backend"
TYPE AS _GSeekable GSeekable
TYPE AS _GSeekableIface GSeekableIface
TYPE AS _GSettings GSettings
TYPE AS _GSettingsBackend GSettingsBackend
TYPE AS _GSettingsBackendClass GSettingsBackendClass
TYPE AS _GSettingsBackendPrivate GSettingsBackendPrivate
TYPE AS LONG GSettingsBindFlags
ENUM
  G_SETTINGS_BIND_DEFAULT = 0
  G_SETTINGS_BIND_GET = 1
  G_SETTINGS_BIND_SET = 2
  G_SETTINGS_BIND_NO_SENSITIVITY = 4
  G_SETTINGS_BIND_GET_NO_CHANGES = 8
  G_SETTINGS_BIND_INVERT_BOOLEAN = 16
END ENUM
TYPE AS _GSettingsClass GSettingsClass
TYPE AS _GSettingsPrivate GSettingsPrivate
TYPE AS _GSettingsSchema GSettingsSchema
TYPE AS _GSettingsSchemaKey GSettingsSchemaKey
TYPE AS _GSettingsSchemaSource GSettingsSchemaSource
TYPE AS _GSimpleAction GSimpleAction
TYPE AS _GSimpleActionGroup GSimpleActionGroup
TYPE AS _GSimpleActionGroupClass GSimpleActionGroupClass
TYPE AS _GSimpleActionGroupPrivate GSimpleActionGroupPrivate
TYPE AS _GSimpleAsyncResult GSimpleAsyncResult
TYPE AS _GSimpleAsyncResultClass GSimpleAsyncResultClass
TYPE AS _GSimpleIOStream GSimpleIOStream
TYPE AS _GSimplePermission GSimplePermission
TYPE AS _GSimpleProxyResolver GSimpleProxyResolver
TYPE AS _GSimpleProxyResolverClass GSimpleProxyResolverClass
TYPE AS _GSimpleProxyResolverPrivate GSimpleProxyResolverPrivate
TYPE AS _GSocket GSocket
TYPE AS _GSocketAddress GSocketAddress
TYPE AS _GSocketAddressClass GSocketAddressClass
TYPE AS _GSocketAddressEnumerator GSocketAddressEnumerator
TYPE AS _GSocketAddressEnumeratorClass GSocketAddressEnumeratorClass
TYPE AS _GSocketClass GSocketClass
TYPE AS _GSocketClient GSocketClient
TYPE AS _GSocketClientClass GSocketClientClass
TYPE AS LONG GSocketClientEvent
ENUM
  G_SOCKET_CLIENT_RESOLVING = 0
  G_SOCKET_CLIENT_RESOLVED = 1
  G_SOCKET_CLIENT_CONNECTING = 2
  G_SOCKET_CLIENT_CONNECTED = 3
  G_SOCKET_CLIENT_PROXY_NEGOTIATING = 4
  G_SOCKET_CLIENT_PROXY_NEGOTIATED = 5
  G_SOCKET_CLIENT_TLS_HANDSHAKING = 6
  G_SOCKET_CLIENT_TLS_HANDSHAKED = 7
  G_SOCKET_CLIENT_COMPLETE = 8
END ENUM
TYPE AS _GSocketClientPrivate GSocketClientPrivate
TYPE AS _GSocketConnectable GSocketConnectable
TYPE AS _GSocketConnectableIface GSocketConnectableIface
TYPE AS _GSocketConnection GSocketConnection
TYPE AS _GSocketConnectionClass GSocketConnectionClass
TYPE AS _GSocketConnectionPrivate GSocketConnectionPrivate
TYPE AS _GSocketControlMessage GSocketControlMessage
TYPE AS _GSocketControlMessageClass GSocketControlMessageClass
TYPE AS _GSocketControlMessagePrivate GSocketControlMessagePrivate
TYPE AS LONG GSocketFamily
ENUM
  G_SOCKET_FAMILY_INVALID = 0
  G_SOCKET_FAMILY_UNIX = 1
  G_SOCKET_FAMILY_IPV4 = 2
  G_SOCKET_FAMILY_IPV6 = 10
END ENUM
TYPE AS _GSocketListener GSocketListener
TYPE AS _GSocketListenerClass GSocketListenerClass
TYPE AS LONG GSocketListenerEvent
ENUM
  G_SOCKET_LISTENER_BINDING = 0
  G_SOCKET_LISTENER_BOUND = 1
  G_SOCKET_LISTENER_LISTENING = 2
  G_SOCKET_LISTENER_LISTENED = 3
END ENUM
TYPE AS _GSocketListenerPrivate GSocketListenerPrivate
TYPE AS LONG GSocketMsgFlags
ENUM
  G_SOCKET_MSG_NONE = 0
  G_SOCKET_MSG_OOB = 1
  G_SOCKET_MSG_PEEK = 2
  G_SOCKET_MSG_DONTROUTE = 4
END ENUM
TYPE AS _GSocketPrivate GSocketPrivate
TYPE AS LONG GSocketProtocol
ENUM
  G_SOCKET_PROTOCOL_UNKNOWN = -1
  G_SOCKET_PROTOCOL_DEFAULT = 0
  G_SOCKET_PROTOCOL_TCP = 6
  G_SOCKET_PROTOCOL_UDP = 17
  G_SOCKET_PROTOCOL_SCTP = 132
END ENUM
TYPE AS _GSocketService GSocketService
TYPE AS _GSocketServiceClass GSocketServiceClass
TYPE AS _GSocketServicePrivate GSocketServicePrivate
TYPE AS LONG GSocketType
ENUM
  G_SOCKET_TYPE_INVALID = 0
  G_SOCKET_TYPE_STREAM = 1
  G_SOCKET_TYPE_DATAGRAM = 2
  G_SOCKET_TYPE_SEQPACKET = 3
END ENUM
TYPE AS _GSrvTarget GSrvTarget
TYPE AS _GStaticResource GStaticResource
TYPE AS _GSubprocess GSubprocess
TYPE AS LONG GSubprocessFlags
ENUM
  G_SUBPROCESS_FLAGS_NONE = 0
  G_SUBPROCESS_FLAGS_STDIN_PIPE = 1
  G_SUBPROCESS_FLAGS_STDIN_INHERIT = 2
  G_SUBPROCESS_FLAGS_STDOUT_PIPE = 4
  G_SUBPROCESS_FLAGS_STDOUT_SILENCE = 8
  G_SUBPROCESS_FLAGS_STDERR_PIPE = 16
  G_SUBPROCESS_FLAGS_STDERR_SILENCE = 32
  G_SUBPROCESS_FLAGS_STDERR_MERGE = 64
  G_SUBPROCESS_FLAGS_INHERIT_FDS = 128
END ENUM
TYPE AS _GSubprocessLauncher GSubprocessLauncher
#DEFINE G_TLS_BACKEND_EXTENSION_POINT_NAME @!"gio-tls-backend"
#DEFINE G_TLS_DATABASE_PURPOSE_AUTHENTICATE_CLIENT @!"1.3.6.1.5.5.7.3.2"
#DEFINE G_TLS_DATABASE_PURPOSE_AUTHENTICATE_SERVER @!"1.3.6.1.5.5.7.3.1"
TYPE AS _GTask GTask
TYPE AS _GTaskClass GTaskClass
TYPE AS _GTcpConnection GTcpConnection
TYPE AS _GTcpConnectionClass GTcpConnectionClass
TYPE AS _GTcpConnectionPrivate GTcpConnectionPrivate
TYPE AS _GTcpWrapperConnection GTcpWrapperConnection
TYPE AS _GTcpWrapperConnectionClass GTcpWrapperConnectionClass
TYPE AS _GTcpWrapperConnectionPrivate GTcpWrapperConnectionPrivate
TYPE AS _GTestDBus GTestDBus
TYPE AS LONG GTestDBusFlags
ENUM
  G_TEST_DBUS_NONE = 0
END ENUM
TYPE AS _GThemedIcon GThemedIcon
TYPE AS _GThemedIconClass GThemedIconClass
TYPE AS _GThreadedSocketService GThreadedSocketService
TYPE AS _GThreadedSocketServiceClass GThreadedSocketServiceClass
TYPE AS _GThreadedSocketServicePrivate GThreadedSocketServicePrivate
TYPE AS LONG GTlsAuthenticationMode
ENUM
  G_TLS_AUTHENTICATION_NONE = 0
  G_TLS_AUTHENTICATION_REQUESTED = 1
  G_TLS_AUTHENTICATION_REQUIRED = 2
END ENUM
TYPE AS _GTlsBackend GTlsBackend
TYPE AS _GTlsBackendInterface GTlsBackendInterface
TYPE AS _GTlsCertificate GTlsCertificate
TYPE AS _GTlsCertificateClass GTlsCertificateClass
TYPE AS LONG GTlsCertificateFlags
ENUM
  G_TLS_CERTIFICATE_UNKNOWN_CA = 1
  G_TLS_CERTIFICATE_BAD_IDENTITY = 2
  G_TLS_CERTIFICATE_NOT_ACTIVATED = 4
  G_TLS_CERTIFICATE_EXPIRED = 8
  G_TLS_CERTIFICATE_REVOKED = 16
  G_TLS_CERTIFICATE_INSECURE = 32
  G_TLS_CERTIFICATE_GENERIC_ERROR = 64
  G_TLS_CERTIFICATE_VALIDATE_ALL = 127
END ENUM
TYPE AS _GTlsCertificatePrivate GTlsCertificatePrivate
TYPE AS LONG GTlsCertificateRequestFlags
ENUM
  G_TLS_CERTIFICATE_REQUEST_NONE = 0
END ENUM
TYPE AS _GTlsClientConnection GTlsClientConnection
TYPE AS _GTlsClientConnectionInterface GTlsClientConnectionInterface
TYPE AS _GTlsConnection GTlsConnection
TYPE AS _GTlsConnectionClass GTlsConnectionClass
TYPE AS _GTlsConnectionPrivate GTlsConnectionPrivate
TYPE AS _GTlsDatabase GTlsDatabase
TYPE AS _GTlsDatabaseClass GTlsDatabaseClass
TYPE AS LONG GTlsDatabaseLookupFlags
ENUM
  G_TLS_DATABASE_LOOKUP_NONE = 0
  G_TLS_DATABASE_LOOKUP_KEYPAIR = 1
END ENUM
TYPE AS _GTlsDatabasePrivate GTlsDatabasePrivate
TYPE AS LONG GTlsDatabaseVerifyFlags
ENUM
  G_TLS_DATABASE_VERIFY_NONE = 0
END ENUM
TYPE AS LONG GTlsError
ENUM
  G_TLS_ERROR_UNAVAILABLE = 0
  G_TLS_ERROR_MISC = 1
  G_TLS_ERROR_BAD_CERTIFICATE = 2
  G_TLS_ERROR_NOT_TLS = 3
  G_TLS_ERROR_HANDSHAKE = 4
  G_TLS_ERROR_CERTIFICATE_REQUIRED = 5
  G_TLS_ERROR_EOF = 6
  G_TLS_ERROR_INAPPROPRIATE_FALLBACK = 7
END ENUM
TYPE AS _GTlsFileDatabase GTlsFileDatabase
TYPE AS _GTlsFileDatabaseInterface GTlsFileDatabaseInterface
TYPE AS _GTlsInteraction GTlsInteraction
TYPE AS _GTlsInteractionClass GTlsInteractionClass
TYPE AS _GTlsInteractionPrivate GTlsInteractionPrivate
TYPE AS LONG GTlsInteractionResult
ENUM
  G_TLS_INTERACTION_UNHANDLED = 0
  G_TLS_INTERACTION_HANDLED = 1
  G_TLS_INTERACTION_FAILED = 2
END ENUM
TYPE AS _GTlsPassword GTlsPassword
TYPE AS _GTlsPasswordClass GTlsPasswordClass
TYPE AS LONG GTlsPasswordFlags
ENUM
  G_TLS_PASSWORD_NONE = 0
  G_TLS_PASSWORD_RETRY = 2
  G_TLS_PASSWORD_MANY_TRIES = 4
  G_TLS_PASSWORD_FINAL_TRY = 8
END ENUM
TYPE AS _GTlsPasswordPrivate GTlsPasswordPrivate
TYPE AS LONG GTlsRehandshakeMode
ENUM
  G_TLS_REHANDSHAKE_NEVER = 0
  G_TLS_REHANDSHAKE_SAFELY = 1
  G_TLS_REHANDSHAKE_UNSAFELY = 2
END ENUM
TYPE AS _GTlsServerConnection GTlsServerConnection
TYPE AS _GTlsServerConnectionInterface GTlsServerConnectionInterface
TYPE AS _GUnixConnection GUnixConnection
TYPE AS _GUnixConnectionClass GUnixConnectionClass
TYPE AS _GUnixConnectionPrivate GUnixConnectionPrivate
TYPE AS _GUnixCredentialsMessage GUnixCredentialsMessage
TYPE AS _GUnixCredentialsMessageClass GUnixCredentialsMessageClass
TYPE AS _GUnixCredentialsMessagePrivate GUnixCredentialsMessagePrivate
TYPE AS _GUnixFDList GUnixFDList
TYPE AS _GUnixFDListClass GUnixFDListClass
TYPE AS _GUnixFDListPrivate GUnixFDListPrivate
TYPE AS _GUnixFDMessage GUnixFDMessage
TYPE AS _GUnixFDMessageClass GUnixFDMessageClass
TYPE AS _GUnixFDMessagePrivate GUnixFDMessagePrivate
TYPE AS _GUnixInputStream GUnixInputStream
TYPE AS _GUnixInputStreamClass GUnixInputStreamClass
TYPE AS _GUnixInputStreamPrivate GUnixInputStreamPrivate
TYPE AS _GUnixMountEntry GUnixMountEntry
TYPE AS _GUnixMountMonitor GUnixMountMonitor
TYPE AS _GUnixMountMonitorClass GUnixMountMonitorClass
TYPE AS _GUnixMountPoint GUnixMountPoint
TYPE AS _GUnixOutputStream GUnixOutputStream
TYPE AS _GUnixOutputStreamClass GUnixOutputStreamClass
TYPE AS _GUnixOutputStreamPrivate GUnixOutputStreamPrivate
TYPE AS _GUnixSocketAddress GUnixSocketAddress
TYPE AS _GUnixSocketAddressClass GUnixSocketAddressClass
TYPE AS _GUnixSocketAddressPrivate GUnixSocketAddressPrivate
TYPE AS LONG GUnixSocketAddressType
ENUM
  G_UNIX_SOCKET_ADDRESS_INVALID = 0
  G_UNIX_SOCKET_ADDRESS_ANONYMOUS = 1
  G_UNIX_SOCKET_ADDRESS_PATH = 2
  G_UNIX_SOCKET_ADDRESS_ABSTRACT = 3
  G_UNIX_SOCKET_ADDRESS_ABSTRACT_PADDED = 4
END ENUM
#DEFINE G_VFS_EXTENSION_POINT_NAME @!"gio-vfs"
#DEFINE G_VOLUME_IDENTIFIER_KIND_CLASS @!"class"
#DEFINE G_VOLUME_IDENTIFIER_KIND_HAL_UDI @!"hal-udi"
#DEFINE G_VOLUME_IDENTIFIER_KIND_LABEL @!"label"
#DEFINE G_VOLUME_IDENTIFIER_KIND_NFS_MOUNT @!"nfs-mount"
#DEFINE G_VOLUME_IDENTIFIER_KIND_UNIX_DEVICE @!"unix-device"
#DEFINE G_VOLUME_IDENTIFIER_KIND_UUID @!"uuid"
#DEFINE G_VOLUME_MONITOR_EXTENSION_POINT_NAME @!"gio-volume-monitor"
TYPE AS _GVfs GVfs
TYPE AS _GVfsClass GVfsClass
TYPE AS _GVolume GVolume
TYPE AS _GVolumeIface GVolumeIface
TYPE AS _GVolumeMonitor GVolumeMonitor
TYPE AS _GVolumeMonitorClass GVolumeMonitorClass
TYPE AS _GZlibCompressor GZlibCompressor
TYPE AS _GZlibCompressorClass GZlibCompressorClass
TYPE AS LONG GZlibCompressorFormat
ENUM
  G_ZLIB_COMPRESSOR_FORMAT_ZLIB = 0
  G_ZLIB_COMPRESSOR_FORMAT_GZIP = 1
  G_ZLIB_COMPRESSOR_FORMAT_RAW = 2
END ENUM
TYPE AS _GZlibDecompressor GZlibDecompressor
TYPE AS _GZlibDecompressorClass GZlibDecompressorClass
EXTERN "C" LIB "gio-2.0"
' P_X

TYPE GAsyncReadyCallback AS SUB CDECL(BYVAL AS GObject PTR, BYVAL AS GAsyncResult PTR, BYVAL AS gpointer)
TYPE _GInputStream
  AS GObject parent_instance
  AS GInputStreamPrivate PTR priv
END TYPE
DECLARE FUNCTION g_input_stream_get_type() AS GType
#DEFINE G_TYPE_INPUT_STREAM (g_input_stream_get_type())
#DEFINE G_INPUT_STREAM(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), G_TYPE_INPUT_STREAM, GInputStream))
#DEFINE G_INPUT_STREAM_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), G_TYPE_INPUT_STREAM, GInputStreamClass))
#DEFINE G_IS_INPUT_STREAM(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), G_TYPE_INPUT_STREAM))
#DEFINE G_IS_CLASS_INPUT_STREAM(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), G_TYPE_INPUT_STREAM))
#DEFINE G_INPUT_STREAM_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), G_TYPE_INPUT_STREAM, GInputStreamClass))
DECLARE SUB g_input_stream_clear_pending(BYVAL AS GInputStream PTR)
DECLARE FUNCTION g_input_stream_close(BYVAL AS GInputStream PTR, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE SUB g_input_stream_close_async(BYVAL AS GInputStream PTR, BYVAL AS gint /'int'/, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
DECLARE FUNCTION g_input_stream_close_finish(BYVAL AS GInputStream PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION g_input_stream_has_pending(BYVAL AS GInputStream PTR) AS gboolean
DECLARE FUNCTION g_input_stream_is_closed(BYVAL AS GInputStream PTR) AS gboolean
DECLARE FUNCTION g_input_stream_read(BYVAL AS GInputStream PTR, BYVAL AS any ptr /'void'/ PTR, BYVAL AS gsize, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS gssize
DECLARE FUNCTION g_input_stream_read_all(BYVAL AS GInputStream PTR, BYVAL AS any ptr /'void'/ PTR, BYVAL AS gsize, BYVAL AS gsize PTR, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE SUB g_input_stream_read_all_async(BYVAL AS GInputStream PTR, BYVAL AS any ptr /'void'/ PTR, BYVAL AS gsize, BYVAL AS gint /'int'/, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
DECLARE FUNCTION g_input_stream_read_all_finish(BYVAL AS GInputStream PTR, BYVAL AS GAsyncResult PTR, BYVAL AS gsize PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE SUB g_input_stream_read_async(BYVAL AS GInputStream PTR, BYVAL AS any ptr /'void'/ PTR, BYVAL AS gsize, BYVAL AS gint /'int'/, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
DECLARE FUNCTION g_input_stream_read_bytes(BYVAL AS GInputStream PTR, BYVAL AS gsize, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS GBytes PTR
DECLARE SUB g_input_stream_read_bytes_async(BYVAL AS GInputStream PTR, BYVAL AS gsize, BYVAL AS gint /'int'/, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
DECLARE FUNCTION g_input_stream_read_bytes_finish(BYVAL AS GInputStream PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS GBytes PTR
DECLARE FUNCTION g_input_stream_read_finish(BYVAL AS GInputStream PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS gssize
DECLARE FUNCTION g_input_stream_set_pending(BYVAL AS GInputStream PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION g_input_stream_skip(BYVAL AS GInputStream PTR, BYVAL AS gsize, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS gssize
DECLARE SUB g_input_stream_skip_async(BYVAL AS GInputStream PTR, BYVAL AS gsize, BYVAL AS gint /'int'/, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
DECLARE FUNCTION g_input_stream_skip_finish(BYVAL AS GInputStream PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS gssize
TYPE _GInputStreamClass
  AS GObjectClass parent_class
  read_fn AS FUNCTION CDECL(BYVAL AS GInputStream PTR, BYVAL AS any ptr /'void'/ PTR, BYVAL AS gsize, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS gssize
  skip AS FUNCTION CDECL(BYVAL AS GInputStream PTR, BYVAL AS gsize, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS gssize
  close_fn AS FUNCTION CDECL(BYVAL AS GInputStream PTR, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS gboolean
  read_async AS SUB CDECL(BYVAL AS GInputStream PTR, BYVAL AS any ptr /'void'/ PTR, BYVAL AS gsize, BYVAL AS gint /'int'/, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
  read_finish AS FUNCTION CDECL(BYVAL AS GInputStream PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS gssize
  skip_async AS SUB CDECL(BYVAL AS GInputStream PTR, BYVAL AS gsize, BYVAL AS gint /'int'/, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
  skip_finish AS FUNCTION CDECL(BYVAL AS GInputStream PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS gssize
  close_async AS SUB CDECL(BYVAL AS GInputStream PTR, BYVAL AS gint /'int'/, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
  close_finish AS FUNCTION CDECL(BYVAL AS GInputStream PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS gboolean
  _g_reserved1 AS SUB CDECL()
  _g_reserved2 AS SUB CDECL()
  _g_reserved3 AS SUB CDECL()
  _g_reserved4 AS SUB CDECL()
  _g_reserved5 AS SUB CDECL()
END TYPE
TYPE _GInputVector
  AS gpointer buffer
  AS gsize size
END TYPE
TYPE _GInputMessage
  AS GSocketAddress PTR PTR address
  AS GInputVector vectors(1)
  AS guint num_vectors
  AS gsize bytes_received
  AS gint flags
  AS GSocketControlMessage PTR PTR control_messages(5)
  AS guint PTR num_control_messages
END TYPE
TYPE _GOutputStream
  AS GObject parent_instance
  AS GOutputStreamPrivate PTR priv
END TYPE
DECLARE FUNCTION g_output_stream_get_type() AS GType
#DEFINE G_TYPE_OUTPUT_STREAM (g_output_stream_get_type())
#DEFINE G_OUTPUT_STREAM(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), G_TYPE_OUTPUT_STREAM, GOutputStream))
#DEFINE G_OUTPUT_STREAM_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), G_TYPE_OUTPUT_STREAM, GOutputStreamClass))
#DEFINE G_IS_OUTPUT_STREAM(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), G_TYPE_OUTPUT_STREAM))
#DEFINE G_IS_CLASS_OUTPUT_STREAM(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), G_TYPE_OUTPUT_STREAM))
#DEFINE G_OUTPUT_STREAM_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), G_TYPE_OUTPUT_STREAM, GOutputStreamClass))
DECLARE SUB g_output_stream_clear_pending(BYVAL AS GOutputStream PTR)
DECLARE FUNCTION g_output_stream_close(BYVAL AS GOutputStream PTR, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE SUB g_output_stream_close_async(BYVAL AS GOutputStream PTR, BYVAL AS gint /'int'/, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
DECLARE FUNCTION g_output_stream_close_finish(BYVAL AS GOutputStream PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION g_output_stream_flush(BYVAL AS GOutputStream PTR, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE SUB g_output_stream_flush_async(BYVAL AS GOutputStream PTR, BYVAL AS gint /'int'/, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
DECLARE FUNCTION g_output_stream_flush_finish(BYVAL AS GOutputStream PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION g_output_stream_has_pending(BYVAL AS GOutputStream PTR) AS gboolean
DECLARE FUNCTION g_output_stream_is_closed(BYVAL AS GOutputStream PTR) AS gboolean
DECLARE FUNCTION g_output_stream_is_closing(BYVAL AS GOutputStream PTR) AS gboolean
DECLARE FUNCTION g_output_stream_printf(BYVAL AS GOutputStream PTR, BYVAL AS gsize PTR, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR, BYVAL AS const gchar PTR, ...) AS gboolean
DECLARE FUNCTION g_output_stream_set_pending(BYVAL AS GOutputStream PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION g_output_stream_splice(BYVAL AS GOutputStream PTR, BYVAL AS GInputStream PTR, BYVAL AS GOutputStreamSpliceFlags, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS gssize
DECLARE SUB g_output_stream_splice_async(BYVAL AS GOutputStream PTR, BYVAL AS GInputStream PTR, BYVAL AS GOutputStreamSpliceFlags, BYVAL AS gint /'int'/, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
DECLARE FUNCTION g_output_stream_splice_finish(BYVAL AS GOutputStream PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS gssize
DECLARE FUNCTION g_output_stream_vprintf(BYVAL AS GOutputStream PTR, BYVAL AS gsize PTR, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR, BYVAL AS const gchar PTR, BYVAL AS va_list) AS gboolean
DECLARE FUNCTION g_output_stream_write(BYVAL AS GOutputStream PTR, BYVAL AS any ptr /'void'/ PTR, BYVAL AS gsize, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS gssize
DECLARE FUNCTION g_output_stream_write_all(BYVAL AS GOutputStream PTR, BYVAL AS any ptr /'void'/ PTR, BYVAL AS gsize, BYVAL AS gsize PTR, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE SUB g_output_stream_write_all_async(BYVAL AS GOutputStream PTR, BYVAL AS any ptr /'void'/ PTR, BYVAL AS gsize, BYVAL AS gint /'int'/, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
DECLARE FUNCTION g_output_stream_write_all_finish(BYVAL AS GOutputStream PTR, BYVAL AS GAsyncResult PTR, BYVAL AS gsize PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE SUB g_output_stream_write_async(BYVAL AS GOutputStream PTR, BYVAL AS any ptr /'void'/ PTR, BYVAL AS gsize, BYVAL AS gint /'int'/, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
DECLARE FUNCTION g_output_stream_write_bytes(BYVAL AS GOutputStream PTR, BYVAL AS GBytes PTR, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS gssize
DECLARE SUB g_output_stream_write_bytes_async(BYVAL AS GOutputStream PTR, BYVAL AS GBytes PTR, BYVAL AS gint /'int'/, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
DECLARE FUNCTION g_output_stream_write_bytes_finish(BYVAL AS GOutputStream PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS gssize
DECLARE FUNCTION g_output_stream_write_finish(BYVAL AS GOutputStream PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS gssize
DECLARE FUNCTION g_output_stream_writev(BYVAL AS GOutputStream PTR, BYVAL AS const GOutputVector PTR, BYVAL AS gsize, BYVAL AS gsize PTR, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION g_output_stream_writev_all(BYVAL AS GOutputStream PTR, BYVAL AS GOutputVector PTR, BYVAL AS gsize, BYVAL AS gsize PTR, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE SUB g_output_stream_writev_all_async(BYVAL AS GOutputStream PTR, BYVAL AS GOutputVector PTR, BYVAL AS gsize, BYVAL AS gint /'int'/, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
DECLARE FUNCTION g_output_stream_writev_all_finish(BYVAL AS GOutputStream PTR, BYVAL AS GAsyncResult PTR, BYVAL AS gsize PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE SUB g_output_stream_writev_async(BYVAL AS GOutputStream PTR, BYVAL AS const GOutputVector PTR, BYVAL AS gsize, BYVAL AS gint /'int'/, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
DECLARE FUNCTION g_output_stream_writev_finish(BYVAL AS GOutputStream PTR, BYVAL AS GAsyncResult PTR, BYVAL AS gsize PTR, BYVAL AS GError PTR PTR) AS gboolean
TYPE _GOutputStreamClass
  AS GObjectClass parent_class
  write_fn AS FUNCTION CDECL(BYVAL AS GOutputStream PTR, BYVAL AS any ptr /'void'/ PTR, BYVAL AS gsize, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS gssize
  splice AS FUNCTION CDECL(BYVAL AS GOutputStream PTR, BYVAL AS GInputStream PTR, BYVAL AS GOutputStreamSpliceFlags, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS gssize
  flush AS FUNCTION CDECL(BYVAL AS GOutputStream PTR, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS gboolean
  close_fn AS FUNCTION CDECL(BYVAL AS GOutputStream PTR, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS gboolean
  write_async AS SUB CDECL(BYVAL AS GOutputStream PTR, BYVAL AS any ptr /'void'/ PTR, BYVAL AS gsize, BYVAL AS gint /'int'/, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
  write_finish AS FUNCTION CDECL(BYVAL AS GOutputStream PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS gssize
  splice_async AS SUB CDECL(BYVAL AS GOutputStream PTR, BYVAL AS GInputStream PTR, BYVAL AS GOutputStreamSpliceFlags, BYVAL AS gint /'int'/, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
  splice_finish AS FUNCTION CDECL(BYVAL AS GOutputStream PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS gssize
  flush_async AS SUB CDECL(BYVAL AS GOutputStream PTR, BYVAL AS gint /'int'/, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
  flush_finish AS FUNCTION CDECL(BYVAL AS GOutputStream PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS gboolean
  close_async AS SUB CDECL(BYVAL AS GOutputStream PTR, BYVAL AS gint /'int'/, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
  close_finish AS FUNCTION CDECL(BYVAL AS GOutputStream PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS gboolean
  writev_fn AS FUNCTION CDECL(BYVAL AS GOutputStream PTR, BYVAL AS const GOutputVector PTR, BYVAL AS gsize, BYVAL AS gsize PTR, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS gboolean
  writev_async AS SUB CDECL(BYVAL AS GOutputStream PTR, BYVAL AS const GOutputVector PTR, BYVAL AS gsize, BYVAL AS gint /'int'/, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
  writev_finish AS FUNCTION CDECL(BYVAL AS GOutputStream PTR, BYVAL AS GAsyncResult PTR, BYVAL AS gsize PTR, BYVAL AS GError PTR PTR) AS gboolean
  _g_reserved4 AS SUB CDECL()
  _g_reserved5 AS SUB CDECL()
  _g_reserved6 AS SUB CDECL()
  _g_reserved7 AS SUB CDECL()
  _g_reserved8 AS SUB CDECL()
END TYPE
TYPE _GFilterInputStream
  AS GInputStream parent_instance
  AS GInputStream PTR base_stream
END TYPE
DECLARE FUNCTION g_filter_input_stream_get_type() AS GType
#DEFINE G_TYPE_FILTER_INPUT_STREAM (g_filter_input_stream_get_type())
#DEFINE G_FILTER_INPUT_STREAM(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), G_TYPE_FILTER_INPUT_STREAM, GFilterInputStream))
#DEFINE G_FILTER_INPUT_STREAM_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), G_TYPE_FILTER_INPUT_STREAM, GFilterInputStreamClass))
#DEFINE G_IS_FILTER_INPUT_STREAM(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), G_TYPE_FILTER_INPUT_STREAM))
#DEFINE G_IS_CLASS_FILTER_INPUT_STREAM(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), G_TYPE_FILTER_INPUT_STREAM))
#DEFINE G_FILTER_INPUT_STREAM_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), G_TYPE_FILTER_INPUT_STREAM, GFilterInputStreamClass))
DECLARE FUNCTION g_filter_input_stream_get_base_stream(BYVAL AS GFilterInputStream PTR) AS GInputStream PTR
DECLARE FUNCTION g_filter_input_stream_get_close_base_stream(BYVAL AS GFilterInputStream PTR) AS gboolean
DECLARE SUB g_filter_input_stream_set_close_base_stream(BYVAL AS GFilterInputStream PTR, BYVAL AS gboolean)
TYPE _GFilterInputStreamClass
  AS GInputStreamClass parent_class
  _g_reserved1 AS SUB CDECL()
  _g_reserved2 AS SUB CDECL()
  _g_reserved3 AS SUB CDECL()
END TYPE
TYPE _GFilterOutputStream
  AS GOutputStream parent_instance
  AS GOutputStream PTR base_stream
END TYPE
DECLARE FUNCTION g_filter_output_stream_get_type() AS GType
#DEFINE G_TYPE_FILTER_OUTPUT_STREAM (g_filter_output_stream_get_type())
#DEFINE G_FILTER_OUTPUT_STREAM(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), G_TYPE_FILTER_OUTPUT_STREAM, GFilterOutputStream))
#DEFINE G_FILTER_OUTPUT_STREAM_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), G_TYPE_FILTER_OUTPUT_STREAM, GFilterOutputStreamClass))
#DEFINE G_IS_FILTER_OUTPUT_STREAM(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), G_TYPE_FILTER_OUTPUT_STREAM))
#DEFINE G_IS_CLASS_FILTER_OUTPUT_STREAM(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), G_TYPE_FILTER_OUTPUT_STREAM))
#DEFINE G_FILTER_OUTPUT_STREAM_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), G_TYPE_FILTER_OUTPUT_STREAM, GFilterOutputStreamClass))
DECLARE FUNCTION g_filter_output_stream_get_base_stream(BYVAL AS GFilterOutputStream PTR) AS GOutputStream PTR
DECLARE FUNCTION g_filter_output_stream_get_close_base_stream(BYVAL AS GFilterOutputStream PTR) AS gboolean
DECLARE SUB g_filter_output_stream_set_close_base_stream(BYVAL AS GFilterOutputStream PTR, BYVAL AS gboolean)
TYPE _GFilterOutputStreamClass
  AS GOutputStreamClass parent_class
  _g_reserved1 AS SUB CDECL()
  _g_reserved2 AS SUB CDECL()
  _g_reserved3 AS SUB CDECL()
END TYPE
TYPE GDBusMessageFilterFunction AS FUNCTION CDECL(BYVAL AS GDBusConnection PTR, BYVAL AS GDBusMessage PTR, BYVAL AS gboolean, BYVAL AS gpointer) AS GDBusMessage PTR
TYPE GDBusSignalCallback AS SUB CDECL(BYVAL AS GDBusConnection PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS GVariant PTR, BYVAL AS gpointer)
TYPE GDBusProxyTypeFunc AS FUNCTION CDECL(BYVAL AS GDBusObjectManagerClient PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS gpointer) AS GType
TYPE GDesktopAppLaunchCallback AS SUB CDECL(BYVAL AS GDesktopAppInfo PTR, BYVAL AS GPid, BYVAL AS gpointer)
TYPE GFileProgressCallback AS SUB CDECL(BYVAL AS gint32 /'goffset'/, BYVAL AS gint32 /'goffset'/, BYVAL AS gpointer)
TYPE GFileReadMoreCallback AS FUNCTION CDECL(BYVAL AS const gchar PTR, BYVAL AS gint32 /'goffset'/, BYVAL AS gpointer) AS gboolean
TYPE _GIOStream
  AS GObject parent_instance
  AS GIOStreamPrivate PTR priv
END TYPE
DECLARE FUNCTION g_io_stream_get_type() AS GType
#DEFINE G_TYPE_IO_STREAM (g_io_stream_get_type())
#DEFINE G_IO_STREAM(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), G_TYPE_IO_STREAM, GIOStream))
#DEFINE G_IO_STREAM_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), G_TYPE_IO_STREAM, GIOStreamClass))
#DEFINE G_IS_IO_STREAM(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), G_TYPE_IO_STREAM))
#DEFINE G_IS_CLASS_IO_STREAM(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), G_TYPE_IO_STREAM))
#DEFINE G_IO_STREAM_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), G_TYPE_IO_STREAM, GIOStreamClass))
DECLARE FUNCTION g_io_stream_splice_finish(BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE SUB g_io_stream_clear_pending(BYVAL AS GIOStream PTR)
DECLARE FUNCTION g_io_stream_close(BYVAL AS GIOStream PTR, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE SUB g_io_stream_close_async(BYVAL AS GIOStream PTR, BYVAL AS gint /'int'/, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
DECLARE FUNCTION g_io_stream_close_finish(BYVAL AS GIOStream PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION g_io_stream_get_input_stream(BYVAL AS GIOStream PTR) AS GInputStream PTR
DECLARE FUNCTION g_io_stream_get_output_stream(BYVAL AS GIOStream PTR) AS GOutputStream PTR
DECLARE FUNCTION g_io_stream_has_pending(BYVAL AS GIOStream PTR) AS gboolean
DECLARE FUNCTION g_io_stream_is_closed(BYVAL AS GIOStream PTR) AS gboolean
DECLARE FUNCTION g_io_stream_set_pending(BYVAL AS GIOStream PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE SUB g_io_stream_splice_async(BYVAL AS GIOStream PTR, BYVAL AS GIOStream PTR, BYVAL AS GIOStreamSpliceFlags, BYVAL AS gint /'int'/, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
TYPE _GIOStreamClass
  AS GObjectClass parent_class
  get_input_stream AS FUNCTION CDECL(BYVAL AS GIOStream PTR) AS GInputStream PTR
  get_output_stream AS FUNCTION CDECL(BYVAL AS GIOStream PTR) AS GOutputStream PTR
  close_fn AS FUNCTION CDECL(BYVAL AS GIOStream PTR, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS gboolean
  close_async AS SUB CDECL(BYVAL AS GIOStream PTR, BYVAL AS gint /'int'/, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
  close_finish AS FUNCTION CDECL(BYVAL AS GIOStream PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS gboolean
  _g_reserved1 AS SUB CDECL()
  _g_reserved2 AS SUB CDECL()
  _g_reserved3 AS SUB CDECL()
  _g_reserved4 AS SUB CDECL()
  _g_reserved5 AS SUB CDECL()
  _g_reserved6 AS SUB CDECL()
  _g_reserved7 AS SUB CDECL()
  _g_reserved8 AS SUB CDECL()
  _g_reserved9 AS SUB CDECL()
  _g_reserved10 AS SUB CDECL()
END TYPE
TYPE _GSocketAddress
  AS GObject parent_instance
END TYPE
DECLARE FUNCTION g_socket_address_get_type() AS GType
#DEFINE G_TYPE_SOCKET_ADDRESS (g_socket_address_get_type())
#DEFINE G_SOCKET_ADDRESS(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), G_TYPE_SOCKET_ADDRESS, GSocketAddress))
#DEFINE G_SOCKET_ADDRESS_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), G_TYPE_SOCKET_ADDRESS, GSocketAddressClass))
#DEFINE G_IS_SOCKET_ADDRESS(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), G_TYPE_SOCKET_ADDRESS))
#DEFINE G_IS_CLASS_SOCKET_ADDRESS(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), G_TYPE_SOCKET_ADDRESS))
#DEFINE G_SOCKET_ADDRESS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), G_TYPE_SOCKET_ADDRESS, GSocketAddressClass))
DECLARE FUNCTION g_socket_address_new_from_native(BYVAL AS gpointer, BYVAL AS gsize) AS GSocketAddress PTR
DECLARE FUNCTION g_socket_address_get_family(BYVAL AS GSocketAddress PTR) AS GSocketFamily
DECLARE FUNCTION g_socket_address_get_native_size(BYVAL AS GSocketAddress PTR) AS gssize
DECLARE FUNCTION g_socket_address_to_native(BYVAL AS GSocketAddress PTR, BYVAL AS gpointer, BYVAL AS gsize, BYVAL AS GError PTR PTR) AS gboolean
TYPE _GSocketAddressClass
  AS GObjectClass parent_class
  get_family AS FUNCTION CDECL(BYVAL AS GSocketAddress PTR) AS GSocketFamily
  get_native_size AS FUNCTION CDECL(BYVAL AS GSocketAddress PTR) AS gssize
  to_native AS FUNCTION CDECL(BYVAL AS GSocketAddress PTR, BYVAL AS gpointer, BYVAL AS gsize, BYVAL AS GError PTR PTR) AS gboolean
END TYPE
TYPE GReallocFunc AS FUNCTION CDECL(BYVAL AS gpointer, BYVAL AS gsize, BYVAL AS GError PTR PTR) AS gpointer
TYPE _GVolumeMonitor
  AS GObject parent_instance
  AS gpointer priv
END TYPE
DECLARE FUNCTION g_volume_monitor_get_type() AS GType
#DEFINE G_TYPE_VOLUME_MONITOR (g_volume_monitor_get_type())
#DEFINE G_VOLUME_MONITOR(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), G_TYPE_VOLUME_MONITOR, GVolumeMonitor))
#DEFINE G_VOLUME_MONITOR_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), G_TYPE_VOLUME_MONITOR, GVolumeMonitorClass))
#DEFINE G_IS_VOLUME_MONITOR(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), G_TYPE_VOLUME_MONITOR))
#DEFINE G_IS_CLASS_VOLUME_MONITOR(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), G_TYPE_VOLUME_MONITOR))
#DEFINE G_VOLUME_MONITOR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), G_TYPE_VOLUME_MONITOR, GVolumeMonitorClass))
DECLARE FUNCTION g_volume_monitor_adopt_orphan_mount(BYVAL AS GMount PTR) AS GVolume PTR
DECLARE FUNCTION g_volume_monitor_get() AS GVolumeMonitor PTR
DECLARE FUNCTION g_volume_monitor_get_connected_drives(BYVAL AS GVolumeMonitor PTR) AS GList PTR
DECLARE FUNCTION g_volume_monitor_get_mount_for_uuid(BYVAL AS GVolumeMonitor PTR, BYVAL AS const gchar PTR) AS GMount PTR
DECLARE FUNCTION g_volume_monitor_get_mounts(BYVAL AS GVolumeMonitor PTR) AS GList PTR
DECLARE FUNCTION g_volume_monitor_get_volume_for_uuid(BYVAL AS GVolumeMonitor PTR, BYVAL AS const gchar PTR) AS GVolume PTR
DECLARE FUNCTION g_volume_monitor_get_volumes(BYVAL AS GVolumeMonitor PTR) AS GList PTR
TYPE _GVolumeMonitorClass
  AS GObjectClass parent_class
  volume_added AS SUB CDECL(BYVAL AS GVolumeMonitor PTR, BYVAL AS GVolume PTR)
  volume_removed AS SUB CDECL(BYVAL AS GVolumeMonitor PTR, BYVAL AS GVolume PTR)
  volume_changed AS SUB CDECL(BYVAL AS GVolumeMonitor PTR, BYVAL AS GVolume PTR)
  mount_added AS SUB CDECL(BYVAL AS GVolumeMonitor PTR, BYVAL AS GMount PTR)
  mount_removed AS SUB CDECL(BYVAL AS GVolumeMonitor PTR, BYVAL AS GMount PTR)
  mount_pre_unmount AS SUB CDECL(BYVAL AS GVolumeMonitor PTR, BYVAL AS GMount PTR)
  mount_changed AS SUB CDECL(BYVAL AS GVolumeMonitor PTR, BYVAL AS GMount PTR)
  drive_connected AS SUB CDECL(BYVAL AS GVolumeMonitor PTR, BYVAL AS GDrive PTR)
  drive_disconnected AS SUB CDECL(BYVAL AS GVolumeMonitor PTR, BYVAL AS GDrive PTR)
  drive_changed AS SUB CDECL(BYVAL AS GVolumeMonitor PTR, BYVAL AS GDrive PTR)
  is_supported AS FUNCTION CDECL() AS gboolean
  get_connected_drives AS FUNCTION CDECL(BYVAL AS GVolumeMonitor PTR) AS GList PTR
  get_volumes AS FUNCTION CDECL(BYVAL AS GVolumeMonitor PTR) AS GList PTR
  get_mounts AS FUNCTION CDECL(BYVAL AS GVolumeMonitor PTR) AS GList PTR
  get_volume_for_uuid AS FUNCTION CDECL(BYVAL AS GVolumeMonitor PTR, BYVAL AS const gchar PTR) AS GVolume PTR
  get_mount_for_uuid AS FUNCTION CDECL(BYVAL AS GVolumeMonitor PTR, BYVAL AS const gchar PTR) AS GMount PTR
  adopt_orphan_mount AS FUNCTION CDECL(BYVAL AS GMount PTR, BYVAL AS GVolumeMonitor PTR) AS GVolume PTR
  drive_eject_button AS SUB CDECL(BYVAL AS GVolumeMonitor PTR, BYVAL AS GDrive PTR)
  drive_stop_button AS SUB CDECL(BYVAL AS GVolumeMonitor PTR, BYVAL AS GDrive PTR)
  _g_reserved1 AS SUB CDECL()
  _g_reserved2 AS SUB CDECL()
  _g_reserved3 AS SUB CDECL()
  _g_reserved4 AS SUB CDECL()
  _g_reserved5 AS SUB CDECL()
  _g_reserved6 AS SUB CDECL()
END TYPE
TYPE _GSocketAddressEnumerator
  AS GObject parent_instance
END TYPE
DECLARE FUNCTION g_socket_address_enumerator_get_type() AS GType
#DEFINE G_TYPE_SOCKET_ADDRESS_ENUMERATOR (g_socket_address_enumerator_get_type())
#DEFINE G_SOCKET_ADDRESS_ENUMERATOR(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), G_TYPE_SOCKET_ADDRESS_ENUMERATOR, GSocketAddressEnumerator))
#DEFINE G_SOCKET_ADDRESS_ENUMERATOR_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), G_TYPE_SOCKET_ADDRESS_ENUMERATOR, GSocketAddressEnumeratorClass))
#DEFINE G_IS_SOCKET_ADDRESS_ENUMERATOR(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), G_TYPE_SOCKET_ADDRESS_ENUMERATOR))
#DEFINE G_IS_CLASS_SOCKET_ADDRESS_ENUMERATOR(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), G_TYPE_SOCKET_ADDRESS_ENUMERATOR))
#DEFINE G_SOCKET_ADDRESS_ENUMERATOR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), G_TYPE_SOCKET_ADDRESS_ENUMERATOR, GSocketAddressEnumeratorClass))
DECLARE FUNCTION g_socket_address_enumerator_next(BYVAL AS GSocketAddressEnumerator PTR, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS GSocketAddress PTR
DECLARE SUB g_socket_address_enumerator_next_async(BYVAL AS GSocketAddressEnumerator PTR, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
DECLARE FUNCTION g_socket_address_enumerator_next_finish(BYVAL AS GSocketAddressEnumerator PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS GSocketAddress PTR
TYPE _GSocketAddressEnumeratorClass
  AS GObjectClass parent_class
  next AS FUNCTION CDECL(BYVAL AS GSocketAddressEnumerator PTR, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS GSocketAddress PTR
  next_async AS SUB CDECL(BYVAL AS GSocketAddressEnumerator PTR, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
  next_finish AS FUNCTION CDECL(BYVAL AS GSocketAddressEnumerator PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS GSocketAddress PTR
END TYPE
TYPE GSettingsBindGetMapping AS FUNCTION CDECL(BYVAL AS GValue PTR, BYVAL AS GVariant PTR, BYVAL AS gpointer, BYVAL AS GError PTR PTR) AS gboolean
TYPE GSettingsBindSetMapping AS FUNCTION CDECL(BYVAL AS const GValue PTR, BYVAL AS const GVariantType PTR, BYVAL AS gpointer, BYVAL AS GError PTR PTR) AS GVariant PTR
TYPE GSettingsGetMapping AS FUNCTION CDECL(BYVAL AS GVariant PTR, BYVAL AS gpointer PTR, BYVAL AS gpointer, BYVAL AS GError PTR PTR) AS gboolean
TYPE GSimpleAsyncThreadFunc AS SUB CDECL(BYVAL AS GSimpleAsyncResult PTR, BYVAL AS GObject PTR, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR)
TYPE GTaskThreadFunc AS SUB CDECL(BYVAL AS GTask PTR, BYVAL AS gpointer, BYVAL AS gpointer, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR)
TYPE GFileMeasureProgressCallback AS SUB CDECL(BYVAL AS gboolean, BYVAL AS guint64, BYVAL AS guint64, BYVAL AS guint64, BYVAL AS gpointer, BYVAL AS GError PTR PTR)
TYPE GVfsFileLookupFunc AS FUNCTION CDECL(BYVAL AS GVfs PTR, BYVAL AS const gchar PTR, BYVAL AS gpointer, BYVAL AS GError PTR PTR) AS GFile PTR
' P_3

DECLARE FUNCTION g_action_get_type() AS GType
#DEFINE G_TYPE_ACTION (g_action_get_type())
#DEFINE G_ACTION(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), G_TYPE_ACTION, GAction))
#DEFINE G_ACTION_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), G_TYPE_ACTION, GActionInterface))
#DEFINE G_IS_ACTION(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), G_TYPE_ACTION))
#DEFINE G_ACTION_GET_IFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE((obj), G_TYPE_ACTION, GActionInterface))
DECLARE FUNCTION g_action_name_is_valid(BYVAL AS const gchar PTR) AS gboolean
DECLARE FUNCTION g_action_parse_detailed_name(BYVAL AS const gchar PTR, BYVAL AS gchar PTR PTR, BYVAL AS GVariant PTR PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION g_action_print_detailed_name(BYVAL AS const gchar PTR, BYVAL AS GVariant PTR) AS gchar PTR
DECLARE SUB g_action_activate(BYVAL AS GAction PTR, BYVAL AS GVariant PTR)
DECLARE SUB g_action_change_state(BYVAL AS GAction PTR, BYVAL AS GVariant PTR)
DECLARE FUNCTION g_action_get_enabled(BYVAL AS GAction PTR) AS gboolean
DECLARE FUNCTION g_action_get_name(BYVAL AS GAction PTR) AS const gchar PTR
DECLARE FUNCTION g_action_get_parameter_type(BYVAL AS GAction PTR) AS const GVariantType PTR
DECLARE FUNCTION g_action_get_state(BYVAL AS GAction PTR) AS GVariant PTR
DECLARE FUNCTION g_action_get_state_hint(BYVAL AS GAction PTR) AS GVariant PTR
DECLARE FUNCTION g_action_get_state_type(BYVAL AS GAction PTR) AS const GVariantType PTR
TYPE _GActionEntry
  AS const gchar PTR name
  activate AS SUB CDECL(BYVAL AS GSimpleAction PTR, BYVAL AS GVariant PTR, BYVAL AS gpointer)
  AS const gchar PTR parameter_type
  AS const gchar PTR state
  change_state AS SUB CDECL(BYVAL AS GSimpleAction PTR, BYVAL AS GVariant PTR, BYVAL AS gpointer)
  AS gsize padding(2)
END TYPE
DECLARE FUNCTION g_action_group_get_type() AS GType
#DEFINE G_TYPE_ACTION_GROUP (g_action_group_get_type())
#DEFINE G_ACTION_GROUP(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), G_TYPE_ACTION_GROUP, GActionGroup))
#DEFINE G_ACTION_GROUP_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), G_TYPE_ACTION_GROUP, GActionGroupInterface))
#DEFINE G_IS_ACTION_GROUP(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), G_TYPE_ACTION_GROUP))
#DEFINE G_ACTION_GROUP_GET_IFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE((obj), G_TYPE_ACTION_GROUP, GActionGroupInterface))
DECLARE SUB g_action_group_action_added(BYVAL AS GActionGroup PTR, BYVAL AS const gchar PTR)
DECLARE SUB g_action_group_action_enabled_changed(BYVAL AS GActionGroup PTR, BYVAL AS const gchar PTR, BYVAL AS gboolean)
DECLARE SUB g_action_group_action_removed(BYVAL AS GActionGroup PTR, BYVAL AS const gchar PTR)
DECLARE SUB g_action_group_action_state_changed(BYVAL AS GActionGroup PTR, BYVAL AS const gchar PTR, BYVAL AS GVariant PTR)
DECLARE SUB g_action_group_activate_action(BYVAL AS GActionGroup PTR, BYVAL AS const gchar PTR, BYVAL AS GVariant PTR)
DECLARE SUB g_action_group_change_action_state(BYVAL AS GActionGroup PTR, BYVAL AS const gchar PTR, BYVAL AS GVariant PTR)
DECLARE FUNCTION g_action_group_get_action_enabled(BYVAL AS GActionGroup PTR, BYVAL AS const gchar PTR) AS gboolean
DECLARE FUNCTION g_action_group_get_action_parameter_type(BYVAL AS GActionGroup PTR, BYVAL AS const gchar PTR) AS const GVariantType PTR
DECLARE FUNCTION g_action_group_get_action_state(BYVAL AS GActionGroup PTR, BYVAL AS const gchar PTR) AS GVariant PTR
DECLARE FUNCTION g_action_group_get_action_state_hint(BYVAL AS GActionGroup PTR, BYVAL AS const gchar PTR) AS GVariant PTR
DECLARE FUNCTION g_action_group_get_action_state_type(BYVAL AS GActionGroup PTR, BYVAL AS const gchar PTR) AS const GVariantType PTR
DECLARE FUNCTION g_action_group_has_action(BYVAL AS GActionGroup PTR, BYVAL AS const gchar PTR) AS gboolean
DECLARE FUNCTION g_action_group_list_actions(BYVAL AS GActionGroup PTR) AS gchar PTR PTR
DECLARE FUNCTION g_action_group_query_action(BYVAL AS GActionGroup PTR, BYVAL AS const gchar PTR, BYVAL AS gboolean PTR, BYVAL AS const GVariantType PTR PTR, BYVAL AS const GVariantType PTR PTR, BYVAL AS GVariant PTR PTR, BYVAL AS GVariant PTR PTR) AS gboolean
TYPE _GActionGroupInterface
  AS GTypeInterface g_iface
  has_action AS FUNCTION CDECL(BYVAL AS GActionGroup PTR, BYVAL AS const gchar PTR) AS gboolean
  list_actions AS FUNCTION CDECL(BYVAL AS GActionGroup PTR) AS gchar PTR PTR
  get_action_enabled AS FUNCTION CDECL(BYVAL AS GActionGroup PTR, BYVAL AS const gchar PTR) AS gboolean
  get_action_parameter_type AS FUNCTION CDECL(BYVAL AS GActionGroup PTR, BYVAL AS const gchar PTR) AS const GVariantType PTR
  get_action_state_type AS FUNCTION CDECL(BYVAL AS GActionGroup PTR, BYVAL AS const gchar PTR) AS const GVariantType PTR
  get_action_state_hint AS FUNCTION CDECL(BYVAL AS GActionGroup PTR, BYVAL AS const gchar PTR) AS GVariant PTR
  get_action_state AS FUNCTION CDECL(BYVAL AS GActionGroup PTR, BYVAL AS const gchar PTR) AS GVariant PTR
  change_action_state AS SUB CDECL(BYVAL AS GActionGroup PTR, BYVAL AS const gchar PTR, BYVAL AS GVariant PTR)
  activate_action AS SUB CDECL(BYVAL AS GActionGroup PTR, BYVAL AS const gchar PTR, BYVAL AS GVariant PTR)
  action_added AS SUB CDECL(BYVAL AS GActionGroup PTR, BYVAL AS const gchar PTR)
  action_removed AS SUB CDECL(BYVAL AS GActionGroup PTR, BYVAL AS const gchar PTR)
  action_enabled_changed AS SUB CDECL(BYVAL AS GActionGroup PTR, BYVAL AS const gchar PTR, BYVAL AS gboolean)
  action_state_changed AS SUB CDECL(BYVAL AS GActionGroup PTR, BYVAL AS const gchar PTR, BYVAL AS GVariant PTR)
  query_action AS FUNCTION CDECL(BYVAL AS GActionGroup PTR, BYVAL AS const gchar PTR, BYVAL AS gboolean PTR, BYVAL AS const GVariantType PTR PTR, BYVAL AS const GVariantType PTR PTR, BYVAL AS GVariant PTR PTR, BYVAL AS GVariant PTR PTR) AS gboolean
END TYPE
TYPE _GActionInterface
  AS GTypeInterface g_iface
  get_name AS FUNCTION CDECL(BYVAL AS GAction PTR) AS const gchar PTR
  get_parameter_type AS FUNCTION CDECL(BYVAL AS GAction PTR) AS const GVariantType PTR
  get_state_type AS FUNCTION CDECL(BYVAL AS GAction PTR) AS const GVariantType PTR
  get_state_hint AS FUNCTION CDECL(BYVAL AS GAction PTR) AS GVariant PTR
  get_enabled AS FUNCTION CDECL(BYVAL AS GAction PTR) AS gboolean
  get_state AS FUNCTION CDECL(BYVAL AS GAction PTR) AS GVariant PTR
  change_state AS SUB CDECL(BYVAL AS GAction PTR, BYVAL AS GVariant PTR)
  activate AS SUB CDECL(BYVAL AS GAction PTR, BYVAL AS GVariant PTR)
END TYPE
DECLARE FUNCTION g_action_map_get_type() AS GType
#DEFINE G_TYPE_ACTION_MAP (g_action_map_get_type())
#DEFINE G_ACTION_MAP(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), G_TYPE_ACTION_MAP, GActionMap))
#DEFINE G_ACTION_MAP_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), G_TYPE_ACTION_MAP, GActionMapInterface))
#DEFINE G_IS_ACTION_MAP(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), G_TYPE_ACTION_MAP))
#DEFINE G_ACTION_MAP_GET_IFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE((obj), G_TYPE_ACTION_MAP, GActionMapInterface))
DECLARE SUB g_action_map_add_action(BYVAL AS GActionMap PTR, BYVAL AS GAction PTR)
DECLARE SUB g_action_map_add_action_entries(BYVAL AS GActionMap PTR, BYVAL AS const GActionEntry PTR, BYVAL AS gint, BYVAL AS gpointer)
DECLARE FUNCTION g_action_map_lookup_action(BYVAL AS GActionMap PTR, BYVAL AS const gchar PTR) AS GAction PTR
DECLARE SUB g_action_map_remove_action(BYVAL AS GActionMap PTR, BYVAL AS const gchar PTR)
TYPE _GActionMapInterface
  AS GTypeInterface g_iface
  lookup_action AS FUNCTION CDECL(BYVAL AS GActionMap PTR, BYVAL AS const gchar PTR) AS GAction PTR
  add_action AS SUB CDECL(BYVAL AS GActionMap PTR, BYVAL AS GAction PTR)
  remove_action AS SUB CDECL(BYVAL AS GActionMap PTR, BYVAL AS const gchar PTR)
END TYPE
DECLARE FUNCTION g_app_info_get_type() AS GType
#DEFINE G_TYPE_APP_INFO (g_app_info_get_type())
#DEFINE G_APP_INFO(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), G_TYPE_APP_INFO, GAppInfo))
#DEFINE G_APP_INFO_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), G_TYPE_APP_INFO, GAppInfoIface))
#DEFINE G_IS_APP_INFO(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), G_TYPE_APP_INFO))
#DEFINE G_APP_INFO_GET_IFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE((obj), G_TYPE_APP_INFO, GAppInfoIface))
DECLARE FUNCTION g_app_info_create_from_commandline(BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS GAppInfoCreateFlags, BYVAL AS GError PTR PTR) AS GAppInfo PTR
DECLARE FUNCTION g_app_info_get_all() AS GList PTR
DECLARE FUNCTION g_app_info_get_all_for_type(BYVAL AS const gchar PTR) AS GList PTR
DECLARE FUNCTION g_app_info_get_default_for_type(BYVAL AS const gchar PTR, BYVAL AS gboolean) AS GAppInfo PTR
DECLARE FUNCTION g_app_info_get_default_for_uri_scheme(BYVAL AS const gchar PTR) AS GAppInfo PTR
DECLARE FUNCTION g_app_info_get_fallback_for_type(BYVAL AS const gchar PTR) AS GList PTR
DECLARE FUNCTION g_app_info_get_recommended_for_type(BYVAL AS const gchar PTR) AS GList PTR
DECLARE FUNCTION g_app_info_launch_default_for_uri(BYVAL AS const gchar PTR, BYVAL AS GAppLaunchContext PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE SUB g_app_info_launch_default_for_uri_async(BYVAL AS const gchar PTR, BYVAL AS GAppLaunchContext PTR, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
DECLARE FUNCTION g_app_info_launch_default_for_uri_finish(BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE SUB g_app_info_reset_type_associations(BYVAL AS const gchar PTR)
DECLARE FUNCTION g_app_info_add_supports_type(BYVAL AS GAppInfo PTR, BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION g_app_info_can_delete(BYVAL AS GAppInfo PTR) AS gboolean
DECLARE FUNCTION g_app_info_can_remove_supports_type(BYVAL AS GAppInfo PTR) AS gboolean
DECLARE FUNCTION g_app_info_delete(BYVAL AS GAppInfo PTR) AS gboolean
DECLARE FUNCTION g_app_info_dup(BYVAL AS GAppInfo PTR) AS GAppInfo PTR
DECLARE FUNCTION g_app_info_equal(BYVAL AS GAppInfo PTR, BYVAL AS GAppInfo PTR) AS gboolean
DECLARE FUNCTION g_app_info_get_commandline(BYVAL AS GAppInfo PTR) AS const gchar PTR
DECLARE FUNCTION g_app_info_get_description(BYVAL AS GAppInfo PTR) AS const gchar PTR
DECLARE FUNCTION g_app_info_get_display_name(BYVAL AS GAppInfo PTR) AS const gchar PTR
DECLARE FUNCTION g_app_info_get_executable(BYVAL AS GAppInfo PTR) AS const gchar PTR
DECLARE FUNCTION g_app_info_get_icon(BYVAL AS GAppInfo PTR) AS GIcon PTR
DECLARE FUNCTION g_app_info_get_id(BYVAL AS GAppInfo PTR) AS const gchar PTR
DECLARE FUNCTION g_app_info_get_name(BYVAL AS GAppInfo PTR) AS const gchar PTR
DECLARE FUNCTION g_app_info_get_supported_types(BYVAL AS GAppInfo PTR) AS const gchar PTR PTR
DECLARE FUNCTION g_app_info_launch(BYVAL AS GAppInfo PTR, BYVAL AS GList PTR, BYVAL AS GAppLaunchContext PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION g_app_info_launch_uris(BYVAL AS GAppInfo PTR, BYVAL AS GList PTR, BYVAL AS GAppLaunchContext PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE SUB g_app_info_launch_uris_async(BYVAL AS GAppInfo PTR, BYVAL AS GList PTR, BYVAL AS GAppLaunchContext PTR, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
DECLARE FUNCTION g_app_info_launch_uris_finish(BYVAL AS GAppInfo PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION g_app_info_remove_supports_type(BYVAL AS GAppInfo PTR, BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION g_app_info_set_as_default_for_extension(BYVAL AS GAppInfo PTR, BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION g_app_info_set_as_default_for_type(BYVAL AS GAppInfo PTR, BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION g_app_info_set_as_last_used_for_type(BYVAL AS GAppInfo PTR, BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION g_app_info_should_show(BYVAL AS GAppInfo PTR) AS gboolean
DECLARE FUNCTION g_app_info_supports_files(BYVAL AS GAppInfo PTR) AS gboolean
DECLARE FUNCTION g_app_info_supports_uris(BYVAL AS GAppInfo PTR) AS gboolean
TYPE _GAppInfoIface
  AS GTypeInterface g_iface
  dup AS FUNCTION CDECL(BYVAL AS GAppInfo PTR) AS GAppInfo PTR
  equal AS FUNCTION CDECL(BYVAL AS GAppInfo PTR, BYVAL AS GAppInfo PTR) AS gboolean
  get_id AS FUNCTION CDECL(BYVAL AS GAppInfo PTR) AS const gchar PTR
  get_name AS FUNCTION CDECL(BYVAL AS GAppInfo PTR) AS const gchar PTR
  get_description AS FUNCTION CDECL(BYVAL AS GAppInfo PTR) AS const gchar PTR
  get_executable AS FUNCTION CDECL(BYVAL AS GAppInfo PTR) AS const gchar PTR
  get_icon AS FUNCTION CDECL(BYVAL AS GAppInfo PTR) AS GIcon PTR
  launch AS FUNCTION CDECL(BYVAL AS GAppInfo PTR, BYVAL AS GList PTR, BYVAL AS GAppLaunchContext PTR, BYVAL AS GError PTR PTR) AS gboolean
  supports_uris AS FUNCTION CDECL(BYVAL AS GAppInfo PTR) AS gboolean
  supports_files AS FUNCTION CDECL(BYVAL AS GAppInfo PTR) AS gboolean
  launch_uris AS FUNCTION CDECL(BYVAL AS GAppInfo PTR, BYVAL AS GList PTR, BYVAL AS GAppLaunchContext PTR, BYVAL AS GError PTR PTR) AS gboolean
  should_show AS FUNCTION CDECL(BYVAL AS GAppInfo PTR) AS gboolean
  set_as_default_for_type AS FUNCTION CDECL(BYVAL AS GAppInfo PTR, BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR) AS gboolean
  set_as_default_for_extension AS FUNCTION CDECL(BYVAL AS GAppInfo PTR, BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR) AS gboolean
  add_supports_type AS FUNCTION CDECL(BYVAL AS GAppInfo PTR, BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR) AS gboolean
  can_remove_supports_type AS FUNCTION CDECL(BYVAL AS GAppInfo PTR) AS gboolean
  remove_supports_type AS FUNCTION CDECL(BYVAL AS GAppInfo PTR, BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR) AS gboolean
  can_delete AS FUNCTION CDECL(BYVAL AS GAppInfo PTR) AS gboolean
  do_delete AS FUNCTION CDECL(BYVAL AS GAppInfo PTR) AS gboolean
  get_commandline AS FUNCTION CDECL(BYVAL AS GAppInfo PTR) AS const gchar PTR
  get_display_name AS FUNCTION CDECL(BYVAL AS GAppInfo PTR) AS const gchar PTR
  set_as_last_used_for_type AS FUNCTION CDECL(BYVAL AS GAppInfo PTR, BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR) AS gboolean
  get_supported_types AS FUNCTION CDECL(BYVAL AS GAppInfo PTR) AS const gchar PTR PTR
  launch_uris_async AS SUB CDECL(BYVAL AS GAppInfo PTR, BYVAL AS GList PTR, BYVAL AS GAppLaunchContext PTR, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
  launch_uris_finish AS FUNCTION CDECL(BYVAL AS GAppInfo PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS gboolean
END TYPE
DECLARE FUNCTION g_app_info_monitor_get_type() AS GType
#DEFINE G_TYPE_APP_INFO_MONITOR (g_app_info_monitor_get_type())
#DEFINE G_APP_INFO_MONITOR(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), G_TYPE_APP_INFO_MONITOR, GAppInfoMonitor))
#DEFINE G_APP_INFO_MONITOR_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), G_TYPE_APP_INFO_MONITOR, G))
#DEFINE G_IS_APP_INFO_MONITOR(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), G_TYPE_APP_INFO_MONITOR))
#DEFINE G_IS_CLASS_APP_INFO_MONITOR(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), G_TYPE_APP_INFO_MONITOR))
#DEFINE G_APP_INFO_MONITOR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), G_TYPE_APP_INFO_MONITOR, G))
DECLARE FUNCTION g_app_info_monitor_get() AS GAppInfoMonitor PTR
TYPE _GAppLaunchContext
  AS GObject parent_instance
  AS GAppLaunchContextPrivate PTR priv
END TYPE
DECLARE FUNCTION g_app_launch_context_get_type() AS GType
#DEFINE G_TYPE_APP_LAUNCH_CONTEXT (g_app_launch_context_get_type())
#DEFINE G_APP_LAUNCH_CONTEXT(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), G_TYPE_APP_LAUNCH_CONTEXT, GAppLaunchContext))
#DEFINE G_APP_LAUNCH_CONTEXT_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), G_TYPE_APP_LAUNCH_CONTEXT, GAppLaunchContextClass))
#DEFINE G_IS_APP_LAUNCH_CONTEXT(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), G_TYPE_APP_LAUNCH_CONTEXT))
#DEFINE G_IS_CLASS_APP_LAUNCH_CONTEXT(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), G_TYPE_APP_LAUNCH_CONTEXT))
#DEFINE G_APP_LAUNCH_CONTEXT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), G_TYPE_APP_LAUNCH_CONTEXT, GAppLaunchContextClass))
DECLARE FUNCTION g_app_launch_context_new() AS GAppLaunchContext PTR
DECLARE FUNCTION g_app_launch_context_get_display(BYVAL AS GAppLaunchContext PTR, BYVAL AS GAppInfo PTR, BYVAL AS GList PTR) AS zstring /'gchar'/ PTR
DECLARE FUNCTION g_app_launch_context_get_environment(BYVAL AS GAppLaunchContext PTR) AS zstring /'gchar'/ PTR PTR
DECLARE FUNCTION g_app_launch_context_get_startup_notify_id(BYVAL AS GAppLaunchContext PTR, BYVAL AS GAppInfo PTR, BYVAL AS GList PTR) AS zstring /'gchar'/ PTR
DECLARE SUB g_app_launch_context_launch_failed(BYVAL AS GAppLaunchContext PTR, BYVAL AS const gchar PTR)
DECLARE SUB g_app_launch_context_setenv(BYVAL AS GAppLaunchContext PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR)
DECLARE SUB g_app_launch_context_unsetenv(BYVAL AS GAppLaunchContext PTR, BYVAL AS const gchar PTR)
TYPE _GAppLaunchContextClass
  AS GObjectClass parent_class
  get_display AS FUNCTION CDECL(BYVAL AS GAppLaunchContext PTR, BYVAL AS GAppInfo PTR, BYVAL AS GList PTR) AS zstring /'gchar'/ PTR
  get_startup_notify_id AS FUNCTION CDECL(BYVAL AS GAppLaunchContext PTR, BYVAL AS GAppInfo PTR, BYVAL AS GList PTR) AS zstring /'gchar'/ PTR
  launch_failed AS SUB CDECL(BYVAL AS GAppLaunchContext PTR, BYVAL AS const gchar PTR)
  launched AS SUB CDECL(BYVAL AS GAppLaunchContext PTR, BYVAL AS GAppInfo PTR, BYVAL AS GVariant PTR)
  _g_reserved1 AS SUB CDECL()
  _g_reserved2 AS SUB CDECL()
  _g_reserved3 AS SUB CDECL()
  _g_reserved4 AS SUB CDECL()
END TYPE
TYPE _GApplication
  AS GObject parent_instance
  AS GApplicationPrivate PTR priv
END TYPE
DECLARE FUNCTION g_application_get_type() AS GType
#DEFINE G_TYPE_APPLICATION (g_application_get_type())
#DEFINE G_APPLICATION(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), G_TYPE_APPLICATION, GApplication))
#DEFINE G_APPLICATION_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), G_TYPE_APPLICATION, GApplicationClass))
#DEFINE G_IS_APPLICATION(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), G_TYPE_APPLICATION))
#DEFINE G_IS_CLASS_APPLICATION(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), G_TYPE_APPLICATION))
#DEFINE G_APPLICATION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), G_TYPE_APPLICATION, GApplicationClass))
DECLARE FUNCTION g_application_new(BYVAL AS const gchar PTR, BYVAL AS GApplicationFlags) AS GApplication PTR
DECLARE FUNCTION g_application_get_default() AS GApplication PTR
DECLARE FUNCTION g_application_id_is_valid(BYVAL AS const gchar PTR) AS gboolean
DECLARE SUB g_application_activate(BYVAL AS GApplication PTR)
DECLARE SUB g_application_add_main_option(BYVAL AS GApplication PTR, BYVAL AS const gchar PTR, BYVAL AS gint8 /'gchar'/, BYVAL AS GOptionFlags, BYVAL AS GOptionArg, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR)
DECLARE SUB g_application_add_main_option_entries(BYVAL AS GApplication PTR, BYVAL AS const GOptionEntry PTR)
DECLARE SUB g_application_add_option_group(BYVAL AS GApplication PTR, BYVAL AS GOptionGroup PTR)
DECLARE SUB g_application_bind_busy_property(BYVAL AS GApplication PTR, BYVAL AS gpointer, BYVAL AS const gchar PTR)
DECLARE FUNCTION g_application_get_application_id(BYVAL AS GApplication PTR) AS const gchar PTR
DECLARE FUNCTION g_application_get_dbus_connection(BYVAL AS GApplication PTR) AS GDBusConnection PTR
DECLARE FUNCTION g_application_get_dbus_object_path(BYVAL AS GApplication PTR) AS const gchar PTR
DECLARE FUNCTION g_application_get_flags(BYVAL AS GApplication PTR) AS GApplicationFlags
DECLARE FUNCTION g_application_get_inactivity_timeout(BYVAL AS GApplication PTR) AS guint
DECLARE FUNCTION g_application_get_is_busy(BYVAL AS GApplication PTR) AS gboolean
DECLARE FUNCTION g_application_get_is_registered(BYVAL AS GApplication PTR) AS gboolean
DECLARE FUNCTION g_application_get_is_remote(BYVAL AS GApplication PTR) AS gboolean
DECLARE FUNCTION g_application_get_resource_base_path(BYVAL AS GApplication PTR) AS const gchar PTR
DECLARE SUB g_application_hold(BYVAL AS GApplication PTR)
DECLARE SUB g_application_mark_busy(BYVAL AS GApplication PTR)
DECLARE SUB g_application_open(BYVAL AS GApplication PTR, BYVAL AS GFile PTR PTR, BYVAL AS gint, BYVAL AS const gchar PTR)
DECLARE SUB g_application_quit(BYVAL AS GApplication PTR)
DECLARE FUNCTION g_application_register(BYVAL AS GApplication PTR, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE SUB g_application_release(BYVAL AS GApplication PTR)
DECLARE FUNCTION g_application_run(BYVAL AS GApplication PTR, BYVAL AS gint /'int'/, BYVAL AS zstring /'gchar'/ PTR PTR) AS gint /'int'/
DECLARE SUB g_application_send_notification(BYVAL AS GApplication PTR, BYVAL AS const gchar PTR, BYVAL AS GNotification PTR)
DECLARE SUB g_application_set_action_group(BYVAL AS GApplication PTR, BYVAL AS GActionGroup PTR)
DECLARE SUB g_application_set_application_id(BYVAL AS GApplication PTR, BYVAL AS const gchar PTR)
DECLARE SUB g_application_set_default(BYVAL AS GApplication PTR)
DECLARE SUB g_application_set_flags(BYVAL AS GApplication PTR, BYVAL AS GApplicationFlags)
DECLARE SUB g_application_set_inactivity_timeout(BYVAL AS GApplication PTR, BYVAL AS guint)
DECLARE SUB g_application_set_option_context_description(BYVAL AS GApplication PTR, BYVAL AS const gchar PTR)
DECLARE SUB g_application_set_option_context_parameter_string(BYVAL AS GApplication PTR, BYVAL AS const gchar PTR)
DECLARE SUB g_application_set_option_context_summary(BYVAL AS GApplication PTR, BYVAL AS const gchar PTR)
DECLARE SUB g_application_set_resource_base_path(BYVAL AS GApplication PTR, BYVAL AS const gchar PTR)
DECLARE SUB g_application_unbind_busy_property(BYVAL AS GApplication PTR, BYVAL AS gpointer, BYVAL AS const gchar PTR)
DECLARE SUB g_application_unmark_busy(BYVAL AS GApplication PTR)
DECLARE SUB g_application_withdraw_notification(BYVAL AS GApplication PTR, BYVAL AS const gchar PTR)
TYPE _GApplicationClass
  AS GObjectClass parent_class
  startup AS SUB CDECL(BYVAL AS GApplication PTR)
  activate AS SUB CDECL(BYVAL AS GApplication PTR)
  open AS SUB CDECL(BYVAL AS GApplication PTR, BYVAL AS GFile PTR PTR, BYVAL AS gint, BYVAL AS const gchar PTR)
  command_line AS FUNCTION CDECL(BYVAL AS GApplication PTR, BYVAL AS GApplicationCommandLine PTR) AS gint /'int'/
  local_command_line AS FUNCTION CDECL(BYVAL AS GApplication PTR, BYVAL AS gchar PTR PTR PTR, BYVAL AS gint /'int'/ PTR) AS gboolean
  before_emit AS SUB CDECL(BYVAL AS GApplication PTR, BYVAL AS GVariant PTR)
  after_emit AS SUB CDECL(BYVAL AS GApplication PTR, BYVAL AS GVariant PTR)
  add_platform_data AS SUB CDECL(BYVAL AS GApplication PTR, BYVAL AS GVariantBuilder PTR)
  quit_mainloop AS SUB CDECL(BYVAL AS GApplication PTR)
  run_mainloop AS SUB CDECL(BYVAL AS GApplication PTR)
  shutdown AS SUB CDECL(BYVAL AS GApplication PTR)
  dbus_register AS FUNCTION CDECL(BYVAL AS GApplication PTR, BYVAL AS GDBusConnection PTR, BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR) AS gboolean
  dbus_unregister AS SUB CDECL(BYVAL AS GApplication PTR, BYVAL AS GDBusConnection PTR, BYVAL AS const gchar PTR)
  handle_local_options AS FUNCTION CDECL(BYVAL AS GApplication PTR, BYVAL AS GVariantDict PTR) AS gint
  name_lost AS FUNCTION CDECL(BYVAL AS GApplication PTR) AS gboolean
  AS gpointer padding(6)
END TYPE
TYPE _GApplicationCommandLine
  AS GObject parent_instance
  AS GApplicationCommandLinePrivate PTR priv
END TYPE
DECLARE FUNCTION g_application_command_line_get_type() AS GType
#DEFINE G_TYPE_APPLICATION_COMMAND_LINE (g_application_command_line_get_type())
#DEFINE G_APPLICATION_COMMAND_LINE(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), G_TYPE_APPLICATION_COMMAND_LINE, GApplicationCommandLine))
#DEFINE G_APPLICATION_COMMAND_LINE_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), G_TYPE_APPLICATION_COMMAND_LINE, GApplicationCommandLineClass))
#DEFINE G_IS_APPLICATION_COMMAND_LINE(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), G_TYPE_APPLICATION_COMMAND_LINE))
#DEFINE G_IS_CLASS_APPLICATION_COMMAND_LINE(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), G_TYPE_APPLICATION_COMMAND_LINE))
#DEFINE G_APPLICATION_COMMAND_LINE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), G_TYPE_APPLICATION_COMMAND_LINE, GApplicationCommandLineClass))
DECLARE FUNCTION g_application_command_line_create_file_for_arg(BYVAL AS GApplicationCommandLine PTR, BYVAL AS const gchar PTR) AS GFile PTR
DECLARE FUNCTION g_application_command_line_get_arguments(BYVAL AS GApplicationCommandLine PTR, BYVAL AS gint /'int'/ PTR) AS gchar PTR PTR
DECLARE FUNCTION g_application_command_line_get_cwd(BYVAL AS GApplicationCommandLine PTR) AS const gchar PTR
DECLARE FUNCTION g_application_command_line_get_environ(BYVAL AS GApplicationCommandLine PTR) AS const gchar ptr const /'const gchar* const'/ PTR
DECLARE FUNCTION g_application_command_line_get_exit_status(BYVAL AS GApplicationCommandLine PTR) AS gint /'int'/
DECLARE FUNCTION g_application_command_line_get_is_remote(BYVAL AS GApplicationCommandLine PTR) AS gboolean
DECLARE FUNCTION g_application_command_line_get_options_dict(BYVAL AS GApplicationCommandLine PTR) AS GVariantDict PTR
DECLARE FUNCTION g_application_command_line_get_platform_data(BYVAL AS GApplicationCommandLine PTR) AS GVariant PTR
DECLARE FUNCTION g_application_command_line_get_stdin(BYVAL AS GApplicationCommandLine PTR) AS GInputStream PTR
DECLARE FUNCTION g_application_command_line_getenv(BYVAL AS GApplicationCommandLine PTR, BYVAL AS const gchar PTR) AS const gchar PTR
DECLARE SUB g_application_command_line_print(BYVAL AS GApplicationCommandLine PTR, BYVAL AS const gchar PTR, ...)
DECLARE SUB g_application_command_line_printerr(BYVAL AS GApplicationCommandLine PTR, BYVAL AS const gchar PTR, ...)
DECLARE SUB g_application_command_line_set_exit_status(BYVAL AS GApplicationCommandLine PTR, BYVAL AS gint /'int'/)
TYPE _GApplicationCommandLineClass
  AS GObjectClass parent_class
  print_literal AS SUB CDECL(BYVAL AS GApplicationCommandLine PTR, BYVAL AS const gchar PTR)
  printerr_literal AS SUB CDECL(BYVAL AS GApplicationCommandLine PTR, BYVAL AS const gchar PTR)
  get_stdin AS FUNCTION CDECL(BYVAL AS GApplicationCommandLine PTR) AS GInputStream PTR
  AS gpointer padding(10)
END TYPE
DECLARE FUNCTION g_async_initable_get_type() AS GType
#DEFINE G_TYPE_ASYNC_INITABLE (g_async_initable_get_type())
#DEFINE G_ASYNC_INITABLE(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), G_TYPE_ASYNC_INITABLE, GAsyncInitable))
#DEFINE G_ASYNC_INITABLE_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), G_TYPE_ASYNC_INITABLE, GAsyncInitableIface))
#DEFINE G_IS_ASYNC_INITABLE(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), G_TYPE_ASYNC_INITABLE))
#DEFINE G_ASYNC_INITABLE_GET_IFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE((obj), G_TYPE_ASYNC_INITABLE, GAsyncInitableIface))
DECLARE SUB g_async_initable_new_async(BYVAL AS GType, BYVAL AS gint /'int'/, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer, BYVAL AS const gchar PTR, ...)
DECLARE SUB g_async_initable_new_valist_async(BYVAL AS GType, BYVAL AS const gchar PTR, BYVAL AS va_list, BYVAL AS gint /'int'/, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
DECLARE SUB g_async_initable_newv_async(BYVAL AS GType, BYVAL AS guint, BYVAL AS GParameter PTR, BYVAL AS gint /'int'/, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
DECLARE SUB g_async_initable_init_async(BYVAL AS GAsyncInitable PTR, BYVAL AS gint /'int'/, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
DECLARE FUNCTION g_async_initable_init_finish(BYVAL AS GAsyncInitable PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION g_async_initable_new_finish(BYVAL AS GAsyncInitable PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS GObject PTR
TYPE _GAsyncInitableIface
  AS GTypeInterface g_iface
  init_async AS SUB CDECL(BYVAL AS GAsyncInitable PTR, BYVAL AS gint /'int'/, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
  init_finish AS FUNCTION CDECL(BYVAL AS GAsyncInitable PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS gboolean
END TYPE
DECLARE FUNCTION g_async_result_get_type() AS GType
#DEFINE G_TYPE_ASYNC_RESULT (g_async_result_get_type())
#DEFINE G_ASYNC_RESULT(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), G_TYPE_ASYNC_RESULT, GAsyncResult))
#DEFINE G_ASYNC_RESULT_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), G_TYPE_ASYNC_RESULT, GAsyncResultIface))
#DEFINE G_IS_ASYNC_RESULT(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), G_TYPE_ASYNC_RESULT))
#DEFINE G_ASYNC_RESULT_GET_IFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE((obj), G_TYPE_ASYNC_RESULT, GAsyncResultIface))
DECLARE FUNCTION g_async_result_get_source_object(BYVAL AS GAsyncResult PTR) AS GObject PTR
DECLARE FUNCTION g_async_result_get_user_data(BYVAL AS GAsyncResult PTR) AS gpointer
DECLARE FUNCTION g_async_result_is_tagged(BYVAL AS GAsyncResult PTR, BYVAL AS gpointer) AS gboolean
DECLARE FUNCTION g_async_result_legacy_propagate_error(BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS gboolean
TYPE _GAsyncResultIface
  AS GTypeInterface g_iface
  get_user_data AS FUNCTION CDECL(BYVAL AS GAsyncResult PTR) AS gpointer
  get_source_object AS FUNCTION CDECL(BYVAL AS GAsyncResult PTR) AS GObject PTR
  is_tagged AS FUNCTION CDECL(BYVAL AS GAsyncResult PTR, BYVAL AS gpointer) AS gboolean
END TYPE
TYPE _GBufferedInputStream
  AS GFilterInputStream parent_instance
  AS GBufferedInputStreamPrivate PTR priv
END TYPE
DECLARE FUNCTION g_buffered_input_stream_get_type() AS GType
#DEFINE G_TYPE_BUFFERED_INPUT_STREAM (g_buffered_input_stream_get_type())
#DEFINE G_BUFFERED_INPUT_STREAM(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), G_TYPE_BUFFERED_INPUT_STREAM, GBufferedInputStream))
#DEFINE G_BUFFERED_INPUT_STREAM_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), G_TYPE_BUFFERED_INPUT_STREAM, GBufferedInputStreamClass))
#DEFINE G_IS_BUFFERED_INPUT_STREAM(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), G_TYPE_BUFFERED_INPUT_STREAM))
#DEFINE G_IS_CLASS_BUFFERED_INPUT_STREAM(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), G_TYPE_BUFFERED_INPUT_STREAM))
#DEFINE G_BUFFERED_INPUT_STREAM_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), G_TYPE_BUFFERED_INPUT_STREAM, GBufferedInputStreamClass))
DECLARE FUNCTION g_buffered_input_stream_new(BYVAL AS GInputStream PTR) AS GInputStream PTR
DECLARE FUNCTION g_buffered_input_stream_new_sized(BYVAL AS GInputStream PTR, BYVAL AS gsize) AS GInputStream PTR
DECLARE FUNCTION g_buffered_input_stream_fill(BYVAL AS GBufferedInputStream PTR, BYVAL AS gssize, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS gssize
DECLARE SUB g_buffered_input_stream_fill_async(BYVAL AS GBufferedInputStream PTR, BYVAL AS gssize, BYVAL AS gint /'int'/, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
DECLARE FUNCTION g_buffered_input_stream_fill_finish(BYVAL AS GBufferedInputStream PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS gssize
DECLARE FUNCTION g_buffered_input_stream_get_available(BYVAL AS GBufferedInputStream PTR) AS gsize
DECLARE FUNCTION g_buffered_input_stream_get_buffer_size(BYVAL AS GBufferedInputStream PTR) AS gsize
DECLARE FUNCTION g_buffered_input_stream_peek(BYVAL AS GBufferedInputStream PTR, BYVAL AS any ptr /'void'/ PTR, BYVAL AS gsize, BYVAL AS gsize) AS gsize
DECLARE FUNCTION g_buffered_input_stream_peek_buffer(BYVAL AS GBufferedInputStream PTR, BYVAL AS gsize PTR) AS any ptr /'void'/ PTR
DECLARE FUNCTION g_buffered_input_stream_read_byte(BYVAL AS GBufferedInputStream PTR, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS gint /'int'/
DECLARE SUB g_buffered_input_stream_set_buffer_size(BYVAL AS GBufferedInputStream PTR, BYVAL AS gsize)
TYPE _GBufferedInputStreamClass
  AS GFilterInputStreamClass parent_class
  fill AS FUNCTION CDECL(BYVAL AS GBufferedInputStream PTR, BYVAL AS gssize, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS gssize
  fill_async AS SUB CDECL(BYVAL AS GBufferedInputStream PTR, BYVAL AS gssize, BYVAL AS gint /'int'/, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
  fill_finish AS FUNCTION CDECL(BYVAL AS GBufferedInputStream PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS gssize
  _g_reserved1 AS SUB CDECL()
  _g_reserved2 AS SUB CDECL()
  _g_reserved3 AS SUB CDECL()
  _g_reserved4 AS SUB CDECL()
  _g_reserved5 AS SUB CDECL()
END TYPE
TYPE _GBufferedOutputStream
  AS GFilterOutputStream parent_instance
  AS GBufferedOutputStreamPrivate PTR priv
END TYPE
DECLARE FUNCTION g_buffered_output_stream_get_type() AS GType
#DEFINE G_TYPE_BUFFERED_OUTPUT_STREAM (g_buffered_output_stream_get_type())
#DEFINE G_BUFFERED_OUTPUT_STREAM(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), G_TYPE_BUFFERED_OUTPUT_STREAM, GBufferedOutputStream))
#DEFINE G_BUFFERED_OUTPUT_STREAM_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), G_TYPE_BUFFERED_OUTPUT_STREAM, GBufferedOutputStreamClass))
#DEFINE G_IS_BUFFERED_OUTPUT_STREAM(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), G_TYPE_BUFFERED_OUTPUT_STREAM))
#DEFINE G_IS_CLASS_BUFFERED_OUTPUT_STREAM(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), G_TYPE_BUFFERED_OUTPUT_STREAM))
#DEFINE G_BUFFERED_OUTPUT_STREAM_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), G_TYPE_BUFFERED_OUTPUT_STREAM, GBufferedOutputStreamClass))
DECLARE FUNCTION g_buffered_output_stream_new(BYVAL AS GOutputStream PTR) AS GOutputStream PTR
DECLARE FUNCTION g_buffered_output_stream_new_sized(BYVAL AS GOutputStream PTR, BYVAL AS gsize) AS GOutputStream PTR
DECLARE FUNCTION g_buffered_output_stream_get_auto_grow(BYVAL AS GBufferedOutputStream PTR) AS gboolean
DECLARE FUNCTION g_buffered_output_stream_get_buffer_size(BYVAL AS GBufferedOutputStream PTR) AS gsize
DECLARE SUB g_buffered_output_stream_set_auto_grow(BYVAL AS GBufferedOutputStream PTR, BYVAL AS gboolean)
DECLARE SUB g_buffered_output_stream_set_buffer_size(BYVAL AS GBufferedOutputStream PTR, BYVAL AS gsize)
TYPE _GBufferedOutputStreamClass
  AS GFilterOutputStreamClass parent_class
  _g_reserved1 AS SUB CDECL()
  _g_reserved2 AS SUB CDECL()
END TYPE
TYPE GBusAcquiredCallback AS SUB CDECL(BYVAL AS GDBusConnection PTR, BYVAL AS const gchar PTR, BYVAL AS gpointer)
TYPE GBusNameAcquiredCallback AS SUB CDECL(BYVAL AS GDBusConnection PTR, BYVAL AS const gchar PTR, BYVAL AS gpointer)
TYPE GBusNameAppearedCallback AS SUB CDECL(BYVAL AS GDBusConnection PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS gpointer)
TYPE GBusNameLostCallback AS SUB CDECL(BYVAL AS GDBusConnection PTR, BYVAL AS const gchar PTR, BYVAL AS gpointer)
TYPE GBusNameVanishedCallback AS SUB CDECL(BYVAL AS GDBusConnection PTR, BYVAL AS const gchar PTR, BYVAL AS gpointer)
DECLARE FUNCTION g_bus_type_get_type() AS GType
#DEFINE G_TYPE_BUS_TYPE (g_bus_type_get_type())
DECLARE FUNCTION g_bytes_icon_get_type() AS GType
#DEFINE G_TYPE_BYTES_ICON (g_bytes_icon_get_type())
#DEFINE G_BYTES_ICON(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), G_TYPE_BYTES_ICON, GBytesIcon))
#DEFINE G_BYTES_ICON_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), G_TYPE_BYTES_ICON, G))
#DEFINE G_IS_BYTES_ICON(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), G_TYPE_BYTES_ICON))
#DEFINE G_IS_CLASS_BYTES_ICON(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), G_TYPE_BYTES_ICON))
#DEFINE G_BYTES_ICON_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), G_TYPE_BYTES_ICON, G))
DECLARE FUNCTION g_bytes_icon_new(BYVAL AS GBytes PTR) AS GIcon PTR
DECLARE FUNCTION g_bytes_icon_get_bytes(BYVAL AS GBytesIcon PTR) AS GBytes PTR
TYPE _GCancellable
  AS GObject parent_instance
  AS GCancellablePrivate PTR priv
END TYPE
DECLARE FUNCTION g_cancellable_get_type() AS GType
#DEFINE G_TYPE_CANCELLABLE (g_cancellable_get_type())
#DEFINE G_CANCELLABLE(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), G_TYPE_CANCELLABLE, GCancellable))
#DEFINE G_CANCELLABLE_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), G_TYPE_CANCELLABLE, GCancellableClass))
#DEFINE G_IS_CANCELLABLE(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), G_TYPE_CANCELLABLE))
#DEFINE G_IS_CLASS_CANCELLABLE(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), G_TYPE_CANCELLABLE))
#DEFINE G_CANCELLABLE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), G_TYPE_CANCELLABLE, GCancellableClass))
DECLARE FUNCTION g_cancellable_new() AS GCancellable PTR
DECLARE FUNCTION g_cancellable_get_current() AS GCancellable PTR
DECLARE SUB g_cancellable_cancel(BYVAL AS GCancellable PTR)
DECLARE FUNCTION g_cancellable_connect(BYVAL AS GCancellable PTR, BYVAL AS GCallback, BYVAL AS gpointer, BYVAL AS GDestroyNotify) AS gulong
DECLARE SUB g_cancellable_disconnect(BYVAL AS GCancellable PTR, BYVAL AS gulong)
DECLARE FUNCTION g_cancellable_get_fd(BYVAL AS GCancellable PTR) AS gint /'int'/
DECLARE FUNCTION g_cancellable_is_cancelled(BYVAL AS GCancellable PTR) AS gboolean
DECLARE FUNCTION g_cancellable_make_pollfd(BYVAL AS GCancellable PTR, BYVAL AS GPollFD PTR) AS gboolean
DECLARE SUB g_cancellable_pop_current(BYVAL AS GCancellable PTR)
DECLARE SUB g_cancellable_push_current(BYVAL AS GCancellable PTR)
DECLARE SUB g_cancellable_release_fd(BYVAL AS GCancellable PTR)
DECLARE SUB g_cancellable_reset(BYVAL AS GCancellable PTR)
DECLARE FUNCTION g_cancellable_set_error_if_cancelled(BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION g_cancellable_source_new(BYVAL AS GCancellable PTR) AS GSource PTR
TYPE _GCancellableClass
  AS GObjectClass parent_class
  cancelled AS SUB CDECL(BYVAL AS GCancellable PTR)
  _g_reserved1 AS SUB CDECL()
  _g_reserved2 AS SUB CDECL()
  _g_reserved3 AS SUB CDECL()
  _g_reserved4 AS SUB CDECL()
  _g_reserved5 AS SUB CDECL()
END TYPE
TYPE GCancellableSourceFunc AS FUNCTION CDECL(BYVAL AS GCancellable PTR, BYVAL AS gpointer) AS gboolean
DECLARE FUNCTION g_charset_converter_get_type() AS GType
#DEFINE G_TYPE_CHARSET_CONVERTER (g_charset_converter_get_type())
#DEFINE G_CHARSET_CONVERTER(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), G_TYPE_CHARSET_CONVERTER, GCharsetConverter))
#DEFINE G_CHARSET_CONVERTER_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), G_TYPE_CHARSET_CONVERTER, GCharsetConverterClass))
#DEFINE G_IS_CHARSET_CONVERTER(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), G_TYPE_CHARSET_CONVERTER))
#DEFINE G_IS_CLASS_CHARSET_CONVERTER(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), G_TYPE_CHARSET_CONVERTER))
#DEFINE G_CHARSET_CONVERTER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), G_TYPE_CHARSET_CONVERTER, GCharsetConverterClass))
DECLARE FUNCTION g_charset_converter_new(BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR) AS GCharsetConverter PTR
DECLARE FUNCTION g_charset_converter_get_num_fallbacks(BYVAL AS GCharsetConverter PTR) AS guint
DECLARE FUNCTION g_charset_converter_get_use_fallback(BYVAL AS GCharsetConverter PTR) AS gboolean
DECLARE SUB g_charset_converter_set_use_fallback(BYVAL AS GCharsetConverter PTR, BYVAL AS gboolean)
TYPE _GCharsetConverterClass
  AS GObjectClass parent_class
END TYPE
DECLARE FUNCTION g_converter_get_type() AS GType
#DEFINE G_TYPE_CONVERTER (g_converter_get_type())
#DEFINE G_CONVERTER(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), G_TYPE_CONVERTER, GConverter))
#DEFINE G_CONVERTER_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), G_TYPE_CONVERTER, GConverterIface))
#DEFINE G_IS_CONVERTER(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), G_TYPE_CONVERTER))
#DEFINE G_CONVERTER_GET_IFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE((obj), G_TYPE_CONVERTER, GConverterIface))
DECLARE FUNCTION g_converter_convert(BYVAL AS GConverter PTR, BYVAL AS any ptr /'void'/ PTR, BYVAL AS gsize, BYVAL AS any ptr /'void'/ PTR, BYVAL AS gsize, BYVAL AS GConverterFlags, BYVAL AS gsize PTR, BYVAL AS gsize PTR, BYVAL AS GError PTR PTR) AS GConverterResult
DECLARE SUB g_converter_reset(BYVAL AS GConverter PTR)
TYPE _GConverterIface
  AS GTypeInterface g_iface
  convert AS FUNCTION CDECL(BYVAL AS GConverter PTR, BYVAL AS any ptr /'void'/ PTR, BYVAL AS gsize, BYVAL AS any ptr /'void'/ PTR, BYVAL AS gsize, BYVAL AS GConverterFlags, BYVAL AS gsize PTR, BYVAL AS gsize PTR, BYVAL AS GError PTR PTR) AS GConverterResult
  reset AS SUB CDECL(BYVAL AS GConverter PTR)
END TYPE
TYPE _GConverterInputStream
  AS GFilterInputStream parent_instance
  AS GConverterInputStreamPrivate PTR priv
END TYPE
DECLARE FUNCTION g_converter_input_stream_get_type() AS GType
#DEFINE G_TYPE_CONVERTER_INPUT_STREAM (g_converter_input_stream_get_type())
#DEFINE G_CONVERTER_INPUT_STREAM(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), G_TYPE_CONVERTER_INPUT_STREAM, GConverterInputStream))
#DEFINE G_CONVERTER_INPUT_STREAM_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), G_TYPE_CONVERTER_INPUT_STREAM, GConverterInputStreamClass))
#DEFINE G_IS_CONVERTER_INPUT_STREAM(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), G_TYPE_CONVERTER_INPUT_STREAM))
#DEFINE G_IS_CLASS_CONVERTER_INPUT_STREAM(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), G_TYPE_CONVERTER_INPUT_STREAM))
#DEFINE G_CONVERTER_INPUT_STREAM_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), G_TYPE_CONVERTER_INPUT_STREAM, GConverterInputStreamClass))
DECLARE FUNCTION g_converter_input_stream_new(BYVAL AS GInputStream PTR, BYVAL AS GConverter PTR) AS GInputStream PTR
DECLARE FUNCTION g_converter_input_stream_get_converter(BYVAL AS GConverterInputStream PTR) AS GConverter PTR
TYPE _GConverterInputStreamClass
  AS GFilterInputStreamClass parent_class
  _g_reserved1 AS SUB CDECL()
  _g_reserved2 AS SUB CDECL()
  _g_reserved3 AS SUB CDECL()
  _g_reserved4 AS SUB CDECL()
  _g_reserved5 AS SUB CDECL()
END TYPE
TYPE _GConverterOutputStream
  AS GFilterOutputStream parent_instance
  AS GConverterOutputStreamPrivate PTR priv
END TYPE
DECLARE FUNCTION g_converter_output_stream_get_type() AS GType
#DEFINE G_TYPE_CONVERTER_OUTPUT_STREAM (g_converter_output_stream_get_type())
#DEFINE G_CONVERTER_OUTPUT_STREAM(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), G_TYPE_CONVERTER_OUTPUT_STREAM, GConverterOutputStream))
#DEFINE G_CONVERTER_OUTPUT_STREAM_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), G_TYPE_CONVERTER_OUTPUT_STREAM, GConverterOutputStreamClass))
#DEFINE G_IS_CONVERTER_OUTPUT_STREAM(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), G_TYPE_CONVERTER_OUTPUT_STREAM))
#DEFINE G_IS_CLASS_CONVERTER_OUTPUT_STREAM(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), G_TYPE_CONVERTER_OUTPUT_STREAM))
#DEFINE G_CONVERTER_OUTPUT_STREAM_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), G_TYPE_CONVERTER_OUTPUT_STREAM, GConverterOutputStreamClass))
DECLARE FUNCTION g_converter_output_stream_new(BYVAL AS GOutputStream PTR, BYVAL AS GConverter PTR) AS GOutputStream PTR
DECLARE FUNCTION g_converter_output_stream_get_converter(BYVAL AS GConverterOutputStream PTR) AS GConverter PTR
TYPE _GConverterOutputStreamClass
  AS GFilterOutputStreamClass parent_class
  _g_reserved1 AS SUB CDECL()
  _g_reserved2 AS SUB CDECL()
  _g_reserved3 AS SUB CDECL()
  _g_reserved4 AS SUB CDECL()
  _g_reserved5 AS SUB CDECL()
END TYPE
DECLARE FUNCTION g_converter_result_get_type() AS GType
#DEFINE G_TYPE_CONVERTER_RESULT (g_converter_result_get_type())
DECLARE FUNCTION g_credentials_get_type() AS GType
#DEFINE G_TYPE_CREDENTIALS (g_credentials_get_type())
#DEFINE G_CREDENTIALS(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), G_TYPE_CREDENTIALS, GCredentials))
#DEFINE G_CREDENTIALS_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), G_TYPE_CREDENTIALS, GCredentialsClass))
#DEFINE G_IS_CREDENTIALS(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), G_TYPE_CREDENTIALS))
#DEFINE G_IS_CLASS_CREDENTIALS(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), G_TYPE_CREDENTIALS))
#DEFINE G_CREDENTIALS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), G_TYPE_CREDENTIALS, GCredentialsClass))
DECLARE FUNCTION g_credentials_new() AS GCredentials PTR
DECLARE FUNCTION g_credentials_get_native(BYVAL AS GCredentials PTR, BYVAL AS GCredentialsType) AS gpointer
DECLARE FUNCTION g_credentials_get_unix_pid(BYVAL AS GCredentials PTR, BYVAL AS GError PTR PTR) AS gint32 /'pid_t'/
DECLARE FUNCTION g_credentials_get_unix_user(BYVAL AS GCredentials PTR, BYVAL AS GError PTR PTR) AS gint32 /'uid_t'/
DECLARE FUNCTION g_credentials_is_same_user(BYVAL AS GCredentials PTR, BYVAL AS GCredentials PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE SUB g_credentials_set_native(BYVAL AS GCredentials PTR, BYVAL AS GCredentialsType, BYVAL AS gpointer)
DECLARE FUNCTION g_credentials_set_unix_user(BYVAL AS GCredentials PTR, BYVAL AS gint32 /'uid_t'/, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION g_credentials_to_string(BYVAL AS GCredentials PTR) AS gchar PTR
DECLARE FUNCTION g_credentials_type_get_type() AS GType
#DEFINE G_TYPE_CREDENTIALS_TYPE (g_credentials_type_get_type())
DECLARE FUNCTION g_dbus_action_group_get_type() AS GType
#DEFINE G_TYPE_DBUS_ACTION_GROUP (g_dbus_action_group_get_type())
#DEFINE G_DBUS_ACTION_GROUP(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), G_TYPE_DBUS_ACTION_GROUP, GDBusActionGroup))
#DEFINE G_DBUS_ACTION_GROUP_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), G_TYPE_DBUS_ACTION_GROUP, G))
#DEFINE G_IS_DBUS_ACTION_GROUP(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), G_TYPE_DBUS_ACTION_GROUP))
#DEFINE G_IS_CLASS_DBUS_ACTION_GROUP(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), G_TYPE_DBUS_ACTION_GROUP))
#DEFINE G_DBUS_ACTION_GROUP_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), G_TYPE_DBUS_ACTION_GROUP, G))
DECLARE FUNCTION g_dbus_action_group_get(BYVAL AS GDBusConnection PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR) AS GDBusActionGroup PTR
TYPE _GDBusAnnotationInfo
  AS gint ref_count
  AS gchar PTR key
  AS gchar PTR value
  AS GDBusAnnotationInfo PTR annotations
END TYPE
DECLARE FUNCTION g_dbus_annotation_info_ref(BYVAL AS GDBusAnnotationInfo PTR) AS GDBusAnnotationInfo PTR
DECLARE SUB g_dbus_annotation_info_unref(BYVAL AS GDBusAnnotationInfo PTR)
DECLARE FUNCTION g_dbus_annotation_info_lookup(BYVAL AS GDBusAnnotationInfo PTR PTR, BYVAL AS const gchar PTR) AS const gchar PTR
TYPE _GDBusArgInfo
  AS gint ref_count
  AS gchar PTR name
  AS gchar PTR signature
  AS GDBusAnnotationInfo PTR annotations
END TYPE
DECLARE FUNCTION g_dbus_arg_info_ref(BYVAL AS GDBusArgInfo PTR) AS GDBusArgInfo PTR
DECLARE SUB g_dbus_arg_info_unref(BYVAL AS GDBusArgInfo PTR)
DECLARE FUNCTION g_dbus_auth_observer_get_type() AS GType
#DEFINE G_TYPE_DBUS_AUTH_OBSERVER (g_dbus_auth_observer_get_type())
#DEFINE G_DBUS_AUTH_OBSERVER(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), G_TYPE_DBUS_AUTH_OBSERVER, GDBusAuthObserver))
#DEFINE G_DBUS_AUTH_OBSERVER_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), G_TYPE_DBUS_AUTH_OBSERVER, G))
#DEFINE G_IS_DBUS_AUTH_OBSERVER(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), G_TYPE_DBUS_AUTH_OBSERVER))
#DEFINE G_IS_CLASS_DBUS_AUTH_OBSERVER(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), G_TYPE_DBUS_AUTH_OBSERVER))
#DEFINE G_DBUS_AUTH_OBSERVER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), G_TYPE_DBUS_AUTH_OBSERVER, G))
DECLARE FUNCTION g_dbus_auth_observer_new() AS GDBusAuthObserver PTR
DECLARE FUNCTION g_dbus_auth_observer_allow_mechanism(BYVAL AS GDBusAuthObserver PTR, BYVAL AS const gchar PTR) AS gboolean
DECLARE FUNCTION g_dbus_auth_observer_authorize_authenticated_peer(BYVAL AS GDBusAuthObserver PTR, BYVAL AS GIOStream PTR, BYVAL AS GCredentials PTR) AS gboolean
DECLARE FUNCTION g_dbus_connection_get_type() AS GType
#DEFINE G_TYPE_DBUS_CONNECTION (g_dbus_connection_get_type())
#DEFINE G_DBUS_CONNECTION(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), G_TYPE_DBUS_CONNECTION, GDBusConnection))
#DEFINE G_DBUS_CONNECTION_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), G_TYPE_DBUS_CONNECTION, G))
#DEFINE G_IS_DBUS_CONNECTION(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), G_TYPE_DBUS_CONNECTION))
#DEFINE G_IS_CLASS_DBUS_CONNECTION(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), G_TYPE_DBUS_CONNECTION))
#DEFINE G_DBUS_CONNECTION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), G_TYPE_DBUS_CONNECTION, G))
DECLARE FUNCTION g_dbus_connection_new_finish(BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS GDBusConnection PTR
DECLARE FUNCTION g_dbus_connection_new_for_address_finish(BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS GDBusConnection PTR
DECLARE FUNCTION g_dbus_connection_new_for_address_sync(BYVAL AS const gchar PTR, BYVAL AS GDBusConnectionFlags, BYVAL AS GDBusAuthObserver PTR, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS GDBusConnection PTR
DECLARE FUNCTION g_dbus_connection_new_sync(BYVAL AS GIOStream PTR, BYVAL AS const gchar PTR, BYVAL AS GDBusConnectionFlags, BYVAL AS GDBusAuthObserver PTR, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS GDBusConnection PTR
DECLARE SUB g_dbus_connection_new(BYVAL AS GIOStream PTR, BYVAL AS const gchar PTR, BYVAL AS GDBusConnectionFlags, BYVAL AS GDBusAuthObserver PTR, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
DECLARE SUB g_dbus_connection_new_for_address(BYVAL AS const gchar PTR, BYVAL AS GDBusConnectionFlags, BYVAL AS GDBusAuthObserver PTR, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
DECLARE FUNCTION g_dbus_connection_add_filter(BYVAL AS GDBusConnection PTR, BYVAL AS GDBusMessageFilterFunction, BYVAL AS gpointer, BYVAL AS GDestroyNotify) AS guint
DECLARE SUB g_dbus_connection_call(BYVAL AS GDBusConnection PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS GVariant PTR, BYVAL AS const GVariantType PTR, BYVAL AS GDBusCallFlags, BYVAL AS gint, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
DECLARE FUNCTION g_dbus_connection_call_finish(BYVAL AS GDBusConnection PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS GVariant PTR
DECLARE FUNCTION g_dbus_connection_call_sync(BYVAL AS GDBusConnection PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS GVariant PTR, BYVAL AS const GVariantType PTR, BYVAL AS GDBusCallFlags, BYVAL AS gint, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS GVariant PTR
DECLARE SUB g_dbus_connection_call_with_unix_fd_list(BYVAL AS GDBusConnection PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS GVariant PTR, BYVAL AS const GVariantType PTR, BYVAL AS GDBusCallFlags, BYVAL AS gint, BYVAL AS GUnixFDList PTR, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
DECLARE FUNCTION g_dbus_connection_call_with_unix_fd_list_finish(BYVAL AS GDBusConnection PTR, BYVAL AS GUnixFDList PTR PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS GVariant PTR
DECLARE FUNCTION g_dbus_connection_call_with_unix_fd_list_sync(BYVAL AS GDBusConnection PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS GVariant PTR, BYVAL AS const GVariantType PTR, BYVAL AS GDBusCallFlags, BYVAL AS gint, BYVAL AS GUnixFDList PTR, BYVAL AS GUnixFDList PTR PTR, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS GVariant PTR
DECLARE SUB g_dbus_connection_close(BYVAL AS GDBusConnection PTR, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
DECLARE FUNCTION g_dbus_connection_close_finish(BYVAL AS GDBusConnection PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION g_dbus_connection_close_sync(BYVAL AS GDBusConnection PTR, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION g_dbus_connection_emit_signal(BYVAL AS GDBusConnection PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS GVariant PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION g_dbus_connection_export_action_group(BYVAL AS GDBusConnection PTR, BYVAL AS const gchar PTR, BYVAL AS GActionGroup PTR, BYVAL AS GError PTR PTR) AS guint
DECLARE FUNCTION g_dbus_connection_export_menu_model(BYVAL AS GDBusConnection PTR, BYVAL AS const gchar PTR, BYVAL AS GMenuModel PTR, BYVAL AS GError PTR PTR) AS guint
DECLARE SUB g_dbus_connection_flush(BYVAL AS GDBusConnection PTR, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
DECLARE FUNCTION g_dbus_connection_flush_finish(BYVAL AS GDBusConnection PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION g_dbus_connection_flush_sync(BYVAL AS GDBusConnection PTR, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION g_dbus_connection_get_capabilities(BYVAL AS GDBusConnection PTR) AS GDBusCapabilityFlags
DECLARE FUNCTION g_dbus_connection_get_exit_on_close(BYVAL AS GDBusConnection PTR) AS gboolean
DECLARE FUNCTION g_dbus_connection_get_flags(BYVAL AS GDBusConnection PTR) AS GDBusConnectionFlags
DECLARE FUNCTION g_dbus_connection_get_guid(BYVAL AS GDBusConnection PTR) AS const gchar PTR
DECLARE FUNCTION g_dbus_connection_get_last_serial(BYVAL AS GDBusConnection PTR) AS guint32
DECLARE FUNCTION g_dbus_connection_get_peer_credentials(BYVAL AS GDBusConnection PTR) AS GCredentials PTR
DECLARE FUNCTION g_dbus_connection_get_stream(BYVAL AS GDBusConnection PTR) AS GIOStream PTR
DECLARE FUNCTION g_dbus_connection_get_unique_name(BYVAL AS GDBusConnection PTR) AS const gchar PTR
DECLARE FUNCTION g_dbus_connection_is_closed(BYVAL AS GDBusConnection PTR) AS gboolean
DECLARE FUNCTION g_dbus_connection_register_object(BYVAL AS GDBusConnection PTR, BYVAL AS const gchar PTR, BYVAL AS GDBusInterfaceInfo PTR, BYVAL AS const GDBusInterfaceVTable PTR, BYVAL AS gpointer, BYVAL AS GDestroyNotify, BYVAL AS GError PTR PTR) AS guint
DECLARE FUNCTION g_dbus_connection_register_object_with_closures(BYVAL AS GDBusConnection PTR, BYVAL AS const gchar PTR, BYVAL AS GDBusInterfaceInfo PTR, BYVAL AS GClosure PTR, BYVAL AS GClosure PTR, BYVAL AS GClosure PTR, BYVAL AS GError PTR PTR) AS guint
DECLARE FUNCTION g_dbus_connection_register_subtree(BYVAL AS GDBusConnection PTR, BYVAL AS const gchar PTR, BYVAL AS const GDBusSubtreeVTable PTR, BYVAL AS GDBusSubtreeFlags, BYVAL AS gpointer, BYVAL AS GDestroyNotify, BYVAL AS GError PTR PTR) AS guint
DECLARE SUB g_dbus_connection_remove_filter(BYVAL AS GDBusConnection PTR, BYVAL AS guint)
DECLARE FUNCTION g_dbus_connection_send_message(BYVAL AS GDBusConnection PTR, BYVAL AS GDBusMessage PTR, BYVAL AS GDBusSendMessageFlags, BYVAL AS guint32 PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE SUB g_dbus_connection_send_message_with_reply(BYVAL AS GDBusConnection PTR, BYVAL AS GDBusMessage PTR, BYVAL AS GDBusSendMessageFlags, BYVAL AS gint, BYVAL AS guint32 PTR, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
DECLARE FUNCTION g_dbus_connection_send_message_with_reply_finish(BYVAL AS GDBusConnection PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS GDBusMessage PTR
DECLARE FUNCTION g_dbus_connection_send_message_with_reply_sync(BYVAL AS GDBusConnection PTR, BYVAL AS GDBusMessage PTR, BYVAL AS GDBusSendMessageFlags, BYVAL AS gint, BYVAL AS guint32 PTR, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS GDBusMessage PTR
DECLARE SUB g_dbus_connection_set_exit_on_close(BYVAL AS GDBusConnection PTR, BYVAL AS gboolean)
DECLARE FUNCTION g_dbus_connection_signal_subscribe(BYVAL AS GDBusConnection PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS GDBusSignalFlags, BYVAL AS GDBusSignalCallback, BYVAL AS gpointer, BYVAL AS GDestroyNotify) AS guint
DECLARE SUB g_dbus_connection_signal_unsubscribe(BYVAL AS GDBusConnection PTR, BYVAL AS guint)
DECLARE SUB g_dbus_connection_start_message_processing(BYVAL AS GDBusConnection PTR)
DECLARE SUB g_dbus_connection_unexport_action_group(BYVAL AS GDBusConnection PTR, BYVAL AS guint)
DECLARE SUB g_dbus_connection_unexport_menu_model(BYVAL AS GDBusConnection PTR, BYVAL AS guint)
DECLARE FUNCTION g_dbus_connection_unregister_object(BYVAL AS GDBusConnection PTR, BYVAL AS guint) AS gboolean
DECLARE FUNCTION g_dbus_connection_unregister_subtree(BYVAL AS GDBusConnection PTR, BYVAL AS guint) AS gboolean
TYPE _GDBusErrorEntry
  AS gint error_code
  AS const gchar PTR dbus_error_name
END TYPE
DECLARE FUNCTION g_dbus_error_get_type() AS GType
#DEFINE G_TYPE_DBUS_ERROR (g_dbus_error_get_type())
DECLARE FUNCTION g_dbus_interface_get_type() AS GType
#DEFINE G_TYPE_DBUS_INTERFACE (g_dbus_interface_get_type())
#DEFINE G_DBUS_INTERFACE(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), G_TYPE_DBUS_INTERFACE, GDBusInterface))
#DEFINE G_DBUS_INTERFACE_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), G_TYPE_DBUS_INTERFACE, GDBusInterfaceIface))
#DEFINE G_IS_DBUS_INTERFACE(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), G_TYPE_DBUS_INTERFACE))
#DEFINE G_DBUS_INTERFACE_GET_IFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE((obj), G_TYPE_DBUS_INTERFACE, GDBusInterfaceIface))
DECLARE FUNCTION g_dbus_interface_dup_object(BYVAL AS GDBusInterface PTR) AS GDBusObject PTR
DECLARE FUNCTION g_dbus_interface_get_info(BYVAL AS GDBusInterface PTR) AS GDBusInterfaceInfo PTR
DECLARE FUNCTION g_dbus_interface_get_object(BYVAL AS GDBusInterface PTR) AS GDBusObject PTR
DECLARE SUB g_dbus_interface_set_object(BYVAL AS GDBusInterface PTR, BYVAL AS GDBusObject PTR)
TYPE GDBusInterfaceGetPropertyFunc AS FUNCTION CDECL(BYVAL AS GDBusConnection PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR, BYVAL AS gpointer) AS GVariant PTR
TYPE _GDBusInterfaceIface
  AS GTypeInterface parent_iface
  get_info AS FUNCTION CDECL(BYVAL AS GDBusInterface PTR) AS GDBusInterfaceInfo PTR
  get_object AS FUNCTION CDECL(BYVAL AS GDBusInterface PTR) AS GDBusObject PTR
  set_object AS SUB CDECL(BYVAL AS GDBusInterface PTR, BYVAL AS GDBusObject PTR)
  dup_object AS FUNCTION CDECL(BYVAL AS GDBusInterface PTR) AS GDBusObject PTR
END TYPE
TYPE _GDBusInterfaceInfo
  AS gint ref_count
  AS gchar PTR name
  AS GDBusMethodInfo PTR methods
  AS GDBusSignalInfo PTR signals
  AS GDBusPropertyInfo PTR properties
  AS GDBusAnnotationInfo PTR annotations
END TYPE
DECLARE SUB g_dbus_interface_info_cache_build(BYVAL AS GDBusInterfaceInfo PTR)
DECLARE SUB g_dbus_interface_info_cache_release(BYVAL AS GDBusInterfaceInfo PTR)
DECLARE SUB g_dbus_interface_info_generate_xml(BYVAL AS GDBusInterfaceInfo PTR, BYVAL AS guint, BYVAL AS GString PTR)
DECLARE FUNCTION g_dbus_interface_info_lookup_method(BYVAL AS GDBusInterfaceInfo PTR, BYVAL AS const gchar PTR) AS GDBusMethodInfo PTR
DECLARE FUNCTION g_dbus_interface_info_lookup_property(BYVAL AS GDBusInterfaceInfo PTR, BYVAL AS const gchar PTR) AS GDBusPropertyInfo PTR
DECLARE FUNCTION g_dbus_interface_info_lookup_signal(BYVAL AS GDBusInterfaceInfo PTR, BYVAL AS const gchar PTR) AS GDBusSignalInfo PTR
DECLARE FUNCTION g_dbus_interface_info_ref(BYVAL AS GDBusInterfaceInfo PTR) AS GDBusInterfaceInfo PTR
DECLARE SUB g_dbus_interface_info_unref(BYVAL AS GDBusInterfaceInfo PTR)
TYPE GDBusInterfaceMethodCallFunc AS SUB CDECL(BYVAL AS GDBusConnection PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS GVariant PTR, BYVAL AS GDBusMethodInvocation PTR, BYVAL AS gpointer)
TYPE GDBusInterfaceSetPropertyFunc AS FUNCTION CDECL(BYVAL AS GDBusConnection PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS GVariant PTR, BYVAL AS GError PTR PTR, BYVAL AS gpointer) AS gboolean
TYPE _GDBusInterfaceSkeleton
  AS GObject parent_instance
  AS GDBusInterfaceSkeletonPrivate PTR priv
END TYPE
DECLARE FUNCTION g_dbus_interface_skeleton_get_type() AS GType
#DEFINE G_TYPE_DBUS_INTERFACE_SKELETON (g_dbus_interface_skeleton_get_type())
#DEFINE G_DBUS_INTERFACE_SKELETON(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), G_TYPE_DBUS_INTERFACE_SKELETON, GDBusInterfaceSkeleton))
#DEFINE G_DBUS_INTERFACE_SKELETON_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), G_TYPE_DBUS_INTERFACE_SKELETON, GDBusInterfaceSkeletonClass))
#DEFINE G_IS_DBUS_INTERFACE_SKELETON(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), G_TYPE_DBUS_INTERFACE_SKELETON))
#DEFINE G_IS_CLASS_DBUS_INTERFACE_SKELETON(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), G_TYPE_DBUS_INTERFACE_SKELETON))
#DEFINE G_DBUS_INTERFACE_SKELETON_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), G_TYPE_DBUS_INTERFACE_SKELETON, GDBusInterfaceSkeletonClass))
DECLARE FUNCTION g_dbus_interface_skeleton_export(BYVAL AS GDBusInterfaceSkeleton PTR, BYVAL AS GDBusConnection PTR, BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE SUB g_dbus_interface_skeleton_flush(BYVAL AS GDBusInterfaceSkeleton PTR)
DECLARE FUNCTION g_dbus_interface_skeleton_get_connection(BYVAL AS GDBusInterfaceSkeleton PTR) AS GDBusConnection PTR
DECLARE FUNCTION g_dbus_interface_skeleton_get_connections(BYVAL AS GDBusInterfaceSkeleton PTR) AS GList PTR
DECLARE FUNCTION g_dbus_interface_skeleton_get_flags(BYVAL AS GDBusInterfaceSkeleton PTR) AS GDBusInterfaceSkeletonFlags
DECLARE FUNCTION g_dbus_interface_skeleton_get_info(BYVAL AS GDBusInterfaceSkeleton PTR) AS GDBusInterfaceInfo PTR
DECLARE FUNCTION g_dbus_interface_skeleton_get_object_path(BYVAL AS GDBusInterfaceSkeleton PTR) AS const gchar PTR
DECLARE FUNCTION g_dbus_interface_skeleton_get_properties(BYVAL AS GDBusInterfaceSkeleton PTR) AS GVariant PTR
DECLARE FUNCTION g_dbus_interface_skeleton_get_vtable(BYVAL AS GDBusInterfaceSkeleton PTR) AS GDBusInterfaceVTable PTR
DECLARE FUNCTION g_dbus_interface_skeleton_has_connection(BYVAL AS GDBusInterfaceSkeleton PTR, BYVAL AS GDBusConnection PTR) AS gboolean
DECLARE SUB g_dbus_interface_skeleton_set_flags(BYVAL AS GDBusInterfaceSkeleton PTR, BYVAL AS GDBusInterfaceSkeletonFlags)
DECLARE SUB g_dbus_interface_skeleton_unexport(BYVAL AS GDBusInterfaceSkeleton PTR)
DECLARE SUB g_dbus_interface_skeleton_unexport_from_connection(BYVAL AS GDBusInterfaceSkeleton PTR, BYVAL AS GDBusConnection PTR)
TYPE _GDBusInterfaceSkeletonClass
  AS GObjectClass parent_class
  get_info AS FUNCTION CDECL(BYVAL AS GDBusInterfaceSkeleton PTR) AS GDBusInterfaceInfo PTR
  get_vtable AS FUNCTION CDECL(BYVAL AS GDBusInterfaceSkeleton PTR) AS GDBusInterfaceVTable PTR
  get_properties AS FUNCTION CDECL(BYVAL AS GDBusInterfaceSkeleton PTR) AS GVariant PTR
  flush AS SUB CDECL(BYVAL AS GDBusInterfaceSkeleton PTR)
  AS gpointer vfunc_padding(7)
  g_authorize_method AS FUNCTION CDECL(BYVAL AS GDBusInterfaceSkeleton PTR, BYVAL AS GDBusMethodInvocation PTR) AS gboolean
  AS gpointer signal_padding(7)
END TYPE
TYPE _GDBusInterfaceVTable
  AS GDBusInterfaceMethodCallFunc method_call
  AS GDBusInterfaceGetPropertyFunc get_property
  AS GDBusInterfaceSetPropertyFunc set_property
  AS gpointer padding(7)
END TYPE
DECLARE FUNCTION g_dbus_menu_model_get_type() AS GType
#DEFINE G_TYPE_DBUS_MENU_MODEL (g_dbus_menu_model_get_type())
#DEFINE G_DBUS_MENU_MODEL(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), G_TYPE_DBUS_MENU_MODEL, GDBusMenuModel))
#DEFINE G_DBUS_MENU_MODEL_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), G_TYPE_DBUS_MENU_MODEL, G))
#DEFINE G_IS_DBUS_MENU_MODEL(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), G_TYPE_DBUS_MENU_MODEL))
#DEFINE G_IS_CLASS_DBUS_MENU_MODEL(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), G_TYPE_DBUS_MENU_MODEL))
#DEFINE G_DBUS_MENU_MODEL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), G_TYPE_DBUS_MENU_MODEL, G))
DECLARE FUNCTION g_dbus_menu_model_get(BYVAL AS GDBusConnection PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR) AS GDBusMenuModel PTR
DECLARE FUNCTION g_dbus_message_get_type() AS GType
#DEFINE G_TYPE_DBUS_MESSAGE (g_dbus_message_get_type())
#DEFINE G_DBUS_MESSAGE(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), G_TYPE_DBUS_MESSAGE, GDBusMessage))
#DEFINE G_DBUS_MESSAGE_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), G_TYPE_DBUS_MESSAGE, G))
#DEFINE G_IS_DBUS_MESSAGE(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), G_TYPE_DBUS_MESSAGE))
#DEFINE G_IS_CLASS_DBUS_MESSAGE(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), G_TYPE_DBUS_MESSAGE))
#DEFINE G_DBUS_MESSAGE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), G_TYPE_DBUS_MESSAGE, G))
DECLARE FUNCTION g_dbus_message_new() AS GDBusMessage PTR
DECLARE FUNCTION g_dbus_message_new_from_blob(BYVAL AS guchar PTR, BYVAL AS gsize, BYVAL AS GDBusCapabilityFlags, BYVAL AS GError PTR PTR) AS GDBusMessage PTR
DECLARE FUNCTION g_dbus_message_new_method_call(BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR) AS GDBusMessage PTR
DECLARE FUNCTION g_dbus_message_new_signal(BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR) AS GDBusMessage PTR
DECLARE FUNCTION g_dbus_message_bytes_needed(BYVAL AS guchar PTR, BYVAL AS gsize, BYVAL AS GError PTR PTR) AS gssize
DECLARE FUNCTION g_dbus_message_copy(BYVAL AS GDBusMessage PTR, BYVAL AS GError PTR PTR) AS GDBusMessage PTR
DECLARE FUNCTION g_dbus_message_get_arg0(BYVAL AS GDBusMessage PTR) AS const gchar PTR
DECLARE FUNCTION g_dbus_message_get_body(BYVAL AS GDBusMessage PTR) AS GVariant PTR
DECLARE FUNCTION g_dbus_message_get_byte_order(BYVAL AS GDBusMessage PTR) AS GDBusMessageByteOrder
DECLARE FUNCTION g_dbus_message_get_destination(BYVAL AS GDBusMessage PTR) AS const gchar PTR
DECLARE FUNCTION g_dbus_message_get_error_name(BYVAL AS GDBusMessage PTR) AS const gchar PTR
DECLARE FUNCTION g_dbus_message_get_flags(BYVAL AS GDBusMessage PTR) AS GDBusMessageFlags
DECLARE FUNCTION g_dbus_message_get_header(BYVAL AS GDBusMessage PTR, BYVAL AS GDBusMessageHeaderField) AS GVariant PTR
DECLARE FUNCTION g_dbus_message_get_header_fields(BYVAL AS GDBusMessage PTR) AS guchar PTR
DECLARE FUNCTION g_dbus_message_get_interface(BYVAL AS GDBusMessage PTR) AS const gchar PTR
DECLARE FUNCTION g_dbus_message_get_locked(BYVAL AS GDBusMessage PTR) AS gboolean
DECLARE FUNCTION g_dbus_message_get_member(BYVAL AS GDBusMessage PTR) AS const gchar PTR
DECLARE FUNCTION g_dbus_message_get_message_type(BYVAL AS GDBusMessage PTR) AS GDBusMessageType
DECLARE FUNCTION g_dbus_message_get_num_unix_fds(BYVAL AS GDBusMessage PTR) AS guint32
DECLARE FUNCTION g_dbus_message_get_path(BYVAL AS GDBusMessage PTR) AS const gchar PTR
DECLARE FUNCTION g_dbus_message_get_reply_serial(BYVAL AS GDBusMessage PTR) AS guint32
DECLARE FUNCTION g_dbus_message_get_sender(BYVAL AS GDBusMessage PTR) AS const gchar PTR
DECLARE FUNCTION g_dbus_message_get_serial(BYVAL AS GDBusMessage PTR) AS guint32
DECLARE FUNCTION g_dbus_message_get_signature(BYVAL AS GDBusMessage PTR) AS const gchar PTR
DECLARE FUNCTION g_dbus_message_get_unix_fd_list(BYVAL AS GDBusMessage PTR) AS GUnixFDList PTR
DECLARE SUB g_dbus_message_lock(BYVAL AS GDBusMessage PTR)
DECLARE FUNCTION g_dbus_message_new_method_error(BYVAL AS GDBusMessage PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, ...) AS GDBusMessage PTR
DECLARE FUNCTION g_dbus_message_new_method_error_literal(BYVAL AS GDBusMessage PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR) AS GDBusMessage PTR
DECLARE FUNCTION g_dbus_message_new_method_error_valist(BYVAL AS GDBusMessage PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS va_list) AS GDBusMessage PTR
DECLARE FUNCTION g_dbus_message_new_method_reply(BYVAL AS GDBusMessage PTR) AS GDBusMessage PTR
DECLARE FUNCTION g_dbus_message_print(BYVAL AS GDBusMessage PTR, BYVAL AS guint) AS gchar PTR
DECLARE SUB g_dbus_message_set_body(BYVAL AS GDBusMessage PTR, BYVAL AS GVariant PTR)
DECLARE SUB g_dbus_message_set_byte_order(BYVAL AS GDBusMessage PTR, BYVAL AS GDBusMessageByteOrder)
DECLARE SUB g_dbus_message_set_destination(BYVAL AS GDBusMessage PTR, BYVAL AS const gchar PTR)
DECLARE SUB g_dbus_message_set_error_name(BYVAL AS GDBusMessage PTR, BYVAL AS const gchar PTR)
DECLARE SUB g_dbus_message_set_flags(BYVAL AS GDBusMessage PTR, BYVAL AS GDBusMessageFlags)
DECLARE SUB g_dbus_message_set_header(BYVAL AS GDBusMessage PTR, BYVAL AS GDBusMessageHeaderField, BYVAL AS GVariant PTR)
DECLARE SUB g_dbus_message_set_interface(BYVAL AS GDBusMessage PTR, BYVAL AS const gchar PTR)
DECLARE SUB g_dbus_message_set_member(BYVAL AS GDBusMessage PTR, BYVAL AS const gchar PTR)
DECLARE SUB g_dbus_message_set_message_type(BYVAL AS GDBusMessage PTR, BYVAL AS GDBusMessageType)
DECLARE SUB g_dbus_message_set_num_unix_fds(BYVAL AS GDBusMessage PTR, BYVAL AS guint32)
DECLARE SUB g_dbus_message_set_path(BYVAL AS GDBusMessage PTR, BYVAL AS const gchar PTR)
DECLARE SUB g_dbus_message_set_reply_serial(BYVAL AS GDBusMessage PTR, BYVAL AS guint32)
DECLARE SUB g_dbus_message_set_sender(BYVAL AS GDBusMessage PTR, BYVAL AS const gchar PTR)
DECLARE SUB g_dbus_message_set_serial(BYVAL AS GDBusMessage PTR, BYVAL AS guint32)
DECLARE SUB g_dbus_message_set_signature(BYVAL AS GDBusMessage PTR, BYVAL AS const gchar PTR)
DECLARE SUB g_dbus_message_set_unix_fd_list(BYVAL AS GDBusMessage PTR, BYVAL AS GUnixFDList PTR)
DECLARE FUNCTION g_dbus_message_to_blob(BYVAL AS GDBusMessage PTR, BYVAL AS gsize PTR, BYVAL AS GDBusCapabilityFlags, BYVAL AS GError PTR PTR) AS guchar PTR
DECLARE FUNCTION g_dbus_message_to_gerror(BYVAL AS GDBusMessage PTR, BYVAL AS GError PTR PTR) AS gboolean
TYPE _GDBusMethodInfo
  AS gint ref_count
  AS gchar PTR name
  AS GDBusArgInfo PTR in_args
  AS GDBusArgInfo PTR out_args
  AS GDBusAnnotationInfo PTR annotations
END TYPE
DECLARE FUNCTION g_dbus_message_byte_order_get_type() AS GType
#DEFINE G_TYPE_DBUS_MESSAGE_BYTE_ORDER (g_dbus_message_byte_order_get_type())
DECLARE FUNCTION g_dbus_message_header_field_get_type() AS GType
#DEFINE G_TYPE_DBUS_MESSAGE_HEADER_FIELD (g_dbus_message_header_field_get_type())
DECLARE FUNCTION g_dbus_message_type_get_type() AS GType
#DEFINE G_TYPE_DBUS_MESSAGE_TYPE (g_dbus_message_type_get_type())
DECLARE FUNCTION g_dbus_method_info_ref(BYVAL AS GDBusMethodInfo PTR) AS GDBusMethodInfo PTR
DECLARE SUB g_dbus_method_info_unref(BYVAL AS GDBusMethodInfo PTR)
DECLARE FUNCTION g_dbus_method_invocation_get_type() AS GType
#DEFINE G_TYPE_DBUS_METHOD_INVOCATION (g_dbus_method_invocation_get_type())
#DEFINE G_DBUS_METHOD_INVOCATION(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), G_TYPE_DBUS_METHOD_INVOCATION, GDBusMethodInvocation))
#DEFINE G_DBUS_METHOD_INVOCATION_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), G_TYPE_DBUS_METHOD_INVOCATION, G))
#DEFINE G_IS_DBUS_METHOD_INVOCATION(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), G_TYPE_DBUS_METHOD_INVOCATION))
#DEFINE G_IS_CLASS_DBUS_METHOD_INVOCATION(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), G_TYPE_DBUS_METHOD_INVOCATION))
#DEFINE G_DBUS_METHOD_INVOCATION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), G_TYPE_DBUS_METHOD_INVOCATION, G))
DECLARE FUNCTION g_dbus_method_invocation_get_connection(BYVAL AS GDBusMethodInvocation PTR) AS GDBusConnection PTR
DECLARE FUNCTION g_dbus_method_invocation_get_interface_name(BYVAL AS GDBusMethodInvocation PTR) AS const gchar PTR
DECLARE FUNCTION g_dbus_method_invocation_get_message(BYVAL AS GDBusMethodInvocation PTR) AS GDBusMessage PTR
DECLARE FUNCTION g_dbus_method_invocation_get_method_info(BYVAL AS GDBusMethodInvocation PTR) AS const GDBusMethodInfo PTR
DECLARE FUNCTION g_dbus_method_invocation_get_method_name(BYVAL AS GDBusMethodInvocation PTR) AS const gchar PTR
DECLARE FUNCTION g_dbus_method_invocation_get_object_path(BYVAL AS GDBusMethodInvocation PTR) AS const gchar PTR
DECLARE FUNCTION g_dbus_method_invocation_get_parameters(BYVAL AS GDBusMethodInvocation PTR) AS GVariant PTR
DECLARE FUNCTION g_dbus_method_invocation_get_property_info(BYVAL AS GDBusMethodInvocation PTR) AS const GDBusPropertyInfo PTR
DECLARE FUNCTION g_dbus_method_invocation_get_sender(BYVAL AS GDBusMethodInvocation PTR) AS const gchar PTR
DECLARE FUNCTION g_dbus_method_invocation_get_user_data(BYVAL AS GDBusMethodInvocation PTR) AS gpointer
DECLARE SUB g_dbus_method_invocation_return_dbus_error(BYVAL AS GDBusMethodInvocation PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR)
DECLARE SUB g_dbus_method_invocation_return_error(BYVAL AS GDBusMethodInvocation PTR, BYVAL AS GQuark, BYVAL AS gint, BYVAL AS const gchar PTR, ...)
DECLARE SUB g_dbus_method_invocation_return_error_literal(BYVAL AS GDBusMethodInvocation PTR, BYVAL AS GQuark, BYVAL AS gint, BYVAL AS const gchar PTR)
DECLARE SUB g_dbus_method_invocation_return_error_valist(BYVAL AS GDBusMethodInvocation PTR, BYVAL AS GQuark, BYVAL AS gint, BYVAL AS const gchar PTR, BYVAL AS va_list)
DECLARE SUB g_dbus_method_invocation_return_gerror(BYVAL AS GDBusMethodInvocation PTR, BYVAL AS const GError PTR)
DECLARE SUB g_dbus_method_invocation_return_value(BYVAL AS GDBusMethodInvocation PTR, BYVAL AS GVariant PTR)
DECLARE SUB g_dbus_method_invocation_return_value_with_unix_fd_list(BYVAL AS GDBusMethodInvocation PTR, BYVAL AS GVariant PTR, BYVAL AS GUnixFDList PTR)
DECLARE SUB g_dbus_method_invocation_take_error(BYVAL AS GDBusMethodInvocation PTR, BYVAL AS GError PTR)
TYPE _GDBusNodeInfo
  AS gint ref_count
  AS gchar PTR path
  AS GDBusInterfaceInfo PTR interfaces
  AS GDBusNodeInfo PTR nodes
  AS GDBusAnnotationInfo PTR annotations
END TYPE
DECLARE FUNCTION g_dbus_node_info_new_for_xml(BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR) AS GDBusNodeInfo PTR
DECLARE SUB g_dbus_node_info_generate_xml(BYVAL AS GDBusNodeInfo PTR, BYVAL AS guint, BYVAL AS GString PTR)
DECLARE FUNCTION g_dbus_node_info_lookup_interface(BYVAL AS GDBusNodeInfo PTR, BYVAL AS const gchar PTR) AS GDBusInterfaceInfo PTR
DECLARE FUNCTION g_dbus_node_info_ref(BYVAL AS GDBusNodeInfo PTR) AS GDBusNodeInfo PTR
DECLARE SUB g_dbus_node_info_unref(BYVAL AS GDBusNodeInfo PTR)
DECLARE FUNCTION g_dbus_object_get_type() AS GType
#DEFINE G_TYPE_DBUS_OBJECT (g_dbus_object_get_type())
#DEFINE G_DBUS_OBJECT(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), G_TYPE_DBUS_OBJECT, GDBusObject))
#DEFINE G_DBUS_OBJECT_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), G_TYPE_DBUS_OBJECT, GDBusObjectIface))
#DEFINE G_IS_DBUS_OBJECT(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), G_TYPE_DBUS_OBJECT))
#DEFINE G_DBUS_OBJECT_GET_IFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE((obj), G_TYPE_DBUS_OBJECT, GDBusObjectIface))
DECLARE FUNCTION g_dbus_object_get_interface(BYVAL AS GDBusObject PTR, BYVAL AS const gchar PTR) AS GDBusInterface PTR
DECLARE FUNCTION g_dbus_object_get_interfaces(BYVAL AS GDBusObject PTR) AS GList PTR
DECLARE FUNCTION g_dbus_object_get_object_path(BYVAL AS GDBusObject PTR) AS const gchar PTR
TYPE _GDBusObjectIface
  AS GTypeInterface parent_iface
  get_object_path AS FUNCTION CDECL(BYVAL AS GDBusObject PTR) AS const gchar PTR
  get_interfaces AS FUNCTION CDECL(BYVAL AS GDBusObject PTR) AS GList PTR
  get_interface AS FUNCTION CDECL(BYVAL AS GDBusObject PTR, BYVAL AS const gchar PTR) AS GDBusInterface PTR
  interface_added AS SUB CDECL(BYVAL AS GDBusObject PTR, BYVAL AS GDBusInterface PTR)
  interface_removed AS SUB CDECL(BYVAL AS GDBusObject PTR, BYVAL AS GDBusInterface PTR)
END TYPE
DECLARE FUNCTION g_dbus_object_manager_get_type() AS GType
#DEFINE G_TYPE_DBUS_OBJECT_MANAGER (g_dbus_object_manager_get_type())
#DEFINE G_DBUS_OBJECT_MANAGER(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), G_TYPE_DBUS_OBJECT_MANAGER, GDBusObjectManager))
#DEFINE G_DBUS_OBJECT_MANAGER_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), G_TYPE_DBUS_OBJECT_MANAGER, GDBusObjectManagerIface))
#DEFINE G_IS_DBUS_OBJECT_MANAGER(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), G_TYPE_DBUS_OBJECT_MANAGER))
#DEFINE G_DBUS_OBJECT_MANAGER_GET_IFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE((obj), G_TYPE_DBUS_OBJECT_MANAGER, GDBusObjectManagerIface))
DECLARE FUNCTION g_dbus_object_manager_get_interface(BYVAL AS GDBusObjectManager PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR) AS GDBusInterface PTR
DECLARE FUNCTION g_dbus_object_manager_get_object(BYVAL AS GDBusObjectManager PTR, BYVAL AS const gchar PTR) AS GDBusObject PTR
DECLARE FUNCTION g_dbus_object_manager_get_object_path(BYVAL AS GDBusObjectManager PTR) AS const gchar PTR
DECLARE FUNCTION g_dbus_object_manager_get_objects(BYVAL AS GDBusObjectManager PTR) AS GList PTR
TYPE _GDBusObjectManagerClient
  AS GObject parent_instance
  AS GDBusObjectManagerClientPrivate PTR priv
END TYPE
DECLARE FUNCTION g_dbus_object_manager_client_get_type() AS GType
#DEFINE G_TYPE_DBUS_OBJECT_MANAGER_CLIENT (g_dbus_object_manager_client_get_type())
#DEFINE G_DBUS_OBJECT_MANAGER_CLIENT(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), G_TYPE_DBUS_OBJECT_MANAGER_CLIENT, GDBusObjectManagerClient))
#DEFINE G_DBUS_OBJECT_MANAGER_CLIENT_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), G_TYPE_DBUS_OBJECT_MANAGER_CLIENT, GDBusObjectManagerClientClass))
#DEFINE G_IS_DBUS_OBJECT_MANAGER_CLIENT(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), G_TYPE_DBUS_OBJECT_MANAGER_CLIENT))
#DEFINE G_IS_CLASS_DBUS_OBJECT_MANAGER_CLIENT(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), G_TYPE_DBUS_OBJECT_MANAGER_CLIENT))
#DEFINE G_DBUS_OBJECT_MANAGER_CLIENT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), G_TYPE_DBUS_OBJECT_MANAGER_CLIENT, GDBusObjectManagerClientClass))
DECLARE FUNCTION g_dbus_object_manager_client_new_finish(BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS GDBusObjectManager PTR
DECLARE FUNCTION g_dbus_object_manager_client_new_for_bus_finish(BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS GDBusObjectManager PTR
DECLARE FUNCTION g_dbus_object_manager_client_new_for_bus_sync(BYVAL AS GBusType, BYVAL AS GDBusObjectManagerClientFlags, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS GDBusProxyTypeFunc, BYVAL AS gpointer, BYVAL AS GDestroyNotify, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS GDBusObjectManager PTR
DECLARE FUNCTION g_dbus_object_manager_client_new_sync(BYVAL AS GDBusConnection PTR, BYVAL AS GDBusObjectManagerClientFlags, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS GDBusProxyTypeFunc, BYVAL AS gpointer, BYVAL AS GDestroyNotify, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS GDBusObjectManager PTR
DECLARE SUB g_dbus_object_manager_client_new(BYVAL AS GDBusConnection PTR, BYVAL AS GDBusObjectManagerClientFlags, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS GDBusProxyTypeFunc, BYVAL AS gpointer, BYVAL AS GDestroyNotify, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
DECLARE SUB g_dbus_object_manager_client_new_for_bus(BYVAL AS GBusType, BYVAL AS GDBusObjectManagerClientFlags, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS GDBusProxyTypeFunc, BYVAL AS gpointer, BYVAL AS GDestroyNotify, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
DECLARE FUNCTION g_dbus_object_manager_client_get_connection(BYVAL AS GDBusObjectManagerClient PTR) AS GDBusConnection PTR
DECLARE FUNCTION g_dbus_object_manager_client_get_flags(BYVAL AS GDBusObjectManagerClient PTR) AS GDBusObjectManagerClientFlags
DECLARE FUNCTION g_dbus_object_manager_client_get_name(BYVAL AS GDBusObjectManagerClient PTR) AS const gchar PTR
DECLARE FUNCTION g_dbus_object_manager_client_get_name_owner(BYVAL AS GDBusObjectManagerClient PTR) AS gchar PTR
TYPE _GDBusObjectManagerClientClass
  AS GObjectClass parent_class
  interface_proxy_signal AS SUB CDECL(BYVAL AS GDBusObjectManagerClient PTR, BYVAL AS GDBusObjectProxy PTR, BYVAL AS GDBusProxy PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS GVariant PTR)
  interface_proxy_properties_changed AS SUB CDECL(BYVAL AS GDBusObjectManagerClient PTR, BYVAL AS GDBusObjectProxy PTR, BYVAL AS GDBusProxy PTR, BYVAL AS GVariant PTR, BYVAL AS const gchar ptr const /'const gchar* const'/ PTR)
  AS gpointer padding(7)
END TYPE
TYPE _GDBusObjectManagerIface
  AS GTypeInterface parent_iface
  get_object_path AS FUNCTION CDECL(BYVAL AS GDBusObjectManager PTR) AS const gchar PTR
  get_objects AS FUNCTION CDECL(BYVAL AS GDBusObjectManager PTR) AS GList PTR
  get_object AS FUNCTION CDECL(BYVAL AS GDBusObjectManager PTR, BYVAL AS const gchar PTR) AS GDBusObject PTR
  get_interface AS FUNCTION CDECL(BYVAL AS GDBusObjectManager PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR) AS GDBusInterface PTR
  object_added AS SUB CDECL(BYVAL AS GDBusObjectManager PTR, BYVAL AS GDBusObject PTR)
  object_removed AS SUB CDECL(BYVAL AS GDBusObjectManager PTR, BYVAL AS GDBusObject PTR)
  interface_added AS SUB CDECL(BYVAL AS GDBusObjectManager PTR, BYVAL AS GDBusObject PTR, BYVAL AS GDBusInterface PTR)
  interface_removed AS SUB CDECL(BYVAL AS GDBusObjectManager PTR, BYVAL AS GDBusObject PTR, BYVAL AS GDBusInterface PTR)
END TYPE
TYPE _GDBusObjectManagerServer
  AS GObject parent_instance
  AS GDBusObjectManagerServerPrivate PTR priv
END TYPE
DECLARE FUNCTION g_dbus_object_manager_server_get_type() AS GType
#DEFINE G_TYPE_DBUS_OBJECT_MANAGER_SERVER (g_dbus_object_manager_server_get_type())
#DEFINE G_DBUS_OBJECT_MANAGER_SERVER(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), G_TYPE_DBUS_OBJECT_MANAGER_SERVER, GDBusObjectManagerServer))
#DEFINE G_DBUS_OBJECT_MANAGER_SERVER_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), G_TYPE_DBUS_OBJECT_MANAGER_SERVER, GDBusObjectManagerServerClass))
#DEFINE G_IS_DBUS_OBJECT_MANAGER_SERVER(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), G_TYPE_DBUS_OBJECT_MANAGER_SERVER))
#DEFINE G_IS_CLASS_DBUS_OBJECT_MANAGER_SERVER(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), G_TYPE_DBUS_OBJECT_MANAGER_SERVER))
#DEFINE G_DBUS_OBJECT_MANAGER_SERVER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), G_TYPE_DBUS_OBJECT_MANAGER_SERVER, GDBusObjectManagerServerClass))
DECLARE FUNCTION g_dbus_object_manager_server_new(BYVAL AS const gchar PTR) AS GDBusObjectManagerServer PTR
DECLARE SUB g_dbus_object_manager_server_export(BYVAL AS GDBusObjectManagerServer PTR, BYVAL AS GDBusObjectSkeleton PTR)
DECLARE SUB g_dbus_object_manager_server_export_uniquely(BYVAL AS GDBusObjectManagerServer PTR, BYVAL AS GDBusObjectSkeleton PTR)
DECLARE FUNCTION g_dbus_object_manager_server_get_connection(BYVAL AS GDBusObjectManagerServer PTR) AS GDBusConnection PTR
DECLARE FUNCTION g_dbus_object_manager_server_is_exported(BYVAL AS GDBusObjectManagerServer PTR, BYVAL AS GDBusObjectSkeleton PTR) AS gboolean
DECLARE SUB g_dbus_object_manager_server_set_connection(BYVAL AS GDBusObjectManagerServer PTR, BYVAL AS GDBusConnection PTR)
DECLARE FUNCTION g_dbus_object_manager_server_unexport(BYVAL AS GDBusObjectManagerServer PTR, BYVAL AS const gchar PTR) AS gboolean
TYPE _GDBusObjectManagerServerClass
  AS GObjectClass parent_class
  AS gpointer padding(7)
END TYPE
TYPE _GDBusObjectProxy
  AS GObject parent_instance
  AS GDBusObjectProxyPrivate PTR priv
END TYPE
DECLARE FUNCTION g_dbus_object_proxy_get_type() AS GType
#DEFINE G_TYPE_DBUS_OBJECT_PROXY (g_dbus_object_proxy_get_type())
#DEFINE G_DBUS_OBJECT_PROXY(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), G_TYPE_DBUS_OBJECT_PROXY, GDBusObjectProxy))
#DEFINE G_DBUS_OBJECT_PROXY_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), G_TYPE_DBUS_OBJECT_PROXY, GDBusObjectProxyClass))
#DEFINE G_IS_DBUS_OBJECT_PROXY(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), G_TYPE_DBUS_OBJECT_PROXY))
#DEFINE G_IS_CLASS_DBUS_OBJECT_PROXY(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), G_TYPE_DBUS_OBJECT_PROXY))
#DEFINE G_DBUS_OBJECT_PROXY_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), G_TYPE_DBUS_OBJECT_PROXY, GDBusObjectProxyClass))
DECLARE FUNCTION g_dbus_object_proxy_new(BYVAL AS GDBusConnection PTR, BYVAL AS const gchar PTR) AS GDBusObjectProxy PTR
DECLARE FUNCTION g_dbus_object_proxy_get_connection(BYVAL AS GDBusObjectProxy PTR) AS GDBusConnection PTR
TYPE _GDBusObjectProxyClass
  AS GObjectClass parent_class
  AS gpointer padding(7)
END TYPE
TYPE _GDBusObjectSkeleton
  AS GObject parent_instance
  AS GDBusObjectSkeletonPrivate PTR priv
END TYPE
DECLARE FUNCTION g_dbus_object_skeleton_get_type() AS GType
#DEFINE G_TYPE_DBUS_OBJECT_SKELETON (g_dbus_object_skeleton_get_type())
#DEFINE G_DBUS_OBJECT_SKELETON(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), G_TYPE_DBUS_OBJECT_SKELETON, GDBusObjectSkeleton))
#DEFINE G_DBUS_OBJECT_SKELETON_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), G_TYPE_DBUS_OBJECT_SKELETON, GDBusObjectSkeletonClass))
#DEFINE G_IS_DBUS_OBJECT_SKELETON(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), G_TYPE_DBUS_OBJECT_SKELETON))
#DEFINE G_IS_CLASS_DBUS_OBJECT_SKELETON(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), G_TYPE_DBUS_OBJECT_SKELETON))
#DEFINE G_DBUS_OBJECT_SKELETON_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), G_TYPE_DBUS_OBJECT_SKELETON, GDBusObjectSkeletonClass))
DECLARE FUNCTION g_dbus_object_skeleton_new(BYVAL AS const gchar PTR) AS GDBusObjectSkeleton PTR
DECLARE SUB g_dbus_object_skeleton_add_interface(BYVAL AS GDBusObjectSkeleton PTR, BYVAL AS GDBusInterfaceSkeleton PTR)
DECLARE SUB g_dbus_object_skeleton_flush(BYVAL AS GDBusObjectSkeleton PTR)
DECLARE SUB g_dbus_object_skeleton_remove_interface(BYVAL AS GDBusObjectSkeleton PTR, BYVAL AS GDBusInterfaceSkeleton PTR)
DECLARE SUB g_dbus_object_skeleton_remove_interface_by_name(BYVAL AS GDBusObjectSkeleton PTR, BYVAL AS const gchar PTR)
DECLARE SUB g_dbus_object_skeleton_set_object_path(BYVAL AS GDBusObjectSkeleton PTR, BYVAL AS const gchar PTR)
TYPE _GDBusObjectSkeletonClass
  AS GObjectClass parent_class
  authorize_method AS FUNCTION CDECL(BYVAL AS GDBusObjectSkeleton PTR, BYVAL AS GDBusInterfaceSkeleton PTR, BYVAL AS GDBusMethodInvocation PTR) AS gboolean
  AS gpointer padding(7)
END TYPE
TYPE _GDBusPropertyInfo
  AS gint ref_count
  AS gchar PTR name
  AS gchar PTR signature
  AS GDBusPropertyInfoFlags flags
  AS GDBusAnnotationInfo PTR annotations
END TYPE
DECLARE FUNCTION g_dbus_property_info_ref(BYVAL AS GDBusPropertyInfo PTR) AS GDBusPropertyInfo PTR
DECLARE SUB g_dbus_property_info_unref(BYVAL AS GDBusPropertyInfo PTR)
TYPE _GDBusProxy
  AS GObject parent_instance
  AS GDBusProxyPrivate PTR priv
END TYPE
DECLARE FUNCTION g_dbus_proxy_get_type() AS GType
#DEFINE G_TYPE_DBUS_PROXY (g_dbus_proxy_get_type())
#DEFINE G_DBUS_PROXY(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), G_TYPE_DBUS_PROXY, GDBusProxy))
#DEFINE G_DBUS_PROXY_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), G_TYPE_DBUS_PROXY, GDBusProxyClass))
#DEFINE G_IS_DBUS_PROXY(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), G_TYPE_DBUS_PROXY))
#DEFINE G_IS_CLASS_DBUS_PROXY(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), G_TYPE_DBUS_PROXY))
#DEFINE G_DBUS_PROXY_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), G_TYPE_DBUS_PROXY, GDBusProxyClass))
DECLARE FUNCTION g_dbus_proxy_new_finish(BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS GDBusProxy PTR
DECLARE FUNCTION g_dbus_proxy_new_for_bus_finish(BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS GDBusProxy PTR
DECLARE FUNCTION g_dbus_proxy_new_for_bus_sync(BYVAL AS GBusType, BYVAL AS GDBusProxyFlags, BYVAL AS GDBusInterfaceInfo PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS GDBusProxy PTR
DECLARE FUNCTION g_dbus_proxy_new_sync(BYVAL AS GDBusConnection PTR, BYVAL AS GDBusProxyFlags, BYVAL AS GDBusInterfaceInfo PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS GDBusProxy PTR
DECLARE SUB g_dbus_proxy_new(BYVAL AS GDBusConnection PTR, BYVAL AS GDBusProxyFlags, BYVAL AS GDBusInterfaceInfo PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
DECLARE SUB g_dbus_proxy_new_for_bus(BYVAL AS GBusType, BYVAL AS GDBusProxyFlags, BYVAL AS GDBusInterfaceInfo PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
DECLARE SUB g_dbus_proxy_call(BYVAL AS GDBusProxy PTR, BYVAL AS const gchar PTR, BYVAL AS GVariant PTR, BYVAL AS GDBusCallFlags, BYVAL AS gint, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
DECLARE FUNCTION g_dbus_proxy_call_finish(BYVAL AS GDBusProxy PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS GVariant PTR
DECLARE FUNCTION g_dbus_proxy_call_sync(BYVAL AS GDBusProxy PTR, BYVAL AS const gchar PTR, BYVAL AS GVariant PTR, BYVAL AS GDBusCallFlags, BYVAL AS gint, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS GVariant PTR
DECLARE SUB g_dbus_proxy_call_with_unix_fd_list(BYVAL AS GDBusProxy PTR, BYVAL AS const gchar PTR, BYVAL AS GVariant PTR, BYVAL AS GDBusCallFlags, BYVAL AS gint, BYVAL AS GUnixFDList PTR, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
DECLARE FUNCTION g_dbus_proxy_call_with_unix_fd_list_finish(BYVAL AS GDBusProxy PTR, BYVAL AS GUnixFDList PTR PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS GVariant PTR
DECLARE FUNCTION g_dbus_proxy_call_with_unix_fd_list_sync(BYVAL AS GDBusProxy PTR, BYVAL AS const gchar PTR, BYVAL AS GVariant PTR, BYVAL AS GDBusCallFlags, BYVAL AS gint, BYVAL AS GUnixFDList PTR, BYVAL AS GUnixFDList PTR PTR, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS GVariant PTR
DECLARE FUNCTION g_dbus_proxy_get_cached_property(BYVAL AS GDBusProxy PTR, BYVAL AS const gchar PTR) AS GVariant PTR
DECLARE FUNCTION g_dbus_proxy_get_cached_property_names(BYVAL AS GDBusProxy PTR) AS gchar PTR PTR
DECLARE FUNCTION g_dbus_proxy_get_connection(BYVAL AS GDBusProxy PTR) AS GDBusConnection PTR
DECLARE FUNCTION g_dbus_proxy_get_default_timeout(BYVAL AS GDBusProxy PTR) AS gint
DECLARE FUNCTION g_dbus_proxy_get_flags(BYVAL AS GDBusProxy PTR) AS GDBusProxyFlags
DECLARE FUNCTION g_dbus_proxy_get_interface_info(BYVAL AS GDBusProxy PTR) AS GDBusInterfaceInfo PTR
DECLARE FUNCTION g_dbus_proxy_get_interface_name(BYVAL AS GDBusProxy PTR) AS const gchar PTR
DECLARE FUNCTION g_dbus_proxy_get_name(BYVAL AS GDBusProxy PTR) AS const gchar PTR
DECLARE FUNCTION g_dbus_proxy_get_name_owner(BYVAL AS GDBusProxy PTR) AS gchar PTR
DECLARE FUNCTION g_dbus_proxy_get_object_path(BYVAL AS GDBusProxy PTR) AS const gchar PTR
DECLARE SUB g_dbus_proxy_set_cached_property(BYVAL AS GDBusProxy PTR, BYVAL AS const gchar PTR, BYVAL AS GVariant PTR)
DECLARE SUB g_dbus_proxy_set_default_timeout(BYVAL AS GDBusProxy PTR, BYVAL AS gint)
DECLARE SUB g_dbus_proxy_set_interface_info(BYVAL AS GDBusProxy PTR, BYVAL AS GDBusInterfaceInfo PTR)
TYPE _GDBusProxyClass
  AS GObjectClass parent_class
  g_properties_changed AS SUB CDECL(BYVAL AS GDBusProxy PTR, BYVAL AS GVariant PTR, BYVAL AS const gchar ptr const /'const gchar* const'/ PTR)
  g_signal AS SUB CDECL(BYVAL AS GDBusProxy PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS GVariant PTR)
  AS gpointer padding(31)
END TYPE
DECLARE FUNCTION g_dbus_server_get_type() AS GType
#DEFINE G_TYPE_DBUS_SERVER (g_dbus_server_get_type())
#DEFINE G_DBUS_SERVER(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), G_TYPE_DBUS_SERVER, GDBusServer))
#DEFINE G_DBUS_SERVER_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), G_TYPE_DBUS_SERVER, G))
#DEFINE G_IS_DBUS_SERVER(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), G_TYPE_DBUS_SERVER))
#DEFINE G_IS_CLASS_DBUS_SERVER(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), G_TYPE_DBUS_SERVER))
#DEFINE G_DBUS_SERVER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), G_TYPE_DBUS_SERVER, G))
DECLARE FUNCTION g_dbus_server_new_sync(BYVAL AS const gchar PTR, BYVAL AS GDBusServerFlags, BYVAL AS const gchar PTR, BYVAL AS GDBusAuthObserver PTR, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS GDBusServer PTR
DECLARE FUNCTION g_dbus_server_get_client_address(BYVAL AS GDBusServer PTR) AS const gchar PTR
DECLARE FUNCTION g_dbus_server_get_flags(BYVAL AS GDBusServer PTR) AS GDBusServerFlags
DECLARE FUNCTION g_dbus_server_get_guid(BYVAL AS GDBusServer PTR) AS const gchar PTR
DECLARE FUNCTION g_dbus_server_is_active(BYVAL AS GDBusServer PTR) AS gboolean
DECLARE SUB g_dbus_server_start(BYVAL AS GDBusServer PTR)
DECLARE SUB g_dbus_server_stop(BYVAL AS GDBusServer PTR)
TYPE _GDBusSignalInfo
  AS gint ref_count
  AS gchar PTR name
  AS GDBusArgInfo PTR args
  AS GDBusAnnotationInfo PTR annotations
END TYPE
DECLARE FUNCTION g_dbus_signal_info_ref(BYVAL AS GDBusSignalInfo PTR) AS GDBusSignalInfo PTR
DECLARE SUB g_dbus_signal_info_unref(BYVAL AS GDBusSignalInfo PTR)
TYPE GDBusSubtreeDispatchFunc AS FUNCTION CDECL(BYVAL AS GDBusConnection PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS gpointer PTR, BYVAL AS gpointer) AS const GDBusInterfaceVTable PTR
TYPE GDBusSubtreeEnumerateFunc AS FUNCTION CDECL(BYVAL AS GDBusConnection PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS gpointer) AS gchar PTR PTR
TYPE GDBusSubtreeIntrospectFunc AS FUNCTION CDECL(BYVAL AS GDBusConnection PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS gpointer) AS GDBusInterfaceInfo PTR PTR
TYPE _GDBusSubtreeVTable
  AS GDBusSubtreeEnumerateFunc enumerate
  AS GDBusSubtreeIntrospectFunc introspect
  AS GDBusSubtreeDispatchFunc dispatch
  AS gpointer padding(7)
END TYPE
TYPE _GDataInputStream
  AS GBufferedInputStream parent_instance
  AS GDataInputStreamPrivate PTR priv
END TYPE
DECLARE FUNCTION g_data_input_stream_get_type() AS GType
#DEFINE G_TYPE_DATA_INPUT_STREAM (g_data_input_stream_get_type())
#DEFINE G_DATA_INPUT_STREAM(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), G_TYPE_DATA_INPUT_STREAM, GDataInputStream))
#DEFINE G_DATA_INPUT_STREAM_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), G_TYPE_DATA_INPUT_STREAM, GDataInputStreamClass))
#DEFINE G_IS_DATA_INPUT_STREAM(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), G_TYPE_DATA_INPUT_STREAM))
#DEFINE G_IS_CLASS_DATA_INPUT_STREAM(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), G_TYPE_DATA_INPUT_STREAM))
#DEFINE G_DATA_INPUT_STREAM_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), G_TYPE_DATA_INPUT_STREAM, GDataInputStreamClass))
DECLARE FUNCTION g_data_input_stream_new(BYVAL AS GInputStream PTR) AS GDataInputStream PTR
DECLARE FUNCTION g_data_input_stream_get_byte_order(BYVAL AS GDataInputStream PTR) AS GDataStreamByteOrder
DECLARE FUNCTION g_data_input_stream_get_newline_type(BYVAL AS GDataInputStream PTR) AS GDataStreamNewlineType
DECLARE FUNCTION g_data_input_stream_read_byte(BYVAL AS GDataInputStream PTR, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS guchar /'?'/
DECLARE FUNCTION g_data_input_stream_read_int16(BYVAL AS GDataInputStream PTR, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS gint16
DECLARE FUNCTION g_data_input_stream_read_int32(BYVAL AS GDataInputStream PTR, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS gint32
DECLARE FUNCTION g_data_input_stream_read_int64(BYVAL AS GDataInputStream PTR, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS gint64
DECLARE FUNCTION g_data_input_stream_read_line(BYVAL AS GDataInputStream PTR, BYVAL AS gsize PTR, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS zstring /'gchar'/ PTR
DECLARE SUB g_data_input_stream_read_line_async(BYVAL AS GDataInputStream PTR, BYVAL AS gint, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
DECLARE FUNCTION g_data_input_stream_read_line_finish(BYVAL AS GDataInputStream PTR, BYVAL AS GAsyncResult PTR, BYVAL AS gsize PTR, BYVAL AS GError PTR PTR) AS zstring /'gchar'/ PTR
DECLARE FUNCTION g_data_input_stream_read_line_finish_utf8(BYVAL AS GDataInputStream PTR, BYVAL AS GAsyncResult PTR, BYVAL AS gsize PTR, BYVAL AS GError PTR PTR) AS zstring /'gchar'/ PTR
DECLARE FUNCTION g_data_input_stream_read_line_utf8(BYVAL AS GDataInputStream PTR, BYVAL AS gsize PTR, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS zstring /'gchar'/ PTR
DECLARE FUNCTION g_data_input_stream_read_uint16(BYVAL AS GDataInputStream PTR, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS guint16
DECLARE FUNCTION g_data_input_stream_read_uint32(BYVAL AS GDataInputStream PTR, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS guint32
DECLARE FUNCTION g_data_input_stream_read_uint64(BYVAL AS GDataInputStream PTR, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS guint64
DECLARE FUNCTION g_data_input_stream_read_until(BYVAL AS GDataInputStream PTR, BYVAL AS const gchar PTR, BYVAL AS gsize PTR, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS zstring /'gchar'/ PTR
DECLARE SUB g_data_input_stream_read_until_async(BYVAL AS GDataInputStream PTR, BYVAL AS const gchar PTR, BYVAL AS gint, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
DECLARE FUNCTION g_data_input_stream_read_until_finish(BYVAL AS GDataInputStream PTR, BYVAL AS GAsyncResult PTR, BYVAL AS gsize PTR, BYVAL AS GError PTR PTR) AS zstring /'gchar'/ PTR
DECLARE FUNCTION g_data_input_stream_read_upto(BYVAL AS GDataInputStream PTR, BYVAL AS const gchar PTR, BYVAL AS gssize, BYVAL AS gsize PTR, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS zstring /'gchar'/ PTR
DECLARE SUB g_data_input_stream_read_upto_async(BYVAL AS GDataInputStream PTR, BYVAL AS const gchar PTR, BYVAL AS gssize, BYVAL AS gint, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
DECLARE FUNCTION g_data_input_stream_read_upto_finish(BYVAL AS GDataInputStream PTR, BYVAL AS GAsyncResult PTR, BYVAL AS gsize PTR, BYVAL AS GError PTR PTR) AS zstring /'gchar'/ PTR
DECLARE SUB g_data_input_stream_set_byte_order(BYVAL AS GDataInputStream PTR, BYVAL AS GDataStreamByteOrder)
DECLARE SUB g_data_input_stream_set_newline_type(BYVAL AS GDataInputStream PTR, BYVAL AS GDataStreamNewlineType)
TYPE _GDataInputStreamClass
  AS GBufferedInputStreamClass parent_class
  _g_reserved1 AS SUB CDECL()
  _g_reserved2 AS SUB CDECL()
  _g_reserved3 AS SUB CDECL()
  _g_reserved4 AS SUB CDECL()
  _g_reserved5 AS SUB CDECL()
END TYPE
TYPE _GDataOutputStream
  AS GFilterOutputStream parent_instance
  AS GDataOutputStreamPrivate PTR priv
END TYPE
DECLARE FUNCTION g_data_output_stream_get_type() AS GType
#DEFINE G_TYPE_DATA_OUTPUT_STREAM (g_data_output_stream_get_type())
#DEFINE G_DATA_OUTPUT_STREAM(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), G_TYPE_DATA_OUTPUT_STREAM, GDataOutputStream))
#DEFINE G_DATA_OUTPUT_STREAM_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), G_TYPE_DATA_OUTPUT_STREAM, GDataOutputStreamClass))
#DEFINE G_IS_DATA_OUTPUT_STREAM(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), G_TYPE_DATA_OUTPUT_STREAM))
#DEFINE G_IS_CLASS_DATA_OUTPUT_STREAM(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), G_TYPE_DATA_OUTPUT_STREAM))
#DEFINE G_DATA_OUTPUT_STREAM_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), G_TYPE_DATA_OUTPUT_STREAM, GDataOutputStreamClass))
DECLARE FUNCTION g_data_output_stream_new(BYVAL AS GOutputStream PTR) AS GDataOutputStream PTR
DECLARE FUNCTION g_data_output_stream_get_byte_order(BYVAL AS GDataOutputStream PTR) AS GDataStreamByteOrder
DECLARE FUNCTION g_data_output_stream_put_byte(BYVAL AS GDataOutputStream PTR, BYVAL AS guchar /'?'/, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION g_data_output_stream_put_int16(BYVAL AS GDataOutputStream PTR, BYVAL AS gint16, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION g_data_output_stream_put_int32(BYVAL AS GDataOutputStream PTR, BYVAL AS gint32, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION g_data_output_stream_put_int64(BYVAL AS GDataOutputStream PTR, BYVAL AS gint64, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION g_data_output_stream_put_string(BYVAL AS GDataOutputStream PTR, BYVAL AS const gchar PTR, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION g_data_output_stream_put_uint16(BYVAL AS GDataOutputStream PTR, BYVAL AS guint16, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION g_data_output_stream_put_uint32(BYVAL AS GDataOutputStream PTR, BYVAL AS guint32, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION g_data_output_stream_put_uint64(BYVAL AS GDataOutputStream PTR, BYVAL AS guint64, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE SUB g_data_output_stream_set_byte_order(BYVAL AS GDataOutputStream PTR, BYVAL AS GDataStreamByteOrder)
TYPE _GDataOutputStreamClass
  AS GFilterOutputStreamClass parent_class
  _g_reserved1 AS SUB CDECL()
  _g_reserved2 AS SUB CDECL()
  _g_reserved3 AS SUB CDECL()
  _g_reserved4 AS SUB CDECL()
  _g_reserved5 AS SUB CDECL()
END TYPE
DECLARE FUNCTION g_data_stream_byte_order_get_type() AS GType
#DEFINE G_TYPE_DATA_STREAM_BYTE_ORDER (g_data_stream_byte_order_get_type())
DECLARE FUNCTION g_data_stream_newline_type_get_type() AS GType
#DEFINE G_TYPE_DATA_STREAM_NEWLINE_TYPE (g_data_stream_newline_type_get_type())
DECLARE FUNCTION g_datagram_based_get_type() AS GType
#DEFINE G_TYPE_DATAGRAM_BASED (g_datagram_based_get_type())
#DEFINE G_DATAGRAM_BASED(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), G_TYPE_DATAGRAM_BASED, GDatagramBased))
#DEFINE G_DATAGRAM_BASED_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), G_TYPE_DATAGRAM_BASED, GDatagramBasedInterface))
#DEFINE G_IS_DATAGRAM_BASED(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), G_TYPE_DATAGRAM_BASED))
#DEFINE G_DATAGRAM_BASED_GET_IFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE((obj), G_TYPE_DATAGRAM_BASED, GDatagramBasedInterface))
DECLARE FUNCTION g_datagram_based_condition_check(BYVAL AS GDatagramBased PTR, BYVAL AS GIOCondition) AS GIOCondition
DECLARE FUNCTION g_datagram_based_condition_wait(BYVAL AS GDatagramBased PTR, BYVAL AS GIOCondition, BYVAL AS gint64, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION g_datagram_based_create_source(BYVAL AS GDatagramBased PTR, BYVAL AS GIOCondition, BYVAL AS GCancellable PTR) AS GSource PTR
DECLARE FUNCTION g_datagram_based_receive_messages(BYVAL AS GDatagramBased PTR, BYVAL AS GInputMessage PTR, BYVAL AS guint, BYVAL AS gint, BYVAL AS gint64, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS gint
DECLARE FUNCTION g_datagram_based_send_messages(BYVAL AS GDatagramBased PTR, BYVAL AS GOutputMessage PTR, BYVAL AS guint, BYVAL AS gint, BYVAL AS gint64, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS gint
TYPE _GDatagramBasedInterface
  AS GTypeInterface g_iface
  receive_messages AS FUNCTION CDECL(BYVAL AS GDatagramBased PTR, BYVAL AS GInputMessage PTR, BYVAL AS guint, BYVAL AS gint, BYVAL AS gint64, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS gint
  send_messages AS FUNCTION CDECL(BYVAL AS GDatagramBased PTR, BYVAL AS GOutputMessage PTR, BYVAL AS guint, BYVAL AS gint, BYVAL AS gint64, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS gint
  create_source AS FUNCTION CDECL(BYVAL AS GDatagramBased PTR, BYVAL AS GIOCondition, BYVAL AS GCancellable PTR) AS GSource PTR
  condition_check AS FUNCTION CDECL(BYVAL AS GDatagramBased PTR, BYVAL AS GIOCondition) AS GIOCondition
  condition_wait AS FUNCTION CDECL(BYVAL AS GDatagramBased PTR, BYVAL AS GIOCondition, BYVAL AS gint64, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS gboolean
END TYPE
TYPE GDatagramBasedSourceFunc AS FUNCTION CDECL(BYVAL AS GDatagramBased PTR, BYVAL AS GIOCondition, BYVAL AS gpointer, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION g_desktop_app_info_get_type() AS GType
#DEFINE G_TYPE_DESKTOP_APP_INFO (g_desktop_app_info_get_type())
#DEFINE G_DESKTOP_APP_INFO(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), G_TYPE_DESKTOP_APP_INFO, GDesktopAppInfo))
#DEFINE G_DESKTOP_APP_INFO_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), G_TYPE_DESKTOP_APP_INFO, GDesktopAppInfoClass))
#DEFINE G_IS_DESKTOP_APP_INFO(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), G_TYPE_DESKTOP_APP_INFO))
#DEFINE G_IS_CLASS_DESKTOP_APP_INFO(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), G_TYPE_DESKTOP_APP_INFO))
#DEFINE G_DESKTOP_APP_INFO_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), G_TYPE_DESKTOP_APP_INFO, GDesktopAppInfoClass))
DECLARE FUNCTION g_desktop_app_info_new(BYVAL AS const gchar PTR) AS GDesktopAppInfo PTR
DECLARE FUNCTION g_desktop_app_info_new_from_filename(BYVAL AS const gchar PTR) AS GDesktopAppInfo PTR
DECLARE FUNCTION g_desktop_app_info_new_from_keyfile(BYVAL AS GKeyFile PTR) AS GDesktopAppInfo PTR
DECLARE FUNCTION g_desktop_app_info_get_implementations(BYVAL AS const gchar PTR) AS GList PTR
DECLARE FUNCTION g_desktop_app_info_search(BYVAL AS const gchar PTR) AS /'!'/ gchar PTR
DECLARE SUB g_desktop_app_info_set_desktop_env(BYVAL AS const gchar PTR)
DECLARE FUNCTION g_desktop_app_info_get_action_name(BYVAL AS GDesktopAppInfo PTR, BYVAL AS const gchar PTR) AS gchar PTR
DECLARE FUNCTION g_desktop_app_info_get_boolean(BYVAL AS GDesktopAppInfo PTR, BYVAL AS const gchar PTR) AS gboolean
DECLARE FUNCTION g_desktop_app_info_get_categories(BYVAL AS GDesktopAppInfo PTR) AS const gchar PTR
DECLARE FUNCTION g_desktop_app_info_get_filename(BYVAL AS GDesktopAppInfo PTR) AS const gchar PTR
DECLARE FUNCTION g_desktop_app_info_get_generic_name(BYVAL AS GDesktopAppInfo PTR) AS const gchar PTR
DECLARE FUNCTION g_desktop_app_info_get_is_hidden(BYVAL AS GDesktopAppInfo PTR) AS gboolean
DECLARE FUNCTION g_desktop_app_info_get_keywords(BYVAL AS GDesktopAppInfo PTR) AS const gchar ptr const /'const gchar* const'/ PTR
DECLARE FUNCTION g_desktop_app_info_get_locale_string(BYVAL AS GDesktopAppInfo PTR, BYVAL AS const gchar PTR) AS zstring /'gchar'/ PTR
DECLARE FUNCTION g_desktop_app_info_get_nodisplay(BYVAL AS GDesktopAppInfo PTR) AS gboolean
DECLARE FUNCTION g_desktop_app_info_get_show_in(BYVAL AS GDesktopAppInfo PTR, BYVAL AS const gchar PTR) AS gboolean
DECLARE FUNCTION g_desktop_app_info_get_startup_wm_class(BYVAL AS GDesktopAppInfo PTR) AS const gchar PTR
DECLARE FUNCTION g_desktop_app_info_get_string(BYVAL AS GDesktopAppInfo PTR, BYVAL AS const gchar PTR) AS zstring /'gchar'/ PTR
DECLARE FUNCTION g_desktop_app_info_get_string_list(BYVAL AS GDesktopAppInfo PTR, BYVAL AS const gchar PTR, BYVAL AS gsize PTR) AS gchar PTR PTR
DECLARE FUNCTION g_desktop_app_info_has_key(BYVAL AS GDesktopAppInfo PTR, BYVAL AS const gchar PTR) AS gboolean
DECLARE SUB g_desktop_app_info_launch_action(BYVAL AS GDesktopAppInfo PTR, BYVAL AS const gchar PTR, BYVAL AS GAppLaunchContext PTR)
DECLARE FUNCTION g_desktop_app_info_launch_uris_as_manager(BYVAL AS GDesktopAppInfo PTR, BYVAL AS GList PTR, BYVAL AS GAppLaunchContext PTR, BYVAL AS GSpawnFlags, BYVAL AS GSpawnChildSetupFunc, BYVAL AS gpointer, BYVAL AS GDesktopAppLaunchCallback, BYVAL AS gpointer, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION g_desktop_app_info_launch_uris_as_manager_with_fds(BYVAL AS GDesktopAppInfo PTR, BYVAL AS GList PTR, BYVAL AS GAppLaunchContext PTR, BYVAL AS GSpawnFlags, BYVAL AS GSpawnChildSetupFunc, BYVAL AS gpointer, BYVAL AS GDesktopAppLaunchCallback, BYVAL AS gpointer, BYVAL AS gint, BYVAL AS gint, BYVAL AS gint, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION g_desktop_app_info_list_actions(BYVAL AS GDesktopAppInfo PTR) AS const gchar ptr const /'const gchar* const'/ PTR
TYPE _GDesktopAppInfoClass
  AS GObjectClass parent_class
END TYPE
DECLARE FUNCTION g_desktop_app_info_lookup_get_type() AS GType
#DEFINE G_TYPE_DESKTOP_APP_INFO_LOOKUP (g_desktop_app_info_lookup_get_type())
#DEFINE G_DESKTOP_APP_INFO_LOOKUP(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), G_TYPE_DESKTOP_APP_INFO_LOOKUP, GDesktopAppInfoLookup))
#DEFINE G_DESKTOP_APP_INFO_LOOKUP_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), G_TYPE_DESKTOP_APP_INFO_LOOKUP, GDesktopAppInfoLookupIface))
#DEFINE G_IS_DESKTOP_APP_INFO_LOOKUP(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), G_TYPE_DESKTOP_APP_INFO_LOOKUP))
#DEFINE G_DESKTOP_APP_INFO_LOOKUP_GET_IFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE((obj), G_TYPE_DESKTOP_APP_INFO_LOOKUP, GDesktopAppInfoLookupIface))
DECLARE FUNCTION g_desktop_app_info_lookup_get_default_for_uri_scheme(BYVAL AS GDesktopAppInfoLookup PTR, BYVAL AS const gchar PTR) AS GAppInfo PTR
TYPE _GDesktopAppInfoLookupIface
  AS GTypeInterface g_iface
  get_default_for_uri_scheme AS FUNCTION CDECL(BYVAL AS GDesktopAppInfoLookup PTR, BYVAL AS const gchar PTR) AS GAppInfo PTR
END TYPE
DECLARE FUNCTION g_drive_get_type() AS GType
#DEFINE G_TYPE_DRIVE (g_drive_get_type())
#DEFINE G_DRIVE(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), G_TYPE_DRIVE, GDrive))
#DEFINE G_DRIVE_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), G_TYPE_DRIVE, GDriveIface))
#DEFINE G_IS_DRIVE(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), G_TYPE_DRIVE))
#DEFINE G_DRIVE_GET_IFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE((obj), G_TYPE_DRIVE, GDriveIface))
DECLARE FUNCTION g_drive_can_eject(BYVAL AS GDrive PTR) AS gboolean
DECLARE FUNCTION g_drive_can_poll_for_media(BYVAL AS GDrive PTR) AS gboolean
DECLARE FUNCTION g_drive_can_start(BYVAL AS GDrive PTR) AS gboolean
DECLARE FUNCTION g_drive_can_start_degraded(BYVAL AS GDrive PTR) AS gboolean
DECLARE FUNCTION g_drive_can_stop(BYVAL AS GDrive PTR) AS gboolean
DECLARE SUB g_drive_eject(BYVAL AS GDrive PTR, BYVAL AS GMountUnmountFlags, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
DECLARE FUNCTION g_drive_eject_finish(BYVAL AS GDrive PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE SUB g_drive_eject_with_operation(BYVAL AS GDrive PTR, BYVAL AS GMountUnmountFlags, BYVAL AS GMountOperation PTR, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
DECLARE FUNCTION g_drive_eject_with_operation_finish(BYVAL AS GDrive PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION g_drive_enumerate_identifiers(BYVAL AS GDrive PTR) AS zstring /'gchar'/ PTR PTR
DECLARE FUNCTION g_drive_get_icon(BYVAL AS GDrive PTR) AS GIcon PTR
DECLARE FUNCTION g_drive_get_identifier(BYVAL AS GDrive PTR, BYVAL AS const gchar PTR) AS zstring /'gchar'/ PTR
DECLARE FUNCTION g_drive_get_name(BYVAL AS GDrive PTR) AS zstring /'gchar'/ PTR
DECLARE FUNCTION g_drive_get_sort_key(BYVAL AS GDrive PTR) AS const gchar PTR
DECLARE FUNCTION g_drive_get_start_stop_type(BYVAL AS GDrive PTR) AS GDriveStartStopType
DECLARE FUNCTION g_drive_get_symbolic_icon(BYVAL AS GDrive PTR) AS GIcon PTR
DECLARE FUNCTION g_drive_get_volumes(BYVAL AS GDrive PTR) AS GList PTR
DECLARE FUNCTION g_drive_has_media(BYVAL AS GDrive PTR) AS gboolean
DECLARE FUNCTION g_drive_has_volumes(BYVAL AS GDrive PTR) AS gboolean
DECLARE FUNCTION g_drive_is_media_check_automatic(BYVAL AS GDrive PTR) AS gboolean
DECLARE FUNCTION g_drive_is_media_removable(BYVAL AS GDrive PTR) AS gboolean
DECLARE FUNCTION g_drive_is_removable(BYVAL AS GDrive PTR) AS gboolean
DECLARE SUB g_drive_poll_for_media(BYVAL AS GDrive PTR, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
DECLARE FUNCTION g_drive_poll_for_media_finish(BYVAL AS GDrive PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE SUB g_drive_start(BYVAL AS GDrive PTR, BYVAL AS GDriveStartFlags, BYVAL AS GMountOperation PTR, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
DECLARE FUNCTION g_drive_start_finish(BYVAL AS GDrive PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE SUB g_drive_stop(BYVAL AS GDrive PTR, BYVAL AS GMountUnmountFlags, BYVAL AS GMountOperation PTR, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
DECLARE FUNCTION g_drive_stop_finish(BYVAL AS GDrive PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS gboolean
TYPE _GDriveIface
  AS GTypeInterface g_iface
  changed AS SUB CDECL(BYVAL AS GDrive PTR)
  disconnected AS SUB CDECL(BYVAL AS GDrive PTR)
  eject_button AS SUB CDECL(BYVAL AS GDrive PTR)
  get_name AS FUNCTION CDECL(BYVAL AS GDrive PTR) AS zstring /'gchar'/ PTR
  get_icon AS FUNCTION CDECL(BYVAL AS GDrive PTR) AS GIcon PTR
  has_volumes AS FUNCTION CDECL(BYVAL AS GDrive PTR) AS gboolean
  get_volumes AS FUNCTION CDECL(BYVAL AS GDrive PTR) AS GList PTR
  is_media_removable AS FUNCTION CDECL(BYVAL AS GDrive PTR) AS gboolean
  has_media AS FUNCTION CDECL(BYVAL AS GDrive PTR) AS gboolean
  is_media_check_automatic AS FUNCTION CDECL(BYVAL AS GDrive PTR) AS gboolean
  can_eject AS FUNCTION CDECL(BYVAL AS GDrive PTR) AS gboolean
  can_poll_for_media AS FUNCTION CDECL(BYVAL AS GDrive PTR) AS gboolean
  eject AS SUB CDECL(BYVAL AS GDrive PTR, BYVAL AS GMountUnmountFlags, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
  eject_finish AS FUNCTION CDECL(BYVAL AS GDrive PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS gboolean
  poll_for_media AS SUB CDECL(BYVAL AS GDrive PTR, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
  poll_for_media_finish AS FUNCTION CDECL(BYVAL AS GDrive PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS gboolean
  get_identifier AS FUNCTION CDECL(BYVAL AS GDrive PTR, BYVAL AS const gchar PTR) AS zstring /'gchar'/ PTR
  enumerate_identifiers AS FUNCTION CDECL(BYVAL AS GDrive PTR) AS zstring /'gchar'/ PTR PTR
  get_start_stop_type AS FUNCTION CDECL(BYVAL AS GDrive PTR) AS GDriveStartStopType
  can_start AS FUNCTION CDECL(BYVAL AS GDrive PTR) AS gboolean
  can_start_degraded AS FUNCTION CDECL(BYVAL AS GDrive PTR) AS gboolean
  start AS SUB CDECL(BYVAL AS GDrive PTR, BYVAL AS GDriveStartFlags, BYVAL AS GMountOperation PTR, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
  start_finish AS FUNCTION CDECL(BYVAL AS GDrive PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS gboolean
  can_stop AS FUNCTION CDECL(BYVAL AS GDrive PTR) AS gboolean
  stop AS SUB CDECL(BYVAL AS GDrive PTR, BYVAL AS GMountUnmountFlags, BYVAL AS GMountOperation PTR, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
  stop_finish AS FUNCTION CDECL(BYVAL AS GDrive PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS gboolean
  stop_button AS SUB CDECL(BYVAL AS GDrive PTR)
  eject_with_operation AS SUB CDECL(BYVAL AS GDrive PTR, BYVAL AS GMountUnmountFlags, BYVAL AS GMountOperation PTR, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
  eject_with_operation_finish AS FUNCTION CDECL(BYVAL AS GDrive PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS gboolean
  get_sort_key AS FUNCTION CDECL(BYVAL AS GDrive PTR) AS const gchar PTR
  get_symbolic_icon AS FUNCTION CDECL(BYVAL AS GDrive PTR) AS GIcon PTR
  is_removable AS FUNCTION CDECL(BYVAL AS GDrive PTR) AS gboolean
END TYPE
DECLARE FUNCTION g_drive_start_stop_type_get_type() AS GType
#DEFINE G_TYPE_DRIVE_START_STOP_TYPE (g_drive_start_stop_type_get_type())
DECLARE FUNCTION g_dtls_client_connection_get_type() AS GType
#DEFINE G_TYPE_DTLS_CLIENT_CONNECTION (g_dtls_client_connection_get_type())
#DEFINE G_DTLS_CLIENT_CONNECTION(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), G_TYPE_DTLS_CLIENT_CONNECTION, GDtlsClientConnection))
#DEFINE G_DTLS_CLIENT_CONNECTION_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), G_TYPE_DTLS_CLIENT_CONNECTION, GDtlsClientConnectionInterface))
#DEFINE G_IS_DTLS_CLIENT_CONNECTION(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), G_TYPE_DTLS_CLIENT_CONNECTION))
#DEFINE G_DTLS_CLIENT_CONNECTION_GET_IFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE((obj), G_TYPE_DTLS_CLIENT_CONNECTION, GDtlsClientConnectionInterface))
DECLARE FUNCTION g_dtls_client_connection_new(BYVAL AS GDatagramBased PTR, BYVAL AS GSocketConnectable PTR, BYVAL AS GError PTR PTR) AS GDatagramBased PTR
DECLARE FUNCTION g_dtls_client_connection_get_accepted_cas(BYVAL AS GDtlsClientConnection PTR) AS GList PTR
DECLARE FUNCTION g_dtls_client_connection_get_server_identity(BYVAL AS GDtlsClientConnection PTR) AS GSocketConnectable PTR
DECLARE FUNCTION g_dtls_client_connection_get_validation_flags(BYVAL AS GDtlsClientConnection PTR) AS GTlsCertificateFlags
DECLARE SUB g_dtls_client_connection_set_server_identity(BYVAL AS GDtlsClientConnection PTR, BYVAL AS GSocketConnectable PTR)
DECLARE SUB g_dtls_client_connection_set_validation_flags(BYVAL AS GDtlsClientConnection PTR, BYVAL AS GTlsCertificateFlags)
TYPE _GDtlsClientConnectionInterface
  AS GTypeInterface g_iface
END TYPE
DECLARE FUNCTION g_dtls_connection_get_type() AS GType
#DEFINE G_TYPE_DTLS_CONNECTION (g_dtls_connection_get_type())
#DEFINE G_DTLS_CONNECTION(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), G_TYPE_DTLS_CONNECTION, GDtlsConnection))
#DEFINE G_DTLS_CONNECTION_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), G_TYPE_DTLS_CONNECTION, GDtlsConnectionInterface))
#DEFINE G_IS_DTLS_CONNECTION(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), G_TYPE_DTLS_CONNECTION))
#DEFINE G_DTLS_CONNECTION_GET_IFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE((obj), G_TYPE_DTLS_CONNECTION, GDtlsConnectionInterface))
DECLARE FUNCTION g_dtls_connection_close(BYVAL AS GDtlsConnection PTR, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE SUB g_dtls_connection_close_async(BYVAL AS GDtlsConnection PTR, BYVAL AS gint /'int'/, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
DECLARE FUNCTION g_dtls_connection_close_finish(BYVAL AS GDtlsConnection PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION g_dtls_connection_emit_accept_certificate(BYVAL AS GDtlsConnection PTR, BYVAL AS GTlsCertificate PTR, BYVAL AS GTlsCertificateFlags) AS gboolean
DECLARE FUNCTION g_dtls_connection_get_certificate(BYVAL AS GDtlsConnection PTR) AS GTlsCertificate PTR
DECLARE FUNCTION g_dtls_connection_get_database(BYVAL AS GDtlsConnection PTR) AS GTlsDatabase PTR
DECLARE FUNCTION g_dtls_connection_get_interaction(BYVAL AS GDtlsConnection PTR) AS GTlsInteraction PTR
DECLARE FUNCTION g_dtls_connection_get_negotiated_protocol(BYVAL AS GDtlsConnection PTR) AS const gchar PTR
DECLARE FUNCTION g_dtls_connection_get_peer_certificate(BYVAL AS GDtlsConnection PTR) AS GTlsCertificate PTR
DECLARE FUNCTION g_dtls_connection_get_peer_certificate_errors(BYVAL AS GDtlsConnection PTR) AS GTlsCertificateFlags
DECLARE FUNCTION g_dtls_connection_get_rehandshake_mode(BYVAL AS GDtlsConnection PTR) AS GTlsRehandshakeMode
DECLARE FUNCTION g_dtls_connection_get_require_close_notify(BYVAL AS GDtlsConnection PTR) AS gboolean
DECLARE FUNCTION g_dtls_connection_handshake(BYVAL AS GDtlsConnection PTR, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE SUB g_dtls_connection_handshake_async(BYVAL AS GDtlsConnection PTR, BYVAL AS gint /'int'/, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
DECLARE FUNCTION g_dtls_connection_handshake_finish(BYVAL AS GDtlsConnection PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE SUB g_dtls_connection_set_advertised_protocols(BYVAL AS GDtlsConnection PTR, BYVAL AS const gchar ptr const /'const gchar* const'/ PTR)
DECLARE SUB g_dtls_connection_set_certificate(BYVAL AS GDtlsConnection PTR, BYVAL AS GTlsCertificate PTR)
DECLARE SUB g_dtls_connection_set_database(BYVAL AS GDtlsConnection PTR, BYVAL AS GTlsDatabase PTR)
DECLARE SUB g_dtls_connection_set_interaction(BYVAL AS GDtlsConnection PTR, BYVAL AS GTlsInteraction PTR)
DECLARE SUB g_dtls_connection_set_rehandshake_mode(BYVAL AS GDtlsConnection PTR, BYVAL AS GTlsRehandshakeMode)
DECLARE SUB g_dtls_connection_set_require_close_notify(BYVAL AS GDtlsConnection PTR, BYVAL AS gboolean)
DECLARE FUNCTION g_dtls_connection_shutdown(BYVAL AS GDtlsConnection PTR, BYVAL AS gboolean, BYVAL AS gboolean, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE SUB g_dtls_connection_shutdown_async(BYVAL AS GDtlsConnection PTR, BYVAL AS gboolean, BYVAL AS gboolean, BYVAL AS gint /'int'/, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
DECLARE FUNCTION g_dtls_connection_shutdown_finish(BYVAL AS GDtlsConnection PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS gboolean
TYPE _GDtlsConnectionInterface
  AS GTypeInterface g_iface
  accept_certificate AS FUNCTION CDECL(BYVAL AS GDtlsConnection PTR, BYVAL AS GTlsCertificate PTR, BYVAL AS GTlsCertificateFlags) AS gboolean
  handshake AS FUNCTION CDECL(BYVAL AS GDtlsConnection PTR, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS gboolean
  handshake_async AS SUB CDECL(BYVAL AS GDtlsConnection PTR, BYVAL AS gint /'int'/, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
  handshake_finish AS FUNCTION CDECL(BYVAL AS GDtlsConnection PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS gboolean
  shutdown AS FUNCTION CDECL(BYVAL AS GDtlsConnection PTR, BYVAL AS gboolean, BYVAL AS gboolean, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS gboolean
  shutdown_async AS SUB CDECL(BYVAL AS GDtlsConnection PTR, BYVAL AS gboolean, BYVAL AS gboolean, BYVAL AS gint /'int'/, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
  shutdown_finish AS FUNCTION CDECL(BYVAL AS GDtlsConnection PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS gboolean
  set_advertised_protocols AS SUB CDECL(BYVAL AS GDtlsConnection PTR, BYVAL AS const gchar ptr const /'const gchar* const'/ PTR)
  get_negotiated_protocol AS FUNCTION CDECL(BYVAL AS GDtlsConnection PTR) AS const gchar PTR
END TYPE
DECLARE FUNCTION g_dtls_server_connection_get_type() AS GType
#DEFINE G_TYPE_DTLS_SERVER_CONNECTION (g_dtls_server_connection_get_type())
#DEFINE G_DTLS_SERVER_CONNECTION(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), G_TYPE_DTLS_SERVER_CONNECTION, GDtlsServerConnection))
#DEFINE G_DTLS_SERVER_CONNECTION_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), G_TYPE_DTLS_SERVER_CONNECTION, GDtlsServerConnectionInterface))
#DEFINE G_IS_DTLS_SERVER_CONNECTION(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), G_TYPE_DTLS_SERVER_CONNECTION))
#DEFINE G_DTLS_SERVER_CONNECTION_GET_IFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE((obj), G_TYPE_DTLS_SERVER_CONNECTION, GDtlsServerConnectionInterface))
DECLARE FUNCTION g_dtls_server_connection_new(BYVAL AS GDatagramBased PTR, BYVAL AS GTlsCertificate PTR, BYVAL AS GError PTR PTR) AS GDatagramBased PTR
TYPE _GDtlsServerConnectionInterface
  AS GTypeInterface g_iface
END TYPE
DECLARE FUNCTION g_emblem_get_type() AS GType
#DEFINE G_TYPE_EMBLEM (g_emblem_get_type())
#DEFINE G_EMBLEM(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), G_TYPE_EMBLEM, GEmblem))
#DEFINE G_EMBLEM_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), G_TYPE_EMBLEM, GEmblemClass))
#DEFINE G_IS_EMBLEM(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), G_TYPE_EMBLEM))
#DEFINE G_IS_CLASS_EMBLEM(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), G_TYPE_EMBLEM))
#DEFINE G_EMBLEM_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), G_TYPE_EMBLEM, GEmblemClass))
DECLARE FUNCTION g_emblem_new(BYVAL AS GIcon PTR) AS GEmblem PTR
DECLARE FUNCTION g_emblem_new_with_origin(BYVAL AS GIcon PTR, BYVAL AS GEmblemOrigin) AS GEmblem PTR
DECLARE FUNCTION g_emblem_get_icon(BYVAL AS GEmblem PTR) AS GIcon PTR
DECLARE FUNCTION g_emblem_get_origin(BYVAL AS GEmblem PTR) AS GEmblemOrigin
TYPE _GEmblemedIcon
  AS GObject parent_instance
  AS GEmblemedIconPrivate PTR priv
END TYPE
DECLARE FUNCTION g_emblem_origin_get_type() AS GType
#DEFINE G_TYPE_EMBLEM_ORIGIN (g_emblem_origin_get_type())
DECLARE FUNCTION g_emblemed_icon_get_type() AS GType
#DEFINE G_TYPE_EMBLEMED_ICON (g_emblemed_icon_get_type())
#DEFINE G_EMBLEMED_ICON(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), G_TYPE_EMBLEMED_ICON, GEmblemedIcon))
#DEFINE G_EMBLEMED_ICON_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), G_TYPE_EMBLEMED_ICON, GEmblemedIconClass))
#DEFINE G_IS_EMBLEMED_ICON(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), G_TYPE_EMBLEMED_ICON))
#DEFINE G_IS_CLASS_EMBLEMED_ICON(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), G_TYPE_EMBLEMED_ICON))
#DEFINE G_EMBLEMED_ICON_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), G_TYPE_EMBLEMED_ICON, GEmblemedIconClass))
DECLARE FUNCTION g_emblemed_icon_new(BYVAL AS GIcon PTR, BYVAL AS GEmblem PTR) AS GIcon PTR
DECLARE SUB g_emblemed_icon_add_emblem(BYVAL AS GEmblemedIcon PTR, BYVAL AS GEmblem PTR)
DECLARE SUB g_emblemed_icon_clear_emblems(BYVAL AS GEmblemedIcon PTR)
DECLARE FUNCTION g_emblemed_icon_get_emblems(BYVAL AS GEmblemedIcon PTR) AS GList PTR
DECLARE FUNCTION g_emblemed_icon_get_icon(BYVAL AS GEmblemedIcon PTR) AS GIcon PTR
TYPE _GEmblemedIconClass
  AS GObjectClass parent_class
END TYPE
DECLARE FUNCTION g_file_get_type() AS GType
#DEFINE G_TYPE_FILE (g_file_get_type())
#DEFINE G_FILE(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), G_TYPE_FILE, GFile))
#DEFINE G_FILE_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), G_TYPE_FILE, GFileIface))
#DEFINE G_IS_FILE(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), G_TYPE_FILE))
#DEFINE G_FILE_GET_IFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE((obj), G_TYPE_FILE, GFileIface))
DECLARE FUNCTION g_file_new_build_filename(BYVAL AS const gchar PTR, ...) AS GFile PTR
DECLARE FUNCTION g_file_new_for_commandline_arg(BYVAL AS const gchar PTR) AS GFile PTR
DECLARE FUNCTION g_file_new_for_commandline_arg_and_cwd(BYVAL AS const gchar PTR, BYVAL AS const gchar PTR) AS GFile PTR
DECLARE FUNCTION g_file_new_for_path(BYVAL AS const gchar PTR) AS GFile PTR
DECLARE FUNCTION g_file_new_for_uri(BYVAL AS const gchar PTR) AS GFile PTR
DECLARE FUNCTION g_file_new_tmp(BYVAL AS const gchar PTR, BYVAL AS GFileIOStream PTR PTR, BYVAL AS GError PTR PTR) AS GFile PTR
DECLARE FUNCTION g_file_parse_name(BYVAL AS const gchar PTR) AS GFile PTR
DECLARE FUNCTION g_file_append_to(BYVAL AS GFile PTR, BYVAL AS GFileCreateFlags, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS GFileOutputStream PTR
DECLARE SUB g_file_append_to_async(BYVAL AS GFile PTR, BYVAL AS GFileCreateFlags, BYVAL AS gint /'int'/, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
DECLARE FUNCTION g_file_append_to_finish(BYVAL AS GFile PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS GFileOutputStream PTR
DECLARE FUNCTION g_file_copy(BYVAL AS GFile PTR, BYVAL AS GFile PTR, BYVAL AS GFileCopyFlags, BYVAL AS GCancellable PTR, BYVAL AS GFileProgressCallback, BYVAL AS gpointer, BYVAL AS GError PTR PTR) AS gboolean
DECLARE SUB g_file_copy_async(BYVAL AS GFile PTR, BYVAL AS GFile PTR, BYVAL AS GFileCopyFlags, BYVAL AS gint /'int'/, BYVAL AS GCancellable PTR, BYVAL AS GFileProgressCallback, BYVAL AS gpointer, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
DECLARE FUNCTION g_file_copy_attributes(BYVAL AS GFile PTR, BYVAL AS GFile PTR, BYVAL AS GFileCopyFlags, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION g_file_copy_finish(BYVAL AS GFile PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION g_file_create(BYVAL AS GFile PTR, BYVAL AS GFileCreateFlags, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS GFileOutputStream PTR
DECLARE SUB g_file_create_async(BYVAL AS GFile PTR, BYVAL AS GFileCreateFlags, BYVAL AS gint /'int'/, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
DECLARE FUNCTION g_file_create_finish(BYVAL AS GFile PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS GFileOutputStream PTR
DECLARE FUNCTION g_file_create_readwrite(BYVAL AS GFile PTR, BYVAL AS GFileCreateFlags, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS GFileIOStream PTR
DECLARE SUB g_file_create_readwrite_async(BYVAL AS GFile PTR, BYVAL AS GFileCreateFlags, BYVAL AS gint /'int'/, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
DECLARE FUNCTION g_file_create_readwrite_finish(BYVAL AS GFile PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS GFileIOStream PTR
DECLARE FUNCTION g_file_delete(BYVAL AS GFile PTR, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE SUB g_file_delete_async(BYVAL AS GFile PTR, BYVAL AS gint /'int'/, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
DECLARE FUNCTION g_file_delete_finish(BYVAL AS GFile PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION g_file_dup(BYVAL AS GFile PTR) AS GFile PTR
DECLARE SUB g_file_eject_mountable(BYVAL AS GFile PTR, BYVAL AS GMountUnmountFlags, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
DECLARE FUNCTION g_file_eject_mountable_finish(BYVAL AS GFile PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE SUB g_file_eject_mountable_with_operation(BYVAL AS GFile PTR, BYVAL AS GMountUnmountFlags, BYVAL AS GMountOperation PTR, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
DECLARE FUNCTION g_file_eject_mountable_with_operation_finish(BYVAL AS GFile PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION g_file_enumerate_children(BYVAL AS GFile PTR, BYVAL AS const gchar PTR, BYVAL AS GFileQueryInfoFlags, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS GFileEnumerator PTR
DECLARE SUB g_file_enumerate_children_async(BYVAL AS GFile PTR, BYVAL AS const gchar PTR, BYVAL AS GFileQueryInfoFlags, BYVAL AS gint /'int'/, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
DECLARE FUNCTION g_file_enumerate_children_finish(BYVAL AS GFile PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS GFileEnumerator PTR
DECLARE FUNCTION g_file_equal(BYVAL AS GFile PTR, BYVAL AS GFile PTR) AS gboolean
DECLARE FUNCTION g_file_find_enclosing_mount(BYVAL AS GFile PTR, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS GMount PTR
DECLARE SUB g_file_find_enclosing_mount_async(BYVAL AS GFile PTR, BYVAL AS gint /'int'/, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
DECLARE FUNCTION g_file_find_enclosing_mount_finish(BYVAL AS GFile PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS GMount PTR
DECLARE FUNCTION g_file_get_basename(BYVAL AS GFile PTR) AS zstring /'gchar'/ PTR
DECLARE FUNCTION g_file_get_child(BYVAL AS GFile PTR, BYVAL AS const gchar PTR) AS GFile PTR
DECLARE FUNCTION g_file_get_child_for_display_name(BYVAL AS GFile PTR, BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR) AS GFile PTR
DECLARE FUNCTION g_file_get_parent(BYVAL AS GFile PTR) AS GFile PTR
DECLARE FUNCTION g_file_get_parse_name(BYVAL AS GFile PTR) AS zstring /'gchar'/ PTR
DECLARE FUNCTION g_file_get_path(BYVAL AS GFile PTR) AS zstring /'gchar'/ PTR
DECLARE FUNCTION g_file_get_relative_path(BYVAL AS GFile PTR, BYVAL AS GFile PTR) AS zstring /'gchar'/ PTR
DECLARE FUNCTION g_file_get_uri(BYVAL AS GFile PTR) AS zstring /'gchar'/ PTR
DECLARE FUNCTION g_file_get_uri_scheme(BYVAL AS GFile PTR) AS zstring /'gchar'/ PTR
DECLARE FUNCTION g_file_has_parent(BYVAL AS GFile PTR, BYVAL AS GFile PTR) AS gboolean
DECLARE FUNCTION g_file_has_prefix(BYVAL AS GFile PTR, BYVAL AS GFile PTR) AS gboolean
DECLARE FUNCTION g_file_has_uri_scheme(BYVAL AS GFile PTR, BYVAL AS const gchar PTR) AS gboolean
DECLARE FUNCTION g_file_hash(BYVAL AS gconstpointer) AS guint
DECLARE FUNCTION g_file_is_native(BYVAL AS GFile PTR) AS gboolean
DECLARE FUNCTION g_file_load_bytes(BYVAL AS GFile PTR, BYVAL AS GCancellable PTR, BYVAL AS gchar PTR PTR, BYVAL AS GError PTR PTR) AS GBytes PTR
DECLARE SUB g_file_load_bytes_async(BYVAL AS GFile PTR, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
DECLARE FUNCTION g_file_load_bytes_finish(BYVAL AS GFile PTR, BYVAL AS GAsyncResult PTR, BYVAL AS gchar PTR PTR, BYVAL AS GError PTR PTR) AS GBytes PTR
DECLARE FUNCTION g_file_load_contents(BYVAL AS GFile PTR, BYVAL AS GCancellable PTR, BYVAL AS zstring /'gchar'/ PTR PTR, BYVAL AS gsize PTR, BYVAL AS zstring /'gchar'/ PTR PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE SUB g_file_load_contents_async(BYVAL AS GFile PTR, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
DECLARE FUNCTION g_file_load_contents_finish(BYVAL AS GFile PTR, BYVAL AS GAsyncResult PTR, BYVAL AS zstring /'gchar'/ PTR PTR, BYVAL AS gsize PTR, BYVAL AS zstring /'gchar'/ PTR PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE SUB g_file_load_partial_contents_async(BYVAL AS GFile PTR, BYVAL AS GCancellable PTR, BYVAL AS GFileReadMoreCallback, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
DECLARE FUNCTION g_file_load_partial_contents_finish(BYVAL AS GFile PTR, BYVAL AS GAsyncResult PTR, BYVAL AS zstring /'gchar'/ PTR PTR, BYVAL AS gsize PTR, BYVAL AS zstring /'gchar'/ PTR PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION g_file_make_directory(BYVAL AS GFile PTR, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE SUB g_file_make_directory_async(BYVAL AS GFile PTR, BYVAL AS gint /'int'/, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
DECLARE FUNCTION g_file_make_directory_finish(BYVAL AS GFile PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION g_file_make_directory_with_parents(BYVAL AS GFile PTR, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION g_file_make_symbolic_link(BYVAL AS GFile PTR, BYVAL AS const gchar PTR, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION g_file_measure_disk_usage(BYVAL AS GFile PTR, BYVAL AS GFileMeasureFlags, BYVAL AS GCancellable PTR, BYVAL AS GFileMeasureProgressCallback, BYVAL AS gpointer, BYVAL AS guint64 PTR, BYVAL AS guint64 PTR, BYVAL AS guint64 PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE SUB g_file_measure_disk_usage_async(BYVAL AS GFile PTR, BYVAL AS GFileMeasureFlags, BYVAL AS gint, BYVAL AS GCancellable PTR, BYVAL AS GFileMeasureProgressCallback, BYVAL AS gpointer, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
DECLARE FUNCTION g_file_measure_disk_usage_finish(BYVAL AS GFile PTR, BYVAL AS GAsyncResult PTR, BYVAL AS guint64 PTR, BYVAL AS guint64 PTR, BYVAL AS guint64 PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION g_file_monitor_ ALIAS "g_file_monitor"(BYVAL AS GFile PTR, BYVAL AS GFileMonitorFlags, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS GFileMonitor PTR
DECLARE FUNCTION g_file_monitor_directory(BYVAL AS GFile PTR, BYVAL AS GFileMonitorFlags, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS GFileMonitor PTR
DECLARE FUNCTION g_file_monitor_file(BYVAL AS GFile PTR, BYVAL AS GFileMonitorFlags, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS GFileMonitor PTR
DECLARE SUB g_file_mount_enclosing_volume(BYVAL AS GFile PTR, BYVAL AS GMountMountFlags, BYVAL AS GMountOperation PTR, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
DECLARE FUNCTION g_file_mount_enclosing_volume_finish(BYVAL AS GFile PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE SUB g_file_mount_mountable(BYVAL AS GFile PTR, BYVAL AS GMountMountFlags, BYVAL AS GMountOperation PTR, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
DECLARE FUNCTION g_file_mount_mountable_finish(BYVAL AS GFile PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS GFile PTR
DECLARE FUNCTION g_file_move(BYVAL AS GFile PTR, BYVAL AS GFile PTR, BYVAL AS GFileCopyFlags, BYVAL AS GCancellable PTR, BYVAL AS GFileProgressCallback, BYVAL AS gpointer, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION g_file_open_readwrite(BYVAL AS GFile PTR, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS GFileIOStream PTR
DECLARE SUB g_file_open_readwrite_async(BYVAL AS GFile PTR, BYVAL AS gint /'int'/, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
DECLARE FUNCTION g_file_open_readwrite_finish(BYVAL AS GFile PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS GFileIOStream PTR
DECLARE FUNCTION g_file_peek_path(BYVAL AS GFile PTR) AS const gchar PTR
DECLARE SUB g_file_poll_mountable(BYVAL AS GFile PTR, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
DECLARE FUNCTION g_file_poll_mountable_finish(BYVAL AS GFile PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION g_file_query_default_handler(BYVAL AS GFile PTR, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS GAppInfo PTR
DECLARE SUB g_file_query_default_handler_async(BYVAL AS GFile PTR, BYVAL AS gint /'int'/, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
DECLARE FUNCTION g_file_query_default_handler_finish(BYVAL AS GFile PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS GAppInfo PTR
DECLARE FUNCTION g_file_query_exists(BYVAL AS GFile PTR, BYVAL AS GCancellable PTR) AS gboolean
DECLARE FUNCTION g_file_query_file_type(BYVAL AS GFile PTR, BYVAL AS GFileQueryInfoFlags, BYVAL AS GCancellable PTR) AS GFileType
DECLARE FUNCTION g_file_query_filesystem_info(BYVAL AS GFile PTR, BYVAL AS const gchar PTR, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS GFileInfo PTR
DECLARE SUB g_file_query_filesystem_info_async(BYVAL AS GFile PTR, BYVAL AS const gchar PTR, BYVAL AS gint /'int'/, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
DECLARE FUNCTION g_file_query_filesystem_info_finish(BYVAL AS GFile PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS GFileInfo PTR
DECLARE FUNCTION g_file_query_info(BYVAL AS GFile PTR, BYVAL AS const gchar PTR, BYVAL AS GFileQueryInfoFlags, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS GFileInfo PTR
DECLARE SUB g_file_query_info_async(BYVAL AS GFile PTR, BYVAL AS const gchar PTR, BYVAL AS GFileQueryInfoFlags, BYVAL AS gint /'int'/, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
DECLARE FUNCTION g_file_query_info_finish(BYVAL AS GFile PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS GFileInfo PTR
DECLARE FUNCTION g_file_query_settable_attributes(BYVAL AS GFile PTR, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS GFileAttributeInfoList PTR
DECLARE FUNCTION g_file_query_writable_namespaces(BYVAL AS GFile PTR, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS GFileAttributeInfoList PTR
DECLARE FUNCTION g_file_read(BYVAL AS GFile PTR, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS GFileInputStream PTR
DECLARE SUB g_file_read_async(BYVAL AS GFile PTR, BYVAL AS gint /'int'/, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
DECLARE FUNCTION g_file_read_finish(BYVAL AS GFile PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS GFileInputStream PTR
DECLARE FUNCTION g_file_replace(BYVAL AS GFile PTR, BYVAL AS const gchar PTR, BYVAL AS gboolean, BYVAL AS GFileCreateFlags, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS GFileOutputStream PTR
DECLARE SUB g_file_replace_async(BYVAL AS GFile PTR, BYVAL AS const gchar PTR, BYVAL AS gboolean, BYVAL AS GFileCreateFlags, BYVAL AS gint /'int'/, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
DECLARE FUNCTION g_file_replace_contents(BYVAL AS GFile PTR, BYVAL AS const gchar PTR, BYVAL AS gsize, BYVAL AS const gchar PTR, BYVAL AS gboolean, BYVAL AS GFileCreateFlags, BYVAL AS zstring /'gchar'/ PTR PTR, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE SUB g_file_replace_contents_async(BYVAL AS GFile PTR, BYVAL AS const gchar PTR, BYVAL AS gsize, BYVAL AS const gchar PTR, BYVAL AS gboolean, BYVAL AS GFileCreateFlags, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
DECLARE SUB g_file_replace_contents_bytes_async(BYVAL AS GFile PTR, BYVAL AS GBytes PTR, BYVAL AS const gchar PTR, BYVAL AS gboolean, BYVAL AS GFileCreateFlags, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
DECLARE FUNCTION g_file_replace_contents_finish(BYVAL AS GFile PTR, BYVAL AS GAsyncResult PTR, BYVAL AS zstring /'gchar'/ PTR PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION g_file_replace_finish(BYVAL AS GFile PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS GFileOutputStream PTR
DECLARE FUNCTION g_file_replace_readwrite(BYVAL AS GFile PTR, BYVAL AS const gchar PTR, BYVAL AS gboolean, BYVAL AS GFileCreateFlags, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS GFileIOStream PTR
DECLARE SUB g_file_replace_readwrite_async(BYVAL AS GFile PTR, BYVAL AS const gchar PTR, BYVAL AS gboolean, BYVAL AS GFileCreateFlags, BYVAL AS gint /'int'/, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
DECLARE FUNCTION g_file_replace_readwrite_finish(BYVAL AS GFile PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS GFileIOStream PTR
DECLARE FUNCTION g_file_resolve_relative_path(BYVAL AS GFile PTR, BYVAL AS const gchar PTR) AS GFile PTR
DECLARE FUNCTION g_file_set_attribute(BYVAL AS GFile PTR, BYVAL AS const gchar PTR, BYVAL AS GFileAttributeType, BYVAL AS gpointer, BYVAL AS GFileQueryInfoFlags, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION g_file_set_attribute_byte_string(BYVAL AS GFile PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS GFileQueryInfoFlags, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION g_file_set_attribute_int32(BYVAL AS GFile PTR, BYVAL AS const gchar PTR, BYVAL AS gint32, BYVAL AS GFileQueryInfoFlags, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION g_file_set_attribute_int64(BYVAL AS GFile PTR, BYVAL AS const gchar PTR, BYVAL AS gint64, BYVAL AS GFileQueryInfoFlags, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION g_file_set_attribute_string(BYVAL AS GFile PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS GFileQueryInfoFlags, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION g_file_set_attribute_uint32(BYVAL AS GFile PTR, BYVAL AS const gchar PTR, BYVAL AS guint32, BYVAL AS GFileQueryInfoFlags, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION g_file_set_attribute_uint64(BYVAL AS GFile PTR, BYVAL AS const gchar PTR, BYVAL AS guint64, BYVAL AS GFileQueryInfoFlags, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE SUB g_file_set_attributes_async(BYVAL AS GFile PTR, BYVAL AS GFileInfo PTR, BYVAL AS GFileQueryInfoFlags, BYVAL AS gint /'int'/, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
DECLARE FUNCTION g_file_set_attributes_finish(BYVAL AS GFile PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GFileInfo PTR PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION g_file_set_attributes_from_info(BYVAL AS GFile PTR, BYVAL AS GFileInfo PTR, BYVAL AS GFileQueryInfoFlags, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION g_file_set_display_name(BYVAL AS GFile PTR, BYVAL AS const gchar PTR, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS GFile PTR
DECLARE SUB g_file_set_display_name_async(BYVAL AS GFile PTR, BYVAL AS const gchar PTR, BYVAL AS gint /'int'/, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
DECLARE FUNCTION g_file_set_display_name_finish(BYVAL AS GFile PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS GFile PTR
DECLARE SUB g_file_start_mountable(BYVAL AS GFile PTR, BYVAL AS GDriveStartFlags, BYVAL AS GMountOperation PTR, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
DECLARE FUNCTION g_file_start_mountable_finish(BYVAL AS GFile PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE SUB g_file_stop_mountable(BYVAL AS GFile PTR, BYVAL AS GMountUnmountFlags, BYVAL AS GMountOperation PTR, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
DECLARE FUNCTION g_file_stop_mountable_finish(BYVAL AS GFile PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION g_file_supports_thread_contexts(BYVAL AS GFile PTR) AS gboolean
DECLARE FUNCTION g_file_trash(BYVAL AS GFile PTR, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE SUB g_file_trash_async(BYVAL AS GFile PTR, BYVAL AS gint /'int'/, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
DECLARE FUNCTION g_file_trash_finish(BYVAL AS GFile PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE SUB g_file_unmount_mountable(BYVAL AS GFile PTR, BYVAL AS GMountUnmountFlags, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
DECLARE FUNCTION g_file_unmount_mountable_finish(BYVAL AS GFile PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE SUB g_file_unmount_mountable_with_operation(BYVAL AS GFile PTR, BYVAL AS GMountUnmountFlags, BYVAL AS GMountOperation PTR, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
DECLARE FUNCTION g_file_unmount_mountable_with_operation_finish(BYVAL AS GFile PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS gboolean
TYPE _GFileAttributeInfo
  AS zstring /'gchar'/ PTR name
  AS GFileAttributeType type
  AS GFileAttributeInfoFlags flags
END TYPE
TYPE _GFileAttributeInfoList
  AS GFileAttributeInfo PTR infos
  AS gint /'int'/ n_infos
END TYPE
DECLARE FUNCTION g_file_attribute_info_list_new() AS GFileAttributeInfoList PTR
DECLARE SUB g_file_attribute_info_list_add(BYVAL AS GFileAttributeInfoList PTR, BYVAL AS const gchar PTR, BYVAL AS GFileAttributeType, BYVAL AS GFileAttributeInfoFlags)
DECLARE FUNCTION g_file_attribute_info_list_dup(BYVAL AS GFileAttributeInfoList PTR) AS GFileAttributeInfoList PTR
DECLARE FUNCTION g_file_attribute_info_list_lookup(BYVAL AS GFileAttributeInfoList PTR, BYVAL AS const gchar PTR) AS const GFileAttributeInfo PTR
DECLARE FUNCTION g_file_attribute_info_list_ref(BYVAL AS GFileAttributeInfoList PTR) AS GFileAttributeInfoList PTR
DECLARE SUB g_file_attribute_info_list_unref(BYVAL AS GFileAttributeInfoList PTR)
DECLARE FUNCTION g_file_attribute_matcher_new(BYVAL AS const gchar PTR) AS GFileAttributeMatcher PTR
DECLARE FUNCTION g_file_attribute_matcher_enumerate_namespace(BYVAL AS GFileAttributeMatcher PTR, BYVAL AS const gchar PTR) AS gboolean
DECLARE FUNCTION g_file_attribute_matcher_enumerate_next(BYVAL AS GFileAttributeMatcher PTR) AS const gchar PTR
DECLARE FUNCTION g_file_attribute_matcher_matches(BYVAL AS GFileAttributeMatcher PTR, BYVAL AS const gchar PTR) AS gboolean
DECLARE FUNCTION g_file_attribute_matcher_matches_only(BYVAL AS GFileAttributeMatcher PTR, BYVAL AS const gchar PTR) AS gboolean
DECLARE FUNCTION g_file_attribute_matcher_ref(BYVAL AS GFileAttributeMatcher PTR) AS GFileAttributeMatcher PTR
DECLARE FUNCTION g_file_attribute_matcher_subtract(BYVAL AS GFileAttributeMatcher PTR, BYVAL AS GFileAttributeMatcher PTR) AS GFileAttributeMatcher PTR
DECLARE FUNCTION g_file_attribute_matcher_to_string(BYVAL AS GFileAttributeMatcher PTR) AS zstring /'gchar'/ PTR
DECLARE SUB g_file_attribute_matcher_unref(BYVAL AS GFileAttributeMatcher PTR)
DECLARE FUNCTION g_file_attribute_status_get_type() AS GType
#DEFINE G_TYPE_FILE_ATTRIBUTE_STATUS (g_file_attribute_status_get_type())
DECLARE FUNCTION g_file_attribute_type_get_type() AS GType
#DEFINE G_TYPE_FILE_ATTRIBUTE_TYPE (g_file_attribute_type_get_type())
DECLARE FUNCTION g_file_descriptor_based_get_type() AS GType
#DEFINE G_TYPE_FILE_DESCRIPTOR_BASED (g_file_descriptor_based_get_type())
#DEFINE G_FILE_DESCRIPTOR_BASED(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), G_TYPE_FILE_DESCRIPTOR_BASED, GFileDescriptorBased))
#DEFINE G_FILE_DESCRIPTOR_BASED_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), G_TYPE_FILE_DESCRIPTOR_BASED, GFileDescriptorBasedIface))
#DEFINE G_IS_FILE_DESCRIPTOR_BASED(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), G_TYPE_FILE_DESCRIPTOR_BASED))
#DEFINE G_FILE_DESCRIPTOR_BASED_GET_IFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE((obj), G_TYPE_FILE_DESCRIPTOR_BASED, GFileDescriptorBasedIface))
DECLARE FUNCTION g_file_descriptor_based_get_fd(BYVAL AS GFileDescriptorBased PTR) AS gint /'int'/
TYPE _GFileDescriptorBasedIface
  AS GTypeInterface g_iface
  get_fd AS FUNCTION CDECL(BYVAL AS GFileDescriptorBased PTR) AS gint /'int'/
END TYPE
TYPE _GFileEnumerator
  AS GObject parent_instance
  AS GFileEnumeratorPrivate PTR priv
END TYPE
DECLARE FUNCTION g_file_enumerator_get_type() AS GType
#DEFINE G_TYPE_FILE_ENUMERATOR (g_file_enumerator_get_type())
#DEFINE G_FILE_ENUMERATOR(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), G_TYPE_FILE_ENUMERATOR, GFileEnumerator))
#DEFINE G_FILE_ENUMERATOR_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), G_TYPE_FILE_ENUMERATOR, GFileEnumeratorClass))
#DEFINE G_IS_FILE_ENUMERATOR(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), G_TYPE_FILE_ENUMERATOR))
#DEFINE G_IS_CLASS_FILE_ENUMERATOR(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), G_TYPE_FILE_ENUMERATOR))
#DEFINE G_FILE_ENUMERATOR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), G_TYPE_FILE_ENUMERATOR, GFileEnumeratorClass))
DECLARE FUNCTION g_file_enumerator_close(BYVAL AS GFileEnumerator PTR, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE SUB g_file_enumerator_close_async(BYVAL AS GFileEnumerator PTR, BYVAL AS gint /'int'/, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
DECLARE FUNCTION g_file_enumerator_close_finish(BYVAL AS GFileEnumerator PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION g_file_enumerator_get_child(BYVAL AS GFileEnumerator PTR, BYVAL AS GFileInfo PTR) AS GFile PTR
DECLARE FUNCTION g_file_enumerator_get_container(BYVAL AS GFileEnumerator PTR) AS GFile PTR
DECLARE FUNCTION g_file_enumerator_has_pending(BYVAL AS GFileEnumerator PTR) AS gboolean
DECLARE FUNCTION g_file_enumerator_is_closed(BYVAL AS GFileEnumerator PTR) AS gboolean
DECLARE FUNCTION g_file_enumerator_iterate(BYVAL AS GFileEnumerator PTR, BYVAL AS GFileInfo PTR PTR, BYVAL AS GFile PTR PTR, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION g_file_enumerator_next_file(BYVAL AS GFileEnumerator PTR, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS GFileInfo PTR
DECLARE SUB g_file_enumerator_next_files_async(BYVAL AS GFileEnumerator PTR, BYVAL AS gint /'int'/, BYVAL AS gint /'int'/, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
DECLARE FUNCTION g_file_enumerator_next_files_finish(BYVAL AS GFileEnumerator PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS GList PTR
DECLARE SUB g_file_enumerator_set_pending(BYVAL AS GFileEnumerator PTR, BYVAL AS gboolean)
TYPE _GFileEnumeratorClass
  AS GObjectClass parent_class
  next_file AS FUNCTION CDECL(BYVAL AS GFileEnumerator PTR, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS GFileInfo PTR
  close_fn AS FUNCTION CDECL(BYVAL AS GFileEnumerator PTR, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS gboolean
  next_files_async AS SUB CDECL(BYVAL AS GFileEnumerator PTR, BYVAL AS gint /'int'/, BYVAL AS gint /'int'/, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
  next_files_finish AS FUNCTION CDECL(BYVAL AS GFileEnumerator PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS GList PTR
  close_async AS SUB CDECL(BYVAL AS GFileEnumerator PTR, BYVAL AS gint /'int'/, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
  close_finish AS FUNCTION CDECL(BYVAL AS GFileEnumerator PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS gboolean
  _g_reserved1 AS SUB CDECL()
  _g_reserved2 AS SUB CDECL()
  _g_reserved3 AS SUB CDECL()
  _g_reserved4 AS SUB CDECL()
  _g_reserved5 AS SUB CDECL()
  _g_reserved6 AS SUB CDECL()
  _g_reserved7 AS SUB CDECL()
END TYPE
TYPE _GFileIOStream
  AS GIOStream parent_instance
  AS GFileIOStreamPrivate PTR priv
END TYPE
DECLARE FUNCTION g_file_io_stream_get_type() AS GType
#DEFINE G_TYPE_FILE_IO_STREAM (g_file_io_stream_get_type())
#DEFINE G_FILE_IO_STREAM(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), G_TYPE_FILE_IO_STREAM, GFileIOStream))
#DEFINE G_FILE_IO_STREAM_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), G_TYPE_FILE_IO_STREAM, GFileIOStreamClass))
#DEFINE G_IS_FILE_IO_STREAM(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), G_TYPE_FILE_IO_STREAM))
#DEFINE G_IS_CLASS_FILE_IO_STREAM(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), G_TYPE_FILE_IO_STREAM))
#DEFINE G_FILE_IO_STREAM_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), G_TYPE_FILE_IO_STREAM, GFileIOStreamClass))
DECLARE FUNCTION g_file_io_stream_get_etag(BYVAL AS GFileIOStream PTR) AS zstring /'gchar'/ PTR
DECLARE FUNCTION g_file_io_stream_query_info(BYVAL AS GFileIOStream PTR, BYVAL AS const gchar PTR, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS GFileInfo PTR
DECLARE SUB g_file_io_stream_query_info_async(BYVAL AS GFileIOStream PTR, BYVAL AS const gchar PTR, BYVAL AS gint /'int'/, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
DECLARE FUNCTION g_file_io_stream_query_info_finish(BYVAL AS GFileIOStream PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS GFileInfo PTR
TYPE _GFileIOStreamClass
  AS GIOStreamClass parent_class
  tell AS FUNCTION CDECL(BYVAL AS GFileIOStream PTR) AS gint32 /'goffset'/
  can_seek AS FUNCTION CDECL(BYVAL AS GFileIOStream PTR) AS gboolean
  seek AS FUNCTION CDECL(BYVAL AS GFileIOStream PTR, BYVAL AS gint32 /'goffset'/, BYVAL AS GSeekType, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS gboolean
  can_truncate AS FUNCTION CDECL(BYVAL AS GFileIOStream PTR) AS gboolean
  truncate_fn AS FUNCTION CDECL(BYVAL AS GFileIOStream PTR, BYVAL AS gint32 /'goffset'/, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS gboolean
  query_info AS FUNCTION CDECL(BYVAL AS GFileIOStream PTR, BYVAL AS const gchar PTR, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS GFileInfo PTR
  query_info_async AS SUB CDECL(BYVAL AS GFileIOStream PTR, BYVAL AS const gchar PTR, BYVAL AS gint /'int'/, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
  query_info_finish AS FUNCTION CDECL(BYVAL AS GFileIOStream PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS GFileInfo PTR
  get_etag AS FUNCTION CDECL(BYVAL AS GFileIOStream PTR) AS zstring /'gchar'/ PTR
  _g_reserved1 AS SUB CDECL()
  _g_reserved2 AS SUB CDECL()
  _g_reserved3 AS SUB CDECL()
  _g_reserved4 AS SUB CDECL()
  _g_reserved5 AS SUB CDECL()
END TYPE
DECLARE FUNCTION g_file_icon_get_type() AS GType
#DEFINE G_TYPE_FILE_ICON (g_file_icon_get_type())
#DEFINE G_FILE_ICON(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), G_TYPE_FILE_ICON, GFileIcon))
#DEFINE G_FILE_ICON_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), G_TYPE_FILE_ICON, GFileIconClass))
#DEFINE G_IS_FILE_ICON(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), G_TYPE_FILE_ICON))
#DEFINE G_IS_CLASS_FILE_ICON(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), G_TYPE_FILE_ICON))
#DEFINE G_FILE_ICON_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), G_TYPE_FILE_ICON, GFileIconClass))
DECLARE FUNCTION g_file_icon_new(BYVAL AS GFile PTR) AS GIcon PTR
DECLARE FUNCTION g_file_icon_get_file(BYVAL AS GFileIcon PTR) AS GFile PTR
TYPE _GFileIface
  AS GTypeInterface g_iface
  dup AS FUNCTION CDECL(BYVAL AS GFile PTR) AS GFile PTR
  hash AS FUNCTION CDECL(BYVAL AS GFile PTR) AS guint
  equal AS FUNCTION CDECL(BYVAL AS GFile PTR, BYVAL AS GFile PTR) AS gboolean
  is_native AS FUNCTION CDECL(BYVAL AS GFile PTR) AS gboolean
  has_uri_scheme AS FUNCTION CDECL(BYVAL AS GFile PTR, BYVAL AS const gchar PTR) AS gboolean
  get_uri_scheme AS FUNCTION CDECL(BYVAL AS GFile PTR) AS zstring /'gchar'/ PTR
  get_basename AS FUNCTION CDECL(BYVAL AS GFile PTR) AS zstring /'gchar'/ PTR
  get_path AS FUNCTION CDECL(BYVAL AS GFile PTR) AS zstring /'gchar'/ PTR
  get_uri AS FUNCTION CDECL(BYVAL AS GFile PTR) AS zstring /'gchar'/ PTR
  get_parse_name AS FUNCTION CDECL(BYVAL AS GFile PTR) AS zstring /'gchar'/ PTR
  get_parent AS FUNCTION CDECL(BYVAL AS GFile PTR) AS GFile PTR
  prefix_matches AS FUNCTION CDECL(BYVAL AS GFile PTR, BYVAL AS GFile PTR) AS gboolean
  get_relative_path AS FUNCTION CDECL(BYVAL AS GFile PTR, BYVAL AS GFile PTR) AS zstring /'gchar'/ PTR
  resolve_relative_path AS FUNCTION CDECL(BYVAL AS GFile PTR, BYVAL AS const gchar PTR) AS GFile PTR
  get_child_for_display_name AS FUNCTION CDECL(BYVAL AS GFile PTR, BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR) AS GFile PTR
  enumerate_children AS FUNCTION CDECL(BYVAL AS GFile PTR, BYVAL AS const gchar PTR, BYVAL AS GFileQueryInfoFlags, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS GFileEnumerator PTR
  enumerate_children_async AS SUB CDECL(BYVAL AS GFile PTR, BYVAL AS const gchar PTR, BYVAL AS GFileQueryInfoFlags, BYVAL AS gint /'int'/, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
  enumerate_children_finish AS FUNCTION CDECL(BYVAL AS GFile PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS GFileEnumerator PTR
  query_info AS FUNCTION CDECL(BYVAL AS GFile PTR, BYVAL AS const gchar PTR, BYVAL AS GFileQueryInfoFlags, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS GFileInfo PTR
  query_info_async AS SUB CDECL(BYVAL AS GFile PTR, BYVAL AS const gchar PTR, BYVAL AS GFileQueryInfoFlags, BYVAL AS gint /'int'/, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
  query_info_finish AS FUNCTION CDECL(BYVAL AS GFile PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS GFileInfo PTR
  query_filesystem_info AS FUNCTION CDECL(BYVAL AS GFile PTR, BYVAL AS const gchar PTR, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS GFileInfo PTR
  query_filesystem_info_async AS SUB CDECL(BYVAL AS GFile PTR, BYVAL AS const gchar PTR, BYVAL AS gint /'int'/, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
  query_filesystem_info_finish AS FUNCTION CDECL(BYVAL AS GFile PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS GFileInfo PTR
  find_enclosing_mount AS FUNCTION CDECL(BYVAL AS GFile PTR, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS GMount PTR
  find_enclosing_mount_async AS SUB CDECL(BYVAL AS GFile PTR, BYVAL AS gint /'int'/, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
  find_enclosing_mount_finish AS FUNCTION CDECL(BYVAL AS GFile PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS GMount PTR
  set_display_name AS FUNCTION CDECL(BYVAL AS GFile PTR, BYVAL AS const gchar PTR, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS GFile PTR
  set_display_name_async AS SUB CDECL(BYVAL AS GFile PTR, BYVAL AS const gchar PTR, BYVAL AS gint /'int'/, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
  set_display_name_finish AS FUNCTION CDECL(BYVAL AS GFile PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS GFile PTR
  query_settable_attributes AS FUNCTION CDECL(BYVAL AS GFile PTR, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS GFileAttributeInfoList PTR
  _query_settable_attributes_async AS SUB CDECL()
  _query_settable_attributes_finish AS SUB CDECL()
  query_writable_namespaces AS FUNCTION CDECL(BYVAL AS GFile PTR, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS GFileAttributeInfoList PTR
  _query_writable_namespaces_async AS SUB CDECL()
  _query_writable_namespaces_finish AS SUB CDECL()
  set_attribute AS FUNCTION CDECL(BYVAL AS GFile PTR, BYVAL AS const gchar PTR, BYVAL AS GFileAttributeType, BYVAL AS gpointer, BYVAL AS GFileQueryInfoFlags, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS gboolean
  set_attributes_from_info AS FUNCTION CDECL(BYVAL AS GFile PTR, BYVAL AS GFileInfo PTR, BYVAL AS GFileQueryInfoFlags, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS gboolean
  set_attributes_async AS SUB CDECL(BYVAL AS GFile PTR, BYVAL AS GFileInfo PTR, BYVAL AS GFileQueryInfoFlags, BYVAL AS gint /'int'/, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
  set_attributes_finish AS FUNCTION CDECL(BYVAL AS GFile PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GFileInfo PTR PTR, BYVAL AS GError PTR PTR) AS gboolean
  read_fn AS FUNCTION CDECL(BYVAL AS GFile PTR, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS GFileInputStream PTR
  read_async AS SUB CDECL(BYVAL AS GFile PTR, BYVAL AS gint /'int'/, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
  read_finish AS FUNCTION CDECL(BYVAL AS GFile PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS GFileInputStream PTR
  append_to AS FUNCTION CDECL(BYVAL AS GFile PTR, BYVAL AS GFileCreateFlags, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS GFileOutputStream PTR
  append_to_async AS SUB CDECL(BYVAL AS GFile PTR, BYVAL AS GFileCreateFlags, BYVAL AS gint /'int'/, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
  append_to_finish AS FUNCTION CDECL(BYVAL AS GFile PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS GFileOutputStream PTR
  create AS FUNCTION CDECL(BYVAL AS GFile PTR, BYVAL AS GFileCreateFlags, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS GFileOutputStream PTR
  create_async AS SUB CDECL(BYVAL AS GFile PTR, BYVAL AS GFileCreateFlags, BYVAL AS gint /'int'/, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
  create_finish AS FUNCTION CDECL(BYVAL AS GFile PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS GFileOutputStream PTR
  replace AS FUNCTION CDECL(BYVAL AS GFile PTR, BYVAL AS const gchar PTR, BYVAL AS gboolean, BYVAL AS GFileCreateFlags, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS GFileOutputStream PTR
  replace_async AS SUB CDECL(BYVAL AS GFile PTR, BYVAL AS const gchar PTR, BYVAL AS gboolean, BYVAL AS GFileCreateFlags, BYVAL AS gint /'int'/, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
  replace_finish AS FUNCTION CDECL(BYVAL AS GFile PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS GFileOutputStream PTR
  delete_file AS FUNCTION CDECL(BYVAL AS GFile PTR, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS gboolean
  delete_file_async AS SUB CDECL(BYVAL AS GFile PTR, BYVAL AS gint /'int'/, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
  delete_file_finish AS FUNCTION CDECL(BYVAL AS GFile PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS gboolean
  trash AS FUNCTION CDECL(BYVAL AS GFile PTR, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS gboolean
  trash_async AS SUB CDECL(BYVAL AS GFile PTR, BYVAL AS gint /'int'/, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
  trash_finish AS FUNCTION CDECL(BYVAL AS GFile PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS gboolean
  make_directory AS FUNCTION CDECL(BYVAL AS GFile PTR, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS gboolean
  make_directory_async AS SUB CDECL(BYVAL AS GFile PTR, BYVAL AS gint /'int'/, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
  make_directory_finish AS FUNCTION CDECL(BYVAL AS GFile PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS gboolean
  make_symbolic_link AS FUNCTION CDECL(BYVAL AS GFile PTR, BYVAL AS const gchar PTR, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS gboolean
  _make_symbolic_link_async AS SUB CDECL()
  _make_symbolic_link_finish AS SUB CDECL()
  copy AS FUNCTION CDECL(BYVAL AS GFile PTR, BYVAL AS GFile PTR, BYVAL AS GFileCopyFlags, BYVAL AS GCancellable PTR, BYVAL AS GFileProgressCallback, BYVAL AS gpointer, BYVAL AS GError PTR PTR) AS gboolean
  copy_async AS SUB CDECL(BYVAL AS GFile PTR, BYVAL AS GFile PTR, BYVAL AS GFileCopyFlags, BYVAL AS gint /'int'/, BYVAL AS GCancellable PTR, BYVAL AS GFileProgressCallback, BYVAL AS gpointer, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
  copy_finish AS FUNCTION CDECL(BYVAL AS GFile PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS gboolean
  move AS FUNCTION CDECL(BYVAL AS GFile PTR, BYVAL AS GFile PTR, BYVAL AS GFileCopyFlags, BYVAL AS GCancellable PTR, BYVAL AS GFileProgressCallback, BYVAL AS gpointer, BYVAL AS GError PTR PTR) AS gboolean
  _move_async AS SUB CDECL()
  _move_finish AS SUB CDECL()
  mount_mountable AS SUB CDECL(BYVAL AS GFile PTR, BYVAL AS GMountMountFlags, BYVAL AS GMountOperation PTR, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
  mount_mountable_finish AS FUNCTION CDECL(BYVAL AS GFile PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS GFile PTR
  unmount_mountable AS SUB CDECL(BYVAL AS GFile PTR, BYVAL AS GMountUnmountFlags, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
  unmount_mountable_finish AS FUNCTION CDECL(BYVAL AS GFile PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS gboolean
  eject_mountable AS SUB CDECL(BYVAL AS GFile PTR, BYVAL AS GMountUnmountFlags, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
  eject_mountable_finish AS FUNCTION CDECL(BYVAL AS GFile PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS gboolean
  mount_enclosing_volume AS SUB CDECL(BYVAL AS GFile PTR, BYVAL AS GMountMountFlags, BYVAL AS GMountOperation PTR, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
  mount_enclosing_volume_finish AS FUNCTION CDECL(BYVAL AS GFile PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS gboolean
  monitor_dir AS FUNCTION CDECL(BYVAL AS GFile PTR, BYVAL AS GFileMonitorFlags, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS GFileMonitor PTR
  monitor_file AS FUNCTION CDECL(BYVAL AS GFile PTR, BYVAL AS GFileMonitorFlags, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS GFileMonitor PTR
  open_readwrite AS FUNCTION CDECL(BYVAL AS GFile PTR, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS GFileIOStream PTR
  open_readwrite_async AS SUB CDECL(BYVAL AS GFile PTR, BYVAL AS gint /'int'/, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
  open_readwrite_finish AS FUNCTION CDECL(BYVAL AS GFile PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS GFileIOStream PTR
  create_readwrite AS FUNCTION CDECL(BYVAL AS GFile PTR, BYVAL AS GFileCreateFlags, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS GFileIOStream PTR
  create_readwrite_async AS SUB CDECL(BYVAL AS GFile PTR, BYVAL AS GFileCreateFlags, BYVAL AS gint /'int'/, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
  create_readwrite_finish AS FUNCTION CDECL(BYVAL AS GFile PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS GFileIOStream PTR
  replace_readwrite AS FUNCTION CDECL(BYVAL AS GFile PTR, BYVAL AS const gchar PTR, BYVAL AS gboolean, BYVAL AS GFileCreateFlags, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS GFileIOStream PTR
  replace_readwrite_async AS SUB CDECL(BYVAL AS GFile PTR, BYVAL AS const gchar PTR, BYVAL AS gboolean, BYVAL AS GFileCreateFlags, BYVAL AS gint /'int'/, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
  replace_readwrite_finish AS FUNCTION CDECL(BYVAL AS GFile PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS GFileIOStream PTR
  start_mountable AS SUB CDECL(BYVAL AS GFile PTR, BYVAL AS GDriveStartFlags, BYVAL AS GMountOperation PTR, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
  start_mountable_finish AS FUNCTION CDECL(BYVAL AS GFile PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS gboolean
  stop_mountable AS SUB CDECL(BYVAL AS GFile PTR, BYVAL AS GMountUnmountFlags, BYVAL AS GMountOperation PTR, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
  stop_mountable_finish AS FUNCTION CDECL(BYVAL AS GFile PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS gboolean
  AS gboolean supports_thread_contexts
  unmount_mountable_with_operation AS SUB CDECL(BYVAL AS GFile PTR, BYVAL AS GMountUnmountFlags, BYVAL AS GMountOperation PTR, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
  unmount_mountable_with_operation_finish AS FUNCTION CDECL(BYVAL AS GFile PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS gboolean
  eject_mountable_with_operation AS SUB CDECL(BYVAL AS GFile PTR, BYVAL AS GMountUnmountFlags, BYVAL AS GMountOperation PTR, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
  eject_mountable_with_operation_finish AS FUNCTION CDECL(BYVAL AS GFile PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS gboolean
  poll_mountable AS SUB CDECL(BYVAL AS GFile PTR, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
  poll_mountable_finish AS FUNCTION CDECL(BYVAL AS GFile PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS gboolean
  measure_disk_usage AS FUNCTION CDECL(BYVAL AS GFile PTR, BYVAL AS GFileMeasureFlags, BYVAL AS GCancellable PTR, BYVAL AS GFileMeasureProgressCallback, BYVAL AS gpointer, BYVAL AS guint64 PTR, BYVAL AS guint64 PTR, BYVAL AS guint64 PTR, BYVAL AS GError PTR PTR) AS gboolean
  measure_disk_usage_async AS SUB CDECL(BYVAL AS GFile PTR, BYVAL AS GFileMeasureFlags, BYVAL AS gint, BYVAL AS GCancellable PTR, BYVAL AS GFileMeasureProgressCallback, BYVAL AS gpointer, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
  measure_disk_usage_finish AS FUNCTION CDECL(BYVAL AS GFile PTR, BYVAL AS GAsyncResult PTR, BYVAL AS guint64 PTR, BYVAL AS guint64 PTR, BYVAL AS guint64 PTR, BYVAL AS GError PTR PTR) AS gboolean
END TYPE
DECLARE FUNCTION g_file_info_get_type() AS GType
#DEFINE G_TYPE_FILE_INFO (g_file_info_get_type())
#DEFINE G_FILE_INFO(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), G_TYPE_FILE_INFO, GFileInfo))
#DEFINE G_FILE_INFO_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), G_TYPE_FILE_INFO, GFileInfoClass))
#DEFINE G_IS_FILE_INFO(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), G_TYPE_FILE_INFO))
#DEFINE G_IS_CLASS_FILE_INFO(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), G_TYPE_FILE_INFO))
#DEFINE G_FILE_INFO_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), G_TYPE_FILE_INFO, GFileInfoClass))
DECLARE FUNCTION g_file_info_new() AS GFileInfo PTR
DECLARE SUB g_file_info_clear_status(BYVAL AS GFileInfo PTR)
DECLARE SUB g_file_info_copy_into(BYVAL AS GFileInfo PTR, BYVAL AS GFileInfo PTR)
DECLARE FUNCTION g_file_info_dup(BYVAL AS GFileInfo PTR) AS GFileInfo PTR
DECLARE FUNCTION g_file_info_get_attribute_as_string(BYVAL AS GFileInfo PTR, BYVAL AS const gchar PTR) AS zstring /'gchar'/ PTR
DECLARE FUNCTION g_file_info_get_attribute_boolean(BYVAL AS GFileInfo PTR, BYVAL AS const gchar PTR) AS gboolean
DECLARE FUNCTION g_file_info_get_attribute_byte_string(BYVAL AS GFileInfo PTR, BYVAL AS const gchar PTR) AS const gchar PTR
DECLARE FUNCTION g_file_info_get_attribute_data(BYVAL AS GFileInfo PTR, BYVAL AS const gchar PTR, BYVAL AS GFileAttributeType PTR, BYVAL AS gpointer PTR, BYVAL AS GFileAttributeStatus PTR) AS gboolean
DECLARE FUNCTION g_file_info_get_attribute_int32(BYVAL AS GFileInfo PTR, BYVAL AS const gchar PTR) AS gint32
DECLARE FUNCTION g_file_info_get_attribute_int64(BYVAL AS GFileInfo PTR, BYVAL AS const gchar PTR) AS gint64
DECLARE FUNCTION g_file_info_get_attribute_object(BYVAL AS GFileInfo PTR, BYVAL AS const gchar PTR) AS GObject PTR
DECLARE FUNCTION g_file_info_get_attribute_status(BYVAL AS GFileInfo PTR, BYVAL AS const gchar PTR) AS GFileAttributeStatus
DECLARE FUNCTION g_file_info_get_attribute_string(BYVAL AS GFileInfo PTR, BYVAL AS const gchar PTR) AS const gchar PTR
DECLARE FUNCTION g_file_info_get_attribute_stringv(BYVAL AS GFileInfo PTR, BYVAL AS const gchar PTR) AS zstring /'gchar'/ PTR PTR
DECLARE FUNCTION g_file_info_get_attribute_type(BYVAL AS GFileInfo PTR, BYVAL AS const gchar PTR) AS GFileAttributeType
DECLARE FUNCTION g_file_info_get_attribute_uint32(BYVAL AS GFileInfo PTR, BYVAL AS const gchar PTR) AS guint32
DECLARE FUNCTION g_file_info_get_attribute_uint64(BYVAL AS GFileInfo PTR, BYVAL AS const gchar PTR) AS guint64
DECLARE FUNCTION g_file_info_get_content_type(BYVAL AS GFileInfo PTR) AS const gchar PTR
DECLARE FUNCTION g_file_info_get_deletion_date(BYVAL AS GFileInfo PTR) AS GDateTime PTR
DECLARE FUNCTION g_file_info_get_display_name(BYVAL AS GFileInfo PTR) AS const gchar PTR
DECLARE FUNCTION g_file_info_get_edit_name(BYVAL AS GFileInfo PTR) AS const gchar PTR
DECLARE FUNCTION g_file_info_get_etag(BYVAL AS GFileInfo PTR) AS const gchar PTR
DECLARE FUNCTION g_file_info_get_file_type(BYVAL AS GFileInfo PTR) AS GFileType
DECLARE FUNCTION g_file_info_get_icon(BYVAL AS GFileInfo PTR) AS GIcon PTR
DECLARE FUNCTION g_file_info_get_is_backup(BYVAL AS GFileInfo PTR) AS gboolean
DECLARE FUNCTION g_file_info_get_is_hidden(BYVAL AS GFileInfo PTR) AS gboolean
DECLARE FUNCTION g_file_info_get_is_symlink(BYVAL AS GFileInfo PTR) AS gboolean
DECLARE FUNCTION g_file_info_get_modification_date_time(BYVAL AS GFileInfo PTR) AS GDateTime PTR
DECLARE SUB g_file_info_get_modification_time(BYVAL AS GFileInfo PTR, BYVAL AS GTimeVal PTR)
DECLARE FUNCTION g_file_info_get_name(BYVAL AS GFileInfo PTR) AS const gchar PTR
DECLARE FUNCTION g_file_info_get_size(BYVAL AS GFileInfo PTR) AS gint32 /'goffset'/
DECLARE FUNCTION g_file_info_get_sort_order(BYVAL AS GFileInfo PTR) AS gint32
DECLARE FUNCTION g_file_info_get_symbolic_icon(BYVAL AS GFileInfo PTR) AS GIcon PTR
DECLARE FUNCTION g_file_info_get_symlink_target(BYVAL AS GFileInfo PTR) AS const gchar PTR
DECLARE FUNCTION g_file_info_has_attribute(BYVAL AS GFileInfo PTR, BYVAL AS const gchar PTR) AS gboolean
DECLARE FUNCTION g_file_info_has_namespace(BYVAL AS GFileInfo PTR, BYVAL AS const gchar PTR) AS gboolean
DECLARE FUNCTION g_file_info_list_attributes(BYVAL AS GFileInfo PTR, BYVAL AS const gchar PTR) AS zstring /'gchar'/ PTR PTR
DECLARE SUB g_file_info_remove_attribute(BYVAL AS GFileInfo PTR, BYVAL AS const gchar PTR)
DECLARE SUB g_file_info_set_attribute(BYVAL AS GFileInfo PTR, BYVAL AS const gchar PTR, BYVAL AS GFileAttributeType, BYVAL AS gpointer)
DECLARE SUB g_file_info_set_attribute_boolean(BYVAL AS GFileInfo PTR, BYVAL AS const gchar PTR, BYVAL AS gboolean)
DECLARE SUB g_file_info_set_attribute_byte_string(BYVAL AS GFileInfo PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR)
DECLARE SUB g_file_info_set_attribute_int32(BYVAL AS GFileInfo PTR, BYVAL AS const gchar PTR, BYVAL AS gint32)
DECLARE SUB g_file_info_set_attribute_int64(BYVAL AS GFileInfo PTR, BYVAL AS const gchar PTR, BYVAL AS gint64)
DECLARE SUB g_file_info_set_attribute_mask(BYVAL AS GFileInfo PTR, BYVAL AS GFileAttributeMatcher PTR)
DECLARE SUB g_file_info_set_attribute_object(BYVAL AS GFileInfo PTR, BYVAL AS const gchar PTR, BYVAL AS GObject PTR)
DECLARE FUNCTION g_file_info_set_attribute_status(BYVAL AS GFileInfo PTR, BYVAL AS const gchar PTR, BYVAL AS GFileAttributeStatus) AS gboolean
DECLARE SUB g_file_info_set_attribute_string(BYVAL AS GFileInfo PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR)
DECLARE SUB g_file_info_set_attribute_stringv(BYVAL AS GFileInfo PTR, BYVAL AS const gchar PTR, BYVAL AS zstring /'gchar'/ PTR PTR)
DECLARE SUB g_file_info_set_attribute_uint32(BYVAL AS GFileInfo PTR, BYVAL AS const gchar PTR, BYVAL AS guint32)
DECLARE SUB g_file_info_set_attribute_uint64(BYVAL AS GFileInfo PTR, BYVAL AS const gchar PTR, BYVAL AS guint64)
DECLARE SUB g_file_info_set_content_type(BYVAL AS GFileInfo PTR, BYVAL AS const gchar PTR)
DECLARE SUB g_file_info_set_display_name(BYVAL AS GFileInfo PTR, BYVAL AS const gchar PTR)
DECLARE SUB g_file_info_set_edit_name(BYVAL AS GFileInfo PTR, BYVAL AS const gchar PTR)
DECLARE SUB g_file_info_set_file_type(BYVAL AS GFileInfo PTR, BYVAL AS GFileType)
DECLARE SUB g_file_info_set_icon(BYVAL AS GFileInfo PTR, BYVAL AS GIcon PTR)
DECLARE SUB g_file_info_set_is_hidden(BYVAL AS GFileInfo PTR, BYVAL AS gboolean)
DECLARE SUB g_file_info_set_is_symlink(BYVAL AS GFileInfo PTR, BYVAL AS gboolean)
DECLARE SUB g_file_info_set_modification_date_time(BYVAL AS GFileInfo PTR, BYVAL AS GDateTime PTR)
DECLARE SUB g_file_info_set_modification_time(BYVAL AS GFileInfo PTR, BYVAL AS GTimeVal PTR)
DECLARE SUB g_file_info_set_name(BYVAL AS GFileInfo PTR, BYVAL AS const gchar PTR)
DECLARE SUB g_file_info_set_size(BYVAL AS GFileInfo PTR, BYVAL AS gint32 /'goffset'/)
DECLARE SUB g_file_info_set_sort_order(BYVAL AS GFileInfo PTR, BYVAL AS gint32)
DECLARE SUB g_file_info_set_symbolic_icon(BYVAL AS GFileInfo PTR, BYVAL AS GIcon PTR)
DECLARE SUB g_file_info_set_symlink_target(BYVAL AS GFileInfo PTR, BYVAL AS const gchar PTR)
DECLARE SUB g_file_info_unset_attribute_mask(BYVAL AS GFileInfo PTR)
TYPE _GFileInputStream
  AS GInputStream parent_instance
  AS GFileInputStreamPrivate PTR priv
END TYPE
DECLARE FUNCTION g_file_input_stream_get_type() AS GType
#DEFINE G_TYPE_FILE_INPUT_STREAM (g_file_input_stream_get_type())
#DEFINE G_FILE_INPUT_STREAM(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), G_TYPE_FILE_INPUT_STREAM, GFileInputStream))
#DEFINE G_FILE_INPUT_STREAM_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), G_TYPE_FILE_INPUT_STREAM, GFileInputStreamClass))
#DEFINE G_IS_FILE_INPUT_STREAM(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), G_TYPE_FILE_INPUT_STREAM))
#DEFINE G_IS_CLASS_FILE_INPUT_STREAM(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), G_TYPE_FILE_INPUT_STREAM))
#DEFINE G_FILE_INPUT_STREAM_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), G_TYPE_FILE_INPUT_STREAM, GFileInputStreamClass))
DECLARE FUNCTION g_file_input_stream_query_info(BYVAL AS GFileInputStream PTR, BYVAL AS const gchar PTR, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS GFileInfo PTR
DECLARE SUB g_file_input_stream_query_info_async(BYVAL AS GFileInputStream PTR, BYVAL AS const gchar PTR, BYVAL AS gint /'int'/, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
DECLARE FUNCTION g_file_input_stream_query_info_finish(BYVAL AS GFileInputStream PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS GFileInfo PTR
TYPE _GFileInputStreamClass
  AS GInputStreamClass parent_class
  tell AS FUNCTION CDECL(BYVAL AS GFileInputStream PTR) AS gint32 /'goffset'/
  can_seek AS FUNCTION CDECL(BYVAL AS GFileInputStream PTR) AS gboolean
  seek AS FUNCTION CDECL(BYVAL AS GFileInputStream PTR, BYVAL AS gint32 /'goffset'/, BYVAL AS GSeekType, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS gboolean
  query_info AS FUNCTION CDECL(BYVAL AS GFileInputStream PTR, BYVAL AS const gchar PTR, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS GFileInfo PTR
  query_info_async AS SUB CDECL(BYVAL AS GFileInputStream PTR, BYVAL AS const gchar PTR, BYVAL AS gint /'int'/, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
  query_info_finish AS FUNCTION CDECL(BYVAL AS GFileInputStream PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS GFileInfo PTR
  _g_reserved1 AS SUB CDECL()
  _g_reserved2 AS SUB CDECL()
  _g_reserved3 AS SUB CDECL()
  _g_reserved4 AS SUB CDECL()
  _g_reserved5 AS SUB CDECL()
END TYPE
TYPE _GFileMonitor
  AS GObject parent_instance
  AS GFileMonitorPrivate PTR priv
END TYPE
DECLARE FUNCTION g_file_monitor_get_type() AS GType
#DEFINE G_TYPE_FILE_MONITOR (g_file_monitor_get_type())
#DEFINE G_FILE_MONITOR(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), G_TYPE_FILE_MONITOR, GFileMonitor))
#DEFINE G_FILE_MONITOR_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), G_TYPE_FILE_MONITOR, GFileMonitorClass))
#DEFINE G_IS_FILE_MONITOR(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), G_TYPE_FILE_MONITOR))
#DEFINE G_IS_CLASS_FILE_MONITOR(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), G_TYPE_FILE_MONITOR))
#DEFINE G_FILE_MONITOR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), G_TYPE_FILE_MONITOR, GFileMonitorClass))
DECLARE FUNCTION g_file_monitor_cancel(BYVAL AS GFileMonitor PTR) AS gboolean
DECLARE SUB g_file_monitor_emit_event(BYVAL AS GFileMonitor PTR, BYVAL AS GFile PTR, BYVAL AS GFile PTR, BYVAL AS GFileMonitorEvent)
DECLARE FUNCTION g_file_monitor_is_cancelled(BYVAL AS GFileMonitor PTR) AS gboolean
DECLARE SUB g_file_monitor_set_rate_limit(BYVAL AS GFileMonitor PTR, BYVAL AS gint)
TYPE _GFileMonitorClass
  AS GObjectClass parent_class
  changed AS SUB CDECL(BYVAL AS GFileMonitor PTR, BYVAL AS GFile PTR, BYVAL AS GFile PTR, BYVAL AS GFileMonitorEvent)
  cancel AS FUNCTION CDECL(BYVAL AS GFileMonitor PTR) AS gboolean
  _g_reserved1 AS SUB CDECL()
  _g_reserved2 AS SUB CDECL()
  _g_reserved3 AS SUB CDECL()
  _g_reserved4 AS SUB CDECL()
  _g_reserved5 AS SUB CDECL()
END TYPE
DECLARE FUNCTION g_file_monitor_event_get_type() AS GType
#DEFINE G_TYPE_FILE_MONITOR_EVENT (g_file_monitor_event_get_type())
TYPE _GFileOutputStream
  AS GOutputStream parent_instance
  AS GFileOutputStreamPrivate PTR priv
END TYPE
DECLARE FUNCTION g_file_output_stream_get_type() AS GType
#DEFINE G_TYPE_FILE_OUTPUT_STREAM (g_file_output_stream_get_type())
#DEFINE G_FILE_OUTPUT_STREAM(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), G_TYPE_FILE_OUTPUT_STREAM, GFileOutputStream))
#DEFINE G_FILE_OUTPUT_STREAM_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), G_TYPE_FILE_OUTPUT_STREAM, GFileOutputStreamClass))
#DEFINE G_IS_FILE_OUTPUT_STREAM(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), G_TYPE_FILE_OUTPUT_STREAM))
#DEFINE G_IS_CLASS_FILE_OUTPUT_STREAM(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), G_TYPE_FILE_OUTPUT_STREAM))
#DEFINE G_FILE_OUTPUT_STREAM_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), G_TYPE_FILE_OUTPUT_STREAM, GFileOutputStreamClass))
DECLARE FUNCTION g_file_output_stream_get_etag(BYVAL AS GFileOutputStream PTR) AS zstring /'gchar'/ PTR
DECLARE FUNCTION g_file_output_stream_query_info(BYVAL AS GFileOutputStream PTR, BYVAL AS const gchar PTR, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS GFileInfo PTR
DECLARE SUB g_file_output_stream_query_info_async(BYVAL AS GFileOutputStream PTR, BYVAL AS const gchar PTR, BYVAL AS gint /'int'/, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
DECLARE FUNCTION g_file_output_stream_query_info_finish(BYVAL AS GFileOutputStream PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS GFileInfo PTR
TYPE _GFileOutputStreamClass
  AS GOutputStreamClass parent_class
  tell AS FUNCTION CDECL(BYVAL AS GFileOutputStream PTR) AS gint32 /'goffset'/
  can_seek AS FUNCTION CDECL(BYVAL AS GFileOutputStream PTR) AS gboolean
  seek AS FUNCTION CDECL(BYVAL AS GFileOutputStream PTR, BYVAL AS gint32 /'goffset'/, BYVAL AS GSeekType, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS gboolean
  can_truncate AS FUNCTION CDECL(BYVAL AS GFileOutputStream PTR) AS gboolean
  truncate_fn AS FUNCTION CDECL(BYVAL AS GFileOutputStream PTR, BYVAL AS gint32 /'goffset'/, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS gboolean
  query_info AS FUNCTION CDECL(BYVAL AS GFileOutputStream PTR, BYVAL AS const gchar PTR, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS GFileInfo PTR
  query_info_async AS SUB CDECL(BYVAL AS GFileOutputStream PTR, BYVAL AS const gchar PTR, BYVAL AS gint /'int'/, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
  query_info_finish AS FUNCTION CDECL(BYVAL AS GFileOutputStream PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS GFileInfo PTR
  get_etag AS FUNCTION CDECL(BYVAL AS GFileOutputStream PTR) AS zstring /'gchar'/ PTR
  _g_reserved1 AS SUB CDECL()
  _g_reserved2 AS SUB CDECL()
  _g_reserved3 AS SUB CDECL()
  _g_reserved4 AS SUB CDECL()
  _g_reserved5 AS SUB CDECL()
END TYPE
DECLARE FUNCTION g_file_type_get_type() AS GType
#DEFINE G_TYPE_FILE_TYPE (g_file_type_get_type())
DECLARE FUNCTION g_filename_completer_get_type() AS GType
#DEFINE G_TYPE_FILENAME_COMPLETER (g_filename_completer_get_type())
#DEFINE G_FILENAME_COMPLETER(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), G_TYPE_FILENAME_COMPLETER, GFilenameCompleter))
#DEFINE G_FILENAME_COMPLETER_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), G_TYPE_FILENAME_COMPLETER, GFilenameCompleterClass))
#DEFINE G_IS_FILENAME_COMPLETER(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), G_TYPE_FILENAME_COMPLETER))
#DEFINE G_IS_CLASS_FILENAME_COMPLETER(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), G_TYPE_FILENAME_COMPLETER))
#DEFINE G_FILENAME_COMPLETER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), G_TYPE_FILENAME_COMPLETER, GFilenameCompleterClass))
DECLARE FUNCTION g_filename_completer_new() AS GFilenameCompleter PTR
DECLARE FUNCTION g_filename_completer_get_completion_suffix(BYVAL AS GFilenameCompleter PTR, BYVAL AS const gchar PTR) AS zstring /'gchar'/ PTR
DECLARE FUNCTION g_filename_completer_get_completions(BYVAL AS GFilenameCompleter PTR, BYVAL AS const gchar PTR) AS zstring /'gchar'/ PTR PTR
DECLARE SUB g_filename_completer_set_dirs_only(BYVAL AS GFilenameCompleter PTR, BYVAL AS gboolean)
TYPE _GFilenameCompleterClass
  AS GObjectClass parent_class
  got_completion_data AS SUB CDECL(BYVAL AS GFilenameCompleter PTR)
  _g_reserved1 AS SUB CDECL()
  _g_reserved2 AS SUB CDECL()
  _g_reserved3 AS SUB CDECL()
END TYPE
DECLARE FUNCTION g_filesystem_preview_type_get_type() AS GType
#DEFINE G_TYPE_FILESYSTEM_PREVIEW_TYPE (g_filesystem_preview_type_get_type())
DECLARE FUNCTION g_io_error_enum_get_type() AS GType
#DEFINE G_TYPE_IO_ERROR_ENUM (g_io_error_enum_get_type())
DECLARE FUNCTION g_io_extension_get_name(BYVAL AS GIOExtension PTR) AS const gchar PTR
DECLARE FUNCTION g_io_extension_get_priority(BYVAL AS GIOExtension PTR) AS gint
DECLARE FUNCTION g_io_extension_get_type(BYVAL AS GIOExtension PTR) AS GType
DECLARE FUNCTION g_io_extension_ref_class(BYVAL AS GIOExtension PTR) AS GTypeClass PTR
DECLARE FUNCTION g_io_extension_point_get_extension_by_name(BYVAL AS GIOExtensionPoint PTR, BYVAL AS const gchar PTR) AS GIOExtension PTR
DECLARE FUNCTION g_io_extension_point_get_extensions(BYVAL AS GIOExtensionPoint PTR) AS GList PTR
DECLARE FUNCTION g_io_extension_point_get_required_type(BYVAL AS GIOExtensionPoint PTR) AS GType
DECLARE SUB g_io_extension_point_set_required_type(BYVAL AS GIOExtensionPoint PTR, BYVAL AS GType)
DECLARE FUNCTION g_io_extension_point_implement(BYVAL AS const gchar PTR, BYVAL AS GType, BYVAL AS const gchar PTR, BYVAL AS gint) AS GIOExtension PTR
DECLARE FUNCTION g_io_extension_point_lookup(BYVAL AS const gchar PTR) AS GIOExtensionPoint PTR
DECLARE FUNCTION g_io_extension_point_register(BYVAL AS const gchar PTR) AS GIOExtensionPoint PTR
DECLARE FUNCTION g_io_module_get_type() AS GType
#DEFINE G_TYPE_IO_MODULE (g_io_module_get_type())
#DEFINE G_IO_MODULE(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), G_TYPE_IO_MODULE, GIOModule))
#DEFINE G_IO_MODULE_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), G_TYPE_IO_MODULE, GIOModuleClass))
#DEFINE G_IS_IO_MODULE(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), G_TYPE_IO_MODULE))
#DEFINE G_IS_CLASS_IO_MODULE(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), G_TYPE_IO_MODULE))
#DEFINE G_IO_MODULE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), G_TYPE_IO_MODULE, GIOModuleClass))
DECLARE FUNCTION g_io_module_new(BYVAL AS const gchar PTR) AS GIOModule PTR
DECLARE FUNCTION g_io_module_query() AS zstring /'gchar'/ PTR PTR
DECLARE SUB g_io_module_load(BYVAL AS GIOModule PTR)
DECLARE SUB g_io_module_unload(BYVAL AS GIOModule PTR)
DECLARE SUB g_io_module_scope_block(BYVAL AS GIOModuleScope PTR, BYVAL AS const gchar PTR)
DECLARE SUB g_io_module_scope_free(BYVAL AS GIOModuleScope PTR)
DECLARE FUNCTION g_io_module_scope_new(BYVAL AS GIOModuleScopeFlags) AS GIOModuleScope PTR
DECLARE FUNCTION g_io_module_scope_flags_get_type() AS GType
#DEFINE G_TYPE_IO_MODULE_SCOPE_FLAGS (g_io_module_scope_flags_get_type())
DECLARE FUNCTION g_io_scheduler_job_send_to_mainloop(BYVAL AS GIOSchedulerJob PTR, BYVAL AS GSourceFunc, BYVAL AS gpointer, BYVAL AS GDestroyNotify) AS gboolean
DECLARE SUB g_io_scheduler_job_send_to_mainloop_async(BYVAL AS GIOSchedulerJob PTR, BYVAL AS GSourceFunc, BYVAL AS gpointer, BYVAL AS GDestroyNotify)
TYPE GIOSchedulerJobFunc AS FUNCTION CDECL(BYVAL AS GIOSchedulerJob PTR, BYVAL AS GCancellable PTR, BYVAL AS gpointer) AS gboolean
DECLARE FUNCTION g_icon_get_type() AS GType
#DEFINE G_TYPE_ICON (g_icon_get_type())
#DEFINE G_ICON(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), G_TYPE_ICON, GIcon))
#DEFINE G_ICON_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), G_TYPE_ICON, GIconIface))
#DEFINE G_IS_ICON(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), G_TYPE_ICON))
#DEFINE G_ICON_GET_IFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE((obj), G_TYPE_ICON, GIconIface))
DECLARE FUNCTION g_icon_deserialize(BYVAL AS GVariant PTR) AS GIcon PTR
DECLARE FUNCTION g_icon_hash(BYVAL AS gconstpointer) AS guint
DECLARE FUNCTION g_icon_new_for_string(BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR) AS GIcon PTR
DECLARE FUNCTION g_icon_equal(BYVAL AS GIcon PTR, BYVAL AS GIcon PTR) AS gboolean
DECLARE FUNCTION g_icon_serialize(BYVAL AS GIcon PTR) AS GVariant PTR
DECLARE FUNCTION g_icon_to_string(BYVAL AS GIcon PTR) AS gchar PTR
TYPE _GIconIface
  AS GTypeInterface g_iface
  hash AS FUNCTION CDECL(BYVAL AS GIcon PTR) AS guint
  equal AS FUNCTION CDECL(BYVAL AS GIcon PTR, BYVAL AS GIcon PTR) AS gboolean
  to_tokens AS FUNCTION CDECL(BYVAL AS GIcon PTR, BYVAL AS GPtrArray PTR, BYVAL AS gint PTR) AS gboolean
  from_tokens AS FUNCTION CDECL(BYVAL AS gchar PTR PTR, BYVAL AS gint, BYVAL AS gint, BYVAL AS GError PTR PTR) AS GIcon PTR
  serialize AS FUNCTION CDECL(BYVAL AS GIcon PTR) AS GVariant PTR
END TYPE
TYPE _GInetAddress
  AS GObject parent_instance
  AS GInetAddressPrivate PTR priv
END TYPE
DECLARE FUNCTION g_inet_address_get_type() AS GType
#DEFINE G_TYPE_INET_ADDRESS (g_inet_address_get_type())
#DEFINE G_INET_ADDRESS(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), G_TYPE_INET_ADDRESS, GInetAddress))
#DEFINE G_INET_ADDRESS_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), G_TYPE_INET_ADDRESS, GInetAddressClass))
#DEFINE G_IS_INET_ADDRESS(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), G_TYPE_INET_ADDRESS))
#DEFINE G_IS_CLASS_INET_ADDRESS(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), G_TYPE_INET_ADDRESS))
#DEFINE G_INET_ADDRESS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), G_TYPE_INET_ADDRESS, GInetAddressClass))
DECLARE FUNCTION g_inet_address_new_any(BYVAL AS GSocketFamily) AS GInetAddress PTR
DECLARE FUNCTION g_inet_address_new_from_bytes(BYVAL AS const guint8 PTR, BYVAL AS GSocketFamily) AS GInetAddress PTR
DECLARE FUNCTION g_inet_address_new_from_string(BYVAL AS const gchar PTR) AS GInetAddress PTR
DECLARE FUNCTION g_inet_address_new_loopback(BYVAL AS GSocketFamily) AS GInetAddress PTR
DECLARE FUNCTION g_inet_address_equal(BYVAL AS GInetAddress PTR, BYVAL AS GInetAddress PTR) AS gboolean
DECLARE FUNCTION g_inet_address_get_family(BYVAL AS GInetAddress PTR) AS GSocketFamily
DECLARE FUNCTION g_inet_address_get_is_any(BYVAL AS GInetAddress PTR) AS gboolean
DECLARE FUNCTION g_inet_address_get_is_link_local(BYVAL AS GInetAddress PTR) AS gboolean
DECLARE FUNCTION g_inet_address_get_is_loopback(BYVAL AS GInetAddress PTR) AS gboolean
DECLARE FUNCTION g_inet_address_get_is_mc_global(BYVAL AS GInetAddress PTR) AS gboolean
DECLARE FUNCTION g_inet_address_get_is_mc_link_local(BYVAL AS GInetAddress PTR) AS gboolean
DECLARE FUNCTION g_inet_address_get_is_mc_node_local(BYVAL AS GInetAddress PTR) AS gboolean
DECLARE FUNCTION g_inet_address_get_is_mc_org_local(BYVAL AS GInetAddress PTR) AS gboolean
DECLARE FUNCTION g_inet_address_get_is_mc_site_local(BYVAL AS GInetAddress PTR) AS gboolean
DECLARE FUNCTION g_inet_address_get_is_multicast(BYVAL AS GInetAddress PTR) AS gboolean
DECLARE FUNCTION g_inet_address_get_is_site_local(BYVAL AS GInetAddress PTR) AS gboolean
DECLARE FUNCTION g_inet_address_get_native_size(BYVAL AS GInetAddress PTR) AS gsize
DECLARE FUNCTION g_inet_address_to_bytes(BYVAL AS GInetAddress PTR) AS const guint8 PTR
DECLARE FUNCTION g_inet_address_to_string(BYVAL AS GInetAddress PTR) AS gchar PTR
TYPE _GInetAddressClass
  AS GObjectClass parent_class
  to_string AS FUNCTION CDECL(BYVAL AS GInetAddress PTR) AS gchar PTR
  to_bytes AS FUNCTION CDECL(BYVAL AS GInetAddress PTR) AS const guint8 PTR
END TYPE
TYPE _GInetAddressMask
  AS GObject parent_instance
  AS GInetAddressMaskPrivate PTR priv
END TYPE
DECLARE FUNCTION g_inet_address_mask_get_type() AS GType
#DEFINE G_TYPE_INET_ADDRESS_MASK (g_inet_address_mask_get_type())
#DEFINE G_INET_ADDRESS_MASK(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), G_TYPE_INET_ADDRESS_MASK, GInetAddressMask))
#DEFINE G_INET_ADDRESS_MASK_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), G_TYPE_INET_ADDRESS_MASK, GInetAddressMaskClass))
#DEFINE G_IS_INET_ADDRESS_MASK(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), G_TYPE_INET_ADDRESS_MASK))
#DEFINE G_IS_CLASS_INET_ADDRESS_MASK(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), G_TYPE_INET_ADDRESS_MASK))
#DEFINE G_INET_ADDRESS_MASK_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), G_TYPE_INET_ADDRESS_MASK, GInetAddressMaskClass))
DECLARE FUNCTION g_inet_address_mask_new(BYVAL AS GInetAddress PTR, BYVAL AS guint, BYVAL AS GError PTR PTR) AS GInetAddressMask PTR
DECLARE FUNCTION g_inet_address_mask_new_from_string(BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR) AS GInetAddressMask PTR
DECLARE FUNCTION g_inet_address_mask_equal(BYVAL AS GInetAddressMask PTR, BYVAL AS GInetAddressMask PTR) AS gboolean
DECLARE FUNCTION g_inet_address_mask_get_address(BYVAL AS GInetAddressMask PTR) AS GInetAddress PTR
DECLARE FUNCTION g_inet_address_mask_get_family(BYVAL AS GInetAddressMask PTR) AS GSocketFamily
DECLARE FUNCTION g_inet_address_mask_get_length(BYVAL AS GInetAddressMask PTR) AS guint
DECLARE FUNCTION g_inet_address_mask_matches(BYVAL AS GInetAddressMask PTR, BYVAL AS GInetAddress PTR) AS gboolean
DECLARE FUNCTION g_inet_address_mask_to_string(BYVAL AS GInetAddressMask PTR) AS gchar PTR
TYPE _GInetAddressMaskClass
  AS GObjectClass parent_class
END TYPE
TYPE _GInetSocketAddress
  AS GSocketAddress parent_instance
  AS GInetSocketAddressPrivate PTR priv
END TYPE
DECLARE FUNCTION g_inet_socket_address_get_type() AS GType
#DEFINE G_TYPE_INET_SOCKET_ADDRESS (g_inet_socket_address_get_type())
#DEFINE G_INET_SOCKET_ADDRESS(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), G_TYPE_INET_SOCKET_ADDRESS, GInetSocketAddress))
#DEFINE G_INET_SOCKET_ADDRESS_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), G_TYPE_INET_SOCKET_ADDRESS, GInetSocketAddressClass))
#DEFINE G_IS_INET_SOCKET_ADDRESS(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), G_TYPE_INET_SOCKET_ADDRESS))
#DEFINE G_IS_CLASS_INET_SOCKET_ADDRESS(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), G_TYPE_INET_SOCKET_ADDRESS))
#DEFINE G_INET_SOCKET_ADDRESS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), G_TYPE_INET_SOCKET_ADDRESS, GInetSocketAddressClass))
DECLARE FUNCTION g_inet_socket_address_new(BYVAL AS GInetAddress PTR, BYVAL AS guint16) AS GSocketAddress PTR
DECLARE FUNCTION g_inet_socket_address_new_from_string(BYVAL AS const gchar PTR, BYVAL AS guint) AS GSocketAddress PTR
DECLARE FUNCTION g_inet_socket_address_get_address(BYVAL AS GInetSocketAddress PTR) AS GInetAddress PTR
DECLARE FUNCTION g_inet_socket_address_get_flowinfo(BYVAL AS GInetSocketAddress PTR) AS guint32
DECLARE FUNCTION g_inet_socket_address_get_port(BYVAL AS GInetSocketAddress PTR) AS guint16
DECLARE FUNCTION g_inet_socket_address_get_scope_id(BYVAL AS GInetSocketAddress PTR) AS guint32
TYPE _GInetSocketAddressClass
  AS GSocketAddressClass parent_class
END TYPE
DECLARE FUNCTION g_initable_get_type() AS GType
#DEFINE G_TYPE_INITABLE (g_initable_get_type())
#DEFINE G_INITABLE(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), G_TYPE_INITABLE, GInitable))
#DEFINE G_INITABLE_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), G_TYPE_INITABLE, GInitableIface))
#DEFINE G_IS_INITABLE(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), G_TYPE_INITABLE))
#DEFINE G_INITABLE_GET_IFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE((obj), G_TYPE_INITABLE, GInitableIface))
DECLARE FUNCTION g_initable_new(BYVAL AS GType, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR, BYVAL AS const gchar PTR, ...) AS gpointer
DECLARE FUNCTION g_initable_new_valist(BYVAL AS GType, BYVAL AS const gchar PTR, BYVAL AS va_list, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS GObject PTR
DECLARE FUNCTION g_initable_newv(BYVAL AS GType, BYVAL AS guint, BYVAL AS GParameter PTR, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS gpointer
DECLARE FUNCTION g_initable_init(BYVAL AS GInitable PTR, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS gboolean
TYPE _GInitableIface
  AS GTypeInterface g_iface
  init AS FUNCTION CDECL(BYVAL AS GInitable PTR, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS gboolean
END TYPE
DECLARE FUNCTION g_list_model_get_type() AS GType
#DEFINE G_TYPE_LIST_MODEL (g_list_model_get_type())
#DEFINE G_LIST_MODEL(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), G_TYPE_LIST_MODEL, GListModel))
#DEFINE G_LIST_MODEL_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), G_TYPE_LIST_MODEL, GListModelInterface))
#DEFINE G_IS_LIST_MODEL(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), G_TYPE_LIST_MODEL))
#DEFINE G_LIST_MODEL_GET_IFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE((obj), G_TYPE_LIST_MODEL, GListModelInterface))
DECLARE FUNCTION g_list_model_get_item(BYVAL AS GListModel PTR, BYVAL AS guint) AS gpointer
DECLARE FUNCTION g_list_model_get_item_type(BYVAL AS GListModel PTR) AS GType
DECLARE FUNCTION g_list_model_get_n_items(BYVAL AS GListModel PTR) AS guint
DECLARE FUNCTION g_list_model_get_object(BYVAL AS GListModel PTR, BYVAL AS guint) AS GObject PTR
DECLARE SUB g_list_model_items_changed(BYVAL AS GListModel PTR, BYVAL AS guint, BYVAL AS guint, BYVAL AS guint)
TYPE _GListModelInterface
  AS GTypeInterface g_iface
  get_item_type AS FUNCTION CDECL(BYVAL AS GListModel PTR) AS GType
  get_n_items AS FUNCTION CDECL(BYVAL AS GListModel PTR) AS guint
  get_item AS FUNCTION CDECL(BYVAL AS GListModel PTR, BYVAL AS guint) AS gpointer
END TYPE
DECLARE FUNCTION g_list_store_get_type() AS GType
#DEFINE G_TYPE_LIST_STORE (g_list_store_get_type())
#DEFINE G_LIST_STORE(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), G_TYPE_LIST_STORE, GListStore))
#DEFINE G_LIST_STORE_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), G_TYPE_LIST_STORE, GListStoreClass))
#DEFINE G_IS_LIST_STORE(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), G_TYPE_LIST_STORE))
#DEFINE G_IS_CLASS_LIST_STORE(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), G_TYPE_LIST_STORE))
#DEFINE G_LIST_STORE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), G_TYPE_LIST_STORE, GListStoreClass))
DECLARE FUNCTION g_list_store_new(BYVAL AS GType) AS GListStore PTR
DECLARE SUB g_list_store_append(BYVAL AS GListStore PTR, BYVAL AS gpointer)
DECLARE FUNCTION g_list_store_find(BYVAL AS GListStore PTR, BYVAL AS gpointer, BYVAL AS guint PTR) AS gboolean
DECLARE FUNCTION g_list_store_find_with_equal_func(BYVAL AS GListStore PTR, BYVAL AS gpointer, BYVAL AS GEqualFunc, BYVAL AS guint PTR) AS gboolean
DECLARE SUB g_list_store_insert(BYVAL AS GListStore PTR, BYVAL AS guint, BYVAL AS gpointer)
DECLARE FUNCTION g_list_store_insert_sorted(BYVAL AS GListStore PTR, BYVAL AS gpointer, BYVAL AS GCompareDataFunc, BYVAL AS gpointer) AS guint
DECLARE SUB g_list_store_remove(BYVAL AS GListStore PTR, BYVAL AS guint)
DECLARE SUB g_list_store_remove_all(BYVAL AS GListStore PTR)
DECLARE SUB g_list_store_sort(BYVAL AS GListStore PTR, BYVAL AS GCompareDataFunc, BYVAL AS gpointer)
DECLARE SUB g_list_store_splice(BYVAL AS GListStore PTR, BYVAL AS guint, BYVAL AS guint, BYVAL AS gpointer PTR, BYVAL AS guint)
TYPE _GListStoreClass
  AS GObjectClass parent_class
END TYPE
DECLARE FUNCTION g_loadable_icon_get_type() AS GType
#DEFINE G_TYPE_LOADABLE_ICON (g_loadable_icon_get_type())
#DEFINE G_LOADABLE_ICON(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), G_TYPE_LOADABLE_ICON, GLoadableIcon))
#DEFINE G_LOADABLE_ICON_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), G_TYPE_LOADABLE_ICON, GLoadableIconIface))
#DEFINE G_IS_LOADABLE_ICON(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), G_TYPE_LOADABLE_ICON))
#DEFINE G_LOADABLE_ICON_GET_IFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE((obj), G_TYPE_LOADABLE_ICON, GLoadableIconIface))
DECLARE FUNCTION g_loadable_icon_load(BYVAL AS GLoadableIcon PTR, BYVAL AS gint /'int'/, BYVAL AS zstring /'gchar'/ PTR PTR, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS GInputStream PTR
DECLARE SUB g_loadable_icon_load_async(BYVAL AS GLoadableIcon PTR, BYVAL AS gint /'int'/, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
DECLARE FUNCTION g_loadable_icon_load_finish(BYVAL AS GLoadableIcon PTR, BYVAL AS GAsyncResult PTR, BYVAL AS zstring /'gchar'/ PTR PTR, BYVAL AS GError PTR PTR) AS GInputStream PTR
TYPE _GLoadableIconIface
  AS GTypeInterface g_iface
  load AS FUNCTION CDECL(BYVAL AS GLoadableIcon PTR, BYVAL AS gint /'int'/, BYVAL AS zstring /'gchar'/ PTR PTR, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS GInputStream PTR
  load_async AS SUB CDECL(BYVAL AS GLoadableIcon PTR, BYVAL AS gint /'int'/, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
  load_finish AS FUNCTION CDECL(BYVAL AS GLoadableIcon PTR, BYVAL AS GAsyncResult PTR, BYVAL AS zstring /'gchar'/ PTR PTR, BYVAL AS GError PTR PTR) AS GInputStream PTR
END TYPE
TYPE _GMemoryInputStream
  AS GInputStream parent_instance
  AS GMemoryInputStreamPrivate PTR priv
END TYPE
DECLARE FUNCTION g_memory_input_stream_get_type() AS GType
#DEFINE G_TYPE_MEMORY_INPUT_STREAM (g_memory_input_stream_get_type())
#DEFINE G_MEMORY_INPUT_STREAM(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), G_TYPE_MEMORY_INPUT_STREAM, GMemoryInputStream))
#DEFINE G_MEMORY_INPUT_STREAM_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), G_TYPE_MEMORY_INPUT_STREAM, GMemoryInputStreamClass))
#DEFINE G_IS_MEMORY_INPUT_STREAM(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), G_TYPE_MEMORY_INPUT_STREAM))
#DEFINE G_IS_CLASS_MEMORY_INPUT_STREAM(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), G_TYPE_MEMORY_INPUT_STREAM))
#DEFINE G_MEMORY_INPUT_STREAM_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), G_TYPE_MEMORY_INPUT_STREAM, GMemoryInputStreamClass))
DECLARE FUNCTION g_memory_input_stream_new() AS GInputStream PTR
DECLARE FUNCTION g_memory_input_stream_new_from_bytes(BYVAL AS GBytes PTR) AS GInputStream PTR
DECLARE FUNCTION g_memory_input_stream_new_from_data(BYVAL AS any ptr /'void'/ PTR, BYVAL AS gssize, BYVAL AS GDestroyNotify) AS GInputStream PTR
DECLARE SUB g_memory_input_stream_add_bytes(BYVAL AS GMemoryInputStream PTR, BYVAL AS GBytes PTR)
DECLARE SUB g_memory_input_stream_add_data(BYVAL AS GMemoryInputStream PTR, BYVAL AS any ptr /'void'/ PTR, BYVAL AS gssize, BYVAL AS GDestroyNotify)
TYPE _GMemoryInputStreamClass
  AS GInputStreamClass parent_class
  _g_reserved1 AS SUB CDECL()
  _g_reserved2 AS SUB CDECL()
  _g_reserved3 AS SUB CDECL()
  _g_reserved4 AS SUB CDECL()
  _g_reserved5 AS SUB CDECL()
END TYPE
DECLARE FUNCTION g_memory_monitor_get_type() AS GType
#DEFINE G_TYPE_MEMORY_MONITOR (g_memory_monitor_get_type())
#DEFINE G_MEMORY_MONITOR(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), G_TYPE_MEMORY_MONITOR, GMemoryMonitor))
#DEFINE G_MEMORY_MONITOR_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), G_TYPE_MEMORY_MONITOR, GMemoryMonitorInterface))
#DEFINE G_IS_MEMORY_MONITOR(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), G_TYPE_MEMORY_MONITOR))
#DEFINE G_MEMORY_MONITOR_GET_IFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE((obj), G_TYPE_MEMORY_MONITOR, GMemoryMonitorInterface))
DECLARE FUNCTION g_memory_monitor_dup_default() AS GMemoryMonitor PTR
TYPE _GMemoryMonitorInterface
  AS GTypeInterface g_iface
  low_memory_warning AS SUB CDECL(BYVAL AS GMemoryMonitor PTR, BYVAL AS GMemoryMonitorWarningLevel)
END TYPE
TYPE _GMemoryOutputStream
  AS GOutputStream parent_instance
  AS GMemoryOutputStreamPrivate PTR priv
END TYPE
DECLARE FUNCTION g_memory_monitor_warning_level_get_type() AS GType
#DEFINE G_TYPE_MEMORY_MONITOR_WARNING_LEVEL (g_memory_monitor_warning_level_get_type())
DECLARE FUNCTION g_memory_output_stream_get_type() AS GType
#DEFINE G_TYPE_MEMORY_OUTPUT_STREAM (g_memory_output_stream_get_type())
#DEFINE G_MEMORY_OUTPUT_STREAM(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), G_TYPE_MEMORY_OUTPUT_STREAM, GMemoryOutputStream))
#DEFINE G_MEMORY_OUTPUT_STREAM_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), G_TYPE_MEMORY_OUTPUT_STREAM, GMemoryOutputStreamClass))
#DEFINE G_IS_MEMORY_OUTPUT_STREAM(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), G_TYPE_MEMORY_OUTPUT_STREAM))
#DEFINE G_IS_CLASS_MEMORY_OUTPUT_STREAM(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), G_TYPE_MEMORY_OUTPUT_STREAM))
#DEFINE G_MEMORY_OUTPUT_STREAM_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), G_TYPE_MEMORY_OUTPUT_STREAM, GMemoryOutputStreamClass))
DECLARE FUNCTION g_memory_output_stream_new(BYVAL AS gpointer, BYVAL AS gsize, BYVAL AS GReallocFunc, BYVAL AS GDestroyNotify) AS GOutputStream PTR
DECLARE FUNCTION g_memory_output_stream_new_resizable() AS GOutputStream PTR
DECLARE FUNCTION g_memory_output_stream_get_data(BYVAL AS GMemoryOutputStream PTR) AS gpointer
DECLARE FUNCTION g_memory_output_stream_get_data_size(BYVAL AS GMemoryOutputStream PTR) AS gsize
DECLARE FUNCTION g_memory_output_stream_get_size(BYVAL AS GMemoryOutputStream PTR) AS gsize
DECLARE FUNCTION g_memory_output_stream_steal_as_bytes(BYVAL AS GMemoryOutputStream PTR) AS GBytes PTR
DECLARE FUNCTION g_memory_output_stream_steal_data(BYVAL AS GMemoryOutputStream PTR) AS gpointer
TYPE _GMemoryOutputStreamClass
  AS GOutputStreamClass parent_class
  _g_reserved1 AS SUB CDECL()
  _g_reserved2 AS SUB CDECL()
  _g_reserved3 AS SUB CDECL()
  _g_reserved4 AS SUB CDECL()
  _g_reserved5 AS SUB CDECL()
END TYPE
DECLARE FUNCTION g_menu_get_type() AS GType
#DEFINE G_TYPE_MENU (g_menu_get_type())
#DEFINE G_MENU(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), G_TYPE_MENU, GMenu))
#DEFINE G_MENU_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), G_TYPE_MENU, G))
#DEFINE G_IS_MENU(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), G_TYPE_MENU))
#DEFINE G_IS_CLASS_MENU(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), G_TYPE_MENU))
#DEFINE G_MENU_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), G_TYPE_MENU, G))
DECLARE FUNCTION g_menu_new() AS GMenu PTR
DECLARE SUB g_menu_append(BYVAL AS GMenu PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR)
DECLARE SUB g_menu_append_item(BYVAL AS GMenu PTR, BYVAL AS GMenuItem PTR)
DECLARE SUB g_menu_append_section(BYVAL AS GMenu PTR, BYVAL AS const gchar PTR, BYVAL AS GMenuModel PTR)
DECLARE SUB g_menu_append_submenu(BYVAL AS GMenu PTR, BYVAL AS const gchar PTR, BYVAL AS GMenuModel PTR)
DECLARE SUB g_menu_freeze(BYVAL AS GMenu PTR)
DECLARE SUB g_menu_insert(BYVAL AS GMenu PTR, BYVAL AS gint, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR)
DECLARE SUB g_menu_insert_item(BYVAL AS GMenu PTR, BYVAL AS gint, BYVAL AS GMenuItem PTR)
DECLARE SUB g_menu_insert_section(BYVAL AS GMenu PTR, BYVAL AS gint, BYVAL AS const gchar PTR, BYVAL AS GMenuModel PTR)
DECLARE SUB g_menu_insert_submenu(BYVAL AS GMenu PTR, BYVAL AS gint, BYVAL AS const gchar PTR, BYVAL AS GMenuModel PTR)
DECLARE SUB g_menu_prepend(BYVAL AS GMenu PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR)
DECLARE SUB g_menu_prepend_item(BYVAL AS GMenu PTR, BYVAL AS GMenuItem PTR)
DECLARE SUB g_menu_prepend_section(BYVAL AS GMenu PTR, BYVAL AS const gchar PTR, BYVAL AS GMenuModel PTR)
DECLARE SUB g_menu_prepend_submenu(BYVAL AS GMenu PTR, BYVAL AS const gchar PTR, BYVAL AS GMenuModel PTR)
DECLARE SUB g_menu_remove(BYVAL AS GMenu PTR, BYVAL AS gint)
DECLARE SUB g_menu_remove_all(BYVAL AS GMenu PTR)
TYPE _GMenuAttributeIter
  AS GObject parent_instance
  AS GMenuAttributeIterPrivate PTR priv
END TYPE
DECLARE FUNCTION g_menu_attribute_iter_get_type() AS GType
#DEFINE G_TYPE_MENU_ATTRIBUTE_ITER (g_menu_attribute_iter_get_type())
#DEFINE G_MENU_ATTRIBUTE_ITER(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), G_TYPE_MENU_ATTRIBUTE_ITER, GMenuAttributeIter))
#DEFINE G_MENU_ATTRIBUTE_ITER_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), G_TYPE_MENU_ATTRIBUTE_ITER, GMenuAttributeIterClass))
#DEFINE G_IS_MENU_ATTRIBUTE_ITER(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), G_TYPE_MENU_ATTRIBUTE_ITER))
#DEFINE G_IS_CLASS_MENU_ATTRIBUTE_ITER(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), G_TYPE_MENU_ATTRIBUTE_ITER))
#DEFINE G_MENU_ATTRIBUTE_ITER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), G_TYPE_MENU_ATTRIBUTE_ITER, GMenuAttributeIterClass))
DECLARE FUNCTION g_menu_attribute_iter_get_name(BYVAL AS GMenuAttributeIter PTR) AS const gchar PTR
DECLARE FUNCTION g_menu_attribute_iter_get_next(BYVAL AS GMenuAttributeIter PTR, BYVAL AS const gchar PTR PTR, BYVAL AS GVariant PTR PTR) AS gboolean
DECLARE FUNCTION g_menu_attribute_iter_get_value(BYVAL AS GMenuAttributeIter PTR) AS GVariant PTR
DECLARE FUNCTION g_menu_attribute_iter_next(BYVAL AS GMenuAttributeIter PTR) AS gboolean
TYPE _GMenuAttributeIterClass
  AS GObjectClass parent_class
  get_next AS FUNCTION CDECL(BYVAL AS GMenuAttributeIter PTR, BYVAL AS const gchar PTR PTR, BYVAL AS GVariant PTR PTR) AS gboolean
END TYPE
DECLARE FUNCTION g_menu_item_get_type() AS GType
#DEFINE G_TYPE_MENU_ITEM (g_menu_item_get_type())
#DEFINE G_MENU_ITEM(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), G_TYPE_MENU_ITEM, GMenuItem))
#DEFINE G_MENU_ITEM_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), G_TYPE_MENU_ITEM, G))
#DEFINE G_IS_MENU_ITEM(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), G_TYPE_MENU_ITEM))
#DEFINE G_IS_CLASS_MENU_ITEM(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), G_TYPE_MENU_ITEM))
#DEFINE G_MENU_ITEM_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), G_TYPE_MENU_ITEM, G))
DECLARE FUNCTION g_menu_item_new(BYVAL AS const gchar PTR, BYVAL AS const gchar PTR) AS GMenuItem PTR
DECLARE FUNCTION g_menu_item_new_from_model(BYVAL AS GMenuModel PTR, BYVAL AS gint) AS GMenuItem PTR
DECLARE FUNCTION g_menu_item_new_section(BYVAL AS const gchar PTR, BYVAL AS GMenuModel PTR) AS GMenuItem PTR
DECLARE FUNCTION g_menu_item_new_submenu(BYVAL AS const gchar PTR, BYVAL AS GMenuModel PTR) AS GMenuItem PTR
DECLARE FUNCTION g_menu_item_get_attribute(BYVAL AS GMenuItem PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, ...) AS gboolean
DECLARE FUNCTION g_menu_item_get_attribute_value(BYVAL AS GMenuItem PTR, BYVAL AS const gchar PTR, BYVAL AS const GVariantType PTR) AS GVariant PTR
DECLARE FUNCTION g_menu_item_get_link(BYVAL AS GMenuItem PTR, BYVAL AS const gchar PTR) AS GMenuModel PTR
DECLARE SUB g_menu_item_set_action_and_target(BYVAL AS GMenuItem PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, ...)
DECLARE SUB g_menu_item_set_action_and_target_value(BYVAL AS GMenuItem PTR, BYVAL AS const gchar PTR, BYVAL AS GVariant PTR)
DECLARE SUB g_menu_item_set_attribute(BYVAL AS GMenuItem PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, ...)
DECLARE SUB g_menu_item_set_attribute_value(BYVAL AS GMenuItem PTR, BYVAL AS const gchar PTR, BYVAL AS GVariant PTR)
DECLARE SUB g_menu_item_set_detailed_action(BYVAL AS GMenuItem PTR, BYVAL AS const gchar PTR)
DECLARE SUB g_menu_item_set_icon(BYVAL AS GMenuItem PTR, BYVAL AS GIcon PTR)
DECLARE SUB g_menu_item_set_label(BYVAL AS GMenuItem PTR, BYVAL AS const gchar PTR)
DECLARE SUB g_menu_item_set_link(BYVAL AS GMenuItem PTR, BYVAL AS const gchar PTR, BYVAL AS GMenuModel PTR)
DECLARE SUB g_menu_item_set_section(BYVAL AS GMenuItem PTR, BYVAL AS GMenuModel PTR)
DECLARE SUB g_menu_item_set_submenu(BYVAL AS GMenuItem PTR, BYVAL AS GMenuModel PTR)
TYPE _GMenuLinkIter
  AS GObject parent_instance
  AS GMenuLinkIterPrivate PTR priv
END TYPE
DECLARE FUNCTION g_menu_link_iter_get_type() AS GType
#DEFINE G_TYPE_MENU_LINK_ITER (g_menu_link_iter_get_type())
#DEFINE G_MENU_LINK_ITER(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), G_TYPE_MENU_LINK_ITER, GMenuLinkIter))
#DEFINE G_MENU_LINK_ITER_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), G_TYPE_MENU_LINK_ITER, GMenuLinkIterClass))
#DEFINE G_IS_MENU_LINK_ITER(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), G_TYPE_MENU_LINK_ITER))
#DEFINE G_IS_CLASS_MENU_LINK_ITER(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), G_TYPE_MENU_LINK_ITER))
#DEFINE G_MENU_LINK_ITER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), G_TYPE_MENU_LINK_ITER, GMenuLinkIterClass))
DECLARE FUNCTION g_menu_link_iter_get_name(BYVAL AS GMenuLinkIter PTR) AS const gchar PTR
DECLARE FUNCTION g_menu_link_iter_get_next(BYVAL AS GMenuLinkIter PTR, BYVAL AS const gchar PTR PTR, BYVAL AS GMenuModel PTR PTR) AS gboolean
DECLARE FUNCTION g_menu_link_iter_get_value(BYVAL AS GMenuLinkIter PTR) AS GMenuModel PTR
DECLARE FUNCTION g_menu_link_iter_next(BYVAL AS GMenuLinkIter PTR) AS gboolean
TYPE _GMenuLinkIterClass
  AS GObjectClass parent_class
  get_next AS FUNCTION CDECL(BYVAL AS GMenuLinkIter PTR, BYVAL AS const gchar PTR PTR, BYVAL AS GMenuModel PTR PTR) AS gboolean
END TYPE
TYPE _GMenuModel
  AS GObject parent_instance
  AS GMenuModelPrivate PTR priv
END TYPE
DECLARE FUNCTION g_menu_model_get_type() AS GType
#DEFINE G_TYPE_MENU_MODEL (g_menu_model_get_type())
#DEFINE G_MENU_MODEL(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), G_TYPE_MENU_MODEL, GMenuModel))
#DEFINE G_MENU_MODEL_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), G_TYPE_MENU_MODEL, GMenuModelClass))
#DEFINE G_IS_MENU_MODEL(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), G_TYPE_MENU_MODEL))
#DEFINE G_IS_CLASS_MENU_MODEL(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), G_TYPE_MENU_MODEL))
#DEFINE G_MENU_MODEL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), G_TYPE_MENU_MODEL, GMenuModelClass))
DECLARE FUNCTION g_menu_model_get_item_attribute(BYVAL AS GMenuModel PTR, BYVAL AS gint, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, ...) AS gboolean
DECLARE FUNCTION g_menu_model_get_item_attribute_value(BYVAL AS GMenuModel PTR, BYVAL AS gint, BYVAL AS const gchar PTR, BYVAL AS const GVariantType PTR) AS GVariant PTR
DECLARE FUNCTION g_menu_model_get_item_link(BYVAL AS GMenuModel PTR, BYVAL AS gint, BYVAL AS const gchar PTR) AS GMenuModel PTR
DECLARE FUNCTION g_menu_model_get_n_items(BYVAL AS GMenuModel PTR) AS gint
DECLARE FUNCTION g_menu_model_is_mutable(BYVAL AS GMenuModel PTR) AS gboolean
DECLARE SUB g_menu_model_items_changed(BYVAL AS GMenuModel PTR, BYVAL AS gint, BYVAL AS gint, BYVAL AS gint)
DECLARE FUNCTION g_menu_model_iterate_item_attributes(BYVAL AS GMenuModel PTR, BYVAL AS gint) AS GMenuAttributeIter PTR
DECLARE FUNCTION g_menu_model_iterate_item_links(BYVAL AS GMenuModel PTR, BYVAL AS gint) AS GMenuLinkIter PTR
TYPE _GMenuModelClass
  AS GObjectClass parent_class
  is_mutable AS FUNCTION CDECL(BYVAL AS GMenuModel PTR) AS gboolean
  get_n_items AS FUNCTION CDECL(BYVAL AS GMenuModel PTR) AS gint
  get_item_attributes AS SUB CDECL(BYVAL AS GMenuModel PTR, BYVAL AS gint, BYVAL AS GHashTable PTR PTR)
  iterate_item_attributes AS FUNCTION CDECL(BYVAL AS GMenuModel PTR, BYVAL AS gint) AS GMenuAttributeIter PTR
  get_item_attribute_value AS FUNCTION CDECL(BYVAL AS GMenuModel PTR, BYVAL AS gint, BYVAL AS const gchar PTR, BYVAL AS const GVariantType PTR) AS GVariant PTR
  get_item_links AS SUB CDECL(BYVAL AS GMenuModel PTR, BYVAL AS gint, BYVAL AS GHashTable PTR PTR)
  iterate_item_links AS FUNCTION CDECL(BYVAL AS GMenuModel PTR, BYVAL AS gint) AS GMenuLinkIter PTR
  get_item_link AS FUNCTION CDECL(BYVAL AS GMenuModel PTR, BYVAL AS gint, BYVAL AS const gchar PTR) AS GMenuModel PTR
END TYPE
DECLARE FUNCTION g_mount_get_type() AS GType
#DEFINE G_TYPE_MOUNT (g_mount_get_type())
#DEFINE G_MOUNT(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), G_TYPE_MOUNT, GMount))
#DEFINE G_MOUNT_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), G_TYPE_MOUNT, GMountIface))
#DEFINE G_IS_MOUNT(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), G_TYPE_MOUNT))
#DEFINE G_MOUNT_GET_IFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE((obj), G_TYPE_MOUNT, GMountIface))
DECLARE FUNCTION g_mount_can_eject(BYVAL AS GMount PTR) AS gboolean
DECLARE FUNCTION g_mount_can_unmount(BYVAL AS GMount PTR) AS gboolean
DECLARE SUB g_mount_eject(BYVAL AS GMount PTR, BYVAL AS GMountUnmountFlags, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
DECLARE FUNCTION g_mount_eject_finish(BYVAL AS GMount PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE SUB g_mount_eject_with_operation(BYVAL AS GMount PTR, BYVAL AS GMountUnmountFlags, BYVAL AS GMountOperation PTR, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
DECLARE FUNCTION g_mount_eject_with_operation_finish(BYVAL AS GMount PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION g_mount_get_default_location(BYVAL AS GMount PTR) AS GFile PTR
DECLARE FUNCTION g_mount_get_drive(BYVAL AS GMount PTR) AS GDrive PTR
DECLARE FUNCTION g_mount_get_icon(BYVAL AS GMount PTR) AS GIcon PTR
DECLARE FUNCTION g_mount_get_name(BYVAL AS GMount PTR) AS zstring /'gchar'/ PTR
DECLARE FUNCTION g_mount_get_root(BYVAL AS GMount PTR) AS GFile PTR
DECLARE FUNCTION g_mount_get_sort_key(BYVAL AS GMount PTR) AS const gchar PTR
DECLARE FUNCTION g_mount_get_symbolic_icon(BYVAL AS GMount PTR) AS GIcon PTR
DECLARE FUNCTION g_mount_get_uuid(BYVAL AS GMount PTR) AS zstring /'gchar'/ PTR
DECLARE FUNCTION g_mount_get_volume(BYVAL AS GMount PTR) AS GVolume PTR
DECLARE SUB g_mount_guess_content_type(BYVAL AS GMount PTR, BYVAL AS gboolean, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
DECLARE FUNCTION g_mount_guess_content_type_finish(BYVAL AS GMount PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS gchar PTR PTR
DECLARE FUNCTION g_mount_guess_content_type_sync(BYVAL AS GMount PTR, BYVAL AS gboolean, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS gchar PTR PTR
DECLARE FUNCTION g_mount_is_shadowed(BYVAL AS GMount PTR) AS gboolean
DECLARE SUB g_mount_remount(BYVAL AS GMount PTR, BYVAL AS GMountMountFlags, BYVAL AS GMountOperation PTR, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
DECLARE FUNCTION g_mount_remount_finish(BYVAL AS GMount PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE SUB g_mount_shadow(BYVAL AS GMount PTR)
DECLARE SUB g_mount_unmount(BYVAL AS GMount PTR, BYVAL AS GMountUnmountFlags, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
DECLARE FUNCTION g_mount_unmount_finish(BYVAL AS GMount PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE SUB g_mount_unmount_with_operation(BYVAL AS GMount PTR, BYVAL AS GMountUnmountFlags, BYVAL AS GMountOperation PTR, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
DECLARE FUNCTION g_mount_unmount_with_operation_finish(BYVAL AS GMount PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE SUB g_mount_unshadow(BYVAL AS GMount PTR)
TYPE _GMountIface
  AS GTypeInterface g_iface
  changed AS SUB CDECL(BYVAL AS GMount PTR)
  unmounted AS SUB CDECL(BYVAL AS GMount PTR)
  get_root AS FUNCTION CDECL(BYVAL AS GMount PTR) AS GFile PTR
  get_name AS FUNCTION CDECL(BYVAL AS GMount PTR) AS zstring /'gchar'/ PTR
  get_icon AS FUNCTION CDECL(BYVAL AS GMount PTR) AS GIcon PTR
  get_uuid AS FUNCTION CDECL(BYVAL AS GMount PTR) AS zstring /'gchar'/ PTR
  get_volume AS FUNCTION CDECL(BYVAL AS GMount PTR) AS GVolume PTR
  get_drive AS FUNCTION CDECL(BYVAL AS GMount PTR) AS GDrive PTR
  can_unmount AS FUNCTION CDECL(BYVAL AS GMount PTR) AS gboolean
  can_eject AS FUNCTION CDECL(BYVAL AS GMount PTR) AS gboolean
  unmount AS SUB CDECL(BYVAL AS GMount PTR, BYVAL AS GMountUnmountFlags, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
  unmount_finish AS FUNCTION CDECL(BYVAL AS GMount PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS gboolean
  eject AS SUB CDECL(BYVAL AS GMount PTR, BYVAL AS GMountUnmountFlags, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
  eject_finish AS FUNCTION CDECL(BYVAL AS GMount PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS gboolean
  remount AS SUB CDECL(BYVAL AS GMount PTR, BYVAL AS GMountMountFlags, BYVAL AS GMountOperation PTR, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
  remount_finish AS FUNCTION CDECL(BYVAL AS GMount PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS gboolean
  guess_content_type AS SUB CDECL(BYVAL AS GMount PTR, BYVAL AS gboolean, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
  guess_content_type_finish AS FUNCTION CDECL(BYVAL AS GMount PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS gchar PTR PTR
  guess_content_type_sync AS FUNCTION CDECL(BYVAL AS GMount PTR, BYVAL AS gboolean, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS gchar PTR PTR
  pre_unmount AS SUB CDECL(BYVAL AS GMount PTR)
  unmount_with_operation AS SUB CDECL(BYVAL AS GMount PTR, BYVAL AS GMountUnmountFlags, BYVAL AS GMountOperation PTR, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
  unmount_with_operation_finish AS FUNCTION CDECL(BYVAL AS GMount PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS gboolean
  eject_with_operation AS SUB CDECL(BYVAL AS GMount PTR, BYVAL AS GMountUnmountFlags, BYVAL AS GMountOperation PTR, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
  eject_with_operation_finish AS FUNCTION CDECL(BYVAL AS GMount PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS gboolean
  get_default_location AS FUNCTION CDECL(BYVAL AS GMount PTR) AS GFile PTR
  get_sort_key AS FUNCTION CDECL(BYVAL AS GMount PTR) AS const gchar PTR
  get_symbolic_icon AS FUNCTION CDECL(BYVAL AS GMount PTR) AS GIcon PTR
END TYPE
TYPE _GMountOperation
  AS GObject parent_instance
  AS GMountOperationPrivate PTR priv
END TYPE
DECLARE FUNCTION g_mount_operation_get_type() AS GType
#DEFINE G_TYPE_MOUNT_OPERATION (g_mount_operation_get_type())
#DEFINE G_MOUNT_OPERATION(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), G_TYPE_MOUNT_OPERATION, GMountOperation))
#DEFINE G_MOUNT_OPERATION_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), G_TYPE_MOUNT_OPERATION, GMountOperationClass))
#DEFINE G_IS_MOUNT_OPERATION(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), G_TYPE_MOUNT_OPERATION))
#DEFINE G_IS_CLASS_MOUNT_OPERATION(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), G_TYPE_MOUNT_OPERATION))
#DEFINE G_MOUNT_OPERATION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), G_TYPE_MOUNT_OPERATION, GMountOperationClass))
DECLARE FUNCTION g_mount_operation_new() AS GMountOperation PTR
DECLARE FUNCTION g_mount_operation_get_anonymous(BYVAL AS GMountOperation PTR) AS gboolean
DECLARE FUNCTION g_mount_operation_get_choice(BYVAL AS GMountOperation PTR) AS gint /'int'/
DECLARE FUNCTION g_mount_operation_get_domain(BYVAL AS GMountOperation PTR) AS const gchar PTR
DECLARE FUNCTION g_mount_operation_get_is_tcrypt_hidden_volume(BYVAL AS GMountOperation PTR) AS gboolean
DECLARE FUNCTION g_mount_operation_get_is_tcrypt_system_volume(BYVAL AS GMountOperation PTR) AS gboolean
DECLARE FUNCTION g_mount_operation_get_password(BYVAL AS GMountOperation PTR) AS const gchar PTR
DECLARE FUNCTION g_mount_operation_get_password_save(BYVAL AS GMountOperation PTR) AS GPasswordSave
DECLARE FUNCTION g_mount_operation_get_pim(BYVAL AS GMountOperation PTR) AS guint
DECLARE FUNCTION g_mount_operation_get_username(BYVAL AS GMountOperation PTR) AS const gchar PTR
DECLARE SUB g_mount_operation_reply(BYVAL AS GMountOperation PTR, BYVAL AS GMountOperationResult)
DECLARE SUB g_mount_operation_set_anonymous(BYVAL AS GMountOperation PTR, BYVAL AS gboolean)
DECLARE SUB g_mount_operation_set_choice(BYVAL AS GMountOperation PTR, BYVAL AS gint /'int'/)
DECLARE SUB g_mount_operation_set_domain(BYVAL AS GMountOperation PTR, BYVAL AS const gchar PTR)
DECLARE SUB g_mount_operation_set_is_tcrypt_hidden_volume(BYVAL AS GMountOperation PTR, BYVAL AS gboolean)
DECLARE SUB g_mount_operation_set_is_tcrypt_system_volume(BYVAL AS GMountOperation PTR, BYVAL AS gboolean)
DECLARE SUB g_mount_operation_set_password(BYVAL AS GMountOperation PTR, BYVAL AS const gchar PTR)
DECLARE SUB g_mount_operation_set_password_save(BYVAL AS GMountOperation PTR, BYVAL AS GPasswordSave)
DECLARE SUB g_mount_operation_set_pim(BYVAL AS GMountOperation PTR, BYVAL AS guint)
DECLARE SUB g_mount_operation_set_username(BYVAL AS GMountOperation PTR, BYVAL AS const gchar PTR)
TYPE _GMountOperationClass
  AS GObjectClass parent_class
  ask_password AS SUB CDECL(BYVAL AS GMountOperation PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS GAskPasswordFlags)
  ask_question AS SUB CDECL(BYVAL AS GMountOperation PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR PTR)
  reply AS SUB CDECL(BYVAL AS GMountOperation PTR, BYVAL AS GMountOperationResult)
  aborted AS SUB CDECL(BYVAL AS GMountOperation PTR)
  show_processes AS SUB CDECL(BYVAL AS GMountOperation PTR, BYVAL AS const gchar PTR, BYVAL AS GArray PTR, BYVAL AS const gchar PTR PTR)
  show_unmount_progress AS SUB CDECL(BYVAL AS GMountOperation PTR, BYVAL AS const gchar PTR, BYVAL AS gint64, BYVAL AS gint64)
  _g_reserved1 AS SUB CDECL()
  _g_reserved2 AS SUB CDECL()
  _g_reserved3 AS SUB CDECL()
  _g_reserved4 AS SUB CDECL()
  _g_reserved5 AS SUB CDECL()
  _g_reserved6 AS SUB CDECL()
  _g_reserved7 AS SUB CDECL()
  _g_reserved8 AS SUB CDECL()
  _g_reserved9 AS SUB CDECL()
END TYPE
TYPE _GNativeSocketAddress
  AS GSocketAddress parent_instance
  AS GNativeSocketAddressPrivate PTR priv
END TYPE
DECLARE FUNCTION g_mount_operation_result_get_type() AS GType
#DEFINE G_TYPE_MOUNT_OPERATION_RESULT (g_mount_operation_result_get_type())
DECLARE FUNCTION g_native_socket_address_get_type() AS GType
#DEFINE G_TYPE_NATIVE_SOCKET_ADDRESS (g_native_socket_address_get_type())
#DEFINE G_NATIVE_SOCKET_ADDRESS(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), G_TYPE_NATIVE_SOCKET_ADDRESS, GNativeSocketAddress))
#DEFINE G_NATIVE_SOCKET_ADDRESS_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), G_TYPE_NATIVE_SOCKET_ADDRESS, GNativeSocketAddressClass))
#DEFINE G_IS_NATIVE_SOCKET_ADDRESS(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), G_TYPE_NATIVE_SOCKET_ADDRESS))
#DEFINE G_IS_CLASS_NATIVE_SOCKET_ADDRESS(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), G_TYPE_NATIVE_SOCKET_ADDRESS))
#DEFINE G_NATIVE_SOCKET_ADDRESS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), G_TYPE_NATIVE_SOCKET_ADDRESS, GNativeSocketAddressClass))
DECLARE FUNCTION g_native_socket_address_new(BYVAL AS gpointer, BYVAL AS gsize) AS GSocketAddress PTR
TYPE _GNativeSocketAddressClass
  AS GSocketAddressClass parent_class
END TYPE
TYPE _GNativeVolumeMonitor
  AS GVolumeMonitor parent_instance
END TYPE
DECLARE FUNCTION g_native_volume_monitor_get_type() AS GType
#DEFINE G_TYPE_NATIVE_VOLUME_MONITOR (g_native_volume_monitor_get_type())
#DEFINE G_NATIVE_VOLUME_MONITOR(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), G_TYPE_NATIVE_VOLUME_MONITOR, GNativeVolumeMonitor))
#DEFINE G_NATIVE_VOLUME_MONITOR_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), G_TYPE_NATIVE_VOLUME_MONITOR, GNativeVolumeMonitorClass))
#DEFINE G_IS_NATIVE_VOLUME_MONITOR(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), G_TYPE_NATIVE_VOLUME_MONITOR))
#DEFINE G_IS_CLASS_NATIVE_VOLUME_MONITOR(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), G_TYPE_NATIVE_VOLUME_MONITOR))
#DEFINE G_NATIVE_VOLUME_MONITOR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), G_TYPE_NATIVE_VOLUME_MONITOR, GNativeVolumeMonitorClass))
TYPE _GNativeVolumeMonitorClass
  AS GVolumeMonitorClass parent_class
  get_mount_for_mount_path AS FUNCTION CDECL(BYVAL AS const gchar PTR, BYVAL AS GCancellable PTR) AS GMount PTR
END TYPE
TYPE _GNetworkAddress
  AS GObject parent_instance
  AS GNetworkAddressPrivate PTR priv
END TYPE
DECLARE FUNCTION g_network_address_get_type() AS GType
#DEFINE G_TYPE_NETWORK_ADDRESS (g_network_address_get_type())
#DEFINE G_NETWORK_ADDRESS(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), G_TYPE_NETWORK_ADDRESS, GNetworkAddress))
#DEFINE G_NETWORK_ADDRESS_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), G_TYPE_NETWORK_ADDRESS, GNetworkAddressClass))
#DEFINE G_IS_NETWORK_ADDRESS(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), G_TYPE_NETWORK_ADDRESS))
#DEFINE G_IS_CLASS_NETWORK_ADDRESS(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), G_TYPE_NETWORK_ADDRESS))
#DEFINE G_NETWORK_ADDRESS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), G_TYPE_NETWORK_ADDRESS, GNetworkAddressClass))
DECLARE FUNCTION g_network_address_new(BYVAL AS const gchar PTR, BYVAL AS guint16) AS GSocketConnectable PTR
DECLARE FUNCTION g_network_address_new_loopback(BYVAL AS guint16) AS GSocketConnectable PTR
DECLARE FUNCTION g_network_address_parse(BYVAL AS const gchar PTR, BYVAL AS guint16, BYVAL AS GError PTR PTR) AS GSocketConnectable PTR
DECLARE FUNCTION g_network_address_parse_uri(BYVAL AS const gchar PTR, BYVAL AS guint16, BYVAL AS GError PTR PTR) AS GSocketConnectable PTR
DECLARE FUNCTION g_network_address_get_hostname(BYVAL AS GNetworkAddress PTR) AS const gchar PTR
DECLARE FUNCTION g_network_address_get_port(BYVAL AS GNetworkAddress PTR) AS guint16
DECLARE FUNCTION g_network_address_get_scheme(BYVAL AS GNetworkAddress PTR) AS const gchar PTR
TYPE _GNetworkAddressClass
  AS GObjectClass parent_class
END TYPE
DECLARE FUNCTION g_network_connectivity_get_type() AS GType
#DEFINE G_TYPE_NETWORK_CONNECTIVITY (g_network_connectivity_get_type())
DECLARE FUNCTION g_network_monitor_get_type() AS GType
#DEFINE G_TYPE_NETWORK_MONITOR (g_network_monitor_get_type())
#DEFINE G_NETWORK_MONITOR(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), G_TYPE_NETWORK_MONITOR, GNetworkMonitor))
#DEFINE G_NETWORK_MONITOR_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), G_TYPE_NETWORK_MONITOR, GNetworkMonitorInterface))
#DEFINE G_IS_NETWORK_MONITOR(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), G_TYPE_NETWORK_MONITOR))
#DEFINE G_NETWORK_MONITOR_GET_IFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE((obj), G_TYPE_NETWORK_MONITOR, GNetworkMonitorInterface))
DECLARE FUNCTION g_network_monitor_get_default() AS GNetworkMonitor PTR
DECLARE FUNCTION g_network_monitor_can_reach(BYVAL AS GNetworkMonitor PTR, BYVAL AS GSocketConnectable PTR, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE SUB g_network_monitor_can_reach_async(BYVAL AS GNetworkMonitor PTR, BYVAL AS GSocketConnectable PTR, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
DECLARE FUNCTION g_network_monitor_can_reach_finish(BYVAL AS GNetworkMonitor PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION g_network_monitor_get_connectivity(BYVAL AS GNetworkMonitor PTR) AS GNetworkConnectivity
DECLARE FUNCTION g_network_monitor_get_network_available(BYVAL AS GNetworkMonitor PTR) AS gboolean
DECLARE FUNCTION g_network_monitor_get_network_metered(BYVAL AS GNetworkMonitor PTR) AS gboolean
TYPE _GNetworkMonitorInterface
  AS GTypeInterface g_iface
  network_changed AS SUB CDECL(BYVAL AS GNetworkMonitor PTR, BYVAL AS gboolean)
  can_reach AS FUNCTION CDECL(BYVAL AS GNetworkMonitor PTR, BYVAL AS GSocketConnectable PTR, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS gboolean
  can_reach_async AS SUB CDECL(BYVAL AS GNetworkMonitor PTR, BYVAL AS GSocketConnectable PTR, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
  can_reach_finish AS FUNCTION CDECL(BYVAL AS GNetworkMonitor PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS gboolean
END TYPE
TYPE _GNetworkService
  AS GObject parent_instance
  AS GNetworkServicePrivate PTR priv
END TYPE
DECLARE FUNCTION g_network_service_get_type() AS GType
#DEFINE G_TYPE_NETWORK_SERVICE (g_network_service_get_type())
#DEFINE G_NETWORK_SERVICE(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), G_TYPE_NETWORK_SERVICE, GNetworkService))
#DEFINE G_NETWORK_SERVICE_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), G_TYPE_NETWORK_SERVICE, GNetworkServiceClass))
#DEFINE G_IS_NETWORK_SERVICE(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), G_TYPE_NETWORK_SERVICE))
#DEFINE G_IS_CLASS_NETWORK_SERVICE(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), G_TYPE_NETWORK_SERVICE))
#DEFINE G_NETWORK_SERVICE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), G_TYPE_NETWORK_SERVICE, GNetworkServiceClass))
DECLARE FUNCTION g_network_service_new(BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR) AS GSocketConnectable PTR
DECLARE FUNCTION g_network_service_get_domain(BYVAL AS GNetworkService PTR) AS const gchar PTR
DECLARE FUNCTION g_network_service_get_protocol(BYVAL AS GNetworkService PTR) AS const gchar PTR
DECLARE FUNCTION g_network_service_get_scheme(BYVAL AS GNetworkService PTR) AS const gchar PTR
DECLARE FUNCTION g_network_service_get_service(BYVAL AS GNetworkService PTR) AS const gchar PTR
DECLARE SUB g_network_service_set_scheme(BYVAL AS GNetworkService PTR, BYVAL AS const gchar PTR)
TYPE _GNetworkServiceClass
  AS GObjectClass parent_class
END TYPE
DECLARE FUNCTION g_notification_get_type() AS GType
#DEFINE G_TYPE_NOTIFICATION (g_notification_get_type())
#DEFINE G_NOTIFICATION(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), G_TYPE_NOTIFICATION, GNotification))
#DEFINE G_NOTIFICATION_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), G_TYPE_NOTIFICATION, G))
#DEFINE G_IS_NOTIFICATION(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), G_TYPE_NOTIFICATION))
#DEFINE G_IS_CLASS_NOTIFICATION(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), G_TYPE_NOTIFICATION))
#DEFINE G_NOTIFICATION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), G_TYPE_NOTIFICATION, G))
DECLARE FUNCTION g_notification_new(BYVAL AS const gchar PTR) AS GNotification PTR
DECLARE SUB g_notification_add_button(BYVAL AS GNotification PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR)
DECLARE SUB g_notification_add_button_with_target(BYVAL AS GNotification PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, ...)
DECLARE SUB g_notification_add_button_with_target_value(BYVAL AS GNotification PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS GVariant PTR)
DECLARE SUB g_notification_set_body(BYVAL AS GNotification PTR, BYVAL AS const gchar PTR)
DECLARE SUB g_notification_set_default_action(BYVAL AS GNotification PTR, BYVAL AS const gchar PTR)
DECLARE SUB g_notification_set_default_action_and_target(BYVAL AS GNotification PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, ...)
DECLARE SUB g_notification_set_default_action_and_target_value(BYVAL AS GNotification PTR, BYVAL AS const gchar PTR, BYVAL AS GVariant PTR)
DECLARE SUB g_notification_set_icon(BYVAL AS GNotification PTR, BYVAL AS GIcon PTR)
DECLARE SUB g_notification_set_priority(BYVAL AS GNotification PTR, BYVAL AS GNotificationPriority)
DECLARE SUB g_notification_set_title(BYVAL AS GNotification PTR, BYVAL AS const gchar PTR)
DECLARE SUB g_notification_set_urgent(BYVAL AS GNotification PTR, BYVAL AS gboolean)
TYPE _GOutputMessage
  AS GSocketAddress PTR address
  AS GOutputVector PTR vectors
  AS guint num_vectors
  AS guint bytes_sent
  AS GSocketControlMessage PTR control_messages(4)
  AS guint num_control_messages
END TYPE
DECLARE FUNCTION g_notification_priority_get_type() AS GType
#DEFINE G_TYPE_NOTIFICATION_PRIORITY (g_notification_priority_get_type())
TYPE _GOutputVector
  AS gconstpointer buffer
  AS gsize size
END TYPE
TYPE _GPermission
  AS GObject parent_instance
  AS GPermissionPrivate PTR priv
END TYPE
DECLARE FUNCTION g_password_save_get_type() AS GType
#DEFINE G_TYPE_PASSWORD_SAVE (g_password_save_get_type())
DECLARE FUNCTION g_permission_get_type() AS GType
#DEFINE G_TYPE_PERMISSION (g_permission_get_type())
#DEFINE G_PERMISSION(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), G_TYPE_PERMISSION, GPermission))
#DEFINE G_PERMISSION_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), G_TYPE_PERMISSION, GPermissionClass))
#DEFINE G_IS_PERMISSION(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), G_TYPE_PERMISSION))
#DEFINE G_IS_CLASS_PERMISSION(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), G_TYPE_PERMISSION))
#DEFINE G_PERMISSION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), G_TYPE_PERMISSION, GPermissionClass))
DECLARE FUNCTION g_permission_acquire(BYVAL AS GPermission PTR, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE SUB g_permission_acquire_async(BYVAL AS GPermission PTR, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
DECLARE FUNCTION g_permission_acquire_finish(BYVAL AS GPermission PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION g_permission_get_allowed(BYVAL AS GPermission PTR) AS gboolean
DECLARE FUNCTION g_permission_get_can_acquire(BYVAL AS GPermission PTR) AS gboolean
DECLARE FUNCTION g_permission_get_can_release(BYVAL AS GPermission PTR) AS gboolean
DECLARE SUB g_permission_impl_update(BYVAL AS GPermission PTR, BYVAL AS gboolean, BYVAL AS gboolean, BYVAL AS gboolean)
DECLARE FUNCTION g_permission_release(BYVAL AS GPermission PTR, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE SUB g_permission_release_async(BYVAL AS GPermission PTR, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
DECLARE FUNCTION g_permission_release_finish(BYVAL AS GPermission PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS gboolean
TYPE _GPermissionClass
  AS GObjectClass parent_class
  acquire AS FUNCTION CDECL(BYVAL AS GPermission PTR, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS gboolean
  acquire_async AS SUB CDECL(BYVAL AS GPermission PTR, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
  acquire_finish AS FUNCTION CDECL(BYVAL AS GPermission PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS gboolean
  release AS FUNCTION CDECL(BYVAL AS GPermission PTR, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS gboolean
  release_async AS SUB CDECL(BYVAL AS GPermission PTR, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
  release_finish AS FUNCTION CDECL(BYVAL AS GPermission PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS gboolean
  AS gpointer reserved(15)
END TYPE
DECLARE FUNCTION g_pollable_input_stream_get_type() AS GType
#DEFINE G_TYPE_POLLABLE_INPUT_STREAM (g_pollable_input_stream_get_type())
#DEFINE G_POLLABLE_INPUT_STREAM(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), G_TYPE_POLLABLE_INPUT_STREAM, GPollableInputStream))
#DEFINE G_POLLABLE_INPUT_STREAM_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), G_TYPE_POLLABLE_INPUT_STREAM, GPollableInputStreamInterface))
#DEFINE G_IS_POLLABLE_INPUT_STREAM(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), G_TYPE_POLLABLE_INPUT_STREAM))
#DEFINE G_POLLABLE_INPUT_STREAM_GET_IFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE((obj), G_TYPE_POLLABLE_INPUT_STREAM, GPollableInputStreamInterface))
DECLARE FUNCTION g_pollable_input_stream_can_poll(BYVAL AS GPollableInputStream PTR) AS gboolean
DECLARE FUNCTION g_pollable_input_stream_create_source(BYVAL AS GPollableInputStream PTR, BYVAL AS GCancellable PTR) AS GSource PTR
DECLARE FUNCTION g_pollable_input_stream_is_readable(BYVAL AS GPollableInputStream PTR) AS gboolean
DECLARE FUNCTION g_pollable_input_stream_read_nonblocking(BYVAL AS GPollableInputStream PTR, BYVAL AS any ptr /'void'/ PTR, BYVAL AS gsize, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS gssize
TYPE _GPollableInputStreamInterface
  AS GTypeInterface g_iface
  can_poll AS FUNCTION CDECL(BYVAL AS GPollableInputStream PTR) AS gboolean
  is_readable AS FUNCTION CDECL(BYVAL AS GPollableInputStream PTR) AS gboolean
  create_source AS FUNCTION CDECL(BYVAL AS GPollableInputStream PTR, BYVAL AS GCancellable PTR) AS GSource PTR
  read_nonblocking AS FUNCTION CDECL(BYVAL AS GPollableInputStream PTR, BYVAL AS any ptr /'void'/ PTR, BYVAL AS gsize, BYVAL AS GError PTR PTR) AS gssize
END TYPE
DECLARE FUNCTION g_pollable_output_stream_get_type() AS GType
#DEFINE G_TYPE_POLLABLE_OUTPUT_STREAM (g_pollable_output_stream_get_type())
#DEFINE G_POLLABLE_OUTPUT_STREAM(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), G_TYPE_POLLABLE_OUTPUT_STREAM, GPollableOutputStream))
#DEFINE G_POLLABLE_OUTPUT_STREAM_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), G_TYPE_POLLABLE_OUTPUT_STREAM, GPollableOutputStreamInterface))
#DEFINE G_IS_POLLABLE_OUTPUT_STREAM(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), G_TYPE_POLLABLE_OUTPUT_STREAM))
#DEFINE G_POLLABLE_OUTPUT_STREAM_GET_IFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE((obj), G_TYPE_POLLABLE_OUTPUT_STREAM, GPollableOutputStreamInterface))
DECLARE FUNCTION g_pollable_output_stream_can_poll(BYVAL AS GPollableOutputStream PTR) AS gboolean
DECLARE FUNCTION g_pollable_output_stream_create_source(BYVAL AS GPollableOutputStream PTR, BYVAL AS GCancellable PTR) AS GSource PTR
DECLARE FUNCTION g_pollable_output_stream_is_writable(BYVAL AS GPollableOutputStream PTR) AS gboolean
DECLARE FUNCTION g_pollable_output_stream_write_nonblocking(BYVAL AS GPollableOutputStream PTR, BYVAL AS any ptr /'void'/ PTR, BYVAL AS gsize, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS gssize
DECLARE FUNCTION g_pollable_output_stream_writev_nonblocking(BYVAL AS GPollableOutputStream PTR, BYVAL AS const GOutputVector PTR, BYVAL AS gsize, BYVAL AS gsize PTR, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS GPollableReturn
TYPE _GPollableOutputStreamInterface
  AS GTypeInterface g_iface
  can_poll AS FUNCTION CDECL(BYVAL AS GPollableOutputStream PTR) AS gboolean
  is_writable AS FUNCTION CDECL(BYVAL AS GPollableOutputStream PTR) AS gboolean
  create_source AS FUNCTION CDECL(BYVAL AS GPollableOutputStream PTR, BYVAL AS GCancellable PTR) AS GSource PTR
  write_nonblocking AS FUNCTION CDECL(BYVAL AS GPollableOutputStream PTR, BYVAL AS any ptr /'void'/ PTR, BYVAL AS gsize, BYVAL AS GError PTR PTR) AS gssize
  writev_nonblocking AS FUNCTION CDECL(BYVAL AS GPollableOutputStream PTR, BYVAL AS const GOutputVector PTR, BYVAL AS gsize, BYVAL AS gsize PTR, BYVAL AS GError PTR PTR) AS GPollableReturn
END TYPE
TYPE GPollableSourceFunc AS FUNCTION CDECL(BYVAL AS GObject PTR, BYVAL AS gpointer, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION g_pollable_return_get_type() AS GType
#DEFINE G_TYPE_POLLABLE_RETURN (g_pollable_return_get_type())
DECLARE FUNCTION g_property_action_get_type() AS GType
#DEFINE G_TYPE_PROPERTY_ACTION (g_property_action_get_type())
#DEFINE G_PROPERTY_ACTION(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), G_TYPE_PROPERTY_ACTION, GPropertyAction))
#DEFINE G_PROPERTY_ACTION_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), G_TYPE_PROPERTY_ACTION, G))
#DEFINE G_IS_PROPERTY_ACTION(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), G_TYPE_PROPERTY_ACTION))
#DEFINE G_IS_CLASS_PROPERTY_ACTION(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), G_TYPE_PROPERTY_ACTION))
#DEFINE G_PROPERTY_ACTION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), G_TYPE_PROPERTY_ACTION, G))
DECLARE FUNCTION g_property_action_new(BYVAL AS const gchar PTR, BYVAL AS gpointer, BYVAL AS const gchar PTR) AS GPropertyAction PTR
DECLARE FUNCTION g_proxy_get_type() AS GType
#DEFINE G_TYPE_PROXY (g_proxy_get_type())
#DEFINE G_PROXY(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), G_TYPE_PROXY, GProxy))
#DEFINE G_PROXY_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), G_TYPE_PROXY, GProxyInterface))
#DEFINE G_IS_PROXY(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), G_TYPE_PROXY))
#DEFINE G_PROXY_GET_IFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE((obj), G_TYPE_PROXY, GProxyInterface))
DECLARE FUNCTION g_proxy_get_default_for_protocol(BYVAL AS const gchar PTR) AS GProxy PTR
DECLARE FUNCTION g_proxy_connect(BYVAL AS GProxy PTR, BYVAL AS GIOStream PTR, BYVAL AS GProxyAddress PTR, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS GIOStream PTR
DECLARE SUB g_proxy_connect_async(BYVAL AS GProxy PTR, BYVAL AS GIOStream PTR, BYVAL AS GProxyAddress PTR, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
DECLARE FUNCTION g_proxy_connect_finish(BYVAL AS GProxy PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS GIOStream PTR
DECLARE FUNCTION g_proxy_supports_hostname(BYVAL AS GProxy PTR) AS gboolean
TYPE _GProxyAddress
  AS GInetSocketAddress parent_instance
  AS GProxyAddressPrivate PTR priv
END TYPE
DECLARE FUNCTION g_proxy_address_get_type() AS GType
#DEFINE G_TYPE_PROXY_ADDRESS (g_proxy_address_get_type())
#DEFINE G_PROXY_ADDRESS(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), G_TYPE_PROXY_ADDRESS, GProxyAddress))
#DEFINE G_PROXY_ADDRESS_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), G_TYPE_PROXY_ADDRESS, GProxyAddressClass))
#DEFINE G_IS_PROXY_ADDRESS(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), G_TYPE_PROXY_ADDRESS))
#DEFINE G_IS_CLASS_PROXY_ADDRESS(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), G_TYPE_PROXY_ADDRESS))
#DEFINE G_PROXY_ADDRESS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), G_TYPE_PROXY_ADDRESS, GProxyAddressClass))
DECLARE FUNCTION g_proxy_address_new(BYVAL AS GInetAddress PTR, BYVAL AS guint16, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS guint16, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR) AS GSocketAddress PTR
DECLARE FUNCTION g_proxy_address_get_destination_hostname(BYVAL AS GProxyAddress PTR) AS const gchar PTR
DECLARE FUNCTION g_proxy_address_get_destination_port(BYVAL AS GProxyAddress PTR) AS guint16
DECLARE FUNCTION g_proxy_address_get_destination_protocol(BYVAL AS GProxyAddress PTR) AS const gchar PTR
DECLARE FUNCTION g_proxy_address_get_password(BYVAL AS GProxyAddress PTR) AS const gchar PTR
DECLARE FUNCTION g_proxy_address_get_protocol(BYVAL AS GProxyAddress PTR) AS const gchar PTR
DECLARE FUNCTION g_proxy_address_get_uri(BYVAL AS GProxyAddress PTR) AS const gchar PTR
DECLARE FUNCTION g_proxy_address_get_username(BYVAL AS GProxyAddress PTR) AS const gchar PTR
TYPE _GProxyAddressClass
  AS GInetSocketAddressClass parent_class
END TYPE
TYPE _GProxyAddressEnumerator
  AS GSocketAddressEnumerator parent_instance
  AS GProxyAddressEnumeratorPrivate PTR priv
END TYPE
DECLARE FUNCTION g_proxy_address_enumerator_get_type() AS GType
#DEFINE G_TYPE_PROXY_ADDRESS_ENUMERATOR (g_proxy_address_enumerator_get_type())
#DEFINE G_PROXY_ADDRESS_ENUMERATOR(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), G_TYPE_PROXY_ADDRESS_ENUMERATOR, GProxyAddressEnumerator))
#DEFINE G_PROXY_ADDRESS_ENUMERATOR_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), G_TYPE_PROXY_ADDRESS_ENUMERATOR, GProxyAddressEnumeratorClass))
#DEFINE G_IS_PROXY_ADDRESS_ENUMERATOR(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), G_TYPE_PROXY_ADDRESS_ENUMERATOR))
#DEFINE G_IS_CLASS_PROXY_ADDRESS_ENUMERATOR(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), G_TYPE_PROXY_ADDRESS_ENUMERATOR))
#DEFINE G_PROXY_ADDRESS_ENUMERATOR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), G_TYPE_PROXY_ADDRESS_ENUMERATOR, GProxyAddressEnumeratorClass))
TYPE _GProxyAddressEnumeratorClass
  AS GSocketAddressEnumeratorClass parent_class
  _g_reserved1 AS SUB CDECL()
  _g_reserved2 AS SUB CDECL()
  _g_reserved3 AS SUB CDECL()
  _g_reserved4 AS SUB CDECL()
  _g_reserved5 AS SUB CDECL()
  _g_reserved6 AS SUB CDECL()
  _g_reserved7 AS SUB CDECL()
END TYPE
TYPE _GProxyInterface
  AS GTypeInterface g_iface
  connect AS FUNCTION CDECL(BYVAL AS GProxy PTR, BYVAL AS GIOStream PTR, BYVAL AS GProxyAddress PTR, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS GIOStream PTR
  connect_async AS SUB CDECL(BYVAL AS GProxy PTR, BYVAL AS GIOStream PTR, BYVAL AS GProxyAddress PTR, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
  connect_finish AS FUNCTION CDECL(BYVAL AS GProxy PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS GIOStream PTR
  supports_hostname AS FUNCTION CDECL(BYVAL AS GProxy PTR) AS gboolean
END TYPE
DECLARE FUNCTION g_proxy_resolver_get_type() AS GType
#DEFINE G_TYPE_PROXY_RESOLVER (g_proxy_resolver_get_type())
#DEFINE G_PROXY_RESOLVER(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), G_TYPE_PROXY_RESOLVER, GProxyResolver))
#DEFINE G_PROXY_RESOLVER_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), G_TYPE_PROXY_RESOLVER, GProxyResolverInterface))
#DEFINE G_IS_PROXY_RESOLVER(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), G_TYPE_PROXY_RESOLVER))
#DEFINE G_PROXY_RESOLVER_GET_IFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE((obj), G_TYPE_PROXY_RESOLVER, GProxyResolverInterface))
DECLARE FUNCTION g_proxy_resolver_get_default() AS GProxyResolver PTR
DECLARE FUNCTION g_proxy_resolver_is_supported(BYVAL AS GProxyResolver PTR) AS gboolean
DECLARE FUNCTION g_proxy_resolver_lookup(BYVAL AS GProxyResolver PTR, BYVAL AS const gchar PTR, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS gchar PTR PTR
DECLARE SUB g_proxy_resolver_lookup_async(BYVAL AS GProxyResolver PTR, BYVAL AS const gchar PTR, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
DECLARE FUNCTION g_proxy_resolver_lookup_finish(BYVAL AS GProxyResolver PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS gchar PTR PTR
TYPE _GProxyResolverInterface
  AS GTypeInterface g_iface
  is_supported AS FUNCTION CDECL(BYVAL AS GProxyResolver PTR) AS gboolean
  lookup AS FUNCTION CDECL(BYVAL AS GProxyResolver PTR, BYVAL AS const gchar PTR, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS gchar PTR PTR
  lookup_async AS SUB CDECL(BYVAL AS GProxyResolver PTR, BYVAL AS const gchar PTR, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
  lookup_finish AS FUNCTION CDECL(BYVAL AS GProxyResolver PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS gchar PTR PTR
END TYPE
DECLARE FUNCTION g_remote_action_group_get_type() AS GType
#DEFINE G_TYPE_REMOTE_ACTION_GROUP (g_remote_action_group_get_type())
#DEFINE G_REMOTE_ACTION_GROUP(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), G_TYPE_REMOTE_ACTION_GROUP, GRemoteActionGroup))
#DEFINE G_REMOTE_ACTION_GROUP_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), G_TYPE_REMOTE_ACTION_GROUP, GRemoteActionGroupInterface))
#DEFINE G_IS_REMOTE_ACTION_GROUP(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), G_TYPE_REMOTE_ACTION_GROUP))
#DEFINE G_REMOTE_ACTION_GROUP_GET_IFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE((obj), G_TYPE_REMOTE_ACTION_GROUP, GRemoteActionGroupInterface))
DECLARE SUB g_remote_action_group_activate_action_full(BYVAL AS GRemoteActionGroup PTR, BYVAL AS const gchar PTR, BYVAL AS GVariant PTR, BYVAL AS GVariant PTR)
DECLARE SUB g_remote_action_group_change_action_state_full(BYVAL AS GRemoteActionGroup PTR, BYVAL AS const gchar PTR, BYVAL AS GVariant PTR, BYVAL AS GVariant PTR)
TYPE _GRemoteActionGroupInterface
  AS GTypeInterface g_iface
  activate_action_full AS SUB CDECL(BYVAL AS GRemoteActionGroup PTR, BYVAL AS const gchar PTR, BYVAL AS GVariant PTR, BYVAL AS GVariant PTR)
  change_action_state_full AS SUB CDECL(BYVAL AS GRemoteActionGroup PTR, BYVAL AS const gchar PTR, BYVAL AS GVariant PTR, BYVAL AS GVariant PTR)
END TYPE
TYPE _GResolver
  AS GObject parent_instance
  AS GResolverPrivate PTR priv
END TYPE
DECLARE FUNCTION g_resolver_get_type() AS GType
#DEFINE G_TYPE_RESOLVER (g_resolver_get_type())
#DEFINE G_RESOLVER(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), G_TYPE_RESOLVER, GResolver))
#DEFINE G_RESOLVER_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), G_TYPE_RESOLVER, GResolverClass))
#DEFINE G_IS_RESOLVER(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), G_TYPE_RESOLVER))
#DEFINE G_IS_CLASS_RESOLVER(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), G_TYPE_RESOLVER))
#DEFINE G_RESOLVER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), G_TYPE_RESOLVER, GResolverClass))
DECLARE SUB g_resolver_free_addresses(BYVAL AS GList PTR)
DECLARE SUB g_resolver_free_targets(BYVAL AS GList PTR)
DECLARE FUNCTION g_resolver_get_default() AS GResolver PTR
DECLARE FUNCTION g_resolver_lookup_by_address(BYVAL AS GResolver PTR, BYVAL AS GInetAddress PTR, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS gchar PTR
DECLARE SUB g_resolver_lookup_by_address_async(BYVAL AS GResolver PTR, BYVAL AS GInetAddress PTR, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
DECLARE FUNCTION g_resolver_lookup_by_address_finish(BYVAL AS GResolver PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS gchar PTR
DECLARE FUNCTION g_resolver_lookup_by_name(BYVAL AS GResolver PTR, BYVAL AS const gchar PTR, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS GList PTR
DECLARE SUB g_resolver_lookup_by_name_async(BYVAL AS GResolver PTR, BYVAL AS const gchar PTR, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
DECLARE FUNCTION g_resolver_lookup_by_name_finish(BYVAL AS GResolver PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS GList PTR
DECLARE FUNCTION g_resolver_lookup_by_name_with_flags(BYVAL AS GResolver PTR, BYVAL AS const gchar PTR, BYVAL AS GResolverNameLookupFlags, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS GList PTR
DECLARE SUB g_resolver_lookup_by_name_with_flags_async(BYVAL AS GResolver PTR, BYVAL AS const gchar PTR, BYVAL AS GResolverNameLookupFlags, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
DECLARE FUNCTION g_resolver_lookup_by_name_with_flags_finish(BYVAL AS GResolver PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS GList PTR
DECLARE FUNCTION g_resolver_lookup_records(BYVAL AS GResolver PTR, BYVAL AS const gchar PTR, BYVAL AS GResolverRecordType, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS GList PTR
DECLARE SUB g_resolver_lookup_records_async(BYVAL AS GResolver PTR, BYVAL AS const gchar PTR, BYVAL AS GResolverRecordType, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
DECLARE FUNCTION g_resolver_lookup_records_finish(BYVAL AS GResolver PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS GList PTR
DECLARE FUNCTION g_resolver_lookup_service(BYVAL AS GResolver PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS GList PTR
DECLARE SUB g_resolver_lookup_service_async(BYVAL AS GResolver PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
DECLARE FUNCTION g_resolver_lookup_service_finish(BYVAL AS GResolver PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS GList PTR
DECLARE SUB g_resolver_set_default(BYVAL AS GResolver PTR)
TYPE _GResolverClass
  AS GObjectClass parent_class
  reload AS SUB CDECL(BYVAL AS GResolver PTR)
  lookup_by_name AS FUNCTION CDECL(BYVAL AS GResolver PTR, BYVAL AS const gchar PTR, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS GList PTR
  lookup_by_name_async AS SUB CDECL(BYVAL AS GResolver PTR, BYVAL AS const gchar PTR, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
  lookup_by_name_finish AS FUNCTION CDECL(BYVAL AS GResolver PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS GList PTR
  lookup_by_address AS FUNCTION CDECL(BYVAL AS GResolver PTR, BYVAL AS GInetAddress PTR, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS gchar PTR
  lookup_by_address_async AS SUB CDECL(BYVAL AS GResolver PTR, BYVAL AS GInetAddress PTR, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
  lookup_by_address_finish AS FUNCTION CDECL(BYVAL AS GResolver PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS gchar PTR
  lookup_service AS FUNCTION CDECL(BYVAL AS GResolver PTR, BYVAL AS const gchar PTR, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS GList PTR
  lookup_service_async AS SUB CDECL(BYVAL AS GResolver PTR, BYVAL AS const gchar PTR, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
  lookup_service_finish AS FUNCTION CDECL(BYVAL AS GResolver PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS GList PTR
  lookup_records AS FUNCTION CDECL(BYVAL AS GResolver PTR, BYVAL AS const gchar PTR, BYVAL AS GResolverRecordType, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS GList PTR
  lookup_records_async AS SUB CDECL(BYVAL AS GResolver PTR, BYVAL AS const gchar PTR, BYVAL AS GResolverRecordType, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
  lookup_records_finish AS FUNCTION CDECL(BYVAL AS GResolver PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS GList PTR
  lookup_by_name_with_flags_async AS SUB CDECL(BYVAL AS GResolver PTR, BYVAL AS const gchar PTR, BYVAL AS GResolverNameLookupFlags, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
  lookup_by_name_with_flags_finish AS FUNCTION CDECL(BYVAL AS GResolver PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS GList PTR
  lookup_by_name_with_flags AS FUNCTION CDECL(BYVAL AS GResolver PTR, BYVAL AS const gchar PTR, BYVAL AS GResolverNameLookupFlags, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS GList PTR
END TYPE
DECLARE FUNCTION g_resolver_error_get_type() AS GType
#DEFINE G_TYPE_RESOLVER_ERROR (g_resolver_error_get_type())
DECLARE FUNCTION g_resolver_record_type_get_type() AS GType
#DEFINE G_TYPE_RESOLVER_RECORD_TYPE (g_resolver_record_type_get_type())
DECLARE FUNCTION g_resource_new_from_data(BYVAL AS GBytes PTR, BYVAL AS GError PTR PTR) AS GResource PTR
DECLARE SUB g_resources_register(BYVAL AS GResource PTR)
DECLARE SUB g_resources_unregister(BYVAL AS GResource PTR)
DECLARE FUNCTION g_resource_enumerate_children(BYVAL AS GResource PTR, BYVAL AS const gchar PTR, BYVAL AS GResourceLookupFlags, BYVAL AS GError PTR PTR) AS zstring /'gchar'/ PTR PTR
DECLARE FUNCTION g_resource_get_info(BYVAL AS GResource PTR, BYVAL AS const gchar PTR, BYVAL AS GResourceLookupFlags, BYVAL AS gsize PTR, BYVAL AS guint32 PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION g_resource_lookup_data(BYVAL AS GResource PTR, BYVAL AS const gchar PTR, BYVAL AS GResourceLookupFlags, BYVAL AS GError PTR PTR) AS GBytes PTR
DECLARE FUNCTION g_resource_open_stream(BYVAL AS GResource PTR, BYVAL AS const gchar PTR, BYVAL AS GResourceLookupFlags, BYVAL AS GError PTR PTR) AS GInputStream PTR
DECLARE FUNCTION g_resource_ref(BYVAL AS GResource PTR) AS GResource PTR
DECLARE SUB g_resource_unref(BYVAL AS GResource PTR)
DECLARE FUNCTION g_resource_load(BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR) AS GResource PTR
DECLARE FUNCTION g_resource_error_get_type() AS GType
#DEFINE G_TYPE_RESOURCE_ERROR (g_resource_error_get_type())
DECLARE FUNCTION g_seekable_get_type() AS GType
#DEFINE G_TYPE_SEEKABLE (g_seekable_get_type())
#DEFINE G_SEEKABLE(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), G_TYPE_SEEKABLE, GSeekable))
#DEFINE G_SEEKABLE_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), G_TYPE_SEEKABLE, GSeekableIface))
#DEFINE G_IS_SEEKABLE(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), G_TYPE_SEEKABLE))
#DEFINE G_SEEKABLE_GET_IFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE((obj), G_TYPE_SEEKABLE, GSeekableIface))
DECLARE FUNCTION g_seekable_can_seek(BYVAL AS GSeekable PTR) AS gboolean
DECLARE FUNCTION g_seekable_can_truncate(BYVAL AS GSeekable PTR) AS gboolean
DECLARE FUNCTION g_seekable_seek(BYVAL AS GSeekable PTR, BYVAL AS gint32 /'goffset'/, BYVAL AS GSeekType, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION g_seekable_tell(BYVAL AS GSeekable PTR) AS gint32 /'goffset'/
DECLARE FUNCTION g_seekable_truncate(BYVAL AS GSeekable PTR, BYVAL AS gint32 /'goffset'/, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS gboolean
TYPE _GSeekableIface
  AS GTypeInterface g_iface
  tell AS FUNCTION CDECL(BYVAL AS GSeekable PTR) AS gint32 /'goffset'/
  can_seek AS FUNCTION CDECL(BYVAL AS GSeekable PTR) AS gboolean
  seek AS FUNCTION CDECL(BYVAL AS GSeekable PTR, BYVAL AS gint32 /'goffset'/, BYVAL AS GSeekType, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS gboolean
  can_truncate AS FUNCTION CDECL(BYVAL AS GSeekable PTR) AS gboolean
  truncate_fn AS FUNCTION CDECL(BYVAL AS GSeekable PTR, BYVAL AS gint32 /'goffset'/, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS gboolean
END TYPE
TYPE _GSettings
  AS GObject parent_instance
  AS GSettingsPrivate PTR priv
END TYPE
DECLARE FUNCTION g_settings_get_type() AS GType
#DEFINE G_TYPE_SETTINGS (g_settings_get_type())
#DEFINE G_SETTINGS(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), G_TYPE_SETTINGS, GSettings))
#DEFINE G_SETTINGS_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), G_TYPE_SETTINGS, GSettingsClass))
#DEFINE G_IS_SETTINGS(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), G_TYPE_SETTINGS))
#DEFINE G_IS_CLASS_SETTINGS(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), G_TYPE_SETTINGS))
#DEFINE G_SETTINGS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), G_TYPE_SETTINGS, GSettingsClass))
DECLARE FUNCTION g_settings_new(BYVAL AS const gchar PTR) AS GSettings PTR
DECLARE FUNCTION g_settings_new_full(BYVAL AS GSettingsSchema PTR, BYVAL AS GSettingsBackend PTR, BYVAL AS const gchar PTR) AS GSettings PTR
DECLARE FUNCTION g_settings_new_with_backend(BYVAL AS const gchar PTR, BYVAL AS GSettingsBackend PTR) AS GSettings PTR
DECLARE FUNCTION g_settings_new_with_backend_and_path(BYVAL AS const gchar PTR, BYVAL AS GSettingsBackend PTR, BYVAL AS const gchar PTR) AS GSettings PTR
DECLARE FUNCTION g_settings_new_with_path(BYVAL AS const gchar PTR, BYVAL AS const gchar PTR) AS GSettings PTR
DECLARE FUNCTION g_settings_list_relocatable_schemas() AS const gchar ptr const /'const gchar* const'/ PTR
DECLARE FUNCTION g_settings_list_schemas() AS const gchar ptr const /'const gchar* const'/ PTR
DECLARE SUB g_settings_sync()
DECLARE SUB g_settings_unbind(BYVAL AS gpointer, BYVAL AS const gchar PTR)
DECLARE SUB g_settings_apply(BYVAL AS GSettings PTR)
DECLARE SUB g_settings_bind(BYVAL AS GSettings PTR, BYVAL AS const gchar PTR, BYVAL AS gpointer, BYVAL AS const gchar PTR, BYVAL AS GSettingsBindFlags)
DECLARE SUB g_settings_bind_with_mapping(BYVAL AS GSettings PTR, BYVAL AS const gchar PTR, BYVAL AS gpointer, BYVAL AS const gchar PTR, BYVAL AS GSettingsBindFlags, BYVAL AS GSettingsBindGetMapping, BYVAL AS GSettingsBindSetMapping, BYVAL AS gpointer, BYVAL AS GDestroyNotify)
DECLARE SUB g_settings_bind_writable(BYVAL AS GSettings PTR, BYVAL AS const gchar PTR, BYVAL AS gpointer, BYVAL AS const gchar PTR, BYVAL AS gboolean)
DECLARE FUNCTION g_settings_create_action(BYVAL AS GSettings PTR, BYVAL AS const gchar PTR) AS GAction PTR
DECLARE SUB g_settings_delay(BYVAL AS GSettings PTR)
DECLARE SUB g_settings_get(BYVAL AS GSettings PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, ...)
DECLARE FUNCTION g_settings_get_boolean(BYVAL AS GSettings PTR, BYVAL AS const gchar PTR) AS gboolean
DECLARE FUNCTION g_settings_get_child(BYVAL AS GSettings PTR, BYVAL AS const gchar PTR) AS GSettings PTR
DECLARE FUNCTION g_settings_get_default_value(BYVAL AS GSettings PTR, BYVAL AS const gchar PTR) AS GVariant PTR
DECLARE FUNCTION g_settings_get_double(BYVAL AS GSettings PTR, BYVAL AS const gchar PTR) AS gdouble
DECLARE FUNCTION g_settings_get_enum(BYVAL AS GSettings PTR, BYVAL AS const gchar PTR) AS gint
DECLARE FUNCTION g_settings_get_flags(BYVAL AS GSettings PTR, BYVAL AS const gchar PTR) AS guint
DECLARE FUNCTION g_settings_get_has_unapplied(BYVAL AS GSettings PTR) AS gboolean
DECLARE FUNCTION g_settings_get_int(BYVAL AS GSettings PTR, BYVAL AS const gchar PTR) AS gint
DECLARE FUNCTION g_settings_get_int64(BYVAL AS GSettings PTR, BYVAL AS const gchar PTR) AS gint64
DECLARE FUNCTION g_settings_get_mapped(BYVAL AS GSettings PTR, BYVAL AS const gchar PTR, BYVAL AS GSettingsGetMapping, BYVAL AS gpointer) AS gpointer
DECLARE FUNCTION g_settings_get_range(BYVAL AS GSettings PTR, BYVAL AS const gchar PTR) AS GVariant PTR
DECLARE FUNCTION g_settings_get_string(BYVAL AS GSettings PTR, BYVAL AS const gchar PTR) AS gchar PTR
DECLARE FUNCTION g_settings_get_strv(BYVAL AS GSettings PTR, BYVAL AS const gchar PTR) AS gchar PTR PTR
DECLARE FUNCTION g_settings_get_uint(BYVAL AS GSettings PTR, BYVAL AS const gchar PTR) AS guint
DECLARE FUNCTION g_settings_get_uint64(BYVAL AS GSettings PTR, BYVAL AS const gchar PTR) AS guint64
DECLARE FUNCTION g_settings_get_user_value(BYVAL AS GSettings PTR, BYVAL AS const gchar PTR) AS GVariant PTR
DECLARE FUNCTION g_settings_get_value(BYVAL AS GSettings PTR, BYVAL AS const gchar PTR) AS GVariant PTR
DECLARE FUNCTION g_settings_is_writable(BYVAL AS GSettings PTR, BYVAL AS const gchar PTR) AS gboolean
DECLARE FUNCTION g_settings_list_children(BYVAL AS GSettings PTR) AS gchar PTR PTR
DECLARE FUNCTION g_settings_list_keys(BYVAL AS GSettings PTR) AS gchar PTR PTR
DECLARE FUNCTION g_settings_range_check(BYVAL AS GSettings PTR, BYVAL AS const gchar PTR, BYVAL AS GVariant PTR) AS gboolean
DECLARE SUB g_settings_reset(BYVAL AS GSettings PTR, BYVAL AS const gchar PTR)
DECLARE SUB g_settings_revert(BYVAL AS GSettings PTR)
DECLARE FUNCTION g_settings_set(BYVAL AS GSettings PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, ...) AS gboolean
DECLARE FUNCTION g_settings_set_boolean(BYVAL AS GSettings PTR, BYVAL AS const gchar PTR, BYVAL AS gboolean) AS gboolean
DECLARE FUNCTION g_settings_set_double(BYVAL AS GSettings PTR, BYVAL AS const gchar PTR, BYVAL AS gdouble) AS gboolean
DECLARE FUNCTION g_settings_set_enum(BYVAL AS GSettings PTR, BYVAL AS const gchar PTR, BYVAL AS gint) AS gboolean
DECLARE FUNCTION g_settings_set_flags(BYVAL AS GSettings PTR, BYVAL AS const gchar PTR, BYVAL AS guint) AS gboolean
DECLARE FUNCTION g_settings_set_int(BYVAL AS GSettings PTR, BYVAL AS const gchar PTR, BYVAL AS gint) AS gboolean
DECLARE FUNCTION g_settings_set_int64(BYVAL AS GSettings PTR, BYVAL AS const gchar PTR, BYVAL AS gint64) AS gboolean
DECLARE FUNCTION g_settings_set_string(BYVAL AS GSettings PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR) AS gboolean
DECLARE FUNCTION g_settings_set_strv(BYVAL AS GSettings PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar ptr const /'const gchar* const'/ PTR) AS gboolean
DECLARE FUNCTION g_settings_set_uint(BYVAL AS GSettings PTR, BYVAL AS const gchar PTR, BYVAL AS guint) AS gboolean
DECLARE FUNCTION g_settings_set_uint64(BYVAL AS GSettings PTR, BYVAL AS const gchar PTR, BYVAL AS guint64) AS gboolean
DECLARE FUNCTION g_settings_set_value(BYVAL AS GSettings PTR, BYVAL AS const gchar PTR, BYVAL AS GVariant PTR) AS gboolean
TYPE _GSettingsBackend
  AS GObject parent_instance
  AS GSettingsBackendPrivate PTR priv
END TYPE
DECLARE FUNCTION g_settings_backend_get_type() AS GType
#DEFINE G_TYPE_SETTINGS_BACKEND (g_settings_backend_get_type())
#DEFINE G_SETTINGS_BACKEND(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), G_TYPE_SETTINGS_BACKEND, GSettingsBackend))
#DEFINE G_SETTINGS_BACKEND_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), G_TYPE_SETTINGS_BACKEND, GSettingsBackendClass))
#DEFINE G_IS_SETTINGS_BACKEND(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), G_TYPE_SETTINGS_BACKEND))
#DEFINE G_IS_CLASS_SETTINGS_BACKEND(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), G_TYPE_SETTINGS_BACKEND))
#DEFINE G_SETTINGS_BACKEND_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), G_TYPE_SETTINGS_BACKEND, GSettingsBackendClass))
DECLARE SUB g_settings_backend_flatten_tree(BYVAL AS GTree PTR, BYVAL AS gchar PTR PTR, BYVAL AS const gchar PTR PTR PTR, BYVAL AS GVariant PTR PTR PTR)
DECLARE FUNCTION g_settings_backend_get_default() AS GSettingsBackend PTR
DECLARE SUB g_settings_backend_changed(BYVAL AS GSettingsBackend PTR, BYVAL AS const gchar PTR, BYVAL AS gpointer)
DECLARE SUB g_settings_backend_changed_tree(BYVAL AS GSettingsBackend PTR, BYVAL AS GTree PTR, BYVAL AS gpointer)
DECLARE SUB g_settings_backend_keys_changed(BYVAL AS GSettingsBackend PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar ptr const /'const gchar* const'/ PTR, BYVAL AS gpointer)
DECLARE SUB g_settings_backend_path_changed(BYVAL AS GSettingsBackend PTR, BYVAL AS const gchar PTR, BYVAL AS gpointer)
DECLARE SUB g_settings_backend_path_writable_changed(BYVAL AS GSettingsBackend PTR, BYVAL AS const gchar PTR)
DECLARE SUB g_settings_backend_writable_changed(BYVAL AS GSettingsBackend PTR, BYVAL AS const gchar PTR)
TYPE _GSettingsBackendClass
  AS GObjectClass parent_class
  read AS FUNCTION CDECL(BYVAL AS GSettingsBackend PTR, BYVAL AS const gchar PTR, BYVAL AS const GVariantType PTR, BYVAL AS gboolean) AS GVariant PTR
  get_writable AS FUNCTION CDECL(BYVAL AS GSettingsBackend PTR, BYVAL AS const gchar PTR) AS gboolean
  write AS FUNCTION CDECL(BYVAL AS GSettingsBackend PTR, BYVAL AS const gchar PTR, BYVAL AS GVariant PTR, BYVAL AS gpointer) AS gboolean
  write_tree AS FUNCTION CDECL(BYVAL AS GSettingsBackend PTR, BYVAL AS GTree PTR, BYVAL AS gpointer) AS gboolean
  reset AS SUB CDECL(BYVAL AS GSettingsBackend PTR, BYVAL AS const gchar PTR, BYVAL AS gpointer)
  subscribe AS SUB CDECL(BYVAL AS GSettingsBackend PTR, BYVAL AS const gchar PTR)
  unsubscribe AS SUB CDECL(BYVAL AS GSettingsBackend PTR, BYVAL AS const gchar PTR)
  sync AS SUB CDECL(BYVAL AS GSettingsBackend PTR)
  get_permission AS FUNCTION CDECL(BYVAL AS GSettingsBackend PTR, BYVAL AS const gchar PTR) AS GPermission PTR
  read_user_value AS FUNCTION CDECL(BYVAL AS GSettingsBackend PTR, BYVAL AS const gchar PTR, BYVAL AS const GVariantType PTR) AS GVariant PTR
  AS gpointer padding(22)
END TYPE
TYPE _GSettingsClass
  AS GObjectClass parent_class
  writable_changed AS SUB CDECL(BYVAL AS GSettings PTR, BYVAL AS const gchar PTR)
  changed AS SUB CDECL(BYVAL AS GSettings PTR, BYVAL AS const gchar PTR)
  writable_change_event AS FUNCTION CDECL(BYVAL AS GSettings PTR, BYVAL AS GQuark) AS gboolean
  change_event AS FUNCTION CDECL(BYVAL AS GSettings PTR, BYVAL AS const GQuark PTR, BYVAL AS gint) AS gboolean
  AS gpointer padding(19)
END TYPE
DECLARE FUNCTION g_settings_schema_get_id(BYVAL AS GSettingsSchema PTR) AS const gchar PTR
DECLARE FUNCTION g_settings_schema_get_key(BYVAL AS GSettingsSchema PTR, BYVAL AS const gchar PTR) AS GSettingsSchemaKey PTR
DECLARE FUNCTION g_settings_schema_get_path(BYVAL AS GSettingsSchema PTR) AS const gchar PTR
DECLARE FUNCTION g_settings_schema_has_key(BYVAL AS GSettingsSchema PTR, BYVAL AS const gchar PTR) AS gboolean
DECLARE FUNCTION g_settings_schema_list_children(BYVAL AS GSettingsSchema PTR) AS gchar PTR PTR
DECLARE FUNCTION g_settings_schema_list_keys(BYVAL AS GSettingsSchema PTR) AS gchar PTR PTR
DECLARE FUNCTION g_settings_schema_ref(BYVAL AS GSettingsSchema PTR) AS GSettingsSchema PTR
DECLARE SUB g_settings_schema_unref(BYVAL AS GSettingsSchema PTR)
DECLARE FUNCTION g_settings_schema_key_get_default_value(BYVAL AS GSettingsSchemaKey PTR) AS GVariant PTR
DECLARE FUNCTION g_settings_schema_key_get_description(BYVAL AS GSettingsSchemaKey PTR) AS const gchar PTR
DECLARE FUNCTION g_settings_schema_key_get_name(BYVAL AS GSettingsSchemaKey PTR) AS const gchar PTR
DECLARE FUNCTION g_settings_schema_key_get_range(BYVAL AS GSettingsSchemaKey PTR) AS GVariant PTR
DECLARE FUNCTION g_settings_schema_key_get_summary(BYVAL AS GSettingsSchemaKey PTR) AS const gchar PTR
DECLARE FUNCTION g_settings_schema_key_get_value_type(BYVAL AS GSettingsSchemaKey PTR) AS const GVariantType PTR
DECLARE FUNCTION g_settings_schema_key_range_check(BYVAL AS GSettingsSchemaKey PTR, BYVAL AS GVariant PTR) AS gboolean
DECLARE FUNCTION g_settings_schema_key_ref(BYVAL AS GSettingsSchemaKey PTR) AS GSettingsSchemaKey PTR
DECLARE SUB g_settings_schema_key_unref(BYVAL AS GSettingsSchemaKey PTR)
DECLARE FUNCTION g_settings_schema_source_new_from_directory(BYVAL AS const gchar PTR, BYVAL AS GSettingsSchemaSource PTR, BYVAL AS gboolean, BYVAL AS GError PTR PTR) AS GSettingsSchemaSource PTR
DECLARE SUB g_settings_schema_source_list_schemas(BYVAL AS GSettingsSchemaSource PTR, BYVAL AS gboolean, BYVAL AS gchar PTR PTR PTR, BYVAL AS gchar PTR PTR PTR)
DECLARE FUNCTION g_settings_schema_source_lookup(BYVAL AS GSettingsSchemaSource PTR, BYVAL AS const gchar PTR, BYVAL AS gboolean) AS GSettingsSchema PTR
DECLARE FUNCTION g_settings_schema_source_ref(BYVAL AS GSettingsSchemaSource PTR) AS GSettingsSchemaSource PTR
DECLARE SUB g_settings_schema_source_unref(BYVAL AS GSettingsSchemaSource PTR)
DECLARE FUNCTION g_settings_schema_source_get_default() AS GSettingsSchemaSource PTR
DECLARE FUNCTION g_simple_action_get_type() AS GType
#DEFINE G_TYPE_SIMPLE_ACTION (g_simple_action_get_type())
#DEFINE G_SIMPLE_ACTION(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), G_TYPE_SIMPLE_ACTION, GSimpleAction))
#DEFINE G_SIMPLE_ACTION_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), G_TYPE_SIMPLE_ACTION, G))
#DEFINE G_IS_SIMPLE_ACTION(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), G_TYPE_SIMPLE_ACTION))
#DEFINE G_IS_CLASS_SIMPLE_ACTION(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), G_TYPE_SIMPLE_ACTION))
#DEFINE G_SIMPLE_ACTION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), G_TYPE_SIMPLE_ACTION, G))
DECLARE FUNCTION g_simple_action_new(BYVAL AS const gchar PTR, BYVAL AS const GVariantType PTR) AS GSimpleAction PTR
DECLARE FUNCTION g_simple_action_new_stateful(BYVAL AS const gchar PTR, BYVAL AS const GVariantType PTR, BYVAL AS GVariant PTR) AS GSimpleAction PTR
DECLARE SUB g_simple_action_set_enabled(BYVAL AS GSimpleAction PTR, BYVAL AS gboolean)
DECLARE SUB g_simple_action_set_state(BYVAL AS GSimpleAction PTR, BYVAL AS GVariant PTR)
DECLARE SUB g_simple_action_set_state_hint(BYVAL AS GSimpleAction PTR, BYVAL AS GVariant PTR)
TYPE _GSimpleActionGroup
  AS GObject parent_instance
  AS GSimpleActionGroupPrivate PTR priv
END TYPE
DECLARE FUNCTION g_simple_action_group_get_type() AS GType
#DEFINE G_TYPE_SIMPLE_ACTION_GROUP (g_simple_action_group_get_type())
#DEFINE G_SIMPLE_ACTION_GROUP(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), G_TYPE_SIMPLE_ACTION_GROUP, GSimpleActionGroup))
#DEFINE G_SIMPLE_ACTION_GROUP_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), G_TYPE_SIMPLE_ACTION_GROUP, GSimpleActionGroupClass))
#DEFINE G_IS_SIMPLE_ACTION_GROUP(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), G_TYPE_SIMPLE_ACTION_GROUP))
#DEFINE G_IS_CLASS_SIMPLE_ACTION_GROUP(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), G_TYPE_SIMPLE_ACTION_GROUP))
#DEFINE G_SIMPLE_ACTION_GROUP_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), G_TYPE_SIMPLE_ACTION_GROUP, GSimpleActionGroupClass))
DECLARE FUNCTION g_simple_action_group_new() AS GSimpleActionGroup PTR
DECLARE SUB g_simple_action_group_add_entries(BYVAL AS GSimpleActionGroup PTR, BYVAL AS const GActionEntry PTR, BYVAL AS gint, BYVAL AS gpointer)
DECLARE SUB g_simple_action_group_insert(BYVAL AS GSimpleActionGroup PTR, BYVAL AS GAction PTR)
DECLARE FUNCTION g_simple_action_group_lookup(BYVAL AS GSimpleActionGroup PTR, BYVAL AS const gchar PTR) AS GAction PTR
DECLARE SUB g_simple_action_group_remove(BYVAL AS GSimpleActionGroup PTR, BYVAL AS const gchar PTR)
TYPE _GSimpleActionGroupClass
  AS GObjectClass parent_class
  AS gpointer padding(11)
END TYPE
DECLARE FUNCTION g_simple_async_result_get_type() AS GType
#DEFINE G_TYPE_SIMPLE_ASYNC_RESULT (g_simple_async_result_get_type())
#DEFINE G_SIMPLE_ASYNC_RESULT(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), G_TYPE_SIMPLE_ASYNC_RESULT, GSimpleAsyncResult))
#DEFINE G_SIMPLE_ASYNC_RESULT_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), G_TYPE_SIMPLE_ASYNC_RESULT, GSimpleAsyncResultClass))
#DEFINE G_IS_SIMPLE_ASYNC_RESULT(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), G_TYPE_SIMPLE_ASYNC_RESULT))
#DEFINE G_IS_CLASS_SIMPLE_ASYNC_RESULT(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), G_TYPE_SIMPLE_ASYNC_RESULT))
#DEFINE G_SIMPLE_ASYNC_RESULT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), G_TYPE_SIMPLE_ASYNC_RESULT, GSimpleAsyncResultClass))
DECLARE FUNCTION g_simple_async_result_new(BYVAL AS GObject PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer, BYVAL AS gpointer) AS GSimpleAsyncResult PTR
DECLARE FUNCTION g_simple_async_result_new_error(BYVAL AS GObject PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer, BYVAL AS GQuark, BYVAL AS gint, BYVAL AS const gchar PTR, ...) AS GSimpleAsyncResult PTR
DECLARE FUNCTION g_simple_async_result_new_from_error(BYVAL AS GObject PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer, BYVAL AS const GError PTR) AS GSimpleAsyncResult PTR
DECLARE FUNCTION g_simple_async_result_new_take_error(BYVAL AS GObject PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer, BYVAL AS GError PTR) AS GSimpleAsyncResult PTR
DECLARE FUNCTION g_simple_async_result_is_valid(BYVAL AS GAsyncResult PTR, BYVAL AS GObject PTR, BYVAL AS gpointer) AS gboolean
DECLARE SUB g_simple_async_result_complete(BYVAL AS GSimpleAsyncResult PTR)
DECLARE SUB g_simple_async_result_complete_in_idle(BYVAL AS GSimpleAsyncResult PTR)
DECLARE FUNCTION g_simple_async_result_get_op_res_gboolean(BYVAL AS GSimpleAsyncResult PTR) AS gboolean
DECLARE FUNCTION g_simple_async_result_get_op_res_gpointer(BYVAL AS GSimpleAsyncResult PTR) AS gpointer
DECLARE FUNCTION g_simple_async_result_get_op_res_gssize(BYVAL AS GSimpleAsyncResult PTR) AS gssize
DECLARE FUNCTION g_simple_async_result_get_source_tag(BYVAL AS GSimpleAsyncResult PTR) AS gpointer
DECLARE FUNCTION g_simple_async_result_propagate_error(BYVAL AS GSimpleAsyncResult PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE SUB g_simple_async_result_run_in_thread(BYVAL AS GSimpleAsyncResult PTR, BYVAL AS GSimpleAsyncThreadFunc, BYVAL AS gint /'int'/, BYVAL AS GCancellable PTR)
DECLARE SUB g_simple_async_result_set_check_cancellable(BYVAL AS GSimpleAsyncResult PTR, BYVAL AS GCancellable PTR)
DECLARE SUB g_simple_async_result_set_error(BYVAL AS GSimpleAsyncResult PTR, BYVAL AS GQuark, BYVAL AS gint, BYVAL AS const gchar PTR, ...)
DECLARE SUB g_simple_async_result_set_error_va(BYVAL AS GSimpleAsyncResult PTR, BYVAL AS GQuark, BYVAL AS gint, BYVAL AS const gchar PTR, BYVAL AS va_list)
DECLARE SUB g_simple_async_result_set_from_error(BYVAL AS GSimpleAsyncResult PTR, BYVAL AS const GError PTR)
DECLARE SUB g_simple_async_result_set_handle_cancellation(BYVAL AS GSimpleAsyncResult PTR, BYVAL AS gboolean)
DECLARE SUB g_simple_async_result_set_op_res_gboolean(BYVAL AS GSimpleAsyncResult PTR, BYVAL AS gboolean)
DECLARE SUB g_simple_async_result_set_op_res_gpointer(BYVAL AS GSimpleAsyncResult PTR, BYVAL AS gpointer, BYVAL AS GDestroyNotify)
DECLARE SUB g_simple_async_result_set_op_res_gssize(BYVAL AS GSimpleAsyncResult PTR, BYVAL AS gssize)
DECLARE SUB g_simple_async_result_take_error(BYVAL AS GSimpleAsyncResult PTR, BYVAL AS GError PTR)
DECLARE FUNCTION g_simple_io_stream_get_type() AS GType
#DEFINE G_TYPE_SIMPLE_IO_STREAM (g_simple_io_stream_get_type())
#DEFINE G_SIMPLE_IO_STREAM(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), G_TYPE_SIMPLE_IO_STREAM, GSimpleIOStream))
#DEFINE G_SIMPLE_IO_STREAM_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), G_TYPE_SIMPLE_IO_STREAM, G))
#DEFINE G_IS_SIMPLE_IO_STREAM(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), G_TYPE_SIMPLE_IO_STREAM))
#DEFINE G_IS_CLASS_SIMPLE_IO_STREAM(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), G_TYPE_SIMPLE_IO_STREAM))
#DEFINE G_SIMPLE_IO_STREAM_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), G_TYPE_SIMPLE_IO_STREAM, G))
DECLARE FUNCTION g_simple_io_stream_new(BYVAL AS GInputStream PTR, BYVAL AS GOutputStream PTR) AS GIOStream PTR
DECLARE FUNCTION g_simple_permission_get_type() AS GType
#DEFINE G_TYPE_SIMPLE_PERMISSION (g_simple_permission_get_type())
#DEFINE G_SIMPLE_PERMISSION(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), G_TYPE_SIMPLE_PERMISSION, GSimplePermission))
#DEFINE G_SIMPLE_PERMISSION_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), G_TYPE_SIMPLE_PERMISSION, G))
#DEFINE G_IS_SIMPLE_PERMISSION(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), G_TYPE_SIMPLE_PERMISSION))
#DEFINE G_IS_CLASS_SIMPLE_PERMISSION(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), G_TYPE_SIMPLE_PERMISSION))
#DEFINE G_SIMPLE_PERMISSION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), G_TYPE_SIMPLE_PERMISSION, G))
DECLARE FUNCTION g_simple_permission_new(BYVAL AS gboolean) AS GPermission PTR
TYPE _GSimpleProxyResolver
  AS GObject parent_instance
  AS GSimpleProxyResolverPrivate PTR priv
END TYPE
DECLARE FUNCTION g_simple_proxy_resolver_get_type() AS GType
#DEFINE G_TYPE_SIMPLE_PROXY_RESOLVER (g_simple_proxy_resolver_get_type())
#DEFINE G_SIMPLE_PROXY_RESOLVER(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), G_TYPE_SIMPLE_PROXY_RESOLVER, GSimpleProxyResolver))
#DEFINE G_SIMPLE_PROXY_RESOLVER_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), G_TYPE_SIMPLE_PROXY_RESOLVER, GSimpleProxyResolverClass))
#DEFINE G_IS_SIMPLE_PROXY_RESOLVER(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), G_TYPE_SIMPLE_PROXY_RESOLVER))
#DEFINE G_IS_CLASS_SIMPLE_PROXY_RESOLVER(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), G_TYPE_SIMPLE_PROXY_RESOLVER))
#DEFINE G_SIMPLE_PROXY_RESOLVER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), G_TYPE_SIMPLE_PROXY_RESOLVER, GSimpleProxyResolverClass))
DECLARE FUNCTION g_simple_proxy_resolver_new(BYVAL AS const gchar PTR, BYVAL AS gchar PTR PTR) AS GProxyResolver PTR
DECLARE SUB g_simple_proxy_resolver_set_default_proxy(BYVAL AS GSimpleProxyResolver PTR, BYVAL AS const gchar PTR)
DECLARE SUB g_simple_proxy_resolver_set_ignore_hosts(BYVAL AS GSimpleProxyResolver PTR, BYVAL AS gchar PTR PTR)
DECLARE SUB g_simple_proxy_resolver_set_uri_proxy(BYVAL AS GSimpleProxyResolver PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR)
TYPE _GSimpleProxyResolverClass
  AS GObjectClass parent_class
  _g_reserved1 AS SUB CDECL()
  _g_reserved2 AS SUB CDECL()
  _g_reserved3 AS SUB CDECL()
  _g_reserved4 AS SUB CDECL()
  _g_reserved5 AS SUB CDECL()
END TYPE
TYPE _GSocket
  AS GObject parent_instance
  AS GSocketPrivate PTR priv
END TYPE
DECLARE FUNCTION g_socket_get_type() AS GType
#DEFINE G_TYPE_SOCKET (g_socket_get_type())
#DEFINE G_SOCKET(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), G_TYPE_SOCKET, GSocket))
#DEFINE G_SOCKET_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), G_TYPE_SOCKET, GSocketClass))
#DEFINE G_IS_SOCKET(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), G_TYPE_SOCKET))
#DEFINE G_IS_CLASS_SOCKET(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), G_TYPE_SOCKET))
#DEFINE G_SOCKET_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), G_TYPE_SOCKET, GSocketClass))
DECLARE FUNCTION g_socket_new(BYVAL AS GSocketFamily, BYVAL AS GSocketType, BYVAL AS GSocketProtocol, BYVAL AS GError PTR PTR) AS GSocket PTR
DECLARE FUNCTION g_socket_new_from_fd(BYVAL AS gint, BYVAL AS GError PTR PTR) AS GSocket PTR
DECLARE FUNCTION g_socket_accept(BYVAL AS GSocket PTR, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS GSocket PTR
DECLARE FUNCTION g_socket_bind(BYVAL AS GSocket PTR, BYVAL AS GSocketAddress PTR, BYVAL AS gboolean, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION g_socket_check_connect_result(BYVAL AS GSocket PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION g_socket_close(BYVAL AS GSocket PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION g_socket_condition_check(BYVAL AS GSocket PTR, BYVAL AS GIOCondition) AS GIOCondition
DECLARE FUNCTION g_socket_condition_timed_wait(BYVAL AS GSocket PTR, BYVAL AS GIOCondition, BYVAL AS gint64, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION g_socket_condition_wait(BYVAL AS GSocket PTR, BYVAL AS GIOCondition, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION g_socket_connect(BYVAL AS GSocket PTR, BYVAL AS GSocketAddress PTR, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION g_socket_connection_factory_create_connection(BYVAL AS GSocket PTR) AS GSocketConnection PTR
DECLARE FUNCTION g_socket_create_source(BYVAL AS GSocket PTR, BYVAL AS GIOCondition, BYVAL AS GCancellable PTR) AS GSource PTR
DECLARE FUNCTION g_socket_get_available_bytes(BYVAL AS GSocket PTR) AS gssize
DECLARE FUNCTION g_socket_get_blocking(BYVAL AS GSocket PTR) AS gboolean
DECLARE FUNCTION g_socket_get_broadcast(BYVAL AS GSocket PTR) AS gboolean
DECLARE FUNCTION g_socket_get_credentials(BYVAL AS GSocket PTR, BYVAL AS GError PTR PTR) AS GCredentials PTR
DECLARE FUNCTION g_socket_get_family(BYVAL AS GSocket PTR) AS GSocketFamily
DECLARE FUNCTION g_socket_get_fd(BYVAL AS GSocket PTR) AS gint /'int'/
DECLARE FUNCTION g_socket_get_keepalive(BYVAL AS GSocket PTR) AS gboolean
DECLARE FUNCTION g_socket_get_listen_backlog(BYVAL AS GSocket PTR) AS gint
DECLARE FUNCTION g_socket_get_local_address(BYVAL AS GSocket PTR, BYVAL AS GError PTR PTR) AS GSocketAddress PTR
DECLARE FUNCTION g_socket_get_multicast_loopback(BYVAL AS GSocket PTR) AS gboolean
DECLARE FUNCTION g_socket_get_multicast_ttl(BYVAL AS GSocket PTR) AS guint
DECLARE FUNCTION g_socket_get_option(BYVAL AS GSocket PTR, BYVAL AS gint, BYVAL AS gint, BYVAL AS gint PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION g_socket_get_protocol(BYVAL AS GSocket PTR) AS GSocketProtocol
DECLARE FUNCTION g_socket_get_remote_address(BYVAL AS GSocket PTR, BYVAL AS GError PTR PTR) AS GSocketAddress PTR
DECLARE FUNCTION g_socket_get_socket_type(BYVAL AS GSocket PTR) AS GSocketType
DECLARE FUNCTION g_socket_get_timeout(BYVAL AS GSocket PTR) AS guint
DECLARE FUNCTION g_socket_get_ttl(BYVAL AS GSocket PTR) AS guint
DECLARE FUNCTION g_socket_is_closed(BYVAL AS GSocket PTR) AS gboolean
DECLARE FUNCTION g_socket_is_connected(BYVAL AS GSocket PTR) AS gboolean
DECLARE FUNCTION g_socket_join_multicast_group(BYVAL AS GSocket PTR, BYVAL AS GInetAddress PTR, BYVAL AS gboolean, BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION g_socket_join_multicast_group_ssm(BYVAL AS GSocket PTR, BYVAL AS GInetAddress PTR, BYVAL AS GInetAddress PTR, BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION g_socket_leave_multicast_group(BYVAL AS GSocket PTR, BYVAL AS GInetAddress PTR, BYVAL AS gboolean, BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION g_socket_leave_multicast_group_ssm(BYVAL AS GSocket PTR, BYVAL AS GInetAddress PTR, BYVAL AS GInetAddress PTR, BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION g_socket_listen(BYVAL AS GSocket PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION g_socket_receive(BYVAL AS GSocket PTR, BYVAL AS gchar PTR, BYVAL AS gsize, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS gssize
DECLARE FUNCTION g_socket_receive_from(BYVAL AS GSocket PTR, BYVAL AS GSocketAddress PTR PTR, BYVAL AS gchar PTR, BYVAL AS gsize, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS gssize
DECLARE FUNCTION g_socket_receive_message(BYVAL AS GSocket PTR, BYVAL AS GSocketAddress PTR PTR, BYVAL AS GInputVector PTR, BYVAL AS gint, BYVAL AS GSocketControlMessage PTR PTR PTR, BYVAL AS gint PTR, BYVAL AS gint PTR, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS gssize
DECLARE FUNCTION g_socket_receive_messages(BYVAL AS GSocket PTR, BYVAL AS GInputMessage PTR, BYVAL AS guint, BYVAL AS gint, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS gint
DECLARE FUNCTION g_socket_receive_with_blocking(BYVAL AS GSocket PTR, BYVAL AS gchar PTR, BYVAL AS gsize, BYVAL AS gboolean, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS gssize
DECLARE FUNCTION g_socket_send(BYVAL AS GSocket PTR, BYVAL AS const gchar PTR, BYVAL AS gsize, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS gssize
DECLARE FUNCTION g_socket_send_message(BYVAL AS GSocket PTR, BYVAL AS GSocketAddress PTR, BYVAL AS GOutputVector PTR, BYVAL AS gint, BYVAL AS GSocketControlMessage PTR PTR, BYVAL AS gint, BYVAL AS gint, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS gssize
DECLARE FUNCTION g_socket_send_message_with_timeout(BYVAL AS GSocket PTR, BYVAL AS GSocketAddress PTR, BYVAL AS const GOutputVector PTR, BYVAL AS gint, BYVAL AS GSocketControlMessage PTR PTR, BYVAL AS gint, BYVAL AS gint, BYVAL AS gint64, BYVAL AS gsize PTR, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS GPollableReturn
DECLARE FUNCTION g_socket_send_messages(BYVAL AS GSocket PTR, BYVAL AS GOutputMessage PTR, BYVAL AS guint, BYVAL AS gint, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS gint
DECLARE FUNCTION g_socket_send_to(BYVAL AS GSocket PTR, BYVAL AS GSocketAddress PTR, BYVAL AS const gchar PTR, BYVAL AS gsize, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS gssize
DECLARE FUNCTION g_socket_send_with_blocking(BYVAL AS GSocket PTR, BYVAL AS const gchar PTR, BYVAL AS gsize, BYVAL AS gboolean, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS gssize
DECLARE SUB g_socket_set_blocking(BYVAL AS GSocket PTR, BYVAL AS gboolean)
DECLARE SUB g_socket_set_broadcast(BYVAL AS GSocket PTR, BYVAL AS gboolean)
DECLARE SUB g_socket_set_keepalive(BYVAL AS GSocket PTR, BYVAL AS gboolean)
DECLARE SUB g_socket_set_listen_backlog(BYVAL AS GSocket PTR, BYVAL AS gint)
DECLARE SUB g_socket_set_multicast_loopback(BYVAL AS GSocket PTR, BYVAL AS gboolean)
DECLARE SUB g_socket_set_multicast_ttl(BYVAL AS GSocket PTR, BYVAL AS guint)
DECLARE FUNCTION g_socket_set_option(BYVAL AS GSocket PTR, BYVAL AS gint, BYVAL AS gint, BYVAL AS gint, BYVAL AS GError PTR PTR) AS gboolean
DECLARE SUB g_socket_set_timeout(BYVAL AS GSocket PTR, BYVAL AS guint)
DECLARE SUB g_socket_set_ttl(BYVAL AS GSocket PTR, BYVAL AS guint)
DECLARE FUNCTION g_socket_shutdown(BYVAL AS GSocket PTR, BYVAL AS gboolean, BYVAL AS gboolean, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION g_socket_speaks_ipv4(BYVAL AS GSocket PTR) AS gboolean
TYPE _GSocketClass
  AS GObjectClass parent_class
  _g_reserved1 AS SUB CDECL()
  _g_reserved2 AS SUB CDECL()
  _g_reserved3 AS SUB CDECL()
  _g_reserved4 AS SUB CDECL()
  _g_reserved5 AS SUB CDECL()
  _g_reserved6 AS SUB CDECL()
  _g_reserved7 AS SUB CDECL()
  _g_reserved8 AS SUB CDECL()
  _g_reserved9 AS SUB CDECL()
  _g_reserved10 AS SUB CDECL()
END TYPE
TYPE _GSocketClient
  AS GObject parent_instance
  AS GSocketClientPrivate PTR priv
END TYPE
DECLARE FUNCTION g_socket_client_get_type() AS GType
#DEFINE G_TYPE_SOCKET_CLIENT (g_socket_client_get_type())
#DEFINE G_SOCKET_CLIENT(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), G_TYPE_SOCKET_CLIENT, GSocketClient))
#DEFINE G_SOCKET_CLIENT_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), G_TYPE_SOCKET_CLIENT, GSocketClientClass))
#DEFINE G_IS_SOCKET_CLIENT(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), G_TYPE_SOCKET_CLIENT))
#DEFINE G_IS_CLASS_SOCKET_CLIENT(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), G_TYPE_SOCKET_CLIENT))
#DEFINE G_SOCKET_CLIENT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), G_TYPE_SOCKET_CLIENT, GSocketClientClass))
DECLARE FUNCTION g_socket_client_new() AS GSocketClient PTR
DECLARE SUB g_socket_client_add_application_proxy(BYVAL AS GSocketClient PTR, BYVAL AS const gchar PTR)
DECLARE FUNCTION g_socket_client_connect(BYVAL AS GSocketClient PTR, BYVAL AS GSocketConnectable PTR, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS GSocketConnection PTR
DECLARE SUB g_socket_client_connect_async(BYVAL AS GSocketClient PTR, BYVAL AS GSocketConnectable PTR, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
DECLARE FUNCTION g_socket_client_connect_finish(BYVAL AS GSocketClient PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS GSocketConnection PTR
DECLARE FUNCTION g_socket_client_connect_to_host(BYVAL AS GSocketClient PTR, BYVAL AS const gchar PTR, BYVAL AS guint16, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS GSocketConnection PTR
DECLARE SUB g_socket_client_connect_to_host_async(BYVAL AS GSocketClient PTR, BYVAL AS const gchar PTR, BYVAL AS guint16, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
DECLARE FUNCTION g_socket_client_connect_to_host_finish(BYVAL AS GSocketClient PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS GSocketConnection PTR
DECLARE FUNCTION g_socket_client_connect_to_service(BYVAL AS GSocketClient PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS GSocketConnection PTR
DECLARE SUB g_socket_client_connect_to_service_async(BYVAL AS GSocketClient PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
DECLARE FUNCTION g_socket_client_connect_to_service_finish(BYVAL AS GSocketClient PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS GSocketConnection PTR
DECLARE FUNCTION g_socket_client_connect_to_uri(BYVAL AS GSocketClient PTR, BYVAL AS const gchar PTR, BYVAL AS guint16, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS GSocketConnection PTR
DECLARE SUB g_socket_client_connect_to_uri_async(BYVAL AS GSocketClient PTR, BYVAL AS const gchar PTR, BYVAL AS guint16, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
DECLARE FUNCTION g_socket_client_connect_to_uri_finish(BYVAL AS GSocketClient PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS GSocketConnection PTR
DECLARE FUNCTION g_socket_client_get_enable_proxy(BYVAL AS GSocketClient PTR) AS gboolean
DECLARE FUNCTION g_socket_client_get_family(BYVAL AS GSocketClient PTR) AS GSocketFamily
DECLARE FUNCTION g_socket_client_get_local_address(BYVAL AS GSocketClient PTR) AS GSocketAddress PTR
DECLARE FUNCTION g_socket_client_get_protocol(BYVAL AS GSocketClient PTR) AS GSocketProtocol
DECLARE FUNCTION g_socket_client_get_proxy_resolver(BYVAL AS GSocketClient PTR) AS GProxyResolver PTR
DECLARE FUNCTION g_socket_client_get_socket_type(BYVAL AS GSocketClient PTR) AS GSocketType
DECLARE FUNCTION g_socket_client_get_timeout(BYVAL AS GSocketClient PTR) AS guint
DECLARE FUNCTION g_socket_client_get_tls(BYVAL AS GSocketClient PTR) AS gboolean
DECLARE FUNCTION g_socket_client_get_tls_validation_flags(BYVAL AS GSocketClient PTR) AS GTlsCertificateFlags
DECLARE SUB g_socket_client_set_enable_proxy(BYVAL AS GSocketClient PTR, BYVAL AS gboolean)
DECLARE SUB g_socket_client_set_family(BYVAL AS GSocketClient PTR, BYVAL AS GSocketFamily)
DECLARE SUB g_socket_client_set_local_address(BYVAL AS GSocketClient PTR, BYVAL AS GSocketAddress PTR)
DECLARE SUB g_socket_client_set_protocol(BYVAL AS GSocketClient PTR, BYVAL AS GSocketProtocol)
DECLARE SUB g_socket_client_set_proxy_resolver(BYVAL AS GSocketClient PTR, BYVAL AS GProxyResolver PTR)
DECLARE SUB g_socket_client_set_socket_type(BYVAL AS GSocketClient PTR, BYVAL AS GSocketType)
DECLARE SUB g_socket_client_set_timeout(BYVAL AS GSocketClient PTR, BYVAL AS guint)
DECLARE SUB g_socket_client_set_tls(BYVAL AS GSocketClient PTR, BYVAL AS gboolean)
DECLARE SUB g_socket_client_set_tls_validation_flags(BYVAL AS GSocketClient PTR, BYVAL AS GTlsCertificateFlags)
TYPE _GSocketClientClass
  AS GObjectClass parent_class
  event AS SUB CDECL(BYVAL AS GSocketClient PTR, BYVAL AS GSocketClientEvent, BYVAL AS GSocketConnectable PTR, BYVAL AS GIOStream PTR)
  _g_reserved1 AS SUB CDECL()
  _g_reserved2 AS SUB CDECL()
  _g_reserved3 AS SUB CDECL()
  _g_reserved4 AS SUB CDECL()
END TYPE
DECLARE FUNCTION g_socket_client_event_get_type() AS GType
#DEFINE G_TYPE_SOCKET_CLIENT_EVENT (g_socket_client_event_get_type())
DECLARE FUNCTION g_socket_connectable_get_type() AS GType
#DEFINE G_TYPE_SOCKET_CONNECTABLE (g_socket_connectable_get_type())
#DEFINE G_SOCKET_CONNECTABLE(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), G_TYPE_SOCKET_CONNECTABLE, GSocketConnectable))
#DEFINE G_SOCKET_CONNECTABLE_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), G_TYPE_SOCKET_CONNECTABLE, GSocketConnectableIface))
#DEFINE G_IS_SOCKET_CONNECTABLE(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), G_TYPE_SOCKET_CONNECTABLE))
#DEFINE G_SOCKET_CONNECTABLE_GET_IFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE((obj), G_TYPE_SOCKET_CONNECTABLE, GSocketConnectableIface))
DECLARE FUNCTION g_socket_connectable_enumerate(BYVAL AS GSocketConnectable PTR) AS GSocketAddressEnumerator PTR
DECLARE FUNCTION g_socket_connectable_proxy_enumerate(BYVAL AS GSocketConnectable PTR) AS GSocketAddressEnumerator PTR
DECLARE FUNCTION g_socket_connectable_to_string(BYVAL AS GSocketConnectable PTR) AS gchar PTR
TYPE _GSocketConnectableIface
  AS GTypeInterface g_iface
  enumerate AS FUNCTION CDECL(BYVAL AS GSocketConnectable PTR) AS GSocketAddressEnumerator PTR
  proxy_enumerate AS FUNCTION CDECL(BYVAL AS GSocketConnectable PTR) AS GSocketAddressEnumerator PTR
  to_string AS FUNCTION CDECL(BYVAL AS GSocketConnectable PTR) AS gchar PTR
END TYPE
TYPE _GSocketConnection
  AS GIOStream parent_instance
  AS GSocketConnectionPrivate PTR priv
END TYPE
DECLARE FUNCTION g_socket_connection_get_type() AS GType
#DEFINE G_TYPE_SOCKET_CONNECTION (g_socket_connection_get_type())
#DEFINE G_SOCKET_CONNECTION(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), G_TYPE_SOCKET_CONNECTION, GSocketConnection))
#DEFINE G_SOCKET_CONNECTION_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), G_TYPE_SOCKET_CONNECTION, GSocketConnectionClass))
#DEFINE G_IS_SOCKET_CONNECTION(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), G_TYPE_SOCKET_CONNECTION))
#DEFINE G_IS_CLASS_SOCKET_CONNECTION(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), G_TYPE_SOCKET_CONNECTION))
#DEFINE G_SOCKET_CONNECTION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), G_TYPE_SOCKET_CONNECTION, GSocketConnectionClass))
DECLARE FUNCTION g_socket_connection_factory_lookup_type(BYVAL AS GSocketFamily, BYVAL AS GSocketType, BYVAL AS gint) AS GType
DECLARE SUB g_socket_connection_factory_register_type(BYVAL AS GType, BYVAL AS GSocketFamily, BYVAL AS GSocketType, BYVAL AS gint)
DECLARE FUNCTION g_socket_connection_connect(BYVAL AS GSocketConnection PTR, BYVAL AS GSocketAddress PTR, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE SUB g_socket_connection_connect_async(BYVAL AS GSocketConnection PTR, BYVAL AS GSocketAddress PTR, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
DECLARE FUNCTION g_socket_connection_connect_finish(BYVAL AS GSocketConnection PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION g_socket_connection_get_local_address(BYVAL AS GSocketConnection PTR, BYVAL AS GError PTR PTR) AS GSocketAddress PTR
DECLARE FUNCTION g_socket_connection_get_remote_address(BYVAL AS GSocketConnection PTR, BYVAL AS GError PTR PTR) AS GSocketAddress PTR
DECLARE FUNCTION g_socket_connection_get_socket(BYVAL AS GSocketConnection PTR) AS GSocket PTR
DECLARE FUNCTION g_socket_connection_is_connected(BYVAL AS GSocketConnection PTR) AS gboolean
TYPE _GSocketConnectionClass
  AS GIOStreamClass parent_class
  _g_reserved1 AS SUB CDECL()
  _g_reserved2 AS SUB CDECL()
  _g_reserved3 AS SUB CDECL()
  _g_reserved4 AS SUB CDECL()
  _g_reserved5 AS SUB CDECL()
  _g_reserved6 AS SUB CDECL()
END TYPE
TYPE _GSocketControlMessage
  AS GObject parent_instance
  AS GSocketControlMessagePrivate PTR priv
END TYPE
DECLARE FUNCTION g_socket_control_message_get_type() AS GType
#DEFINE G_TYPE_SOCKET_CONTROL_MESSAGE (g_socket_control_message_get_type())
#DEFINE G_SOCKET_CONTROL_MESSAGE(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), G_TYPE_SOCKET_CONTROL_MESSAGE, GSocketControlMessage))
#DEFINE G_SOCKET_CONTROL_MESSAGE_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), G_TYPE_SOCKET_CONTROL_MESSAGE, GSocketControlMessageClass))
#DEFINE G_IS_SOCKET_CONTROL_MESSAGE(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), G_TYPE_SOCKET_CONTROL_MESSAGE))
#DEFINE G_IS_CLASS_SOCKET_CONTROL_MESSAGE(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), G_TYPE_SOCKET_CONTROL_MESSAGE))
#DEFINE G_SOCKET_CONTROL_MESSAGE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), G_TYPE_SOCKET_CONTROL_MESSAGE, GSocketControlMessageClass))
DECLARE FUNCTION g_socket_control_message_deserialize(BYVAL AS gint /'int'/, BYVAL AS gint /'int'/, BYVAL AS gsize, BYVAL AS gpointer) AS GSocketControlMessage PTR
DECLARE FUNCTION g_socket_control_message_get_level(BYVAL AS GSocketControlMessage PTR) AS gint /'int'/
DECLARE FUNCTION g_socket_control_message_get_msg_type(BYVAL AS GSocketControlMessage PTR) AS gint /'int'/
DECLARE FUNCTION g_socket_control_message_get_size(BYVAL AS GSocketControlMessage PTR) AS gsize
DECLARE SUB g_socket_control_message_serialize(BYVAL AS GSocketControlMessage PTR, BYVAL AS gpointer)
TYPE _GSocketControlMessageClass
  AS GObjectClass parent_class
  get_size AS FUNCTION CDECL(BYVAL AS GSocketControlMessage PTR) AS gsize
  get_level AS FUNCTION CDECL(BYVAL AS GSocketControlMessage PTR) AS gint /'int'/
  get_type AS FUNCTION CDECL(BYVAL AS GSocketControlMessage PTR) AS gint /'int'/
  serialize AS SUB CDECL(BYVAL AS GSocketControlMessage PTR, BYVAL AS gpointer)
  deserialize AS FUNCTION CDECL(BYVAL AS gint /'int'/, BYVAL AS gint /'int'/, BYVAL AS gsize, BYVAL AS gpointer) AS GSocketControlMessage PTR
  _g_reserved1 AS SUB CDECL()
  _g_reserved2 AS SUB CDECL()
  _g_reserved3 AS SUB CDECL()
  _g_reserved4 AS SUB CDECL()
  _g_reserved5 AS SUB CDECL()
END TYPE
TYPE _GSocketListener
  AS GObject parent_instance
  AS GSocketListenerPrivate PTR priv
END TYPE
DECLARE FUNCTION g_socket_family_get_type() AS GType
#DEFINE G_TYPE_SOCKET_FAMILY (g_socket_family_get_type())
DECLARE FUNCTION g_socket_listener_get_type() AS GType
#DEFINE G_TYPE_SOCKET_LISTENER (g_socket_listener_get_type())
#DEFINE G_SOCKET_LISTENER(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), G_TYPE_SOCKET_LISTENER, GSocketListener))
#DEFINE G_SOCKET_LISTENER_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), G_TYPE_SOCKET_LISTENER, GSocketListenerClass))
#DEFINE G_IS_SOCKET_LISTENER(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), G_TYPE_SOCKET_LISTENER))
#DEFINE G_IS_CLASS_SOCKET_LISTENER(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), G_TYPE_SOCKET_LISTENER))
#DEFINE G_SOCKET_LISTENER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), G_TYPE_SOCKET_LISTENER, GSocketListenerClass))
DECLARE FUNCTION g_socket_listener_new() AS GSocketListener PTR
DECLARE FUNCTION g_socket_listener_accept(BYVAL AS GSocketListener PTR, BYVAL AS GObject PTR PTR, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS GSocketConnection PTR
DECLARE SUB g_socket_listener_accept_async(BYVAL AS GSocketListener PTR, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
DECLARE FUNCTION g_socket_listener_accept_finish(BYVAL AS GSocketListener PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GObject PTR PTR, BYVAL AS GError PTR PTR) AS GSocketConnection PTR
DECLARE FUNCTION g_socket_listener_accept_socket(BYVAL AS GSocketListener PTR, BYVAL AS GObject PTR PTR, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS GSocket PTR
DECLARE SUB g_socket_listener_accept_socket_async(BYVAL AS GSocketListener PTR, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
DECLARE FUNCTION g_socket_listener_accept_socket_finish(BYVAL AS GSocketListener PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GObject PTR PTR, BYVAL AS GError PTR PTR) AS GSocket PTR
DECLARE FUNCTION g_socket_listener_add_address(BYVAL AS GSocketListener PTR, BYVAL AS GSocketAddress PTR, BYVAL AS GSocketType, BYVAL AS GSocketProtocol, BYVAL AS GObject PTR, BYVAL AS GSocketAddress PTR PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION g_socket_listener_add_any_inet_port(BYVAL AS GSocketListener PTR, BYVAL AS GObject PTR, BYVAL AS GError PTR PTR) AS guint16
DECLARE FUNCTION g_socket_listener_add_inet_port(BYVAL AS GSocketListener PTR, BYVAL AS guint16, BYVAL AS GObject PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION g_socket_listener_add_socket(BYVAL AS GSocketListener PTR, BYVAL AS GSocket PTR, BYVAL AS GObject PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE SUB g_socket_listener_close(BYVAL AS GSocketListener PTR)
DECLARE SUB g_socket_listener_set_backlog(BYVAL AS GSocketListener PTR, BYVAL AS gint /'int'/)
TYPE _GSocketListenerClass
  AS GObjectClass parent_class
  changed AS SUB CDECL(BYVAL AS GSocketListener PTR)
  event AS SUB CDECL(BYVAL AS GSocketListener PTR, BYVAL AS GSocketListenerEvent, BYVAL AS GSocket PTR)
  _g_reserved2 AS SUB CDECL()
  _g_reserved3 AS SUB CDECL()
  _g_reserved4 AS SUB CDECL()
  _g_reserved5 AS SUB CDECL()
  _g_reserved6 AS SUB CDECL()
END TYPE
DECLARE FUNCTION g_socket_listener_event_get_type() AS GType
#DEFINE G_TYPE_SOCKET_LISTENER_EVENT (g_socket_listener_event_get_type())
TYPE _GSocketService
  AS GSocketListener parent_instance
  AS GSocketServicePrivate PTR priv
END TYPE
DECLARE FUNCTION g_socket_protocol_get_type() AS GType
#DEFINE G_TYPE_SOCKET_PROTOCOL (g_socket_protocol_get_type())
DECLARE FUNCTION g_socket_service_get_type() AS GType
#DEFINE G_TYPE_SOCKET_SERVICE (g_socket_service_get_type())
#DEFINE G_SOCKET_SERVICE(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), G_TYPE_SOCKET_SERVICE, GSocketService))
#DEFINE G_SOCKET_SERVICE_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), G_TYPE_SOCKET_SERVICE, GSocketServiceClass))
#DEFINE G_IS_SOCKET_SERVICE(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), G_TYPE_SOCKET_SERVICE))
#DEFINE G_IS_CLASS_SOCKET_SERVICE(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), G_TYPE_SOCKET_SERVICE))
#DEFINE G_SOCKET_SERVICE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), G_TYPE_SOCKET_SERVICE, GSocketServiceClass))
DECLARE FUNCTION g_socket_service_new() AS GSocketService PTR
DECLARE FUNCTION g_socket_service_is_active(BYVAL AS GSocketService PTR) AS gboolean
DECLARE SUB g_socket_service_start(BYVAL AS GSocketService PTR)
DECLARE SUB g_socket_service_stop(BYVAL AS GSocketService PTR)
TYPE _GSocketServiceClass
  AS GSocketListenerClass parent_class
  incoming AS FUNCTION CDECL(BYVAL AS GSocketService PTR, BYVAL AS GSocketConnection PTR, BYVAL AS GObject PTR) AS gboolean
  _g_reserved1 AS SUB CDECL()
  _g_reserved2 AS SUB CDECL()
  _g_reserved3 AS SUB CDECL()
  _g_reserved4 AS SUB CDECL()
  _g_reserved5 AS SUB CDECL()
  _g_reserved6 AS SUB CDECL()
END TYPE
TYPE GSocketSourceFunc AS FUNCTION CDECL(BYVAL AS GSocket PTR, BYVAL AS GIOCondition, BYVAL AS gpointer) AS gboolean
DECLARE FUNCTION g_socket_type_get_type() AS GType
#DEFINE G_TYPE_SOCKET_TYPE (g_socket_type_get_type())
DECLARE FUNCTION g_srv_target_new(BYVAL AS const gchar PTR, BYVAL AS guint16, BYVAL AS guint16, BYVAL AS guint16) AS GSrvTarget PTR
DECLARE FUNCTION g_srv_target_copy(BYVAL AS GSrvTarget PTR) AS GSrvTarget PTR
DECLARE SUB g_srv_target_free(BYVAL AS GSrvTarget PTR)
DECLARE FUNCTION g_srv_target_get_hostname(BYVAL AS GSrvTarget PTR) AS const gchar PTR
DECLARE FUNCTION g_srv_target_get_port(BYVAL AS GSrvTarget PTR) AS guint16
DECLARE FUNCTION g_srv_target_get_priority(BYVAL AS GSrvTarget PTR) AS guint16
DECLARE FUNCTION g_srv_target_get_weight(BYVAL AS GSrvTarget PTR) AS guint16
DECLARE FUNCTION g_srv_target_list_sort(BYVAL AS GList PTR) AS GList PTR
TYPE _GStaticResource
  AS const guint8 PTR data
  AS gsize data_len
  AS GResource PTR resource
  AS GStaticResource PTR next
  AS gpointer padding
END TYPE
DECLARE SUB g_static_resource_fini(BYVAL AS GStaticResource PTR)
DECLARE FUNCTION g_static_resource_get_resource(BYVAL AS GStaticResource PTR) AS GResource PTR
DECLARE SUB g_static_resource_init(BYVAL AS GStaticResource PTR)
DECLARE FUNCTION g_subprocess_get_type() AS GType
#DEFINE G_TYPE_SUBPROCESS (g_subprocess_get_type())
#DEFINE G_SUBPROCESS(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), G_TYPE_SUBPROCESS, GSubprocess))
#DEFINE G_SUBPROCESS_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), G_TYPE_SUBPROCESS, G))
#DEFINE G_IS_SUBPROCESS(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), G_TYPE_SUBPROCESS))
#DEFINE G_IS_CLASS_SUBPROCESS(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), G_TYPE_SUBPROCESS))
#DEFINE G_SUBPROCESS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), G_TYPE_SUBPROCESS, G))
DECLARE FUNCTION g_subprocess_new(BYVAL AS GSubprocessFlags, BYVAL AS GError PTR PTR, BYVAL AS const gchar PTR, ...) AS GSubprocess PTR
DECLARE FUNCTION g_subprocess_newv(BYVAL AS const gchar ptr const /'const gchar* const'/ PTR, BYVAL AS GSubprocessFlags, BYVAL AS GError PTR PTR) AS GSubprocess PTR
DECLARE FUNCTION g_subprocess_communicate(BYVAL AS GSubprocess PTR, BYVAL AS GBytes PTR, BYVAL AS GCancellable PTR, BYVAL AS GBytes PTR PTR, BYVAL AS GBytes PTR PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE SUB g_subprocess_communicate_async(BYVAL AS GSubprocess PTR, BYVAL AS GBytes PTR, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
DECLARE FUNCTION g_subprocess_communicate_finish(BYVAL AS GSubprocess PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GBytes PTR PTR, BYVAL AS GBytes PTR PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION g_subprocess_communicate_utf8(BYVAL AS GSubprocess PTR, BYVAL AS const gchar PTR, BYVAL AS GCancellable PTR, BYVAL AS zstring /'gchar'/ PTR PTR, BYVAL AS zstring /'gchar'/ PTR PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE SUB g_subprocess_communicate_utf8_async(BYVAL AS GSubprocess PTR, BYVAL AS const gchar PTR, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
DECLARE FUNCTION g_subprocess_communicate_utf8_finish(BYVAL AS GSubprocess PTR, BYVAL AS GAsyncResult PTR, BYVAL AS zstring /'gchar'/ PTR PTR, BYVAL AS zstring /'gchar'/ PTR PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE SUB g_subprocess_force_exit(BYVAL AS GSubprocess PTR)
DECLARE FUNCTION g_subprocess_get_exit_status(BYVAL AS GSubprocess PTR) AS gint
DECLARE FUNCTION g_subprocess_get_identifier(BYVAL AS GSubprocess PTR) AS const gchar PTR
DECLARE FUNCTION g_subprocess_get_if_exited(BYVAL AS GSubprocess PTR) AS gboolean
DECLARE FUNCTION g_subprocess_get_if_signaled(BYVAL AS GSubprocess PTR) AS gboolean
DECLARE FUNCTION g_subprocess_get_status(BYVAL AS GSubprocess PTR) AS gint
DECLARE FUNCTION g_subprocess_get_stderr_pipe(BYVAL AS GSubprocess PTR) AS GInputStream PTR
DECLARE FUNCTION g_subprocess_get_stdin_pipe(BYVAL AS GSubprocess PTR) AS GOutputStream PTR
DECLARE FUNCTION g_subprocess_get_stdout_pipe(BYVAL AS GSubprocess PTR) AS GInputStream PTR
DECLARE FUNCTION g_subprocess_get_successful(BYVAL AS GSubprocess PTR) AS gboolean
DECLARE FUNCTION g_subprocess_get_term_sig(BYVAL AS GSubprocess PTR) AS gint
DECLARE SUB g_subprocess_send_signal(BYVAL AS GSubprocess PTR, BYVAL AS gint)
DECLARE FUNCTION g_subprocess_wait(BYVAL AS GSubprocess PTR, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE SUB g_subprocess_wait_async(BYVAL AS GSubprocess PTR, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
DECLARE FUNCTION g_subprocess_wait_check(BYVAL AS GSubprocess PTR, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE SUB g_subprocess_wait_check_async(BYVAL AS GSubprocess PTR, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
DECLARE FUNCTION g_subprocess_wait_check_finish(BYVAL AS GSubprocess PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION g_subprocess_wait_finish(BYVAL AS GSubprocess PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION g_subprocess_launcher_get_type() AS GType
#DEFINE G_TYPE_SUBPROCESS_LAUNCHER (g_subprocess_launcher_get_type())
#DEFINE G_SUBPROCESS_LAUNCHER(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), G_TYPE_SUBPROCESS_LAUNCHER, GSubprocessLauncher))
#DEFINE G_SUBPROCESS_LAUNCHER_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), G_TYPE_SUBPROCESS_LAUNCHER, G))
#DEFINE G_IS_SUBPROCESS_LAUNCHER(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), G_TYPE_SUBPROCESS_LAUNCHER))
#DEFINE G_IS_CLASS_SUBPROCESS_LAUNCHER(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), G_TYPE_SUBPROCESS_LAUNCHER))
#DEFINE G_SUBPROCESS_LAUNCHER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), G_TYPE_SUBPROCESS_LAUNCHER, G))
DECLARE FUNCTION g_subprocess_launcher_new(BYVAL AS GSubprocessFlags) AS GSubprocessLauncher PTR
DECLARE FUNCTION g_subprocess_launcher_getenv(BYVAL AS GSubprocessLauncher PTR, BYVAL AS const gchar PTR) AS const gchar PTR
DECLARE SUB g_subprocess_launcher_set_child_setup(BYVAL AS GSubprocessLauncher PTR, BYVAL AS GSpawnChildSetupFunc, BYVAL AS gpointer, BYVAL AS GDestroyNotify)
DECLARE SUB g_subprocess_launcher_set_cwd(BYVAL AS GSubprocessLauncher PTR, BYVAL AS const gchar PTR)
DECLARE SUB g_subprocess_launcher_set_environ(BYVAL AS GSubprocessLauncher PTR, BYVAL AS gchar PTR PTR)
DECLARE SUB g_subprocess_launcher_set_flags(BYVAL AS GSubprocessLauncher PTR, BYVAL AS GSubprocessFlags)
DECLARE SUB g_subprocess_launcher_set_stderr_file_path(BYVAL AS GSubprocessLauncher PTR, BYVAL AS const gchar PTR)
DECLARE SUB g_subprocess_launcher_set_stdin_file_path(BYVAL AS GSubprocessLauncher PTR, BYVAL AS const gchar PTR)
DECLARE SUB g_subprocess_launcher_set_stdout_file_path(BYVAL AS GSubprocessLauncher PTR, BYVAL AS const gchar PTR)
DECLARE SUB g_subprocess_launcher_setenv(BYVAL AS GSubprocessLauncher PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS gboolean)
DECLARE FUNCTION g_subprocess_launcher_spawn(BYVAL AS GSubprocessLauncher PTR, BYVAL AS GError PTR PTR, BYVAL AS const gchar PTR, ...) AS GSubprocess PTR
DECLARE FUNCTION g_subprocess_launcher_spawnv(BYVAL AS GSubprocessLauncher PTR, BYVAL AS const gchar ptr const /'const gchar* const'/ PTR, BYVAL AS GError PTR PTR) AS GSubprocess PTR
DECLARE SUB g_subprocess_launcher_take_fd(BYVAL AS GSubprocessLauncher PTR, BYVAL AS gint, BYVAL AS gint)
DECLARE SUB g_subprocess_launcher_take_stderr_fd(BYVAL AS GSubprocessLauncher PTR, BYVAL AS gint)
DECLARE SUB g_subprocess_launcher_take_stdin_fd(BYVAL AS GSubprocessLauncher PTR, BYVAL AS gint)
DECLARE SUB g_subprocess_launcher_take_stdout_fd(BYVAL AS GSubprocessLauncher PTR, BYVAL AS gint)
DECLARE SUB g_subprocess_launcher_unsetenv(BYVAL AS GSubprocessLauncher PTR, BYVAL AS const gchar PTR)
DECLARE FUNCTION g_task_get_type() AS GType
#DEFINE G_TYPE_TASK (g_task_get_type())
#DEFINE G_TASK(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), G_TYPE_TASK, GTask))
#DEFINE G_TASK_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), G_TYPE_TASK, GTaskClass))
#DEFINE G_IS_TASK(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), G_TYPE_TASK))
#DEFINE G_IS_CLASS_TASK(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), G_TYPE_TASK))
#DEFINE G_TASK_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), G_TYPE_TASK, GTaskClass))
DECLARE FUNCTION g_task_new(BYVAL AS gpointer, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer) AS GTask PTR
DECLARE FUNCTION g_task_is_valid(BYVAL AS gpointer, BYVAL AS gpointer) AS gboolean
DECLARE SUB g_task_report_error(BYVAL AS gpointer, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer, BYVAL AS gpointer, BYVAL AS GError PTR)
DECLARE SUB g_task_report_new_error(BYVAL AS gpointer, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer, BYVAL AS gpointer, BYVAL AS GQuark, BYVAL AS gint, BYVAL AS const gchar PTR, ...)
DECLARE SUB g_task_attach_source(BYVAL AS GTask PTR, BYVAL AS GSource PTR, BYVAL AS GSourceFunc)
DECLARE FUNCTION g_task_get_cancellable(BYVAL AS GTask PTR) AS GCancellable PTR
DECLARE FUNCTION g_task_get_check_cancellable(BYVAL AS GTask PTR) AS gboolean
DECLARE FUNCTION g_task_get_completed(BYVAL AS GTask PTR) AS gboolean
DECLARE FUNCTION g_task_get_context(BYVAL AS GTask PTR) AS GMainContext PTR
DECLARE FUNCTION g_task_get_name(BYVAL AS GTask PTR) AS const gchar PTR
DECLARE FUNCTION g_task_get_priority(BYVAL AS GTask PTR) AS gint
DECLARE FUNCTION g_task_get_return_on_cancel(BYVAL AS GTask PTR) AS gboolean
DECLARE FUNCTION g_task_get_source_object(BYVAL AS GTask PTR) AS gpointer
DECLARE FUNCTION g_task_get_source_tag(BYVAL AS GTask PTR) AS gpointer
DECLARE FUNCTION g_task_get_task_data(BYVAL AS GTask PTR) AS gpointer
DECLARE FUNCTION g_task_had_error(BYVAL AS GTask PTR) AS gboolean
DECLARE FUNCTION g_task_propagate_boolean(BYVAL AS GTask PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION g_task_propagate_int(BYVAL AS GTask PTR, BYVAL AS GError PTR PTR) AS gssize
DECLARE FUNCTION g_task_propagate_pointer(BYVAL AS GTask PTR, BYVAL AS GError PTR PTR) AS gpointer
DECLARE FUNCTION g_task_propagate_value(BYVAL AS GTask PTR, BYVAL AS GValue PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE SUB g_task_return_boolean(BYVAL AS GTask PTR, BYVAL AS gboolean)
DECLARE SUB g_task_return_error(BYVAL AS GTask PTR, BYVAL AS GError PTR)
DECLARE FUNCTION g_task_return_error_if_cancelled(BYVAL AS GTask PTR) AS gboolean
DECLARE SUB g_task_return_int(BYVAL AS GTask PTR, BYVAL AS gssize)
DECLARE SUB g_task_return_new_error(BYVAL AS GTask PTR, BYVAL AS GQuark, BYVAL AS gint, BYVAL AS const gchar PTR, ...)
DECLARE SUB g_task_return_pointer(BYVAL AS GTask PTR, BYVAL AS gpointer, BYVAL AS GDestroyNotify)
DECLARE SUB g_task_return_value(BYVAL AS GTask PTR, BYVAL AS GValue PTR)
DECLARE SUB g_task_run_in_thread(BYVAL AS GTask PTR, BYVAL AS GTaskThreadFunc)
DECLARE SUB g_task_run_in_thread_sync(BYVAL AS GTask PTR, BYVAL AS GTaskThreadFunc)
DECLARE SUB g_task_set_check_cancellable(BYVAL AS GTask PTR, BYVAL AS gboolean)
DECLARE SUB g_task_set_name(BYVAL AS GTask PTR, BYVAL AS const gchar PTR)
DECLARE SUB g_task_set_priority(BYVAL AS GTask PTR, BYVAL AS gint)
DECLARE FUNCTION g_task_set_return_on_cancel(BYVAL AS GTask PTR, BYVAL AS gboolean) AS gboolean
DECLARE SUB g_task_set_source_tag(BYVAL AS GTask PTR, BYVAL AS gpointer)
DECLARE SUB g_task_set_task_data(BYVAL AS GTask PTR, BYVAL AS gpointer, BYVAL AS GDestroyNotify)
TYPE _GTcpConnection
  AS GSocketConnection parent_instance
  AS GTcpConnectionPrivate PTR priv
END TYPE
DECLARE FUNCTION g_tcp_connection_get_type() AS GType
#DEFINE G_TYPE_TCP_CONNECTION (g_tcp_connection_get_type())
#DEFINE G_TCP_CONNECTION(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), G_TYPE_TCP_CONNECTION, GTcpConnection))
#DEFINE G_TCP_CONNECTION_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), G_TYPE_TCP_CONNECTION, GTcpConnectionClass))
#DEFINE G_IS_TCP_CONNECTION(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), G_TYPE_TCP_CONNECTION))
#DEFINE G_IS_CLASS_TCP_CONNECTION(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), G_TYPE_TCP_CONNECTION))
#DEFINE G_TCP_CONNECTION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), G_TYPE_TCP_CONNECTION, GTcpConnectionClass))
DECLARE FUNCTION g_tcp_connection_get_graceful_disconnect(BYVAL AS GTcpConnection PTR) AS gboolean
DECLARE SUB g_tcp_connection_set_graceful_disconnect(BYVAL AS GTcpConnection PTR, BYVAL AS gboolean)
TYPE _GTcpConnectionClass
  AS GSocketConnectionClass parent_class
END TYPE
TYPE _GTcpWrapperConnection
  AS GTcpConnection parent_instance
  AS GTcpWrapperConnectionPrivate PTR priv
END TYPE
DECLARE FUNCTION g_tcp_wrapper_connection_get_type() AS GType
#DEFINE G_TYPE_TCP_WRAPPER_CONNECTION (g_tcp_wrapper_connection_get_type())
#DEFINE G_TCP_WRAPPER_CONNECTION(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), G_TYPE_TCP_WRAPPER_CONNECTION, GTcpWrapperConnection))
#DEFINE G_TCP_WRAPPER_CONNECTION_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), G_TYPE_TCP_WRAPPER_CONNECTION, GTcpWrapperConnectionClass))
#DEFINE G_IS_TCP_WRAPPER_CONNECTION(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), G_TYPE_TCP_WRAPPER_CONNECTION))
#DEFINE G_IS_CLASS_TCP_WRAPPER_CONNECTION(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), G_TYPE_TCP_WRAPPER_CONNECTION))
#DEFINE G_TCP_WRAPPER_CONNECTION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), G_TYPE_TCP_WRAPPER_CONNECTION, GTcpWrapperConnectionClass))
DECLARE FUNCTION g_tcp_wrapper_connection_new(BYVAL AS GIOStream PTR, BYVAL AS GSocket PTR) AS GSocketConnection PTR
DECLARE FUNCTION g_tcp_wrapper_connection_get_base_io_stream(BYVAL AS GTcpWrapperConnection PTR) AS GIOStream PTR
TYPE _GTcpWrapperConnectionClass
  AS GTcpConnectionClass parent_class
END TYPE
DECLARE FUNCTION g_test_dbus_get_type() AS GType
#DEFINE G_TYPE_TEST_DBUS (g_test_dbus_get_type())
#DEFINE G_TEST_DBUS(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), G_TYPE_TEST_DBUS, GTestDBus))
#DEFINE G_TEST_DBUS_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), G_TYPE_TEST_DBUS, G))
#DEFINE G_IS_TEST_DBUS(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), G_TYPE_TEST_DBUS))
#DEFINE G_IS_CLASS_TEST_DBUS(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), G_TYPE_TEST_DBUS))
#DEFINE G_TEST_DBUS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), G_TYPE_TEST_DBUS, G))
DECLARE FUNCTION g_test_dbus_new(BYVAL AS GTestDBusFlags) AS GTestDBus PTR
DECLARE SUB g_test_dbus_unset()
DECLARE SUB g_test_dbus_add_service_dir(BYVAL AS GTestDBus PTR, BYVAL AS const gchar PTR)
DECLARE SUB g_test_dbus_down(BYVAL AS GTestDBus PTR)
DECLARE FUNCTION g_test_dbus_get_bus_address(BYVAL AS GTestDBus PTR) AS const gchar PTR
DECLARE FUNCTION g_test_dbus_get_flags(BYVAL AS GTestDBus PTR) AS GTestDBusFlags
DECLARE SUB g_test_dbus_stop(BYVAL AS GTestDBus PTR)
DECLARE SUB g_test_dbus_up(BYVAL AS GTestDBus PTR)
DECLARE FUNCTION g_themed_icon_get_type() AS GType
#DEFINE G_TYPE_THEMED_ICON (g_themed_icon_get_type())
#DEFINE G_THEMED_ICON(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), G_TYPE_THEMED_ICON, GThemedIcon))
#DEFINE G_THEMED_ICON_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), G_TYPE_THEMED_ICON, GThemedIconClass))
#DEFINE G_IS_THEMED_ICON(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), G_TYPE_THEMED_ICON))
#DEFINE G_IS_CLASS_THEMED_ICON(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), G_TYPE_THEMED_ICON))
#DEFINE G_THEMED_ICON_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), G_TYPE_THEMED_ICON, GThemedIconClass))
DECLARE FUNCTION g_themed_icon_new(BYVAL AS const gchar PTR) AS GIcon PTR
DECLARE FUNCTION g_themed_icon_new_from_names(BYVAL AS zstring /'gchar'/ PTR PTR, BYVAL AS gint /'int'/) AS GIcon PTR
DECLARE FUNCTION g_themed_icon_new_with_default_fallbacks(BYVAL AS const gchar PTR) AS GIcon PTR
DECLARE SUB g_themed_icon_append_name(BYVAL AS GThemedIcon PTR, BYVAL AS const gchar PTR)
DECLARE FUNCTION g_themed_icon_get_names(BYVAL AS GThemedIcon PTR) AS const gchar ptr const /'const gchar* const'/ PTR
DECLARE SUB g_themed_icon_prepend_name(BYVAL AS GThemedIcon PTR, BYVAL AS const gchar PTR)
TYPE _GThreadedSocketService
  AS GSocketService parent_instance
  AS GThreadedSocketServicePrivate PTR priv
END TYPE
DECLARE FUNCTION g_threaded_socket_service_get_type() AS GType
#DEFINE G_TYPE_THREADED_SOCKET_SERVICE (g_threaded_socket_service_get_type())
#DEFINE G_THREADED_SOCKET_SERVICE(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), G_TYPE_THREADED_SOCKET_SERVICE, GThreadedSocketService))
#DEFINE G_THREADED_SOCKET_SERVICE_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), G_TYPE_THREADED_SOCKET_SERVICE, GThreadedSocketServiceClass))
#DEFINE G_IS_THREADED_SOCKET_SERVICE(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), G_TYPE_THREADED_SOCKET_SERVICE))
#DEFINE G_IS_CLASS_THREADED_SOCKET_SERVICE(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), G_TYPE_THREADED_SOCKET_SERVICE))
#DEFINE G_THREADED_SOCKET_SERVICE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), G_TYPE_THREADED_SOCKET_SERVICE, GThreadedSocketServiceClass))
DECLARE FUNCTION g_threaded_socket_service_new(BYVAL AS gint /'int'/) AS GSocketService PTR
TYPE _GThreadedSocketServiceClass
  AS GSocketServiceClass parent_class
  run AS FUNCTION CDECL(BYVAL AS GThreadedSocketService PTR, BYVAL AS GSocketConnection PTR, BYVAL AS GObject PTR) AS gboolean
  _g_reserved1 AS SUB CDECL()
  _g_reserved2 AS SUB CDECL()
  _g_reserved3 AS SUB CDECL()
  _g_reserved4 AS SUB CDECL()
  _g_reserved5 AS SUB CDECL()
END TYPE
DECLARE FUNCTION g_tls_authentication_mode_get_type() AS GType
#DEFINE G_TYPE_TLS_AUTHENTICATION_MODE (g_tls_authentication_mode_get_type())
DECLARE FUNCTION g_tls_backend_get_type() AS GType
#DEFINE G_TYPE_TLS_BACKEND (g_tls_backend_get_type())
#DEFINE G_TLS_BACKEND(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), G_TYPE_TLS_BACKEND, GTlsBackend))
#DEFINE G_TLS_BACKEND_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), G_TYPE_TLS_BACKEND, GTlsBackendInterface))
#DEFINE G_IS_TLS_BACKEND(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), G_TYPE_TLS_BACKEND))
#DEFINE G_TLS_BACKEND_GET_IFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE((obj), G_TYPE_TLS_BACKEND, GTlsBackendInterface))
DECLARE FUNCTION g_tls_backend_get_default() AS GTlsBackend PTR
DECLARE FUNCTION g_tls_backend_get_certificate_type(BYVAL AS GTlsBackend PTR) AS GType
DECLARE FUNCTION g_tls_backend_get_client_connection_type(BYVAL AS GTlsBackend PTR) AS GType
DECLARE FUNCTION g_tls_backend_get_default_database(BYVAL AS GTlsBackend PTR) AS GTlsDatabase PTR
DECLARE FUNCTION g_tls_backend_get_dtls_client_connection_type(BYVAL AS GTlsBackend PTR) AS GType
DECLARE FUNCTION g_tls_backend_get_dtls_server_connection_type(BYVAL AS GTlsBackend PTR) AS GType
DECLARE FUNCTION g_tls_backend_get_file_database_type(BYVAL AS GTlsBackend PTR) AS GType
DECLARE FUNCTION g_tls_backend_get_server_connection_type(BYVAL AS GTlsBackend PTR) AS GType
DECLARE SUB g_tls_backend_set_default_database(BYVAL AS GTlsBackend PTR, BYVAL AS GTlsDatabase PTR)
DECLARE FUNCTION g_tls_backend_supports_dtls(BYVAL AS GTlsBackend PTR) AS gboolean
DECLARE FUNCTION g_tls_backend_supports_tls(BYVAL AS GTlsBackend PTR) AS gboolean
TYPE _GTlsBackendInterface
  AS GTypeInterface g_iface
  supports_tls AS FUNCTION CDECL(BYVAL AS GTlsBackend PTR) AS gboolean
  get_certificate_type AS FUNCTION CDECL() AS GType
  get_client_connection_type AS FUNCTION CDECL() AS GType
  get_server_connection_type AS FUNCTION CDECL() AS GType
  get_file_database_type AS FUNCTION CDECL() AS GType
  get_default_database AS FUNCTION CDECL(BYVAL AS GTlsBackend PTR) AS GTlsDatabase PTR
  supports_dtls AS FUNCTION CDECL(BYVAL AS GTlsBackend PTR) AS gboolean
  get_dtls_client_connection_type AS FUNCTION CDECL() AS GType
  get_dtls_server_connection_type AS FUNCTION CDECL() AS GType
END TYPE
TYPE _GTlsCertificate
  AS GObject parent_instance
  AS GTlsCertificatePrivate PTR priv
END TYPE
DECLARE FUNCTION g_tls_certificate_get_type() AS GType
#DEFINE G_TYPE_TLS_CERTIFICATE (g_tls_certificate_get_type())
#DEFINE G_TLS_CERTIFICATE(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), G_TYPE_TLS_CERTIFICATE, GTlsCertificate))
#DEFINE G_TLS_CERTIFICATE_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), G_TYPE_TLS_CERTIFICATE, GTlsCertificateClass))
#DEFINE G_IS_TLS_CERTIFICATE(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), G_TYPE_TLS_CERTIFICATE))
#DEFINE G_IS_CLASS_TLS_CERTIFICATE(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), G_TYPE_TLS_CERTIFICATE))
#DEFINE G_TLS_CERTIFICATE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), G_TYPE_TLS_CERTIFICATE, GTlsCertificateClass))
DECLARE FUNCTION g_tls_certificate_new_from_file(BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR) AS GTlsCertificate PTR
DECLARE FUNCTION g_tls_certificate_new_from_files(BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR) AS GTlsCertificate PTR
DECLARE FUNCTION g_tls_certificate_new_from_pem(BYVAL AS const gchar PTR, BYVAL AS gssize, BYVAL AS GError PTR PTR) AS GTlsCertificate PTR
DECLARE FUNCTION g_tls_certificate_list_new_from_file(BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR) AS GList PTR
DECLARE FUNCTION g_tls_certificate_get_issuer(BYVAL AS GTlsCertificate PTR) AS GTlsCertificate PTR
DECLARE FUNCTION g_tls_certificate_is_same(BYVAL AS GTlsCertificate PTR, BYVAL AS GTlsCertificate PTR) AS gboolean
DECLARE FUNCTION g_tls_certificate_verify(BYVAL AS GTlsCertificate PTR, BYVAL AS GSocketConnectable PTR, BYVAL AS GTlsCertificate PTR) AS GTlsCertificateFlags
TYPE _GTlsCertificateClass
  AS GObjectClass parent_class
  verify AS FUNCTION CDECL(BYVAL AS GTlsCertificate PTR, BYVAL AS GSocketConnectable PTR, BYVAL AS GTlsCertificate PTR) AS GTlsCertificateFlags
  AS gpointer padding(7)
END TYPE
DECLARE FUNCTION g_tls_certificate_request_flags_get_type() AS GType
#DEFINE G_TYPE_TLS_CERTIFICATE_REQUEST_FLAGS (g_tls_certificate_request_flags_get_type())
DECLARE FUNCTION g_tls_client_connection_get_type() AS GType
#DEFINE G_TYPE_TLS_CLIENT_CONNECTION (g_tls_client_connection_get_type())
#DEFINE G_TLS_CLIENT_CONNECTION(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), G_TYPE_TLS_CLIENT_CONNECTION, GTlsClientConnection))
#DEFINE G_TLS_CLIENT_CONNECTION_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), G_TYPE_TLS_CLIENT_CONNECTION, GTlsClientConnectionInterface))
#DEFINE G_IS_TLS_CLIENT_CONNECTION(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), G_TYPE_TLS_CLIENT_CONNECTION))
#DEFINE G_TLS_CLIENT_CONNECTION_GET_IFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE((obj), G_TYPE_TLS_CLIENT_CONNECTION, GTlsClientConnectionInterface))
DECLARE FUNCTION g_tls_client_connection_new(BYVAL AS GIOStream PTR, BYVAL AS GSocketConnectable PTR, BYVAL AS GError PTR PTR) AS GIOStream PTR
DECLARE SUB g_tls_client_connection_copy_session_state(BYVAL AS GTlsClientConnection PTR, BYVAL AS GTlsClientConnection PTR)
DECLARE FUNCTION g_tls_client_connection_get_accepted_cas(BYVAL AS GTlsClientConnection PTR) AS GList PTR
DECLARE FUNCTION g_tls_client_connection_get_server_identity(BYVAL AS GTlsClientConnection PTR) AS GSocketConnectable PTR
DECLARE FUNCTION g_tls_client_connection_get_use_ssl3(BYVAL AS GTlsClientConnection PTR) AS gboolean
DECLARE FUNCTION g_tls_client_connection_get_validation_flags(BYVAL AS GTlsClientConnection PTR) AS GTlsCertificateFlags
DECLARE SUB g_tls_client_connection_set_server_identity(BYVAL AS GTlsClientConnection PTR, BYVAL AS GSocketConnectable PTR)
DECLARE SUB g_tls_client_connection_set_use_ssl3(BYVAL AS GTlsClientConnection PTR, BYVAL AS gboolean)
DECLARE SUB g_tls_client_connection_set_validation_flags(BYVAL AS GTlsClientConnection PTR, BYVAL AS GTlsCertificateFlags)
TYPE _GTlsClientConnectionInterface
  AS GTypeInterface g_iface
  copy_session_state AS SUB CDECL(BYVAL AS GTlsClientConnection PTR, BYVAL AS GTlsClientConnection PTR)
END TYPE
TYPE _GTlsConnection
  AS GIOStream parent_instance
  AS GTlsConnectionPrivate PTR priv
END TYPE
DECLARE FUNCTION g_tls_connection_get_type() AS GType
#DEFINE G_TYPE_TLS_CONNECTION (g_tls_connection_get_type())
#DEFINE G_TLS_CONNECTION(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), G_TYPE_TLS_CONNECTION, GTlsConnection))
#DEFINE G_TLS_CONNECTION_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), G_TYPE_TLS_CONNECTION, GTlsConnectionClass))
#DEFINE G_IS_TLS_CONNECTION(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), G_TYPE_TLS_CONNECTION))
#DEFINE G_IS_CLASS_TLS_CONNECTION(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), G_TYPE_TLS_CONNECTION))
#DEFINE G_TLS_CONNECTION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), G_TYPE_TLS_CONNECTION, GTlsConnectionClass))
DECLARE FUNCTION g_tls_connection_emit_accept_certificate(BYVAL AS GTlsConnection PTR, BYVAL AS GTlsCertificate PTR, BYVAL AS GTlsCertificateFlags) AS gboolean
DECLARE FUNCTION g_tls_connection_get_certificate(BYVAL AS GTlsConnection PTR) AS GTlsCertificate PTR
DECLARE FUNCTION g_tls_connection_get_database(BYVAL AS GTlsConnection PTR) AS GTlsDatabase PTR
DECLARE FUNCTION g_tls_connection_get_interaction(BYVAL AS GTlsConnection PTR) AS GTlsInteraction PTR
DECLARE FUNCTION g_tls_connection_get_negotiated_protocol(BYVAL AS GTlsConnection PTR) AS const gchar PTR
DECLARE FUNCTION g_tls_connection_get_peer_certificate(BYVAL AS GTlsConnection PTR) AS GTlsCertificate PTR
DECLARE FUNCTION g_tls_connection_get_peer_certificate_errors(BYVAL AS GTlsConnection PTR) AS GTlsCertificateFlags
DECLARE FUNCTION g_tls_connection_get_rehandshake_mode(BYVAL AS GTlsConnection PTR) AS GTlsRehandshakeMode
DECLARE FUNCTION g_tls_connection_get_require_close_notify(BYVAL AS GTlsConnection PTR) AS gboolean
DECLARE FUNCTION g_tls_connection_get_use_system_certdb(BYVAL AS GTlsConnection PTR) AS gboolean
DECLARE FUNCTION g_tls_connection_handshake(BYVAL AS GTlsConnection PTR, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE SUB g_tls_connection_handshake_async(BYVAL AS GTlsConnection PTR, BYVAL AS gint /'int'/, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
DECLARE FUNCTION g_tls_connection_handshake_finish(BYVAL AS GTlsConnection PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE SUB g_tls_connection_set_advertised_protocols(BYVAL AS GTlsConnection PTR, BYVAL AS const gchar ptr const /'const gchar* const'/ PTR)
DECLARE SUB g_tls_connection_set_certificate(BYVAL AS GTlsConnection PTR, BYVAL AS GTlsCertificate PTR)
DECLARE SUB g_tls_connection_set_database(BYVAL AS GTlsConnection PTR, BYVAL AS GTlsDatabase PTR)
DECLARE SUB g_tls_connection_set_interaction(BYVAL AS GTlsConnection PTR, BYVAL AS GTlsInteraction PTR)
DECLARE SUB g_tls_connection_set_rehandshake_mode(BYVAL AS GTlsConnection PTR, BYVAL AS GTlsRehandshakeMode)
DECLARE SUB g_tls_connection_set_require_close_notify(BYVAL AS GTlsConnection PTR, BYVAL AS gboolean)
DECLARE SUB g_tls_connection_set_use_system_certdb(BYVAL AS GTlsConnection PTR, BYVAL AS gboolean)
TYPE _GTlsConnectionClass
  AS GIOStreamClass parent_class
  accept_certificate AS FUNCTION CDECL(BYVAL AS GTlsConnection PTR, BYVAL AS GTlsCertificate PTR, BYVAL AS GTlsCertificateFlags) AS gboolean
  handshake AS FUNCTION CDECL(BYVAL AS GTlsConnection PTR, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS gboolean
  handshake_async AS SUB CDECL(BYVAL AS GTlsConnection PTR, BYVAL AS gint /'int'/, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
  handshake_finish AS FUNCTION CDECL(BYVAL AS GTlsConnection PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS gboolean
  AS gpointer padding(7)
END TYPE
TYPE _GTlsDatabase
  AS GObject parent_instance
  AS GTlsDatabasePrivate PTR priv
END TYPE
DECLARE FUNCTION g_tls_database_get_type() AS GType
#DEFINE G_TYPE_TLS_DATABASE (g_tls_database_get_type())
#DEFINE G_TLS_DATABASE(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), G_TYPE_TLS_DATABASE, GTlsDatabase))
#DEFINE G_TLS_DATABASE_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), G_TYPE_TLS_DATABASE, GTlsDatabaseClass))
#DEFINE G_IS_TLS_DATABASE(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), G_TYPE_TLS_DATABASE))
#DEFINE G_IS_CLASS_TLS_DATABASE(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), G_TYPE_TLS_DATABASE))
#DEFINE G_TLS_DATABASE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), G_TYPE_TLS_DATABASE, GTlsDatabaseClass))
DECLARE FUNCTION g_tls_database_create_certificate_handle(BYVAL AS GTlsDatabase PTR, BYVAL AS GTlsCertificate PTR) AS gchar PTR
DECLARE FUNCTION g_tls_database_lookup_certificate_for_handle(BYVAL AS GTlsDatabase PTR, BYVAL AS const gchar PTR, BYVAL AS GTlsInteraction PTR, BYVAL AS GTlsDatabaseLookupFlags, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS GTlsCertificate PTR
DECLARE SUB g_tls_database_lookup_certificate_for_handle_async(BYVAL AS GTlsDatabase PTR, BYVAL AS const gchar PTR, BYVAL AS GTlsInteraction PTR, BYVAL AS GTlsDatabaseLookupFlags, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
DECLARE FUNCTION g_tls_database_lookup_certificate_for_handle_finish(BYVAL AS GTlsDatabase PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS GTlsCertificate PTR
DECLARE FUNCTION g_tls_database_lookup_certificate_issuer(BYVAL AS GTlsDatabase PTR, BYVAL AS GTlsCertificate PTR, BYVAL AS GTlsInteraction PTR, BYVAL AS GTlsDatabaseLookupFlags, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS GTlsCertificate PTR
DECLARE SUB g_tls_database_lookup_certificate_issuer_async(BYVAL AS GTlsDatabase PTR, BYVAL AS GTlsCertificate PTR, BYVAL AS GTlsInteraction PTR, BYVAL AS GTlsDatabaseLookupFlags, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
DECLARE FUNCTION g_tls_database_lookup_certificate_issuer_finish(BYVAL AS GTlsDatabase PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS GTlsCertificate PTR
DECLARE FUNCTION g_tls_database_lookup_certificates_issued_by(BYVAL AS GTlsDatabase PTR, BYVAL AS GByteArray PTR, BYVAL AS GTlsInteraction PTR, BYVAL AS GTlsDatabaseLookupFlags, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS GList PTR
DECLARE SUB g_tls_database_lookup_certificates_issued_by_async(BYVAL AS GTlsDatabase PTR, BYVAL AS GByteArray PTR, BYVAL AS GTlsInteraction PTR, BYVAL AS GTlsDatabaseLookupFlags, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
DECLARE FUNCTION g_tls_database_lookup_certificates_issued_by_finish(BYVAL AS GTlsDatabase PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS GList PTR
DECLARE FUNCTION g_tls_database_verify_chain(BYVAL AS GTlsDatabase PTR, BYVAL AS GTlsCertificate PTR, BYVAL AS const gchar PTR, BYVAL AS GSocketConnectable PTR, BYVAL AS GTlsInteraction PTR, BYVAL AS GTlsDatabaseVerifyFlags, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS GTlsCertificateFlags
DECLARE SUB g_tls_database_verify_chain_async(BYVAL AS GTlsDatabase PTR, BYVAL AS GTlsCertificate PTR, BYVAL AS const gchar PTR, BYVAL AS GSocketConnectable PTR, BYVAL AS GTlsInteraction PTR, BYVAL AS GTlsDatabaseVerifyFlags, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
DECLARE FUNCTION g_tls_database_verify_chain_finish(BYVAL AS GTlsDatabase PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS GTlsCertificateFlags
TYPE _GTlsDatabaseClass
  AS GObjectClass parent_class
  verify_chain AS FUNCTION CDECL(BYVAL AS GTlsDatabase PTR, BYVAL AS GTlsCertificate PTR, BYVAL AS const gchar PTR, BYVAL AS GSocketConnectable PTR, BYVAL AS GTlsInteraction PTR, BYVAL AS GTlsDatabaseVerifyFlags, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS GTlsCertificateFlags
  verify_chain_async AS SUB CDECL(BYVAL AS GTlsDatabase PTR, BYVAL AS GTlsCertificate PTR, BYVAL AS const gchar PTR, BYVAL AS GSocketConnectable PTR, BYVAL AS GTlsInteraction PTR, BYVAL AS GTlsDatabaseVerifyFlags, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
  verify_chain_finish AS FUNCTION CDECL(BYVAL AS GTlsDatabase PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS GTlsCertificateFlags
  create_certificate_handle AS FUNCTION CDECL(BYVAL AS GTlsDatabase PTR, BYVAL AS GTlsCertificate PTR) AS gchar PTR
  lookup_certificate_for_handle AS FUNCTION CDECL(BYVAL AS GTlsDatabase PTR, BYVAL AS const gchar PTR, BYVAL AS GTlsInteraction PTR, BYVAL AS GTlsDatabaseLookupFlags, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS GTlsCertificate PTR
  lookup_certificate_for_handle_async AS SUB CDECL(BYVAL AS GTlsDatabase PTR, BYVAL AS const gchar PTR, BYVAL AS GTlsInteraction PTR, BYVAL AS GTlsDatabaseLookupFlags, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
  lookup_certificate_for_handle_finish AS FUNCTION CDECL(BYVAL AS GTlsDatabase PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS GTlsCertificate PTR
  lookup_certificate_issuer AS FUNCTION CDECL(BYVAL AS GTlsDatabase PTR, BYVAL AS GTlsCertificate PTR, BYVAL AS GTlsInteraction PTR, BYVAL AS GTlsDatabaseLookupFlags, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS GTlsCertificate PTR
  lookup_certificate_issuer_async AS SUB CDECL(BYVAL AS GTlsDatabase PTR, BYVAL AS GTlsCertificate PTR, BYVAL AS GTlsInteraction PTR, BYVAL AS GTlsDatabaseLookupFlags, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
  lookup_certificate_issuer_finish AS FUNCTION CDECL(BYVAL AS GTlsDatabase PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS GTlsCertificate PTR
  lookup_certificates_issued_by AS FUNCTION CDECL(BYVAL AS GTlsDatabase PTR, BYVAL AS GByteArray PTR, BYVAL AS GTlsInteraction PTR, BYVAL AS GTlsDatabaseLookupFlags, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS GList PTR
  lookup_certificates_issued_by_async AS SUB CDECL(BYVAL AS GTlsDatabase PTR, BYVAL AS GByteArray PTR, BYVAL AS GTlsInteraction PTR, BYVAL AS GTlsDatabaseLookupFlags, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
  lookup_certificates_issued_by_finish AS FUNCTION CDECL(BYVAL AS GTlsDatabase PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS GList PTR
  AS gpointer padding(15)
END TYPE
DECLARE FUNCTION g_tls_database_lookup_flags_get_type() AS GType
#DEFINE G_TYPE_TLS_DATABASE_LOOKUP_FLAGS (g_tls_database_lookup_flags_get_type())
DECLARE FUNCTION g_tls_error_get_type() AS GType
#DEFINE G_TYPE_TLS_ERROR (g_tls_error_get_type())
DECLARE FUNCTION g_tls_file_database_get_type() AS GType
#DEFINE G_TYPE_TLS_FILE_DATABASE (g_tls_file_database_get_type())
#DEFINE G_TLS_FILE_DATABASE(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), G_TYPE_TLS_FILE_DATABASE, GTlsFileDatabase))
#DEFINE G_TLS_FILE_DATABASE_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), G_TYPE_TLS_FILE_DATABASE, GTlsFileDatabaseInterface))
#DEFINE G_IS_TLS_FILE_DATABASE(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), G_TYPE_TLS_FILE_DATABASE))
#DEFINE G_TLS_FILE_DATABASE_GET_IFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE((obj), G_TYPE_TLS_FILE_DATABASE, GTlsFileDatabaseInterface))
DECLARE FUNCTION g_tls_file_database_new(BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR) AS GTlsDatabase PTR
TYPE _GTlsFileDatabaseInterface
  AS GTypeInterface g_iface
  AS gpointer padding(7)
END TYPE
TYPE _GTlsInteraction
  AS GObject parent_instance
  AS GTlsInteractionPrivate PTR priv
END TYPE
DECLARE FUNCTION g_tls_interaction_get_type() AS GType
#DEFINE G_TYPE_TLS_INTERACTION (g_tls_interaction_get_type())
#DEFINE G_TLS_INTERACTION(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), G_TYPE_TLS_INTERACTION, GTlsInteraction))
#DEFINE G_TLS_INTERACTION_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), G_TYPE_TLS_INTERACTION, GTlsInteractionClass))
#DEFINE G_IS_TLS_INTERACTION(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), G_TYPE_TLS_INTERACTION))
#DEFINE G_IS_CLASS_TLS_INTERACTION(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), G_TYPE_TLS_INTERACTION))
#DEFINE G_TLS_INTERACTION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), G_TYPE_TLS_INTERACTION, GTlsInteractionClass))
DECLARE FUNCTION g_tls_interaction_ask_password(BYVAL AS GTlsInteraction PTR, BYVAL AS GTlsPassword PTR, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS GTlsInteractionResult
DECLARE SUB g_tls_interaction_ask_password_async(BYVAL AS GTlsInteraction PTR, BYVAL AS GTlsPassword PTR, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
DECLARE FUNCTION g_tls_interaction_ask_password_finish(BYVAL AS GTlsInteraction PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS GTlsInteractionResult
DECLARE FUNCTION g_tls_interaction_invoke_ask_password(BYVAL AS GTlsInteraction PTR, BYVAL AS GTlsPassword PTR, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS GTlsInteractionResult
DECLARE FUNCTION g_tls_interaction_invoke_request_certificate(BYVAL AS GTlsInteraction PTR, BYVAL AS GTlsConnection PTR, BYVAL AS GTlsCertificateRequestFlags, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS GTlsInteractionResult
DECLARE FUNCTION g_tls_interaction_request_certificate(BYVAL AS GTlsInteraction PTR, BYVAL AS GTlsConnection PTR, BYVAL AS GTlsCertificateRequestFlags, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS GTlsInteractionResult
DECLARE SUB g_tls_interaction_request_certificate_async(BYVAL AS GTlsInteraction PTR, BYVAL AS GTlsConnection PTR, BYVAL AS GTlsCertificateRequestFlags, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
DECLARE FUNCTION g_tls_interaction_request_certificate_finish(BYVAL AS GTlsInteraction PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS GTlsInteractionResult
TYPE _GTlsInteractionClass
  AS GObjectClass parent_class
  ask_password AS FUNCTION CDECL(BYVAL AS GTlsInteraction PTR, BYVAL AS GTlsPassword PTR, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS GTlsInteractionResult
  ask_password_async AS SUB CDECL(BYVAL AS GTlsInteraction PTR, BYVAL AS GTlsPassword PTR, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
  ask_password_finish AS FUNCTION CDECL(BYVAL AS GTlsInteraction PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS GTlsInteractionResult
  request_certificate AS FUNCTION CDECL(BYVAL AS GTlsInteraction PTR, BYVAL AS GTlsConnection PTR, BYVAL AS GTlsCertificateRequestFlags, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS GTlsInteractionResult
  request_certificate_async AS SUB CDECL(BYVAL AS GTlsInteraction PTR, BYVAL AS GTlsConnection PTR, BYVAL AS GTlsCertificateRequestFlags, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
  request_certificate_finish AS FUNCTION CDECL(BYVAL AS GTlsInteraction PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS GTlsInteractionResult
  AS gpointer padding(20)
END TYPE
TYPE _GTlsPassword
  AS GObject parent_instance
  AS GTlsPasswordPrivate PTR priv
END TYPE
DECLARE FUNCTION g_tls_interaction_result_get_type() AS GType
#DEFINE G_TYPE_TLS_INTERACTION_RESULT (g_tls_interaction_result_get_type())
DECLARE FUNCTION g_tls_password_get_type() AS GType
#DEFINE G_TYPE_TLS_PASSWORD (g_tls_password_get_type())
#DEFINE G_TLS_PASSWORD(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), G_TYPE_TLS_PASSWORD, GTlsPassword))
#DEFINE G_TLS_PASSWORD_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), G_TYPE_TLS_PASSWORD, GTlsPasswordClass))
#DEFINE G_IS_TLS_PASSWORD(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), G_TYPE_TLS_PASSWORD))
#DEFINE G_IS_CLASS_TLS_PASSWORD(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), G_TYPE_TLS_PASSWORD))
#DEFINE G_TLS_PASSWORD_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), G_TYPE_TLS_PASSWORD, GTlsPasswordClass))
DECLARE FUNCTION g_tls_password_new(BYVAL AS GTlsPasswordFlags, BYVAL AS const gchar PTR) AS GTlsPassword PTR
DECLARE FUNCTION g_tls_password_get_description(BYVAL AS GTlsPassword PTR) AS const gchar PTR
DECLARE FUNCTION g_tls_password_get_flags(BYVAL AS GTlsPassword PTR) AS GTlsPasswordFlags
DECLARE FUNCTION g_tls_password_get_value(BYVAL AS GTlsPassword PTR, BYVAL AS gsize PTR) AS const guchar PTR
DECLARE FUNCTION g_tls_password_get_warning(BYVAL AS GTlsPassword PTR) AS const gchar PTR
DECLARE SUB g_tls_password_set_description(BYVAL AS GTlsPassword PTR, BYVAL AS const gchar PTR)
DECLARE SUB g_tls_password_set_flags(BYVAL AS GTlsPassword PTR, BYVAL AS GTlsPasswordFlags)
DECLARE SUB g_tls_password_set_value(BYVAL AS GTlsPassword PTR, BYVAL AS const guchar PTR, BYVAL AS gssize)
DECLARE SUB g_tls_password_set_value_full(BYVAL AS GTlsPassword PTR, BYVAL AS guchar PTR, BYVAL AS gssize, BYVAL AS GDestroyNotify)
DECLARE SUB g_tls_password_set_warning(BYVAL AS GTlsPassword PTR, BYVAL AS const gchar PTR)
TYPE _GTlsPasswordClass
  AS GObjectClass parent_class
  get_value AS FUNCTION CDECL(BYVAL AS GTlsPassword PTR, BYVAL AS gsize PTR) AS const guchar PTR
  set_value AS SUB CDECL(BYVAL AS GTlsPassword PTR, BYVAL AS guchar PTR, BYVAL AS gssize, BYVAL AS GDestroyNotify)
  get_default_warning AS FUNCTION CDECL(BYVAL AS GTlsPassword PTR) AS const gchar PTR
  AS gpointer padding(3)
END TYPE
DECLARE FUNCTION g_tls_rehandshake_mode_get_type() AS GType
#DEFINE G_TYPE_TLS_REHANDSHAKE_MODE (g_tls_rehandshake_mode_get_type())
DECLARE FUNCTION g_tls_server_connection_get_type() AS GType
#DEFINE G_TYPE_TLS_SERVER_CONNECTION (g_tls_server_connection_get_type())
#DEFINE G_TLS_SERVER_CONNECTION(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), G_TYPE_TLS_SERVER_CONNECTION, GTlsServerConnection))
#DEFINE G_TLS_SERVER_CONNECTION_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), G_TYPE_TLS_SERVER_CONNECTION, GTlsServerConnectionInterface))
#DEFINE G_IS_TLS_SERVER_CONNECTION(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), G_TYPE_TLS_SERVER_CONNECTION))
#DEFINE G_TLS_SERVER_CONNECTION_GET_IFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE((obj), G_TYPE_TLS_SERVER_CONNECTION, GTlsServerConnectionInterface))
DECLARE FUNCTION g_tls_server_connection_new(BYVAL AS GIOStream PTR, BYVAL AS GTlsCertificate PTR, BYVAL AS GError PTR PTR) AS GIOStream PTR
TYPE _GTlsServerConnectionInterface
  AS GTypeInterface g_iface
END TYPE
TYPE _GUnixConnection
  AS GSocketConnection parent_instance
  AS GUnixConnectionPrivate PTR priv
END TYPE
DECLARE FUNCTION g_unix_connection_get_type() AS GType
#DEFINE G_TYPE_UNIX_CONNECTION (g_unix_connection_get_type())
#DEFINE G_UNIX_CONNECTION(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), G_TYPE_UNIX_CONNECTION, GUnixConnection))
#DEFINE G_UNIX_CONNECTION_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), G_TYPE_UNIX_CONNECTION, GUnixConnectionClass))
#DEFINE G_IS_UNIX_CONNECTION(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), G_TYPE_UNIX_CONNECTION))
#DEFINE G_IS_CLASS_UNIX_CONNECTION(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), G_TYPE_UNIX_CONNECTION))
#DEFINE G_UNIX_CONNECTION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), G_TYPE_UNIX_CONNECTION, GUnixConnectionClass))
DECLARE FUNCTION g_unix_connection_receive_credentials(BYVAL AS GUnixConnection PTR, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS GCredentials PTR
DECLARE SUB g_unix_connection_receive_credentials_async(BYVAL AS GUnixConnection PTR, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
DECLARE FUNCTION g_unix_connection_receive_credentials_finish(BYVAL AS GUnixConnection PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS GCredentials PTR
DECLARE FUNCTION g_unix_connection_receive_fd(BYVAL AS GUnixConnection PTR, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS gint
DECLARE FUNCTION g_unix_connection_send_credentials(BYVAL AS GUnixConnection PTR, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE SUB g_unix_connection_send_credentials_async(BYVAL AS GUnixConnection PTR, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
DECLARE FUNCTION g_unix_connection_send_credentials_finish(BYVAL AS GUnixConnection PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION g_unix_connection_send_fd(BYVAL AS GUnixConnection PTR, BYVAL AS gint, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS gboolean
TYPE _GUnixConnectionClass
  AS GSocketConnectionClass parent_class
END TYPE
TYPE _GUnixCredentialsMessage
  AS GSocketControlMessage parent_instance
  AS GUnixCredentialsMessagePrivate PTR priv
END TYPE
DECLARE FUNCTION g_unix_credentials_message_get_type() AS GType
#DEFINE G_TYPE_UNIX_CREDENTIALS_MESSAGE (g_unix_credentials_message_get_type())
#DEFINE G_UNIX_CREDENTIALS_MESSAGE(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), G_TYPE_UNIX_CREDENTIALS_MESSAGE, GUnixCredentialsMessage))
#DEFINE G_UNIX_CREDENTIALS_MESSAGE_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), G_TYPE_UNIX_CREDENTIALS_MESSAGE, GUnixCredentialsMessageClass))
#DEFINE G_IS_UNIX_CREDENTIALS_MESSAGE(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), G_TYPE_UNIX_CREDENTIALS_MESSAGE))
#DEFINE G_IS_CLASS_UNIX_CREDENTIALS_MESSAGE(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), G_TYPE_UNIX_CREDENTIALS_MESSAGE))
#DEFINE G_UNIX_CREDENTIALS_MESSAGE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), G_TYPE_UNIX_CREDENTIALS_MESSAGE, GUnixCredentialsMessageClass))
DECLARE FUNCTION g_unix_credentials_message_new() AS GSocketControlMessage PTR
DECLARE FUNCTION g_unix_credentials_message_new_with_credentials(BYVAL AS GCredentials PTR) AS GSocketControlMessage PTR
DECLARE FUNCTION g_unix_credentials_message_is_supported() AS gboolean
DECLARE FUNCTION g_unix_credentials_message_get_credentials(BYVAL AS GUnixCredentialsMessage PTR) AS GCredentials PTR
TYPE _GUnixCredentialsMessageClass
  AS GSocketControlMessageClass parent_class
  _g_reserved1 AS SUB CDECL()
  _g_reserved2 AS SUB CDECL()
END TYPE
TYPE _GUnixFDList
  AS GObject parent_instance
  AS GUnixFDListPrivate PTR priv
END TYPE
DECLARE FUNCTION g_unix_fd_list_get_type() AS GType
#DEFINE G_TYPE_UNIX_FD_LIST (g_unix_fd_list_get_type())
#DEFINE G_UNIX_FD_LIST(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), G_TYPE_UNIX_FD_LIST, GUnixFDList))
#DEFINE G_UNIX_FD_LIST_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), G_TYPE_UNIX_FD_LIST, GUnixFDListClass))
#DEFINE G_IS_UNIX_FD_LIST(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), G_TYPE_UNIX_FD_LIST))
#DEFINE G_IS_CLASS_UNIX_FD_LIST(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), G_TYPE_UNIX_FD_LIST))
#DEFINE G_UNIX_FD_LIST_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), G_TYPE_UNIX_FD_LIST, GUnixFDListClass))
DECLARE FUNCTION g_unix_fd_list_new() AS GUnixFDList PTR
DECLARE FUNCTION g_unix_fd_list_new_from_array(BYVAL AS const gint PTR, BYVAL AS gint) AS GUnixFDList PTR
DECLARE FUNCTION g_unix_fd_list_append(BYVAL AS GUnixFDList PTR, BYVAL AS gint, BYVAL AS GError PTR PTR) AS gint
DECLARE FUNCTION g_unix_fd_list_get(BYVAL AS GUnixFDList PTR, BYVAL AS gint, BYVAL AS GError PTR PTR) AS gint
DECLARE FUNCTION g_unix_fd_list_get_length(BYVAL AS GUnixFDList PTR) AS gint
DECLARE FUNCTION g_unix_fd_list_peek_fds(BYVAL AS GUnixFDList PTR, BYVAL AS gint PTR) AS const gint PTR
DECLARE FUNCTION g_unix_fd_list_steal_fds(BYVAL AS GUnixFDList PTR, BYVAL AS gint PTR) AS gint PTR
TYPE _GUnixFDListClass
  AS GObjectClass parent_class
  _g_reserved1 AS SUB CDECL()
  _g_reserved2 AS SUB CDECL()
  _g_reserved3 AS SUB CDECL()
  _g_reserved4 AS SUB CDECL()
  _g_reserved5 AS SUB CDECL()
END TYPE
TYPE _GUnixFDMessage
  AS GSocketControlMessage parent_instance
  AS GUnixFDMessagePrivate PTR priv
END TYPE
DECLARE FUNCTION g_unix_fd_message_get_type() AS GType
#DEFINE G_TYPE_UNIX_FD_MESSAGE (g_unix_fd_message_get_type())
#DEFINE G_UNIX_FD_MESSAGE(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), G_TYPE_UNIX_FD_MESSAGE, GUnixFDMessage))
#DEFINE G_UNIX_FD_MESSAGE_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), G_TYPE_UNIX_FD_MESSAGE, GUnixFDMessageClass))
#DEFINE G_IS_UNIX_FD_MESSAGE(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), G_TYPE_UNIX_FD_MESSAGE))
#DEFINE G_IS_CLASS_UNIX_FD_MESSAGE(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), G_TYPE_UNIX_FD_MESSAGE))
#DEFINE G_UNIX_FD_MESSAGE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), G_TYPE_UNIX_FD_MESSAGE, GUnixFDMessageClass))
DECLARE FUNCTION g_unix_fd_message_new() AS GSocketControlMessage PTR
DECLARE FUNCTION g_unix_fd_message_new_with_fd_list(BYVAL AS GUnixFDList PTR) AS GSocketControlMessage PTR
DECLARE FUNCTION g_unix_fd_message_append_fd(BYVAL AS GUnixFDMessage PTR, BYVAL AS gint, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION g_unix_fd_message_get_fd_list(BYVAL AS GUnixFDMessage PTR) AS GUnixFDList PTR
DECLARE FUNCTION g_unix_fd_message_steal_fds(BYVAL AS GUnixFDMessage PTR, BYVAL AS gint PTR) AS gint PTR
TYPE _GUnixFDMessageClass
  AS GSocketControlMessageClass parent_class
  _g_reserved1 AS SUB CDECL()
  _g_reserved2 AS SUB CDECL()
END TYPE
TYPE _GUnixInputStream
  AS GInputStream parent_instance
  AS GUnixInputStreamPrivate PTR priv
END TYPE
DECLARE FUNCTION g_unix_input_stream_get_type() AS GType
#DEFINE G_TYPE_UNIX_INPUT_STREAM (g_unix_input_stream_get_type())
#DEFINE G_UNIX_INPUT_STREAM(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), G_TYPE_UNIX_INPUT_STREAM, GUnixInputStream))
#DEFINE G_UNIX_INPUT_STREAM_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), G_TYPE_UNIX_INPUT_STREAM, GUnixInputStreamClass))
#DEFINE G_IS_UNIX_INPUT_STREAM(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), G_TYPE_UNIX_INPUT_STREAM))
#DEFINE G_IS_CLASS_UNIX_INPUT_STREAM(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), G_TYPE_UNIX_INPUT_STREAM))
#DEFINE G_UNIX_INPUT_STREAM_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), G_TYPE_UNIX_INPUT_STREAM, GUnixInputStreamClass))
DECLARE FUNCTION g_unix_input_stream_new(BYVAL AS gint, BYVAL AS gboolean) AS GInputStream PTR
DECLARE FUNCTION g_unix_input_stream_get_close_fd(BYVAL AS GUnixInputStream PTR) AS gboolean
DECLARE FUNCTION g_unix_input_stream_get_fd(BYVAL AS GUnixInputStream PTR) AS gint
DECLARE SUB g_unix_input_stream_set_close_fd(BYVAL AS GUnixInputStream PTR, BYVAL AS gboolean)
TYPE _GUnixInputStreamClass
  AS GInputStreamClass parent_class
  _g_reserved1 AS SUB CDECL()
  _g_reserved2 AS SUB CDECL()
  _g_reserved3 AS SUB CDECL()
  _g_reserved4 AS SUB CDECL()
  _g_reserved5 AS SUB CDECL()
END TYPE
DECLARE FUNCTION g_unix_mount_monitor_get_type() AS GType
#DEFINE G_TYPE_UNIX_MOUNT_MONITOR (g_unix_mount_monitor_get_type())
#DEFINE G_UNIX_MOUNT_MONITOR(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), G_TYPE_UNIX_MOUNT_MONITOR, GUnixMountMonitor))
#DEFINE G_UNIX_MOUNT_MONITOR_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), G_TYPE_UNIX_MOUNT_MONITOR, GUnixMountMonitorClass))
#DEFINE G_IS_UNIX_MOUNT_MONITOR(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), G_TYPE_UNIX_MOUNT_MONITOR))
#DEFINE G_IS_CLASS_UNIX_MOUNT_MONITOR(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), G_TYPE_UNIX_MOUNT_MONITOR))
#DEFINE G_UNIX_MOUNT_MONITOR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), G_TYPE_UNIX_MOUNT_MONITOR, GUnixMountMonitorClass))
DECLARE FUNCTION g_unix_mount_monitor_new() AS GUnixMountMonitor PTR
DECLARE FUNCTION g_unix_mount_monitor_get() AS GUnixMountMonitor PTR
DECLARE SUB g_unix_mount_monitor_set_rate_limit(BYVAL AS GUnixMountMonitor PTR, BYVAL AS gint /'int'/)
DECLARE FUNCTION g_unix_mount_point_compare(BYVAL AS GUnixMountPoint PTR, BYVAL AS GUnixMountPoint PTR) AS gint
DECLARE FUNCTION g_unix_mount_point_copy(BYVAL AS GUnixMountPoint PTR) AS GUnixMountPoint PTR
DECLARE SUB g_unix_mount_point_free(BYVAL AS GUnixMountPoint PTR)
DECLARE FUNCTION g_unix_mount_point_get_device_path(BYVAL AS GUnixMountPoint PTR) AS const gchar PTR
DECLARE FUNCTION g_unix_mount_point_get_fs_type(BYVAL AS GUnixMountPoint PTR) AS const gchar PTR
DECLARE FUNCTION g_unix_mount_point_get_mount_path(BYVAL AS GUnixMountPoint PTR) AS const gchar PTR
DECLARE FUNCTION g_unix_mount_point_get_options(BYVAL AS GUnixMountPoint PTR) AS const gchar PTR
DECLARE FUNCTION g_unix_mount_point_guess_can_eject(BYVAL AS GUnixMountPoint PTR) AS gboolean
DECLARE FUNCTION g_unix_mount_point_guess_icon(BYVAL AS GUnixMountPoint PTR) AS GIcon PTR
DECLARE FUNCTION g_unix_mount_point_guess_name(BYVAL AS GUnixMountPoint PTR) AS zstring /'gchar'/ PTR
DECLARE FUNCTION g_unix_mount_point_guess_symbolic_icon(BYVAL AS GUnixMountPoint PTR) AS GIcon PTR
DECLARE FUNCTION g_unix_mount_point_is_loopback(BYVAL AS GUnixMountPoint PTR) AS gboolean
DECLARE FUNCTION g_unix_mount_point_is_readonly(BYVAL AS GUnixMountPoint PTR) AS gboolean
DECLARE FUNCTION g_unix_mount_point_is_user_mountable(BYVAL AS GUnixMountPoint PTR) AS gboolean
TYPE _GUnixOutputStream
  AS GOutputStream parent_instance
  AS GUnixOutputStreamPrivate PTR priv
END TYPE
DECLARE FUNCTION g_unix_output_stream_get_type() AS GType
#DEFINE G_TYPE_UNIX_OUTPUT_STREAM (g_unix_output_stream_get_type())
#DEFINE G_UNIX_OUTPUT_STREAM(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), G_TYPE_UNIX_OUTPUT_STREAM, GUnixOutputStream))
#DEFINE G_UNIX_OUTPUT_STREAM_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), G_TYPE_UNIX_OUTPUT_STREAM, GUnixOutputStreamClass))
#DEFINE G_IS_UNIX_OUTPUT_STREAM(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), G_TYPE_UNIX_OUTPUT_STREAM))
#DEFINE G_IS_CLASS_UNIX_OUTPUT_STREAM(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), G_TYPE_UNIX_OUTPUT_STREAM))
#DEFINE G_UNIX_OUTPUT_STREAM_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), G_TYPE_UNIX_OUTPUT_STREAM, GUnixOutputStreamClass))
DECLARE FUNCTION g_unix_output_stream_new(BYVAL AS gint, BYVAL AS gboolean) AS GOutputStream PTR
DECLARE FUNCTION g_unix_output_stream_get_close_fd(BYVAL AS GUnixOutputStream PTR) AS gboolean
DECLARE FUNCTION g_unix_output_stream_get_fd(BYVAL AS GUnixOutputStream PTR) AS gint
DECLARE SUB g_unix_output_stream_set_close_fd(BYVAL AS GUnixOutputStream PTR, BYVAL AS gboolean)
TYPE _GUnixOutputStreamClass
  AS GOutputStreamClass parent_class
  _g_reserved1 AS SUB CDECL()
  _g_reserved2 AS SUB CDECL()
  _g_reserved3 AS SUB CDECL()
  _g_reserved4 AS SUB CDECL()
  _g_reserved5 AS SUB CDECL()
END TYPE
TYPE _GUnixSocketAddress
  AS GSocketAddress parent_instance
  AS GUnixSocketAddressPrivate PTR priv
END TYPE
DECLARE FUNCTION g_unix_socket_address_get_type() AS GType
#DEFINE G_TYPE_UNIX_SOCKET_ADDRESS (g_unix_socket_address_get_type())
#DEFINE G_UNIX_SOCKET_ADDRESS(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), G_TYPE_UNIX_SOCKET_ADDRESS, GUnixSocketAddress))
#DEFINE G_UNIX_SOCKET_ADDRESS_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), G_TYPE_UNIX_SOCKET_ADDRESS, GUnixSocketAddressClass))
#DEFINE G_IS_UNIX_SOCKET_ADDRESS(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), G_TYPE_UNIX_SOCKET_ADDRESS))
#DEFINE G_IS_CLASS_UNIX_SOCKET_ADDRESS(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), G_TYPE_UNIX_SOCKET_ADDRESS))
#DEFINE G_UNIX_SOCKET_ADDRESS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), G_TYPE_UNIX_SOCKET_ADDRESS, GUnixSocketAddressClass))
DECLARE FUNCTION g_unix_socket_address_new(BYVAL AS const gchar PTR) AS GSocketAddress PTR
DECLARE FUNCTION g_unix_socket_address_new_abstract(BYVAL AS const gchar PTR, BYVAL AS gint) AS GSocketAddress PTR
DECLARE FUNCTION g_unix_socket_address_new_with_type(BYVAL AS const gchar PTR, BYVAL AS gint, BYVAL AS GUnixSocketAddressType) AS GSocketAddress PTR
DECLARE FUNCTION g_unix_socket_address_abstract_names_supported() AS gboolean
DECLARE FUNCTION g_unix_socket_address_get_address_type(BYVAL AS GUnixSocketAddress PTR) AS GUnixSocketAddressType
DECLARE FUNCTION g_unix_socket_address_get_is_abstract(BYVAL AS GUnixSocketAddress PTR) AS gboolean
DECLARE FUNCTION g_unix_socket_address_get_path(BYVAL AS GUnixSocketAddress PTR) AS const gchar PTR
DECLARE FUNCTION g_unix_socket_address_get_path_len(BYVAL AS GUnixSocketAddress PTR) AS gsize
TYPE _GUnixSocketAddressClass
  AS GSocketAddressClass parent_class
END TYPE
TYPE _GVfs
  AS GObject parent_instance
END TYPE
DECLARE FUNCTION g_unix_socket_address_type_get_type() AS GType
#DEFINE G_TYPE_UNIX_SOCKET_ADDRESS_TYPE (g_unix_socket_address_type_get_type())
DECLARE FUNCTION g_vfs_get_type() AS GType
#DEFINE G_TYPE_VFS (g_vfs_get_type())
#DEFINE G_VFS(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), G_TYPE_VFS, GVfs))
#DEFINE G_VFS_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), G_TYPE_VFS, GVfsClass))
#DEFINE G_IS_VFS(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), G_TYPE_VFS))
#DEFINE G_IS_CLASS_VFS(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), G_TYPE_VFS))
#DEFINE G_VFS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), G_TYPE_VFS, GVfsClass))
DECLARE FUNCTION g_vfs_get_default() AS GVfs PTR
DECLARE FUNCTION g_vfs_get_local() AS GVfs PTR
DECLARE FUNCTION g_vfs_get_file_for_path(BYVAL AS GVfs PTR, BYVAL AS const gchar PTR) AS GFile PTR
DECLARE FUNCTION g_vfs_get_file_for_uri(BYVAL AS GVfs PTR, BYVAL AS const gchar PTR) AS GFile PTR
DECLARE FUNCTION g_vfs_get_supported_uri_schemes(BYVAL AS GVfs PTR) AS const gchar ptr const /'const gchar* const'/ PTR
DECLARE FUNCTION g_vfs_is_active(BYVAL AS GVfs PTR) AS gboolean
DECLARE FUNCTION g_vfs_parse_name(BYVAL AS GVfs PTR, BYVAL AS const gchar PTR) AS GFile PTR
DECLARE FUNCTION g_vfs_register_uri_scheme(BYVAL AS GVfs PTR, BYVAL AS const gchar PTR, BYVAL AS GVfsFileLookupFunc, BYVAL AS gpointer, BYVAL AS GDestroyNotify, BYVAL AS GVfsFileLookupFunc, BYVAL AS gpointer, BYVAL AS GDestroyNotify) AS gboolean
DECLARE FUNCTION g_vfs_unregister_uri_scheme(BYVAL AS GVfs PTR, BYVAL AS const gchar PTR) AS gboolean
TYPE _GVfsClass
  AS GObjectClass parent_class
  is_active AS FUNCTION CDECL(BYVAL AS GVfs PTR) AS gboolean
  get_file_for_path AS FUNCTION CDECL(BYVAL AS GVfs PTR, BYVAL AS const gchar PTR) AS GFile PTR
  get_file_for_uri AS FUNCTION CDECL(BYVAL AS GVfs PTR, BYVAL AS const gchar PTR) AS GFile PTR
  get_supported_uri_schemes AS FUNCTION CDECL(BYVAL AS GVfs PTR) AS const gchar ptr const /'const gchar* const'/ PTR
  parse_name AS FUNCTION CDECL(BYVAL AS GVfs PTR, BYVAL AS const gchar PTR) AS GFile PTR
  local_file_add_info AS SUB CDECL(BYVAL AS GVfs PTR, BYVAL AS const gchar PTR, BYVAL AS guint64, BYVAL AS GFileAttributeMatcher PTR, BYVAL AS GFileInfo PTR, BYVAL AS GCancellable PTR, BYVAL AS gpointer PTR, BYVAL AS GDestroyNotify PTR)
  add_writable_namespaces AS SUB CDECL(BYVAL AS GVfs PTR, BYVAL AS GFileAttributeInfoList PTR)
  local_file_set_attributes AS FUNCTION CDECL(BYVAL AS GVfs PTR, BYVAL AS const gchar PTR, BYVAL AS GFileInfo PTR, BYVAL AS GFileQueryInfoFlags, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS gboolean
  local_file_removed AS SUB CDECL(BYVAL AS GVfs PTR, BYVAL AS const gchar PTR)
  local_file_moved AS SUB CDECL(BYVAL AS GVfs PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR)
  deserialize_icon AS FUNCTION CDECL(BYVAL AS GVfs PTR, BYVAL AS GVariant PTR) AS GIcon PTR
  _g_reserved1 AS SUB CDECL()
  _g_reserved2 AS SUB CDECL()
  _g_reserved3 AS SUB CDECL()
  _g_reserved4 AS SUB CDECL()
  _g_reserved5 AS SUB CDECL()
  _g_reserved6 AS SUB CDECL()
END TYPE
DECLARE FUNCTION g_volume_get_type() AS GType
#DEFINE G_TYPE_VOLUME (g_volume_get_type())
#DEFINE G_VOLUME(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), G_TYPE_VOLUME, GVolume))
#DEFINE G_VOLUME_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), G_TYPE_VOLUME, GVolumeIface))
#DEFINE G_IS_VOLUME(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), G_TYPE_VOLUME))
#DEFINE G_VOLUME_GET_IFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE((obj), G_TYPE_VOLUME, GVolumeIface))
DECLARE FUNCTION g_volume_can_eject(BYVAL AS GVolume PTR) AS gboolean
DECLARE FUNCTION g_volume_can_mount(BYVAL AS GVolume PTR) AS gboolean
DECLARE SUB g_volume_eject(BYVAL AS GVolume PTR, BYVAL AS GMountUnmountFlags, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
DECLARE FUNCTION g_volume_eject_finish(BYVAL AS GVolume PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE SUB g_volume_eject_with_operation(BYVAL AS GVolume PTR, BYVAL AS GMountUnmountFlags, BYVAL AS GMountOperation PTR, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
DECLARE FUNCTION g_volume_eject_with_operation_finish(BYVAL AS GVolume PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION g_volume_enumerate_identifiers(BYVAL AS GVolume PTR) AS zstring /'gchar'/ PTR PTR
DECLARE FUNCTION g_volume_get_activation_root(BYVAL AS GVolume PTR) AS GFile PTR
DECLARE FUNCTION g_volume_get_drive(BYVAL AS GVolume PTR) AS GDrive PTR
DECLARE FUNCTION g_volume_get_icon(BYVAL AS GVolume PTR) AS GIcon PTR
DECLARE FUNCTION g_volume_get_identifier(BYVAL AS GVolume PTR, BYVAL AS const gchar PTR) AS zstring /'gchar'/ PTR
DECLARE FUNCTION g_volume_get_mount(BYVAL AS GVolume PTR) AS GMount PTR
DECLARE FUNCTION g_volume_get_name(BYVAL AS GVolume PTR) AS zstring /'gchar'/ PTR
DECLARE FUNCTION g_volume_get_sort_key(BYVAL AS GVolume PTR) AS const gchar PTR
DECLARE FUNCTION g_volume_get_symbolic_icon(BYVAL AS GVolume PTR) AS GIcon PTR
DECLARE FUNCTION g_volume_get_uuid(BYVAL AS GVolume PTR) AS zstring /'gchar'/ PTR
DECLARE SUB g_volume_mount(BYVAL AS GVolume PTR, BYVAL AS GMountMountFlags, BYVAL AS GMountOperation PTR, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
DECLARE FUNCTION g_volume_mount_finish(BYVAL AS GVolume PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION g_volume_should_automount(BYVAL AS GVolume PTR) AS gboolean
TYPE _GVolumeIface
  AS GTypeInterface g_iface
  changed AS SUB CDECL(BYVAL AS GVolume PTR)
  removed AS SUB CDECL(BYVAL AS GVolume PTR)
  get_name AS FUNCTION CDECL(BYVAL AS GVolume PTR) AS zstring /'gchar'/ PTR
  get_icon AS FUNCTION CDECL(BYVAL AS GVolume PTR) AS GIcon PTR
  get_uuid AS FUNCTION CDECL(BYVAL AS GVolume PTR) AS zstring /'gchar'/ PTR
  get_drive AS FUNCTION CDECL(BYVAL AS GVolume PTR) AS GDrive PTR
  get_mount AS FUNCTION CDECL(BYVAL AS GVolume PTR) AS GMount PTR
  can_mount AS FUNCTION CDECL(BYVAL AS GVolume PTR) AS gboolean
  can_eject AS FUNCTION CDECL(BYVAL AS GVolume PTR) AS gboolean
  mount_fn AS SUB CDECL(BYVAL AS GVolume PTR, BYVAL AS GMountMountFlags, BYVAL AS GMountOperation PTR, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
  mount_finish AS FUNCTION CDECL(BYVAL AS GVolume PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS gboolean
  eject AS SUB CDECL(BYVAL AS GVolume PTR, BYVAL AS GMountUnmountFlags, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
  eject_finish AS FUNCTION CDECL(BYVAL AS GVolume PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS gboolean
  get_identifier AS FUNCTION CDECL(BYVAL AS GVolume PTR, BYVAL AS const gchar PTR) AS zstring /'gchar'/ PTR
  enumerate_identifiers AS FUNCTION CDECL(BYVAL AS GVolume PTR) AS zstring /'gchar'/ PTR PTR
  should_automount AS FUNCTION CDECL(BYVAL AS GVolume PTR) AS gboolean
  get_activation_root AS FUNCTION CDECL(BYVAL AS GVolume PTR) AS GFile PTR
  eject_with_operation AS SUB CDECL(BYVAL AS GVolume PTR, BYVAL AS GMountUnmountFlags, BYVAL AS GMountOperation PTR, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
  eject_with_operation_finish AS FUNCTION CDECL(BYVAL AS GVolume PTR, BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS gboolean
  get_sort_key AS FUNCTION CDECL(BYVAL AS GVolume PTR) AS const gchar PTR
  get_symbolic_icon AS FUNCTION CDECL(BYVAL AS GVolume PTR) AS GIcon PTR
END TYPE
DECLARE FUNCTION g_zlib_compressor_get_type() AS GType
#DEFINE G_TYPE_ZLIB_COMPRESSOR (g_zlib_compressor_get_type())
#DEFINE G_ZLIB_COMPRESSOR(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), G_TYPE_ZLIB_COMPRESSOR, GZlibCompressor))
#DEFINE G_ZLIB_COMPRESSOR_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), G_TYPE_ZLIB_COMPRESSOR, GZlibCompressorClass))
#DEFINE G_IS_ZLIB_COMPRESSOR(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), G_TYPE_ZLIB_COMPRESSOR))
#DEFINE G_IS_CLASS_ZLIB_COMPRESSOR(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), G_TYPE_ZLIB_COMPRESSOR))
#DEFINE G_ZLIB_COMPRESSOR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), G_TYPE_ZLIB_COMPRESSOR, GZlibCompressorClass))
DECLARE FUNCTION g_zlib_compressor_new(BYVAL AS GZlibCompressorFormat, BYVAL AS gint /'int'/) AS GZlibCompressor PTR
DECLARE FUNCTION g_zlib_compressor_get_file_info(BYVAL AS GZlibCompressor PTR) AS GFileInfo PTR
DECLARE SUB g_zlib_compressor_set_file_info(BYVAL AS GZlibCompressor PTR, BYVAL AS GFileInfo PTR)
TYPE _GZlibCompressorClass
  AS GObjectClass parent_class
END TYPE
DECLARE FUNCTION g_zlib_compressor_format_get_type() AS GType
#DEFINE G_TYPE_ZLIB_COMPRESSOR_FORMAT (g_zlib_compressor_format_get_type())
DECLARE FUNCTION g_zlib_decompressor_get_type() AS GType
#DEFINE G_TYPE_ZLIB_DECOMPRESSOR (g_zlib_decompressor_get_type())
#DEFINE G_ZLIB_DECOMPRESSOR(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), G_TYPE_ZLIB_DECOMPRESSOR, GZlibDecompressor))
#DEFINE G_ZLIB_DECOMPRESSOR_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), G_TYPE_ZLIB_DECOMPRESSOR, GZlibDecompressorClass))
#DEFINE G_IS_ZLIB_DECOMPRESSOR(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), G_TYPE_ZLIB_DECOMPRESSOR))
#DEFINE G_IS_CLASS_ZLIB_DECOMPRESSOR(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), G_TYPE_ZLIB_DECOMPRESSOR))
#DEFINE G_ZLIB_DECOMPRESSOR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), G_TYPE_ZLIB_DECOMPRESSOR, GZlibDecompressorClass))
DECLARE FUNCTION g_zlib_decompressor_new(BYVAL AS GZlibCompressorFormat) AS GZlibDecompressor PTR
DECLARE FUNCTION g_zlib_decompressor_get_file_info(BYVAL AS GZlibDecompressor PTR) AS GFileInfo PTR
TYPE _GZlibDecompressorClass
  AS GObjectClass parent_class
END TYPE
' P_4

DECLARE SUB g_bus_get(BYVAL AS GBusType, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
DECLARE FUNCTION g_bus_get_finish(BYVAL AS GAsyncResult PTR, BYVAL AS GError PTR PTR) AS GDBusConnection PTR
DECLARE FUNCTION g_bus_get_sync(BYVAL AS GBusType, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS GDBusConnection PTR
DECLARE FUNCTION g_bus_own_name(BYVAL AS GBusType, BYVAL AS const gchar PTR, BYVAL AS GBusNameOwnerFlags, BYVAL AS GBusAcquiredCallback, BYVAL AS GBusNameAcquiredCallback, BYVAL AS GBusNameLostCallback, BYVAL AS gpointer, BYVAL AS GDestroyNotify) AS guint
DECLARE FUNCTION g_bus_own_name_on_connection(BYVAL AS GDBusConnection PTR, BYVAL AS const gchar PTR, BYVAL AS GBusNameOwnerFlags, BYVAL AS GBusNameAcquiredCallback, BYVAL AS GBusNameLostCallback, BYVAL AS gpointer, BYVAL AS GDestroyNotify) AS guint
DECLARE FUNCTION g_bus_own_name_on_connection_with_closures(BYVAL AS GDBusConnection PTR, BYVAL AS const gchar PTR, BYVAL AS GBusNameOwnerFlags, BYVAL AS GClosure PTR, BYVAL AS GClosure PTR) AS guint
DECLARE FUNCTION g_bus_own_name_with_closures(BYVAL AS GBusType, BYVAL AS const gchar PTR, BYVAL AS GBusNameOwnerFlags, BYVAL AS GClosure PTR, BYVAL AS GClosure PTR, BYVAL AS GClosure PTR) AS guint
DECLARE SUB g_bus_unown_name(BYVAL AS guint)
DECLARE SUB g_bus_unwatch_name(BYVAL AS guint)
DECLARE FUNCTION g_bus_watch_name(BYVAL AS GBusType, BYVAL AS const gchar PTR, BYVAL AS GBusNameWatcherFlags, BYVAL AS GBusNameAppearedCallback, BYVAL AS GBusNameVanishedCallback, BYVAL AS gpointer, BYVAL AS GDestroyNotify) AS guint
DECLARE FUNCTION g_bus_watch_name_on_connection(BYVAL AS GDBusConnection PTR, BYVAL AS const gchar PTR, BYVAL AS GBusNameWatcherFlags, BYVAL AS GBusNameAppearedCallback, BYVAL AS GBusNameVanishedCallback, BYVAL AS gpointer, BYVAL AS GDestroyNotify) AS guint
DECLARE FUNCTION g_bus_watch_name_on_connection_with_closures(BYVAL AS GDBusConnection PTR, BYVAL AS const gchar PTR, BYVAL AS GBusNameWatcherFlags, BYVAL AS GClosure PTR, BYVAL AS GClosure PTR) AS guint
DECLARE FUNCTION g_bus_watch_name_with_closures(BYVAL AS GBusType, BYVAL AS const gchar PTR, BYVAL AS GBusNameWatcherFlags, BYVAL AS GClosure PTR, BYVAL AS GClosure PTR) AS guint
DECLARE FUNCTION g_content_type_can_be_executable(BYVAL AS const gchar PTR) AS gboolean
DECLARE FUNCTION g_content_type_equals(BYVAL AS const gchar PTR, BYVAL AS const gchar PTR) AS gboolean
DECLARE FUNCTION g_content_type_from_mime_type(BYVAL AS const gchar PTR) AS gchar PTR
DECLARE FUNCTION g_content_type_get_description(BYVAL AS const gchar PTR) AS gchar PTR
DECLARE FUNCTION g_content_type_get_generic_icon_name(BYVAL AS const gchar PTR) AS gchar PTR
DECLARE FUNCTION g_content_type_get_icon(BYVAL AS const gchar PTR) AS GIcon PTR
DECLARE FUNCTION g_content_type_get_mime_dirs() AS const gchar ptr const /'const gchar* const'/ PTR
DECLARE FUNCTION g_content_type_get_mime_type(BYVAL AS const gchar PTR) AS gchar PTR
DECLARE FUNCTION g_content_type_get_symbolic_icon(BYVAL AS const gchar PTR) AS GIcon PTR
DECLARE FUNCTION g_content_type_guess(BYVAL AS const gchar PTR, BYVAL AS const guchar PTR, BYVAL AS gsize, BYVAL AS gboolean PTR) AS gchar PTR
DECLARE FUNCTION g_content_type_guess_for_tree(BYVAL AS GFile PTR) AS gchar PTR PTR
DECLARE FUNCTION g_content_type_is_a(BYVAL AS const gchar PTR, BYVAL AS const gchar PTR) AS gboolean
DECLARE FUNCTION g_content_type_is_mime_type(BYVAL AS const gchar PTR, BYVAL AS const gchar PTR) AS gboolean
DECLARE FUNCTION g_content_type_is_unknown(BYVAL AS const gchar PTR) AS gboolean
DECLARE SUB g_content_type_set_mime_dirs(BYVAL AS const gchar ptr const /'const gchar* const'/ PTR)
DECLARE FUNCTION g_content_types_get_registered() AS GList PTR
DECLARE FUNCTION g_dbus_address_escape_value(BYVAL AS const gchar PTR) AS gchar PTR
DECLARE FUNCTION g_dbus_address_get_for_bus_sync(BYVAL AS GBusType, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS gchar PTR
DECLARE SUB g_dbus_address_get_stream(BYVAL AS const gchar PTR, BYVAL AS GCancellable PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer)
DECLARE FUNCTION g_dbus_address_get_stream_finish(BYVAL AS GAsyncResult PTR, BYVAL AS gchar PTR PTR, BYVAL AS GError PTR PTR) AS GIOStream PTR
DECLARE FUNCTION g_dbus_address_get_stream_sync(BYVAL AS const gchar PTR, BYVAL AS gchar PTR PTR, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS GIOStream PTR
DECLARE FUNCTION g_dbus_generate_guid() AS gchar PTR
DECLARE FUNCTION g_dbus_gvalue_to_gvariant(BYVAL AS const GValue PTR, BYVAL AS const GVariantType PTR) AS GVariant PTR
DECLARE SUB g_dbus_gvariant_to_gvalue(BYVAL AS GVariant PTR, BYVAL AS GValue PTR)
DECLARE FUNCTION g_dbus_is_address(BYVAL AS const gchar PTR) AS gboolean
DECLARE FUNCTION g_dbus_is_guid(BYVAL AS const gchar PTR) AS gboolean
DECLARE FUNCTION g_dbus_is_interface_name(BYVAL AS const gchar PTR) AS gboolean
DECLARE FUNCTION g_dbus_is_member_name(BYVAL AS const gchar PTR) AS gboolean
DECLARE FUNCTION g_dbus_is_name(BYVAL AS const gchar PTR) AS gboolean
DECLARE FUNCTION g_dbus_is_supported_address(BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION g_dbus_is_unique_name(BYVAL AS const gchar PTR) AS gboolean
DECLARE FUNCTION g_io_error_from_errno(BYVAL AS gint) AS GIOErrorEnum
DECLARE FUNCTION g_io_error_quark() AS GQuark
DECLARE FUNCTION g_io_modules_load_all_in_directory(BYVAL AS const gchar PTR) AS GList PTR
DECLARE FUNCTION g_io_modules_load_all_in_directory_with_scope(BYVAL AS const gchar PTR, BYVAL AS GIOModuleScope PTR) AS GList PTR
DECLARE SUB g_io_modules_scan_all_in_directory(BYVAL AS const gchar PTR)
DECLARE SUB g_io_modules_scan_all_in_directory_with_scope(BYVAL AS const gchar PTR, BYVAL AS GIOModuleScope PTR)
DECLARE SUB g_io_scheduler_cancel_all_jobs()
DECLARE SUB g_io_scheduler_push_job(BYVAL AS GIOSchedulerJobFunc, BYVAL AS gpointer, BYVAL AS GDestroyNotify, BYVAL AS gint, BYVAL AS GCancellable PTR)
DECLARE FUNCTION g_keyfile_settings_backend_new(BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR) AS GSettingsBackend PTR
DECLARE FUNCTION g_memory_settings_backend_new() AS GSettingsBackend PTR
DECLARE SUB g_networking_init()
DECLARE FUNCTION g_null_settings_backend_new() AS GSettingsBackend PTR
DECLARE FUNCTION g_pollable_source_new(BYVAL AS GObject PTR) AS GSource PTR
DECLARE FUNCTION g_pollable_source_new_full(BYVAL AS gpointer, BYVAL AS GSource PTR, BYVAL AS GCancellable PTR) AS GSource PTR
DECLARE FUNCTION g_pollable_stream_read(BYVAL AS GInputStream PTR, BYVAL AS any ptr /'void'/ PTR, BYVAL AS gsize, BYVAL AS gboolean, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS gssize
DECLARE FUNCTION g_pollable_stream_write(BYVAL AS GOutputStream PTR, BYVAL AS any ptr /'void'/ PTR, BYVAL AS gsize, BYVAL AS gboolean, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS gssize
DECLARE FUNCTION g_pollable_stream_write_all(BYVAL AS GOutputStream PTR, BYVAL AS any ptr /'void'/ PTR, BYVAL AS gsize, BYVAL AS gboolean, BYVAL AS gsize PTR, BYVAL AS GCancellable PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION g_resources_enumerate_children(BYVAL AS const gchar PTR, BYVAL AS GResourceLookupFlags, BYVAL AS GError PTR PTR) AS zstring /'gchar'/ PTR PTR
DECLARE FUNCTION g_resources_get_info(BYVAL AS const gchar PTR, BYVAL AS GResourceLookupFlags, BYVAL AS gsize PTR, BYVAL AS guint32 PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION g_resources_lookup_data(BYVAL AS const gchar PTR, BYVAL AS GResourceLookupFlags, BYVAL AS GError PTR PTR) AS GBytes PTR
DECLARE FUNCTION g_resources_open_stream(BYVAL AS const gchar PTR, BYVAL AS GResourceLookupFlags, BYVAL AS GError PTR PTR) AS GInputStream PTR
DECLARE SUB g_simple_async_report_error_in_idle(BYVAL AS GObject PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer, BYVAL AS GQuark, BYVAL AS gint, BYVAL AS const gchar PTR, ...)
DECLARE SUB g_simple_async_report_gerror_in_idle(BYVAL AS GObject PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer, BYVAL AS const GError PTR)
DECLARE SUB g_simple_async_report_take_gerror_in_idle(BYVAL AS GObject PTR, BYVAL AS GAsyncReadyCallback, BYVAL AS gpointer, BYVAL AS GError PTR)
DECLARE FUNCTION g_unix_is_mount_path_system_internal(BYVAL AS const gchar PTR) AS gboolean
DECLARE FUNCTION g_unix_is_system_device_path(BYVAL AS const gchar PTR) AS gboolean
DECLARE FUNCTION g_unix_is_system_fs_type(BYVAL AS const gchar PTR) AS gboolean
DECLARE FUNCTION g_unix_mount_at(BYVAL AS const gchar PTR, BYVAL AS guint64 PTR) AS GUnixMountEntry PTR
DECLARE FUNCTION g_unix_mount_compare(BYVAL AS GUnixMountEntry PTR, BYVAL AS GUnixMountEntry PTR) AS gint
DECLARE FUNCTION g_unix_mount_copy(BYVAL AS GUnixMountEntry PTR) AS GUnixMountEntry PTR
DECLARE FUNCTION g_unix_mount_for(BYVAL AS const gchar PTR, BYVAL AS guint64 PTR) AS GUnixMountEntry PTR
DECLARE SUB g_unix_mount_free(BYVAL AS GUnixMountEntry PTR)
DECLARE FUNCTION g_unix_mount_get_device_path(BYVAL AS GUnixMountEntry PTR) AS const gchar PTR
DECLARE FUNCTION g_unix_mount_get_fs_type(BYVAL AS GUnixMountEntry PTR) AS const gchar PTR
DECLARE FUNCTION g_unix_mount_get_mount_path(BYVAL AS GUnixMountEntry PTR) AS const gchar PTR
DECLARE FUNCTION g_unix_mount_get_options(BYVAL AS GUnixMountEntry PTR) AS const gchar PTR
DECLARE FUNCTION g_unix_mount_get_root_path(BYVAL AS GUnixMountEntry PTR) AS const gchar PTR
DECLARE FUNCTION g_unix_mount_guess_can_eject(BYVAL AS GUnixMountEntry PTR) AS gboolean
DECLARE FUNCTION g_unix_mount_guess_icon(BYVAL AS GUnixMountEntry PTR) AS GIcon PTR
DECLARE FUNCTION g_unix_mount_guess_name(BYVAL AS GUnixMountEntry PTR) AS zstring /'gchar'/ PTR
DECLARE FUNCTION g_unix_mount_guess_should_display(BYVAL AS GUnixMountEntry PTR) AS gboolean
DECLARE FUNCTION g_unix_mount_guess_symbolic_icon(BYVAL AS GUnixMountEntry PTR) AS GIcon PTR
DECLARE FUNCTION g_unix_mount_is_readonly(BYVAL AS GUnixMountEntry PTR) AS gboolean
DECLARE FUNCTION g_unix_mount_is_system_internal(BYVAL AS GUnixMountEntry PTR) AS gboolean
DECLARE FUNCTION g_unix_mount_points_changed_since(BYVAL AS guint64) AS gboolean
DECLARE FUNCTION g_unix_mount_points_get(BYVAL AS guint64 PTR) AS GList PTR
DECLARE FUNCTION g_unix_mounts_changed_since(BYVAL AS guint64) AS gboolean
DECLARE FUNCTION g_unix_mounts_get(BYVAL AS guint64 PTR) AS GList PTR
END EXTERN

