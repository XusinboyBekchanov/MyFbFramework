'            FreeBasic header file, auto-generated by
'                       ### girtobac ###
' LGPLv2.1 (C) 2013-2022 by Thomas{ doT ]Freiherr[ At ]gmx[ DoT }net
' Auto-translated from file /usr/share/gir-1.0/GstBase-1.0.gir
#INCLUDE ONCE "_GirToBac-0.0.bi"
' Repository version 1.2
#INCLUDE ONCE "Gst-1.0.bi"
TYPE AS _GstAdapter GstAdapter
TYPE AS _GstAdapterClass GstAdapterClass
TYPE AS _GstAggregator GstAggregator
TYPE AS _GstAggregatorClass GstAggregatorClass
TYPE AS _GstAggregatorPad GstAggregatorPad
TYPE AS _GstAggregatorPadClass GstAggregatorPadClass
TYPE AS _GstAggregatorPadPrivate GstAggregatorPadPrivate
TYPE AS _GstAggregatorPrivate GstAggregatorPrivate
#DEFINE GST_BASE_PARSE_FLAG_DRAINING 2
#DEFINE GST_BASE_PARSE_FLAG_LOST_SYNC 1
#DEFINE GST_BASE_TRANSFORM_SINK_NAME @!"sink"
#DEFINE GST_BASE_TRANSFORM_SRC_NAME @!"src"
TYPE AS _GstBaseParse GstBaseParse
TYPE AS _GstBaseParseClass GstBaseParseClass
TYPE AS _GstBaseParseFrame GstBaseParseFrame
TYPE AS LONG GstBaseParseFrameFlags
ENUM
  GST_BASE_PARSE_FRAME_FLAG_NONE = 0
  GST_BASE_PARSE_FRAME_FLAG_NEW_FRAME = 1
  GST_BASE_PARSE_FRAME_FLAG_NO_FRAME = 2
  GST_BASE_PARSE_FRAME_FLAG_CLIP = 4
  GST_BASE_PARSE_FRAME_FLAG_DROP = 8
  GST_BASE_PARSE_FRAME_FLAG_QUEUE = 16
END ENUM
TYPE AS _GstBaseParsePrivate GstBaseParsePrivate
TYPE AS _GstBaseSink GstBaseSink
TYPE AS _GstBaseSinkClass GstBaseSinkClass
TYPE AS _GstBaseSinkPrivate GstBaseSinkPrivate
TYPE AS _GstBaseSrc GstBaseSrc
TYPE AS _GstBaseSrcClass GstBaseSrcClass
TYPE AS LONG GstBaseSrcFlags
ENUM
  GST_BASE_SRC_FLAG_STARTING = 16384
  GST_BASE_SRC_FLAG_STARTED = 32768
  GST_BASE_SRC_FLAG_LAST = 1048576
END ENUM
TYPE AS _GstBaseSrcPrivate GstBaseSrcPrivate
TYPE AS _GstBaseTransform GstBaseTransform
TYPE AS _GstBaseTransformClass GstBaseTransformClass
TYPE AS _GstBaseTransformPrivate GstBaseTransformPrivate
TYPE AS _GstBitReader GstBitReader
TYPE AS _GstBitWriter GstBitWriter
TYPE AS _GstByteReader GstByteReader
TYPE AS _GstByteWriter GstByteWriter
TYPE AS _GstCollectData GstCollectData
TYPE AS _GstCollectDataPrivate GstCollectDataPrivate
TYPE AS _GstCollectPads GstCollectPads
TYPE AS _GstCollectPadsClass GstCollectPadsClass
TYPE AS _GstCollectPadsPrivate GstCollectPadsPrivate
TYPE AS LONG GstCollectPadsStateFlags
ENUM
  GST_COLLECT_PADS_STATE_EOS = 1
  GST_COLLECT_PADS_STATE_FLUSHING = 2
  GST_COLLECT_PADS_STATE_NEW_SEGMENT = 4
  GST_COLLECT_PADS_STATE_WAITING = 8
  GST_COLLECT_PADS_STATE_LOCKED = 16
END ENUM
TYPE AS _GstDataQueue GstDataQueue
TYPE AS _GstDataQueueClass GstDataQueueClass
TYPE AS _GstDataQueueItem GstDataQueueItem
TYPE AS _GstDataQueuePrivate GstDataQueuePrivate
TYPE AS _GstDataQueueSize GstDataQueueSize
TYPE AS _GstFlowCombiner GstFlowCombiner
TYPE AS _GstPushSrc GstPushSrc
TYPE AS _GstPushSrcClass GstPushSrcClass
TYPE AS _GstQueueArray GstQueueArray
EXTERN "C" LIB "gstbase-1.0"
' P_X

' P_3

DECLARE FUNCTION gst_adapter_get_type() AS GType
#DEFINE GSTBASE_TYPE_ADAPTER (gst_adapter_get_type())
#DEFINE GSTBASE_ADAPTER(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GSTBASE_TYPE_ADAPTER, GstAdapter))
#DEFINE GSTBASE_ADAPTER_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GSTBASE_TYPE_ADAPTER, GstBaseAdapterClass))
#DEFINE GSTBASE_IS_ADAPTER(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GSTBASE_TYPE_ADAPTER))
#DEFINE GSTBASE_IS_CLASS_ADAPTER(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GSTBASE_TYPE_ADAPTER))
#DEFINE GSTBASE_ADAPTER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GSTBASE_TYPE_ADAPTER, GstBaseAdapterClass))
DECLARE FUNCTION gst_adapter_new() AS GstAdapter PTR
DECLARE FUNCTION gst_adapter_available(BYVAL AS GstAdapter PTR) AS gsize
DECLARE FUNCTION gst_adapter_available_fast(BYVAL AS GstAdapter PTR) AS gsize
DECLARE SUB gst_adapter_clear(BYVAL AS GstAdapter PTR)
DECLARE SUB gst_adapter_copy(BYVAL AS GstAdapter PTR, BYVAL AS gpointer, BYVAL AS gsize, BYVAL AS gsize)
DECLARE FUNCTION gst_adapter_copy_bytes(BYVAL AS GstAdapter PTR, BYVAL AS gsize, BYVAL AS gsize) AS GBytes PTR
DECLARE FUNCTION gst_adapter_distance_from_discont(BYVAL AS GstAdapter PTR) AS guint64
DECLARE FUNCTION gst_adapter_dts_at_discont(BYVAL AS GstAdapter PTR) AS GstClockTime
DECLARE SUB gst_adapter_flush(BYVAL AS GstAdapter PTR, BYVAL AS gsize)
DECLARE FUNCTION gst_adapter_get_buffer(BYVAL AS GstAdapter PTR, BYVAL AS gsize) AS GstBuffer PTR
DECLARE FUNCTION gst_adapter_get_buffer_fast(BYVAL AS GstAdapter PTR, BYVAL AS gsize) AS GstBuffer PTR
DECLARE FUNCTION gst_adapter_get_buffer_list(BYVAL AS GstAdapter PTR, BYVAL AS gsize) AS GstBufferList PTR
DECLARE FUNCTION gst_adapter_get_list(BYVAL AS GstAdapter PTR, BYVAL AS gsize) AS GList PTR
DECLARE FUNCTION gst_adapter_map(BYVAL AS GstAdapter PTR, BYVAL AS gsize) AS gconstpointer
DECLARE FUNCTION gst_adapter_masked_scan_uint32(BYVAL AS GstAdapter PTR, BYVAL AS guint32, BYVAL AS guint32, BYVAL AS gsize, BYVAL AS gsize) AS gssize
DECLARE FUNCTION gst_adapter_masked_scan_uint32_peek(BYVAL AS GstAdapter PTR, BYVAL AS guint32, BYVAL AS guint32, BYVAL AS gsize, BYVAL AS gsize, BYVAL AS guint32 PTR) AS gssize
DECLARE FUNCTION gst_adapter_offset_at_discont(BYVAL AS GstAdapter PTR) AS guint64
DECLARE FUNCTION gst_adapter_prev_dts(BYVAL AS GstAdapter PTR, BYVAL AS guint64 PTR) AS GstClockTime
DECLARE FUNCTION gst_adapter_prev_dts_at_offset(BYVAL AS GstAdapter PTR, BYVAL AS gsize, BYVAL AS guint64 PTR) AS GstClockTime
DECLARE FUNCTION gst_adapter_prev_offset(BYVAL AS GstAdapter PTR, BYVAL AS guint64 PTR) AS guint64
DECLARE FUNCTION gst_adapter_prev_pts(BYVAL AS GstAdapter PTR, BYVAL AS guint64 PTR) AS GstClockTime
DECLARE FUNCTION gst_adapter_prev_pts_at_offset(BYVAL AS GstAdapter PTR, BYVAL AS gsize, BYVAL AS guint64 PTR) AS GstClockTime
DECLARE FUNCTION gst_adapter_pts_at_discont(BYVAL AS GstAdapter PTR) AS GstClockTime
DECLARE SUB gst_adapter_push(BYVAL AS GstAdapter PTR, BYVAL AS GstBuffer PTR)
DECLARE FUNCTION gst_adapter_take(BYVAL AS GstAdapter PTR, BYVAL AS gsize) AS gpointer
DECLARE FUNCTION gst_adapter_take_buffer(BYVAL AS GstAdapter PTR, BYVAL AS gsize) AS GstBuffer PTR
DECLARE FUNCTION gst_adapter_take_buffer_fast(BYVAL AS GstAdapter PTR, BYVAL AS gsize) AS GstBuffer PTR
DECLARE FUNCTION gst_adapter_take_buffer_list(BYVAL AS GstAdapter PTR, BYVAL AS gsize) AS GstBufferList PTR
DECLARE FUNCTION gst_adapter_take_list(BYVAL AS GstAdapter PTR, BYVAL AS gsize) AS GList PTR
DECLARE SUB gst_adapter_unmap(BYVAL AS GstAdapter PTR)
TYPE _GstAggregator
  AS GstElement parent
  AS GstPad PTR srcpad
  AS GstAggregatorPrivate PTR priv
  AS gpointer _gst_reserved(19)
END TYPE
DECLARE FUNCTION gst_aggregator_get_type() AS GType
#DEFINE GSTBASE_TYPE_AGGREGATOR (gst_aggregator_get_type())
#DEFINE GSTBASE_AGGREGATOR(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GSTBASE_TYPE_AGGREGATOR, GstAggregator))
#DEFINE GSTBASE_AGGREGATOR_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GSTBASE_TYPE_AGGREGATOR, GstBaseAggregatorClass))
#DEFINE GSTBASE_IS_AGGREGATOR(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GSTBASE_TYPE_AGGREGATOR))
#DEFINE GSTBASE_IS_CLASS_AGGREGATOR(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GSTBASE_TYPE_AGGREGATOR))
#DEFINE GSTBASE_AGGREGATOR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GSTBASE_TYPE_AGGREGATOR, GstBaseAggregatorClass))
DECLARE FUNCTION gst_aggregator_finish_buffer(BYVAL AS GstAggregator PTR, BYVAL AS GstBuffer PTR) AS GstFlowReturn
DECLARE SUB gst_aggregator_get_allocator(BYVAL AS GstAggregator PTR, BYVAL AS GstAllocator PTR PTR, BYVAL AS GstAllocationParams PTR)
DECLARE FUNCTION gst_aggregator_get_buffer_pool(BYVAL AS GstAggregator PTR) AS GstBufferPool PTR
DECLARE FUNCTION gst_aggregator_get_latency(BYVAL AS GstAggregator PTR) AS GstClockTime
DECLARE SUB gst_aggregator_set_latency(BYVAL AS GstAggregator PTR, BYVAL AS GstClockTime, BYVAL AS GstClockTime)
DECLARE SUB gst_aggregator_set_src_caps(BYVAL AS GstAggregator PTR, BYVAL AS GstCaps PTR)
DECLARE FUNCTION gst_aggregator_simple_get_next_time(BYVAL AS GstAggregator PTR) AS GstClockTime
TYPE _GstAggregatorClass
  AS GstElementClass parent_class
  flush AS FUNCTION CDECL(BYVAL AS GstAggregator PTR) AS GstFlowReturn
  clip AS FUNCTION CDECL(BYVAL AS GstAggregator PTR, BYVAL AS GstAggregatorPad PTR, BYVAL AS GstBuffer PTR) AS GstBuffer PTR
  finish_buffer AS FUNCTION CDECL(BYVAL AS GstAggregator PTR, BYVAL AS GstBuffer PTR) AS GstFlowReturn
  sink_event AS FUNCTION CDECL(BYVAL AS GstAggregator PTR, BYVAL AS GstAggregatorPad PTR, BYVAL AS GstEvent PTR) AS gboolean
  sink_query AS FUNCTION CDECL(BYVAL AS GstAggregator PTR, BYVAL AS GstAggregatorPad PTR, BYVAL AS GstQuery PTR) AS gboolean
  src_event AS FUNCTION CDECL(BYVAL AS GstAggregator PTR, BYVAL AS GstEvent PTR) AS gboolean
  src_query AS FUNCTION CDECL(BYVAL AS GstAggregator PTR, BYVAL AS GstQuery PTR) AS gboolean
  src_activate AS FUNCTION CDECL(BYVAL AS GstAggregator PTR, BYVAL AS GstPadMode, BYVAL AS gboolean) AS gboolean
  aggregate AS FUNCTION CDECL(BYVAL AS GstAggregator PTR, BYVAL AS gboolean) AS GstFlowReturn
  stop AS FUNCTION CDECL(BYVAL AS GstAggregator PTR) AS gboolean
  start AS FUNCTION CDECL(BYVAL AS GstAggregator PTR) AS gboolean
  get_next_time AS FUNCTION CDECL(BYVAL AS GstAggregator PTR) AS GstClockTime
  create_new_pad AS FUNCTION CDECL(BYVAL AS GstAggregator PTR, BYVAL AS GstPadTemplate PTR, BYVAL AS const gchar PTR, BYVAL AS const GstCaps PTR) AS GstAggregatorPad PTR
  update_src_caps AS FUNCTION CDECL(BYVAL AS GstAggregator PTR, BYVAL AS GstCaps PTR, BYVAL AS GstCaps PTR PTR) AS GstFlowReturn
  fixate_src_caps AS FUNCTION CDECL(BYVAL AS GstAggregator PTR, BYVAL AS GstCaps PTR) AS GstCaps PTR
  negotiated_src_caps AS FUNCTION CDECL(BYVAL AS GstAggregator PTR, BYVAL AS GstCaps PTR) AS gboolean
  decide_allocation AS FUNCTION CDECL(BYVAL AS GstAggregator PTR, BYVAL AS GstQuery PTR) AS gboolean
  propose_allocation AS FUNCTION CDECL(BYVAL AS GstAggregator PTR, BYVAL AS GstAggregatorPad PTR, BYVAL AS GstQuery PTR, BYVAL AS GstQuery PTR) AS gboolean
  AS gpointer _gst_reserved(19)
END TYPE
TYPE _GstAggregatorPad
  AS GstPad parent
  AS GstSegment segment
  AS GstAggregatorPadPrivate PTR priv
  AS gpointer _gst_reserved(3)
END TYPE
DECLARE FUNCTION gst_aggregator_pad_get_type() AS GType
#DEFINE GSTBASE_TYPE_AGGREGATOR_PAD (gst_aggregator_pad_get_type())
#DEFINE GSTBASE_AGGREGATOR_PAD(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GSTBASE_TYPE_AGGREGATOR_PAD, GstAggregatorPad))
#DEFINE GSTBASE_AGGREGATOR_PAD_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GSTBASE_TYPE_AGGREGATOR_PAD, GstBaseAggregatorPadClass))
#DEFINE GSTBASE_IS_AGGREGATOR_PAD(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GSTBASE_TYPE_AGGREGATOR_PAD))
#DEFINE GSTBASE_IS_CLASS_AGGREGATOR_PAD(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GSTBASE_TYPE_AGGREGATOR_PAD))
#DEFINE GSTBASE_AGGREGATOR_PAD_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GSTBASE_TYPE_AGGREGATOR_PAD, GstBaseAggregatorPadClass))
DECLARE FUNCTION gst_aggregator_pad_drop_buffer(BYVAL AS GstAggregatorPad PTR) AS gboolean
DECLARE FUNCTION gst_aggregator_pad_has_buffer(BYVAL AS GstAggregatorPad PTR) AS gboolean
DECLARE FUNCTION gst_aggregator_pad_is_eos(BYVAL AS GstAggregatorPad PTR) AS gboolean
DECLARE FUNCTION gst_aggregator_pad_peek_buffer(BYVAL AS GstAggregatorPad PTR) AS GstBuffer PTR
DECLARE FUNCTION gst_aggregator_pad_pop_buffer(BYVAL AS GstAggregatorPad PTR) AS GstBuffer PTR
TYPE _GstAggregatorPadClass
  AS GstPadClass parent_class
  flush AS FUNCTION CDECL(BYVAL AS GstAggregatorPad PTR, BYVAL AS GstAggregator PTR) AS GstFlowReturn
  skip_buffer AS FUNCTION CDECL(BYVAL AS GstAggregatorPad PTR, BYVAL AS GstAggregator PTR, BYVAL AS GstBuffer PTR) AS gboolean
  AS gpointer _gst_reserved(19)
END TYPE
TYPE _GstBaseParse
  AS GstElement element
  AS GstPad PTR sinkpad
  AS GstPad PTR srcpad
  AS guint flags
  AS GstSegment segment
  AS gpointer _gst_reserved(19)
  AS GstBaseParsePrivate PTR priv
END TYPE
DECLARE FUNCTION gst_base_parse_get_type() AS GType
#DEFINE GSTBASE_TYPE_BASE_PARSE (gst_base_parse_get_type())
#DEFINE GSTBASE_BASE_PARSE(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GSTBASE_TYPE_BASE_PARSE, GstBaseParse))
#DEFINE GSTBASE_BASE_PARSE_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GSTBASE_TYPE_BASE_PARSE, GstBaseBaseParseClass))
#DEFINE GSTBASE_IS_BASE_PARSE(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GSTBASE_TYPE_BASE_PARSE))
#DEFINE GSTBASE_IS_CLASS_BASE_PARSE(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GSTBASE_TYPE_BASE_PARSE))
#DEFINE GSTBASE_BASE_PARSE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GSTBASE_TYPE_BASE_PARSE, GstBaseBaseParseClass))
DECLARE FUNCTION gst_base_parse_add_index_entry(BYVAL AS GstBaseParse PTR, BYVAL AS guint64, BYVAL AS GstClockTime, BYVAL AS gboolean, BYVAL AS gboolean) AS gboolean
DECLARE FUNCTION gst_base_parse_convert_default(BYVAL AS GstBaseParse PTR, BYVAL AS GstFormat, BYVAL AS gint64, BYVAL AS GstFormat, BYVAL AS gint64 PTR) AS gboolean
DECLARE SUB gst_base_parse_drain(BYVAL AS GstBaseParse PTR)
DECLARE FUNCTION gst_base_parse_finish_frame(BYVAL AS GstBaseParse PTR, BYVAL AS GstBaseParseFrame PTR, BYVAL AS gint) AS GstFlowReturn
DECLARE SUB gst_base_parse_merge_tags(BYVAL AS GstBaseParse PTR, BYVAL AS GstTagList PTR, BYVAL AS GstTagMergeMode)
DECLARE FUNCTION gst_base_parse_push_frame(BYVAL AS GstBaseParse PTR, BYVAL AS GstBaseParseFrame PTR) AS GstFlowReturn
DECLARE SUB gst_base_parse_set_average_bitrate(BYVAL AS GstBaseParse PTR, BYVAL AS guint)
DECLARE SUB gst_base_parse_set_duration(BYVAL AS GstBaseParse PTR, BYVAL AS GstFormat, BYVAL AS gint64, BYVAL AS gint)
DECLARE SUB gst_base_parse_set_frame_rate(BYVAL AS GstBaseParse PTR, BYVAL AS guint, BYVAL AS guint, BYVAL AS guint, BYVAL AS guint)
DECLARE SUB gst_base_parse_set_has_timing_info(BYVAL AS GstBaseParse PTR, BYVAL AS gboolean)
DECLARE SUB gst_base_parse_set_infer_ts(BYVAL AS GstBaseParse PTR, BYVAL AS gboolean)
DECLARE SUB gst_base_parse_set_latency(BYVAL AS GstBaseParse PTR, BYVAL AS GstClockTime, BYVAL AS GstClockTime)
DECLARE SUB gst_base_parse_set_min_frame_size(BYVAL AS GstBaseParse PTR, BYVAL AS guint)
DECLARE SUB gst_base_parse_set_passthrough(BYVAL AS GstBaseParse PTR, BYVAL AS gboolean)
DECLARE SUB gst_base_parse_set_pts_interpolation(BYVAL AS GstBaseParse PTR, BYVAL AS gboolean)
DECLARE SUB gst_base_parse_set_syncable(BYVAL AS GstBaseParse PTR, BYVAL AS gboolean)
DECLARE SUB gst_base_parse_set_ts_at_offset(BYVAL AS GstBaseParse PTR, BYVAL AS gsize)
TYPE _GstBaseParseClass
  AS GstElementClass parent_class
  start AS FUNCTION CDECL(BYVAL AS GstBaseParse PTR) AS gboolean
  stop AS FUNCTION CDECL(BYVAL AS GstBaseParse PTR) AS gboolean
  set_sink_caps AS FUNCTION CDECL(BYVAL AS GstBaseParse PTR, BYVAL AS GstCaps PTR) AS gboolean
  handle_frame AS FUNCTION CDECL(BYVAL AS GstBaseParse PTR, BYVAL AS GstBaseParseFrame PTR, BYVAL AS gint PTR) AS GstFlowReturn
  pre_push_frame AS FUNCTION CDECL(BYVAL AS GstBaseParse PTR, BYVAL AS GstBaseParseFrame PTR) AS GstFlowReturn
  convert AS FUNCTION CDECL(BYVAL AS GstBaseParse PTR, BYVAL AS GstFormat, BYVAL AS gint64, BYVAL AS GstFormat, BYVAL AS gint64 PTR) AS gboolean
  sink_event AS FUNCTION CDECL(BYVAL AS GstBaseParse PTR, BYVAL AS GstEvent PTR) AS gboolean
  src_event AS FUNCTION CDECL(BYVAL AS GstBaseParse PTR, BYVAL AS GstEvent PTR) AS gboolean
  get_sink_caps AS FUNCTION CDECL(BYVAL AS GstBaseParse PTR, BYVAL AS GstCaps PTR) AS GstCaps PTR
  detect AS FUNCTION CDECL(BYVAL AS GstBaseParse PTR, BYVAL AS GstBuffer PTR) AS GstFlowReturn
  sink_query AS FUNCTION CDECL(BYVAL AS GstBaseParse PTR, BYVAL AS GstQuery PTR) AS gboolean
  src_query AS FUNCTION CDECL(BYVAL AS GstBaseParse PTR, BYVAL AS GstQuery PTR) AS gboolean
  AS gpointer _gst_reserved(17)
END TYPE
TYPE _GstBaseParseFrame
  AS GstBuffer PTR buffer
  AS GstBuffer PTR out_buffer
  AS guint flags
  AS guint64 offset
  AS gint overhead
  AS gint size
  AS guint _gst_reserved_i(1)
  AS gpointer _gst_reserved_p(1)
  AS guint _private_flags
END TYPE
DECLARE FUNCTION gst_base_parse_frame_new(BYVAL AS GstBuffer PTR, BYVAL AS GstBaseParseFrameFlags, BYVAL AS gint) AS GstBaseParseFrame PTR
DECLARE FUNCTION gst_base_parse_frame_copy(BYVAL AS GstBaseParseFrame PTR) AS GstBaseParseFrame PTR
DECLARE SUB gst_base_parse_frame_free(BYVAL AS GstBaseParseFrame PTR)
DECLARE SUB gst_base_parse_frame_init(BYVAL AS GstBaseParseFrame PTR)
TYPE _GstBaseSink
  AS GstElement element
  AS GstPad PTR sinkpad
  AS GstPadMode pad_mode
  AS guint64 offset
  AS gboolean can_activate_pull
  AS gboolean can_activate_push
  AS GMutex preroll_lock
  AS GCond preroll_cond
  AS gboolean eos
  AS gboolean need_preroll
  AS gboolean have_preroll
  AS gboolean playing_async
  AS gboolean have_newsegment
  AS GstSegment segment
  AS GstClockID clock_id
  AS gboolean sync
  AS gboolean flushing
  AS gboolean running
  AS gint64 max_lateness
  AS GstBaseSinkPrivate PTR priv
  AS gpointer _gst_reserved(19)
END TYPE
DECLARE FUNCTION gst_base_sink_get_type() AS GType
#DEFINE GSTBASE_TYPE_BASE_SINK (gst_base_sink_get_type())
#DEFINE GSTBASE_BASE_SINK(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GSTBASE_TYPE_BASE_SINK, GstBaseSink))
#DEFINE GSTBASE_BASE_SINK_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GSTBASE_TYPE_BASE_SINK, GstBaseBaseSinkClass))
#DEFINE GSTBASE_IS_BASE_SINK(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GSTBASE_TYPE_BASE_SINK))
#DEFINE GSTBASE_IS_CLASS_BASE_SINK(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GSTBASE_TYPE_BASE_SINK))
#DEFINE GSTBASE_BASE_SINK_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GSTBASE_TYPE_BASE_SINK, GstBaseBaseSinkClass))
DECLARE FUNCTION gst_base_sink_do_preroll(BYVAL AS GstBaseSink PTR, BYVAL AS GstMiniObject PTR) AS GstFlowReturn
DECLARE FUNCTION gst_base_sink_get_blocksize(BYVAL AS GstBaseSink PTR) AS guint
DECLARE FUNCTION gst_base_sink_get_drop_out_of_segment(BYVAL AS GstBaseSink PTR) AS gboolean
DECLARE FUNCTION gst_base_sink_get_last_sample(BYVAL AS GstBaseSink PTR) AS GstSample PTR
DECLARE FUNCTION gst_base_sink_get_latency(BYVAL AS GstBaseSink PTR) AS GstClockTime
DECLARE FUNCTION gst_base_sink_get_max_bitrate(BYVAL AS GstBaseSink PTR) AS guint64
DECLARE FUNCTION gst_base_sink_get_max_lateness(BYVAL AS GstBaseSink PTR) AS gint64
DECLARE FUNCTION gst_base_sink_get_processing_deadline(BYVAL AS GstBaseSink PTR) AS GstClockTime
DECLARE FUNCTION gst_base_sink_get_render_delay(BYVAL AS GstBaseSink PTR) AS GstClockTime
DECLARE FUNCTION gst_base_sink_get_sync(BYVAL AS GstBaseSink PTR) AS gboolean
DECLARE FUNCTION gst_base_sink_get_throttle_time(BYVAL AS GstBaseSink PTR) AS guint64
DECLARE FUNCTION gst_base_sink_get_ts_offset(BYVAL AS GstBaseSink PTR) AS GstClockTimeDiff
DECLARE FUNCTION gst_base_sink_is_async_enabled(BYVAL AS GstBaseSink PTR) AS gboolean
DECLARE FUNCTION gst_base_sink_is_last_sample_enabled(BYVAL AS GstBaseSink PTR) AS gboolean
DECLARE FUNCTION gst_base_sink_is_qos_enabled(BYVAL AS GstBaseSink PTR) AS gboolean
DECLARE FUNCTION gst_base_sink_query_latency(BYVAL AS GstBaseSink PTR, BYVAL AS gboolean PTR, BYVAL AS gboolean PTR, BYVAL AS GstClockTime PTR, BYVAL AS GstClockTime PTR) AS gboolean
DECLARE SUB gst_base_sink_set_async_enabled(BYVAL AS GstBaseSink PTR, BYVAL AS gboolean)
DECLARE SUB gst_base_sink_set_blocksize(BYVAL AS GstBaseSink PTR, BYVAL AS guint)
DECLARE SUB gst_base_sink_set_drop_out_of_segment(BYVAL AS GstBaseSink PTR, BYVAL AS gboolean)
DECLARE SUB gst_base_sink_set_last_sample_enabled(BYVAL AS GstBaseSink PTR, BYVAL AS gboolean)
DECLARE SUB gst_base_sink_set_max_bitrate(BYVAL AS GstBaseSink PTR, BYVAL AS guint64)
DECLARE SUB gst_base_sink_set_max_lateness(BYVAL AS GstBaseSink PTR, BYVAL AS gint64)
DECLARE SUB gst_base_sink_set_processing_deadline(BYVAL AS GstBaseSink PTR, BYVAL AS GstClockTime)
DECLARE SUB gst_base_sink_set_qos_enabled(BYVAL AS GstBaseSink PTR, BYVAL AS gboolean)
DECLARE SUB gst_base_sink_set_render_delay(BYVAL AS GstBaseSink PTR, BYVAL AS GstClockTime)
DECLARE SUB gst_base_sink_set_sync(BYVAL AS GstBaseSink PTR, BYVAL AS gboolean)
DECLARE SUB gst_base_sink_set_throttle_time(BYVAL AS GstBaseSink PTR, BYVAL AS guint64)
DECLARE SUB gst_base_sink_set_ts_offset(BYVAL AS GstBaseSink PTR, BYVAL AS GstClockTimeDiff)
DECLARE FUNCTION gst_base_sink_wait(BYVAL AS GstBaseSink PTR, BYVAL AS GstClockTime, BYVAL AS GstClockTimeDiff PTR) AS GstFlowReturn
DECLARE FUNCTION gst_base_sink_wait_clock(BYVAL AS GstBaseSink PTR, BYVAL AS GstClockTime, BYVAL AS GstClockTimeDiff PTR) AS GstClockReturn
DECLARE FUNCTION gst_base_sink_wait_preroll(BYVAL AS GstBaseSink PTR) AS GstFlowReturn
TYPE _GstBaseSinkClass
  AS GstElementClass parent_class
  get_caps AS FUNCTION CDECL(BYVAL AS GstBaseSink PTR, BYVAL AS GstCaps PTR) AS GstCaps PTR
  set_caps AS FUNCTION CDECL(BYVAL AS GstBaseSink PTR, BYVAL AS GstCaps PTR) AS gboolean
  fixate AS FUNCTION CDECL(BYVAL AS GstBaseSink PTR, BYVAL AS GstCaps PTR) AS GstCaps PTR
  activate_pull AS FUNCTION CDECL(BYVAL AS GstBaseSink PTR, BYVAL AS gboolean) AS gboolean
  get_times AS SUB CDECL(BYVAL AS GstBaseSink PTR, BYVAL AS GstBuffer PTR, BYVAL AS GstClockTime PTR, BYVAL AS GstClockTime PTR)
  propose_allocation AS FUNCTION CDECL(BYVAL AS GstBaseSink PTR, BYVAL AS GstQuery PTR) AS gboolean
  start AS FUNCTION CDECL(BYVAL AS GstBaseSink PTR) AS gboolean
  stop AS FUNCTION CDECL(BYVAL AS GstBaseSink PTR) AS gboolean
  unlock AS FUNCTION CDECL(BYVAL AS GstBaseSink PTR) AS gboolean
  unlock_stop AS FUNCTION CDECL(BYVAL AS GstBaseSink PTR) AS gboolean
  query AS FUNCTION CDECL(BYVAL AS GstBaseSink PTR, BYVAL AS GstQuery PTR) AS gboolean
  event AS FUNCTION CDECL(BYVAL AS GstBaseSink PTR, BYVAL AS GstEvent PTR) AS gboolean
  wait_event AS FUNCTION CDECL(BYVAL AS GstBaseSink PTR, BYVAL AS GstEvent PTR) AS GstFlowReturn
  prepare AS FUNCTION CDECL(BYVAL AS GstBaseSink PTR, BYVAL AS GstBuffer PTR) AS GstFlowReturn
  prepare_list AS FUNCTION CDECL(BYVAL AS GstBaseSink PTR, BYVAL AS GstBufferList PTR) AS GstFlowReturn
  preroll AS FUNCTION CDECL(BYVAL AS GstBaseSink PTR, BYVAL AS GstBuffer PTR) AS GstFlowReturn
  render AS FUNCTION CDECL(BYVAL AS GstBaseSink PTR, BYVAL AS GstBuffer PTR) AS GstFlowReturn
  render_list AS FUNCTION CDECL(BYVAL AS GstBaseSink PTR, BYVAL AS GstBufferList PTR) AS GstFlowReturn
  AS gpointer _gst_reserved(19)
END TYPE
TYPE _GstBaseSrc
  AS GstElement element
  AS GstPad PTR srcpad
  AS GMutex live_lock
  AS GCond live_cond
  AS gboolean is_live
  AS gboolean live_running
  AS guint blocksize
  AS gboolean can_activate_push
  AS gboolean random_access
  AS GstClockID clock_id
  AS GstSegment segment
  AS gboolean need_newsegment
  AS gint num_buffers
  AS gint num_buffers_left
  AS gboolean typefind
  AS gboolean running
  AS GstEvent PTR pending_seek
  AS GstBaseSrcPrivate PTR priv
  AS gpointer _gst_reserved(19)
END TYPE
DECLARE FUNCTION gst_base_src_get_type() AS GType
#DEFINE GSTBASE_TYPE_BASE_SRC (gst_base_src_get_type())
#DEFINE GSTBASE_BASE_SRC(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GSTBASE_TYPE_BASE_SRC, GstBaseSrc))
#DEFINE GSTBASE_BASE_SRC_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GSTBASE_TYPE_BASE_SRC, GstBaseBaseSrcClass))
#DEFINE GSTBASE_IS_BASE_SRC(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GSTBASE_TYPE_BASE_SRC))
#DEFINE GSTBASE_IS_CLASS_BASE_SRC(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GSTBASE_TYPE_BASE_SRC))
#DEFINE GSTBASE_BASE_SRC_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GSTBASE_TYPE_BASE_SRC, GstBaseBaseSrcClass))
DECLARE SUB gst_base_src_get_allocator(BYVAL AS GstBaseSrc PTR, BYVAL AS GstAllocator PTR PTR, BYVAL AS GstAllocationParams PTR)
DECLARE FUNCTION gst_base_src_get_blocksize(BYVAL AS GstBaseSrc PTR) AS guint
DECLARE FUNCTION gst_base_src_get_buffer_pool(BYVAL AS GstBaseSrc PTR) AS GstBufferPool PTR
DECLARE FUNCTION gst_base_src_get_do_timestamp(BYVAL AS GstBaseSrc PTR) AS gboolean
DECLARE FUNCTION gst_base_src_is_async(BYVAL AS GstBaseSrc PTR) AS gboolean
DECLARE FUNCTION gst_base_src_is_live(BYVAL AS GstBaseSrc PTR) AS gboolean
DECLARE FUNCTION gst_base_src_new_seamless_segment(BYVAL AS GstBaseSrc PTR, BYVAL AS gint64, BYVAL AS gint64, BYVAL AS gint64) AS gboolean
DECLARE FUNCTION gst_base_src_query_latency(BYVAL AS GstBaseSrc PTR, BYVAL AS gboolean PTR, BYVAL AS GstClockTime PTR, BYVAL AS GstClockTime PTR) AS gboolean
DECLARE SUB gst_base_src_set_async(BYVAL AS GstBaseSrc PTR, BYVAL AS gboolean)
DECLARE SUB gst_base_src_set_automatic_eos(BYVAL AS GstBaseSrc PTR, BYVAL AS gboolean)
DECLARE SUB gst_base_src_set_blocksize(BYVAL AS GstBaseSrc PTR, BYVAL AS guint)
DECLARE FUNCTION gst_base_src_set_caps(BYVAL AS GstBaseSrc PTR, BYVAL AS GstCaps PTR) AS gboolean
DECLARE SUB gst_base_src_set_do_timestamp(BYVAL AS GstBaseSrc PTR, BYVAL AS gboolean)
DECLARE SUB gst_base_src_set_dynamic_size(BYVAL AS GstBaseSrc PTR, BYVAL AS gboolean)
DECLARE SUB gst_base_src_set_format(BYVAL AS GstBaseSrc PTR, BYVAL AS GstFormat)
DECLARE SUB gst_base_src_set_live(BYVAL AS GstBaseSrc PTR, BYVAL AS gboolean)
DECLARE SUB gst_base_src_start_complete(BYVAL AS GstBaseSrc PTR, BYVAL AS GstFlowReturn)
DECLARE FUNCTION gst_base_src_start_wait(BYVAL AS GstBaseSrc PTR) AS GstFlowReturn
DECLARE SUB gst_base_src_submit_buffer_list(BYVAL AS GstBaseSrc PTR, BYVAL AS GstBufferList PTR)
DECLARE FUNCTION gst_base_src_wait_playing(BYVAL AS GstBaseSrc PTR) AS GstFlowReturn
TYPE _GstBaseSrcClass
  AS GstElementClass parent_class
  get_caps AS FUNCTION CDECL(BYVAL AS GstBaseSrc PTR, BYVAL AS GstCaps PTR) AS GstCaps PTR
  negotiate AS FUNCTION CDECL(BYVAL AS GstBaseSrc PTR) AS gboolean
  fixate AS FUNCTION CDECL(BYVAL AS GstBaseSrc PTR, BYVAL AS GstCaps PTR) AS GstCaps PTR
  set_caps AS FUNCTION CDECL(BYVAL AS GstBaseSrc PTR, BYVAL AS GstCaps PTR) AS gboolean
  decide_allocation AS FUNCTION CDECL(BYVAL AS GstBaseSrc PTR, BYVAL AS GstQuery PTR) AS gboolean
  start AS FUNCTION CDECL(BYVAL AS GstBaseSrc PTR) AS gboolean
  stop AS FUNCTION CDECL(BYVAL AS GstBaseSrc PTR) AS gboolean
  get_times AS SUB CDECL(BYVAL AS GstBaseSrc PTR, BYVAL AS GstBuffer PTR, BYVAL AS GstClockTime PTR, BYVAL AS GstClockTime PTR)
  get_size AS FUNCTION CDECL(BYVAL AS GstBaseSrc PTR, BYVAL AS guint64 PTR) AS gboolean
  is_seekable AS FUNCTION CDECL(BYVAL AS GstBaseSrc PTR) AS gboolean
  prepare_seek_segment AS FUNCTION CDECL(BYVAL AS GstBaseSrc PTR, BYVAL AS GstEvent PTR, BYVAL AS GstSegment PTR) AS gboolean
  do_seek AS FUNCTION CDECL(BYVAL AS GstBaseSrc PTR, BYVAL AS GstSegment PTR) AS gboolean
  unlock AS FUNCTION CDECL(BYVAL AS GstBaseSrc PTR) AS gboolean
  unlock_stop AS FUNCTION CDECL(BYVAL AS GstBaseSrc PTR) AS gboolean
  query AS FUNCTION CDECL(BYVAL AS GstBaseSrc PTR, BYVAL AS GstQuery PTR) AS gboolean
  event AS FUNCTION CDECL(BYVAL AS GstBaseSrc PTR, BYVAL AS GstEvent PTR) AS gboolean
  create AS FUNCTION CDECL(BYVAL AS GstBaseSrc PTR, BYVAL AS guint64, BYVAL AS guint, BYVAL AS GstBuffer PTR PTR) AS GstFlowReturn
  alloc AS FUNCTION CDECL(BYVAL AS GstBaseSrc PTR, BYVAL AS guint64, BYVAL AS guint, BYVAL AS GstBuffer PTR PTR) AS GstFlowReturn
  fill AS FUNCTION CDECL(BYVAL AS GstBaseSrc PTR, BYVAL AS guint64, BYVAL AS guint, BYVAL AS GstBuffer PTR) AS GstFlowReturn
  AS gpointer _gst_reserved(19)
END TYPE
TYPE _GstBaseTransform
  AS GstElement element
  AS GstPad PTR sinkpad
  AS GstPad PTR srcpad
  AS gboolean have_segment
  AS GstSegment segment
  AS GstBuffer PTR queued_buf
  AS GstBaseTransformPrivate PTR priv
  AS gpointer _gst_reserved(18)
END TYPE
DECLARE FUNCTION gst_base_transform_get_type() AS GType
#DEFINE GSTBASE_TYPE_BASE_TRANSFORM (gst_base_transform_get_type())
#DEFINE GSTBASE_BASE_TRANSFORM(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GSTBASE_TYPE_BASE_TRANSFORM, GstBaseTransform))
#DEFINE GSTBASE_BASE_TRANSFORM_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GSTBASE_TYPE_BASE_TRANSFORM, GstBaseBaseTransformClass))
#DEFINE GSTBASE_IS_BASE_TRANSFORM(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GSTBASE_TYPE_BASE_TRANSFORM))
#DEFINE GSTBASE_IS_CLASS_BASE_TRANSFORM(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GSTBASE_TYPE_BASE_TRANSFORM))
#DEFINE GSTBASE_BASE_TRANSFORM_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GSTBASE_TYPE_BASE_TRANSFORM, GstBaseBaseTransformClass))
DECLARE SUB gst_base_transform_get_allocator(BYVAL AS GstBaseTransform PTR, BYVAL AS GstAllocator PTR PTR, BYVAL AS GstAllocationParams PTR)
DECLARE FUNCTION gst_base_transform_get_buffer_pool(BYVAL AS GstBaseTransform PTR) AS GstBufferPool PTR
DECLARE FUNCTION gst_base_transform_is_in_place(BYVAL AS GstBaseTransform PTR) AS gboolean
DECLARE FUNCTION gst_base_transform_is_passthrough(BYVAL AS GstBaseTransform PTR) AS gboolean
DECLARE FUNCTION gst_base_transform_is_qos_enabled(BYVAL AS GstBaseTransform PTR) AS gboolean
DECLARE SUB gst_base_transform_reconfigure_sink(BYVAL AS GstBaseTransform PTR)
DECLARE SUB gst_base_transform_reconfigure_src(BYVAL AS GstBaseTransform PTR)
DECLARE SUB gst_base_transform_set_gap_aware(BYVAL AS GstBaseTransform PTR, BYVAL AS gboolean)
DECLARE SUB gst_base_transform_set_in_place(BYVAL AS GstBaseTransform PTR, BYVAL AS gboolean)
DECLARE SUB gst_base_transform_set_passthrough(BYVAL AS GstBaseTransform PTR, BYVAL AS gboolean)
DECLARE SUB gst_base_transform_set_prefer_passthrough(BYVAL AS GstBaseTransform PTR, BYVAL AS gboolean)
DECLARE SUB gst_base_transform_set_qos_enabled(BYVAL AS GstBaseTransform PTR, BYVAL AS gboolean)
DECLARE SUB gst_base_transform_update_qos(BYVAL AS GstBaseTransform PTR, BYVAL AS gdouble, BYVAL AS GstClockTimeDiff, BYVAL AS GstClockTime)
DECLARE FUNCTION gst_base_transform_update_src_caps(BYVAL AS GstBaseTransform PTR, BYVAL AS GstCaps PTR) AS gboolean
TYPE _GstBaseTransformClass
  AS GstElementClass parent_class
  AS gboolean passthrough_on_same_caps
  AS gboolean transform_ip_on_passthrough
  transform_caps AS FUNCTION CDECL(BYVAL AS GstBaseTransform PTR, BYVAL AS GstPadDirection, BYVAL AS GstCaps PTR, BYVAL AS GstCaps PTR) AS GstCaps PTR
  fixate_caps AS FUNCTION CDECL(BYVAL AS GstBaseTransform PTR, BYVAL AS GstPadDirection, BYVAL AS GstCaps PTR, BYVAL AS GstCaps PTR) AS GstCaps PTR
  accept_caps AS FUNCTION CDECL(BYVAL AS GstBaseTransform PTR, BYVAL AS GstPadDirection, BYVAL AS GstCaps PTR) AS gboolean
  set_caps AS FUNCTION CDECL(BYVAL AS GstBaseTransform PTR, BYVAL AS GstCaps PTR, BYVAL AS GstCaps PTR) AS gboolean
  query AS FUNCTION CDECL(BYVAL AS GstBaseTransform PTR, BYVAL AS GstPadDirection, BYVAL AS GstQuery PTR) AS gboolean
  decide_allocation AS FUNCTION CDECL(BYVAL AS GstBaseTransform PTR, BYVAL AS GstQuery PTR) AS gboolean
  filter_meta AS FUNCTION CDECL(BYVAL AS GstBaseTransform PTR, BYVAL AS GstQuery PTR, BYVAL AS GType, BYVAL AS const GstStructure PTR) AS gboolean
  propose_allocation AS FUNCTION CDECL(BYVAL AS GstBaseTransform PTR, BYVAL AS GstQuery PTR, BYVAL AS GstQuery PTR) AS gboolean
  transform_size AS FUNCTION CDECL(BYVAL AS GstBaseTransform PTR, BYVAL AS GstPadDirection, BYVAL AS GstCaps PTR, BYVAL AS gsize, BYVAL AS GstCaps PTR, BYVAL AS gsize PTR) AS gboolean
  get_unit_size AS FUNCTION CDECL(BYVAL AS GstBaseTransform PTR, BYVAL AS GstCaps PTR, BYVAL AS gsize PTR) AS gboolean
  start AS FUNCTION CDECL(BYVAL AS GstBaseTransform PTR) AS gboolean
  stop AS FUNCTION CDECL(BYVAL AS GstBaseTransform PTR) AS gboolean
  sink_event AS FUNCTION CDECL(BYVAL AS GstBaseTransform PTR, BYVAL AS GstEvent PTR) AS gboolean
  src_event AS FUNCTION CDECL(BYVAL AS GstBaseTransform PTR, BYVAL AS GstEvent PTR) AS gboolean
  prepare_output_buffer AS FUNCTION CDECL(BYVAL AS GstBaseTransform PTR, BYVAL AS GstBuffer PTR, BYVAL AS GstBuffer PTR PTR) AS GstFlowReturn
  copy_metadata AS FUNCTION CDECL(BYVAL AS GstBaseTransform PTR, BYVAL AS GstBuffer PTR, BYVAL AS GstBuffer PTR) AS gboolean
  transform_meta AS FUNCTION CDECL(BYVAL AS GstBaseTransform PTR, BYVAL AS GstBuffer PTR, BYVAL AS GstMeta PTR, BYVAL AS GstBuffer PTR) AS gboolean
  before_transform AS SUB CDECL(BYVAL AS GstBaseTransform PTR, BYVAL AS GstBuffer PTR)
  transform AS FUNCTION CDECL(BYVAL AS GstBaseTransform PTR, BYVAL AS GstBuffer PTR, BYVAL AS GstBuffer PTR) AS GstFlowReturn
  transform_ip AS FUNCTION CDECL(BYVAL AS GstBaseTransform PTR, BYVAL AS GstBuffer PTR) AS GstFlowReturn
  submit_input_buffer AS FUNCTION CDECL(BYVAL AS GstBaseTransform PTR, BYVAL AS gboolean, BYVAL AS GstBuffer PTR) AS GstFlowReturn
  generate_output AS FUNCTION CDECL(BYVAL AS GstBaseTransform PTR, BYVAL AS GstBuffer PTR PTR) AS GstFlowReturn
  AS gpointer _gst_reserved(17)
END TYPE
TYPE _GstBitReader
  AS guint8 data(0)
  AS guint size
  AS guint byte
  AS guint bit
  AS gpointer _gst_reserved(3)
END TYPE
DECLARE SUB gst_bit_reader_free(BYVAL AS GstBitReader PTR)
DECLARE FUNCTION gst_bit_reader_get_bits_uint16(BYVAL AS GstBitReader PTR, BYVAL AS guint16 PTR, BYVAL AS guint) AS gboolean
DECLARE FUNCTION gst_bit_reader_get_bits_uint32(BYVAL AS GstBitReader PTR, BYVAL AS guint32 PTR, BYVAL AS guint) AS gboolean
DECLARE FUNCTION gst_bit_reader_get_bits_uint64(BYVAL AS GstBitReader PTR, BYVAL AS guint64 PTR, BYVAL AS guint) AS gboolean
DECLARE FUNCTION gst_bit_reader_get_bits_uint8(BYVAL AS GstBitReader PTR, BYVAL AS guint8 PTR, BYVAL AS guint) AS gboolean
DECLARE FUNCTION gst_bit_reader_get_pos(BYVAL AS const GstBitReader PTR) AS guint
DECLARE FUNCTION gst_bit_reader_get_remaining(BYVAL AS const GstBitReader PTR) AS guint
DECLARE FUNCTION gst_bit_reader_get_size(BYVAL AS const GstBitReader PTR) AS guint
DECLARE SUB gst_bit_reader_init(BYVAL AS GstBitReader PTR, BYVAL AS const guint8 PTR, BYVAL AS guint)
DECLARE FUNCTION gst_bit_reader_peek_bits_uint16(BYVAL AS const GstBitReader PTR, BYVAL AS guint16 PTR, BYVAL AS guint) AS gboolean
DECLARE FUNCTION gst_bit_reader_peek_bits_uint32(BYVAL AS const GstBitReader PTR, BYVAL AS guint32 PTR, BYVAL AS guint) AS gboolean
DECLARE FUNCTION gst_bit_reader_peek_bits_uint64(BYVAL AS const GstBitReader PTR, BYVAL AS guint64 PTR, BYVAL AS guint) AS gboolean
DECLARE FUNCTION gst_bit_reader_peek_bits_uint8(BYVAL AS const GstBitReader PTR, BYVAL AS guint8 PTR, BYVAL AS guint) AS gboolean
DECLARE FUNCTION gst_bit_reader_set_pos(BYVAL AS GstBitReader PTR, BYVAL AS guint) AS gboolean
DECLARE FUNCTION gst_bit_reader_skip(BYVAL AS GstBitReader PTR, BYVAL AS guint) AS gboolean
DECLARE FUNCTION gst_bit_reader_skip_to_byte(BYVAL AS GstBitReader PTR) AS gboolean
DECLARE FUNCTION gst_bit_reader_new(BYVAL AS const guint8 PTR, BYVAL AS guint) AS GstBitReader PTR
TYPE _GstBitWriter
  AS guint8 PTR data
  AS guint bit_size
  AS guint bit_capacity
  AS gboolean auto_grow
  AS gboolean owned
  AS gpointer _gst_reserved(3)
END TYPE
DECLARE FUNCTION gst_bit_writer_align_bytes(BYVAL AS GstBitWriter PTR, BYVAL AS guint8) AS gboolean
DECLARE SUB gst_bit_writer_free(BYVAL AS GstBitWriter PTR)
DECLARE FUNCTION gst_bit_writer_free_and_get_buffer(BYVAL AS GstBitWriter PTR) AS GstBuffer PTR
DECLARE FUNCTION gst_bit_writer_free_and_get_data(BYVAL AS GstBitWriter PTR) AS guint8 PTR
DECLARE FUNCTION gst_bit_writer_get_data(BYVAL AS const GstBitWriter PTR) AS guint8 PTR
DECLARE FUNCTION gst_bit_writer_get_remaining(BYVAL AS const GstBitWriter PTR) AS guint
DECLARE FUNCTION gst_bit_writer_get_size(BYVAL AS const GstBitWriter PTR) AS guint
DECLARE SUB gst_bit_writer_init(BYVAL AS GstBitWriter PTR)
DECLARE SUB gst_bit_writer_init_with_data(BYVAL AS GstBitWriter PTR, BYVAL AS guint8 PTR, BYVAL AS guint, BYVAL AS gboolean)
DECLARE SUB gst_bit_writer_init_with_size(BYVAL AS GstBitWriter PTR, BYVAL AS guint32, BYVAL AS gboolean)
DECLARE FUNCTION gst_bit_writer_put_bits_uint16(BYVAL AS GstBitWriter PTR, BYVAL AS guint16, BYVAL AS guint) AS gboolean
DECLARE FUNCTION gst_bit_writer_put_bits_uint32(BYVAL AS GstBitWriter PTR, BYVAL AS guint32, BYVAL AS guint) AS gboolean
DECLARE FUNCTION gst_bit_writer_put_bits_uint64(BYVAL AS GstBitWriter PTR, BYVAL AS guint64, BYVAL AS guint) AS gboolean
DECLARE FUNCTION gst_bit_writer_put_bits_uint8(BYVAL AS GstBitWriter PTR, BYVAL AS guint8, BYVAL AS guint) AS gboolean
DECLARE FUNCTION gst_bit_writer_put_bytes(BYVAL AS GstBitWriter PTR, BYVAL AS const guint8 PTR, BYVAL AS guint) AS gboolean
DECLARE SUB gst_bit_writer_reset(BYVAL AS GstBitWriter PTR)
DECLARE FUNCTION gst_bit_writer_reset_and_get_buffer(BYVAL AS GstBitWriter PTR) AS GstBuffer PTR
DECLARE FUNCTION gst_bit_writer_reset_and_get_data(BYVAL AS GstBitWriter PTR) AS guint8 PTR
DECLARE FUNCTION gst_bit_writer_set_pos(BYVAL AS GstBitWriter PTR, BYVAL AS guint) AS gboolean
DECLARE FUNCTION gst_bit_writer_new() AS GstBitWriter PTR
DECLARE FUNCTION gst_bit_writer_new_with_data(BYVAL AS guint8 PTR, BYVAL AS guint, BYVAL AS gboolean) AS GstBitWriter PTR
DECLARE FUNCTION gst_bit_writer_new_with_size(BYVAL AS guint32, BYVAL AS gboolean) AS GstBitWriter PTR
TYPE _GstByteReader
  AS guint8 data(0)
  AS guint size
  AS guint byte
  AS gpointer _gst_reserved(3)
END TYPE
DECLARE FUNCTION gst_byte_reader_dup_data(BYVAL AS GstByteReader PTR, BYVAL AS guint, BYVAL AS guint8 PTR PTR) AS gboolean
DECLARE FUNCTION gst_byte_reader_dup_string_utf16(BYVAL AS GstByteReader PTR, BYVAL AS guint16 PTR PTR) AS gboolean
DECLARE FUNCTION gst_byte_reader_dup_string_utf32(BYVAL AS GstByteReader PTR, BYVAL AS guint32 PTR PTR) AS gboolean
DECLARE FUNCTION gst_byte_reader_dup_string_utf8(BYVAL AS GstByteReader PTR, BYVAL AS gchar PTR PTR) AS gboolean
DECLARE SUB gst_byte_reader_free(BYVAL AS GstByteReader PTR)
DECLARE FUNCTION gst_byte_reader_get_data(BYVAL AS GstByteReader PTR, BYVAL AS guint, BYVAL AS const guint8 PTR PTR) AS gboolean
DECLARE FUNCTION gst_byte_reader_get_float32_be(BYVAL AS GstByteReader PTR, BYVAL AS gfloat PTR) AS gboolean
DECLARE FUNCTION gst_byte_reader_get_float32_le(BYVAL AS GstByteReader PTR, BYVAL AS gfloat PTR) AS gboolean
DECLARE FUNCTION gst_byte_reader_get_float64_be(BYVAL AS GstByteReader PTR, BYVAL AS gdouble PTR) AS gboolean
DECLARE FUNCTION gst_byte_reader_get_float64_le(BYVAL AS GstByteReader PTR, BYVAL AS gdouble PTR) AS gboolean
DECLARE FUNCTION gst_byte_reader_get_int16_be(BYVAL AS GstByteReader PTR, BYVAL AS gint16 PTR) AS gboolean
DECLARE FUNCTION gst_byte_reader_get_int16_le(BYVAL AS GstByteReader PTR, BYVAL AS gint16 PTR) AS gboolean
DECLARE FUNCTION gst_byte_reader_get_int24_be(BYVAL AS GstByteReader PTR, BYVAL AS gint32 PTR) AS gboolean
DECLARE FUNCTION gst_byte_reader_get_int24_le(BYVAL AS GstByteReader PTR, BYVAL AS gint32 PTR) AS gboolean
DECLARE FUNCTION gst_byte_reader_get_int32_be(BYVAL AS GstByteReader PTR, BYVAL AS gint32 PTR) AS gboolean
DECLARE FUNCTION gst_byte_reader_get_int32_le(BYVAL AS GstByteReader PTR, BYVAL AS gint32 PTR) AS gboolean
DECLARE FUNCTION gst_byte_reader_get_int64_be(BYVAL AS GstByteReader PTR, BYVAL AS gint64 PTR) AS gboolean
DECLARE FUNCTION gst_byte_reader_get_int64_le(BYVAL AS GstByteReader PTR, BYVAL AS gint64 PTR) AS gboolean
DECLARE FUNCTION gst_byte_reader_get_int8(BYVAL AS GstByteReader PTR, BYVAL AS gint8 PTR) AS gboolean
DECLARE FUNCTION gst_byte_reader_get_pos(BYVAL AS const GstByteReader PTR) AS guint
DECLARE FUNCTION gst_byte_reader_get_remaining(BYVAL AS const GstByteReader PTR) AS guint
DECLARE FUNCTION gst_byte_reader_get_size(BYVAL AS const GstByteReader PTR) AS guint
DECLARE FUNCTION gst_byte_reader_get_string_utf8(BYVAL AS GstByteReader PTR, BYVAL AS const gchar PTR PTR) AS gboolean
DECLARE FUNCTION gst_byte_reader_get_sub_reader(BYVAL AS GstByteReader PTR, BYVAL AS GstByteReader PTR, BYVAL AS guint) AS gboolean
DECLARE FUNCTION gst_byte_reader_get_uint16_be(BYVAL AS GstByteReader PTR, BYVAL AS guint16 PTR) AS gboolean
DECLARE FUNCTION gst_byte_reader_get_uint16_le(BYVAL AS GstByteReader PTR, BYVAL AS guint16 PTR) AS gboolean
DECLARE FUNCTION gst_byte_reader_get_uint24_be(BYVAL AS GstByteReader PTR, BYVAL AS guint32 PTR) AS gboolean
DECLARE FUNCTION gst_byte_reader_get_uint24_le(BYVAL AS GstByteReader PTR, BYVAL AS guint32 PTR) AS gboolean
DECLARE FUNCTION gst_byte_reader_get_uint32_be(BYVAL AS GstByteReader PTR, BYVAL AS guint32 PTR) AS gboolean
DECLARE FUNCTION gst_byte_reader_get_uint32_le(BYVAL AS GstByteReader PTR, BYVAL AS guint32 PTR) AS gboolean
DECLARE FUNCTION gst_byte_reader_get_uint64_be(BYVAL AS GstByteReader PTR, BYVAL AS guint64 PTR) AS gboolean
DECLARE FUNCTION gst_byte_reader_get_uint64_le(BYVAL AS GstByteReader PTR, BYVAL AS guint64 PTR) AS gboolean
DECLARE FUNCTION gst_byte_reader_get_uint8(BYVAL AS GstByteReader PTR, BYVAL AS guint8 PTR) AS gboolean
DECLARE SUB gst_byte_reader_init(BYVAL AS GstByteReader PTR, BYVAL AS const guint8 PTR, BYVAL AS guint)
DECLARE FUNCTION gst_byte_reader_masked_scan_uint32(BYVAL AS const GstByteReader PTR, BYVAL AS guint32, BYVAL AS guint32, BYVAL AS guint, BYVAL AS guint) AS guint
DECLARE FUNCTION gst_byte_reader_masked_scan_uint32_peek(BYVAL AS const GstByteReader PTR, BYVAL AS guint32, BYVAL AS guint32, BYVAL AS guint, BYVAL AS guint, BYVAL AS guint32 PTR) AS guint
DECLARE FUNCTION gst_byte_reader_peek_data(BYVAL AS const GstByteReader PTR, BYVAL AS guint, BYVAL AS const guint8 PTR PTR) AS gboolean
DECLARE FUNCTION gst_byte_reader_peek_float32_be(BYVAL AS const GstByteReader PTR, BYVAL AS gfloat PTR) AS gboolean
DECLARE FUNCTION gst_byte_reader_peek_float32_le(BYVAL AS const GstByteReader PTR, BYVAL AS gfloat PTR) AS gboolean
DECLARE FUNCTION gst_byte_reader_peek_float64_be(BYVAL AS const GstByteReader PTR, BYVAL AS gdouble PTR) AS gboolean
DECLARE FUNCTION gst_byte_reader_peek_float64_le(BYVAL AS const GstByteReader PTR, BYVAL AS gdouble PTR) AS gboolean
DECLARE FUNCTION gst_byte_reader_peek_int16_be(BYVAL AS const GstByteReader PTR, BYVAL AS gint16 PTR) AS gboolean
DECLARE FUNCTION gst_byte_reader_peek_int16_le(BYVAL AS const GstByteReader PTR, BYVAL AS gint16 PTR) AS gboolean
DECLARE FUNCTION gst_byte_reader_peek_int24_be(BYVAL AS const GstByteReader PTR, BYVAL AS gint32 PTR) AS gboolean
DECLARE FUNCTION gst_byte_reader_peek_int24_le(BYVAL AS const GstByteReader PTR, BYVAL AS gint32 PTR) AS gboolean
DECLARE FUNCTION gst_byte_reader_peek_int32_be(BYVAL AS const GstByteReader PTR, BYVAL AS gint32 PTR) AS gboolean
DECLARE FUNCTION gst_byte_reader_peek_int32_le(BYVAL AS const GstByteReader PTR, BYVAL AS gint32 PTR) AS gboolean
DECLARE FUNCTION gst_byte_reader_peek_int64_be(BYVAL AS const GstByteReader PTR, BYVAL AS gint64 PTR) AS gboolean
DECLARE FUNCTION gst_byte_reader_peek_int64_le(BYVAL AS const GstByteReader PTR, BYVAL AS gint64 PTR) AS gboolean
DECLARE FUNCTION gst_byte_reader_peek_int8(BYVAL AS const GstByteReader PTR, BYVAL AS gint8 PTR) AS gboolean
DECLARE FUNCTION gst_byte_reader_peek_string_utf8(BYVAL AS const GstByteReader PTR, BYVAL AS const gchar PTR PTR) AS gboolean
DECLARE FUNCTION gst_byte_reader_peek_sub_reader(BYVAL AS GstByteReader PTR, BYVAL AS GstByteReader PTR, BYVAL AS guint) AS gboolean
DECLARE FUNCTION gst_byte_reader_peek_uint16_be(BYVAL AS const GstByteReader PTR, BYVAL AS guint16 PTR) AS gboolean
DECLARE FUNCTION gst_byte_reader_peek_uint16_le(BYVAL AS const GstByteReader PTR, BYVAL AS guint16 PTR) AS gboolean
DECLARE FUNCTION gst_byte_reader_peek_uint24_be(BYVAL AS const GstByteReader PTR, BYVAL AS guint32 PTR) AS gboolean
DECLARE FUNCTION gst_byte_reader_peek_uint24_le(BYVAL AS const GstByteReader PTR, BYVAL AS guint32 PTR) AS gboolean
DECLARE FUNCTION gst_byte_reader_peek_uint32_be(BYVAL AS const GstByteReader PTR, BYVAL AS guint32 PTR) AS gboolean
DECLARE FUNCTION gst_byte_reader_peek_uint32_le(BYVAL AS const GstByteReader PTR, BYVAL AS guint32 PTR) AS gboolean
DECLARE FUNCTION gst_byte_reader_peek_uint64_be(BYVAL AS const GstByteReader PTR, BYVAL AS guint64 PTR) AS gboolean
DECLARE FUNCTION gst_byte_reader_peek_uint64_le(BYVAL AS const GstByteReader PTR, BYVAL AS guint64 PTR) AS gboolean
DECLARE FUNCTION gst_byte_reader_peek_uint8(BYVAL AS const GstByteReader PTR, BYVAL AS guint8 PTR) AS gboolean
DECLARE FUNCTION gst_byte_reader_set_pos(BYVAL AS GstByteReader PTR, BYVAL AS guint) AS gboolean
DECLARE FUNCTION gst_byte_reader_skip(BYVAL AS GstByteReader PTR, BYVAL AS guint) AS gboolean
DECLARE FUNCTION gst_byte_reader_skip_string_utf16(BYVAL AS GstByteReader PTR) AS gboolean
DECLARE FUNCTION gst_byte_reader_skip_string_utf32(BYVAL AS GstByteReader PTR) AS gboolean
DECLARE FUNCTION gst_byte_reader_skip_string_utf8(BYVAL AS GstByteReader PTR) AS gboolean
DECLARE FUNCTION gst_byte_reader_new(BYVAL AS const guint8 PTR, BYVAL AS guint) AS GstByteReader PTR
TYPE _GstByteWriter
  AS GstByteReader parent
  AS guint alloc_size
  AS gboolean fixed
  AS gboolean owned
  AS gpointer _gst_reserved(3)
END TYPE
DECLARE FUNCTION gst_byte_writer_ensure_free_space(BYVAL AS GstByteWriter PTR, BYVAL AS guint) AS gboolean
DECLARE FUNCTION gst_byte_writer_fill(BYVAL AS GstByteWriter PTR, BYVAL AS guint8, BYVAL AS guint) AS gboolean
DECLARE SUB gst_byte_writer_free(BYVAL AS GstByteWriter PTR)
DECLARE FUNCTION gst_byte_writer_free_and_get_buffer(BYVAL AS GstByteWriter PTR) AS GstBuffer PTR
DECLARE FUNCTION gst_byte_writer_free_and_get_data(BYVAL AS GstByteWriter PTR) AS guint8 PTR
DECLARE FUNCTION gst_byte_writer_get_remaining(BYVAL AS const GstByteWriter PTR) AS guint
DECLARE SUB gst_byte_writer_init(BYVAL AS GstByteWriter PTR)
DECLARE SUB gst_byte_writer_init_with_data(BYVAL AS GstByteWriter PTR, BYVAL AS guint8 PTR, BYVAL AS guint, BYVAL AS gboolean)
DECLARE SUB gst_byte_writer_init_with_size(BYVAL AS GstByteWriter PTR, BYVAL AS guint, BYVAL AS gboolean)
DECLARE FUNCTION gst_byte_writer_put_buffer(BYVAL AS GstByteWriter PTR, BYVAL AS GstBuffer PTR, BYVAL AS gsize, BYVAL AS gssize) AS gboolean
DECLARE FUNCTION gst_byte_writer_put_data(BYVAL AS GstByteWriter PTR, BYVAL AS const guint8 PTR, BYVAL AS guint) AS gboolean
DECLARE FUNCTION gst_byte_writer_put_float32_be(BYVAL AS GstByteWriter PTR, BYVAL AS gfloat) AS gboolean
DECLARE FUNCTION gst_byte_writer_put_float32_le(BYVAL AS GstByteWriter PTR, BYVAL AS gfloat) AS gboolean
DECLARE FUNCTION gst_byte_writer_put_float64_be(BYVAL AS GstByteWriter PTR, BYVAL AS gdouble) AS gboolean
DECLARE FUNCTION gst_byte_writer_put_float64_le(BYVAL AS GstByteWriter PTR, BYVAL AS gdouble) AS gboolean
DECLARE FUNCTION gst_byte_writer_put_int16_be(BYVAL AS GstByteWriter PTR, BYVAL AS gint16) AS gboolean
DECLARE FUNCTION gst_byte_writer_put_int16_le(BYVAL AS GstByteWriter PTR, BYVAL AS gint16) AS gboolean
DECLARE FUNCTION gst_byte_writer_put_int24_be(BYVAL AS GstByteWriter PTR, BYVAL AS gint32) AS gboolean
DECLARE FUNCTION gst_byte_writer_put_int24_le(BYVAL AS GstByteWriter PTR, BYVAL AS gint32) AS gboolean
DECLARE FUNCTION gst_byte_writer_put_int32_be(BYVAL AS GstByteWriter PTR, BYVAL AS gint32) AS gboolean
DECLARE FUNCTION gst_byte_writer_put_int32_le(BYVAL AS GstByteWriter PTR, BYVAL AS gint32) AS gboolean
DECLARE FUNCTION gst_byte_writer_put_int64_be(BYVAL AS GstByteWriter PTR, BYVAL AS gint64) AS gboolean
DECLARE FUNCTION gst_byte_writer_put_int64_le(BYVAL AS GstByteWriter PTR, BYVAL AS gint64) AS gboolean
DECLARE FUNCTION gst_byte_writer_put_int8(BYVAL AS GstByteWriter PTR, BYVAL AS gint8) AS gboolean
DECLARE FUNCTION gst_byte_writer_put_string_utf16(BYVAL AS GstByteWriter PTR, BYVAL AS const guint16 PTR) AS gboolean
DECLARE FUNCTION gst_byte_writer_put_string_utf32(BYVAL AS GstByteWriter PTR, BYVAL AS const guint32 PTR) AS gboolean
DECLARE FUNCTION gst_byte_writer_put_string_utf8(BYVAL AS GstByteWriter PTR, BYVAL AS const gchar PTR) AS gboolean
DECLARE FUNCTION gst_byte_writer_put_uint16_be(BYVAL AS GstByteWriter PTR, BYVAL AS guint16) AS gboolean
DECLARE FUNCTION gst_byte_writer_put_uint16_le(BYVAL AS GstByteWriter PTR, BYVAL AS guint16) AS gboolean
DECLARE FUNCTION gst_byte_writer_put_uint24_be(BYVAL AS GstByteWriter PTR, BYVAL AS guint32) AS gboolean
DECLARE FUNCTION gst_byte_writer_put_uint24_le(BYVAL AS GstByteWriter PTR, BYVAL AS guint32) AS gboolean
DECLARE FUNCTION gst_byte_writer_put_uint32_be(BYVAL AS GstByteWriter PTR, BYVAL AS guint32) AS gboolean
DECLARE FUNCTION gst_byte_writer_put_uint32_le(BYVAL AS GstByteWriter PTR, BYVAL AS guint32) AS gboolean
DECLARE FUNCTION gst_byte_writer_put_uint64_be(BYVAL AS GstByteWriter PTR, BYVAL AS guint64) AS gboolean
DECLARE FUNCTION gst_byte_writer_put_uint64_le(BYVAL AS GstByteWriter PTR, BYVAL AS guint64) AS gboolean
DECLARE FUNCTION gst_byte_writer_put_uint8(BYVAL AS GstByteWriter PTR, BYVAL AS guint8) AS gboolean
DECLARE SUB gst_byte_writer_reset(BYVAL AS GstByteWriter PTR)
DECLARE FUNCTION gst_byte_writer_reset_and_get_buffer(BYVAL AS GstByteWriter PTR) AS GstBuffer PTR
DECLARE FUNCTION gst_byte_writer_reset_and_get_data(BYVAL AS GstByteWriter PTR) AS guint8 PTR
DECLARE FUNCTION gst_byte_writer_new() AS GstByteWriter PTR
DECLARE FUNCTION gst_byte_writer_new_with_data(BYVAL AS guint8 PTR, BYVAL AS guint, BYVAL AS gboolean) AS GstByteWriter PTR
DECLARE FUNCTION gst_byte_writer_new_with_size(BYVAL AS guint, BYVAL AS gboolean) AS GstByteWriter PTR
TYPE _GstCollectData
  AS GstCollectPads PTR collect
  AS GstPad PTR pad
  AS GstBuffer PTR buffer
  AS guint pos
  AS GstSegment segment
  AS GstCollectPadsStateFlags state
  AS GstCollectDataPrivate PTR priv
END TYPE
TYPE GstCollectDataDestroyNotify AS SUB CDECL(BYVAL AS GstCollectData PTR)
TYPE _GstCollectPads
  AS GstObject object
  AS GSList PTR data
  AS GRecMutex stream_lock
  AS GstCollectPadsPrivate PTR priv
  AS gpointer _gst_reserved(3)
END TYPE
DECLARE FUNCTION gst_collect_pads_get_type() AS GType
#DEFINE GSTBASE_TYPE_COLLECT_PADS (gst_collect_pads_get_type())
#DEFINE GSTBASE_COLLECT_PADS(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GSTBASE_TYPE_COLLECT_PADS, GstCollectPads))
#DEFINE GSTBASE_COLLECT_PADS_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GSTBASE_TYPE_COLLECT_PADS, GstBaseCollectPadsClass))
#DEFINE GSTBASE_IS_COLLECT_PADS(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GSTBASE_TYPE_COLLECT_PADS))
#DEFINE GSTBASE_IS_CLASS_COLLECT_PADS(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GSTBASE_TYPE_COLLECT_PADS))
#DEFINE GSTBASE_COLLECT_PADS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GSTBASE_TYPE_COLLECT_PADS, GstBaseCollectPadsClass))
DECLARE FUNCTION gst_collect_pads_new() AS GstCollectPads PTR
DECLARE FUNCTION gst_collect_pads_add_pad(BYVAL AS GstCollectPads PTR, BYVAL AS GstPad PTR, BYVAL AS guint, BYVAL AS GstCollectDataDestroyNotify, BYVAL AS gboolean) AS GstCollectData PTR
DECLARE FUNCTION gst_collect_pads_available(BYVAL AS GstCollectPads PTR) AS guint
DECLARE FUNCTION gst_collect_pads_clip_running_time(BYVAL AS GstCollectPads PTR, BYVAL AS GstCollectData PTR, BYVAL AS GstBuffer PTR, BYVAL AS GstBuffer PTR PTR, BYVAL AS gpointer) AS GstFlowReturn
DECLARE FUNCTION gst_collect_pads_event_default(BYVAL AS GstCollectPads PTR, BYVAL AS GstCollectData PTR, BYVAL AS GstEvent PTR, BYVAL AS gboolean) AS gboolean
DECLARE FUNCTION gst_collect_pads_flush(BYVAL AS GstCollectPads PTR, BYVAL AS GstCollectData PTR, BYVAL AS guint) AS guint
DECLARE FUNCTION gst_collect_pads_peek(BYVAL AS GstCollectPads PTR, BYVAL AS GstCollectData PTR) AS GstBuffer PTR
DECLARE FUNCTION gst_collect_pads_pop(BYVAL AS GstCollectPads PTR, BYVAL AS GstCollectData PTR) AS GstBuffer PTR
DECLARE FUNCTION gst_collect_pads_query_default(BYVAL AS GstCollectPads PTR, BYVAL AS GstCollectData PTR, BYVAL AS GstQuery PTR, BYVAL AS gboolean) AS gboolean
DECLARE FUNCTION gst_collect_pads_read_buffer(BYVAL AS GstCollectPads PTR, BYVAL AS GstCollectData PTR, BYVAL AS guint) AS GstBuffer PTR
DECLARE FUNCTION gst_collect_pads_remove_pad(BYVAL AS GstCollectPads PTR, BYVAL AS GstPad PTR) AS gboolean
DECLARE SUB gst_collect_pads_set_buffer_function(BYVAL AS GstCollectPads PTR, BYVAL AS GstCollectPadsBufferFunction, BYVAL AS gpointer)
DECLARE SUB gst_collect_pads_set_clip_function(BYVAL AS GstCollectPads PTR, BYVAL AS GstCollectPadsClipFunction, BYVAL AS gpointer)
DECLARE SUB gst_collect_pads_set_compare_function(BYVAL AS GstCollectPads PTR, BYVAL AS GstCollectPadsCompareFunction, BYVAL AS gpointer)
DECLARE SUB gst_collect_pads_set_event_function(BYVAL AS GstCollectPads PTR, BYVAL AS GstCollectPadsEventFunction, BYVAL AS gpointer)
DECLARE SUB gst_collect_pads_set_flush_function(BYVAL AS GstCollectPads PTR, BYVAL AS GstCollectPadsFlushFunction, BYVAL AS gpointer)
DECLARE SUB gst_collect_pads_set_flushing(BYVAL AS GstCollectPads PTR, BYVAL AS gboolean)
DECLARE SUB gst_collect_pads_set_function(BYVAL AS GstCollectPads PTR, BYVAL AS GstCollectPadsFunction, BYVAL AS gpointer)
DECLARE SUB gst_collect_pads_set_query_function(BYVAL AS GstCollectPads PTR, BYVAL AS GstCollectPadsQueryFunction, BYVAL AS gpointer)
DECLARE SUB gst_collect_pads_set_waiting(BYVAL AS GstCollectPads PTR, BYVAL AS GstCollectData PTR, BYVAL AS gboolean)
DECLARE FUNCTION gst_collect_pads_src_event_default(BYVAL AS GstCollectPads PTR, BYVAL AS GstPad PTR, BYVAL AS GstEvent PTR) AS gboolean
DECLARE SUB gst_collect_pads_start(BYVAL AS GstCollectPads PTR)
DECLARE SUB gst_collect_pads_stop(BYVAL AS GstCollectPads PTR)
DECLARE FUNCTION gst_collect_pads_take_buffer(BYVAL AS GstCollectPads PTR, BYVAL AS GstCollectData PTR, BYVAL AS guint) AS GstBuffer PTR
TYPE GstCollectPadsBufferFunction AS FUNCTION CDECL(BYVAL AS GstCollectPads PTR, BYVAL AS GstCollectData PTR, BYVAL AS GstBuffer PTR, BYVAL AS gpointer) AS GstFlowReturn
TYPE _GstCollectPadsClass
  AS GstObjectClass parent_class
  AS gpointer _gst_reserved(3)
END TYPE
TYPE GstCollectPadsClipFunction AS FUNCTION CDECL(BYVAL AS GstCollectPads PTR, BYVAL AS GstCollectData PTR, BYVAL AS GstBuffer PTR, BYVAL AS GstBuffer PTR PTR, BYVAL AS gpointer) AS GstFlowReturn
TYPE GstCollectPadsCompareFunction AS FUNCTION CDECL(BYVAL AS GstCollectPads PTR, BYVAL AS GstCollectData PTR, BYVAL AS GstClockTime, BYVAL AS GstCollectData PTR, BYVAL AS GstClockTime, BYVAL AS gpointer) AS gint
TYPE GstCollectPadsEventFunction AS FUNCTION CDECL(BYVAL AS GstCollectPads PTR, BYVAL AS GstCollectData PTR, BYVAL AS GstEvent PTR, BYVAL AS gpointer) AS gboolean
TYPE GstCollectPadsFlushFunction AS SUB CDECL(BYVAL AS GstCollectPads PTR, BYVAL AS gpointer)
TYPE GstCollectPadsFunction AS FUNCTION CDECL(BYVAL AS GstCollectPads PTR, BYVAL AS gpointer) AS GstFlowReturn
TYPE GstCollectPadsQueryFunction AS FUNCTION CDECL(BYVAL AS GstCollectPads PTR, BYVAL AS GstCollectData PTR, BYVAL AS GstQuery PTR, BYVAL AS gpointer) AS gboolean
TYPE _GstDataQueue
  AS GObject object
  AS GstDataQueuePrivate PTR priv
  AS gpointer _gst_reserved(3)
END TYPE
DECLARE FUNCTION gst_data_queue_get_type() AS GType
#DEFINE GSTBASE_TYPE_DATA_QUEUE (gst_data_queue_get_type())
#DEFINE GSTBASE_DATA_QUEUE(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GSTBASE_TYPE_DATA_QUEUE, GstDataQueue))
#DEFINE GSTBASE_DATA_QUEUE_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GSTBASE_TYPE_DATA_QUEUE, GstBaseDataQueueClass))
#DEFINE GSTBASE_IS_DATA_QUEUE(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GSTBASE_TYPE_DATA_QUEUE))
#DEFINE GSTBASE_IS_CLASS_DATA_QUEUE(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GSTBASE_TYPE_DATA_QUEUE))
#DEFINE GSTBASE_DATA_QUEUE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GSTBASE_TYPE_DATA_QUEUE, GstBaseDataQueueClass))
DECLARE FUNCTION gst_data_queue_new(BYVAL AS GstDataQueueCheckFullFunction, BYVAL AS GstDataQueueFullCallback, BYVAL AS GstDataQueueEmptyCallback, BYVAL AS gpointer) AS GstDataQueue PTR
DECLARE FUNCTION gst_data_queue_drop_head(BYVAL AS GstDataQueue PTR, BYVAL AS GType) AS gboolean
DECLARE SUB gst_data_queue_flush(BYVAL AS GstDataQueue PTR)
DECLARE SUB gst_data_queue_get_level(BYVAL AS GstDataQueue PTR, BYVAL AS GstDataQueueSize PTR)
DECLARE FUNCTION gst_data_queue_is_empty(BYVAL AS GstDataQueue PTR) AS gboolean
DECLARE FUNCTION gst_data_queue_is_full(BYVAL AS GstDataQueue PTR) AS gboolean
DECLARE SUB gst_data_queue_limits_changed(BYVAL AS GstDataQueue PTR)
DECLARE FUNCTION gst_data_queue_peek(BYVAL AS GstDataQueue PTR, BYVAL AS GstDataQueueItem PTR PTR) AS gboolean
DECLARE FUNCTION gst_data_queue_pop(BYVAL AS GstDataQueue PTR, BYVAL AS GstDataQueueItem PTR PTR) AS gboolean
DECLARE FUNCTION gst_data_queue_push(BYVAL AS GstDataQueue PTR, BYVAL AS GstDataQueueItem PTR) AS gboolean
DECLARE FUNCTION gst_data_queue_push_force(BYVAL AS GstDataQueue PTR, BYVAL AS GstDataQueueItem PTR) AS gboolean
DECLARE SUB gst_data_queue_set_flushing(BYVAL AS GstDataQueue PTR, BYVAL AS gboolean)
TYPE GstDataQueueCheckFullFunction AS FUNCTION CDECL(BYVAL AS GstDataQueue PTR, BYVAL AS guint, BYVAL AS guint, BYVAL AS guint64, BYVAL AS gpointer) AS gboolean
TYPE _GstDataQueueClass
  AS GObjectClass parent_class
  empty AS SUB CDECL(BYVAL AS GstDataQueue PTR)
  full AS SUB CDECL(BYVAL AS GstDataQueue PTR)
  AS gpointer _gst_reserved(3)
END TYPE
TYPE GstDataQueueEmptyCallback AS SUB CDECL(BYVAL AS GstDataQueue PTR, BYVAL AS gpointer)
TYPE GstDataQueueFullCallback AS SUB CDECL(BYVAL AS GstDataQueue PTR, BYVAL AS gpointer)
TYPE _GstDataQueueItem
  AS GstMiniObject PTR object
  AS guint size
  AS guint64 duration
  AS gboolean visible
  AS GDestroyNotify destroy
  AS gpointer _gst_reserved(3)
END TYPE
TYPE _GstDataQueueSize
  AS guint visible
  AS guint bytes
  AS guint64 time
END TYPE
DECLARE FUNCTION gst_flow_combiner_new() AS GstFlowCombiner PTR
DECLARE SUB gst_flow_combiner_add_pad(BYVAL AS GstFlowCombiner PTR, BYVAL AS GstPad PTR)
DECLARE SUB gst_flow_combiner_clear(BYVAL AS GstFlowCombiner PTR)
DECLARE SUB gst_flow_combiner_free(BYVAL AS GstFlowCombiner PTR)
DECLARE FUNCTION gst_flow_combiner_ref(BYVAL AS GstFlowCombiner PTR) AS GstFlowCombiner PTR
DECLARE SUB gst_flow_combiner_remove_pad(BYVAL AS GstFlowCombiner PTR, BYVAL AS GstPad PTR)
DECLARE SUB gst_flow_combiner_reset(BYVAL AS GstFlowCombiner PTR)
DECLARE SUB gst_flow_combiner_unref(BYVAL AS GstFlowCombiner PTR)
DECLARE FUNCTION gst_flow_combiner_update_flow(BYVAL AS GstFlowCombiner PTR, BYVAL AS GstFlowReturn) AS GstFlowReturn
DECLARE FUNCTION gst_flow_combiner_update_pad_flow(BYVAL AS GstFlowCombiner PTR, BYVAL AS GstPad PTR, BYVAL AS GstFlowReturn) AS GstFlowReturn
TYPE _GstPushSrc
  AS GstBaseSrc parent
  AS gpointer _gst_reserved(3)
END TYPE
DECLARE FUNCTION gst_push_src_get_type() AS GType
#DEFINE GSTBASE_TYPE_PUSH_SRC (gst_push_src_get_type())
#DEFINE GSTBASE_PUSH_SRC(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GSTBASE_TYPE_PUSH_SRC, GstPushSrc))
#DEFINE GSTBASE_PUSH_SRC_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GSTBASE_TYPE_PUSH_SRC, GstBasePushSrcClass))
#DEFINE GSTBASE_IS_PUSH_SRC(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GSTBASE_TYPE_PUSH_SRC))
#DEFINE GSTBASE_IS_CLASS_PUSH_SRC(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GSTBASE_TYPE_PUSH_SRC))
#DEFINE GSTBASE_PUSH_SRC_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GSTBASE_TYPE_PUSH_SRC, GstBasePushSrcClass))
TYPE _GstPushSrcClass
  AS GstBaseSrcClass parent_class
  create AS FUNCTION CDECL(BYVAL AS GstPushSrc PTR, BYVAL AS GstBuffer PTR PTR) AS GstFlowReturn
  alloc AS FUNCTION CDECL(BYVAL AS GstPushSrc PTR, BYVAL AS GstBuffer PTR PTR) AS GstFlowReturn
  fill AS FUNCTION CDECL(BYVAL AS GstPushSrc PTR, BYVAL AS GstBuffer PTR) AS GstFlowReturn
  AS gpointer _gst_reserved(3)
END TYPE
DECLARE SUB gst_queue_array_clear(BYVAL AS GstQueueArray PTR)
DECLARE FUNCTION gst_queue_array_drop_element(BYVAL AS GstQueueArray PTR, BYVAL AS guint) AS gpointer
DECLARE FUNCTION gst_queue_array_drop_struct(BYVAL AS GstQueueArray PTR, BYVAL AS guint, BYVAL AS gpointer) AS gboolean
DECLARE FUNCTION gst_queue_array_find(BYVAL AS GstQueueArray PTR, BYVAL AS GCompareFunc, BYVAL AS gpointer) AS guint
DECLARE SUB gst_queue_array_free(BYVAL AS GstQueueArray PTR)
DECLARE FUNCTION gst_queue_array_get_length(BYVAL AS GstQueueArray PTR) AS guint
DECLARE FUNCTION gst_queue_array_is_empty(BYVAL AS GstQueueArray PTR) AS gboolean
DECLARE FUNCTION gst_queue_array_peek_head(BYVAL AS GstQueueArray PTR) AS gpointer
DECLARE FUNCTION gst_queue_array_peek_head_struct(BYVAL AS GstQueueArray PTR) AS gpointer
DECLARE FUNCTION gst_queue_array_peek_nth(BYVAL AS GstQueueArray PTR, BYVAL AS guint) AS gpointer
DECLARE FUNCTION gst_queue_array_peek_nth_struct(BYVAL AS GstQueueArray PTR, BYVAL AS guint) AS gpointer
DECLARE FUNCTION gst_queue_array_peek_tail(BYVAL AS GstQueueArray PTR) AS gpointer
DECLARE FUNCTION gst_queue_array_peek_tail_struct(BYVAL AS GstQueueArray PTR) AS gpointer
DECLARE FUNCTION gst_queue_array_pop_head(BYVAL AS GstQueueArray PTR) AS gpointer
DECLARE FUNCTION gst_queue_array_pop_head_struct(BYVAL AS GstQueueArray PTR) AS gpointer
DECLARE FUNCTION gst_queue_array_pop_tail(BYVAL AS GstQueueArray PTR) AS gpointer
DECLARE FUNCTION gst_queue_array_pop_tail_struct(BYVAL AS GstQueueArray PTR) AS gpointer
DECLARE SUB gst_queue_array_push_tail(BYVAL AS GstQueueArray PTR, BYVAL AS gpointer)
DECLARE SUB gst_queue_array_push_tail_struct(BYVAL AS GstQueueArray PTR, BYVAL AS gpointer)
DECLARE SUB gst_queue_array_set_clear_func(BYVAL AS GstQueueArray PTR, BYVAL AS GDestroyNotify)
DECLARE FUNCTION gst_queue_array_new(BYVAL AS guint) AS GstQueueArray PTR
DECLARE FUNCTION gst_queue_array_new_for_struct(BYVAL AS gsize, BYVAL AS guint) AS GstQueueArray PTR
TYPE GstTypeFindHelperGetRangeFunction AS FUNCTION CDECL(BYVAL AS GstObject PTR, BYVAL AS GstObject PTR, BYVAL AS guint64, BYVAL AS guint, BYVAL AS GstBuffer PTR PTR) AS GstFlowReturn
' P_4

DECLARE FUNCTION gst_type_find_helper(BYVAL AS GstPad PTR, BYVAL AS guint64) AS GstCaps PTR
DECLARE FUNCTION gst_type_find_helper_for_buffer(BYVAL AS GstObject PTR, BYVAL AS GstBuffer PTR, BYVAL AS GstTypeFindProbability PTR) AS GstCaps PTR
DECLARE FUNCTION gst_type_find_helper_for_buffer_with_extension(BYVAL AS GstObject PTR, BYVAL AS GstBuffer PTR, BYVAL AS const gchar PTR, BYVAL AS GstTypeFindProbability PTR) AS GstCaps PTR
DECLARE FUNCTION gst_type_find_helper_for_data(BYVAL AS GstObject PTR, BYVAL AS const guint8 PTR, BYVAL AS gsize, BYVAL AS GstTypeFindProbability PTR) AS GstCaps PTR
DECLARE FUNCTION gst_type_find_helper_for_data_with_extension(BYVAL AS GstObject PTR, BYVAL AS const guint8 PTR, BYVAL AS gsize, BYVAL AS const gchar PTR, BYVAL AS GstTypeFindProbability PTR) AS GstCaps PTR
DECLARE FUNCTION gst_type_find_helper_for_extension(BYVAL AS GstObject PTR, BYVAL AS const gchar PTR) AS GstCaps PTR
DECLARE FUNCTION gst_type_find_helper_get_range(BYVAL AS GstObject PTR, BYVAL AS GstObject PTR, BYVAL AS GstTypeFindHelperGetRangeFunction, BYVAL AS guint64, BYVAL AS const gchar PTR, BYVAL AS GstTypeFindProbability PTR) AS GstCaps PTR
DECLARE FUNCTION gst_type_find_helper_get_range_full(BYVAL AS GstObject PTR, BYVAL AS GstObject PTR, BYVAL AS GstTypeFindHelperGetRangeFunction, BYVAL AS guint64, BYVAL AS const gchar PTR, BYVAL AS GstCaps PTR PTR, BYVAL AS GstTypeFindProbability PTR) AS GstFlowReturn
END EXTERN

