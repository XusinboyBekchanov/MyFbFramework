'            FreeBasic header file, auto-generated by
'                       ### GirToBac ###
' LGPLv2.1 (C) 2013-2022 by Thomas[ dot }Freiherr[ at ]gmx[ dot }net
' Auto-translated from file /usr/share/gir-1.0/SpiceClientGtk-2.0.gir
#INCLUDE ONCE "_GirToBac-0.0.bi"

' Repository version 1.2
#INCLUDE ONCE "GObject-2.0.bi"
#INCLUDE ONCE "Gtk-2.0.bi"
#INCLUDE ONCE "SpiceClientGLib-2.0.bi"
TYPE AS _SpiceDisplay SpiceDisplay
TYPE AS _SpiceDisplayClass SpiceDisplayClass
TYPE AS LONG SpiceDisplayKeyEvent
ENUM
  SPICE_DISPLAY_KEY_EVENT_PRESS = 1
  SPICE_DISPLAY_KEY_EVENT_RELEASE = 2
  SPICE_DISPLAY_KEY_EVENT_CLICK = 3
END ENUM
TYPE AS _SpiceDisplayPrivate SpiceDisplayPrivate
TYPE AS _SpiceGrabSequence SpiceGrabSequence
TYPE AS _SpiceGtkSession SpiceGtkSession
TYPE AS _SpiceGtkSessionClass SpiceGtkSessionClass
TYPE AS _SpiceGtkSessionPrivate SpiceGtkSessionPrivate
TYPE AS _SpiceUsbDeviceWidget SpiceUsbDeviceWidget
TYPE AS _SpiceUsbDeviceWidgetClass SpiceUsbDeviceWidgetClass
TYPE AS _SpiceUsbDeviceWidgetPrivate SpiceUsbDeviceWidgetPrivate
EXTERN "C" LIB "spice-client-gtk-2.0"
' P_X

' P_3

TYPE _SpiceDisplay
  AS GtkDrawingArea parent
  AS SpiceDisplayPrivate PTR priv
END TYPE
DECLARE FUNCTION spice_display_get_type() AS GType
#DEFINE SPICECLIENTGTK_TYPE_DISPLAY (spice_display_get_type())
#DEFINE SPICECLIENTGTK_DISPLAY(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), SPICECLIENTGTK_TYPE_DISPLAY, SpiceDisplay))
#DEFINE SPICECLIENTGTK_DISPLAY_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), SPICECLIENTGTK_TYPE_DISPLAY, SpiceClientGtkDisplayClass))
#DEFINE SPICECLIENTGTK_IS_DISPLAY(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), SPICECLIENTGTK_TYPE_DISPLAY))
#DEFINE SPICECLIENTGTK_IS_CLASS_DISPLAY(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), SPICECLIENTGTK_TYPE_DISPLAY))
#DEFINE SPICECLIENTGTK_DISPLAY_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), SPICECLIENTGTK_TYPE_DISPLAY, SpiceClientGtkDisplayClass))
DECLARE FUNCTION spice_display_new(BYVAL AS SpiceSession PTR, BYVAL AS gint /'int'/) AS SpiceDisplay PTR
DECLARE FUNCTION spice_display_new_with_monitor(BYVAL AS SpiceSession PTR, BYVAL AS gint, BYVAL AS gint) AS SpiceDisplay PTR
DECLARE SUB spice_display_copy_to_guest(BYVAL AS SpiceDisplay PTR)
DECLARE FUNCTION spice_display_get_grab_keys(BYVAL AS SpiceDisplay PTR) AS SpiceGrabSequence PTR
DECLARE FUNCTION spice_display_get_pixbuf(BYVAL AS SpiceDisplay PTR) AS GdkPixbuf PTR
DECLARE SUB spice_display_mouse_ungrab(BYVAL AS SpiceDisplay PTR)
DECLARE SUB spice_display_paste_from_guest(BYVAL AS SpiceDisplay PTR)
DECLARE SUB spice_display_send_keys(BYVAL AS SpiceDisplay PTR, BYVAL AS guint PTR, BYVAL AS gint /'int'/, BYVAL AS SpiceDisplayKeyEvent)
DECLARE SUB spice_display_set_grab_keys(BYVAL AS SpiceDisplay PTR, BYVAL AS SpiceGrabSequence PTR)
TYPE _SpiceDisplayClass
  AS GtkDrawingAreaClass parent_class
  mouse_grab AS SUB CDECL(BYVAL AS SpiceChannel PTR, BYVAL AS gint)
  keyboard_grab AS SUB CDECL(BYVAL AS SpiceChannel PTR, BYVAL AS gint)
  AS gint8 _spice_reserved
END TYPE
TYPE _SpiceGrabSequence
  AS guint nkeysyms
  AS guint PTR keysyms
END TYPE
DECLARE FUNCTION spice_grab_sequence_new(BYVAL AS guint, BYVAL AS guint PTR) AS SpiceGrabSequence PTR
DECLARE FUNCTION spice_grab_sequence_new_from_string(BYVAL AS const gchar PTR) AS SpiceGrabSequence PTR
DECLARE FUNCTION spice_grab_sequence_as_string(BYVAL AS SpiceGrabSequence PTR) AS gchar PTR
DECLARE FUNCTION spice_grab_sequence_copy(BYVAL AS SpiceGrabSequence PTR) AS SpiceGrabSequence PTR
DECLARE SUB spice_grab_sequence_free(BYVAL AS SpiceGrabSequence PTR)
TYPE _SpiceGtkSession
  AS GObject parent
  AS SpiceGtkSessionPrivate PTR priv
END TYPE
DECLARE FUNCTION spice_gtk_session_get_type() AS GType
#DEFINE SPICECLIENTGTK_TYPE_GTK_SESSION (spice_gtk_session_get_type())
#DEFINE SPICECLIENTGTK_GTK_SESSION(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), SPICECLIENTGTK_TYPE_GTK_SESSION, SpiceGtkSession))
#DEFINE SPICECLIENTGTK_GTK_SESSION_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), SPICECLIENTGTK_TYPE_GTK_SESSION, SpiceClientGtkGtkSessionClass))
#DEFINE SPICECLIENTGTK_IS_GTK_SESSION(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), SPICECLIENTGTK_TYPE_GTK_SESSION))
#DEFINE SPICECLIENTGTK_IS_CLASS_GTK_SESSION(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), SPICECLIENTGTK_TYPE_GTK_SESSION))
#DEFINE SPICECLIENTGTK_GTK_SESSION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), SPICECLIENTGTK_TYPE_GTK_SESSION, SpiceClientGtkGtkSessionClass))
DECLARE FUNCTION spice_gtk_session_get(BYVAL AS SpiceSession PTR) AS SpiceGtkSession PTR
DECLARE SUB spice_gtk_session_copy_to_guest(BYVAL AS SpiceGtkSession PTR)
DECLARE SUB spice_gtk_session_paste_from_guest(BYVAL AS SpiceGtkSession PTR)
TYPE _SpiceGtkSessionClass
  AS GObjectClass parent_class
  AS gint8 _spice_reserved
END TYPE
TYPE _SpiceUsbDeviceWidget
  AS GtkVBox parent
  AS SpiceUsbDeviceWidgetPrivate PTR priv
END TYPE
DECLARE FUNCTION spice_usb_device_widget_get_type() AS GType
#DEFINE SPICECLIENTGTK_TYPE_USB_DEVICE_WIDGET (spice_usb_device_widget_get_type())
#DEFINE SPICECLIENTGTK_USB_DEVICE_WIDGET(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), SPICECLIENTGTK_TYPE_USB_DEVICE_WIDGET, SpiceUsbDeviceWidget))
#DEFINE SPICECLIENTGTK_USB_DEVICE_WIDGET_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), SPICECLIENTGTK_TYPE_USB_DEVICE_WIDGET, SpiceClientGtkUsbDeviceWidgetClass))
#DEFINE SPICECLIENTGTK_IS_USB_DEVICE_WIDGET(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), SPICECLIENTGTK_TYPE_USB_DEVICE_WIDGET))
#DEFINE SPICECLIENTGTK_IS_CLASS_USB_DEVICE_WIDGET(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), SPICECLIENTGTK_TYPE_USB_DEVICE_WIDGET))
#DEFINE SPICECLIENTGTK_USB_DEVICE_WIDGET_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), SPICECLIENTGTK_TYPE_USB_DEVICE_WIDGET, SpiceClientGtkUsbDeviceWidgetClass))
DECLARE FUNCTION spice_usb_device_widget_new(BYVAL AS SpiceSession PTR, BYVAL AS const gchar PTR) AS GtkWidget PTR
TYPE _SpiceUsbDeviceWidgetClass
  AS GtkVBoxClass parent_class
  connect_failed AS SUB CDECL(BYVAL AS SpiceUsbDeviceWidget PTR, BYVAL AS SpiceUsbDevice PTR, BYVAL AS GError PTR)
  AS gint8 _spice_reserved
END TYPE
' P_4

END EXTERN

