'            FreeBasic header file, auto-generated by
'                       ### girtobac ###
' LGPLv2.1 (C) 2013-2022 by Thomas{ doT ]Freiherr[ At ]gmx[ DoT }net
' Auto-translated from file /usr/share/gir-1.0/Gsk-4.0.gir
#include once "_GirToBac-0.0.bi"
' Repository version 1.2
#include once "GObject-2.0.bi"
#include once "Gdk-4.0.bi"
#include once "Graphene-1.0.bi"
'#include once "cairo-1.0.bi"
Type As Long GskBlendMode
Enum
  GSK_BLEND_MODE_DEFAULT = 0
  GSK_BLEND_MODE_MULTIPLY = 1
  GSK_BLEND_MODE_SCREEN = 2
  GSK_BLEND_MODE_OVERLAY = 3
  GSK_BLEND_MODE_DARKEN = 4
  GSK_BLEND_MODE_LIGHTEN = 5
  GSK_BLEND_MODE_COLOR_DODGE = 6
  GSK_BLEND_MODE_COLOR_BURN = 7
  GSK_BLEND_MODE_HARD_LIGHT = 8
  GSK_BLEND_MODE_SOFT_LIGHT = 9
  GSK_BLEND_MODE_DIFFERENCE = 10
  GSK_BLEND_MODE_EXCLUSION = 11
  GSK_BLEND_MODE_COLOR = 12
  GSK_BLEND_MODE_HUE = 13
  GSK_BLEND_MODE_SATURATION = 14
  GSK_BLEND_MODE_LUMINOSITY = 15
End Enum
Type As _GskColorStop GskColorStop
Type As Long GskCorner
Enum
  GSK_CORNER_TOP_LEFT = 0
  GSK_CORNER_TOP_RIGHT = 1
  GSK_CORNER_BOTTOM_RIGHT = 2
  GSK_CORNER_BOTTOM_LEFT = 3
End Enum
Type As _GskRenderNode GskRenderNode
Type As Long GskRenderNodeType
Enum
  GSK_NOT_A_RENDER_NODE = 0
  GSK_CONTAINER_NODE = 1
  GSK_CAIRO_NODE = 2
  GSK_COLOR_NODE = 3
  GSK_LINEAR_GRADIENT_NODE = 4
  GSK_REPEATING_LINEAR_GRADIENT_NODE = 5
  GSK_BORDER_NODE = 6
  GSK_TEXTURE_NODE = 7
  GSK_INSET_SHADOW_NODE = 8
  GSK_OUTSET_SHADOW_NODE = 9
  GSK_TRANSFORM_NODE = 10
  GSK_OPACITY_NODE = 11
  GSK_COLOR_MATRIX_NODE = 12
  GSK_REPEAT_NODE = 13
  GSK_CLIP_NODE = 14
  GSK_ROUNDED_CLIP_NODE = 15
  GSK_SHADOW_NODE = 16
  GSK_BLEND_NODE = 17
  GSK_CROSS_FADE_NODE = 18
END ENUM
TYPE AS _GskRenderer GskRenderer
TYPE AS _GskRendererClass GskRendererClass
TYPE AS _GskRoundedRect GskRoundedRect
TYPE AS LONG GskScalingFilter
ENUM
  GSK_SCALING_FILTER_LINEAR = 0
  GSK_SCALING_FILTER_NEAREST = 1
  GSK_SCALING_FILTER_TRILINEAR = 2
END ENUM
TYPE AS LONG GskSerializationError
ENUM
  GSK_SERIALIZATION_UNSUPPORTED_FORMAT = 0
  GSK_SERIALIZATION_UNSUPPORTED_VERSION = 1
  GSK_SERIALIZATION_INVALID_DATA = 2
END ENUM
TYPE AS _GskShadow GskShadow
TYPE AS _GskTexture GskTexture
TYPE AS _GskTextureClass GskTextureClass
EXTERN "C" LIB "gtk-4"
' P_X

' P_3

TYPE _GskColorStop
  AS double offset
  AS GdkRGBA color
END TYPE
DECLARE SUB gsk_render_node_draw(BYVAL AS GskRenderNode PTR, BYVAL AS cairo_t PTR)
DECLARE SUB gsk_render_node_get_bounds(BYVAL AS GskRenderNode PTR, BYVAL AS graphene_rect_t PTR)
DECLARE FUNCTION gsk_render_node_get_name(BYVAL AS GskRenderNode PTR) AS const char PTR
DECLARE FUNCTION gsk_render_node_get_node_type(BYVAL AS GskRenderNode PTR) AS GskRenderNodeType
DECLARE FUNCTION gsk_render_node_ref(BYVAL AS GskRenderNode PTR) AS GskRenderNode PTR
DECLARE FUNCTION gsk_render_node_serialize(BYVAL AS GskRenderNode PTR) AS GBytes PTR
DECLARE SUB gsk_render_node_set_name(BYVAL AS GskRenderNode PTR, BYVAL AS const char PTR)
DECLARE SUB gsk_render_node_set_scaling_filters(BYVAL AS GskRenderNode PTR, BYVAL AS GskScalingFilter, BYVAL AS GskScalingFilter)
DECLARE SUB gsk_render_node_unref(BYVAL AS GskRenderNode PTR)
DECLARE FUNCTION gsk_render_node_write_to_file(BYVAL AS GskRenderNode PTR, BYVAL AS const char PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION gsk_render_node_deserialize(BYVAL AS GBytes PTR, BYVAL AS GError PTR PTR) AS GskRenderNode PTR
DECLARE FUNCTION gsk_renderer_get_type() AS GType
#DEFINE GSK_TYPE_RENDERER (gsk_renderer_get_type())
#DEFINE GSK_RENDERER(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GSK_TYPE_RENDERER, GskRenderer))
#DEFINE GSK_RENDERER_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GSK_TYPE_RENDERER, GskRendererClass))
#DEFINE GSK_IS_RENDERER(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GSK_TYPE_RENDERER))
#DEFINE GSK_IS_CLASS_RENDERER(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GSK_TYPE_RENDERER))
#DEFINE GSK_RENDERER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GSK_TYPE_RENDERER, GskRendererClass))
DECLARE FUNCTION gsk_renderer_new_for_window(BYVAL AS GdkWindow PTR) AS GskRenderer PTR
DECLARE FUNCTION gsk_renderer_begin_draw_frame(BYVAL AS GskRenderer PTR, BYVAL AS const cairo_region_t PTR) AS GdkDrawingContext PTR
DECLARE SUB gsk_renderer_end_draw_frame(BYVAL AS GskRenderer PTR, BYVAL AS GdkDrawingContext PTR)
DECLARE FUNCTION gsk_renderer_get_display(BYVAL AS GskRenderer PTR) AS GdkDisplay PTR
DECLARE FUNCTION gsk_renderer_get_scale_factor(BYVAL AS GskRenderer PTR) AS gint
DECLARE SUB gsk_renderer_get_viewport(BYVAL AS GskRenderer PTR, BYVAL AS graphene_rect_t PTR)
DECLARE FUNCTION gsk_renderer_get_window(BYVAL AS GskRenderer PTR) AS GdkWindow PTR
DECLARE FUNCTION gsk_renderer_realize(BYVAL AS GskRenderer PTR, BYVAL AS GdkWindow PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE SUB gsk_renderer_render(BYVAL AS GskRenderer PTR, BYVAL AS GskRenderNode PTR, BYVAL AS GdkDrawingContext PTR)
DECLARE FUNCTION gsk_renderer_render_texture(BYVAL AS GskRenderer PTR, BYVAL AS GskRenderNode PTR, BYVAL AS const graphene_rect_t PTR) AS GskTexture PTR
DECLARE SUB gsk_renderer_set_scale_factor(BYVAL AS GskRenderer PTR, BYVAL AS gint)
DECLARE SUB gsk_renderer_set_viewport(BYVAL AS GskRenderer PTR, BYVAL AS const graphene_rect_t PTR)
DECLARE SUB gsk_renderer_unrealize(BYVAL AS GskRenderer PTR)
TYPE _GskRoundedRect
  AS graphene_rect_t bounds
  AS graphene_size_t corner(3)
END TYPE
DECLARE FUNCTION gsk_rounded_rect_contains_point(BYVAL AS const GskRoundedRect PTR, BYVAL AS const graphene_point_t PTR) AS gboolean
DECLARE FUNCTION gsk_rounded_rect_contains_rect(BYVAL AS const GskRoundedRect PTR, BYVAL AS const graphene_rect_t PTR) AS gboolean
DECLARE FUNCTION gsk_rounded_rect_init(BYVAL AS GskRoundedRect PTR, BYVAL AS const graphene_rect_t PTR, BYVAL AS const graphene_size_t PTR, BYVAL AS const graphene_size_t PTR, BYVAL AS const graphene_size_t PTR, BYVAL AS const graphene_size_t PTR) AS GskRoundedRect PTR
DECLARE FUNCTION gsk_rounded_rect_init_copy(BYVAL AS GskRoundedRect PTR, BYVAL AS const GskRoundedRect PTR) AS GskRoundedRect PTR
DECLARE FUNCTION gsk_rounded_rect_init_from_rect(BYVAL AS GskRoundedRect PTR, BYVAL AS const graphene_rect_t PTR, BYVAL AS gfloat) AS GskRoundedRect PTR
DECLARE FUNCTION gsk_rounded_rect_intersects_rect(BYVAL AS const GskRoundedRect PTR, BYVAL AS const graphene_rect_t PTR) AS gboolean
DECLARE FUNCTION gsk_rounded_rect_is_rectilinear(BYVAL AS const GskRoundedRect PTR) AS gboolean
DECLARE FUNCTION gsk_rounded_rect_normalize(BYVAL AS GskRoundedRect PTR) AS GskRoundedRect PTR
DECLARE FUNCTION gsk_rounded_rect_offset(BYVAL AS GskRoundedRect PTR, BYVAL AS gfloat, BYVAL AS gfloat) AS GskRoundedRect PTR
DECLARE FUNCTION gsk_rounded_rect_shrink(BYVAL AS GskRoundedRect PTR, BYVAL AS gfloat, BYVAL AS gfloat, BYVAL AS gfloat, BYVAL AS gfloat) AS GskRoundedRect PTR
TYPE _GskShadow
  AS GdkRGBA color
  AS gfloat dx
  AS gfloat dy
  AS gfloat radius
END TYPE
DECLARE FUNCTION gsk_shadow_node_new(BYVAL AS GskRenderNode PTR, BYVAL AS GskShadow PTR, BYVAL AS gsize) AS GskRenderNode PTR
DECLARE FUNCTION gsk_texture_get_type() AS GType
#DEFINE GSK_TYPE_TEXTURE (gsk_texture_get_type())
#DEFINE GSK_TEXTURE(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), GSK_TYPE_TEXTURE, GskTexture))
#DEFINE GSK_TEXTURE_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST((obj), GSK_TYPE_TEXTURE, GskTextureClass))
#DEFINE GSK_IS_TEXTURE(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), GSK_TYPE_TEXTURE))
#DEFINE GSK_IS_CLASS_TEXTURE(obj) (G_TYPE_CHECK_CLASS_TYPE((obj), GSK_TYPE_TEXTURE))
#DEFINE GSK_TEXTURE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GSK_TYPE_TEXTURE, GskTextureClass))
DECLARE FUNCTION gsk_texture_new_for_data(BYVAL AS const guchar PTR, BYVAL AS gint, BYVAL AS gint, BYVAL AS gint) AS GskTexture PTR
DECLARE FUNCTION gsk_texture_new_for_pixbuf(BYVAL AS GdkPixbuf PTR) AS GskTexture PTR
DECLARE SUB gsk_texture_download(BYVAL AS GskTexture PTR, BYVAL AS guchar PTR, BYVAL AS gsize)
DECLARE FUNCTION gsk_texture_get_height(BYVAL AS GskTexture PTR) AS gint
DECLARE FUNCTION gsk_texture_get_width(BYVAL AS GskTexture PTR) AS gint
DECLARE FUNCTION gsk_texture_node_new(BYVAL AS GskTexture PTR, BYVAL AS const graphene_rect_t PTR) AS GskRenderNode PTR
' P_4

DECLARE FUNCTION gsk_blend_node_get_blend_mode(BYVAL AS GskRenderNode PTR) AS GskBlendMode
DECLARE FUNCTION gsk_blend_node_new(BYVAL AS GskRenderNode PTR, BYVAL AS GskRenderNode PTR, BYVAL AS GskBlendMode) AS GskRenderNode PTR
DECLARE FUNCTION gsk_border_node_new(BYVAL AS const GskRoundedRect PTR, BYVAL AS const gfloat, BYVAL AS const GdkRGBA) AS GskRenderNode PTR
DECLARE FUNCTION gsk_cairo_node_get_draw_context(BYVAL AS GskRenderNode PTR, BYVAL AS GskRenderer PTR) AS cairo_t PTR
DECLARE FUNCTION gsk_cairo_node_new(BYVAL AS const graphene_rect_t PTR) AS GskRenderNode PTR
DECLARE FUNCTION gsk_clip_node_get_child(BYVAL AS GskRenderNode PTR) AS GskRenderNode PTR
DECLARE FUNCTION gsk_clip_node_new(BYVAL AS GskRenderNode PTR, BYVAL AS const graphene_rect_t PTR) AS GskRenderNode PTR
DECLARE FUNCTION gsk_color_matrix_node_new(BYVAL AS GskRenderNode PTR, BYVAL AS const graphene_matrix_t PTR, BYVAL AS const graphene_vec4_t PTR) AS GskRenderNode PTR
DECLARE FUNCTION gsk_color_node_new(BYVAL AS const GdkRGBA PTR, BYVAL AS const graphene_rect_t PTR) AS GskRenderNode PTR
DECLARE FUNCTION gsk_container_node_get_child(BYVAL AS GskRenderNode PTR, BYVAL AS guint) AS GskRenderNode PTR
DECLARE FUNCTION gsk_container_node_get_n_children(BYVAL AS GskRenderNode PTR) AS guint
DECLARE FUNCTION gsk_container_node_new(BYVAL AS GskRenderNode PTR PTR, BYVAL AS guint) AS GskRenderNode PTR
DECLARE FUNCTION gsk_cross_fade_node_new(BYVAL AS GskRenderNode PTR, BYVAL AS GskRenderNode PTR, BYVAL AS double) AS GskRenderNode PTR
DECLARE FUNCTION gsk_inset_shadow_node_new(BYVAL AS const GskRoundedRect PTR, BYVAL AS const GdkRGBA PTR, BYVAL AS gfloat, BYVAL AS gfloat, BYVAL AS gfloat, BYVAL AS gfloat) AS GskRenderNode PTR
DECLARE FUNCTION gsk_linear_gradient_node_new(BYVAL AS const graphene_rect_t PTR, BYVAL AS const graphene_point_t PTR, BYVAL AS const graphene_point_t PTR, BYVAL AS const GskColorStop PTR, BYVAL AS gsize) AS GskRenderNode PTR
DECLARE FUNCTION gsk_opacity_node_get_child(BYVAL AS GskRenderNode PTR) AS GskRenderNode PTR
DECLARE FUNCTION gsk_opacity_node_new(BYVAL AS GskRenderNode PTR, BYVAL AS double) AS GskRenderNode PTR
DECLARE FUNCTION gsk_outset_shadow_node_new(BYVAL AS const GskRoundedRect PTR, BYVAL AS const GdkRGBA PTR, BYVAL AS gfloat, BYVAL AS gfloat, BYVAL AS gfloat, BYVAL AS gfloat) AS GskRenderNode PTR
DECLARE FUNCTION gsk_repeat_node_new(BYVAL AS const graphene_rect_t PTR, BYVAL AS GskRenderNode PTR, BYVAL AS const graphene_rect_t PTR) AS GskRenderNode PTR
DECLARE FUNCTION gsk_repeating_linear_gradient_node_new(BYVAL AS const graphene_rect_t PTR, BYVAL AS const graphene_point_t PTR, BYVAL AS const graphene_point_t PTR, BYVAL AS const GskColorStop PTR, BYVAL AS gsize) AS GskRenderNode PTR
DECLARE FUNCTION gsk_rounded_clip_node_get_child(BYVAL AS GskRenderNode PTR) AS GskRenderNode PTR
DECLARE FUNCTION gsk_rounded_clip_node_new(BYVAL AS GskRenderNode PTR, BYVAL AS const GskRoundedRect PTR) AS GskRenderNode PTR
DECLARE FUNCTION gsk_serialization_error_quark() AS GQuark
DECLARE FUNCTION gsk_transform_node_get_child(BYVAL AS GskRenderNode PTR) AS GskRenderNode PTR
DECLARE FUNCTION gsk_transform_node_new(BYVAL AS GskRenderNode PTR, BYVAL AS const graphene_matrix_t PTR) AS GskRenderNode PTR
END EXTERN

