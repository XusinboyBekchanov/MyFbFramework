'            FreeBasic header file, auto-generated by
'                       ### girtobac ###
' LGPLv2.1 (C) 2013-2022 by Thomas{ doT ]Freiherr[ At ]gmx[ DoT }net
' Auto-translated from file /usr/share/gir-1.0/GLib-2.0.gir
#INCLUDE ONCE "_GirToBac-0.0.bi"

' Repository version 1.2
TYPE AS guint8 GDateDay
TYPE AS guint16 GDateYear
TYPE AS any /'void'/ GMainContextPusher
TYPE AS any /'void'/ GMutexLocker
TYPE AS gint /'int'/ GPid
TYPE AS guint32 GQuark
TYPE AS any /'void'/ GRWLockReaderLocker
TYPE AS any /'void'/ GRWLockWriterLocker
TYPE AS any /'void'/ GRecMutexLocker
TYPE AS gint8 /'char'/ GRefString
TYPE AS gchar PTR PTR GStrv
TYPE AS gint32 GTime
TYPE AS gint64 GTimeSpan
TYPE AS gsize GType
#DEFINE G_ANALYZER_ANALYZING 1
#DEFINE G_ASCII_DTOSTR_BUF_SIZE 39
TYPE AS _GArray GArray
TYPE AS LONG GAsciiType
ENUM
  G_ASCII_ALNUM = 1
  G_ASCII_ALPHA = 2
  G_ASCII_CNTRL = 4
  G_ASCII_DIGIT = 8
  G_ASCII_GRAPH = 16
  G_ASCII_LOWER = 32
  G_ASCII_PRINT = 64
  G_ASCII_PUNCT = 128
  G_ASCII_SPACE = 256
  G_ASCII_UPPER = 512
  G_ASCII_XDIGIT = 1024
END ENUM
TYPE AS _GAsyncQueue GAsyncQueue
#DEFINE G_BIG_ENDIAN 4321
TYPE AS _GBookmarkFile GBookmarkFile
TYPE AS LONG GBookmarkFileError
ENUM
  G_BOOKMARK_FILE_ERROR_INVALID_URI = 0
  G_BOOKMARK_FILE_ERROR_INVALID_VALUE = 1
  G_BOOKMARK_FILE_ERROR_APP_NOT_REGISTERED = 2
  G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND = 3
  G_BOOKMARK_FILE_ERROR_READ = 4
  G_BOOKMARK_FILE_ERROR_UNKNOWN_ENCODING = 5
  G_BOOKMARK_FILE_ERROR_WRITE = 6
  G_BOOKMARK_FILE_ERROR_FILE_NOT_FOUND = 7
END ENUM
TYPE AS _GByteArray GByteArray
TYPE AS _GBytes GBytes
#DEFINE G_CSET_A_2_Z @!"ABCDEFGHIJKLMNOPQRSTUVWXYZ"
#DEFINE G_CSET_DIGITS @!"0123456789"
#DEFINE G_CSET_a_2_z_ /'G_CSET_a_2_z'/ @!"abcdefghijklmnopqrstuvwxyz"
TYPE AS _GChecksum GChecksum
TYPE AS LONG GChecksumType
ENUM
  G_CHECKSUM_MD5 = 0
  G_CHECKSUM_SHA1 = 1
  G_CHECKSUM_SHA256 = 2
  G_CHECKSUM_SHA512 = 3
  G_CHECKSUM_SHA384 = 4
END ENUM
TYPE AS _GCond GCond
TYPE AS LONG GConvertError
ENUM
  G_CONVERT_ERROR_NO_CONVERSION = 0
  G_CONVERT_ERROR_ILLEGAL_SEQUENCE = 1
  G_CONVERT_ERROR_FAILED = 2
  G_CONVERT_ERROR_PARTIAL_INPUT = 3
  G_CONVERT_ERROR_BAD_URI = 4
  G_CONVERT_ERROR_NOT_ABSOLUTE_PATH = 5
  G_CONVERT_ERROR_NO_MEMORY = 6
  G_CONVERT_ERROR_EMBEDDED_NUL = 7
END ENUM
#DEFINE G_DATALIST_FLAGS_MASK 3
#DEFINE G_DATE_BAD_DAY 0
#DEFINE G_DATE_BAD_JULIAN 0
#DEFINE G_DATE_BAD_YEAR 0
#DEFINE G_DIR_SEPARATOR 47
#DEFINE G_DIR_SEPARATOR_S @!"/"
TYPE AS _GData GData
TYPE AS _GDate GDate
TYPE AS LONG GDateDMY
ENUM
  G_DATE_DAY = 0
  G_DATE_MONTH = 1
  G_DATE_YEAR = 2
END ENUM
TYPE AS LONG GDateMonth
ENUM
  G_DATE_BAD_MONTH = 0
  G_DATE_JANUARY = 1
  G_DATE_FEBRUARY = 2
  G_DATE_MARCH = 3
  G_DATE_APRIL = 4
  G_DATE_MAY = 5
  G_DATE_JUNE = 6
  G_DATE_JULY = 7
  G_DATE_AUGUST = 8
  G_DATE_SEPTEMBER = 9
  G_DATE_OCTOBER = 10
  G_DATE_NOVEMBER = 11
  G_DATE_DECEMBER = 12
END ENUM
TYPE AS _GDateTime GDateTime
TYPE AS LONG GDateWeekday
ENUM
  G_DATE_BAD_WEEKDAY = 0
  G_DATE_MONDAY = 1
  G_DATE_TUESDAY = 2
  G_DATE_WEDNESDAY = 3
  G_DATE_THURSDAY = 4
  G_DATE_FRIDAY = 5
  G_DATE_SATURDAY = 6
  G_DATE_SUNDAY = 7
END ENUM
TYPE AS _GDebugKey GDebugKey
TYPE AS _GDir GDir
#DEFINE G_E 2.718282
TYPE AS _GError GError
TYPE AS LONG GErrorType
ENUM
  G_ERR_UNKNOWN = 0
  G_ERR_UNEXP_EOF = 1
  G_ERR_UNEXP_EOF_IN_STRING = 2
  G_ERR_UNEXP_EOF_IN_COMMENT = 3
  G_ERR_NON_DIGIT_IN_CONST = 4
  G_ERR_DIGIT_RADIX = 5
  G_ERR_FLOAT_RADIX = 6
  G_ERR_FLOAT_MALFORMED = 7
END ENUM
TYPE AS LONG GFileError
ENUM
  G_FILE_ERROR_EXIST = 0
  G_FILE_ERROR_ISDIR = 1
  G_FILE_ERROR_ACCES = 2
  G_FILE_ERROR_NAMETOOLONG = 3
  G_FILE_ERROR_NOENT = 4
  G_FILE_ERROR_NOTDIR = 5
  G_FILE_ERROR_NXIO = 6
  G_FILE_ERROR_NODEV = 7
  G_FILE_ERROR_ROFS = 8
  G_FILE_ERROR_TXTBSY = 9
  G_FILE_ERROR_FAULT = 10
  G_FILE_ERROR_LOOP = 11
  G_FILE_ERROR_NOSPC = 12
  G_FILE_ERROR_NOMEM = 13
  G_FILE_ERROR_MFILE = 14
  G_FILE_ERROR_NFILE = 15
  G_FILE_ERROR_BADF = 16
  G_FILE_ERROR_INVAL = 17
  G_FILE_ERROR_PIPE = 18
  G_FILE_ERROR_AGAIN = 19
  G_FILE_ERROR_INTR = 20
  G_FILE_ERROR_IO = 21
  G_FILE_ERROR_PERM = 22
  G_FILE_ERROR_NOSYS = 23
  G_FILE_ERROR_FAILED = 24
END ENUM
TYPE AS LONG GFileTest
ENUM
  G_FILE_TEST_IS_REGULAR = 1
  G_FILE_TEST_IS_SYMLINK = 2
  G_FILE_TEST_IS_DIR = 4
  G_FILE_TEST_IS_EXECUTABLE = 8
  G_FILE_TEST_EXISTS = 16
END ENUM
TYPE AS LONG GFormatSizeFlags
ENUM
  G_FORMAT_SIZE_DEFAULT = 0
  G_FORMAT_SIZE_LONG_FORMAT = 1
  G_FORMAT_SIZE_IEC_UNITS = 2
  G_FORMAT_SIZE_BITS = 4
END ENUM
#DEFINE G_GINT16_FORMAT @!"hi"
#DEFINE G_GINT16_MODIFIER @!"h"
#DEFINE G_GINT32_FORMAT @!"i"
#DEFINE G_GINT32_MODIFIER @!""
#DEFINE G_GINT64_FORMAT @!"li"
#DEFINE G_GINT64_MODIFIER @!"l"
#DEFINE G_GINTPTR_FORMAT @!"li"
#DEFINE G_GINTPTR_MODIFIER @!"l"
#DEFINE G_GNUC_FUNCTION @!""
#DEFINE G_GNUC_PRETTY_FUNCTION @!""
#DEFINE G_GSIZE_FORMAT @!"lu"
#DEFINE G_GSIZE_MODIFIER @!"l"
#DEFINE G_GSSIZE_FORMAT @!"li"
#DEFINE G_GSSIZE_MODIFIER @!"l"
#DEFINE G_GUINT16_FORMAT @!"hu"
#DEFINE G_GUINT32_FORMAT @!"u"
#DEFINE G_GUINT64_FORMAT @!"lu"
#DEFINE G_GUINTPTR_FORMAT @!"lu"
#DEFINE G_HAVE_GINT64 1
#DEFINE G_HAVE_GNUC_VARARGS 1
#DEFINE G_HAVE_GNUC_VISIBILITY 1
#DEFINE G_HAVE_GROWING_STACK 0
#DEFINE G_HAVE_ISO_VARARGS 1
#DEFINE G_HOOK_FLAG_USER_SHIFT 4
TYPE AS _GHashTable GHashTable
TYPE AS _GHashTableIter GHashTableIter
TYPE AS _GHmac GHmac
TYPE AS _GHook GHook
TYPE AS LONG GHookFlagMask
ENUM
  G_HOOK_FLAG_ACTIVE = 1
  G_HOOK_FLAG_IN_CALL = 2
  G_HOOK_FLAG_MASK = 15
END ENUM
TYPE AS _GHookList GHookList
TYPE AS _GIConv GIConv
#DEFINE G_IEEE754_DOUBLE_BIAS 1023
#DEFINE G_IEEE754_FLOAT_BIAS 127
TYPE AS _GIOChannel GIOChannel
TYPE AS LONG GIOChannelError
ENUM
  G_IO_CHANNEL_ERROR_FBIG = 0
  G_IO_CHANNEL_ERROR_INVAL = 1
  G_IO_CHANNEL_ERROR_IO = 2
  G_IO_CHANNEL_ERROR_ISDIR = 3
  G_IO_CHANNEL_ERROR_NOSPC = 4
  G_IO_CHANNEL_ERROR_NXIO = 5
  G_IO_CHANNEL_ERROR_OVERFLOW = 6
  G_IO_CHANNEL_ERROR_PIPE = 7
  G_IO_CHANNEL_ERROR_FAILED = 8
END ENUM
TYPE AS LONG GIOCondition
ENUM
  G_IO_IN = 1
  G_IO_OUT = 4
  G_IO_PRI = 2
  G_IO_ERR = 8
  G_IO_HUP = 16
  G_IO_NVAL = 32
END ENUM
TYPE AS LONG GIOError
ENUM
  G_IO_ERROR_NONE = 0
  G_IO_ERROR_AGAIN = 1
  G_IO_ERROR_INVAL = 2
  G_IO_ERROR_UNKNOWN = 3
END ENUM
TYPE AS LONG GIOFlags
ENUM
  G_IO_FLAG_APPEND = 1
  G_IO_FLAG_NONBLOCK = 2
  G_IO_FLAG_IS_READABLE = 4
  G_IO_FLAG_IS_WRITABLE = 8
  G_IO_FLAG_IS_WRITEABLE = 8
  G_IO_FLAG_IS_SEEKABLE = 16
  G_IO_FLAG_MASK = 31
  G_IO_FLAG_GET_MASK = 31
  G_IO_FLAG_SET_MASK = 3
END ENUM
TYPE AS _GIOFuncs GIOFuncs
TYPE AS LONG GIOStatus
ENUM
  G_IO_STATUS_ERROR = 0
  G_IO_STATUS_NORMAL = 1
  G_IO_STATUS_EOF = 2
  G_IO_STATUS_AGAIN = 3
END ENUM
#DEFINE G_KEY_FILE_DESKTOP_GROUP @!"Desktop Entry"
#DEFINE G_KEY_FILE_DESKTOP_KEY_ACTIONS @!"Actions"
#DEFINE G_KEY_FILE_DESKTOP_KEY_CATEGORIES @!"Categories"
#DEFINE G_KEY_FILE_DESKTOP_KEY_COMMENT @!"Comment"
#DEFINE G_KEY_FILE_DESKTOP_KEY_DBUS_ACTIVATABLE @!"DBusActivatable"
#DEFINE G_KEY_FILE_DESKTOP_KEY_EXEC @!"Exec"
#DEFINE G_KEY_FILE_DESKTOP_KEY_GENERIC_NAME @!"GenericName"
#DEFINE G_KEY_FILE_DESKTOP_KEY_HIDDEN @!"Hidden"
#DEFINE G_KEY_FILE_DESKTOP_KEY_ICON @!"Icon"
#DEFINE G_KEY_FILE_DESKTOP_KEY_MIME_TYPE @!"MimeType"
#DEFINE G_KEY_FILE_DESKTOP_KEY_NAME @!"Name"
#DEFINE G_KEY_FILE_DESKTOP_KEY_NOT_SHOW_IN @!"NotShowIn"
#DEFINE G_KEY_FILE_DESKTOP_KEY_NO_DISPLAY @!"NoDisplay"
#DEFINE G_KEY_FILE_DESKTOP_KEY_ONLY_SHOW_IN @!"OnlyShowIn"
#DEFINE G_KEY_FILE_DESKTOP_KEY_PATH @!"Path"
#DEFINE G_KEY_FILE_DESKTOP_KEY_STARTUP_NOTIFY @!"StartupNotify"
#DEFINE G_KEY_FILE_DESKTOP_KEY_STARTUP_WM_CLASS @!"StartupWMClass"
#DEFINE G_KEY_FILE_DESKTOP_KEY_TERMINAL @!"Terminal"
#DEFINE G_KEY_FILE_DESKTOP_KEY_TRY_EXEC @!"TryExec"
#DEFINE G_KEY_FILE_DESKTOP_KEY_TYPE @!"Type"
#DEFINE G_KEY_FILE_DESKTOP_KEY_URL @!"URL"
#DEFINE G_KEY_FILE_DESKTOP_KEY_VERSION @!"Version"
#DEFINE G_KEY_FILE_DESKTOP_TYPE_APPLICATION @!"Application"
#DEFINE G_KEY_FILE_DESKTOP_TYPE_DIRECTORY @!"Directory"
#DEFINE G_KEY_FILE_DESKTOP_TYPE_LINK @!"Link"
TYPE AS _GKeyFile GKeyFile
TYPE AS LONG GKeyFileError
ENUM
  G_KEY_FILE_ERROR_UNKNOWN_ENCODING = 0
  G_KEY_FILE_ERROR_PARSE = 1
  G_KEY_FILE_ERROR_NOT_FOUND = 2
  G_KEY_FILE_ERROR_KEY_NOT_FOUND = 3
  G_KEY_FILE_ERROR_GROUP_NOT_FOUND = 4
  G_KEY_FILE_ERROR_INVALID_VALUE = 5
END ENUM
TYPE AS LONG GKeyFileFlags
ENUM
  G_KEY_FILE_NONE = 0
  G_KEY_FILE_KEEP_COMMENTS = 1
  G_KEY_FILE_KEEP_TRANSLATIONS = 2
END ENUM
#DEFINE G_LITTLE_ENDIAN 1234
#DEFINE G_LN10 2.302585
#DEFINE G_LN2 0.693147
#DEFINE G_LOG_2_BASE_10 0.301030
#DEFINE G_LOG_DOMAIN 0
#DEFINE G_LOG_FATAL_MASK 5
#DEFINE G_LOG_LEVEL_USER_SHIFT 8
TYPE AS _GList GList
TYPE AS _GLogField GLogField
TYPE AS LONG GLogLevelFlags
ENUM
  G_LOG_FLAG_RECURSION = 1
  G_LOG_FLAG_FATAL = 2
  G_LOG_LEVEL_ERROR = 4
  G_LOG_LEVEL_CRITICAL = 8
  G_LOG_LEVEL_WARNING = 16
  G_LOG_LEVEL_MESSAGE = 32
  G_LOG_LEVEL_INFO = 64
  G_LOG_LEVEL_DEBUG = 128
  G_LOG_LEVEL_MASK = -4
END ENUM
TYPE AS LONG GLogWriterOutput
ENUM
  G_LOG_WRITER_HANDLED = 1
  G_LOG_WRITER_UNHANDLED = 0
END ENUM
#DEFINE GLIB_MAJOR_VERSION 2
#DEFINE G_MAXINT16 32767
#DEFINE G_MAXINT32 2147483647
#DEFINE G_MAXINT64 9223372036854775807
#DEFINE G_MAXINT8 127
#DEFINE G_MAXUINT16 65535
#DEFINE G_MAXUINT32 4294967295
#DEFINE G_MAXUINT64 18446744073709551615
#DEFINE G_MAXUINT8 255
#DEFINE GLIB_MICRO_VERSION 1
#DEFINE G_MININT16 -32768
#DEFINE G_MININT32 -2147483648
#DEFINE G_MININT64 -9223372036854775808
#DEFINE G_MININT8 -128
#DEFINE GLIB_MINOR_VERSION 64
#DEFINE G_MODULE_SUFFIX @!"so"
TYPE AS _GMainContext GMainContext
TYPE AS _GMainLoop GMainLoop
TYPE AS _GMappedFile GMappedFile
TYPE AS LONG GMarkupCollectType
ENUM
  G_MARKUP_COLLECT_INVALID = 0
  G_MARKUP_COLLECT_STRING = 1
  G_MARKUP_COLLECT_STRDUP = 2
  G_MARKUP_COLLECT_BOOLEAN = 3
  G_MARKUP_COLLECT_TRISTATE = 4
  G_MARKUP_COLLECT_OPTIONAL = 65536
END ENUM
TYPE AS LONG GMarkupError
ENUM
  G_MARKUP_ERROR_BAD_UTF8 = 0
  G_MARKUP_ERROR_EMPTY = 1
  G_MARKUP_ERROR_PARSE = 2
  G_MARKUP_ERROR_UNKNOWN_ELEMENT = 3
  G_MARKUP_ERROR_UNKNOWN_ATTRIBUTE = 4
  G_MARKUP_ERROR_INVALID_CONTENT = 5
  G_MARKUP_ERROR_MISSING_ATTRIBUTE = 6
END ENUM
TYPE AS _GMarkupParseContext GMarkupParseContext
TYPE AS LONG GMarkupParseFlags
ENUM
  G_MARKUP_DO_NOT_USE_THIS_UNSUPPORTED_FLAG = 1
  G_MARKUP_TREAT_CDATA_AS_TEXT = 2
  G_MARKUP_PREFIX_ERROR_POSITION = 4
  G_MARKUP_IGNORE_QUALIFIED = 8
END ENUM
TYPE AS _GMarkupParser GMarkupParser
TYPE AS _GMatchInfo GMatchInfo
TYPE AS _GMemVTable GMemVTable
TYPE AS _GNode GNode
TYPE AS LONG GNormalizeMode
ENUM
  G_NORMALIZE_DEFAULT = 0
  G_NORMALIZE_NFD = 0
  G_NORMALIZE_DEFAULT_COMPOSE = 1
  G_NORMALIZE_NFC = 1
  G_NORMALIZE_ALL = 2
  G_NORMALIZE_NFKD = 2
  G_NORMALIZE_ALL_COMPOSE = 3
  G_NORMALIZE_NFKC = 3
END ENUM
TYPE AS LONG GNumberParserError
ENUM
  G_NUMBER_PARSER_ERROR_INVALID = 0
  G_NUMBER_PARSER_ERROR_OUT_OF_BOUNDS = 1
END ENUM
#DEFINE G_OPTION_REMAINING @!""
TYPE AS _GOnce GOnce
TYPE AS LONG GOnceStatus
ENUM
  G_ONCE_STATUS_NOTCALLED = 0
  G_ONCE_STATUS_PROGRESS = 1
  G_ONCE_STATUS_READY = 2
END ENUM
TYPE AS LONG GOptionArg
ENUM
  G_OPTION_ARG_NONE = 0
  G_OPTION_ARG_STRING = 1
  G_OPTION_ARG_INT = 2
  G_OPTION_ARG_CALLBACK = 3
  G_OPTION_ARG_FILENAME = 4
  G_OPTION_ARG_STRING_ARRAY = 5
  G_OPTION_ARG_FILENAME_ARRAY = 6
  G_OPTION_ARG_DOUBLE = 7
  G_OPTION_ARG_INT64 = 8
END ENUM
TYPE AS _GOptionContext GOptionContext
TYPE AS _GOptionEntry GOptionEntry
TYPE AS LONG GOptionError
ENUM
  G_OPTION_ERROR_UNKNOWN_OPTION = 0
  G_OPTION_ERROR_BAD_VALUE = 1
  G_OPTION_ERROR_FAILED = 2
END ENUM
TYPE AS LONG GOptionFlags
ENUM
  G_OPTION_FLAG_NONE = 0
  G_OPTION_FLAG_HIDDEN = 1
  G_OPTION_FLAG_IN_MAIN = 2
  G_OPTION_FLAG_REVERSE = 4
  G_OPTION_FLAG_NO_ARG = 8
  G_OPTION_FLAG_FILENAME = 16
  G_OPTION_FLAG_OPTIONAL_ARG = 32
  G_OPTION_FLAG_NOALIAS = 64
END ENUM
TYPE AS _GOptionGroup GOptionGroup
#DEFINE G_PDP_ENDIAN 3412
#DEFINE G_PI 3.141593
#DEFINE G_PID_FORMAT @!"i"
#DEFINE G_PI_2 1.570796
#DEFINE G_PI_4 0.785398
#DEFINE G_POLLFD_FORMAT @!"%d"
#DEFINE G_PRIORITY_DEFAULT 0
#DEFINE G_PRIORITY_DEFAULT_IDLE 200
#DEFINE G_PRIORITY_HIGH -100
#DEFINE G_PRIORITY_HIGH_IDLE 100
#DEFINE G_PRIORITY_LOW 300
TYPE AS _GPatternSpec GPatternSpec
TYPE AS _GPollFD GPollFD
TYPE AS _GPrivate GPrivate
TYPE AS _GPtrArray GPtrArray
TYPE AS _GQueue GQueue
TYPE AS _GRWLock GRWLock
TYPE AS _GRand GRand
TYPE AS _GRecMutex GRecMutex
TYPE AS _GRegex GRegex
TYPE AS LONG GRegexCompileFlags
ENUM
  G_REGEX_CASELESS = 1
  G_REGEX_MULTILINE = 2
  G_REGEX_DOTALL = 4
  G_REGEX_EXTENDED = 8
  G_REGEX_ANCHORED = 16
  G_REGEX_DOLLAR_ENDONLY = 32
  G_REGEX_UNGREEDY = 512
  G_REGEX_RAW = 2048
  G_REGEX_NO_AUTO_CAPTURE = 4096
  G_REGEX_OPTIMIZE = 8192
  G_REGEX_FIRSTLINE = 262144
  G_REGEX_DUPNAMES = 524288
  G_REGEX_NEWLINE_CR = 1048576
  G_REGEX_NEWLINE_LF = 2097152
  G_REGEX_NEWLINE_CRLF = 3145728
  G_REGEX_NEWLINE_ANYCRLF = 5242880
  G_REGEX_BSR_ANYCRLF = 8388608
  G_REGEX_JAVASCRIPT_COMPAT = 33554432
END ENUM
TYPE AS LONG GRegexError
ENUM
  G_REGEX_ERROR_COMPILE = 0
  G_REGEX_ERROR_OPTIMIZE = 1
  G_REGEX_ERROR_REPLACE = 2
  G_REGEX_ERROR_MATCH = 3
  G_REGEX_ERROR_INTERNAL = 4
  G_REGEX_ERROR_STRAY_BACKSLASH = 101
  G_REGEX_ERROR_MISSING_CONTROL_CHAR = 102
  G_REGEX_ERROR_UNRECOGNIZED_ESCAPE = 103
  G_REGEX_ERROR_QUANTIFIERS_OUT_OF_ORDER = 104
  G_REGEX_ERROR_QUANTIFIER_TOO_BIG = 105
  G_REGEX_ERROR_UNTERMINATED_CHARACTER_CLASS = 106
  G_REGEX_ERROR_INVALID_ESCAPE_IN_CHARACTER_CLASS = 107
  G_REGEX_ERROR_RANGE_OUT_OF_ORDER = 108
  G_REGEX_ERROR_NOTHING_TO_REPEAT = 109
  G_REGEX_ERROR_UNRECOGNIZED_CHARACTER = 112
  G_REGEX_ERROR_POSIX_NAMED_CLASS_OUTSIDE_CLASS = 113
  G_REGEX_ERROR_UNMATCHED_PARENTHESIS = 114
  G_REGEX_ERROR_INEXISTENT_SUBPATTERN_REFERENCE = 115
  G_REGEX_ERROR_UNTERMINATED_COMMENT = 118
  G_REGEX_ERROR_EXPRESSION_TOO_LARGE = 120
  G_REGEX_ERROR_MEMORY_ERROR = 121
  G_REGEX_ERROR_VARIABLE_LENGTH_LOOKBEHIND = 125
  G_REGEX_ERROR_MALFORMED_CONDITION = 126
  G_REGEX_ERROR_TOO_MANY_CONDITIONAL_BRANCHES = 127
  G_REGEX_ERROR_ASSERTION_EXPECTED = 128
  G_REGEX_ERROR_UNKNOWN_POSIX_CLASS_NAME = 130
  G_REGEX_ERROR_POSIX_COLLATING_ELEMENTS_NOT_SUPPORTED = 131
  G_REGEX_ERROR_HEX_CODE_TOO_LARGE = 134
  G_REGEX_ERROR_INVALID_CONDITION = 135
  G_REGEX_ERROR_SINGLE_BYTE_MATCH_IN_LOOKBEHIND = 136
  G_REGEX_ERROR_INFINITE_LOOP = 140
  G_REGEX_ERROR_MISSING_SUBPATTERN_NAME_TERMINATOR = 142
  G_REGEX_ERROR_DUPLICATE_SUBPATTERN_NAME = 143
  G_REGEX_ERROR_MALFORMED_PROPERTY = 146
  G_REGEX_ERROR_UNKNOWN_PROPERTY = 147
  G_REGEX_ERROR_SUBPATTERN_NAME_TOO_LONG = 148
  G_REGEX_ERROR_TOO_MANY_SUBPATTERNS = 149
  G_REGEX_ERROR_INVALID_OCTAL_VALUE = 151
  G_REGEX_ERROR_TOO_MANY_BRANCHES_IN_DEFINE = 154
  G_REGEX_ERROR_DEFINE_REPETION = 155
  G_REGEX_ERROR_INCONSISTENT_NEWLINE_OPTIONS = 156
  G_REGEX_ERROR_MISSING_BACK_REFERENCE = 157
  G_REGEX_ERROR_INVALID_RELATIVE_REFERENCE = 158
  G_REGEX_ERROR_BACKTRACKING_CONTROL_VERB_ARGUMENT_FORBIDDEN = 159
  G_REGEX_ERROR_UNKNOWN_BACKTRACKING_CONTROL_VERB = 160
  G_REGEX_ERROR_NUMBER_TOO_BIG = 161
  G_REGEX_ERROR_MISSING_SUBPATTERN_NAME = 162
  G_REGEX_ERROR_MISSING_DIGIT = 163
  G_REGEX_ERROR_INVALID_DATA_CHARACTER = 164
  G_REGEX_ERROR_EXTRA_SUBPATTERN_NAME = 165
  G_REGEX_ERROR_BACKTRACKING_CONTROL_VERB_ARGUMENT_REQUIRED = 166
  G_REGEX_ERROR_INVALID_CONTROL_CHAR = 168
  G_REGEX_ERROR_MISSING_NAME = 169
  G_REGEX_ERROR_NOT_SUPPORTED_IN_CLASS = 171
  G_REGEX_ERROR_TOO_MANY_FORWARD_REFERENCES = 172
  G_REGEX_ERROR_NAME_TOO_LONG = 175
  G_REGEX_ERROR_CHARACTER_VALUE_TOO_LARGE = 176
END ENUM
TYPE AS LONG GRegexMatchFlags
ENUM
  G_REGEX_MATCH_ANCHORED = 16
  G_REGEX_MATCH_NOTBOL = 128
  G_REGEX_MATCH_NOTEOL = 256
  G_REGEX_MATCH_NOTEMPTY = 1024
  G_REGEX_MATCH_PARTIAL = 32768
  G_REGEX_MATCH_NEWLINE_CR = 1048576
  G_REGEX_MATCH_NEWLINE_LF = 2097152
  G_REGEX_MATCH_NEWLINE_CRLF = 3145728
  G_REGEX_MATCH_NEWLINE_ANY = 4194304
  G_REGEX_MATCH_NEWLINE_ANYCRLF = 5242880
  G_REGEX_MATCH_BSR_ANYCRLF = 8388608
  G_REGEX_MATCH_BSR_ANY = 16777216
  G_REGEX_MATCH_PARTIAL_SOFT = 32768
  G_REGEX_MATCH_PARTIAL_HARD = 134217728
  G_REGEX_MATCH_NOTEMPTY_ATSTART = 268435456
END ENUM
#DEFINE G_SEARCHPATH_SEPARATOR 58
#DEFINE G_SEARCHPATH_SEPARATOR_S @!":"
#DEFINE GLIB_SIZEOF_LONG 8
#DEFINE GLIB_SIZEOF_SIZE_T 8
#DEFINE GLIB_SIZEOF_SSIZE_T 8
#DEFINE GLIB_SIZEOF_VOID_P 8
TYPE AS _GSList GSList
#DEFINE G_SOURCE_CONTINUE true
#DEFINE G_SOURCE_REMOVE false
#DEFINE G_SQRT2 1.414214
#DEFINE G_STR_DELIMITERS @!"_-|> <."
#DEFINE GLIB_SYSDEF_AF_INET 2
#DEFINE GLIB_SYSDEF_AF_INET6 10
#DEFINE GLIB_SYSDEF_AF_UNIX 1
#DEFINE GLIB_SYSDEF_MSG_DONTROUTE 4
#DEFINE GLIB_SYSDEF_MSG_OOB 1
#DEFINE GLIB_SYSDEF_MSG_PEEK 2
TYPE AS _GScanner GScanner
TYPE AS _GScannerConfig GScannerConfig
TYPE AS LONG GSeekType
ENUM
  G_SEEK_CUR = 0
  G_SEEK_SET = 1
  G_SEEK_END = 2
END ENUM
TYPE AS _GSequence GSequence
TYPE AS _GSequenceIter GSequenceIter
TYPE AS LONG GShellError
ENUM
  G_SHELL_ERROR_BAD_QUOTING = 0
  G_SHELL_ERROR_EMPTY_STRING = 1
  G_SHELL_ERROR_FAILED = 2
END ENUM
TYPE AS LONG GSliceConfig
ENUM
  G_SLICE_CONFIG_ALWAYS_MALLOC = 1
  G_SLICE_CONFIG_BYPASS_MAGAZINES = 2
  G_SLICE_CONFIG_WORKING_SET_MSECS = 3
  G_SLICE_CONFIG_COLOR_INCREMENT = 4
  G_SLICE_CONFIG_CHUNK_SIZES = 5
  G_SLICE_CONFIG_CONTENTION_COUNTER = 6
END ENUM
TYPE AS _GSource GSource
TYPE AS _GSourceCallbackFuncs GSourceCallbackFuncs
TYPE AS _GSourceFuncs GSourceFuncs
TYPE AS _GSourcePrivate GSourcePrivate
TYPE AS LONG GSpawnError
ENUM
  G_SPAWN_ERROR_FORK = 0
  G_SPAWN_ERROR_READ = 1
  G_SPAWN_ERROR_CHDIR = 2
  G_SPAWN_ERROR_ACCES = 3
  G_SPAWN_ERROR_PERM = 4
  G_SPAWN_ERROR_TOO_BIG = 5
  G_SPAWN_ERROR_2BIG = 5
  G_SPAWN_ERROR_NOEXEC = 6
  G_SPAWN_ERROR_NAMETOOLONG = 7
  G_SPAWN_ERROR_NOENT = 8
  G_SPAWN_ERROR_NOMEM = 9
  G_SPAWN_ERROR_NOTDIR = 10
  G_SPAWN_ERROR_LOOP = 11
  G_SPAWN_ERROR_TXTBUSY = 12
  G_SPAWN_ERROR_IO = 13
  G_SPAWN_ERROR_NFILE = 14
  G_SPAWN_ERROR_MFILE = 15
  G_SPAWN_ERROR_INVAL = 16
  G_SPAWN_ERROR_ISDIR = 17
  G_SPAWN_ERROR_LIBBAD = 18
  G_SPAWN_ERROR_FAILED = 19
END ENUM
TYPE AS LONG GSpawnFlags
ENUM
  G_SPAWN_DEFAULT = 0
  G_SPAWN_LEAVE_DESCRIPTORS_OPEN = 1
  G_SPAWN_DO_NOT_REAP_CHILD = 2
  G_SPAWN_SEARCH_PATH = 4
  G_SPAWN_STDOUT_TO_DEV_NULL = 8
  G_SPAWN_STDERR_TO_DEV_NULL = 16
  G_SPAWN_CHILD_INHERITS_STDIN = 32
  G_SPAWN_FILE_AND_ARGV_ZERO = 64
  G_SPAWN_SEARCH_PATH_FROM_ENVP = 128
  G_SPAWN_CLOEXEC_PIPES = 256
END ENUM
TYPE AS _GStatBuf GStatBuf
TYPE AS _GString GString
TYPE AS _GStringChunk GStringChunk
#DEFINE G_TEST_OPTION_ISOLATE_DIRS @!"isolate_dirs"
#DEFINE G_TIME_SPAN_DAY 86400000000
#DEFINE G_TIME_SPAN_HOUR 3600000000
#DEFINE G_TIME_SPAN_MILLISECOND 1000
#DEFINE G_TIME_SPAN_MINUTE 60000000
#DEFINE G_TIME_SPAN_SECOND 1000000
TYPE AS _GTestCase GTestCase
TYPE AS _GTestConfig GTestConfig
TYPE AS LONG GTestFileType
ENUM
  G_TEST_DIST = 0
  G_TEST_BUILT = 1
END ENUM
TYPE AS _GTestLogBuffer GTestLogBuffer
TYPE AS _GTestLogMsg GTestLogMsg
TYPE AS LONG GTestLogType
ENUM
  G_TEST_LOG_NONE = 0
  G_TEST_LOG_ERROR = 1
  G_TEST_LOG_START_BINARY = 2
  G_TEST_LOG_LIST_CASE = 3
  G_TEST_LOG_SKIP_CASE = 4
  G_TEST_LOG_START_CASE = 5
  G_TEST_LOG_STOP_CASE = 6
  G_TEST_LOG_MIN_RESULT = 7
  G_TEST_LOG_MAX_RESULT = 8
  G_TEST_LOG_MESSAGE = 9
  G_TEST_LOG_START_SUITE = 10
  G_TEST_LOG_STOP_SUITE = 11
END ENUM
TYPE AS LONG GTestResult
ENUM
  G_TEST_RUN_SUCCESS = 0
  G_TEST_RUN_SKIPPED = 1
  G_TEST_RUN_FAILURE = 2
  G_TEST_RUN_INCOMPLETE = 3
END ENUM
TYPE AS LONG GTestSubprocessFlags
ENUM
  G_TEST_SUBPROCESS_INHERIT_STDIN = 1
  G_TEST_SUBPROCESS_INHERIT_STDOUT = 2
  G_TEST_SUBPROCESS_INHERIT_STDERR = 4
END ENUM
TYPE AS _GTestSuite GTestSuite
TYPE AS LONG GTestTrapFlags
ENUM
  G_TEST_TRAP_SILENCE_STDOUT = 128
  G_TEST_TRAP_SILENCE_STDERR = 256
  G_TEST_TRAP_INHERIT_STDIN = 512
END ENUM
TYPE AS _GThread GThread
TYPE AS LONG GThreadError
ENUM
  G_THREAD_ERROR_AGAIN = 0
END ENUM
TYPE AS _GThreadPool GThreadPool
TYPE AS LONG GTimeType
ENUM
  G_TIME_TYPE_STANDARD = 0
  G_TIME_TYPE_DAYLIGHT = 1
  G_TIME_TYPE_UNIVERSAL = 2
END ENUM
TYPE AS _GTimeVal GTimeVal
TYPE AS _GTimeZone GTimeZone
TYPE AS _GTimer GTimer
TYPE AS LONG GTokenType
ENUM
  G_TOKEN_EOF = 0
  G_TOKEN_LEFT_PAREN = 40
  G_TOKEN_RIGHT_PAREN = 41
  G_TOKEN_LEFT_CURLY = 123
  G_TOKEN_RIGHT_CURLY = 125
  G_TOKEN_LEFT_BRACE = 91
  G_TOKEN_RIGHT_BRACE = 93
  G_TOKEN_EQUAL_SIGN = 61
  G_TOKEN_COMMA = 44
  G_TOKEN_NONE = 256
  G_TOKEN_ERROR = 257
  G_TOKEN_CHAR = 258
  G_TOKEN_BINARY = 259
  G_TOKEN_OCTAL = 260
  G_TOKEN_INT = 261
  G_TOKEN_HEX = 262
  G_TOKEN_FLOAT = 263
  G_TOKEN_STRING = 264
  G_TOKEN_SYMBOL = 265
  G_TOKEN_IDENTIFIER = 266
  G_TOKEN_IDENTIFIER_NULL = 267
  G_TOKEN_COMMENT_SINGLE = 268
  G_TOKEN_COMMENT_MULTI = 269
END ENUM
TYPE AS _GTrashStack GTrashStack
TYPE AS LONG GTraverseFlags
ENUM
  G_TRAVERSE_LEAVES = 1
  G_TRAVERSE_NON_LEAVES = 2
  G_TRAVERSE_ALL = 3
  G_TRAVERSE_MASK = 3
  G_TRAVERSE_LEAFS = 1
  G_TRAVERSE_NON_LEAFS = 2
END ENUM
TYPE AS LONG GTraverseType
ENUM
  G_IN_ORDER = 0
  G_PRE_ORDER = 1
  G_POST_ORDER = 2
  G_LEVEL_ORDER = 3
END ENUM
TYPE AS _GTree GTree
#DEFINE G_UNICHAR_MAX_DECOMPOSITION_LENGTH 18
#DEFINE G_URI_RESERVED_CHARS_GENERIC_DELIMITERS @!":/?#[]@"
#DEFINE G_URI_RESERVED_CHARS_SUBCOMPONENT_DELIMITERS @!"!$&'()*+,;="
#DEFINE G_USEC_PER_SEC 1000000
TYPE AS LONG GUnicodeBreakType
ENUM
  G_UNICODE_BREAK_MANDATORY = 0
  G_UNICODE_BREAK_CARRIAGE_RETURN = 1
  G_UNICODE_BREAK_LINE_FEED = 2
  G_UNICODE_BREAK_COMBINING_MARK = 3
  G_UNICODE_BREAK_SURROGATE = 4
  G_UNICODE_BREAK_ZERO_WIDTH_SPACE = 5
  G_UNICODE_BREAK_INSEPARABLE = 6
  G_UNICODE_BREAK_NON_BREAKING_GLUE = 7
  G_UNICODE_BREAK_CONTINGENT = 8
  G_UNICODE_BREAK_SPACE = 9
  G_UNICODE_BREAK_AFTER = 10
  G_UNICODE_BREAK_BEFORE = 11
  G_UNICODE_BREAK_BEFORE_AND_AFTER = 12
  G_UNICODE_BREAK_HYPHEN = 13
  G_UNICODE_BREAK_NON_STARTER = 14
  G_UNICODE_BREAK_OPEN_PUNCTUATION = 15
  G_UNICODE_BREAK_CLOSE_PUNCTUATION = 16
  G_UNICODE_BREAK_QUOTATION = 17
  G_UNICODE_BREAK_EXCLAMATION = 18
  G_UNICODE_BREAK_IDEOGRAPHIC = 19
  G_UNICODE_BREAK_NUMERIC = 20
  G_UNICODE_BREAK_INFIX_SEPARATOR = 21
  G_UNICODE_BREAK_SYMBOL = 22
  G_UNICODE_BREAK_ALPHABETIC = 23
  G_UNICODE_BREAK_PREFIX = 24
  G_UNICODE_BREAK_POSTFIX = 25
  G_UNICODE_BREAK_COMPLEX_CONTEXT = 26
  G_UNICODE_BREAK_AMBIGUOUS = 27
  G_UNICODE_BREAK_UNKNOWN = 28
  G_UNICODE_BREAK_NEXT_LINE = 29
  G_UNICODE_BREAK_WORD_JOINER = 30
  G_UNICODE_BREAK_HANGUL_L_JAMO = 31
  G_UNICODE_BREAK_HANGUL_V_JAMO = 32
  G_UNICODE_BREAK_HANGUL_T_JAMO = 33
  G_UNICODE_BREAK_HANGUL_LV_SYLLABLE = 34
  G_UNICODE_BREAK_HANGUL_LVT_SYLLABLE = 35
  G_UNICODE_BREAK_CLOSE_PARANTHESIS = 36
  G_UNICODE_BREAK_CONDITIONAL_JAPANESE_STARTER = 37
  G_UNICODE_BREAK_HEBREW_LETTER = 38
  G_UNICODE_BREAK_REGIONAL_INDICATOR = 39
  G_UNICODE_BREAK_EMOJI_BASE = 40
  G_UNICODE_BREAK_EMOJI_MODIFIER = 41
  G_UNICODE_BREAK_ZERO_WIDTH_JOINER = 42
END ENUM
TYPE AS LONG GUnicodeScript
ENUM
  G_UNICODE_SCRIPT_INVALID_CODE = -1
  G_UNICODE_SCRIPT_COMMON = 0
  G_UNICODE_SCRIPT_INHERITED = 1
  G_UNICODE_SCRIPT_ARABIC = 2
  G_UNICODE_SCRIPT_ARMENIAN = 3
  G_UNICODE_SCRIPT_BENGALI = 4
  G_UNICODE_SCRIPT_BOPOMOFO = 5
  G_UNICODE_SCRIPT_CHEROKEE = 6
  G_UNICODE_SCRIPT_COPTIC = 7
  G_UNICODE_SCRIPT_CYRILLIC = 8
  G_UNICODE_SCRIPT_DESERET = 9
  G_UNICODE_SCRIPT_DEVANAGARI = 10
  G_UNICODE_SCRIPT_ETHIOPIC = 11
  G_UNICODE_SCRIPT_GEORGIAN = 12
  G_UNICODE_SCRIPT_GOTHIC = 13
  G_UNICODE_SCRIPT_GREEK = 14
  G_UNICODE_SCRIPT_GUJARATI = 15
  G_UNICODE_SCRIPT_GURMUKHI = 16
  G_UNICODE_SCRIPT_HAN = 17
  G_UNICODE_SCRIPT_HANGUL = 18
  G_UNICODE_SCRIPT_HEBREW = 19
  G_UNICODE_SCRIPT_HIRAGANA = 20
  G_UNICODE_SCRIPT_KANNADA = 21
  G_UNICODE_SCRIPT_KATAKANA = 22
  G_UNICODE_SCRIPT_KHMER = 23
  G_UNICODE_SCRIPT_LAO = 24
  G_UNICODE_SCRIPT_LATIN = 25
  G_UNICODE_SCRIPT_MALAYALAM = 26
  G_UNICODE_SCRIPT_MONGOLIAN = 27
  G_UNICODE_SCRIPT_MYANMAR = 28
  G_UNICODE_SCRIPT_OGHAM = 29
  G_UNICODE_SCRIPT_OLD_ITALIC = 30
  G_UNICODE_SCRIPT_ORIYA = 31
  G_UNICODE_SCRIPT_RUNIC = 32
  G_UNICODE_SCRIPT_SINHALA = 33
  G_UNICODE_SCRIPT_SYRIAC = 34
  G_UNICODE_SCRIPT_TAMIL = 35
  G_UNICODE_SCRIPT_TELUGU = 36
  G_UNICODE_SCRIPT_THAANA = 37
  G_UNICODE_SCRIPT_THAI = 38
  G_UNICODE_SCRIPT_TIBETAN = 39
  G_UNICODE_SCRIPT_CANADIAN_ABORIGINAL = 40
  G_UNICODE_SCRIPT_YI = 41
  G_UNICODE_SCRIPT_TAGALOG = 42
  G_UNICODE_SCRIPT_HANUNOO = 43
  G_UNICODE_SCRIPT_BUHID = 44
  G_UNICODE_SCRIPT_TAGBANWA = 45
  G_UNICODE_SCRIPT_BRAILLE = 46
  G_UNICODE_SCRIPT_CYPRIOT = 47
  G_UNICODE_SCRIPT_LIMBU = 48
  G_UNICODE_SCRIPT_OSMANYA = 49
  G_UNICODE_SCRIPT_SHAVIAN = 50
  G_UNICODE_SCRIPT_LINEAR_B = 51
  G_UNICODE_SCRIPT_TAI_LE = 52
  G_UNICODE_SCRIPT_UGARITIC = 53
  G_UNICODE_SCRIPT_NEW_TAI_LUE = 54
  G_UNICODE_SCRIPT_BUGINESE = 55
  G_UNICODE_SCRIPT_GLAGOLITIC = 56
  G_UNICODE_SCRIPT_TIFINAGH = 57
  G_UNICODE_SCRIPT_SYLOTI_NAGRI = 58
  G_UNICODE_SCRIPT_OLD_PERSIAN = 59
  G_UNICODE_SCRIPT_KHAROSHTHI = 60
  G_UNICODE_SCRIPT_UNKNOWN = 61
  G_UNICODE_SCRIPT_BALINESE = 62
  G_UNICODE_SCRIPT_CUNEIFORM = 63
  G_UNICODE_SCRIPT_PHOENICIAN = 64
  G_UNICODE_SCRIPT_PHAGS_PA = 65
  G_UNICODE_SCRIPT_NKO = 66
  G_UNICODE_SCRIPT_KAYAH_LI = 67
  G_UNICODE_SCRIPT_LEPCHA = 68
  G_UNICODE_SCRIPT_REJANG = 69
  G_UNICODE_SCRIPT_SUNDANESE = 70
  G_UNICODE_SCRIPT_SAURASHTRA = 71
  G_UNICODE_SCRIPT_CHAM = 72
  G_UNICODE_SCRIPT_OL_CHIKI = 73
  G_UNICODE_SCRIPT_VAI = 74
  G_UNICODE_SCRIPT_CARIAN = 75
  G_UNICODE_SCRIPT_LYCIAN = 76
  G_UNICODE_SCRIPT_LYDIAN = 77
  G_UNICODE_SCRIPT_AVESTAN = 78
  G_UNICODE_SCRIPT_BAMUM = 79
  G_UNICODE_SCRIPT_EGYPTIAN_HIEROGLYPHS = 80
  G_UNICODE_SCRIPT_IMPERIAL_ARAMAIC = 81
  G_UNICODE_SCRIPT_INSCRIPTIONAL_PAHLAVI = 82
  G_UNICODE_SCRIPT_INSCRIPTIONAL_PARTHIAN = 83
  G_UNICODE_SCRIPT_JAVANESE = 84
  G_UNICODE_SCRIPT_KAITHI = 85
  G_UNICODE_SCRIPT_LISU = 86
  G_UNICODE_SCRIPT_MEETEI_MAYEK = 87
  G_UNICODE_SCRIPT_OLD_SOUTH_ARABIAN = 88
  G_UNICODE_SCRIPT_OLD_TURKIC = 89
  G_UNICODE_SCRIPT_SAMARITAN = 90
  G_UNICODE_SCRIPT_TAI_THAM = 91
  G_UNICODE_SCRIPT_TAI_VIET = 92
  G_UNICODE_SCRIPT_BATAK = 93
  G_UNICODE_SCRIPT_BRAHMI = 94
  G_UNICODE_SCRIPT_MANDAIC = 95
  G_UNICODE_SCRIPT_CHAKMA = 96
  G_UNICODE_SCRIPT_MEROITIC_CURSIVE = 97
  G_UNICODE_SCRIPT_MEROITIC_HIEROGLYPHS = 98
  G_UNICODE_SCRIPT_MIAO = 99
  G_UNICODE_SCRIPT_SHARADA = 100
  G_UNICODE_SCRIPT_SORA_SOMPENG = 101
  G_UNICODE_SCRIPT_TAKRI = 102
  G_UNICODE_SCRIPT_BASSA_VAH = 103
  G_UNICODE_SCRIPT_CAUCASIAN_ALBANIAN = 104
  G_UNICODE_SCRIPT_DUPLOYAN = 105
  G_UNICODE_SCRIPT_ELBASAN = 106
  G_UNICODE_SCRIPT_GRANTHA = 107
  G_UNICODE_SCRIPT_KHOJKI = 108
  G_UNICODE_SCRIPT_KHUDAWADI = 109
  G_UNICODE_SCRIPT_LINEAR_A = 110
  G_UNICODE_SCRIPT_MAHAJANI = 111
  G_UNICODE_SCRIPT_MANICHAEAN = 112
  G_UNICODE_SCRIPT_MENDE_KIKAKUI = 113
  G_UNICODE_SCRIPT_MODI = 114
  G_UNICODE_SCRIPT_MRO = 115
  G_UNICODE_SCRIPT_NABATAEAN = 116
  G_UNICODE_SCRIPT_OLD_NORTH_ARABIAN = 117
  G_UNICODE_SCRIPT_OLD_PERMIC = 118
  G_UNICODE_SCRIPT_PAHAWH_HMONG = 119
  G_UNICODE_SCRIPT_PALMYRENE = 120
  G_UNICODE_SCRIPT_PAU_CIN_HAU = 121
  G_UNICODE_SCRIPT_PSALTER_PAHLAVI = 122
  G_UNICODE_SCRIPT_SIDDHAM = 123
  G_UNICODE_SCRIPT_TIRHUTA = 124
  G_UNICODE_SCRIPT_WARANG_CITI = 125
  G_UNICODE_SCRIPT_AHOM = 126
  G_UNICODE_SCRIPT_ANATOLIAN_HIEROGLYPHS = 127
  G_UNICODE_SCRIPT_HATRAN = 128
  G_UNICODE_SCRIPT_MULTANI = 129
  G_UNICODE_SCRIPT_OLD_HUNGARIAN = 130
  G_UNICODE_SCRIPT_SIGNWRITING = 131
  G_UNICODE_SCRIPT_ADLAM = 132
  G_UNICODE_SCRIPT_BHAIKSUKI = 133
  G_UNICODE_SCRIPT_MARCHEN = 134
  G_UNICODE_SCRIPT_NEWA = 135
  G_UNICODE_SCRIPT_OSAGE = 136
  G_UNICODE_SCRIPT_TANGUT = 137
  G_UNICODE_SCRIPT_MASARAM_GONDI = 138
  G_UNICODE_SCRIPT_NUSHU = 139
  G_UNICODE_SCRIPT_SOYOMBO = 140
  G_UNICODE_SCRIPT_ZANABAZAR_SQUARE = 141
  G_UNICODE_SCRIPT_DOGRA = 142
  G_UNICODE_SCRIPT_GUNJALA_GONDI = 143
  G_UNICODE_SCRIPT_HANIFI_ROHINGYA = 144
  G_UNICODE_SCRIPT_MAKASAR = 145
  G_UNICODE_SCRIPT_MEDEFAIDRIN = 146
  G_UNICODE_SCRIPT_OLD_SOGDIAN = 147
  G_UNICODE_SCRIPT_SOGDIAN = 148
  G_UNICODE_SCRIPT_ELYMAIC = 149
  G_UNICODE_SCRIPT_NANDINAGARI = 150
  G_UNICODE_SCRIPT_NYIAKENG_PUACHUE_HMONG = 151
  G_UNICODE_SCRIPT_WANCHO = 152
END ENUM
TYPE AS LONG GUnicodeType
ENUM
  G_UNICODE_CONTROL = 0
  G_UNICODE_FORMAT = 1
  G_UNICODE_UNASSIGNED = 2
  G_UNICODE_PRIVATE_USE = 3
  G_UNICODE_SURROGATE = 4
  G_UNICODE_LOWERCASE_LETTER = 5
  G_UNICODE_MODIFIER_LETTER = 6
  G_UNICODE_OTHER_LETTER = 7
  G_UNICODE_TITLECASE_LETTER = 8
  G_UNICODE_UPPERCASE_LETTER = 9
  G_UNICODE_SPACING_MARK = 10
  G_UNICODE_ENCLOSING_MARK = 11
  G_UNICODE_NON_SPACING_MARK = 12
  G_UNICODE_DECIMAL_NUMBER = 13
  G_UNICODE_LETTER_NUMBER = 14
  G_UNICODE_OTHER_NUMBER = 15
  G_UNICODE_CONNECT_PUNCTUATION = 16
  G_UNICODE_DASH_PUNCTUATION = 17
  G_UNICODE_CLOSE_PUNCTUATION = 18
  G_UNICODE_FINAL_PUNCTUATION = 19
  G_UNICODE_INITIAL_PUNCTUATION = 20
  G_UNICODE_OTHER_PUNCTUATION = 21
  G_UNICODE_OPEN_PUNCTUATION = 22
  G_UNICODE_CURRENCY_SYMBOL = 23
  G_UNICODE_MODIFIER_SYMBOL = 24
  G_UNICODE_MATH_SYMBOL = 25
  G_UNICODE_OTHER_SYMBOL = 26
  G_UNICODE_LINE_SEPARATOR = 27
  G_UNICODE_PARAGRAPH_SEPARATOR = 28
  G_UNICODE_SPACE_SEPARATOR = 29
END ENUM
TYPE AS LONG GUserDirectory
ENUM
  G_USER_DIRECTORY_DESKTOP = 0
  G_USER_DIRECTORY_DOCUMENTS = 1
  G_USER_DIRECTORY_DOWNLOAD = 2
  G_USER_DIRECTORY_MUSIC = 3
  G_USER_DIRECTORY_PICTURES = 4
  G_USER_DIRECTORY_PUBLIC_SHARE = 5
  G_USER_DIRECTORY_TEMPLATES = 6
  G_USER_DIRECTORY_VIDEOS = 7
  G_USER_N_DIRECTORIES = 8
END ENUM
#DEFINE G_VA_COPY_AS_ARRAY 1
#DEFINE GLIB_VERSION_MIN_REQUIRED 2
TYPE AS _GVariant GVariant
TYPE AS _GVariantBuilder GVariantBuilder
TYPE AS LONG GVariantClass
ENUM
  G_VARIANT_CLASS_BOOLEAN = 98
  G_VARIANT_CLASS_BYTE = 121
  G_VARIANT_CLASS_INT16 = 110
  G_VARIANT_CLASS_UINT16 = 113
  G_VARIANT_CLASS_INT32 = 105
  G_VARIANT_CLASS_UINT32 = 117
  G_VARIANT_CLASS_INT64 = 120
  G_VARIANT_CLASS_UINT64 = 116
  G_VARIANT_CLASS_HANDLE = 104
  G_VARIANT_CLASS_DOUBLE = 100
  G_VARIANT_CLASS_STRING = 115
  G_VARIANT_CLASS_OBJECT_PATH = 111
  G_VARIANT_CLASS_SIGNATURE = 103
  G_VARIANT_CLASS_VARIANT = 118
  G_VARIANT_CLASS_MAYBE = 109
  G_VARIANT_CLASS_ARRAY = 97
  G_VARIANT_CLASS_TUPLE = 40
  G_VARIANT_CLASS_DICT_ENTRY = 123
END ENUM
TYPE AS _GVariantDict GVariantDict
TYPE AS _GVariantIter GVariantIter
TYPE AS LONG GVariantParseError
ENUM
  G_VARIANT_PARSE_ERROR_FAILED = 0
  G_VARIANT_PARSE_ERROR_BASIC_TYPE_EXPECTED = 1
  G_VARIANT_PARSE_ERROR_CANNOT_INFER_TYPE = 2
  G_VARIANT_PARSE_ERROR_DEFINITE_TYPE_EXPECTED = 3
  G_VARIANT_PARSE_ERROR_INPUT_NOT_AT_END = 4
  G_VARIANT_PARSE_ERROR_INVALID_CHARACTER = 5
  G_VARIANT_PARSE_ERROR_INVALID_FORMAT_STRING = 6
  G_VARIANT_PARSE_ERROR_INVALID_OBJECT_PATH = 7
  G_VARIANT_PARSE_ERROR_INVALID_SIGNATURE = 8
  G_VARIANT_PARSE_ERROR_INVALID_TYPE_STRING = 9
  G_VARIANT_PARSE_ERROR_NO_COMMON_TYPE = 10
  G_VARIANT_PARSE_ERROR_NUMBER_OUT_OF_RANGE = 11
  G_VARIANT_PARSE_ERROR_NUMBER_TOO_BIG = 12
  G_VARIANT_PARSE_ERROR_TYPE_ERROR = 13
  G_VARIANT_PARSE_ERROR_UNEXPECTED_TOKEN = 14
  G_VARIANT_PARSE_ERROR_UNKNOWN_KEYWORD = 15
  G_VARIANT_PARSE_ERROR_UNTERMINATED_STRING_CONSTANT = 16
  G_VARIANT_PARSE_ERROR_VALUE_EXPECTED = 17
  G_VARIANT_PARSE_ERROR_RECURSION = 18
END ENUM
TYPE AS _GVariantType GVariantType
#DEFINE G_WIN32_MSG_HANDLE 19981206
EXTERN "C" LIB "glib-2.0"
' P_X

TYPE GSourceDisposeFunc AS SUB CDECL(BYVAL AS GSource PTR)
TYPE GDestroyNotify AS SUB CDECL(BYVAL AS gpointer)
TYPE GCompareDataFunc AS FUNCTION CDECL(BYVAL AS gconstpointer, BYVAL AS gconstpointer, BYVAL AS gpointer) AS gint
TYPE GCompareFunc AS FUNCTION CDECL(BYVAL AS gconstpointer, BYVAL AS gconstpointer) AS gint
UNION GMutex
  AS gpointer p
  AS guint i
END UNION
DECLARE SUB g_mutex_clear(BYVAL AS GMutex PTR)
DECLARE SUB g_mutex_init(BYVAL AS GMutex PTR)
DECLARE SUB g_mutex_lock(BYVAL AS GMutex PTR)
DECLARE FUNCTION g_mutex_trylock(BYVAL AS GMutex PTR) AS gboolean
DECLARE SUB g_mutex_unlock(BYVAL AS GMutex PTR)
TYPE GHookFindFunc AS FUNCTION CDECL(BYVAL AS GHook PTR, BYVAL AS gpointer) AS gboolean
TYPE GHookCompareFunc AS FUNCTION CDECL(BYVAL AS GHook PTR, BYVAL AS GHook PTR) AS gint
TYPE GHookMarshaller AS SUB CDECL(BYVAL AS GHook PTR, BYVAL AS gpointer)
TYPE GPollFunc AS FUNCTION CDECL(BYVAL AS GPollFD PTR, BYVAL AS guint, BYVAL AS gint) AS gint
TYPE GSourceFunc AS FUNCTION CDECL(BYVAL AS gpointer) AS gboolean
TYPE GNodeForeachFunc AS SUB CDECL(BYVAL AS GNode PTR, BYVAL AS gpointer)
TYPE GNodeTraverseFunc AS FUNCTION CDECL(BYVAL AS GNode PTR, BYVAL AS gpointer) AS gboolean
TYPE GThreadFunc AS FUNCTION CDECL(BYVAL AS gpointer) AS gpointer
TYPE GTranslateFunc AS FUNCTION CDECL(BYVAL AS const gchar PTR, BYVAL AS gpointer) AS const gchar PTR
TYPE GOptionParseFunc AS FUNCTION CDECL(BYVAL AS GOptionContext PTR, BYVAL AS GOptionGroup PTR, BYVAL AS gpointer) AS gboolean
TYPE GRegexEvalCallback AS FUNCTION CDECL(BYVAL AS const GMatchInfo PTR, BYVAL AS GString PTR, BYVAL AS gpointer) AS gboolean
UNION GTokenValue
  AS gpointer v_symbol
  AS gchar PTR v_identifier
  AS gulong v_binary
  AS gulong v_octal
  AS gulong v_int
  AS guint64 v_int64
  AS gdouble v_float
  AS gulong v_hex
  AS gchar PTR v_string
  AS gchar PTR v_comment
  AS guchar /'?'/ v_char
  AS guint v_error
END UNION
TYPE GScannerMsgFunc AS SUB CDECL(BYVAL AS GScanner PTR, BYVAL AS gchar PTR, BYVAL AS gboolean)
TYPE GSequenceIterCompareFunc AS FUNCTION CDECL(BYVAL AS GSequenceIter PTR, BYVAL AS GSequenceIter PTR, BYVAL AS gpointer) AS gint
' P_3

TYPE _GArray
  AS gchar PTR data
  AS guint len
END TYPE
DECLARE FUNCTION g_array_append_vals(BYVAL AS GArray PTR, BYVAL AS gconstpointer, BYVAL AS guint) AS GArray PTR
DECLARE FUNCTION g_array_binary_search(BYVAL AS GArray PTR, BYVAL AS gconstpointer, BYVAL AS GCompareFunc, BYVAL AS guint PTR) AS gboolean
DECLARE FUNCTION g_array_copy(BYVAL AS GArray PTR) AS GArray PTR
DECLARE FUNCTION g_array_free(BYVAL AS GArray PTR, BYVAL AS gboolean) AS gchar PTR
DECLARE FUNCTION g_array_get_element_size(BYVAL AS GArray PTR) AS guint
DECLARE FUNCTION g_array_insert_vals(BYVAL AS GArray PTR, BYVAL AS guint, BYVAL AS gconstpointer, BYVAL AS guint) AS GArray PTR
DECLARE FUNCTION g_array_new(BYVAL AS gboolean, BYVAL AS gboolean, BYVAL AS guint) AS GArray PTR
DECLARE FUNCTION g_array_prepend_vals(BYVAL AS GArray PTR, BYVAL AS gconstpointer, BYVAL AS guint) AS GArray PTR
DECLARE FUNCTION g_array_ref(BYVAL AS GArray PTR) AS GArray PTR
DECLARE FUNCTION g_array_remove_index(BYVAL AS GArray PTR, BYVAL AS guint) AS GArray PTR
DECLARE FUNCTION g_array_remove_index_fast(BYVAL AS GArray PTR, BYVAL AS guint) AS GArray PTR
DECLARE FUNCTION g_array_remove_range(BYVAL AS GArray PTR, BYVAL AS guint, BYVAL AS guint) AS GArray PTR
DECLARE SUB g_array_set_clear_func(BYVAL AS GArray PTR, BYVAL AS GDestroyNotify)
DECLARE FUNCTION g_array_set_size(BYVAL AS GArray PTR, BYVAL AS guint) AS GArray PTR
DECLARE FUNCTION g_array_sized_new(BYVAL AS gboolean, BYVAL AS gboolean, BYVAL AS guint, BYVAL AS guint) AS GArray PTR
DECLARE SUB g_array_sort(BYVAL AS GArray PTR, BYVAL AS GCompareFunc)
DECLARE SUB g_array_sort_with_data(BYVAL AS GArray PTR, BYVAL AS GCompareDataFunc, BYVAL AS gpointer)
DECLARE FUNCTION g_array_steal(BYVAL AS GArray PTR, BYVAL AS gsize PTR) AS gpointer
DECLARE SUB g_array_unref(BYVAL AS GArray PTR)
DECLARE FUNCTION g_async_queue_length(BYVAL AS GAsyncQueue PTR) AS gint
DECLARE FUNCTION g_async_queue_length_unlocked(BYVAL AS GAsyncQueue PTR) AS gint
DECLARE SUB g_async_queue_lock(BYVAL AS GAsyncQueue PTR)
DECLARE FUNCTION g_async_queue_pop(BYVAL AS GAsyncQueue PTR) AS gpointer
DECLARE FUNCTION g_async_queue_pop_unlocked(BYVAL AS GAsyncQueue PTR) AS gpointer
DECLARE SUB g_async_queue_push(BYVAL AS GAsyncQueue PTR, BYVAL AS gpointer)
DECLARE SUB g_async_queue_push_front(BYVAL AS GAsyncQueue PTR, BYVAL AS gpointer)
DECLARE SUB g_async_queue_push_front_unlocked(BYVAL AS GAsyncQueue PTR, BYVAL AS gpointer)
DECLARE SUB g_async_queue_push_sorted(BYVAL AS GAsyncQueue PTR, BYVAL AS gpointer, BYVAL AS GCompareDataFunc, BYVAL AS gpointer)
DECLARE SUB g_async_queue_push_sorted_unlocked(BYVAL AS GAsyncQueue PTR, BYVAL AS gpointer, BYVAL AS GCompareDataFunc, BYVAL AS gpointer)
DECLARE SUB g_async_queue_push_unlocked(BYVAL AS GAsyncQueue PTR, BYVAL AS gpointer)
DECLARE FUNCTION g_async_queue_ref(BYVAL AS GAsyncQueue PTR) AS GAsyncQueue PTR
DECLARE SUB g_async_queue_ref_unlocked(BYVAL AS GAsyncQueue PTR)
DECLARE FUNCTION g_async_queue_remove(BYVAL AS GAsyncQueue PTR, BYVAL AS gpointer) AS gboolean
DECLARE FUNCTION g_async_queue_remove_unlocked(BYVAL AS GAsyncQueue PTR, BYVAL AS gpointer) AS gboolean
DECLARE SUB g_async_queue_sort(BYVAL AS GAsyncQueue PTR, BYVAL AS GCompareDataFunc, BYVAL AS gpointer)
DECLARE SUB g_async_queue_sort_unlocked(BYVAL AS GAsyncQueue PTR, BYVAL AS GCompareDataFunc, BYVAL AS gpointer)
DECLARE FUNCTION g_async_queue_timed_pop(BYVAL AS GAsyncQueue PTR, BYVAL AS GTimeVal PTR) AS gpointer
DECLARE FUNCTION g_async_queue_timed_pop_unlocked(BYVAL AS GAsyncQueue PTR, BYVAL AS GTimeVal PTR) AS gpointer
DECLARE FUNCTION g_async_queue_timeout_pop(BYVAL AS GAsyncQueue PTR, BYVAL AS guint64) AS gpointer
DECLARE FUNCTION g_async_queue_timeout_pop_unlocked(BYVAL AS GAsyncQueue PTR, BYVAL AS guint64) AS gpointer
DECLARE FUNCTION g_async_queue_try_pop(BYVAL AS GAsyncQueue PTR) AS gpointer
DECLARE FUNCTION g_async_queue_try_pop_unlocked(BYVAL AS GAsyncQueue PTR) AS gpointer
DECLARE SUB g_async_queue_unlock(BYVAL AS GAsyncQueue PTR)
DECLARE SUB g_async_queue_unref(BYVAL AS GAsyncQueue PTR)
DECLARE SUB g_async_queue_unref_and_unlock(BYVAL AS GAsyncQueue PTR)
DECLARE FUNCTION g_async_queue_new() AS GAsyncQueue PTR
DECLARE FUNCTION g_async_queue_new_full(BYVAL AS GDestroyNotify) AS GAsyncQueue PTR
DECLARE SUB g_bookmark_file_add_application(BYVAL AS GBookmarkFile PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR)
DECLARE SUB g_bookmark_file_add_group(BYVAL AS GBookmarkFile PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR)
DECLARE SUB g_bookmark_file_free(BYVAL AS GBookmarkFile PTR)
DECLARE FUNCTION g_bookmark_file_get_added(BYVAL AS GBookmarkFile PTR, BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR) AS time_t
DECLARE FUNCTION g_bookmark_file_get_app_info(BYVAL AS GBookmarkFile PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS gchar PTR PTR, BYVAL AS guint PTR, BYVAL AS time_t PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION g_bookmark_file_get_applications(BYVAL AS GBookmarkFile PTR, BYVAL AS const gchar PTR, BYVAL AS gsize PTR, BYVAL AS GError PTR PTR) AS gchar PTR PTR
DECLARE FUNCTION g_bookmark_file_get_description(BYVAL AS GBookmarkFile PTR, BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR) AS gchar PTR
DECLARE FUNCTION g_bookmark_file_get_groups(BYVAL AS GBookmarkFile PTR, BYVAL AS const gchar PTR, BYVAL AS gsize PTR, BYVAL AS GError PTR PTR) AS gchar PTR PTR
DECLARE FUNCTION g_bookmark_file_get_icon(BYVAL AS GBookmarkFile PTR, BYVAL AS const gchar PTR, BYVAL AS gchar PTR PTR, BYVAL AS gchar PTR PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION g_bookmark_file_get_is_private(BYVAL AS GBookmarkFile PTR, BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION g_bookmark_file_get_mime_type(BYVAL AS GBookmarkFile PTR, BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR) AS gchar PTR
DECLARE FUNCTION g_bookmark_file_get_modified(BYVAL AS GBookmarkFile PTR, BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR) AS time_t
DECLARE FUNCTION g_bookmark_file_get_size(BYVAL AS GBookmarkFile PTR) AS gint
DECLARE FUNCTION g_bookmark_file_get_title(BYVAL AS GBookmarkFile PTR, BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR) AS gchar PTR
DECLARE FUNCTION g_bookmark_file_get_uris(BYVAL AS GBookmarkFile PTR, BYVAL AS gsize PTR) AS gchar PTR PTR
DECLARE FUNCTION g_bookmark_file_get_visited(BYVAL AS GBookmarkFile PTR, BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR) AS time_t
DECLARE FUNCTION g_bookmark_file_has_application(BYVAL AS GBookmarkFile PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION g_bookmark_file_has_group(BYVAL AS GBookmarkFile PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION g_bookmark_file_has_item(BYVAL AS GBookmarkFile PTR, BYVAL AS const gchar PTR) AS gboolean
DECLARE FUNCTION g_bookmark_file_load_from_data(BYVAL AS GBookmarkFile PTR, BYVAL AS const gchar PTR, BYVAL AS gsize, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION g_bookmark_file_load_from_data_dirs(BYVAL AS GBookmarkFile PTR, BYVAL AS const gchar PTR, BYVAL AS gchar PTR PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION g_bookmark_file_load_from_file(BYVAL AS GBookmarkFile PTR, BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION g_bookmark_file_move_item(BYVAL AS GBookmarkFile PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION g_bookmark_file_remove_application(BYVAL AS GBookmarkFile PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION g_bookmark_file_remove_group(BYVAL AS GBookmarkFile PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION g_bookmark_file_remove_item(BYVAL AS GBookmarkFile PTR, BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE SUB g_bookmark_file_set_added(BYVAL AS GBookmarkFile PTR, BYVAL AS const gchar PTR, BYVAL AS time_t)
DECLARE FUNCTION g_bookmark_file_set_app_info(BYVAL AS GBookmarkFile PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS gint, BYVAL AS time_t, BYVAL AS GError PTR PTR) AS gboolean
DECLARE SUB g_bookmark_file_set_description(BYVAL AS GBookmarkFile PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR)
DECLARE SUB g_bookmark_file_set_groups(BYVAL AS GBookmarkFile PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR PTR, BYVAL AS gsize)
DECLARE SUB g_bookmark_file_set_icon(BYVAL AS GBookmarkFile PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR)
DECLARE SUB g_bookmark_file_set_is_private(BYVAL AS GBookmarkFile PTR, BYVAL AS const gchar PTR, BYVAL AS gboolean)
DECLARE SUB g_bookmark_file_set_mime_type(BYVAL AS GBookmarkFile PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR)
DECLARE SUB g_bookmark_file_set_modified(BYVAL AS GBookmarkFile PTR, BYVAL AS const gchar PTR, BYVAL AS time_t)
DECLARE SUB g_bookmark_file_set_title(BYVAL AS GBookmarkFile PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR)
DECLARE SUB g_bookmark_file_set_visited(BYVAL AS GBookmarkFile PTR, BYVAL AS const gchar PTR, BYVAL AS time_t)
DECLARE FUNCTION g_bookmark_file_to_data(BYVAL AS GBookmarkFile PTR, BYVAL AS gsize PTR, BYVAL AS GError PTR PTR) AS gchar PTR
DECLARE FUNCTION g_bookmark_file_to_file(BYVAL AS GBookmarkFile PTR, BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION g_bookmark_file_error_quark() AS GQuark
DECLARE FUNCTION g_bookmark_file_new() AS GBookmarkFile PTR
TYPE _GByteArray
  AS guint8 PTR data
  AS guint len
END TYPE
DECLARE FUNCTION g_byte_array_append(BYVAL AS GByteArray PTR, BYVAL AS const guint8 PTR, BYVAL AS guint) AS GByteArray PTR
DECLARE FUNCTION g_byte_array_free(BYVAL AS GByteArray PTR, BYVAL AS gboolean) AS guint8 PTR
DECLARE FUNCTION g_byte_array_free_to_bytes(BYVAL AS GByteArray PTR) AS GBytes PTR
DECLARE FUNCTION g_byte_array_new() AS GByteArray PTR
DECLARE FUNCTION g_byte_array_new_take(BYVAL AS guint8 PTR, BYVAL AS gsize) AS GByteArray PTR
DECLARE FUNCTION g_byte_array_prepend(BYVAL AS GByteArray PTR, BYVAL AS const guint8 PTR, BYVAL AS guint) AS GByteArray PTR
DECLARE FUNCTION g_byte_array_ref(BYVAL AS GByteArray PTR) AS GByteArray PTR
DECLARE FUNCTION g_byte_array_remove_index(BYVAL AS GByteArray PTR, BYVAL AS guint) AS GByteArray PTR
DECLARE FUNCTION g_byte_array_remove_index_fast(BYVAL AS GByteArray PTR, BYVAL AS guint) AS GByteArray PTR
DECLARE FUNCTION g_byte_array_remove_range(BYVAL AS GByteArray PTR, BYVAL AS guint, BYVAL AS guint) AS GByteArray PTR
DECLARE FUNCTION g_byte_array_set_size(BYVAL AS GByteArray PTR, BYVAL AS guint) AS GByteArray PTR
DECLARE FUNCTION g_byte_array_sized_new(BYVAL AS guint) AS GByteArray PTR
DECLARE SUB g_byte_array_sort(BYVAL AS GByteArray PTR, BYVAL AS GCompareFunc)
DECLARE SUB g_byte_array_sort_with_data(BYVAL AS GByteArray PTR, BYVAL AS GCompareDataFunc, BYVAL AS gpointer)
DECLARE FUNCTION g_byte_array_steal(BYVAL AS GByteArray PTR, BYVAL AS gsize PTR) AS guint8 PTR
DECLARE SUB g_byte_array_unref(BYVAL AS GByteArray PTR)
DECLARE FUNCTION g_bytes_new(BYVAL AS gconstpointer, BYVAL AS gsize) AS GBytes PTR
DECLARE FUNCTION g_bytes_new_static(BYVAL AS gconstpointer, BYVAL AS gsize) AS GBytes PTR
DECLARE FUNCTION g_bytes_new_take(BYVAL AS gpointer, BYVAL AS gsize) AS GBytes PTR
DECLARE FUNCTION g_bytes_new_with_free_func(BYVAL AS gconstpointer, BYVAL AS gsize, BYVAL AS GDestroyNotify, BYVAL AS gpointer) AS GBytes PTR
DECLARE FUNCTION g_bytes_compare(BYVAL AS gconstpointer, BYVAL AS gconstpointer) AS gint
DECLARE FUNCTION g_bytes_equal(BYVAL AS gconstpointer, BYVAL AS gconstpointer) AS gboolean
DECLARE FUNCTION g_bytes_get_data(BYVAL AS GBytes PTR, BYVAL AS gsize PTR) AS gconstpointer
DECLARE FUNCTION g_bytes_get_size(BYVAL AS GBytes PTR) AS gsize
DECLARE FUNCTION g_bytes_hash(BYVAL AS gconstpointer) AS guint
DECLARE FUNCTION g_bytes_new_from_bytes(BYVAL AS GBytes PTR, BYVAL AS gsize, BYVAL AS gsize) AS GBytes PTR
DECLARE FUNCTION g_bytes_ref(BYVAL AS GBytes PTR) AS GBytes PTR
DECLARE SUB g_bytes_unref(BYVAL AS GBytes PTR)
DECLARE FUNCTION g_bytes_unref_to_array(BYVAL AS GBytes PTR) AS GByteArray PTR
DECLARE FUNCTION g_bytes_unref_to_data(BYVAL AS GBytes PTR, BYVAL AS gsize PTR) AS gpointer
DECLARE FUNCTION g_checksum_new(BYVAL AS GChecksumType) AS GChecksum PTR
DECLARE FUNCTION g_checksum_copy(BYVAL AS const GChecksum PTR) AS GChecksum PTR
DECLARE SUB g_checksum_free(BYVAL AS GChecksum PTR)
DECLARE SUB g_checksum_get_digest(BYVAL AS GChecksum PTR, BYVAL AS guint8 PTR, BYVAL AS gsize PTR)
DECLARE FUNCTION g_checksum_get_string(BYVAL AS GChecksum PTR) AS const gchar PTR
DECLARE SUB g_checksum_reset(BYVAL AS GChecksum PTR)
DECLARE SUB g_checksum_update(BYVAL AS GChecksum PTR, BYVAL AS const guchar PTR, BYVAL AS gssize)
DECLARE FUNCTION g_checksum_type_get_length(BYVAL AS GChecksumType) AS gssize
TYPE GChildWatchFunc AS SUB CDECL(BYVAL AS GPid, BYVAL AS gint, BYVAL AS gpointer)
TYPE GClearHandleFunc AS SUB CDECL(BYVAL AS guint)
TYPE _GCond
  AS gpointer p
  AS guint i(1)
END TYPE
DECLARE SUB g_cond_broadcast(BYVAL AS GCond PTR)
DECLARE SUB g_cond_clear(BYVAL AS GCond PTR)
DECLARE SUB g_cond_init(BYVAL AS GCond PTR)
DECLARE SUB g_cond_signal(BYVAL AS GCond PTR)
DECLARE SUB g_cond_wait(BYVAL AS GCond PTR, BYVAL AS GMutex PTR)
DECLARE FUNCTION g_cond_wait_until(BYVAL AS GCond PTR, BYVAL AS GMutex PTR, BYVAL AS gint64) AS gboolean
TYPE GCopyFunc AS FUNCTION CDECL(BYVAL AS gconstpointer, BYVAL AS gpointer) AS gpointer
TYPE GDataForeachFunc AS SUB CDECL(BYVAL AS GQuark, BYVAL AS gpointer, BYVAL AS gpointer)
TYPE _GDate
  AS guint julian_days : 32
  AS guint julian : 1
  AS guint dmy : 1
  AS guint day : 6
  AS guint month : 4
  AS guint year : 16
END TYPE
DECLARE FUNCTION g_date_new() AS GDate PTR
DECLARE FUNCTION g_date_new_dmy(BYVAL AS GDateDay, BYVAL AS GDateMonth, BYVAL AS GDateYear) AS GDate PTR
DECLARE FUNCTION g_date_new_julian(BYVAL AS guint32) AS GDate PTR
DECLARE SUB g_date_add_days(BYVAL AS GDate PTR, BYVAL AS guint)
DECLARE SUB g_date_add_months(BYVAL AS GDate PTR, BYVAL AS guint)
DECLARE SUB g_date_add_years(BYVAL AS GDate PTR, BYVAL AS guint)
DECLARE SUB g_date_clamp(BYVAL AS GDate PTR, BYVAL AS const GDate PTR, BYVAL AS const GDate PTR)
DECLARE SUB g_date_clear(BYVAL AS GDate PTR, BYVAL AS guint)
DECLARE FUNCTION g_date_compare(BYVAL AS const GDate PTR, BYVAL AS const GDate PTR) AS gint
DECLARE FUNCTION g_date_copy(BYVAL AS const GDate PTR) AS GDate PTR
DECLARE FUNCTION g_date_days_between(BYVAL AS const GDate PTR, BYVAL AS const GDate PTR) AS gint
DECLARE SUB g_date_free(BYVAL AS GDate PTR)
DECLARE FUNCTION g_date_get_day(BYVAL AS const GDate PTR) AS GDateDay
DECLARE FUNCTION g_date_get_day_of_year(BYVAL AS const GDate PTR) AS guint
DECLARE FUNCTION g_date_get_iso8601_week_of_year(BYVAL AS const GDate PTR) AS guint
DECLARE FUNCTION g_date_get_julian(BYVAL AS const GDate PTR) AS guint32
DECLARE FUNCTION g_date_get_monday_week_of_year(BYVAL AS const GDate PTR) AS guint
DECLARE FUNCTION g_date_get_month(BYVAL AS const GDate PTR) AS GDateMonth
DECLARE FUNCTION g_date_get_sunday_week_of_year(BYVAL AS const GDate PTR) AS guint
DECLARE FUNCTION g_date_get_weekday(BYVAL AS const GDate PTR) AS GDateWeekday
DECLARE FUNCTION g_date_get_year(BYVAL AS const GDate PTR) AS GDateYear
DECLARE FUNCTION g_date_is_first_of_month(BYVAL AS const GDate PTR) AS gboolean
DECLARE FUNCTION g_date_is_last_of_month(BYVAL AS const GDate PTR) AS gboolean
DECLARE SUB g_date_order(BYVAL AS GDate PTR, BYVAL AS GDate PTR)
DECLARE SUB g_date_set_day(BYVAL AS GDate PTR, BYVAL AS GDateDay)
DECLARE SUB g_date_set_dmy(BYVAL AS GDate PTR, BYVAL AS GDateDay, BYVAL AS GDateMonth, BYVAL AS GDateYear)
DECLARE SUB g_date_set_julian(BYVAL AS GDate PTR, BYVAL AS guint32)
DECLARE SUB g_date_set_month(BYVAL AS GDate PTR, BYVAL AS GDateMonth)
DECLARE SUB g_date_set_parse(BYVAL AS GDate PTR, BYVAL AS const gchar PTR)
DECLARE SUB g_date_set_time(BYVAL AS GDate PTR, BYVAL AS GTime)
DECLARE SUB g_date_set_time_t(BYVAL AS GDate PTR, BYVAL AS time_t)
DECLARE SUB g_date_set_time_val(BYVAL AS GDate PTR, BYVAL AS GTimeVal PTR)
DECLARE SUB g_date_set_year(BYVAL AS GDate PTR, BYVAL AS GDateYear)
DECLARE SUB g_date_subtract_days(BYVAL AS GDate PTR, BYVAL AS guint)
DECLARE SUB g_date_subtract_months(BYVAL AS GDate PTR, BYVAL AS guint)
DECLARE SUB g_date_subtract_years(BYVAL AS GDate PTR, BYVAL AS guint)
DECLARE SUB g_date_to_struct_tm(BYVAL AS const GDate PTR, BYVAL AS any /'tm'/ PTR)
DECLARE FUNCTION g_date_valid(BYVAL AS const GDate PTR) AS gboolean
DECLARE FUNCTION g_date_get_days_in_month(BYVAL AS GDateMonth, BYVAL AS GDateYear) AS guint8
DECLARE FUNCTION g_date_get_monday_weeks_in_year(BYVAL AS GDateYear) AS guint8
DECLARE FUNCTION g_date_get_sunday_weeks_in_year(BYVAL AS GDateYear) AS guint8
DECLARE FUNCTION g_date_is_leap_year(BYVAL AS GDateYear) AS gboolean
DECLARE FUNCTION g_date_strftime(BYVAL AS gchar PTR, BYVAL AS gsize, BYVAL AS const gchar PTR, BYVAL AS const GDate PTR) AS gsize
DECLARE FUNCTION g_date_valid_day(BYVAL AS GDateDay) AS gboolean
DECLARE FUNCTION g_date_valid_dmy(BYVAL AS GDateDay, BYVAL AS GDateMonth, BYVAL AS GDateYear) AS gboolean
DECLARE FUNCTION g_date_valid_julian(BYVAL AS guint32) AS gboolean
DECLARE FUNCTION g_date_valid_month(BYVAL AS GDateMonth) AS gboolean
DECLARE FUNCTION g_date_valid_weekday(BYVAL AS GDateWeekday) AS gboolean
DECLARE FUNCTION g_date_valid_year(BYVAL AS GDateYear) AS gboolean
DECLARE FUNCTION g_date_time_new(BYVAL AS GTimeZone PTR, BYVAL AS gint, BYVAL AS gint, BYVAL AS gint, BYVAL AS gint, BYVAL AS gint, BYVAL AS gdouble) AS GDateTime PTR
DECLARE FUNCTION g_date_time_new_from_iso8601(BYVAL AS const gchar PTR, BYVAL AS GTimeZone PTR) AS GDateTime PTR
DECLARE FUNCTION g_date_time_new_from_timeval_local(BYVAL AS const GTimeVal PTR) AS GDateTime PTR
DECLARE FUNCTION g_date_time_new_from_timeval_utc(BYVAL AS const GTimeVal PTR) AS GDateTime PTR
DECLARE FUNCTION g_date_time_new_from_unix_local(BYVAL AS gint64) AS GDateTime PTR
DECLARE FUNCTION g_date_time_new_from_unix_utc(BYVAL AS gint64) AS GDateTime PTR
DECLARE FUNCTION g_date_time_new_local(BYVAL AS gint, BYVAL AS gint, BYVAL AS gint, BYVAL AS gint, BYVAL AS gint, BYVAL AS gdouble) AS GDateTime PTR
DECLARE FUNCTION g_date_time_new_now(BYVAL AS GTimeZone PTR) AS GDateTime PTR
DECLARE FUNCTION g_date_time_new_now_local() AS GDateTime PTR
DECLARE FUNCTION g_date_time_new_now_utc() AS GDateTime PTR
DECLARE FUNCTION g_date_time_new_utc(BYVAL AS gint, BYVAL AS gint, BYVAL AS gint, BYVAL AS gint, BYVAL AS gint, BYVAL AS gdouble) AS GDateTime PTR
DECLARE FUNCTION g_date_time_add(BYVAL AS GDateTime PTR, BYVAL AS GTimeSpan) AS GDateTime PTR
DECLARE FUNCTION g_date_time_add_days(BYVAL AS GDateTime PTR, BYVAL AS gint) AS GDateTime PTR
DECLARE FUNCTION g_date_time_add_full(BYVAL AS GDateTime PTR, BYVAL AS gint, BYVAL AS gint, BYVAL AS gint, BYVAL AS gint, BYVAL AS gint, BYVAL AS gdouble) AS GDateTime PTR
DECLARE FUNCTION g_date_time_add_hours(BYVAL AS GDateTime PTR, BYVAL AS gint) AS GDateTime PTR
DECLARE FUNCTION g_date_time_add_minutes(BYVAL AS GDateTime PTR, BYVAL AS gint) AS GDateTime PTR
DECLARE FUNCTION g_date_time_add_months(BYVAL AS GDateTime PTR, BYVAL AS gint) AS GDateTime PTR
DECLARE FUNCTION g_date_time_add_seconds(BYVAL AS GDateTime PTR, BYVAL AS gdouble) AS GDateTime PTR
DECLARE FUNCTION g_date_time_add_weeks(BYVAL AS GDateTime PTR, BYVAL AS gint) AS GDateTime PTR
DECLARE FUNCTION g_date_time_add_years(BYVAL AS GDateTime PTR, BYVAL AS gint) AS GDateTime PTR
DECLARE FUNCTION g_date_time_difference(BYVAL AS GDateTime PTR, BYVAL AS GDateTime PTR) AS GTimeSpan
DECLARE FUNCTION g_date_time_format(BYVAL AS GDateTime PTR, BYVAL AS const gchar PTR) AS gchar PTR
DECLARE FUNCTION g_date_time_format_iso8601(BYVAL AS GDateTime PTR) AS gchar PTR
DECLARE FUNCTION g_date_time_get_day_of_month(BYVAL AS GDateTime PTR) AS gint
DECLARE FUNCTION g_date_time_get_day_of_week(BYVAL AS GDateTime PTR) AS gint
DECLARE FUNCTION g_date_time_get_day_of_year(BYVAL AS GDateTime PTR) AS gint
DECLARE FUNCTION g_date_time_get_hour(BYVAL AS GDateTime PTR) AS gint
DECLARE FUNCTION g_date_time_get_microsecond(BYVAL AS GDateTime PTR) AS gint
DECLARE FUNCTION g_date_time_get_minute(BYVAL AS GDateTime PTR) AS gint
DECLARE FUNCTION g_date_time_get_month(BYVAL AS GDateTime PTR) AS gint
DECLARE FUNCTION g_date_time_get_second(BYVAL AS GDateTime PTR) AS gint
DECLARE FUNCTION g_date_time_get_seconds(BYVAL AS GDateTime PTR) AS gdouble
DECLARE FUNCTION g_date_time_get_timezone(BYVAL AS GDateTime PTR) AS GTimeZone PTR
DECLARE FUNCTION g_date_time_get_timezone_abbreviation(BYVAL AS GDateTime PTR) AS const gchar PTR
DECLARE FUNCTION g_date_time_get_utc_offset(BYVAL AS GDateTime PTR) AS GTimeSpan
DECLARE FUNCTION g_date_time_get_week_numbering_year(BYVAL AS GDateTime PTR) AS gint
DECLARE FUNCTION g_date_time_get_week_of_year(BYVAL AS GDateTime PTR) AS gint
DECLARE FUNCTION g_date_time_get_year(BYVAL AS GDateTime PTR) AS gint
DECLARE SUB g_date_time_get_ymd(BYVAL AS GDateTime PTR, BYVAL AS gint PTR, BYVAL AS gint PTR, BYVAL AS gint PTR)
DECLARE FUNCTION g_date_time_is_daylight_savings(BYVAL AS GDateTime PTR) AS gboolean
DECLARE FUNCTION g_date_time_ref(BYVAL AS GDateTime PTR) AS GDateTime PTR
DECLARE FUNCTION g_date_time_to_local(BYVAL AS GDateTime PTR) AS GDateTime PTR
DECLARE FUNCTION g_date_time_to_timeval(BYVAL AS GDateTime PTR, BYVAL AS GTimeVal PTR) AS gboolean
DECLARE FUNCTION g_date_time_to_timezone(BYVAL AS GDateTime PTR, BYVAL AS GTimeZone PTR) AS GDateTime PTR
DECLARE FUNCTION g_date_time_to_unix(BYVAL AS GDateTime PTR) AS gint64
DECLARE FUNCTION g_date_time_to_utc(BYVAL AS GDateTime PTR) AS GDateTime PTR
DECLARE SUB g_date_time_unref(BYVAL AS GDateTime PTR)
DECLARE FUNCTION g_date_time_compare(BYVAL AS gconstpointer, BYVAL AS gconstpointer) AS gint
DECLARE FUNCTION g_date_time_equal(BYVAL AS gconstpointer, BYVAL AS gconstpointer) AS gboolean
DECLARE FUNCTION g_date_time_hash(BYVAL AS gconstpointer) AS guint
TYPE _GDebugKey
  AS const gchar PTR key
  AS guint value
END TYPE
DECLARE SUB g_dir_close(BYVAL AS GDir PTR)
DECLARE FUNCTION g_dir_read_name(BYVAL AS GDir PTR) AS const gchar PTR
DECLARE SUB g_dir_rewind(BYVAL AS GDir PTR)
DECLARE FUNCTION g_dir_make_tmp(BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR) AS gchar PTR
DECLARE FUNCTION g_dir_open(BYVAL AS const gchar PTR, BYVAL AS guint, BYVAL AS GError PTR PTR) AS GDir PTR
TYPE __G2B_GDoubleIEEE754_mpn
  AS guint mantissa_low : 32
  AS guint mantissa_high : 20
  AS guint biased_exponent : 11
  AS guint sign : 1
END TYPE
UNION GDoubleIEEE754
  AS gdouble v_double
  AS __G2B_GDoubleIEEE754_mpn mpn
END UNION
TYPE GDuplicateFunc AS FUNCTION CDECL(BYVAL AS gpointer, BYVAL AS gpointer, BYVAL AS GError PTR PTR) AS gpointer
TYPE GEqualFunc AS FUNCTION CDECL(BYVAL AS gconstpointer, BYVAL AS gconstpointer, BYVAL AS GError PTR PTR) AS gboolean
TYPE _GError
  AS GQuark domain
  AS gint code
  AS gchar PTR message
END TYPE
DECLARE FUNCTION g_error_new(BYVAL AS GQuark, BYVAL AS gint, BYVAL AS const gchar PTR, ...) AS GError PTR
DECLARE FUNCTION g_error_new_literal(BYVAL AS GQuark, BYVAL AS gint, BYVAL AS const gchar PTR) AS GError PTR
DECLARE FUNCTION g_error_new_valist(BYVAL AS GQuark, BYVAL AS gint, BYVAL AS const gchar PTR, BYVAL AS va_list) AS GError PTR
DECLARE FUNCTION g_error_copy(BYVAL AS const GError PTR) AS GError PTR
DECLARE SUB g_error_free(BYVAL AS GError PTR)
DECLARE FUNCTION g_error_matches(BYVAL AS const GError PTR, BYVAL AS GQuark, BYVAL AS gint) AS gboolean
TYPE __G2B_GFloatIEEE754_mpn
  AS guint mantissa : 23
  AS guint biased_exponent : 8
  AS guint sign : 1
END TYPE
UNION GFloatIEEE754
  AS gfloat v_float
  AS __G2B_GFloatIEEE754_mpn mpn
END UNION
TYPE GFreeFunc AS SUB CDECL(BYVAL AS gpointer)
TYPE GFunc AS SUB CDECL(BYVAL AS gpointer, BYVAL AS gpointer)
TYPE GHFunc AS SUB CDECL(BYVAL AS gpointer, BYVAL AS gpointer, BYVAL AS gpointer)
TYPE GHRFunc AS FUNCTION CDECL(BYVAL AS gpointer, BYVAL AS gpointer, BYVAL AS gpointer) AS gboolean
TYPE GHashFunc AS FUNCTION CDECL(BYVAL AS gconstpointer) AS guint
DECLARE FUNCTION g_hash_table_add(BYVAL AS GHashTable PTR, BYVAL AS gpointer) AS gboolean
DECLARE FUNCTION g_hash_table_contains(BYVAL AS GHashTable PTR, BYVAL AS gconstpointer) AS gboolean
DECLARE SUB g_hash_table_destroy(BYVAL AS GHashTable PTR)
DECLARE FUNCTION g_hash_table_find(BYVAL AS GHashTable PTR, BYVAL AS GHRFunc, BYVAL AS gpointer) AS gpointer
DECLARE SUB g_hash_table_foreach(BYVAL AS GHashTable PTR, BYVAL AS GHFunc, BYVAL AS gpointer)
DECLARE FUNCTION g_hash_table_foreach_remove(BYVAL AS GHashTable PTR, BYVAL AS GHRFunc, BYVAL AS gpointer) AS guint
DECLARE FUNCTION g_hash_table_foreach_steal(BYVAL AS GHashTable PTR, BYVAL AS GHRFunc, BYVAL AS gpointer) AS guint
DECLARE FUNCTION g_hash_table_get_keys(BYVAL AS GHashTable PTR) AS GList PTR
DECLARE FUNCTION g_hash_table_get_keys_as_array(BYVAL AS GHashTable PTR, BYVAL AS guint PTR) AS gpointer PTR
DECLARE FUNCTION g_hash_table_get_values(BYVAL AS GHashTable PTR) AS GList PTR
DECLARE FUNCTION g_hash_table_insert(BYVAL AS GHashTable PTR, BYVAL AS gpointer, BYVAL AS gpointer) AS gboolean
DECLARE FUNCTION g_hash_table_lookup(BYVAL AS GHashTable PTR, BYVAL AS gconstpointer) AS gpointer
DECLARE FUNCTION g_hash_table_lookup_extended(BYVAL AS GHashTable PTR, BYVAL AS gconstpointer, BYVAL AS gpointer PTR, BYVAL AS gpointer PTR) AS gboolean
DECLARE FUNCTION g_hash_table_new(BYVAL AS GHashFunc, BYVAL AS GEqualFunc) AS GHashTable PTR
DECLARE FUNCTION g_hash_table_new_full(BYVAL AS GHashFunc, BYVAL AS GEqualFunc, BYVAL AS GDestroyNotify, BYVAL AS GDestroyNotify) AS GHashTable PTR
DECLARE FUNCTION g_hash_table_ref(BYVAL AS GHashTable PTR) AS GHashTable PTR
DECLARE FUNCTION g_hash_table_remove(BYVAL AS GHashTable PTR, BYVAL AS gconstpointer) AS gboolean
DECLARE SUB g_hash_table_remove_all(BYVAL AS GHashTable PTR)
DECLARE FUNCTION g_hash_table_replace(BYVAL AS GHashTable PTR, BYVAL AS gpointer, BYVAL AS gpointer) AS gboolean
DECLARE FUNCTION g_hash_table_size(BYVAL AS GHashTable PTR) AS guint
DECLARE FUNCTION g_hash_table_steal(BYVAL AS GHashTable PTR, BYVAL AS gconstpointer) AS gboolean
DECLARE SUB g_hash_table_steal_all(BYVAL AS GHashTable PTR)
DECLARE FUNCTION g_hash_table_steal_extended(BYVAL AS GHashTable PTR, BYVAL AS gconstpointer, BYVAL AS gpointer PTR, BYVAL AS gpointer PTR) AS gboolean
DECLARE SUB g_hash_table_unref(BYVAL AS GHashTable PTR)
TYPE _GHashTableIter
  AS gpointer dummy1
  AS gpointer dummy2
  AS gpointer dummy3
  AS gint /'int'/ dummy4
  AS gboolean dummy5
  AS gpointer dummy6
END TYPE
DECLARE FUNCTION g_hash_table_iter_get_hash_table(BYVAL AS GHashTableIter PTR) AS GHashTable PTR
DECLARE SUB g_hash_table_iter_init(BYVAL AS GHashTableIter PTR, BYVAL AS GHashTable PTR)
DECLARE FUNCTION g_hash_table_iter_next(BYVAL AS GHashTableIter PTR, BYVAL AS gpointer PTR, BYVAL AS gpointer PTR) AS gboolean
DECLARE SUB g_hash_table_iter_remove(BYVAL AS GHashTableIter PTR)
DECLARE SUB g_hash_table_iter_replace(BYVAL AS GHashTableIter PTR, BYVAL AS gpointer)
DECLARE SUB g_hash_table_iter_steal(BYVAL AS GHashTableIter PTR)
DECLARE FUNCTION g_hmac_copy(BYVAL AS const GHmac PTR) AS GHmac PTR
DECLARE SUB g_hmac_get_digest(BYVAL AS GHmac PTR, BYVAL AS guint8 PTR, BYVAL AS gsize PTR)
DECLARE FUNCTION g_hmac_get_string(BYVAL AS GHmac PTR) AS const gchar PTR
DECLARE FUNCTION g_hmac_ref(BYVAL AS GHmac PTR) AS GHmac PTR
DECLARE SUB g_hmac_unref(BYVAL AS GHmac PTR)
DECLARE SUB g_hmac_update(BYVAL AS GHmac PTR, BYVAL AS const guchar PTR, BYVAL AS gssize)
DECLARE FUNCTION g_hmac_new(BYVAL AS GChecksumType, BYVAL AS const guchar PTR, BYVAL AS gsize) AS GHmac PTR
TYPE _GHook
  AS gpointer data
  AS GHook PTR next
  AS GHook PTR prev
  AS guint ref_count
  AS gulong hook_id
  AS guint flags
  AS gpointer func
  AS GDestroyNotify destroy
END TYPE
DECLARE FUNCTION g_hook_compare_ids(BYVAL AS GHook PTR, BYVAL AS GHook PTR) AS gint
DECLARE FUNCTION g_hook_alloc(BYVAL AS GHookList PTR) AS GHook PTR
DECLARE FUNCTION g_hook_destroy(BYVAL AS GHookList PTR, BYVAL AS gulong) AS gboolean
DECLARE SUB g_hook_destroy_link(BYVAL AS GHookList PTR, BYVAL AS GHook PTR)
DECLARE FUNCTION g_hook_find(BYVAL AS GHookList PTR, BYVAL AS gboolean, BYVAL AS GHookFindFunc, BYVAL AS gpointer) AS GHook PTR
DECLARE FUNCTION g_hook_find_data(BYVAL AS GHookList PTR, BYVAL AS gboolean, BYVAL AS gpointer) AS GHook PTR
DECLARE FUNCTION g_hook_find_func(BYVAL AS GHookList PTR, BYVAL AS gboolean, BYVAL AS gpointer) AS GHook PTR
DECLARE FUNCTION g_hook_find_func_data(BYVAL AS GHookList PTR, BYVAL AS gboolean, BYVAL AS gpointer, BYVAL AS gpointer) AS GHook PTR
DECLARE FUNCTION g_hook_first_valid(BYVAL AS GHookList PTR, BYVAL AS gboolean) AS GHook PTR
DECLARE SUB g_hook_free(BYVAL AS GHookList PTR, BYVAL AS GHook PTR)
DECLARE FUNCTION g_hook_get(BYVAL AS GHookList PTR, BYVAL AS gulong) AS GHook PTR
DECLARE SUB g_hook_insert_before(BYVAL AS GHookList PTR, BYVAL AS GHook PTR, BYVAL AS GHook PTR)
DECLARE SUB g_hook_insert_sorted(BYVAL AS GHookList PTR, BYVAL AS GHook PTR, BYVAL AS GHookCompareFunc)
DECLARE FUNCTION g_hook_next_valid(BYVAL AS GHookList PTR, BYVAL AS GHook PTR, BYVAL AS gboolean) AS GHook PTR
DECLARE SUB g_hook_prepend(BYVAL AS GHookList PTR, BYVAL AS GHook PTR)
DECLARE FUNCTION g_hook_ref(BYVAL AS GHookList PTR, BYVAL AS GHook PTR) AS GHook PTR
DECLARE SUB g_hook_unref(BYVAL AS GHookList PTR, BYVAL AS GHook PTR)
TYPE GHookCheckFunc AS FUNCTION CDECL(BYVAL AS gpointer) AS gboolean
TYPE GHookCheckMarshaller AS FUNCTION CDECL(BYVAL AS GHook PTR, BYVAL AS gpointer) AS gboolean
TYPE GHookFinalizeFunc AS SUB CDECL(BYVAL AS GHookList PTR, BYVAL AS GHook PTR)
TYPE GHookFunc AS SUB CDECL(BYVAL AS gpointer)
TYPE _GHookList
  AS gulong seq_id
  AS guint hook_size : 16
  AS guint is_setup : 1
  AS GHook PTR hooks
  AS gpointer dummy3
  AS GHookFinalizeFunc finalize_hook
  AS gpointer dummy(1)
END TYPE
DECLARE SUB g_hook_list_clear(BYVAL AS GHookList PTR)
DECLARE SUB g_hook_list_init(BYVAL AS GHookList PTR, BYVAL AS guint)
DECLARE SUB g_hook_list_invoke(BYVAL AS GHookList PTR, BYVAL AS gboolean)
DECLARE SUB g_hook_list_invoke_check(BYVAL AS GHookList PTR, BYVAL AS gboolean)
DECLARE SUB g_hook_list_marshal(BYVAL AS GHookList PTR, BYVAL AS gboolean, BYVAL AS GHookMarshaller, BYVAL AS gpointer)
DECLARE SUB g_hook_list_marshal_check(BYVAL AS GHookList PTR, BYVAL AS gboolean, BYVAL AS GHookCheckMarshaller, BYVAL AS gpointer)
DECLARE FUNCTION g_iconv(BYVAL AS GIConv PTR /'GIConv'/, BYVAL AS gchar PTR PTR, BYVAL AS gsize PTR, BYVAL AS gchar PTR PTR, BYVAL AS gsize PTR) AS gsize
DECLARE FUNCTION g_iconv_close(BYVAL AS GIConv PTR /'GIConv'/) AS gint
DECLARE FUNCTION g_iconv_open(BYVAL AS const gchar PTR, BYVAL AS const gchar PTR) AS GIConv PTR /'GIConv'/
TYPE _GIOChannel
  AS gint ref_count
  AS GIOFuncs PTR funcs
  AS gchar PTR encoding
  AS GIConv PTR /'GIConv'/ read_cd
  AS GIConv PTR /'GIConv'/ write_cd
  AS gchar PTR line_term
  AS guint line_term_len
  AS gsize buf_size
  AS GString PTR read_buf
  AS GString PTR encoded_read_buf
  AS GString PTR write_buf
  AS gint8 /'gchar'/ partial_write_buf(5)
  AS guint use_buffer : 1
  AS guint do_encode : 1
  AS guint close_on_unref : 1
  AS guint is_readable : 1
  AS guint is_writeable : 1
  AS guint is_seekable : 1
  AS gpointer reserved1
  AS gpointer reserved2
END TYPE
DECLARE FUNCTION g_io_channel_new_file(BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR) AS GIOChannel PTR
DECLARE FUNCTION g_io_channel_unix_new(BYVAL AS gint /'int'/) AS GIOChannel PTR
DECLARE SUB g_io_channel_close(BYVAL AS GIOChannel PTR)
DECLARE FUNCTION g_io_channel_flush(BYVAL AS GIOChannel PTR, BYVAL AS GError PTR PTR) AS GIOStatus
DECLARE FUNCTION g_io_channel_get_buffer_condition(BYVAL AS GIOChannel PTR) AS GIOCondition
DECLARE FUNCTION g_io_channel_get_buffer_size(BYVAL AS GIOChannel PTR) AS gsize
DECLARE FUNCTION g_io_channel_get_buffered(BYVAL AS GIOChannel PTR) AS gboolean
DECLARE FUNCTION g_io_channel_get_close_on_unref(BYVAL AS GIOChannel PTR) AS gboolean
DECLARE FUNCTION g_io_channel_get_encoding(BYVAL AS GIOChannel PTR) AS const gchar PTR
DECLARE FUNCTION g_io_channel_get_flags(BYVAL AS GIOChannel PTR) AS GIOFlags
DECLARE FUNCTION g_io_channel_get_line_term(BYVAL AS GIOChannel PTR, BYVAL AS gint PTR) AS const gchar PTR
DECLARE SUB g_io_channel_init(BYVAL AS GIOChannel PTR)
DECLARE FUNCTION g_io_channel_read(BYVAL AS GIOChannel PTR, BYVAL AS gchar PTR, BYVAL AS gsize, BYVAL AS gsize PTR) AS GIOError
DECLARE FUNCTION g_io_channel_read_chars(BYVAL AS GIOChannel PTR, BYVAL AS gchar PTR, BYVAL AS gsize, BYVAL AS gsize PTR, BYVAL AS GError PTR PTR) AS GIOStatus
DECLARE FUNCTION g_io_channel_read_line(BYVAL AS GIOChannel PTR, BYVAL AS gchar PTR PTR, BYVAL AS gsize PTR, BYVAL AS gsize PTR, BYVAL AS GError PTR PTR) AS GIOStatus
DECLARE FUNCTION g_io_channel_read_line_string(BYVAL AS GIOChannel PTR, BYVAL AS GString PTR, BYVAL AS gsize PTR, BYVAL AS GError PTR PTR) AS GIOStatus
DECLARE FUNCTION g_io_channel_read_to_end(BYVAL AS GIOChannel PTR, BYVAL AS gchar PTR PTR, BYVAL AS gsize PTR, BYVAL AS GError PTR PTR) AS GIOStatus
DECLARE FUNCTION g_io_channel_read_unichar(BYVAL AS GIOChannel PTR, BYVAL AS gunichar PTR, BYVAL AS GError PTR PTR) AS GIOStatus
DECLARE FUNCTION g_io_channel_ref(BYVAL AS GIOChannel PTR) AS GIOChannel PTR
DECLARE FUNCTION g_io_channel_seek(BYVAL AS GIOChannel PTR, BYVAL AS gint64, BYVAL AS GSeekType) AS GIOError
DECLARE FUNCTION g_io_channel_seek_position(BYVAL AS GIOChannel PTR, BYVAL AS gint64, BYVAL AS GSeekType, BYVAL AS GError PTR PTR) AS GIOStatus
DECLARE SUB g_io_channel_set_buffer_size(BYVAL AS GIOChannel PTR, BYVAL AS gsize)
DECLARE SUB g_io_channel_set_buffered(BYVAL AS GIOChannel PTR, BYVAL AS gboolean)
DECLARE SUB g_io_channel_set_close_on_unref(BYVAL AS GIOChannel PTR, BYVAL AS gboolean)
DECLARE FUNCTION g_io_channel_set_encoding(BYVAL AS GIOChannel PTR, BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR) AS GIOStatus
DECLARE FUNCTION g_io_channel_set_flags(BYVAL AS GIOChannel PTR, BYVAL AS GIOFlags, BYVAL AS GError PTR PTR) AS GIOStatus
DECLARE SUB g_io_channel_set_line_term(BYVAL AS GIOChannel PTR, BYVAL AS const gchar PTR, BYVAL AS gint)
DECLARE FUNCTION g_io_channel_shutdown(BYVAL AS GIOChannel PTR, BYVAL AS gboolean, BYVAL AS GError PTR PTR) AS GIOStatus
DECLARE FUNCTION g_io_channel_unix_get_fd(BYVAL AS GIOChannel PTR) AS gint
DECLARE SUB g_io_channel_unref(BYVAL AS GIOChannel PTR)
DECLARE FUNCTION g_io_channel_write(BYVAL AS GIOChannel PTR, BYVAL AS const gchar PTR, BYVAL AS gsize, BYVAL AS gsize PTR) AS GIOError
DECLARE FUNCTION g_io_channel_write_chars(BYVAL AS GIOChannel PTR, BYVAL AS const gchar PTR, BYVAL AS gssize, BYVAL AS gsize PTR, BYVAL AS GError PTR PTR) AS GIOStatus
DECLARE FUNCTION g_io_channel_write_unichar(BYVAL AS GIOChannel PTR, BYVAL AS gunichar /'?'/, BYVAL AS GError PTR PTR) AS GIOStatus
DECLARE FUNCTION g_io_channel_error_from_errno(BYVAL AS gint) AS GIOChannelError
DECLARE FUNCTION g_io_channel_error_quark() AS GQuark
TYPE GIOFunc AS FUNCTION CDECL(BYVAL AS GIOChannel PTR, BYVAL AS GIOCondition, BYVAL AS gpointer) AS gboolean
TYPE _GIOFuncs
  io_read AS FUNCTION CDECL(BYVAL AS GIOChannel PTR, BYVAL AS gchar PTR, BYVAL AS gsize, BYVAL AS gsize PTR, BYVAL AS GError PTR PTR) AS GIOStatus
  io_write AS FUNCTION CDECL(BYVAL AS GIOChannel PTR, BYVAL AS const gchar PTR, BYVAL AS gsize, BYVAL AS gsize PTR, BYVAL AS GError PTR PTR) AS GIOStatus
  io_seek AS FUNCTION CDECL(BYVAL AS GIOChannel PTR, BYVAL AS gint64, BYVAL AS GSeekType, BYVAL AS GError PTR PTR) AS GIOStatus
  io_close AS FUNCTION CDECL(BYVAL AS GIOChannel PTR, BYVAL AS GError PTR PTR) AS GIOStatus
  io_create_watch AS FUNCTION CDECL(BYVAL AS GIOChannel PTR, BYVAL AS GIOCondition) AS GSource PTR
  io_free AS SUB CDECL(BYVAL AS GIOChannel PTR)
  io_set_flags AS FUNCTION CDECL(BYVAL AS GIOChannel PTR, BYVAL AS GIOFlags, BYVAL AS GError PTR PTR) AS GIOStatus
  io_get_flags AS FUNCTION CDECL(BYVAL AS GIOChannel PTR) AS GIOFlags
END TYPE
DECLARE FUNCTION g_key_file_new() AS GKeyFile PTR
DECLARE SUB g_key_file_free(BYVAL AS GKeyFile PTR)
DECLARE FUNCTION g_key_file_get_boolean(BYVAL AS GKeyFile PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION g_key_file_get_boolean_list(BYVAL AS GKeyFile PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS gsize PTR, BYVAL AS GError PTR PTR) AS gboolean PTR
DECLARE FUNCTION g_key_file_get_comment(BYVAL AS GKeyFile PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR) AS gchar PTR
DECLARE FUNCTION g_key_file_get_double(BYVAL AS GKeyFile PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR) AS gdouble
DECLARE FUNCTION g_key_file_get_double_list(BYVAL AS GKeyFile PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS gsize PTR, BYVAL AS GError PTR PTR) AS gdouble PTR
DECLARE FUNCTION g_key_file_get_groups(BYVAL AS GKeyFile PTR, BYVAL AS gsize PTR) AS gchar PTR PTR
DECLARE FUNCTION g_key_file_get_int64(BYVAL AS GKeyFile PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR) AS gint64
DECLARE FUNCTION g_key_file_get_integer(BYVAL AS GKeyFile PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR) AS gint
DECLARE FUNCTION g_key_file_get_integer_list(BYVAL AS GKeyFile PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS gsize PTR, BYVAL AS GError PTR PTR) AS gint PTR
DECLARE FUNCTION g_key_file_get_keys(BYVAL AS GKeyFile PTR, BYVAL AS const gchar PTR, BYVAL AS gsize PTR, BYVAL AS GError PTR PTR) AS gchar PTR PTR
DECLARE FUNCTION g_key_file_get_locale_for_key(BYVAL AS GKeyFile PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR) AS gchar PTR
DECLARE FUNCTION g_key_file_get_locale_string(BYVAL AS GKeyFile PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR) AS gchar PTR
DECLARE FUNCTION g_key_file_get_locale_string_list(BYVAL AS GKeyFile PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS gsize PTR, BYVAL AS GError PTR PTR) AS gchar PTR PTR
DECLARE FUNCTION g_key_file_get_start_group(BYVAL AS GKeyFile PTR) AS gchar PTR
DECLARE FUNCTION g_key_file_get_string(BYVAL AS GKeyFile PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR) AS gchar PTR
DECLARE FUNCTION g_key_file_get_string_list(BYVAL AS GKeyFile PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS gsize PTR, BYVAL AS GError PTR PTR) AS gchar PTR PTR
DECLARE FUNCTION g_key_file_get_uint64(BYVAL AS GKeyFile PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR) AS guint64
DECLARE FUNCTION g_key_file_get_value(BYVAL AS GKeyFile PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR) AS gchar PTR
DECLARE FUNCTION g_key_file_has_group(BYVAL AS GKeyFile PTR, BYVAL AS const gchar PTR) AS gboolean
DECLARE FUNCTION g_key_file_has_key(BYVAL AS GKeyFile PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION g_key_file_load_from_bytes(BYVAL AS GKeyFile PTR, BYVAL AS GBytes PTR, BYVAL AS GKeyFileFlags, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION g_key_file_load_from_data(BYVAL AS GKeyFile PTR, BYVAL AS const gchar PTR, BYVAL AS gsize, BYVAL AS GKeyFileFlags, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION g_key_file_load_from_data_dirs(BYVAL AS GKeyFile PTR, BYVAL AS const gchar PTR, BYVAL AS gchar PTR PTR, BYVAL AS GKeyFileFlags, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION g_key_file_load_from_dirs(BYVAL AS GKeyFile PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR PTR, BYVAL AS gchar PTR PTR, BYVAL AS GKeyFileFlags, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION g_key_file_load_from_file(BYVAL AS GKeyFile PTR, BYVAL AS const gchar PTR, BYVAL AS GKeyFileFlags, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION g_key_file_ref(BYVAL AS GKeyFile PTR) AS GKeyFile PTR
DECLARE FUNCTION g_key_file_remove_comment(BYVAL AS GKeyFile PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION g_key_file_remove_group(BYVAL AS GKeyFile PTR, BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION g_key_file_remove_key(BYVAL AS GKeyFile PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION g_key_file_save_to_file(BYVAL AS GKeyFile PTR, BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE SUB g_key_file_set_boolean(BYVAL AS GKeyFile PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS gboolean)
DECLARE SUB g_key_file_set_boolean_list(BYVAL AS GKeyFile PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS gboolean PTR, BYVAL AS gsize)
DECLARE FUNCTION g_key_file_set_comment(BYVAL AS GKeyFile PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE SUB g_key_file_set_double(BYVAL AS GKeyFile PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS gdouble)
DECLARE SUB g_key_file_set_double_list(BYVAL AS GKeyFile PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS gdouble PTR, BYVAL AS gsize)
DECLARE SUB g_key_file_set_int64(BYVAL AS GKeyFile PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS gint64)
DECLARE SUB g_key_file_set_integer(BYVAL AS GKeyFile PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS gint)
DECLARE SUB g_key_file_set_integer_list(BYVAL AS GKeyFile PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS gint PTR, BYVAL AS gsize)
DECLARE SUB g_key_file_set_list_separator(BYVAL AS GKeyFile PTR, BYVAL AS gint8 /'gchar'/)
DECLARE SUB g_key_file_set_locale_string(BYVAL AS GKeyFile PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR)
DECLARE SUB g_key_file_set_locale_string_list(BYVAL AS GKeyFile PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR const /'const gchar* const'/ PTR, BYVAL AS gsize)
DECLARE SUB g_key_file_set_string(BYVAL AS GKeyFile PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR)
DECLARE SUB g_key_file_set_string_list(BYVAL AS GKeyFile PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR const /'const gchar* const'/ PTR, BYVAL AS gsize)
DECLARE SUB g_key_file_set_uint64(BYVAL AS GKeyFile PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS guint64)
DECLARE SUB g_key_file_set_value(BYVAL AS GKeyFile PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR)
DECLARE FUNCTION g_key_file_to_data(BYVAL AS GKeyFile PTR, BYVAL AS gsize PTR, BYVAL AS GError PTR PTR) AS gchar PTR
DECLARE SUB g_key_file_unref(BYVAL AS GKeyFile PTR)
DECLARE FUNCTION g_key_file_error_quark() AS GQuark
TYPE _GList
  AS gpointer data
  AS GList PTR next
  AS GList PTR prev
END TYPE
DECLARE FUNCTION g_list_alloc() AS GList PTR
DECLARE FUNCTION g_list_append(BYVAL AS GList PTR, BYVAL AS gpointer) AS GList PTR
DECLARE FUNCTION g_list_concat(BYVAL AS GList PTR, BYVAL AS GList PTR) AS GList PTR
DECLARE FUNCTION g_list_copy(BYVAL AS GList PTR) AS GList PTR
DECLARE FUNCTION g_list_copy_deep(BYVAL AS GList PTR, BYVAL AS GCopyFunc, BYVAL AS gpointer) AS GList PTR
DECLARE FUNCTION g_list_delete_link(BYVAL AS GList PTR, BYVAL AS GList PTR) AS GList PTR
DECLARE FUNCTION g_list_find(BYVAL AS GList PTR, BYVAL AS gconstpointer) AS GList PTR
DECLARE FUNCTION g_list_find_custom(BYVAL AS GList PTR, BYVAL AS gconstpointer, BYVAL AS GCompareFunc) AS GList PTR
DECLARE FUNCTION g_list_first(BYVAL AS GList PTR) AS GList PTR
DECLARE SUB g_list_foreach(BYVAL AS GList PTR, BYVAL AS GFunc, BYVAL AS gpointer)
DECLARE SUB g_list_free(BYVAL AS GList PTR)
DECLARE SUB g_list_free_1(BYVAL AS GList PTR)
DECLARE SUB g_list_free_full(BYVAL AS GList PTR, BYVAL AS GDestroyNotify)
DECLARE FUNCTION g_list_index(BYVAL AS GList PTR, BYVAL AS gconstpointer) AS gint
DECLARE FUNCTION g_list_insert(BYVAL AS GList PTR, BYVAL AS gpointer, BYVAL AS gint) AS GList PTR
DECLARE FUNCTION g_list_insert_before(BYVAL AS GList PTR, BYVAL AS GList PTR, BYVAL AS gpointer) AS GList PTR
DECLARE FUNCTION g_list_insert_before_link(BYVAL AS GList PTR, BYVAL AS GList PTR, BYVAL AS GList PTR) AS GList PTR
DECLARE FUNCTION g_list_insert_sorted(BYVAL AS GList PTR, BYVAL AS gpointer, BYVAL AS GCompareFunc) AS GList PTR
DECLARE FUNCTION g_list_insert_sorted_with_data(BYVAL AS GList PTR, BYVAL AS gpointer, BYVAL AS GCompareDataFunc, BYVAL AS gpointer) AS GList PTR
DECLARE FUNCTION g_list_last(BYVAL AS GList PTR) AS GList PTR
DECLARE FUNCTION g_list_length(BYVAL AS GList PTR) AS guint
DECLARE FUNCTION g_list_nth(BYVAL AS GList PTR, BYVAL AS guint) AS GList PTR
DECLARE FUNCTION g_list_nth_data(BYVAL AS GList PTR, BYVAL AS guint) AS gpointer
DECLARE FUNCTION g_list_nth_prev(BYVAL AS GList PTR, BYVAL AS guint) AS GList PTR
DECLARE FUNCTION g_list_position(BYVAL AS GList PTR, BYVAL AS GList PTR) AS gint
DECLARE FUNCTION g_list_prepend(BYVAL AS GList PTR, BYVAL AS gpointer) AS GList PTR
DECLARE FUNCTION g_list_remove(BYVAL AS GList PTR, BYVAL AS gconstpointer) AS GList PTR
DECLARE FUNCTION g_list_remove_all(BYVAL AS GList PTR, BYVAL AS gconstpointer) AS GList PTR
DECLARE FUNCTION g_list_remove_link(BYVAL AS GList PTR, BYVAL AS GList PTR) AS GList PTR
DECLARE FUNCTION g_list_reverse(BYVAL AS GList PTR) AS GList PTR
DECLARE FUNCTION g_list_sort(BYVAL AS GList PTR, BYVAL AS GCompareFunc) AS GList PTR
DECLARE FUNCTION g_list_sort_with_data(BYVAL AS GList PTR, BYVAL AS GCompareDataFunc, BYVAL AS gpointer) AS GList PTR
TYPE _GLogField
  AS const gchar PTR key
  AS gconstpointer value
  AS gssize length
END TYPE
TYPE GLogFunc AS SUB CDECL(BYVAL AS const gchar PTR, BYVAL AS GLogLevelFlags, BYVAL AS const gchar PTR, BYVAL AS gpointer)
TYPE GLogWriterFunc AS FUNCTION CDECL(BYVAL AS GLogLevelFlags, BYVAL AS const GLogField PTR, BYVAL AS gsize, BYVAL AS gpointer) AS GLogWriterOutput
DECLARE FUNCTION g_main_context_new() AS GMainContext PTR
DECLARE FUNCTION g_main_context_acquire(BYVAL AS GMainContext PTR) AS gboolean
DECLARE SUB g_main_context_add_poll(BYVAL AS GMainContext PTR, BYVAL AS GPollFD PTR, BYVAL AS gint)
DECLARE FUNCTION g_main_context_check(BYVAL AS GMainContext PTR, BYVAL AS gint, BYVAL AS GPollFD PTR, BYVAL AS gint) AS gboolean
DECLARE SUB g_main_context_dispatch(BYVAL AS GMainContext PTR)
DECLARE FUNCTION g_main_context_find_source_by_funcs_user_data(BYVAL AS GMainContext PTR, BYVAL AS GSourceFuncs PTR, BYVAL AS gpointer) AS GSource PTR
DECLARE FUNCTION g_main_context_find_source_by_id(BYVAL AS GMainContext PTR, BYVAL AS guint) AS GSource PTR
DECLARE FUNCTION g_main_context_find_source_by_user_data(BYVAL AS GMainContext PTR, BYVAL AS gpointer) AS GSource PTR
DECLARE FUNCTION g_main_context_get_poll_func(BYVAL AS GMainContext PTR) AS GPollFunc
DECLARE SUB g_main_context_invoke(BYVAL AS GMainContext PTR, BYVAL AS GSourceFunc, BYVAL AS gpointer)
DECLARE SUB g_main_context_invoke_full(BYVAL AS GMainContext PTR, BYVAL AS gint, BYVAL AS GSourceFunc, BYVAL AS gpointer, BYVAL AS GDestroyNotify)
DECLARE FUNCTION g_main_context_is_owner(BYVAL AS GMainContext PTR) AS gboolean
DECLARE FUNCTION g_main_context_iteration(BYVAL AS GMainContext PTR, BYVAL AS gboolean) AS gboolean
DECLARE FUNCTION g_main_context_pending(BYVAL AS GMainContext PTR) AS gboolean
DECLARE SUB g_main_context_pop_thread_default(BYVAL AS GMainContext PTR)
DECLARE FUNCTION g_main_context_prepare(BYVAL AS GMainContext PTR, BYVAL AS gint PTR) AS gboolean
DECLARE SUB g_main_context_push_thread_default(BYVAL AS GMainContext PTR)
DECLARE FUNCTION g_main_context_query(BYVAL AS GMainContext PTR, BYVAL AS gint, BYVAL AS gint PTR, BYVAL AS GPollFD PTR, BYVAL AS gint) AS gint
DECLARE FUNCTION g_main_context_ref(BYVAL AS GMainContext PTR) AS GMainContext PTR
DECLARE SUB g_main_context_release(BYVAL AS GMainContext PTR)
DECLARE SUB g_main_context_remove_poll(BYVAL AS GMainContext PTR, BYVAL AS GPollFD PTR)
DECLARE SUB g_main_context_set_poll_func(BYVAL AS GMainContext PTR, BYVAL AS GPollFunc)
DECLARE SUB g_main_context_unref(BYVAL AS GMainContext PTR)
DECLARE FUNCTION g_main_context_wait(BYVAL AS GMainContext PTR, BYVAL AS GCond PTR, BYVAL AS GMutex PTR) AS gboolean
DECLARE SUB g_main_context_wakeup(BYVAL AS GMainContext PTR)
DECLARE FUNCTION g_main_context_default() AS GMainContext PTR
DECLARE FUNCTION g_main_context_get_thread_default() AS GMainContext PTR
DECLARE FUNCTION g_main_context_ref_thread_default() AS GMainContext PTR
DECLARE FUNCTION g_main_loop_new(BYVAL AS GMainContext PTR, BYVAL AS gboolean) AS GMainLoop PTR
DECLARE FUNCTION g_main_loop_get_context(BYVAL AS GMainLoop PTR) AS GMainContext PTR
DECLARE FUNCTION g_main_loop_is_running(BYVAL AS GMainLoop PTR) AS gboolean
DECLARE SUB g_main_loop_quit(BYVAL AS GMainLoop PTR)
DECLARE FUNCTION g_main_loop_ref(BYVAL AS GMainLoop PTR) AS GMainLoop PTR
DECLARE SUB g_main_loop_run(BYVAL AS GMainLoop PTR)
DECLARE SUB g_main_loop_unref(BYVAL AS GMainLoop PTR)
DECLARE FUNCTION g_mapped_file_new(BYVAL AS const gchar PTR, BYVAL AS gboolean, BYVAL AS GError PTR PTR) AS GMappedFile PTR
DECLARE FUNCTION g_mapped_file_new_from_fd(BYVAL AS gint, BYVAL AS gboolean, BYVAL AS GError PTR PTR) AS GMappedFile PTR
DECLARE SUB g_mapped_file_free(BYVAL AS GMappedFile PTR)
DECLARE FUNCTION g_mapped_file_get_bytes(BYVAL AS GMappedFile PTR) AS GBytes PTR
DECLARE FUNCTION g_mapped_file_get_contents(BYVAL AS GMappedFile PTR) AS gchar PTR
DECLARE FUNCTION g_mapped_file_get_length(BYVAL AS GMappedFile PTR) AS gsize
DECLARE FUNCTION g_mapped_file_ref(BYVAL AS GMappedFile PTR) AS GMappedFile PTR
DECLARE SUB g_mapped_file_unref(BYVAL AS GMappedFile PTR)
DECLARE FUNCTION g_markup_parse_context_new(BYVAL AS const GMarkupParser PTR, BYVAL AS GMarkupParseFlags, BYVAL AS gpointer, BYVAL AS GDestroyNotify) AS GMarkupParseContext PTR
DECLARE FUNCTION g_markup_parse_context_end_parse(BYVAL AS GMarkupParseContext PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE SUB g_markup_parse_context_free(BYVAL AS GMarkupParseContext PTR)
DECLARE FUNCTION g_markup_parse_context_get_element(BYVAL AS GMarkupParseContext PTR) AS const gchar PTR
DECLARE FUNCTION g_markup_parse_context_get_element_stack(BYVAL AS GMarkupParseContext PTR) AS const GSList PTR
DECLARE SUB g_markup_parse_context_get_position(BYVAL AS GMarkupParseContext PTR, BYVAL AS gint PTR, BYVAL AS gint PTR)
DECLARE FUNCTION g_markup_parse_context_get_user_data(BYVAL AS GMarkupParseContext PTR) AS gpointer
DECLARE FUNCTION g_markup_parse_context_parse(BYVAL AS GMarkupParseContext PTR, BYVAL AS const gchar PTR, BYVAL AS gssize, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION g_markup_parse_context_pop(BYVAL AS GMarkupParseContext PTR) AS gpointer
DECLARE SUB g_markup_parse_context_push(BYVAL AS GMarkupParseContext PTR, BYVAL AS const GMarkupParser PTR, BYVAL AS gpointer)
DECLARE FUNCTION g_markup_parse_context_ref(BYVAL AS GMarkupParseContext PTR) AS GMarkupParseContext PTR
DECLARE SUB g_markup_parse_context_unref(BYVAL AS GMarkupParseContext PTR)
TYPE _GMarkupParser
  start_element AS SUB CDECL(BYVAL AS GMarkupParseContext PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR PTR, BYVAL AS const gchar PTR PTR, BYVAL AS gpointer, BYVAL AS GError PTR PTR)
  end_element AS SUB CDECL(BYVAL AS GMarkupParseContext PTR, BYVAL AS const gchar PTR, BYVAL AS gpointer, BYVAL AS GError PTR PTR)
  text AS SUB CDECL(BYVAL AS GMarkupParseContext PTR, BYVAL AS const gchar PTR, BYVAL AS gsize, BYVAL AS gpointer, BYVAL AS GError PTR PTR)
  passthrough AS SUB CDECL(BYVAL AS GMarkupParseContext PTR, BYVAL AS const gchar PTR, BYVAL AS gsize, BYVAL AS gpointer, BYVAL AS GError PTR PTR)
  error AS SUB CDECL(BYVAL AS GMarkupParseContext PTR, BYVAL AS GError PTR, BYVAL AS gpointer)
END TYPE
DECLARE FUNCTION g_match_info_expand_references(BYVAL AS const GMatchInfo PTR, BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR) AS gchar PTR
DECLARE FUNCTION g_match_info_fetch(BYVAL AS const GMatchInfo PTR, BYVAL AS gint) AS gchar PTR
DECLARE FUNCTION g_match_info_fetch_all(BYVAL AS const GMatchInfo PTR) AS gchar PTR PTR
DECLARE FUNCTION g_match_info_fetch_named(BYVAL AS const GMatchInfo PTR, BYVAL AS const gchar PTR) AS gchar PTR
DECLARE FUNCTION g_match_info_fetch_named_pos(BYVAL AS const GMatchInfo PTR, BYVAL AS const gchar PTR, BYVAL AS gint PTR, BYVAL AS gint PTR) AS gboolean
DECLARE FUNCTION g_match_info_fetch_pos(BYVAL AS const GMatchInfo PTR, BYVAL AS gint, BYVAL AS gint PTR, BYVAL AS gint PTR) AS gboolean
DECLARE SUB g_match_info_free(BYVAL AS GMatchInfo PTR)
DECLARE FUNCTION g_match_info_get_match_count(BYVAL AS const GMatchInfo PTR) AS gint
DECLARE FUNCTION g_match_info_get_regex(BYVAL AS const GMatchInfo PTR) AS GRegex PTR
DECLARE FUNCTION g_match_info_get_string(BYVAL AS const GMatchInfo PTR) AS const gchar PTR
DECLARE FUNCTION g_match_info_is_partial_match(BYVAL AS const GMatchInfo PTR) AS gboolean
DECLARE FUNCTION g_match_info_matches(BYVAL AS const GMatchInfo PTR) AS gboolean
DECLARE FUNCTION g_match_info_next(BYVAL AS GMatchInfo PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION g_match_info_ref(BYVAL AS GMatchInfo PTR) AS GMatchInfo PTR
DECLARE SUB g_match_info_unref(BYVAL AS GMatchInfo PTR)
TYPE _GMemVTable
  malloc AS FUNCTION CDECL(BYVAL AS gsize) AS gpointer
  realloc AS FUNCTION CDECL(BYVAL AS gpointer, BYVAL AS gsize) AS gpointer
  free AS SUB CDECL(BYVAL AS gpointer)
  calloc AS FUNCTION CDECL(BYVAL AS gsize, BYVAL AS gsize) AS gpointer
  try_malloc AS FUNCTION CDECL(BYVAL AS gsize) AS gpointer
  try_realloc AS FUNCTION CDECL(BYVAL AS gpointer, BYVAL AS gsize) AS gpointer
END TYPE
TYPE _GNode
  AS gpointer data
  AS GNode PTR next
  AS GNode PTR prev
  AS GNode PTR parent
  AS GNode PTR children
END TYPE
DECLARE FUNCTION g_node_child_index(BYVAL AS GNode PTR, BYVAL AS gpointer) AS gint
DECLARE FUNCTION g_node_child_position(BYVAL AS GNode PTR, BYVAL AS GNode PTR) AS gint
DECLARE SUB g_node_children_foreach(BYVAL AS GNode PTR, BYVAL AS GTraverseFlags, BYVAL AS GNodeForeachFunc, BYVAL AS gpointer)
DECLARE FUNCTION g_node_copy(BYVAL AS GNode PTR) AS GNode PTR
DECLARE FUNCTION g_node_copy_deep(BYVAL AS GNode PTR, BYVAL AS GCopyFunc, BYVAL AS gpointer) AS GNode PTR
DECLARE FUNCTION g_node_depth(BYVAL AS GNode PTR) AS guint
DECLARE SUB g_node_destroy(BYVAL AS GNode PTR)
DECLARE FUNCTION g_node_find(BYVAL AS GNode PTR, BYVAL AS GTraverseType, BYVAL AS GTraverseFlags, BYVAL AS gpointer) AS GNode PTR
DECLARE FUNCTION g_node_find_child(BYVAL AS GNode PTR, BYVAL AS GTraverseFlags, BYVAL AS gpointer) AS GNode PTR
DECLARE FUNCTION g_node_first_sibling(BYVAL AS GNode PTR) AS GNode PTR
DECLARE FUNCTION g_node_get_root(BYVAL AS GNode PTR) AS GNode PTR
DECLARE FUNCTION g_node_insert(BYVAL AS GNode PTR, BYVAL AS gint, BYVAL AS GNode PTR) AS GNode PTR
DECLARE FUNCTION g_node_insert_after(BYVAL AS GNode PTR, BYVAL AS GNode PTR, BYVAL AS GNode PTR) AS GNode PTR
DECLARE FUNCTION g_node_insert_before(BYVAL AS GNode PTR, BYVAL AS GNode PTR, BYVAL AS GNode PTR) AS GNode PTR
DECLARE FUNCTION g_node_is_ancestor(BYVAL AS GNode PTR, BYVAL AS GNode PTR) AS gboolean
DECLARE FUNCTION g_node_last_child(BYVAL AS GNode PTR) AS GNode PTR
DECLARE FUNCTION g_node_last_sibling(BYVAL AS GNode PTR) AS GNode PTR
DECLARE FUNCTION g_node_max_height(BYVAL AS GNode PTR) AS guint
DECLARE FUNCTION g_node_n_children(BYVAL AS GNode PTR) AS guint
DECLARE FUNCTION g_node_n_nodes(BYVAL AS GNode PTR, BYVAL AS GTraverseFlags) AS guint
DECLARE FUNCTION g_node_nth_child(BYVAL AS GNode PTR, BYVAL AS guint) AS GNode PTR
DECLARE FUNCTION g_node_prepend(BYVAL AS GNode PTR, BYVAL AS GNode PTR) AS GNode PTR
DECLARE SUB g_node_reverse_children(BYVAL AS GNode PTR)
DECLARE SUB g_node_traverse(BYVAL AS GNode PTR, BYVAL AS GTraverseType, BYVAL AS GTraverseFlags, BYVAL AS gint, BYVAL AS GNodeTraverseFunc, BYVAL AS gpointer)
DECLARE SUB g_node_unlink(BYVAL AS GNode PTR)
DECLARE FUNCTION g_node_new(BYVAL AS gpointer) AS GNode PTR
TYPE _GOnce
  AS GOnceStatus status
  AS gpointer retval
END TYPE
DECLARE FUNCTION g_once_impl(BYVAL AS GOnce PTR, BYVAL AS GThreadFunc, BYVAL AS gpointer) AS gpointer
DECLARE FUNCTION g_once_init_enter(BYVAL AS any /'void'/ PTR) AS gboolean
DECLARE SUB g_once_init_leave(BYVAL AS any /'void'/ PTR, BYVAL AS gsize)
TYPE GOptionArgFunc AS FUNCTION CDECL(BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS gpointer) AS gboolean
DECLARE SUB g_option_context_add_group(BYVAL AS GOptionContext PTR, BYVAL AS GOptionGroup PTR)
DECLARE SUB g_option_context_add_main_entries(BYVAL AS GOptionContext PTR, BYVAL AS const GOptionEntry PTR, BYVAL AS const gchar PTR)
DECLARE SUB g_option_context_free(BYVAL AS GOptionContext PTR)
DECLARE FUNCTION g_option_context_get_description(BYVAL AS GOptionContext PTR) AS const gchar PTR
DECLARE FUNCTION g_option_context_get_help(BYVAL AS GOptionContext PTR, BYVAL AS gboolean, BYVAL AS GOptionGroup PTR) AS gchar PTR
DECLARE FUNCTION g_option_context_get_help_enabled(BYVAL AS GOptionContext PTR) AS gboolean
DECLARE FUNCTION g_option_context_get_ignore_unknown_options(BYVAL AS GOptionContext PTR) AS gboolean
DECLARE FUNCTION g_option_context_get_main_group(BYVAL AS GOptionContext PTR) AS GOptionGroup PTR
DECLARE FUNCTION g_option_context_get_strict_posix(BYVAL AS GOptionContext PTR) AS gboolean
DECLARE FUNCTION g_option_context_get_summary(BYVAL AS GOptionContext PTR) AS const gchar PTR
DECLARE FUNCTION g_option_context_parse(BYVAL AS GOptionContext PTR, BYVAL AS gint PTR, BYVAL AS gchar PTR PTR PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION g_option_context_parse_strv(BYVAL AS GOptionContext PTR, BYVAL AS gchar PTR PTR PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE SUB g_option_context_set_description(BYVAL AS GOptionContext PTR, BYVAL AS const gchar PTR)
DECLARE SUB g_option_context_set_help_enabled(BYVAL AS GOptionContext PTR, BYVAL AS gboolean)
DECLARE SUB g_option_context_set_ignore_unknown_options(BYVAL AS GOptionContext PTR, BYVAL AS gboolean)
DECLARE SUB g_option_context_set_main_group(BYVAL AS GOptionContext PTR, BYVAL AS GOptionGroup PTR)
DECLARE SUB g_option_context_set_strict_posix(BYVAL AS GOptionContext PTR, BYVAL AS gboolean)
DECLARE SUB g_option_context_set_summary(BYVAL AS GOptionContext PTR, BYVAL AS const gchar PTR)
DECLARE SUB g_option_context_set_translate_func(BYVAL AS GOptionContext PTR, BYVAL AS GTranslateFunc, BYVAL AS gpointer, BYVAL AS GDestroyNotify)
DECLARE SUB g_option_context_set_translation_domain(BYVAL AS GOptionContext PTR, BYVAL AS const gchar PTR)
DECLARE FUNCTION g_option_context_new(BYVAL AS const gchar PTR) AS GOptionContext PTR
TYPE _GOptionEntry
  AS const gchar PTR long_name
  AS gint8 /'gchar'/ short_name
  AS gint flags
  AS GOptionArg arg
  AS gpointer arg_data
  AS const gchar PTR description
  AS const gchar PTR arg_description
END TYPE
TYPE GOptionErrorFunc AS SUB CDECL(BYVAL AS GOptionContext PTR, BYVAL AS GOptionGroup PTR, BYVAL AS gpointer)
DECLARE FUNCTION g_option_group_new(BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS gpointer, BYVAL AS GDestroyNotify) AS GOptionGroup PTR
DECLARE SUB g_option_group_add_entries(BYVAL AS GOptionGroup PTR, BYVAL AS const GOptionEntry PTR)
DECLARE SUB g_option_group_free(BYVAL AS GOptionGroup PTR)
DECLARE FUNCTION g_option_group_ref(BYVAL AS GOptionGroup PTR) AS GOptionGroup PTR
DECLARE SUB g_option_group_set_error_hook(BYVAL AS GOptionGroup PTR, BYVAL AS GOptionErrorFunc)
DECLARE SUB g_option_group_set_parse_hooks(BYVAL AS GOptionGroup PTR, BYVAL AS GOptionParseFunc, BYVAL AS GOptionParseFunc)
DECLARE SUB g_option_group_set_translate_func(BYVAL AS GOptionGroup PTR, BYVAL AS GTranslateFunc, BYVAL AS gpointer, BYVAL AS GDestroyNotify)
DECLARE SUB g_option_group_set_translation_domain(BYVAL AS GOptionGroup PTR, BYVAL AS const gchar PTR)
DECLARE SUB g_option_group_unref(BYVAL AS GOptionGroup PTR)
DECLARE FUNCTION g_pattern_spec_equal(BYVAL AS GPatternSpec PTR, BYVAL AS GPatternSpec PTR) AS gboolean
DECLARE SUB g_pattern_spec_free(BYVAL AS GPatternSpec PTR)
DECLARE FUNCTION g_pattern_spec_new(BYVAL AS const gchar PTR) AS GPatternSpec PTR
TYPE _GPollFD
  AS gint fd
  AS gushort events
  AS gushort revents
END TYPE
TYPE GPrintFunc AS SUB CDECL(BYVAL AS const gchar PTR)
TYPE _GPrivate
  AS gpointer p
  AS GDestroyNotify notify
  AS gpointer future(1)
END TYPE
DECLARE FUNCTION g_private_get(BYVAL AS GPrivate PTR) AS gpointer
DECLARE SUB g_private_replace(BYVAL AS GPrivate PTR, BYVAL AS gpointer)
DECLARE SUB g_private_set(BYVAL AS GPrivate PTR, BYVAL AS gpointer)
TYPE _GPtrArray
  AS gpointer PTR pdata
  AS guint len
END TYPE
DECLARE SUB g_ptr_array_add(BYVAL AS GPtrArray PTR, BYVAL AS gpointer)
DECLARE FUNCTION g_ptr_array_copy(BYVAL AS GPtrArray PTR, BYVAL AS GCopyFunc, BYVAL AS gpointer) AS GPtrArray PTR
DECLARE SUB g_ptr_array_extend(BYVAL AS GPtrArray PTR, BYVAL AS GPtrArray PTR, BYVAL AS GCopyFunc, BYVAL AS gpointer)
DECLARE SUB g_ptr_array_extend_and_steal(BYVAL AS GPtrArray PTR, BYVAL AS GPtrArray PTR)
DECLARE FUNCTION g_ptr_array_find(BYVAL AS GPtrArray PTR, BYVAL AS gconstpointer, BYVAL AS guint PTR) AS gboolean
DECLARE FUNCTION g_ptr_array_find_with_equal_func(BYVAL AS GPtrArray PTR, BYVAL AS gconstpointer, BYVAL AS GEqualFunc, BYVAL AS guint PTR) AS gboolean
DECLARE SUB g_ptr_array_foreach(BYVAL AS GPtrArray PTR, BYVAL AS GFunc, BYVAL AS gpointer)
DECLARE FUNCTION g_ptr_array_free(BYVAL AS GPtrArray PTR, BYVAL AS gboolean) AS gpointer PTR
DECLARE SUB g_ptr_array_insert(BYVAL AS GPtrArray PTR, BYVAL AS gint, BYVAL AS gpointer)
DECLARE FUNCTION g_ptr_array_new() AS GPtrArray PTR
DECLARE FUNCTION g_ptr_array_new_full(BYVAL AS guint, BYVAL AS GDestroyNotify) AS GPtrArray PTR
DECLARE FUNCTION g_ptr_array_new_with_free_func(BYVAL AS GDestroyNotify) AS GPtrArray PTR
DECLARE FUNCTION g_ptr_array_ref(BYVAL AS GPtrArray PTR) AS GPtrArray PTR
DECLARE FUNCTION g_ptr_array_remove(BYVAL AS GPtrArray PTR, BYVAL AS gpointer) AS gboolean
DECLARE FUNCTION g_ptr_array_remove_fast(BYVAL AS GPtrArray PTR, BYVAL AS gpointer) AS gboolean
DECLARE FUNCTION g_ptr_array_remove_index(BYVAL AS GPtrArray PTR, BYVAL AS guint) AS gpointer
DECLARE FUNCTION g_ptr_array_remove_index_fast(BYVAL AS GPtrArray PTR, BYVAL AS guint) AS gpointer
DECLARE FUNCTION g_ptr_array_remove_range(BYVAL AS GPtrArray PTR, BYVAL AS guint, BYVAL AS guint) AS GPtrArray PTR
DECLARE SUB g_ptr_array_set_free_func(BYVAL AS GPtrArray PTR, BYVAL AS GDestroyNotify)
DECLARE SUB g_ptr_array_set_size(BYVAL AS GPtrArray PTR, BYVAL AS gint)
DECLARE FUNCTION g_ptr_array_sized_new(BYVAL AS guint) AS GPtrArray PTR
DECLARE SUB g_ptr_array_sort(BYVAL AS GPtrArray PTR, BYVAL AS GCompareFunc)
DECLARE SUB g_ptr_array_sort_with_data(BYVAL AS GPtrArray PTR, BYVAL AS GCompareDataFunc, BYVAL AS gpointer)
DECLARE FUNCTION g_ptr_array_steal(BYVAL AS GPtrArray PTR, BYVAL AS gsize PTR) AS gpointer PTR
DECLARE FUNCTION g_ptr_array_steal_index(BYVAL AS GPtrArray PTR, BYVAL AS guint) AS gpointer
DECLARE FUNCTION g_ptr_array_steal_index_fast(BYVAL AS GPtrArray PTR, BYVAL AS guint) AS gpointer
DECLARE SUB g_ptr_array_unref(BYVAL AS GPtrArray PTR)
TYPE _GQueue
  AS GList PTR head
  AS GList PTR tail
  AS guint length
END TYPE
DECLARE SUB g_queue_clear(BYVAL AS GQueue PTR)
DECLARE SUB g_queue_clear_full(BYVAL AS GQueue PTR, BYVAL AS GDestroyNotify)
DECLARE FUNCTION g_queue_copy(BYVAL AS GQueue PTR) AS GQueue PTR
DECLARE SUB g_queue_delete_link(BYVAL AS GQueue PTR, BYVAL AS GList PTR)
DECLARE FUNCTION g_queue_find(BYVAL AS GQueue PTR, BYVAL AS gconstpointer) AS GList PTR
DECLARE FUNCTION g_queue_find_custom(BYVAL AS GQueue PTR, BYVAL AS gconstpointer, BYVAL AS GCompareFunc) AS GList PTR
DECLARE SUB g_queue_foreach(BYVAL AS GQueue PTR, BYVAL AS GFunc, BYVAL AS gpointer)
DECLARE SUB g_queue_free(BYVAL AS GQueue PTR)
DECLARE SUB g_queue_free_full(BYVAL AS GQueue PTR, BYVAL AS GDestroyNotify)
DECLARE FUNCTION g_queue_get_length(BYVAL AS GQueue PTR) AS guint
DECLARE FUNCTION g_queue_index(BYVAL AS GQueue PTR, BYVAL AS gconstpointer) AS gint
DECLARE SUB g_queue_init(BYVAL AS GQueue PTR)
DECLARE SUB g_queue_insert_after(BYVAL AS GQueue PTR, BYVAL AS GList PTR, BYVAL AS gpointer)
DECLARE SUB g_queue_insert_after_link(BYVAL AS GQueue PTR, BYVAL AS GList PTR, BYVAL AS GList PTR)
DECLARE SUB g_queue_insert_before(BYVAL AS GQueue PTR, BYVAL AS GList PTR, BYVAL AS gpointer)
DECLARE SUB g_queue_insert_before_link(BYVAL AS GQueue PTR, BYVAL AS GList PTR, BYVAL AS GList PTR)
DECLARE SUB g_queue_insert_sorted(BYVAL AS GQueue PTR, BYVAL AS gpointer, BYVAL AS GCompareDataFunc, BYVAL AS gpointer)
DECLARE FUNCTION g_queue_is_empty(BYVAL AS GQueue PTR) AS gboolean
DECLARE FUNCTION g_queue_link_index(BYVAL AS GQueue PTR, BYVAL AS GList PTR) AS gint
DECLARE FUNCTION g_queue_peek_head(BYVAL AS GQueue PTR) AS gpointer
DECLARE FUNCTION g_queue_peek_head_link(BYVAL AS GQueue PTR) AS GList PTR
DECLARE FUNCTION g_queue_peek_nth(BYVAL AS GQueue PTR, BYVAL AS guint) AS gpointer
DECLARE FUNCTION g_queue_peek_nth_link(BYVAL AS GQueue PTR, BYVAL AS guint) AS GList PTR
DECLARE FUNCTION g_queue_peek_tail(BYVAL AS GQueue PTR) AS gpointer
DECLARE FUNCTION g_queue_peek_tail_link(BYVAL AS GQueue PTR) AS GList PTR
DECLARE FUNCTION g_queue_pop_head(BYVAL AS GQueue PTR) AS gpointer
DECLARE FUNCTION g_queue_pop_head_link(BYVAL AS GQueue PTR) AS GList PTR
DECLARE FUNCTION g_queue_pop_nth(BYVAL AS GQueue PTR, BYVAL AS guint) AS gpointer
DECLARE FUNCTION g_queue_pop_nth_link(BYVAL AS GQueue PTR, BYVAL AS guint) AS GList PTR
DECLARE FUNCTION g_queue_pop_tail(BYVAL AS GQueue PTR) AS gpointer
DECLARE FUNCTION g_queue_pop_tail_link(BYVAL AS GQueue PTR) AS GList PTR
DECLARE SUB g_queue_push_head(BYVAL AS GQueue PTR, BYVAL AS gpointer)
DECLARE SUB g_queue_push_head_link(BYVAL AS GQueue PTR, BYVAL AS GList PTR)
DECLARE SUB g_queue_push_nth(BYVAL AS GQueue PTR, BYVAL AS gpointer, BYVAL AS gint)
DECLARE SUB g_queue_push_nth_link(BYVAL AS GQueue PTR, BYVAL AS gint, BYVAL AS GList PTR)
DECLARE SUB g_queue_push_tail(BYVAL AS GQueue PTR, BYVAL AS gpointer)
DECLARE SUB g_queue_push_tail_link(BYVAL AS GQueue PTR, BYVAL AS GList PTR)
DECLARE FUNCTION g_queue_remove(BYVAL AS GQueue PTR, BYVAL AS gconstpointer) AS gboolean
DECLARE FUNCTION g_queue_remove_all(BYVAL AS GQueue PTR, BYVAL AS gconstpointer) AS guint
DECLARE SUB g_queue_reverse(BYVAL AS GQueue PTR)
DECLARE SUB g_queue_sort(BYVAL AS GQueue PTR, BYVAL AS GCompareDataFunc, BYVAL AS gpointer)
DECLARE SUB g_queue_unlink(BYVAL AS GQueue PTR, BYVAL AS GList PTR)
DECLARE FUNCTION g_queue_new() AS GQueue PTR
TYPE _GRWLock
  AS gpointer p
  AS guint i(1)
END TYPE
DECLARE SUB g_rw_lock_clear(BYVAL AS GRWLock PTR)
DECLARE SUB g_rw_lock_init(BYVAL AS GRWLock PTR)
DECLARE SUB g_rw_lock_reader_lock(BYVAL AS GRWLock PTR)
DECLARE FUNCTION g_rw_lock_reader_trylock(BYVAL AS GRWLock PTR) AS gboolean
DECLARE SUB g_rw_lock_reader_unlock(BYVAL AS GRWLock PTR)
DECLARE SUB g_rw_lock_writer_lock(BYVAL AS GRWLock PTR)
DECLARE FUNCTION g_rw_lock_writer_trylock(BYVAL AS GRWLock PTR) AS gboolean
DECLARE SUB g_rw_lock_writer_unlock(BYVAL AS GRWLock PTR)
DECLARE FUNCTION g_rand_copy(BYVAL AS GRand PTR) AS GRand PTR
DECLARE FUNCTION g_rand_double(BYVAL AS GRand PTR) AS gdouble
DECLARE FUNCTION g_rand_double_range(BYVAL AS GRand PTR, BYVAL AS gdouble, BYVAL AS gdouble) AS gdouble
DECLARE SUB g_rand_free(BYVAL AS GRand PTR)
DECLARE FUNCTION g_rand_int(BYVAL AS GRand PTR) AS guint32
DECLARE FUNCTION g_rand_int_range(BYVAL AS GRand PTR, BYVAL AS gint32, BYVAL AS gint32) AS gint32
DECLARE SUB g_rand_set_seed(BYVAL AS GRand PTR, BYVAL AS guint32)
DECLARE SUB g_rand_set_seed_array(BYVAL AS GRand PTR, BYVAL AS const guint32 PTR, BYVAL AS guint)
DECLARE FUNCTION g_rand_new() AS GRand PTR
DECLARE FUNCTION g_rand_new_with_seed(BYVAL AS guint32) AS GRand PTR
DECLARE FUNCTION g_rand_new_with_seed_array(BYVAL AS const guint32 PTR, BYVAL AS guint) AS GRand PTR
TYPE _GRecMutex
  AS gpointer p
  AS guint i(1)
END TYPE
DECLARE SUB g_rec_mutex_clear(BYVAL AS GRecMutex PTR)
DECLARE SUB g_rec_mutex_init(BYVAL AS GRecMutex PTR)
DECLARE SUB g_rec_mutex_lock(BYVAL AS GRecMutex PTR)
DECLARE FUNCTION g_rec_mutex_trylock(BYVAL AS GRecMutex PTR) AS gboolean
DECLARE SUB g_rec_mutex_unlock(BYVAL AS GRecMutex PTR)
DECLARE FUNCTION g_regex_new(BYVAL AS const gchar PTR, BYVAL AS GRegexCompileFlags, BYVAL AS GRegexMatchFlags, BYVAL AS GError PTR PTR) AS GRegex PTR
DECLARE FUNCTION g_regex_get_capture_count(BYVAL AS const GRegex PTR) AS gint
DECLARE FUNCTION g_regex_get_compile_flags(BYVAL AS const GRegex PTR) AS GRegexCompileFlags
DECLARE FUNCTION g_regex_get_has_cr_or_lf(BYVAL AS const GRegex PTR) AS gboolean
DECLARE FUNCTION g_regex_get_match_flags(BYVAL AS const GRegex PTR) AS GRegexMatchFlags
DECLARE FUNCTION g_regex_get_max_backref(BYVAL AS const GRegex PTR) AS gint
DECLARE FUNCTION g_regex_get_max_lookbehind(BYVAL AS const GRegex PTR) AS gint
DECLARE FUNCTION g_regex_get_pattern(BYVAL AS const GRegex PTR) AS const gchar PTR
DECLARE FUNCTION g_regex_get_string_number(BYVAL AS const GRegex PTR, BYVAL AS const gchar PTR) AS gint
DECLARE FUNCTION g_regex_match(BYVAL AS const GRegex PTR, BYVAL AS const gchar PTR, BYVAL AS GRegexMatchFlags, BYVAL AS GMatchInfo PTR PTR) AS gboolean
DECLARE FUNCTION g_regex_match_all(BYVAL AS const GRegex PTR, BYVAL AS const gchar PTR, BYVAL AS GRegexMatchFlags, BYVAL AS GMatchInfo PTR PTR) AS gboolean
DECLARE FUNCTION g_regex_match_all_full(BYVAL AS const GRegex PTR, BYVAL AS const gchar PTR, BYVAL AS gssize, BYVAL AS gint, BYVAL AS GRegexMatchFlags, BYVAL AS GMatchInfo PTR PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION g_regex_match_full(BYVAL AS const GRegex PTR, BYVAL AS const gchar PTR, BYVAL AS gssize, BYVAL AS gint, BYVAL AS GRegexMatchFlags, BYVAL AS GMatchInfo PTR PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION g_regex_ref(BYVAL AS GRegex PTR) AS GRegex PTR
DECLARE FUNCTION g_regex_replace(BYVAL AS const GRegex PTR, BYVAL AS const gchar PTR, BYVAL AS gssize, BYVAL AS gint, BYVAL AS const gchar PTR, BYVAL AS GRegexMatchFlags, BYVAL AS GError PTR PTR) AS gchar PTR
DECLARE FUNCTION g_regex_replace_eval(BYVAL AS const GRegex PTR, BYVAL AS const gchar PTR, BYVAL AS gssize, BYVAL AS gint, BYVAL AS GRegexMatchFlags, BYVAL AS GRegexEvalCallback, BYVAL AS gpointer, BYVAL AS GError PTR PTR) AS gchar PTR
DECLARE FUNCTION g_regex_replace_literal(BYVAL AS const GRegex PTR, BYVAL AS const gchar PTR, BYVAL AS gssize, BYVAL AS gint, BYVAL AS const gchar PTR, BYVAL AS GRegexMatchFlags, BYVAL AS GError PTR PTR) AS gchar PTR
DECLARE FUNCTION g_regex_split(BYVAL AS const GRegex PTR, BYVAL AS const gchar PTR, BYVAL AS GRegexMatchFlags) AS gchar PTR PTR
DECLARE FUNCTION g_regex_split_full(BYVAL AS const GRegex PTR, BYVAL AS const gchar PTR, BYVAL AS gssize, BYVAL AS gint, BYVAL AS GRegexMatchFlags, BYVAL AS gint, BYVAL AS GError PTR PTR) AS gchar PTR PTR
DECLARE SUB g_regex_unref(BYVAL AS GRegex PTR)
DECLARE FUNCTION g_regex_check_replacement(BYVAL AS const gchar PTR, BYVAL AS gboolean PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION g_regex_error_quark() AS GQuark
DECLARE FUNCTION g_regex_escape_nul(BYVAL AS const gchar PTR, BYVAL AS gint) AS gchar PTR
DECLARE FUNCTION g_regex_escape_string(BYVAL AS const gchar PTR, BYVAL AS gint) AS gchar PTR
DECLARE FUNCTION g_regex_match_simple(BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS GRegexCompileFlags, BYVAL AS GRegexMatchFlags) AS gboolean
DECLARE FUNCTION g_regex_split_simple(BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS GRegexCompileFlags, BYVAL AS GRegexMatchFlags) AS gchar PTR PTR
TYPE _GSList
  AS gpointer data
  AS GSList PTR next
END TYPE
DECLARE FUNCTION g_slist_alloc() AS GSList PTR
DECLARE FUNCTION g_slist_append(BYVAL AS GSList PTR, BYVAL AS gpointer) AS GSList PTR
DECLARE FUNCTION g_slist_concat(BYVAL AS GSList PTR, BYVAL AS GSList PTR) AS GSList PTR
DECLARE FUNCTION g_slist_copy(BYVAL AS GSList PTR) AS GSList PTR
DECLARE FUNCTION g_slist_copy_deep(BYVAL AS GSList PTR, BYVAL AS GCopyFunc, BYVAL AS gpointer) AS GSList PTR
DECLARE FUNCTION g_slist_delete_link(BYVAL AS GSList PTR, BYVAL AS GSList PTR) AS GSList PTR
DECLARE FUNCTION g_slist_find(BYVAL AS GSList PTR, BYVAL AS gconstpointer) AS GSList PTR
DECLARE FUNCTION g_slist_find_custom(BYVAL AS GSList PTR, BYVAL AS gconstpointer, BYVAL AS GCompareFunc) AS GSList PTR
DECLARE SUB g_slist_foreach(BYVAL AS GSList PTR, BYVAL AS GFunc, BYVAL AS gpointer)
DECLARE SUB g_slist_free(BYVAL AS GSList PTR)
DECLARE SUB g_slist_free_1(BYVAL AS GSList PTR)
DECLARE SUB g_slist_free_full(BYVAL AS GSList PTR, BYVAL AS GDestroyNotify)
DECLARE FUNCTION g_slist_index(BYVAL AS GSList PTR, BYVAL AS gconstpointer) AS gint
DECLARE FUNCTION g_slist_insert(BYVAL AS GSList PTR, BYVAL AS gpointer, BYVAL AS gint) AS GSList PTR
DECLARE FUNCTION g_slist_insert_before(BYVAL AS GSList PTR, BYVAL AS GSList PTR, BYVAL AS gpointer) AS GSList PTR
DECLARE FUNCTION g_slist_insert_sorted(BYVAL AS GSList PTR, BYVAL AS gpointer, BYVAL AS GCompareFunc) AS GSList PTR
DECLARE FUNCTION g_slist_insert_sorted_with_data(BYVAL AS GSList PTR, BYVAL AS gpointer, BYVAL AS GCompareDataFunc, BYVAL AS gpointer) AS GSList PTR
DECLARE FUNCTION g_slist_last(BYVAL AS GSList PTR) AS GSList PTR
DECLARE FUNCTION g_slist_length(BYVAL AS GSList PTR) AS guint
DECLARE FUNCTION g_slist_nth(BYVAL AS GSList PTR, BYVAL AS guint) AS GSList PTR
DECLARE FUNCTION g_slist_nth_data(BYVAL AS GSList PTR, BYVAL AS guint) AS gpointer
DECLARE FUNCTION g_slist_position(BYVAL AS GSList PTR, BYVAL AS GSList PTR) AS gint
DECLARE FUNCTION g_slist_prepend(BYVAL AS GSList PTR, BYVAL AS gpointer) AS GSList PTR
DECLARE FUNCTION g_slist_remove(BYVAL AS GSList PTR, BYVAL AS gconstpointer) AS GSList PTR
DECLARE FUNCTION g_slist_remove_all(BYVAL AS GSList PTR, BYVAL AS gconstpointer) AS GSList PTR
DECLARE FUNCTION g_slist_remove_link(BYVAL AS GSList PTR, BYVAL AS GSList PTR) AS GSList PTR
DECLARE FUNCTION g_slist_reverse(BYVAL AS GSList PTR) AS GSList PTR
DECLARE FUNCTION g_slist_sort(BYVAL AS GSList PTR, BYVAL AS GCompareFunc) AS GSList PTR
DECLARE FUNCTION g_slist_sort_with_data(BYVAL AS GSList PTR, BYVAL AS GCompareDataFunc, BYVAL AS gpointer) AS GSList PTR
TYPE _GScanner
  AS gpointer user_data
  AS guint max_parse_errors
  AS guint parse_errors
  AS const gchar PTR input_name
  AS GData PTR qdata
  AS GScannerConfig PTR config
  AS GTokenType token
  AS GTokenValue value
  AS guint line
  AS guint position
  AS GTokenType next_token
  AS GTokenValue next_value
  AS guint next_line
  AS guint next_position
  AS GHashTable PTR symbol_table
  AS gint input_fd
  AS const gchar PTR text
  AS const gchar PTR text_end
  AS gchar PTR buffer
  AS guint scope_id
  AS GScannerMsgFunc msg_handler
END TYPE
DECLARE FUNCTION g_scanner_cur_line(BYVAL AS GScanner PTR) AS guint
DECLARE FUNCTION g_scanner_cur_position(BYVAL AS GScanner PTR) AS guint
DECLARE FUNCTION g_scanner_cur_token(BYVAL AS GScanner PTR) AS GTokenType
DECLARE FUNCTION g_scanner_cur_value(BYVAL AS GScanner PTR) AS GTokenValue
DECLARE SUB g_scanner_destroy(BYVAL AS GScanner PTR)
DECLARE FUNCTION g_scanner_eof(BYVAL AS GScanner PTR) AS gboolean
DECLARE SUB g_scanner_error(BYVAL AS GScanner PTR, BYVAL AS const gchar PTR, ...)
DECLARE FUNCTION g_scanner_get_next_token(BYVAL AS GScanner PTR) AS GTokenType
DECLARE SUB g_scanner_input_file(BYVAL AS GScanner PTR, BYVAL AS gint)
DECLARE SUB g_scanner_input_text(BYVAL AS GScanner PTR, BYVAL AS const gchar PTR, BYVAL AS guint)
DECLARE FUNCTION g_scanner_lookup_symbol(BYVAL AS GScanner PTR, BYVAL AS const gchar PTR) AS gpointer
DECLARE FUNCTION g_scanner_peek_next_token(BYVAL AS GScanner PTR) AS GTokenType
DECLARE SUB g_scanner_scope_add_symbol(BYVAL AS GScanner PTR, BYVAL AS guint, BYVAL AS const gchar PTR, BYVAL AS gpointer)
DECLARE SUB g_scanner_scope_foreach_symbol(BYVAL AS GScanner PTR, BYVAL AS guint, BYVAL AS GHFunc, BYVAL AS gpointer)
DECLARE FUNCTION g_scanner_scope_lookup_symbol(BYVAL AS GScanner PTR, BYVAL AS guint, BYVAL AS const gchar PTR) AS gpointer
DECLARE SUB g_scanner_scope_remove_symbol(BYVAL AS GScanner PTR, BYVAL AS guint, BYVAL AS const gchar PTR)
DECLARE FUNCTION g_scanner_set_scope(BYVAL AS GScanner PTR, BYVAL AS guint) AS guint
DECLARE SUB g_scanner_sync_file_offset(BYVAL AS GScanner PTR)
DECLARE SUB g_scanner_unexp_token(BYVAL AS GScanner PTR, BYVAL AS GTokenType, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS gint)
DECLARE SUB g_scanner_warn(BYVAL AS GScanner PTR, BYVAL AS const gchar PTR, ...)
DECLARE FUNCTION g_scanner_new(BYVAL AS const GScannerConfig PTR) AS GScanner PTR
TYPE _GScannerConfig
  AS gchar PTR cset_skip_characters
  AS gchar PTR cset_identifier_first
  AS gchar PTR cset_identifier_nth
  AS gchar PTR cpair_comment_single
  AS guint case_sensitive : 1
  AS guint skip_comment_multi : 1
  AS guint skip_comment_single : 1
  AS guint scan_comment_multi : 1
  AS guint scan_identifier : 1
  AS guint scan_identifier_1char : 1
  AS guint scan_identifier_NULL : 1
  AS guint scan_symbols : 1
  AS guint scan_binary : 1
  AS guint scan_octal : 1
  AS guint scan_float : 1
  AS guint scan_hex : 1
  AS guint scan_hex_dollar : 1
  AS guint scan_string_sq : 1
  AS guint scan_string_dq : 1
  AS guint numbers_2_int : 1
  AS guint int_2_float : 1
  AS guint identifier_2_string : 1
  AS guint char_2_token : 1
  AS guint symbol_2_token : 1
  AS guint scope_0_fallback : 1
  AS guint store_int64 : 1
  AS guint padding_dummy
END TYPE
DECLARE FUNCTION g_sequence_append(BYVAL AS GSequence PTR, BYVAL AS gpointer) AS GSequenceIter PTR
DECLARE SUB g_sequence_foreach(BYVAL AS GSequence PTR, BYVAL AS GFunc, BYVAL AS gpointer)
DECLARE SUB g_sequence_free(BYVAL AS GSequence PTR)
DECLARE FUNCTION g_sequence_get_begin_iter(BYVAL AS GSequence PTR) AS GSequenceIter PTR
DECLARE FUNCTION g_sequence_get_end_iter(BYVAL AS GSequence PTR) AS GSequenceIter PTR
DECLARE FUNCTION g_sequence_get_iter_at_pos(BYVAL AS GSequence PTR, BYVAL AS gint) AS GSequenceIter PTR
DECLARE FUNCTION g_sequence_get_length(BYVAL AS GSequence PTR) AS gint
DECLARE FUNCTION g_sequence_insert_sorted(BYVAL AS GSequence PTR, BYVAL AS gpointer, BYVAL AS GCompareDataFunc, BYVAL AS gpointer) AS GSequenceIter PTR
DECLARE FUNCTION g_sequence_insert_sorted_iter(BYVAL AS GSequence PTR, BYVAL AS gpointer, BYVAL AS GSequenceIterCompareFunc, BYVAL AS gpointer) AS GSequenceIter PTR
DECLARE FUNCTION g_sequence_is_empty(BYVAL AS GSequence PTR) AS gboolean
DECLARE FUNCTION g_sequence_lookup(BYVAL AS GSequence PTR, BYVAL AS gpointer, BYVAL AS GCompareDataFunc, BYVAL AS gpointer) AS GSequenceIter PTR
DECLARE FUNCTION g_sequence_lookup_iter(BYVAL AS GSequence PTR, BYVAL AS gpointer, BYVAL AS GSequenceIterCompareFunc, BYVAL AS gpointer) AS GSequenceIter PTR
DECLARE FUNCTION g_sequence_prepend(BYVAL AS GSequence PTR, BYVAL AS gpointer) AS GSequenceIter PTR
DECLARE FUNCTION g_sequence_search(BYVAL AS GSequence PTR, BYVAL AS gpointer, BYVAL AS GCompareDataFunc, BYVAL AS gpointer) AS GSequenceIter PTR
DECLARE FUNCTION g_sequence_search_iter(BYVAL AS GSequence PTR, BYVAL AS gpointer, BYVAL AS GSequenceIterCompareFunc, BYVAL AS gpointer) AS GSequenceIter PTR
DECLARE SUB g_sequence_sort(BYVAL AS GSequence PTR, BYVAL AS GCompareDataFunc, BYVAL AS gpointer)
DECLARE SUB g_sequence_sort_iter(BYVAL AS GSequence PTR, BYVAL AS GSequenceIterCompareFunc, BYVAL AS gpointer)
DECLARE SUB g_sequence_foreach_range(BYVAL AS GSequenceIter PTR, BYVAL AS GSequenceIter PTR, BYVAL AS GFunc, BYVAL AS gpointer)
DECLARE FUNCTION g_sequence_get(BYVAL AS GSequenceIter PTR) AS gpointer
DECLARE FUNCTION g_sequence_insert_before(BYVAL AS GSequenceIter PTR, BYVAL AS gpointer) AS GSequenceIter PTR
DECLARE SUB g_sequence_move(BYVAL AS GSequenceIter PTR, BYVAL AS GSequenceIter PTR)
DECLARE SUB g_sequence_move_range(BYVAL AS GSequenceIter PTR, BYVAL AS GSequenceIter PTR, BYVAL AS GSequenceIter PTR)
DECLARE FUNCTION g_sequence_new(BYVAL AS GDestroyNotify) AS GSequence PTR
DECLARE FUNCTION g_sequence_range_get_midpoint(BYVAL AS GSequenceIter PTR, BYVAL AS GSequenceIter PTR) AS GSequenceIter PTR
DECLARE SUB g_sequence_remove(BYVAL AS GSequenceIter PTR)
DECLARE SUB g_sequence_remove_range(BYVAL AS GSequenceIter PTR, BYVAL AS GSequenceIter PTR)
DECLARE SUB g_sequence_set(BYVAL AS GSequenceIter PTR, BYVAL AS gpointer)
DECLARE SUB g_sequence_sort_changed(BYVAL AS GSequenceIter PTR, BYVAL AS GCompareDataFunc, BYVAL AS gpointer)
DECLARE SUB g_sequence_sort_changed_iter(BYVAL AS GSequenceIter PTR, BYVAL AS GSequenceIterCompareFunc, BYVAL AS gpointer)
DECLARE SUB g_sequence_swap(BYVAL AS GSequenceIter PTR, BYVAL AS GSequenceIter PTR)
DECLARE FUNCTION g_sequence_iter_compare(BYVAL AS GSequenceIter PTR, BYVAL AS GSequenceIter PTR) AS gint
DECLARE FUNCTION g_sequence_iter_get_position(BYVAL AS GSequenceIter PTR) AS gint
DECLARE FUNCTION g_sequence_iter_get_sequence(BYVAL AS GSequenceIter PTR) AS GSequence PTR
DECLARE FUNCTION g_sequence_iter_is_begin(BYVAL AS GSequenceIter PTR) AS gboolean
DECLARE FUNCTION g_sequence_iter_is_end(BYVAL AS GSequenceIter PTR) AS gboolean
DECLARE FUNCTION g_sequence_iter_move(BYVAL AS GSequenceIter PTR, BYVAL AS gint) AS GSequenceIter PTR
DECLARE FUNCTION g_sequence_iter_next(BYVAL AS GSequenceIter PTR) AS GSequenceIter PTR
DECLARE FUNCTION g_sequence_iter_prev(BYVAL AS GSequenceIter PTR) AS GSequenceIter PTR
TYPE _GSource
  AS gpointer callback_data
  AS GSourceCallbackFuncs PTR callback_funcs
  AS const GSourceFuncs PTR source_funcs
  AS guint ref_count
  AS GMainContext PTR context
  AS gint priority
  AS guint flags
  AS guint source_id
  AS GSList PTR poll_fds
  AS GSource PTR prev
  AS GSource PTR next
  AS char PTR name
  AS GSourcePrivate PTR priv
END TYPE
DECLARE FUNCTION g_source_new(BYVAL AS GSourceFuncs PTR, BYVAL AS guint) AS GSource PTR
DECLARE SUB g_source_add_child_source(BYVAL AS GSource PTR, BYVAL AS GSource PTR)
DECLARE SUB g_source_add_poll(BYVAL AS GSource PTR, BYVAL AS GPollFD PTR)
DECLARE FUNCTION g_source_add_unix_fd(BYVAL AS GSource PTR, BYVAL AS gint, BYVAL AS GIOCondition) AS gpointer
DECLARE FUNCTION g_source_attach(BYVAL AS GSource PTR, BYVAL AS GMainContext PTR) AS guint
DECLARE SUB g_source_destroy(BYVAL AS GSource PTR)
DECLARE FUNCTION g_source_get_can_recurse(BYVAL AS GSource PTR) AS gboolean
DECLARE FUNCTION g_source_get_context(BYVAL AS GSource PTR) AS GMainContext PTR
DECLARE SUB g_source_get_current_time(BYVAL AS GSource PTR, BYVAL AS GTimeVal PTR)
DECLARE FUNCTION g_source_get_id(BYVAL AS GSource PTR) AS guint
DECLARE FUNCTION g_source_get_name(BYVAL AS GSource PTR) AS const char PTR
DECLARE FUNCTION g_source_get_priority(BYVAL AS GSource PTR) AS gint
DECLARE FUNCTION g_source_get_ready_time(BYVAL AS GSource PTR) AS gint64
DECLARE FUNCTION g_source_get_time(BYVAL AS GSource PTR) AS gint64
DECLARE FUNCTION g_source_is_destroyed(BYVAL AS GSource PTR) AS gboolean
DECLARE SUB g_source_modify_unix_fd(BYVAL AS GSource PTR, BYVAL AS gpointer, BYVAL AS GIOCondition)
DECLARE FUNCTION g_source_query_unix_fd(BYVAL AS GSource PTR, BYVAL AS gpointer) AS GIOCondition
DECLARE FUNCTION g_source_ref(BYVAL AS GSource PTR) AS GSource PTR
DECLARE SUB g_source_remove_child_source(BYVAL AS GSource PTR, BYVAL AS GSource PTR)
DECLARE SUB g_source_remove_poll(BYVAL AS GSource PTR, BYVAL AS GPollFD PTR)
DECLARE SUB g_source_remove_unix_fd(BYVAL AS GSource PTR, BYVAL AS gpointer)
DECLARE SUB g_source_set_callback(BYVAL AS GSource PTR, BYVAL AS GSourceFunc, BYVAL AS gpointer, BYVAL AS GDestroyNotify)
DECLARE SUB g_source_set_callback_indirect(BYVAL AS GSource PTR, BYVAL AS gpointer, BYVAL AS GSourceCallbackFuncs PTR)
DECLARE SUB g_source_set_can_recurse(BYVAL AS GSource PTR, BYVAL AS gboolean)
DECLARE SUB g_source_set_dispose_function(BYVAL AS GSource PTR, BYVAL AS GSourceDisposeFunc)
DECLARE SUB g_source_set_funcs(BYVAL AS GSource PTR, BYVAL AS GSourceFuncs PTR)
DECLARE SUB g_source_set_name(BYVAL AS GSource PTR, BYVAL AS const char PTR)
DECLARE SUB g_source_set_priority(BYVAL AS GSource PTR, BYVAL AS gint)
DECLARE SUB g_source_set_ready_time(BYVAL AS GSource PTR, BYVAL AS gint64)
DECLARE SUB g_source_unref(BYVAL AS GSource PTR)
DECLARE FUNCTION g_source_remove_ ALIAS "g_source_remove"(BYVAL AS guint) AS gboolean
DECLARE FUNCTION g_source_remove_by_funcs_user_data(BYVAL AS GSourceFuncs PTR, BYVAL AS gpointer) AS gboolean
DECLARE FUNCTION g_source_remove_by_user_data(BYVAL AS gpointer) AS gboolean
DECLARE SUB g_source_set_name_by_id(BYVAL AS guint, BYVAL AS const char PTR)
TYPE _GSourceCallbackFuncs
  ref AS SUB CDECL(BYVAL AS gpointer)
  unref AS SUB CDECL(BYVAL AS gpointer)
  get AS SUB CDECL(BYVAL AS gpointer, BYVAL AS GSource PTR, BYVAL AS GSourceFunc PTR, BYVAL AS gpointer PTR)
END TYPE
TYPE GSourceDummyMarshal AS SUB CDECL()
TYPE _GSourceFuncs
  prepare AS FUNCTION CDECL(BYVAL AS GSource PTR, BYVAL AS gint PTR) AS gboolean
  check AS FUNCTION CDECL(BYVAL AS GSource PTR) AS gboolean
  dispatch AS FUNCTION CDECL(BYVAL AS GSource PTR, BYVAL AS GSourceFunc, BYVAL AS gpointer) AS gboolean
  finalize AS SUB CDECL(BYVAL AS GSource PTR)
  AS GSourceFunc closure_callback
  AS GSourceDummyMarshal closure_marshal
END TYPE
TYPE GSpawnChildSetupFunc AS SUB CDECL(BYVAL AS gpointer)
TYPE _GString
  AS gchar PTR str
  AS gsize len
  AS gsize allocated_len
END TYPE
DECLARE FUNCTION g_string_append(BYVAL AS GString PTR, BYVAL AS const gchar PTR) AS GString PTR
DECLARE FUNCTION g_string_append_c(BYVAL AS GString PTR, BYVAL AS gint8 /'gchar'/) AS GString PTR
DECLARE FUNCTION g_string_append_len(BYVAL AS GString PTR, BYVAL AS const gchar PTR, BYVAL AS gssize) AS GString PTR
DECLARE SUB g_string_append_printf(BYVAL AS GString PTR, BYVAL AS const gchar PTR, ...)
DECLARE FUNCTION g_string_append_unichar(BYVAL AS GString PTR, BYVAL AS gunichar /'?'/) AS GString PTR
DECLARE FUNCTION g_string_append_uri_escaped(BYVAL AS GString PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS gboolean) AS GString PTR
DECLARE SUB g_string_append_vprintf(BYVAL AS GString PTR, BYVAL AS const gchar PTR, BYVAL AS va_list)
DECLARE FUNCTION g_string_ascii_down(BYVAL AS GString PTR) AS GString PTR
DECLARE FUNCTION g_string_ascii_up(BYVAL AS GString PTR) AS GString PTR
DECLARE FUNCTION g_string_assign(BYVAL AS GString PTR, BYVAL AS const gchar PTR) AS GString PTR
DECLARE FUNCTION g_string_down(BYVAL AS GString PTR) AS GString PTR
DECLARE FUNCTION g_string_equal(BYVAL AS const GString PTR, BYVAL AS const GString PTR) AS gboolean
DECLARE FUNCTION g_string_erase(BYVAL AS GString PTR, BYVAL AS gssize, BYVAL AS gssize) AS GString PTR
DECLARE FUNCTION g_string_free(BYVAL AS GString PTR, BYVAL AS gboolean) AS gchar PTR
DECLARE FUNCTION g_string_free_to_bytes(BYVAL AS GString PTR) AS GBytes PTR
DECLARE FUNCTION g_string_hash(BYVAL AS const GString PTR) AS guint
DECLARE FUNCTION g_string_insert(BYVAL AS GString PTR, BYVAL AS gssize, BYVAL AS const gchar PTR) AS GString PTR
DECLARE FUNCTION g_string_insert_c(BYVAL AS GString PTR, BYVAL AS gssize, BYVAL AS gint8 /'gchar'/) AS GString PTR
DECLARE FUNCTION g_string_insert_len(BYVAL AS GString PTR, BYVAL AS gssize, BYVAL AS const gchar PTR, BYVAL AS gssize) AS GString PTR
DECLARE FUNCTION g_string_insert_unichar(BYVAL AS GString PTR, BYVAL AS gssize, BYVAL AS gunichar /'?'/) AS GString PTR
DECLARE FUNCTION g_string_overwrite(BYVAL AS GString PTR, BYVAL AS gsize, BYVAL AS const gchar PTR) AS GString PTR
DECLARE FUNCTION g_string_overwrite_len(BYVAL AS GString PTR, BYVAL AS gsize, BYVAL AS const gchar PTR, BYVAL AS gssize) AS GString PTR
DECLARE FUNCTION g_string_prepend(BYVAL AS GString PTR, BYVAL AS const gchar PTR) AS GString PTR
DECLARE FUNCTION g_string_prepend_c(BYVAL AS GString PTR, BYVAL AS gint8 /'gchar'/) AS GString PTR
DECLARE FUNCTION g_string_prepend_len(BYVAL AS GString PTR, BYVAL AS const gchar PTR, BYVAL AS gssize) AS GString PTR
DECLARE FUNCTION g_string_prepend_unichar(BYVAL AS GString PTR, BYVAL AS gunichar /'?'/) AS GString PTR
DECLARE SUB g_string_printf(BYVAL AS GString PTR, BYVAL AS const gchar PTR, ...)
DECLARE FUNCTION g_string_set_size(BYVAL AS GString PTR, BYVAL AS gsize) AS GString PTR
DECLARE FUNCTION g_string_truncate(BYVAL AS GString PTR, BYVAL AS gsize) AS GString PTR
DECLARE FUNCTION g_string_up(BYVAL AS GString PTR) AS GString PTR
DECLARE SUB g_string_vprintf(BYVAL AS GString PTR, BYVAL AS const gchar PTR, BYVAL AS va_list)
DECLARE SUB g_string_chunk_clear(BYVAL AS GStringChunk PTR)
DECLARE SUB g_string_chunk_free(BYVAL AS GStringChunk PTR)
DECLARE FUNCTION g_string_chunk_insert(BYVAL AS GStringChunk PTR, BYVAL AS const gchar PTR) AS gchar PTR
DECLARE FUNCTION g_string_chunk_insert_const(BYVAL AS GStringChunk PTR, BYVAL AS const gchar PTR) AS gchar PTR
DECLARE FUNCTION g_string_chunk_insert_len(BYVAL AS GStringChunk PTR, BYVAL AS const gchar PTR, BYVAL AS gssize) AS gchar PTR
DECLARE FUNCTION g_string_chunk_new(BYVAL AS gsize) AS GStringChunk PTR
TYPE _GTestConfig
  AS gboolean test_initialized
  AS gboolean test_quick
  AS gboolean test_perf
  AS gboolean test_verbose
  AS gboolean test_quiet
  AS gboolean test_undefined
END TYPE
TYPE GTestDataFunc AS SUB CDECL(BYVAL AS gconstpointer)
TYPE GTestFixtureFunc AS SUB CDECL(BYVAL AS gpointer, BYVAL AS gconstpointer)
TYPE GTestFunc AS SUB CDECL()
TYPE _GTestLogBuffer
  AS GString PTR data
  AS GSList PTR msgs
END TYPE
DECLARE SUB g_test_log_buffer_free(BYVAL AS GTestLogBuffer PTR)
DECLARE FUNCTION g_test_log_buffer_pop(BYVAL AS GTestLogBuffer PTR) AS GTestLogMsg PTR
DECLARE SUB g_test_log_buffer_push(BYVAL AS GTestLogBuffer PTR, BYVAL AS guint, BYVAL AS const guint8 PTR)
DECLARE FUNCTION g_test_log_buffer_new() AS GTestLogBuffer PTR
TYPE GTestLogFatalFunc AS FUNCTION CDECL(BYVAL AS const gchar PTR, BYVAL AS GLogLevelFlags, BYVAL AS const gchar PTR, BYVAL AS gpointer) AS gboolean
TYPE _GTestLogMsg
  AS GTestLogType log_type
  AS guint n_strings
  AS gchar PTR PTR strings
  AS guint n_nums
  AS double /'long double'/ PTR nums
END TYPE
DECLARE SUB g_test_log_msg_free(BYVAL AS GTestLogMsg PTR)
DECLARE SUB g_test_suite_add(BYVAL AS GTestSuite PTR, BYVAL AS GTestCase PTR)
DECLARE SUB g_test_suite_add_suite(BYVAL AS GTestSuite PTR, BYVAL AS GTestSuite PTR)
DECLARE FUNCTION g_thread_new(BYVAL AS const gchar PTR, BYVAL AS GThreadFunc, BYVAL AS gpointer) AS GThread PTR
DECLARE FUNCTION g_thread_try_new(BYVAL AS const gchar PTR, BYVAL AS GThreadFunc, BYVAL AS gpointer, BYVAL AS GError PTR PTR) AS GThread PTR
DECLARE FUNCTION g_thread_join(BYVAL AS GThread PTR) AS gpointer
DECLARE FUNCTION g_thread_ref(BYVAL AS GThread PTR) AS GThread PTR
DECLARE SUB g_thread_unref(BYVAL AS GThread PTR)
DECLARE FUNCTION g_thread_error_quark() AS GQuark
DECLARE SUB g_thread_exit(BYVAL AS gpointer)
DECLARE FUNCTION g_thread_self() AS GThread PTR
DECLARE SUB g_thread_yield()
TYPE _GThreadPool
  AS GFunc func
  AS gpointer user_data
  AS gboolean exclusive
END TYPE
DECLARE SUB g_thread_pool_free(BYVAL AS GThreadPool PTR, BYVAL AS gboolean, BYVAL AS gboolean)
DECLARE FUNCTION g_thread_pool_get_max_threads(BYVAL AS GThreadPool PTR) AS gint
DECLARE FUNCTION g_thread_pool_get_num_threads(BYVAL AS GThreadPool PTR) AS guint
DECLARE FUNCTION g_thread_pool_move_to_front(BYVAL AS GThreadPool PTR, BYVAL AS gpointer) AS gboolean
DECLARE FUNCTION g_thread_pool_push(BYVAL AS GThreadPool PTR, BYVAL AS gpointer, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION g_thread_pool_set_max_threads(BYVAL AS GThreadPool PTR, BYVAL AS gint, BYVAL AS GError PTR PTR) AS gboolean
DECLARE SUB g_thread_pool_set_sort_function(BYVAL AS GThreadPool PTR, BYVAL AS GCompareDataFunc, BYVAL AS gpointer)
DECLARE FUNCTION g_thread_pool_unprocessed(BYVAL AS GThreadPool PTR) AS guint
DECLARE FUNCTION g_thread_pool_get_max_idle_time() AS guint
DECLARE FUNCTION g_thread_pool_get_max_unused_threads() AS gint
DECLARE FUNCTION g_thread_pool_get_num_unused_threads() AS guint
DECLARE FUNCTION g_thread_pool_new(BYVAL AS GFunc, BYVAL AS gpointer, BYVAL AS gint, BYVAL AS gboolean, BYVAL AS GError PTR PTR) AS GThreadPool PTR
DECLARE SUB g_thread_pool_set_max_idle_time(BYVAL AS guint)
DECLARE SUB g_thread_pool_set_max_unused_threads(BYVAL AS gint)
DECLARE SUB g_thread_pool_stop_unused_threads()
TYPE _GTimeVal
  AS glong tv_sec
  AS glong tv_usec
END TYPE
DECLARE SUB g_time_val_add(BYVAL AS GTimeVal PTR, BYVAL AS glong)
DECLARE FUNCTION g_time_val_to_iso8601(BYVAL AS GTimeVal PTR) AS gchar PTR
DECLARE FUNCTION g_time_val_from_iso8601(BYVAL AS const gchar PTR, BYVAL AS GTimeVal PTR) AS gboolean
DECLARE FUNCTION g_time_zone_new(BYVAL AS const gchar PTR) AS GTimeZone PTR
DECLARE FUNCTION g_time_zone_new_local() AS GTimeZone PTR
DECLARE FUNCTION g_time_zone_new_offset(BYVAL AS gint32) AS GTimeZone PTR
DECLARE FUNCTION g_time_zone_new_utc() AS GTimeZone PTR
DECLARE FUNCTION g_time_zone_adjust_time(BYVAL AS GTimeZone PTR, BYVAL AS GTimeType, BYVAL AS gint64 PTR) AS gint
DECLARE FUNCTION g_time_zone_find_interval(BYVAL AS GTimeZone PTR, BYVAL AS GTimeType, BYVAL AS gint64) AS gint
DECLARE FUNCTION g_time_zone_get_abbreviation(BYVAL AS GTimeZone PTR, BYVAL AS gint) AS const gchar PTR
DECLARE FUNCTION g_time_zone_get_identifier(BYVAL AS GTimeZone PTR) AS const gchar PTR
DECLARE FUNCTION g_time_zone_get_offset(BYVAL AS GTimeZone PTR, BYVAL AS gint) AS gint32
DECLARE FUNCTION g_time_zone_is_dst(BYVAL AS GTimeZone PTR, BYVAL AS gint) AS gboolean
DECLARE FUNCTION g_time_zone_ref(BYVAL AS GTimeZone PTR) AS GTimeZone PTR
DECLARE SUB g_time_zone_unref(BYVAL AS GTimeZone PTR)
DECLARE SUB g_timer_continue(BYVAL AS GTimer PTR)
DECLARE SUB g_timer_destroy(BYVAL AS GTimer PTR)
DECLARE FUNCTION g_timer_elapsed(BYVAL AS GTimer PTR, BYVAL AS gulong PTR) AS gdouble
DECLARE FUNCTION g_timer_is_active(BYVAL AS GTimer PTR) AS gboolean
DECLARE SUB g_timer_reset(BYVAL AS GTimer PTR)
DECLARE SUB g_timer_start(BYVAL AS GTimer PTR)
DECLARE SUB g_timer_stop(BYVAL AS GTimer PTR)
DECLARE FUNCTION g_timer_new() AS GTimer PTR
TYPE _GTrashStack
  AS GTrashStack PTR next
END TYPE
DECLARE FUNCTION g_trash_stack_height(BYVAL AS GTrashStack PTR PTR) AS guint
DECLARE FUNCTION g_trash_stack_peek(BYVAL AS GTrashStack PTR PTR) AS gpointer
DECLARE FUNCTION g_trash_stack_pop(BYVAL AS GTrashStack PTR PTR) AS gpointer
DECLARE SUB g_trash_stack_push(BYVAL AS GTrashStack PTR PTR, BYVAL AS gpointer)
TYPE GTraverseFunc AS FUNCTION CDECL(BYVAL AS gpointer, BYVAL AS gpointer, BYVAL AS gpointer) AS gboolean
DECLARE SUB g_tree_destroy(BYVAL AS GTree PTR)
DECLARE SUB g_tree_foreach(BYVAL AS GTree PTR, BYVAL AS GTraverseFunc, BYVAL AS gpointer)
DECLARE FUNCTION g_tree_height(BYVAL AS GTree PTR) AS gint
DECLARE SUB g_tree_insert(BYVAL AS GTree PTR, BYVAL AS gpointer, BYVAL AS gpointer)
DECLARE FUNCTION g_tree_lookup(BYVAL AS GTree PTR, BYVAL AS gconstpointer) AS gpointer
DECLARE FUNCTION g_tree_lookup_extended(BYVAL AS GTree PTR, BYVAL AS gconstpointer, BYVAL AS gpointer PTR, BYVAL AS gpointer PTR) AS gboolean
DECLARE FUNCTION g_tree_nnodes(BYVAL AS GTree PTR) AS gint
DECLARE FUNCTION g_tree_ref(BYVAL AS GTree PTR) AS GTree PTR
DECLARE FUNCTION g_tree_remove(BYVAL AS GTree PTR, BYVAL AS gconstpointer) AS gboolean
DECLARE SUB g_tree_replace(BYVAL AS GTree PTR, BYVAL AS gpointer, BYVAL AS gpointer)
DECLARE FUNCTION g_tree_search(BYVAL AS GTree PTR, BYVAL AS GCompareFunc, BYVAL AS gconstpointer) AS gpointer
DECLARE FUNCTION g_tree_steal(BYVAL AS GTree PTR, BYVAL AS gconstpointer) AS gboolean
DECLARE SUB g_tree_traverse(BYVAL AS GTree PTR, BYVAL AS GTraverseFunc, BYVAL AS GTraverseType, BYVAL AS gpointer)
DECLARE SUB g_tree_unref(BYVAL AS GTree PTR)
DECLARE FUNCTION g_tree_new(BYVAL AS GCompareFunc) AS GTree PTR
DECLARE FUNCTION g_tree_new_full(BYVAL AS GCompareDataFunc, BYVAL AS gpointer, BYVAL AS GDestroyNotify, BYVAL AS GDestroyNotify) AS GTree PTR
DECLARE FUNCTION g_tree_new_with_data(BYVAL AS GCompareDataFunc, BYVAL AS gpointer) AS GTree PTR
TYPE GUnixFDSourceFunc AS FUNCTION CDECL(BYVAL AS gint, BYVAL AS GIOCondition, BYVAL AS gpointer) AS gboolean
DECLARE FUNCTION g_variant_new(BYVAL AS const gchar PTR, ...) AS GVariant PTR
DECLARE FUNCTION g_variant_new_array(BYVAL AS const GVariantType PTR, BYVAL AS GVariant ptr const /'GVariant* const'/ PTR, BYVAL AS gsize) AS GVariant PTR
DECLARE FUNCTION g_variant_new_boolean(BYVAL AS gboolean) AS GVariant PTR
DECLARE FUNCTION g_variant_new_byte(BYVAL AS guint8) AS GVariant PTR
DECLARE FUNCTION g_variant_new_bytestring(BYVAL AS const gchar PTR) AS GVariant PTR
DECLARE FUNCTION g_variant_new_bytestring_array(BYVAL AS const gchar PTR const /'const gchar* const'/ PTR, BYVAL AS gssize) AS GVariant PTR
DECLARE FUNCTION g_variant_new_dict_entry(BYVAL AS GVariant PTR, BYVAL AS GVariant PTR) AS GVariant PTR
DECLARE FUNCTION g_variant_new_double(BYVAL AS gdouble) AS GVariant PTR
DECLARE FUNCTION g_variant_new_fixed_array(BYVAL AS const GVariantType PTR, BYVAL AS gconstpointer, BYVAL AS gsize, BYVAL AS gsize) AS GVariant PTR
DECLARE FUNCTION g_variant_new_from_bytes(BYVAL AS const GVariantType PTR, BYVAL AS GBytes PTR, BYVAL AS gboolean) AS GVariant PTR
DECLARE FUNCTION g_variant_new_from_data(BYVAL AS const GVariantType PTR, BYVAL AS gconstpointer, BYVAL AS gsize, BYVAL AS gboolean, BYVAL AS GDestroyNotify, BYVAL AS gpointer) AS GVariant PTR
DECLARE FUNCTION g_variant_new_handle(BYVAL AS gint32) AS GVariant PTR
DECLARE FUNCTION g_variant_new_int16(BYVAL AS gint16) AS GVariant PTR
DECLARE FUNCTION g_variant_new_int32(BYVAL AS gint32) AS GVariant PTR
DECLARE FUNCTION g_variant_new_int64(BYVAL AS gint64) AS GVariant PTR
DECLARE FUNCTION g_variant_new_maybe(BYVAL AS const GVariantType PTR, BYVAL AS GVariant PTR) AS GVariant PTR
DECLARE FUNCTION g_variant_new_object_path(BYVAL AS const gchar PTR) AS GVariant PTR
DECLARE FUNCTION g_variant_new_objv(BYVAL AS const gchar PTR const /'const gchar* const'/ PTR, BYVAL AS gssize) AS GVariant PTR
DECLARE FUNCTION g_variant_new_parsed(BYVAL AS const gchar PTR, ...) AS GVariant PTR
DECLARE FUNCTION g_variant_new_parsed_va(BYVAL AS const gchar PTR, BYVAL AS va_list PTR) AS GVariant PTR
DECLARE FUNCTION g_variant_new_printf(BYVAL AS const gchar PTR, ...) AS GVariant PTR
DECLARE FUNCTION g_variant_new_signature(BYVAL AS const gchar PTR) AS GVariant PTR
DECLARE FUNCTION g_variant_new_string(BYVAL AS const gchar PTR) AS GVariant PTR
DECLARE FUNCTION g_variant_new_strv(BYVAL AS const gchar PTR const /'const gchar* const'/ PTR, BYVAL AS gssize) AS GVariant PTR
DECLARE FUNCTION g_variant_new_take_string(BYVAL AS gchar PTR) AS GVariant PTR
DECLARE FUNCTION g_variant_new_tuple(BYVAL AS GVariant ptr const /'GVariant* const'/ PTR, BYVAL AS gsize) AS GVariant PTR
DECLARE FUNCTION g_variant_new_uint16(BYVAL AS guint16) AS GVariant PTR
DECLARE FUNCTION g_variant_new_uint32(BYVAL AS guint32) AS GVariant PTR
DECLARE FUNCTION g_variant_new_uint64(BYVAL AS guint64) AS GVariant PTR
DECLARE FUNCTION g_variant_new_va(BYVAL AS const gchar PTR, BYVAL AS const gchar PTR PTR, BYVAL AS va_list PTR) AS GVariant PTR
DECLARE FUNCTION g_variant_new_variant(BYVAL AS GVariant PTR) AS GVariant PTR
DECLARE FUNCTION g_variant_byteswap(BYVAL AS GVariant PTR) AS GVariant PTR
DECLARE FUNCTION g_variant_check_format_string(BYVAL AS GVariant PTR, BYVAL AS const gchar PTR, BYVAL AS gboolean) AS gboolean
DECLARE FUNCTION g_variant_classify(BYVAL AS GVariant PTR) AS GVariantClass
DECLARE FUNCTION g_variant_compare(BYVAL AS gconstpointer, BYVAL AS gconstpointer) AS gint
DECLARE FUNCTION g_variant_dup_bytestring(BYVAL AS GVariant PTR, BYVAL AS gsize PTR) AS gchar PTR
DECLARE FUNCTION g_variant_dup_bytestring_array(BYVAL AS GVariant PTR, BYVAL AS gsize PTR) AS gchar PTR PTR
DECLARE FUNCTION g_variant_dup_objv(BYVAL AS GVariant PTR, BYVAL AS gsize PTR) AS gchar PTR PTR
DECLARE FUNCTION g_variant_dup_string(BYVAL AS GVariant PTR, BYVAL AS gsize PTR) AS gchar PTR
DECLARE FUNCTION g_variant_dup_strv(BYVAL AS GVariant PTR, BYVAL AS gsize PTR) AS gchar PTR PTR
DECLARE FUNCTION g_variant_equal(BYVAL AS gconstpointer, BYVAL AS gconstpointer) AS gboolean
DECLARE SUB g_variant_get(BYVAL AS GVariant PTR, BYVAL AS const gchar PTR, ...)
DECLARE FUNCTION g_variant_get_boolean(BYVAL AS GVariant PTR) AS gboolean
DECLARE FUNCTION g_variant_get_byte(BYVAL AS GVariant PTR) AS guint8
DECLARE FUNCTION g_variant_get_bytestring(BYVAL AS GVariant PTR) AS const gchar PTR
DECLARE FUNCTION g_variant_get_bytestring_array(BYVAL AS GVariant PTR, BYVAL AS gsize PTR) AS const gchar PTR PTR
DECLARE SUB g_variant_get_child(BYVAL AS GVariant PTR, BYVAL AS gsize, BYVAL AS const gchar PTR, ...)
DECLARE FUNCTION g_variant_get_child_value(BYVAL AS GVariant PTR, BYVAL AS gsize) AS GVariant PTR
DECLARE FUNCTION g_variant_get_data(BYVAL AS GVariant PTR) AS gconstpointer
DECLARE FUNCTION g_variant_get_data_as_bytes(BYVAL AS GVariant PTR) AS GBytes PTR
DECLARE FUNCTION g_variant_get_double(BYVAL AS GVariant PTR) AS gdouble
DECLARE FUNCTION g_variant_get_fixed_array(BYVAL AS GVariant PTR, BYVAL AS gsize PTR, BYVAL AS gsize) AS gconstpointer
DECLARE FUNCTION g_variant_get_handle(BYVAL AS GVariant PTR) AS gint32
DECLARE FUNCTION g_variant_get_int16(BYVAL AS GVariant PTR) AS gint16
DECLARE FUNCTION g_variant_get_int32(BYVAL AS GVariant PTR) AS gint32
DECLARE FUNCTION g_variant_get_int64(BYVAL AS GVariant PTR) AS gint64
DECLARE FUNCTION g_variant_get_maybe(BYVAL AS GVariant PTR) AS GVariant PTR
DECLARE FUNCTION g_variant_get_normal_form(BYVAL AS GVariant PTR) AS GVariant PTR
DECLARE FUNCTION g_variant_get_objv(BYVAL AS GVariant PTR, BYVAL AS gsize PTR) AS const gchar PTR PTR
DECLARE FUNCTION g_variant_get_size(BYVAL AS GVariant PTR) AS gsize
DECLARE FUNCTION g_variant_get_string(BYVAL AS GVariant PTR, BYVAL AS gsize PTR) AS const gchar PTR
DECLARE FUNCTION g_variant_get_strv(BYVAL AS GVariant PTR, BYVAL AS gsize PTR) AS const gchar PTR PTR
DECLARE FUNCTION g_variant_get_type(BYVAL AS GVariant PTR) AS const GVariantType PTR
DECLARE FUNCTION g_variant_get_type_string(BYVAL AS GVariant PTR) AS const gchar PTR
DECLARE FUNCTION g_variant_get_uint16(BYVAL AS GVariant PTR) AS guint16
DECLARE FUNCTION g_variant_get_uint32(BYVAL AS GVariant PTR) AS guint32
DECLARE FUNCTION g_variant_get_uint64(BYVAL AS GVariant PTR) AS guint64
DECLARE SUB g_variant_get_va(BYVAL AS GVariant PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR PTR, BYVAL AS va_list PTR)
DECLARE FUNCTION g_variant_get_variant(BYVAL AS GVariant PTR) AS GVariant PTR
DECLARE FUNCTION g_variant_hash(BYVAL AS gconstpointer) AS guint
DECLARE FUNCTION g_variant_is_container(BYVAL AS GVariant PTR) AS gboolean
DECLARE FUNCTION g_variant_is_floating(BYVAL AS GVariant PTR) AS gboolean
DECLARE FUNCTION g_variant_is_normal_form(BYVAL AS GVariant PTR) AS gboolean
DECLARE FUNCTION g_variant_is_of_type(BYVAL AS GVariant PTR, BYVAL AS const GVariantType PTR) AS gboolean
DECLARE FUNCTION g_variant_iter_new(BYVAL AS GVariant PTR) AS GVariantIter PTR
DECLARE FUNCTION g_variant_lookup(BYVAL AS GVariant PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, ...) AS gboolean
DECLARE FUNCTION g_variant_lookup_value(BYVAL AS GVariant PTR, BYVAL AS const gchar PTR, BYVAL AS const GVariantType PTR) AS GVariant PTR
DECLARE FUNCTION g_variant_n_children(BYVAL AS GVariant PTR) AS gsize
DECLARE FUNCTION g_variant_print(BYVAL AS GVariant PTR, BYVAL AS gboolean) AS gchar PTR
DECLARE FUNCTION g_variant_print_string(BYVAL AS GVariant PTR, BYVAL AS GString PTR, BYVAL AS gboolean) AS GString PTR
DECLARE FUNCTION g_variant_ref(BYVAL AS GVariant PTR) AS GVariant PTR
DECLARE FUNCTION g_variant_ref_sink(BYVAL AS GVariant PTR) AS GVariant PTR
DECLARE SUB g_variant_store(BYVAL AS GVariant PTR, BYVAL AS gpointer)
DECLARE FUNCTION g_variant_take_ref(BYVAL AS GVariant PTR) AS GVariant PTR
DECLARE SUB g_variant_unref(BYVAL AS GVariant PTR)
DECLARE FUNCTION g_variant_is_object_path(BYVAL AS const gchar PTR) AS gboolean
DECLARE FUNCTION g_variant_is_signature(BYVAL AS const gchar PTR) AS gboolean
DECLARE FUNCTION g_variant_parse(BYVAL AS const GVariantType PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR PTR, BYVAL AS GError PTR PTR) AS GVariant PTR
DECLARE FUNCTION g_variant_parse_error_print_context(BYVAL AS GError PTR, BYVAL AS const gchar PTR) AS gchar PTR
DECLARE FUNCTION g_variant_parse_error_quark() AS GQuark
DECLARE FUNCTION g_variant_parser_get_error_quark() AS GQuark
DECLARE FUNCTION g_variant_builder_new(BYVAL AS const GVariantType PTR) AS GVariantBuilder PTR
DECLARE SUB g_variant_builder_add(BYVAL AS GVariantBuilder PTR, BYVAL AS const gchar PTR, ...)
DECLARE SUB g_variant_builder_add_parsed(BYVAL AS GVariantBuilder PTR, BYVAL AS const gchar PTR, ...)
DECLARE SUB g_variant_builder_add_value(BYVAL AS GVariantBuilder PTR, BYVAL AS GVariant PTR)
DECLARE SUB g_variant_builder_clear(BYVAL AS GVariantBuilder PTR)
DECLARE SUB g_variant_builder_close(BYVAL AS GVariantBuilder PTR)
DECLARE FUNCTION g_variant_builder_end(BYVAL AS GVariantBuilder PTR) AS GVariant PTR
DECLARE SUB g_variant_builder_init(BYVAL AS GVariantBuilder PTR, BYVAL AS const GVariantType PTR)
DECLARE SUB g_variant_builder_open(BYVAL AS GVariantBuilder PTR, BYVAL AS const GVariantType PTR)
DECLARE FUNCTION g_variant_builder_ref(BYVAL AS GVariantBuilder PTR) AS GVariantBuilder PTR
DECLARE SUB g_variant_builder_unref(BYVAL AS GVariantBuilder PTR)
DECLARE FUNCTION g_variant_dict_new(BYVAL AS GVariant PTR) AS GVariantDict PTR
DECLARE SUB g_variant_dict_clear(BYVAL AS GVariantDict PTR)
DECLARE FUNCTION g_variant_dict_contains(BYVAL AS GVariantDict PTR, BYVAL AS const gchar PTR) AS gboolean
DECLARE FUNCTION g_variant_dict_end(BYVAL AS GVariantDict PTR) AS GVariant PTR
DECLARE SUB g_variant_dict_init(BYVAL AS GVariantDict PTR, BYVAL AS GVariant PTR)
DECLARE SUB g_variant_dict_insert(BYVAL AS GVariantDict PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, ...)
DECLARE SUB g_variant_dict_insert_value(BYVAL AS GVariantDict PTR, BYVAL AS const gchar PTR, BYVAL AS GVariant PTR)
DECLARE FUNCTION g_variant_dict_lookup(BYVAL AS GVariantDict PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, ...) AS gboolean
DECLARE FUNCTION g_variant_dict_lookup_value(BYVAL AS GVariantDict PTR, BYVAL AS const gchar PTR, BYVAL AS const GVariantType PTR) AS GVariant PTR
DECLARE FUNCTION g_variant_dict_ref(BYVAL AS GVariantDict PTR) AS GVariantDict PTR
DECLARE FUNCTION g_variant_dict_remove(BYVAL AS GVariantDict PTR, BYVAL AS const gchar PTR) AS gboolean
DECLARE SUB g_variant_dict_unref(BYVAL AS GVariantDict PTR)
TYPE _GVariantIter
  AS gsize x(15)
END TYPE
DECLARE FUNCTION g_variant_iter_copy(BYVAL AS GVariantIter PTR) AS GVariantIter PTR
DECLARE SUB g_variant_iter_free(BYVAL AS GVariantIter PTR)
DECLARE FUNCTION g_variant_iter_init(BYVAL AS GVariantIter PTR, BYVAL AS GVariant PTR) AS gsize
DECLARE FUNCTION g_variant_iter_loop(BYVAL AS GVariantIter PTR, BYVAL AS const gchar PTR, ...) AS gboolean
DECLARE FUNCTION g_variant_iter_n_children(BYVAL AS GVariantIter PTR) AS gsize
DECLARE FUNCTION g_variant_iter_next(BYVAL AS GVariantIter PTR, BYVAL AS const gchar PTR, ...) AS gboolean
DECLARE FUNCTION g_variant_iter_next_value(BYVAL AS GVariantIter PTR) AS GVariant PTR
DECLARE FUNCTION g_variant_type_new(BYVAL AS const gchar PTR) AS GVariantType PTR
DECLARE FUNCTION g_variant_type_new_array(BYVAL AS const GVariantType PTR) AS GVariantType PTR
DECLARE FUNCTION g_variant_type_new_dict_entry(BYVAL AS const GVariantType PTR, BYVAL AS const GVariantType PTR) AS GVariantType PTR
DECLARE FUNCTION g_variant_type_new_maybe(BYVAL AS const GVariantType PTR) AS GVariantType PTR
DECLARE FUNCTION g_variant_type_new_tuple(BYVAL AS const GVariantType ptr const /'GVariantType* const'/ PTR, BYVAL AS gint) AS GVariantType PTR
DECLARE FUNCTION g_variant_type_copy(BYVAL AS const GVariantType PTR) AS GVariantType PTR
DECLARE FUNCTION g_variant_type_dup_string(BYVAL AS const GVariantType PTR) AS gchar PTR
DECLARE FUNCTION g_variant_type_element(BYVAL AS const GVariantType PTR) AS const GVariantType PTR
DECLARE FUNCTION g_variant_type_equal(BYVAL AS gconstpointer, BYVAL AS gconstpointer) AS gboolean
DECLARE FUNCTION g_variant_type_first(BYVAL AS const GVariantType PTR) AS const GVariantType PTR
DECLARE SUB g_variant_type_free(BYVAL AS GVariantType PTR)
DECLARE FUNCTION g_variant_type_get_string_length(BYVAL AS const GVariantType PTR) AS gsize
DECLARE FUNCTION g_variant_type_hash(BYVAL AS gconstpointer) AS guint
DECLARE FUNCTION g_variant_type_is_array(BYVAL AS const GVariantType PTR) AS gboolean
DECLARE FUNCTION g_variant_type_is_basic(BYVAL AS const GVariantType PTR) AS gboolean
DECLARE FUNCTION g_variant_type_is_container(BYVAL AS const GVariantType PTR) AS gboolean
DECLARE FUNCTION g_variant_type_is_definite(BYVAL AS const GVariantType PTR) AS gboolean
DECLARE FUNCTION g_variant_type_is_dict_entry(BYVAL AS const GVariantType PTR) AS gboolean
DECLARE FUNCTION g_variant_type_is_maybe(BYVAL AS const GVariantType PTR) AS gboolean
DECLARE FUNCTION g_variant_type_is_subtype_of(BYVAL AS const GVariantType PTR, BYVAL AS const GVariantType PTR) AS gboolean
DECLARE FUNCTION g_variant_type_is_tuple(BYVAL AS const GVariantType PTR) AS gboolean
DECLARE FUNCTION g_variant_type_is_variant(BYVAL AS const GVariantType PTR) AS gboolean
DECLARE FUNCTION g_variant_type_key(BYVAL AS const GVariantType PTR) AS const GVariantType PTR
DECLARE FUNCTION g_variant_type_n_items(BYVAL AS const GVariantType PTR) AS gsize
DECLARE FUNCTION g_variant_type_next(BYVAL AS const GVariantType PTR) AS const GVariantType PTR
DECLARE FUNCTION g_variant_type_peek_string(BYVAL AS const GVariantType PTR) AS const gchar PTR
DECLARE FUNCTION g_variant_type_value(BYVAL AS const GVariantType PTR) AS const GVariantType PTR
DECLARE FUNCTION g_variant_type_checked_(BYVAL AS const gchar PTR) AS const GVariantType PTR
DECLARE FUNCTION g_variant_type_string_get_depth_(BYVAL AS const gchar PTR) AS gsize
DECLARE FUNCTION g_variant_type_string_is_valid(BYVAL AS const gchar PTR) AS gboolean
DECLARE FUNCTION g_variant_type_string_scan(BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR PTR) AS gboolean
TYPE GVoidFunc AS SUB CDECL()
' P_4

DECLARE FUNCTION g_access(BYVAL AS const gchar PTR, BYVAL AS gint /'int'/) AS gint /'int'/
DECLARE FUNCTION g_ascii_digit_value(BYVAL AS gint8 /'gchar'/) AS gint
DECLARE FUNCTION g_ascii_dtostr(BYVAL AS gchar PTR, BYVAL AS gint, BYVAL AS gdouble) AS gchar PTR
DECLARE FUNCTION g_ascii_formatd(BYVAL AS gchar PTR, BYVAL AS gint, BYVAL AS const gchar PTR, BYVAL AS gdouble) AS gchar PTR
DECLARE FUNCTION g_ascii_strcasecmp(BYVAL AS const gchar PTR, BYVAL AS const gchar PTR) AS gint
DECLARE FUNCTION g_ascii_strdown(BYVAL AS const gchar PTR, BYVAL AS gssize) AS gchar PTR
DECLARE FUNCTION g_ascii_string_to_signed(BYVAL AS const gchar PTR, BYVAL AS guint, BYVAL AS gint64, BYVAL AS gint64, BYVAL AS gint64 PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION g_ascii_string_to_unsigned(BYVAL AS const gchar PTR, BYVAL AS guint, BYVAL AS guint64, BYVAL AS guint64, BYVAL AS guint64 PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION g_ascii_strncasecmp(BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS gsize) AS gint
DECLARE FUNCTION g_ascii_strtod(BYVAL AS const gchar PTR, BYVAL AS gchar PTR PTR) AS gdouble
DECLARE FUNCTION g_ascii_strtoll(BYVAL AS const gchar PTR, BYVAL AS gchar PTR PTR, BYVAL AS guint) AS gint64
DECLARE FUNCTION g_ascii_strtoull(BYVAL AS const gchar PTR, BYVAL AS gchar PTR PTR, BYVAL AS guint) AS guint64
DECLARE FUNCTION g_ascii_strup(BYVAL AS const gchar PTR, BYVAL AS gssize) AS gchar PTR
DECLARE FUNCTION g_ascii_tolower(BYVAL AS gint8 /'gchar'/) AS gint8 /'gchar'/
DECLARE FUNCTION g_ascii_toupper(BYVAL AS gint8 /'gchar'/) AS gint8 /'gchar'/
DECLARE FUNCTION g_ascii_xdigit_value(BYVAL AS gint8 /'gchar'/) AS gint
DECLARE SUB g_assert_warning(BYVAL AS const char PTR, BYVAL AS const char PTR, BYVAL AS const gint32 /'const int'/, BYVAL AS const char PTR, BYVAL AS const char PTR)
DECLARE SUB g_assertion_message(BYVAL AS const char PTR, BYVAL AS const char PTR, BYVAL AS gint /'int'/, BYVAL AS const char PTR, BYVAL AS const char PTR)
DECLARE SUB g_assertion_message_cmpnum(BYVAL AS const char PTR, BYVAL AS const char PTR, BYVAL AS gint /'int'/, BYVAL AS const char PTR, BYVAL AS const char PTR, BYVAL AS double /'long double'/, BYVAL AS const char PTR, BYVAL AS double /'long double'/, BYVAL AS gint8 /'char'/)
DECLARE SUB g_assertion_message_cmpstr(BYVAL AS const char PTR, BYVAL AS const char PTR, BYVAL AS gint /'int'/, BYVAL AS const char PTR, BYVAL AS const char PTR, BYVAL AS const char PTR, BYVAL AS const char PTR, BYVAL AS const char PTR)
DECLARE SUB g_assertion_message_error(BYVAL AS const char PTR, BYVAL AS const char PTR, BYVAL AS gint /'int'/, BYVAL AS const char PTR, BYVAL AS const char PTR, BYVAL AS const GError PTR, BYVAL AS GQuark, BYVAL AS gint /'int'/)
DECLARE SUB g_assertion_message_expr(BYVAL AS const char PTR, BYVAL AS const char PTR, BYVAL AS gint /'int'/, BYVAL AS const char PTR, BYVAL AS const char PTR)
DECLARE SUB g_atexit(BYVAL AS GVoidFunc)
DECLARE FUNCTION g_atomic_int_add(BYVAL AS gint PTR, BYVAL AS gint) AS gint
DECLARE FUNCTION g_atomic_int_and(BYVAL AS guint PTR, BYVAL AS guint) AS guint
DECLARE FUNCTION g_atomic_int_compare_and_exchange(BYVAL AS gint PTR, BYVAL AS gint, BYVAL AS gint) AS gboolean
DECLARE FUNCTION g_atomic_int_dec_and_test(BYVAL AS gint PTR) AS gboolean
DECLARE FUNCTION g_atomic_int_exchange_and_add(BYVAL AS gint PTR, BYVAL AS gint) AS gint
DECLARE FUNCTION g_atomic_int_get(BYVAL AS const gint PTR) AS gint
DECLARE SUB g_atomic_int_inc(BYVAL AS gint PTR)
DECLARE FUNCTION g_atomic_int_or(BYVAL AS guint PTR, BYVAL AS guint) AS guint
DECLARE SUB g_atomic_int_set(BYVAL AS gint PTR, BYVAL AS gint)
DECLARE FUNCTION g_atomic_int_xor(BYVAL AS guint PTR, BYVAL AS guint) AS guint
DECLARE FUNCTION g_atomic_pointer_add(BYVAL AS any /'void'/ PTR, BYVAL AS gssize) AS gssize
DECLARE FUNCTION g_atomic_pointer_and(BYVAL AS any /'void'/ PTR, BYVAL AS gsize) AS gsize
DECLARE FUNCTION g_atomic_pointer_compare_and_exchange(BYVAL AS any /'void'/ PTR, BYVAL AS gpointer, BYVAL AS gpointer) AS gboolean
DECLARE FUNCTION g_atomic_pointer_get(BYVAL AS any /'void'/ PTR) AS gpointer
DECLARE FUNCTION g_atomic_pointer_or(BYVAL AS any /'void'/ PTR, BYVAL AS gsize) AS gsize
DECLARE SUB g_atomic_pointer_set(BYVAL AS any /'void'/ PTR, BYVAL AS gpointer)
DECLARE FUNCTION g_atomic_pointer_xor(BYVAL AS any /'void'/ PTR, BYVAL AS gsize) AS gsize
DECLARE FUNCTION g_atomic_rc_box_acquire(BYVAL AS gpointer) AS gpointer
DECLARE FUNCTION g_atomic_rc_box_alloc(BYVAL AS gsize) AS gpointer
DECLARE FUNCTION g_atomic_rc_box_alloc0(BYVAL AS gsize) AS gpointer
DECLARE FUNCTION g_atomic_rc_box_dup(BYVAL AS gsize, BYVAL AS gconstpointer) AS gpointer
DECLARE FUNCTION g_atomic_rc_box_get_size(BYVAL AS gpointer) AS gsize
DECLARE SUB g_atomic_rc_box_release(BYVAL AS gpointer)
DECLARE SUB g_atomic_rc_box_release_full(BYVAL AS gpointer, BYVAL AS GDestroyNotify)
DECLARE FUNCTION g_atomic_ref_count_compare(BYVAL AS any /'gatomicrefcount'/ PTR, BYVAL AS gint) AS gboolean
DECLARE FUNCTION g_atomic_ref_count_dec(BYVAL AS any /'gatomicrefcount'/ PTR) AS gboolean
DECLARE SUB g_atomic_ref_count_inc(BYVAL AS any /'gatomicrefcount'/ PTR)
DECLARE SUB g_atomic_ref_count_init(BYVAL AS any /'gatomicrefcount'/ PTR)
DECLARE FUNCTION g_base64_decode(BYVAL AS const gchar PTR, BYVAL AS gsize PTR) AS guchar PTR
DECLARE FUNCTION g_base64_decode_inplace(BYVAL AS gchar PTR, BYVAL AS gsize PTR) AS guchar PTR
DECLARE FUNCTION g_base64_decode_step(BYVAL AS const gchar PTR, BYVAL AS gsize, BYVAL AS guchar PTR, BYVAL AS gint PTR, BYVAL AS guint PTR) AS gsize
DECLARE FUNCTION g_base64_encode(BYVAL AS const guchar PTR, BYVAL AS gsize) AS gchar PTR
DECLARE FUNCTION g_base64_encode_close(BYVAL AS gboolean, BYVAL AS gchar PTR, BYVAL AS gint PTR, BYVAL AS gint PTR) AS gsize
DECLARE FUNCTION g_base64_encode_step(BYVAL AS const guchar PTR, BYVAL AS gsize, BYVAL AS gboolean, BYVAL AS gchar PTR, BYVAL AS gint PTR, BYVAL AS gint PTR) AS gsize
DECLARE FUNCTION g_basename(BYVAL AS const gchar PTR) AS const gchar PTR
DECLARE SUB g_bit_lock(BYVAL AS gint PTR, BYVAL AS gint)
DECLARE FUNCTION g_bit_nth_lsf(BYVAL AS gulong, BYVAL AS gint) AS gint
DECLARE FUNCTION g_bit_nth_msf(BYVAL AS gulong, BYVAL AS gint) AS gint
DECLARE FUNCTION g_bit_storage(BYVAL AS gulong) AS guint
DECLARE FUNCTION g_bit_trylock(BYVAL AS gint PTR, BYVAL AS gint) AS gboolean
DECLARE SUB g_bit_unlock(BYVAL AS gint PTR, BYVAL AS gint)
DECLARE FUNCTION g_build_filename(BYVAL AS const gchar PTR, ...) AS gchar PTR
DECLARE FUNCTION g_build_filename_valist(BYVAL AS const gchar PTR, BYVAL AS va_list PTR) AS gchar PTR
DECLARE FUNCTION g_build_filenamev(BYVAL AS gchar PTR PTR) AS gchar PTR
DECLARE FUNCTION g_build_path(BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, ...) AS gchar PTR
DECLARE FUNCTION g_build_pathv(BYVAL AS const gchar PTR, BYVAL AS gchar PTR PTR) AS gchar PTR
DECLARE FUNCTION g_canonicalize_filename(BYVAL AS const gchar PTR, BYVAL AS const gchar PTR) AS gchar PTR
DECLARE FUNCTION g_chdir(BYVAL AS const gchar PTR) AS gint /'int'/
DECLARE FUNCTION glib_check_version(BYVAL AS guint, BYVAL AS guint, BYVAL AS guint) AS const gchar PTR
DECLARE FUNCTION g_child_watch_add(BYVAL AS GPid, BYVAL AS GChildWatchFunc, BYVAL AS gpointer) AS guint
DECLARE FUNCTION g_child_watch_add_full(BYVAL AS gint, BYVAL AS GPid, BYVAL AS GChildWatchFunc, BYVAL AS gpointer, BYVAL AS GDestroyNotify) AS guint
DECLARE FUNCTION g_child_watch_source_new(BYVAL AS GPid) AS GSource PTR
DECLARE SUB g_clear_error(BYVAL AS GError PTR PTR)
DECLARE SUB g_clear_handle_id(BYVAL AS guint PTR, BYVAL AS GClearHandleFunc)
DECLARE SUB g_clear_list(BYVAL AS GList PTR PTR, BYVAL AS GDestroyNotify)
DECLARE SUB g_clear_pointer(BYVAL AS gpointer PTR, BYVAL AS GDestroyNotify)
DECLARE SUB g_clear_slist(BYVAL AS GSList PTR PTR, BYVAL AS GDestroyNotify)
DECLARE FUNCTION g_close(BYVAL AS gint, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION g_compute_checksum_for_bytes(BYVAL AS GChecksumType, BYVAL AS GBytes PTR) AS gchar PTR
DECLARE FUNCTION g_compute_checksum_for_data(BYVAL AS GChecksumType, BYVAL AS const guchar PTR, BYVAL AS gsize) AS gchar PTR
DECLARE FUNCTION g_compute_checksum_for_string(BYVAL AS GChecksumType, BYVAL AS const gchar PTR, BYVAL AS gssize) AS gchar PTR
DECLARE FUNCTION g_compute_hmac_for_bytes(BYVAL AS GChecksumType, BYVAL AS GBytes PTR, BYVAL AS GBytes PTR) AS gchar PTR
DECLARE FUNCTION g_compute_hmac_for_data(BYVAL AS GChecksumType, BYVAL AS const guchar PTR, BYVAL AS gsize, BYVAL AS const guchar PTR, BYVAL AS gsize) AS gchar PTR
DECLARE FUNCTION g_compute_hmac_for_string(BYVAL AS GChecksumType, BYVAL AS const guchar PTR, BYVAL AS gsize, BYVAL AS const gchar PTR, BYVAL AS gssize) AS gchar PTR
DECLARE FUNCTION g_convert(BYVAL AS const gchar PTR, BYVAL AS gssize, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS gsize PTR, BYVAL AS gsize PTR, BYVAL AS GError PTR PTR) AS gchar PTR
DECLARE FUNCTION g_convert_error_quark() AS GQuark
DECLARE FUNCTION g_convert_with_fallback(BYVAL AS const gchar PTR, BYVAL AS gssize, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS gsize PTR, BYVAL AS gsize PTR, BYVAL AS GError PTR PTR) AS gchar PTR
DECLARE FUNCTION g_convert_with_iconv(BYVAL AS const gchar PTR, BYVAL AS gssize, BYVAL AS GIConv PTR /'GIConv'/, BYVAL AS gsize PTR, BYVAL AS gsize PTR, BYVAL AS GError PTR PTR) AS gchar PTR
DECLARE SUB g_datalist_clear(BYVAL AS GData PTR PTR)
DECLARE SUB g_datalist_foreach(BYVAL AS GData PTR PTR, BYVAL AS GDataForeachFunc, BYVAL AS gpointer)
DECLARE FUNCTION g_datalist_get_data(BYVAL AS GData PTR PTR, BYVAL AS const gchar PTR) AS gpointer
DECLARE FUNCTION g_datalist_get_flags(BYVAL AS GData PTR PTR) AS guint
DECLARE FUNCTION g_datalist_id_dup_data(BYVAL AS GData PTR PTR, BYVAL AS GQuark, BYVAL AS GDuplicateFunc, BYVAL AS gpointer) AS gpointer
DECLARE FUNCTION g_datalist_id_get_data(BYVAL AS GData PTR PTR, BYVAL AS GQuark) AS gpointer
DECLARE FUNCTION g_datalist_id_remove_no_notify(BYVAL AS GData PTR PTR, BYVAL AS GQuark) AS gpointer
DECLARE FUNCTION g_datalist_id_replace_data(BYVAL AS GData PTR PTR, BYVAL AS GQuark, BYVAL AS gpointer, BYVAL AS gpointer, BYVAL AS GDestroyNotify, BYVAL AS GDestroyNotify PTR) AS gboolean
DECLARE SUB g_datalist_id_set_data_full(BYVAL AS GData PTR PTR, BYVAL AS GQuark, BYVAL AS gpointer, BYVAL AS GDestroyNotify)
DECLARE SUB g_datalist_init(BYVAL AS GData PTR PTR)
DECLARE SUB g_datalist_set_flags(BYVAL AS GData PTR PTR, BYVAL AS guint)
DECLARE SUB g_datalist_unset_flags(BYVAL AS GData PTR PTR, BYVAL AS guint)
DECLARE SUB g_dataset_destroy(BYVAL AS gconstpointer)
DECLARE SUB g_dataset_foreach(BYVAL AS gconstpointer, BYVAL AS GDataForeachFunc, BYVAL AS gpointer)
DECLARE FUNCTION g_dataset_id_get_data(BYVAL AS gconstpointer, BYVAL AS GQuark) AS gpointer
DECLARE FUNCTION g_dataset_id_remove_no_notify(BYVAL AS gconstpointer, BYVAL AS GQuark) AS gpointer
DECLARE SUB g_dataset_id_set_data_full(BYVAL AS gconstpointer, BYVAL AS GQuark, BYVAL AS gpointer, BYVAL AS GDestroyNotify)
DECLARE FUNCTION g_dcgettext(BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS gint) AS const gchar PTR
DECLARE FUNCTION g_dgettext(BYVAL AS const gchar PTR, BYVAL AS const gchar PTR) AS const gchar PTR
DECLARE FUNCTION g_direct_equal(BYVAL AS gconstpointer, BYVAL AS gconstpointer) AS gboolean
DECLARE FUNCTION g_direct_hash(BYVAL AS gconstpointer) AS guint
DECLARE FUNCTION g_dngettext(BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS gulong) AS const gchar PTR
DECLARE FUNCTION g_double_equal(BYVAL AS gconstpointer, BYVAL AS gconstpointer) AS gboolean
DECLARE FUNCTION g_double_hash(BYVAL AS gconstpointer) AS guint
DECLARE FUNCTION g_dpgettext(BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS gsize) AS const gchar PTR
DECLARE FUNCTION g_dpgettext2(BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR) AS const gchar PTR
DECLARE FUNCTION g_environ_getenv(BYVAL AS gchar PTR PTR, BYVAL AS const gchar PTR) AS const gchar PTR
DECLARE FUNCTION g_environ_setenv(BYVAL AS gchar PTR PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS gboolean) AS gchar PTR PTR
DECLARE FUNCTION g_environ_unsetenv(BYVAL AS gchar PTR PTR, BYVAL AS const gchar PTR) AS gchar PTR PTR
DECLARE FUNCTION g_file_error_from_errno(BYVAL AS gint) AS GFileError
DECLARE FUNCTION g_file_error_quark() AS GQuark
DECLARE FUNCTION g_file_get_contents(BYVAL AS const gchar PTR, BYVAL AS gchar PTR PTR, BYVAL AS gsize PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION g_file_open_tmp(BYVAL AS const gchar PTR, BYVAL AS gchar PTR PTR, BYVAL AS GError PTR PTR) AS gint
DECLARE FUNCTION g_file_read_link(BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR) AS gchar PTR
DECLARE FUNCTION g_file_set_contents(BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS gssize, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION g_file_test(BYVAL AS const gchar PTR, BYVAL AS GFileTest) AS gboolean
DECLARE FUNCTION g_filename_display_basename(BYVAL AS const gchar PTR) AS gchar PTR
DECLARE FUNCTION g_filename_display_name(BYVAL AS const gchar PTR) AS gchar PTR
DECLARE FUNCTION g_filename_from_uri(BYVAL AS const gchar PTR, BYVAL AS gchar PTR PTR, BYVAL AS GError PTR PTR) AS gchar PTR
DECLARE FUNCTION g_filename_from_utf8(BYVAL AS const gchar PTR, BYVAL AS gssize, BYVAL AS gsize PTR, BYVAL AS gsize PTR, BYVAL AS GError PTR PTR) AS gchar PTR
DECLARE FUNCTION g_filename_to_uri(BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR) AS gchar PTR
DECLARE FUNCTION g_filename_to_utf8(BYVAL AS const gchar PTR, BYVAL AS gssize, BYVAL AS gsize PTR, BYVAL AS gsize PTR, BYVAL AS GError PTR PTR) AS gchar PTR
DECLARE FUNCTION g_find_program_in_path(BYVAL AS const gchar PTR) AS gchar PTR
DECLARE FUNCTION g_format_size(BYVAL AS guint64) AS gchar PTR
DECLARE FUNCTION g_format_size_for_display(BYVAL AS gint32 /'goffset'/) AS gchar PTR
DECLARE FUNCTION g_format_size_full(BYVAL AS guint64, BYVAL AS GFormatSizeFlags) AS gchar PTR
DECLARE FUNCTION g_fprintf(BYVAL AS FILE PTR, BYVAL AS const gchar PTR, ...) AS gint
DECLARE SUB g_free(BYVAL AS gpointer)
DECLARE FUNCTION g_get_application_name() AS const gchar PTR
DECLARE FUNCTION g_get_charset(BYVAL AS const char PTR PTR) AS gboolean
DECLARE FUNCTION g_get_codeset() AS gchar PTR
DECLARE FUNCTION g_get_console_charset(BYVAL AS const char PTR PTR) AS gboolean
DECLARE FUNCTION g_get_current_dir() AS gchar PTR
DECLARE SUB g_get_current_time(BYVAL AS GTimeVal PTR)
DECLARE FUNCTION g_get_environ() AS gchar PTR PTR
DECLARE FUNCTION g_get_filename_charsets(BYVAL AS const gchar PTR PTR PTR) AS gboolean
DECLARE FUNCTION g_get_home_dir() AS const gchar PTR
DECLARE FUNCTION g_get_host_name() AS const gchar PTR
DECLARE FUNCTION g_get_language_names() AS const gchar PTR const /'const gchar* const'/ PTR
DECLARE FUNCTION g_get_language_names_with_category(BYVAL AS const gchar PTR) AS const gchar PTR const /'const gchar* const'/ PTR
DECLARE FUNCTION g_get_locale_variants(BYVAL AS const gchar PTR) AS gchar PTR PTR
DECLARE FUNCTION g_get_monotonic_time() AS gint64
DECLARE FUNCTION g_get_num_processors() AS guint
DECLARE FUNCTION g_get_os_info(BYVAL AS const gchar PTR) AS gchar PTR
DECLARE FUNCTION g_get_prgname() AS const gchar PTR
DECLARE FUNCTION g_get_real_name() AS const gchar PTR
DECLARE FUNCTION g_get_real_time() AS gint64
DECLARE FUNCTION g_get_system_config_dirs() AS const gchar PTR const /'const gchar* const'/ PTR
DECLARE FUNCTION g_get_system_data_dirs() AS const gchar PTR const /'const gchar* const'/ PTR
DECLARE FUNCTION g_get_tmp_dir() AS const gchar PTR
DECLARE FUNCTION g_get_user_cache_dir() AS const gchar PTR
DECLARE FUNCTION g_get_user_config_dir() AS const gchar PTR
DECLARE FUNCTION g_get_user_data_dir() AS const gchar PTR
DECLARE FUNCTION g_get_user_name() AS const gchar PTR
DECLARE FUNCTION g_get_user_runtime_dir() AS const gchar PTR
DECLARE FUNCTION g_get_user_special_dir(BYVAL AS GUserDirectory) AS const gchar PTR
DECLARE FUNCTION g_getenv(BYVAL AS const gchar PTR) AS const gchar PTR
DECLARE FUNCTION g_hostname_is_ascii_encoded(BYVAL AS const gchar PTR) AS gboolean
DECLARE FUNCTION g_hostname_is_ip_address(BYVAL AS const gchar PTR) AS gboolean
DECLARE FUNCTION g_hostname_is_non_ascii(BYVAL AS const gchar PTR) AS gboolean
DECLARE FUNCTION g_hostname_to_ascii(BYVAL AS const gchar PTR) AS gchar PTR
DECLARE FUNCTION g_hostname_to_unicode(BYVAL AS const gchar PTR) AS gchar PTR
DECLARE FUNCTION g_idle_add(BYVAL AS GSourceFunc, BYVAL AS gpointer) AS guint
DECLARE FUNCTION g_idle_add_full(BYVAL AS gint, BYVAL AS GSourceFunc, BYVAL AS gpointer, BYVAL AS GDestroyNotify) AS guint
DECLARE FUNCTION g_idle_remove_by_data(BYVAL AS gpointer) AS gboolean
DECLARE FUNCTION g_idle_source_new() AS GSource PTR
DECLARE FUNCTION g_int64_equal(BYVAL AS gconstpointer, BYVAL AS gconstpointer) AS gboolean
DECLARE FUNCTION g_int64_hash(BYVAL AS gconstpointer) AS guint
DECLARE FUNCTION g_int_equal(BYVAL AS gconstpointer, BYVAL AS gconstpointer) AS gboolean
DECLARE FUNCTION g_int_hash(BYVAL AS gconstpointer) AS guint
DECLARE FUNCTION g_intern_static_string(BYVAL AS const gchar PTR) AS const gchar PTR
DECLARE FUNCTION g_intern_string(BYVAL AS const gchar PTR) AS const gchar PTR
DECLARE FUNCTION g_io_add_watch(BYVAL AS GIOChannel PTR, BYVAL AS GIOCondition, BYVAL AS GIOFunc, BYVAL AS gpointer) AS guint
DECLARE FUNCTION g_io_add_watch_full(BYVAL AS GIOChannel PTR, BYVAL AS gint, BYVAL AS GIOCondition, BYVAL AS GIOFunc, BYVAL AS gpointer, BYVAL AS GDestroyNotify) AS guint
DECLARE FUNCTION g_io_create_watch(BYVAL AS GIOChannel PTR, BYVAL AS GIOCondition) AS GSource PTR
DECLARE FUNCTION g_listenv() AS gchar PTR PTR
DECLARE FUNCTION g_locale_from_utf8(BYVAL AS const gchar PTR, BYVAL AS gssize, BYVAL AS gsize PTR, BYVAL AS gsize PTR, BYVAL AS GError PTR PTR) AS gchar PTR
DECLARE FUNCTION g_locale_to_utf8(BYVAL AS const gchar PTR, BYVAL AS gssize, BYVAL AS gsize PTR, BYVAL AS gsize PTR, BYVAL AS GError PTR PTR) AS gchar PTR
DECLARE SUB g_log(BYVAL AS const gchar PTR, BYVAL AS GLogLevelFlags, BYVAL AS const gchar PTR, ...)
DECLARE SUB g_log_default_handler(BYVAL AS const gchar PTR, BYVAL AS GLogLevelFlags, BYVAL AS const gchar PTR, BYVAL AS gpointer)
DECLARE SUB g_log_remove_handler(BYVAL AS const gchar PTR, BYVAL AS guint)
DECLARE FUNCTION g_log_set_always_fatal(BYVAL AS GLogLevelFlags) AS GLogLevelFlags
DECLARE FUNCTION g_log_set_default_handler(BYVAL AS GLogFunc, BYVAL AS gpointer) AS GLogFunc
DECLARE FUNCTION g_log_set_fatal_mask(BYVAL AS const gchar PTR, BYVAL AS GLogLevelFlags) AS GLogLevelFlags
DECLARE FUNCTION g_log_set_handler(BYVAL AS const gchar PTR, BYVAL AS GLogLevelFlags, BYVAL AS GLogFunc, BYVAL AS gpointer) AS guint
DECLARE FUNCTION g_log_set_handler_full(BYVAL AS const gchar PTR, BYVAL AS GLogLevelFlags, BYVAL AS GLogFunc, BYVAL AS gpointer, BYVAL AS GDestroyNotify) AS guint
DECLARE SUB g_log_set_writer_func(BYVAL AS GLogWriterFunc, BYVAL AS gpointer, BYVAL AS GDestroyNotify)
DECLARE SUB g_log_structured(BYVAL AS const gchar PTR, BYVAL AS GLogLevelFlags, ...)
DECLARE SUB g_log_structured_array(BYVAL AS GLogLevelFlags, BYVAL AS const GLogField PTR, BYVAL AS gsize)
DECLARE SUB g_log_structured_standard(BYVAL AS const gchar PTR, BYVAL AS GLogLevelFlags, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, ...)
DECLARE SUB g_log_variant(BYVAL AS const gchar PTR, BYVAL AS GLogLevelFlags, BYVAL AS GVariant PTR)
DECLARE FUNCTION g_log_writer_default(BYVAL AS GLogLevelFlags, BYVAL AS const GLogField PTR, BYVAL AS gsize, BYVAL AS gpointer) AS GLogWriterOutput
DECLARE FUNCTION g_log_writer_format_fields(BYVAL AS GLogLevelFlags, BYVAL AS const GLogField PTR, BYVAL AS gsize, BYVAL AS gboolean) AS gchar PTR
DECLARE FUNCTION g_log_writer_is_journald(BYVAL AS gint) AS gboolean
DECLARE FUNCTION g_log_writer_journald(BYVAL AS GLogLevelFlags, BYVAL AS const GLogField PTR, BYVAL AS gsize, BYVAL AS gpointer) AS GLogWriterOutput
DECLARE FUNCTION g_log_writer_standard_streams(BYVAL AS GLogLevelFlags, BYVAL AS const GLogField PTR, BYVAL AS gsize, BYVAL AS gpointer) AS GLogWriterOutput
DECLARE FUNCTION g_log_writer_supports_color(BYVAL AS gint) AS gboolean
DECLARE SUB g_logv(BYVAL AS const gchar PTR, BYVAL AS GLogLevelFlags, BYVAL AS const gchar PTR, BYVAL AS va_list)
DECLARE FUNCTION g_main_current_source() AS GSource PTR
DECLARE FUNCTION g_main_depth() AS gint
DECLARE FUNCTION g_malloc(BYVAL AS gsize) AS gpointer
DECLARE FUNCTION g_malloc0(BYVAL AS gsize) AS gpointer
DECLARE FUNCTION g_malloc0_n(BYVAL AS gsize, BYVAL AS gsize) AS gpointer
DECLARE FUNCTION g_malloc_n(BYVAL AS gsize, BYVAL AS gsize) AS gpointer
DECLARE FUNCTION g_markup_collect_attributes(BYVAL AS const gchar PTR, BYVAL AS const gchar PTR PTR, BYVAL AS const gchar PTR PTR, BYVAL AS GError PTR PTR, BYVAL AS GMarkupCollectType, BYVAL AS const gchar PTR, ...) AS gboolean
DECLARE FUNCTION g_markup_error_quark() AS GQuark
DECLARE FUNCTION g_markup_escape_text(BYVAL AS const gchar PTR, BYVAL AS gssize) AS gchar PTR
DECLARE FUNCTION g_markup_printf_escaped(BYVAL AS const char PTR, ...) AS gchar PTR
DECLARE FUNCTION g_markup_vprintf_escaped(BYVAL AS const char PTR, BYVAL AS va_list) AS gchar PTR
DECLARE FUNCTION g_mem_is_system_malloc() AS gboolean
DECLARE SUB g_mem_profile()
DECLARE SUB g_mem_set_vtable(BYVAL AS GMemVTable PTR)
DECLARE FUNCTION g_memdup(BYVAL AS gconstpointer, BYVAL AS guint) AS gpointer
DECLARE FUNCTION g_mkdir_with_parents(BYVAL AS const gchar PTR, BYVAL AS gint) AS gint
DECLARE FUNCTION g_mkdtemp(BYVAL AS gchar PTR) AS gchar PTR
DECLARE FUNCTION g_mkdtemp_full(BYVAL AS gchar PTR, BYVAL AS gint) AS gchar PTR
DECLARE FUNCTION g_mkstemp(BYVAL AS gchar PTR) AS gint
DECLARE FUNCTION g_mkstemp_full(BYVAL AS gchar PTR, BYVAL AS gint, BYVAL AS gint) AS gint
DECLARE SUB g_nullify_pointer(BYVAL AS gpointer PTR)
DECLARE FUNCTION g_number_parser_error_quark() AS GQuark
DECLARE SUB g_on_error_query(BYVAL AS const gchar PTR)
DECLARE SUB g_on_error_stack_trace(BYVAL AS const gchar PTR)
DECLARE FUNCTION g_option_error_quark() AS GQuark
DECLARE FUNCTION g_parse_debug_string(BYVAL AS const gchar PTR, BYVAL AS const GDebugKey PTR, BYVAL AS guint) AS guint
DECLARE FUNCTION g_path_get_basename(BYVAL AS const gchar PTR) AS gchar PTR
DECLARE FUNCTION g_path_get_dirname(BYVAL AS const gchar PTR) AS gchar PTR
DECLARE FUNCTION g_path_is_absolute(BYVAL AS const gchar PTR) AS gboolean
DECLARE FUNCTION g_path_skip_root(BYVAL AS const gchar PTR) AS const gchar PTR
DECLARE FUNCTION g_pattern_match(BYVAL AS GPatternSpec PTR, BYVAL AS guint, BYVAL AS const gchar PTR, BYVAL AS const gchar PTR) AS gboolean
DECLARE FUNCTION g_pattern_match_simple(BYVAL AS const gchar PTR, BYVAL AS const gchar PTR) AS gboolean
DECLARE FUNCTION g_pattern_match_string(BYVAL AS GPatternSpec PTR, BYVAL AS const gchar PTR) AS gboolean
DECLARE SUB g_pointer_bit_lock(BYVAL AS any /'void'/ PTR, BYVAL AS gint)
DECLARE FUNCTION g_pointer_bit_trylock(BYVAL AS any /'void'/ PTR, BYVAL AS gint) AS gboolean
DECLARE SUB g_pointer_bit_unlock(BYVAL AS any /'void'/ PTR, BYVAL AS gint)
DECLARE FUNCTION g_poll(BYVAL AS GPollFD PTR, BYVAL AS guint, BYVAL AS gint) AS gint
DECLARE SUB g_prefix_error(BYVAL AS GError PTR PTR, BYVAL AS const gchar PTR, ...)
DECLARE SUB g_print(BYVAL AS const gchar PTR, ...)
DECLARE SUB g_printerr(BYVAL AS const gchar PTR, ...)
DECLARE FUNCTION g_printf(BYVAL AS const gchar PTR, ...) AS gint
DECLARE FUNCTION g_printf_string_upper_bound(BYVAL AS const gchar PTR, BYVAL AS va_list) AS gsize
DECLARE SUB g_propagate_error(BYVAL AS GError PTR PTR, BYVAL AS GError PTR)
DECLARE SUB g_propagate_prefixed_error(BYVAL AS GError PTR PTR, BYVAL AS GError PTR, BYVAL AS const gchar PTR, ...)
DECLARE SUB g_qsort_with_data(BYVAL AS gconstpointer, BYVAL AS gint, BYVAL AS gsize, BYVAL AS GCompareDataFunc, BYVAL AS gpointer)
DECLARE FUNCTION g_quark_from_static_string(BYVAL AS const gchar PTR) AS GQuark
DECLARE FUNCTION g_quark_from_string(BYVAL AS const gchar PTR) AS GQuark
DECLARE FUNCTION g_quark_to_string(BYVAL AS GQuark) AS const gchar PTR
DECLARE FUNCTION g_quark_try_string(BYVAL AS const gchar PTR) AS GQuark
DECLARE FUNCTION g_random_double() AS gdouble
DECLARE FUNCTION g_random_double_range(BYVAL AS gdouble, BYVAL AS gdouble) AS gdouble
DECLARE FUNCTION g_random_int() AS guint32
DECLARE FUNCTION g_random_int_range(BYVAL AS gint32, BYVAL AS gint32) AS gint32
DECLARE SUB g_random_set_seed(BYVAL AS guint32)
DECLARE FUNCTION g_rc_box_acquire(BYVAL AS gpointer) AS gpointer
DECLARE FUNCTION g_rc_box_alloc(BYVAL AS gsize) AS gpointer
DECLARE FUNCTION g_rc_box_alloc0(BYVAL AS gsize) AS gpointer
DECLARE FUNCTION g_rc_box_dup(BYVAL AS gsize, BYVAL AS gconstpointer) AS gpointer
DECLARE FUNCTION g_rc_box_get_size(BYVAL AS gpointer) AS gsize
DECLARE SUB g_rc_box_release(BYVAL AS gpointer)
DECLARE SUB g_rc_box_release_full(BYVAL AS gpointer, BYVAL AS GDestroyNotify)
DECLARE FUNCTION g_realloc(BYVAL AS gpointer, BYVAL AS gsize) AS gpointer
DECLARE FUNCTION g_realloc_n(BYVAL AS gpointer, BYVAL AS gsize, BYVAL AS gsize) AS gpointer
DECLARE FUNCTION g_ref_count_compare(BYVAL AS any /'grefcount'/ PTR, BYVAL AS gint) AS gboolean
DECLARE FUNCTION g_ref_count_dec(BYVAL AS any /'grefcount'/ PTR) AS gboolean
DECLARE SUB g_ref_count_inc(BYVAL AS any /'grefcount'/ PTR)
DECLARE SUB g_ref_count_init(BYVAL AS any /'grefcount'/ PTR)
DECLARE FUNCTION g_ref_string_acquire(BYVAL AS char PTR) AS char PTR
DECLARE FUNCTION g_ref_string_length(BYVAL AS char PTR) AS gsize
DECLARE FUNCTION g_ref_string_new(BYVAL AS const char PTR) AS char PTR
DECLARE FUNCTION g_ref_string_new_intern(BYVAL AS const char PTR) AS char PTR
DECLARE FUNCTION g_ref_string_new_len(BYVAL AS const char PTR, BYVAL AS gssize) AS char PTR
DECLARE SUB g_ref_string_release(BYVAL AS char PTR)
DECLARE SUB g_reload_user_special_dirs_cache()
DECLARE SUB g_return_if_fail_warning(BYVAL AS const char PTR, BYVAL AS const char PTR, BYVAL AS const char PTR)
DECLARE FUNCTION g_rmdir(BYVAL AS const gchar PTR) AS gint /'int'/
DECLARE SUB g_set_application_name(BYVAL AS const gchar PTR)
DECLARE SUB g_set_error(BYVAL AS GError PTR PTR, BYVAL AS GQuark, BYVAL AS gint, BYVAL AS const gchar PTR, ...)
DECLARE SUB g_set_error_literal(BYVAL AS GError PTR PTR, BYVAL AS GQuark, BYVAL AS gint, BYVAL AS const gchar PTR)
DECLARE SUB g_set_prgname(BYVAL AS const gchar PTR)
DECLARE FUNCTION g_set_print_handler(BYVAL AS GPrintFunc) AS GPrintFunc
DECLARE FUNCTION g_set_printerr_handler(BYVAL AS GPrintFunc) AS GPrintFunc
DECLARE FUNCTION g_setenv(BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS gboolean) AS gboolean
DECLARE FUNCTION g_shell_error_quark() AS GQuark
DECLARE FUNCTION g_shell_parse_argv(BYVAL AS const gchar PTR, BYVAL AS gint PTR, BYVAL AS gchar PTR PTR PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION g_shell_quote(BYVAL AS const gchar PTR) AS gchar PTR
DECLARE FUNCTION g_shell_unquote(BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR) AS gchar PTR
DECLARE FUNCTION g_slice_alloc(BYVAL AS gsize) AS gpointer
DECLARE FUNCTION g_slice_alloc0(BYVAL AS gsize) AS gpointer
DECLARE FUNCTION g_slice_copy(BYVAL AS gsize, BYVAL AS gconstpointer) AS gpointer
DECLARE SUB g_slice_free1(BYVAL AS gsize, BYVAL AS gpointer)
DECLARE SUB g_slice_free_chain_with_offset(BYVAL AS gsize, BYVAL AS gpointer, BYVAL AS gsize)
DECLARE FUNCTION g_slice_get_config(BYVAL AS GSliceConfig) AS gint64
DECLARE FUNCTION g_slice_get_config_state(BYVAL AS GSliceConfig, BYVAL AS gint64, BYVAL AS guint PTR) AS gint64 PTR
DECLARE SUB g_slice_set_config(BYVAL AS GSliceConfig, BYVAL AS gint64)
DECLARE FUNCTION g_snprintf(BYVAL AS gchar PTR, BYVAL AS gulong, BYVAL AS const gchar PTR, ...) AS gint
DECLARE FUNCTION g_spaced_primes_closest(BYVAL AS guint) AS guint
DECLARE FUNCTION g_spawn_async(BYVAL AS const gchar PTR, BYVAL AS gchar PTR PTR, BYVAL AS gchar PTR PTR, BYVAL AS GSpawnFlags, BYVAL AS GSpawnChildSetupFunc, BYVAL AS gpointer, BYVAL AS GPid PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION g_spawn_async_with_fds(BYVAL AS const gchar PTR, BYVAL AS gchar PTR PTR, BYVAL AS gchar PTR PTR, BYVAL AS GSpawnFlags, BYVAL AS GSpawnChildSetupFunc, BYVAL AS gpointer, BYVAL AS GPid PTR, BYVAL AS gint, BYVAL AS gint, BYVAL AS gint, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION g_spawn_async_with_pipes(BYVAL AS const gchar PTR, BYVAL AS gchar PTR PTR, BYVAL AS gchar PTR PTR, BYVAL AS GSpawnFlags, BYVAL AS GSpawnChildSetupFunc, BYVAL AS gpointer, BYVAL AS GPid PTR, BYVAL AS gint PTR, BYVAL AS gint PTR, BYVAL AS gint PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION g_spawn_check_exit_status(BYVAL AS gint, BYVAL AS GError PTR PTR) AS gboolean
DECLARE SUB g_spawn_close_pid(BYVAL AS GPid)
DECLARE FUNCTION g_spawn_command_line_async(BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION g_spawn_command_line_sync(BYVAL AS const gchar PTR, BYVAL AS gchar PTR PTR, BYVAL AS gchar PTR PTR, BYVAL AS gint PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION g_spawn_error_quark() AS GQuark
DECLARE FUNCTION g_spawn_exit_error_quark() AS GQuark
DECLARE FUNCTION g_spawn_sync(BYVAL AS const gchar PTR, BYVAL AS gchar PTR PTR, BYVAL AS gchar PTR PTR, BYVAL AS GSpawnFlags, BYVAL AS GSpawnChildSetupFunc, BYVAL AS gpointer, BYVAL AS gchar PTR PTR, BYVAL AS gchar PTR PTR, BYVAL AS gint PTR, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION g_sprintf(BYVAL AS gchar PTR, BYVAL AS const gchar PTR, ...) AS gint
DECLARE FUNCTION g_stpcpy(BYVAL AS gchar PTR, BYVAL AS const char PTR) AS gchar PTR
DECLARE FUNCTION g_str_equal(BYVAL AS gconstpointer, BYVAL AS gconstpointer) AS gboolean
DECLARE FUNCTION g_str_has_prefix(BYVAL AS const gchar PTR, BYVAL AS const gchar PTR) AS gboolean
DECLARE FUNCTION g_str_has_suffix(BYVAL AS const gchar PTR, BYVAL AS const gchar PTR) AS gboolean
DECLARE FUNCTION g_str_hash(BYVAL AS gconstpointer) AS guint
DECLARE FUNCTION g_str_is_ascii(BYVAL AS const gchar PTR) AS gboolean
DECLARE FUNCTION g_str_match_string(BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS gboolean) AS gboolean
DECLARE FUNCTION g_str_to_ascii(BYVAL AS const gchar PTR, BYVAL AS const gchar PTR) AS gchar PTR
DECLARE FUNCTION g_str_tokenize_and_fold(BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS gchar PTR PTR PTR) AS gchar PTR PTR
DECLARE FUNCTION g_strcanon(BYVAL AS gchar PTR, BYVAL AS const gchar PTR, BYVAL AS gint8 /'gchar'/) AS gchar PTR
DECLARE FUNCTION g_strcasecmp(BYVAL AS const gchar PTR, BYVAL AS const gchar PTR) AS gint
DECLARE FUNCTION g_strchomp(BYVAL AS gchar PTR) AS gchar PTR
DECLARE FUNCTION g_strchug(BYVAL AS gchar PTR) AS gchar PTR
DECLARE FUNCTION g_strcmp0(BYVAL AS const char PTR, BYVAL AS const char PTR) AS gint /'int'/
DECLARE FUNCTION g_strcompress(BYVAL AS const gchar PTR) AS gchar PTR
DECLARE FUNCTION g_strconcat(BYVAL AS const gchar PTR, ...) AS gchar PTR
DECLARE FUNCTION g_strdelimit(BYVAL AS gchar PTR, BYVAL AS const gchar PTR, BYVAL AS gint8 /'gchar'/) AS gchar PTR
DECLARE FUNCTION g_strdown(BYVAL AS gchar PTR) AS gchar PTR
DECLARE FUNCTION g_strdup(BYVAL AS const gchar PTR) AS gchar PTR
DECLARE FUNCTION g_strdup_printf(BYVAL AS const gchar PTR, ...) AS gchar PTR
DECLARE FUNCTION g_strdup_vprintf(BYVAL AS const gchar PTR, BYVAL AS va_list) AS gchar PTR
DECLARE FUNCTION g_strdupv(BYVAL AS gchar PTR PTR) AS gchar PTR PTR
DECLARE FUNCTION g_strerror(BYVAL AS gint) AS const gchar PTR
DECLARE FUNCTION g_strescape(BYVAL AS const gchar PTR, BYVAL AS const gchar PTR) AS gchar PTR
DECLARE SUB g_strfreev(BYVAL AS gchar PTR PTR)
DECLARE FUNCTION g_string_new(BYVAL AS const gchar PTR) AS GString PTR
DECLARE FUNCTION g_string_new_len(BYVAL AS const gchar PTR, BYVAL AS gssize) AS GString PTR
DECLARE FUNCTION g_string_sized_new(BYVAL AS gsize) AS GString PTR
DECLARE FUNCTION g_strip_context(BYVAL AS const gchar PTR, BYVAL AS const gchar PTR) AS const gchar PTR
DECLARE FUNCTION g_strjoin(BYVAL AS const gchar PTR, ...) AS gchar PTR
DECLARE FUNCTION g_strjoinv(BYVAL AS const gchar PTR, BYVAL AS gchar PTR PTR) AS gchar PTR
DECLARE FUNCTION g_strlcat(BYVAL AS gchar PTR, BYVAL AS const gchar PTR, BYVAL AS gsize) AS gsize
DECLARE FUNCTION g_strlcpy(BYVAL AS gchar PTR, BYVAL AS const gchar PTR, BYVAL AS gsize) AS gsize
DECLARE FUNCTION g_strncasecmp(BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS guint) AS gint
DECLARE FUNCTION g_strndup(BYVAL AS const gchar PTR, BYVAL AS gsize) AS gchar PTR
DECLARE FUNCTION g_strnfill(BYVAL AS gsize, BYVAL AS gint8 /'gchar'/) AS gchar PTR
DECLARE FUNCTION g_strreverse(BYVAL AS gchar PTR) AS gchar PTR
DECLARE FUNCTION g_strrstr(BYVAL AS const gchar PTR, BYVAL AS const gchar PTR) AS gchar PTR
DECLARE FUNCTION g_strrstr_len(BYVAL AS const gchar PTR, BYVAL AS gssize, BYVAL AS const gchar PTR) AS gchar PTR
DECLARE FUNCTION g_strsignal(BYVAL AS gint) AS const gchar PTR
DECLARE FUNCTION g_strsplit(BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS gint) AS gchar PTR PTR
DECLARE FUNCTION g_strsplit_set(BYVAL AS const gchar PTR, BYVAL AS const gchar PTR, BYVAL AS gint) AS gchar PTR PTR
DECLARE FUNCTION g_strstr_len(BYVAL AS const gchar PTR, BYVAL AS gssize, BYVAL AS const gchar PTR) AS gchar PTR
DECLARE FUNCTION g_strtod(BYVAL AS const gchar PTR, BYVAL AS gchar PTR PTR) AS gdouble
DECLARE FUNCTION g_strup(BYVAL AS gchar PTR) AS gchar PTR
DECLARE FUNCTION g_strv_contains(BYVAL AS const gchar PTR const /'const gchar* const'/ PTR, BYVAL AS const gchar PTR) AS gboolean
DECLARE FUNCTION g_strv_equal(BYVAL AS const gchar PTR const /'const gchar* const'/ PTR, BYVAL AS const gchar PTR const /'const gchar* const'/ PTR) AS gboolean
DECLARE FUNCTION g_strv_get_type() AS GType
DECLARE FUNCTION g_strv_length(BYVAL AS gchar PTR PTR) AS guint
DECLARE SUB g_test_add_data_func(BYVAL AS const char PTR, BYVAL AS gconstpointer, BYVAL AS GTestDataFunc)
DECLARE SUB g_test_add_data_func_full(BYVAL AS const char PTR, BYVAL AS gpointer, BYVAL AS GTestDataFunc, BYVAL AS GDestroyNotify)
DECLARE SUB g_test_add_func(BYVAL AS const char PTR, BYVAL AS GTestFunc)
DECLARE SUB g_test_add_vtable(BYVAL AS const char PTR, BYVAL AS gsize, BYVAL AS gconstpointer, BYVAL AS GTestFixtureFunc, BYVAL AS GTestFixtureFunc, BYVAL AS GTestFixtureFunc)
DECLARE SUB g_test_assert_expected_messages_internal(BYVAL AS const char PTR, BYVAL AS const char PTR, BYVAL AS gint /'int'/, BYVAL AS const char PTR)
DECLARE SUB g_test_bug(BYVAL AS const char PTR)
DECLARE SUB g_test_bug_base(BYVAL AS const char PTR)
DECLARE FUNCTION g_test_build_filename(BYVAL AS GTestFileType, BYVAL AS const gchar PTR, ...) AS gchar PTR
DECLARE FUNCTION g_test_create_case(BYVAL AS const char PTR, BYVAL AS gsize, BYVAL AS gconstpointer, BYVAL AS GTestFixtureFunc, BYVAL AS GTestFixtureFunc, BYVAL AS GTestFixtureFunc) AS GTestCase PTR
DECLARE FUNCTION g_test_create_suite(BYVAL AS const char PTR) AS GTestSuite PTR
DECLARE SUB g_test_expect_message(BYVAL AS const gchar PTR, BYVAL AS GLogLevelFlags, BYVAL AS const gchar PTR)
DECLARE SUB g_test_fail()
DECLARE FUNCTION g_test_failed() AS gboolean
DECLARE FUNCTION g_test_get_dir(BYVAL AS GTestFileType) AS const gchar PTR
DECLARE FUNCTION g_test_get_filename(BYVAL AS GTestFileType, BYVAL AS const gchar PTR, ...) AS const gchar PTR
DECLARE FUNCTION g_test_get_root() AS GTestSuite PTR
DECLARE SUB g_test_incomplete(BYVAL AS const gchar PTR)
DECLARE SUB g_test_init(BYVAL AS gint /'int'/ PTR, BYVAL AS char PTR PTR PTR, ...)
DECLARE SUB g_test_log_set_fatal_handler(BYVAL AS GTestLogFatalFunc, BYVAL AS gpointer)
DECLARE FUNCTION g_test_log_type_name(BYVAL AS GTestLogType) AS const char PTR
DECLARE SUB g_test_maximized_result(BYVAL AS double, BYVAL AS const char PTR, ...)
DECLARE SUB g_test_message(BYVAL AS const char PTR, ...)
DECLARE SUB g_test_minimized_result(BYVAL AS double, BYVAL AS const char PTR, ...)
DECLARE SUB g_test_queue_destroy(BYVAL AS GDestroyNotify, BYVAL AS gpointer)
DECLARE SUB g_test_queue_free(BYVAL AS gpointer)
DECLARE FUNCTION g_test_rand_double() AS double
DECLARE FUNCTION g_test_rand_double_range(BYVAL AS double, BYVAL AS double) AS double
DECLARE FUNCTION g_test_rand_int() AS gint32
DECLARE FUNCTION g_test_rand_int_range(BYVAL AS gint32, BYVAL AS gint32) AS gint32
DECLARE FUNCTION g_test_run() AS gint /'int'/
DECLARE FUNCTION g_test_run_suite(BYVAL AS GTestSuite PTR) AS gint /'int'/
DECLARE SUB g_test_set_nonfatal_assertions()
DECLARE SUB g_test_skip(BYVAL AS const gchar PTR)
DECLARE FUNCTION g_test_subprocess() AS gboolean
DECLARE SUB g_test_summary(BYVAL AS const char PTR)
DECLARE FUNCTION g_test_timer_elapsed() AS double
DECLARE FUNCTION g_test_timer_last() AS double
DECLARE SUB g_test_timer_start()
DECLARE SUB g_test_trap_assertions(BYVAL AS const char PTR, BYVAL AS const char PTR, BYVAL AS gint /'int'/, BYVAL AS const char PTR, BYVAL AS guint64, BYVAL AS const char PTR)
DECLARE FUNCTION g_test_trap_fork(BYVAL AS guint64, BYVAL AS GTestTrapFlags) AS gboolean
DECLARE FUNCTION g_test_trap_has_passed() AS gboolean
DECLARE FUNCTION g_test_trap_reached_timeout() AS gboolean
DECLARE SUB g_test_trap_subprocess(BYVAL AS const char PTR, BYVAL AS guint64, BYVAL AS GTestSubprocessFlags)
DECLARE FUNCTION g_timeout_add(BYVAL AS guint, BYVAL AS GSourceFunc, BYVAL AS gpointer) AS guint
DECLARE FUNCTION g_timeout_add_full(BYVAL AS gint, BYVAL AS guint, BYVAL AS GSourceFunc, BYVAL AS gpointer, BYVAL AS GDestroyNotify) AS guint
DECLARE FUNCTION g_timeout_add_seconds(BYVAL AS guint, BYVAL AS GSourceFunc, BYVAL AS gpointer) AS guint
DECLARE FUNCTION g_timeout_add_seconds_full(BYVAL AS gint, BYVAL AS guint, BYVAL AS GSourceFunc, BYVAL AS gpointer, BYVAL AS GDestroyNotify) AS guint
DECLARE FUNCTION g_timeout_source_new(BYVAL AS guint) AS GSource PTR
DECLARE FUNCTION g_timeout_source_new_seconds(BYVAL AS guint) AS GSource PTR
DECLARE FUNCTION g_try_malloc(BYVAL AS gsize) AS gpointer
DECLARE FUNCTION g_try_malloc0(BYVAL AS gsize) AS gpointer
DECLARE FUNCTION g_try_malloc0_n(BYVAL AS gsize, BYVAL AS gsize) AS gpointer
DECLARE FUNCTION g_try_malloc_n(BYVAL AS gsize, BYVAL AS gsize) AS gpointer
DECLARE FUNCTION g_try_realloc(BYVAL AS gpointer, BYVAL AS gsize) AS gpointer
DECLARE FUNCTION g_try_realloc_n(BYVAL AS gpointer, BYVAL AS gsize, BYVAL AS gsize) AS gpointer
DECLARE FUNCTION g_ucs4_to_utf16(BYVAL AS const gunichar PTR, BYVAL AS glong, BYVAL AS glong PTR, BYVAL AS glong PTR, BYVAL AS GError PTR PTR) AS gunichar2 PTR
DECLARE FUNCTION g_ucs4_to_utf8(BYVAL AS const gunichar PTR, BYVAL AS glong, BYVAL AS glong PTR, BYVAL AS glong PTR, BYVAL AS GError PTR PTR) AS gchar PTR
DECLARE FUNCTION g_unichar_break_type(BYVAL AS gunichar /'?'/) AS GUnicodeBreakType
DECLARE FUNCTION g_unichar_combining_class(BYVAL AS gunichar /'?'/) AS gint
DECLARE FUNCTION g_unichar_compose(BYVAL AS gunichar /'?'/, BYVAL AS gunichar /'?'/, BYVAL AS gunichar PTR) AS gboolean
DECLARE FUNCTION g_unichar_decompose(BYVAL AS gunichar /'?'/, BYVAL AS gunichar PTR, BYVAL AS gunichar PTR) AS gboolean
DECLARE FUNCTION g_unichar_digit_value(BYVAL AS gunichar /'?'/) AS gint
DECLARE FUNCTION g_unichar_fully_decompose(BYVAL AS gunichar /'?'/, BYVAL AS gboolean, BYVAL AS gunichar PTR, BYVAL AS gsize) AS gsize
DECLARE FUNCTION g_unichar_get_mirror_char(BYVAL AS gunichar /'?'/, BYVAL AS gunichar PTR) AS gboolean
DECLARE FUNCTION g_unichar_get_script(BYVAL AS gunichar /'?'/) AS GUnicodeScript
DECLARE FUNCTION g_unichar_isalnum(BYVAL AS gunichar /'?'/) AS gboolean
DECLARE FUNCTION g_unichar_isalpha(BYVAL AS gunichar /'?'/) AS gboolean
DECLARE FUNCTION g_unichar_iscntrl(BYVAL AS gunichar /'?'/) AS gboolean
DECLARE FUNCTION g_unichar_isdefined(BYVAL AS gunichar /'?'/) AS gboolean
DECLARE FUNCTION g_unichar_isdigit(BYVAL AS gunichar /'?'/) AS gboolean
DECLARE FUNCTION g_unichar_isgraph(BYVAL AS gunichar /'?'/) AS gboolean
DECLARE FUNCTION g_unichar_islower(BYVAL AS gunichar /'?'/) AS gboolean
DECLARE FUNCTION g_unichar_ismark(BYVAL AS gunichar /'?'/) AS gboolean
DECLARE FUNCTION g_unichar_isprint(BYVAL AS gunichar /'?'/) AS gboolean
DECLARE FUNCTION g_unichar_ispunct(BYVAL AS gunichar /'?'/) AS gboolean
DECLARE FUNCTION g_unichar_isspace(BYVAL AS gunichar /'?'/) AS gboolean
DECLARE FUNCTION g_unichar_istitle(BYVAL AS gunichar /'?'/) AS gboolean
DECLARE FUNCTION g_unichar_isupper(BYVAL AS gunichar /'?'/) AS gboolean
DECLARE FUNCTION g_unichar_iswide(BYVAL AS gunichar /'?'/) AS gboolean
DECLARE FUNCTION g_unichar_iswide_cjk(BYVAL AS gunichar /'?'/) AS gboolean
DECLARE FUNCTION g_unichar_isxdigit(BYVAL AS gunichar /'?'/) AS gboolean
DECLARE FUNCTION g_unichar_iszerowidth(BYVAL AS gunichar /'?'/) AS gboolean
DECLARE FUNCTION g_unichar_to_utf8(BYVAL AS gunichar /'?'/, BYVAL AS gchar PTR) AS gint
DECLARE FUNCTION g_unichar_tolower(BYVAL AS gunichar /'?'/) AS gunichar /'?'/
DECLARE FUNCTION g_unichar_totitle(BYVAL AS gunichar /'?'/) AS gunichar /'?'/
DECLARE FUNCTION g_unichar_toupper(BYVAL AS gunichar /'?'/) AS gunichar /'?'/
DECLARE FUNCTION g_unichar_type(BYVAL AS gunichar /'?'/) AS GUnicodeType
DECLARE FUNCTION g_unichar_validate(BYVAL AS gunichar /'?'/) AS gboolean
DECLARE FUNCTION g_unichar_xdigit_value(BYVAL AS gunichar /'?'/) AS gint
DECLARE FUNCTION g_unicode_canonical_decomposition(BYVAL AS gunichar /'?'/, BYVAL AS gsize PTR) AS gunichar PTR
DECLARE SUB g_unicode_canonical_ordering(BYVAL AS gunichar PTR, BYVAL AS gsize)
DECLARE FUNCTION g_unicode_script_from_iso15924(BYVAL AS guint32) AS GUnicodeScript
DECLARE FUNCTION g_unicode_script_to_iso15924(BYVAL AS GUnicodeScript) AS guint32
DECLARE FUNCTION g_unix_error_quark() AS GQuark
DECLARE FUNCTION g_unix_fd_add(BYVAL AS gint, BYVAL AS GIOCondition, BYVAL AS GUnixFDSourceFunc, BYVAL AS gpointer) AS guint
DECLARE FUNCTION g_unix_fd_add_full(BYVAL AS gint, BYVAL AS gint, BYVAL AS GIOCondition, BYVAL AS GUnixFDSourceFunc, BYVAL AS gpointer, BYVAL AS GDestroyNotify) AS guint
DECLARE FUNCTION g_unix_fd_source_new(BYVAL AS gint, BYVAL AS GIOCondition) AS GSource PTR
DECLARE FUNCTION g_unix_get_passwd_entry(BYVAL AS const gchar PTR, BYVAL AS GError PTR PTR) AS any /'passwd'/ PTR
DECLARE FUNCTION g_unix_open_pipe(BYVAL AS gint PTR, BYVAL AS gint, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION g_unix_set_fd_nonblocking(BYVAL AS gint, BYVAL AS gboolean, BYVAL AS GError PTR PTR) AS gboolean
DECLARE FUNCTION g_unix_signal_add(BYVAL AS gint, BYVAL AS GSourceFunc, BYVAL AS gpointer) AS guint
DECLARE FUNCTION g_unix_signal_add_full(BYVAL AS gint, BYVAL AS gint, BYVAL AS GSourceFunc, BYVAL AS gpointer, BYVAL AS GDestroyNotify) AS guint
DECLARE FUNCTION g_unix_signal_source_new(BYVAL AS gint) AS GSource PTR
DECLARE FUNCTION g_unlink(BYVAL AS const gchar PTR) AS gint /'int'/
DECLARE SUB g_unsetenv(BYVAL AS const gchar PTR)
DECLARE FUNCTION g_uri_escape_string(BYVAL AS const char PTR, BYVAL AS const char PTR, BYVAL AS gboolean) AS char PTR
DECLARE FUNCTION g_uri_list_extract_uris(BYVAL AS const gchar PTR) AS gchar PTR PTR
DECLARE FUNCTION g_uri_parse_scheme(BYVAL AS const char PTR) AS char PTR
DECLARE FUNCTION g_uri_unescape_segment(BYVAL AS const char PTR, BYVAL AS const char PTR, BYVAL AS const char PTR) AS char PTR
DECLARE FUNCTION g_uri_unescape_string(BYVAL AS const char PTR, BYVAL AS const char PTR) AS char PTR
DECLARE SUB g_usleep(BYVAL AS gulong)
DECLARE FUNCTION g_utf16_to_ucs4(BYVAL AS const gunichar2 PTR, BYVAL AS glong, BYVAL AS glong PTR, BYVAL AS glong PTR, BYVAL AS GError PTR PTR) AS gunichar PTR
DECLARE FUNCTION g_utf16_to_utf8(BYVAL AS const gunichar2 PTR, BYVAL AS glong, BYVAL AS glong PTR, BYVAL AS glong PTR, BYVAL AS GError PTR PTR) AS gchar PTR
DECLARE FUNCTION g_utf8_casefold(BYVAL AS const gchar PTR, BYVAL AS gssize) AS gchar PTR
DECLARE FUNCTION g_utf8_collate(BYVAL AS const gchar PTR, BYVAL AS const gchar PTR) AS gint
DECLARE FUNCTION g_utf8_collate_key(BYVAL AS const gchar PTR, BYVAL AS gssize) AS gchar PTR
DECLARE FUNCTION g_utf8_collate_key_for_filename(BYVAL AS const gchar PTR, BYVAL AS gssize) AS gchar PTR
DECLARE FUNCTION g_utf8_find_next_char(BYVAL AS const gchar PTR, BYVAL AS const gchar PTR) AS gchar PTR
DECLARE FUNCTION g_utf8_find_prev_char(BYVAL AS const gchar PTR, BYVAL AS const gchar PTR) AS gchar PTR
DECLARE FUNCTION g_utf8_get_char(BYVAL AS const gchar PTR) AS gunichar /'?'/
DECLARE FUNCTION g_utf8_get_char_validated(BYVAL AS const gchar PTR, BYVAL AS gssize) AS gunichar /'?'/
DECLARE FUNCTION g_utf8_make_valid(BYVAL AS const gchar PTR, BYVAL AS gssize) AS gchar PTR
DECLARE FUNCTION g_utf8_normalize(BYVAL AS const gchar PTR, BYVAL AS gssize, BYVAL AS GNormalizeMode) AS gchar PTR
DECLARE FUNCTION g_utf8_offset_to_pointer(BYVAL AS const gchar PTR, BYVAL AS glong) AS gchar PTR
DECLARE FUNCTION g_utf8_pointer_to_offset(BYVAL AS const gchar PTR, BYVAL AS const gchar PTR) AS glong
DECLARE FUNCTION g_utf8_prev_char(BYVAL AS const gchar PTR) AS gchar PTR
DECLARE FUNCTION g_utf8_strchr(BYVAL AS const gchar PTR, BYVAL AS gssize, BYVAL AS gunichar /'?'/) AS gchar PTR
DECLARE FUNCTION g_utf8_strdown(BYVAL AS const gchar PTR, BYVAL AS gssize) AS gchar PTR
DECLARE FUNCTION g_utf8_strlen(BYVAL AS const gchar PTR, BYVAL AS gssize) AS glong
DECLARE FUNCTION g_utf8_strncpy(BYVAL AS gchar PTR, BYVAL AS const gchar PTR, BYVAL AS gsize) AS gchar PTR
DECLARE FUNCTION g_utf8_strrchr(BYVAL AS const gchar PTR, BYVAL AS gssize, BYVAL AS gunichar /'?'/) AS gchar PTR
DECLARE FUNCTION g_utf8_strreverse(BYVAL AS const gchar PTR, BYVAL AS gssize) AS gchar PTR
DECLARE FUNCTION g_utf8_strup(BYVAL AS const gchar PTR, BYVAL AS gssize) AS gchar PTR
DECLARE FUNCTION g_utf8_substring(BYVAL AS const gchar PTR, BYVAL AS glong, BYVAL AS glong) AS gchar PTR
DECLARE FUNCTION g_utf8_to_ucs4(BYVAL AS const gchar PTR, BYVAL AS glong, BYVAL AS glong PTR, BYVAL AS glong PTR, BYVAL AS GError PTR PTR) AS gunichar PTR
DECLARE FUNCTION g_utf8_to_ucs4_fast(BYVAL AS const gchar PTR, BYVAL AS glong, BYVAL AS glong PTR) AS gunichar PTR
DECLARE FUNCTION g_utf8_to_utf16(BYVAL AS const gchar PTR, BYVAL AS glong, BYVAL AS glong PTR, BYVAL AS glong PTR, BYVAL AS GError PTR PTR) AS gunichar2 PTR
DECLARE FUNCTION g_utf8_validate(BYVAL AS const gchar PTR, BYVAL AS gssize, BYVAL AS const gchar PTR PTR) AS gboolean
DECLARE FUNCTION g_utf8_validate_len(BYVAL AS const gchar PTR, BYVAL AS gsize, BYVAL AS const gchar PTR PTR) AS gboolean
DECLARE FUNCTION g_uuid_string_is_valid(BYVAL AS const gchar PTR) AS gboolean
DECLARE FUNCTION g_uuid_string_random() AS gchar PTR
DECLARE FUNCTION g_variant_get_gtype() AS GType
DECLARE FUNCTION g_vasprintf(BYVAL AS gchar PTR PTR, BYVAL AS const gchar PTR, BYVAL AS va_list) AS gint
DECLARE FUNCTION g_vfprintf(BYVAL AS FILE PTR, BYVAL AS const gchar PTR, BYVAL AS va_list) AS gint
DECLARE FUNCTION g_vprintf(BYVAL AS const gchar PTR, BYVAL AS va_list) AS gint
DECLARE FUNCTION g_vsnprintf(BYVAL AS gchar PTR, BYVAL AS gulong, BYVAL AS const gchar PTR, BYVAL AS va_list) AS gint
DECLARE FUNCTION g_vsprintf(BYVAL AS gchar PTR, BYVAL AS const gchar PTR, BYVAL AS va_list) AS gint
DECLARE SUB g_warn_message(BYVAL AS const char PTR, BYVAL AS const char PTR, BYVAL AS gint /'int'/, BYVAL AS const char PTR, BYVAL AS const char PTR)
END EXTERN

